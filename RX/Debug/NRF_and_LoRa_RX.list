
NRF_and_LoRa_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00006e40  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000914  08006f4c  08006f4c  00016f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007860  08007860  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  08007860  08007860  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007860  08007860  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007860  08007860  00017860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007864  08007864  00017864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08007868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000081c  200000ac  08007914  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008c8  08007914  000208c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017864  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000300f  00000000  00000000  00037939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  0003a948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  0003bc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199f4  00000000  00000000  0003ced0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017fa1  00000000  00000000  000568c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000903fd  00000000  00000000  0006e865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fec62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005584  00000000  00000000  000fecb8  2**2
=======
  1 .text         0000566c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  08005778  08005778  00015778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fac  08005fac  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08005fac  08005fac  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fac  08005fac  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fac  08005fac  00015fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fb0  08005fb0  00015fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000063c  20000088  0800603c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  0800603c  000206c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ef5  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca6  00000000  00000000  00035fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  00038c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  00039f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000317d  00000000  00000000  0003b140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b2f  00000000  00000000  0003e2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000902c7  00000000  00000000  00054dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e50b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f8  00000000  00000000  000e5108  2**2
>>>>>>> FFF
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
<<<<<<< HEAD
 8000124:	200000ac 	.word	0x200000ac
 8000128:	00000000 	.word	0x00000000
 800012c:	08006f34 	.word	0x08006f34
=======
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08005760 	.word	0x08005760
>>>>>>> FFF

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000144:	200000b0 	.word	0x200000b0
 8000148:	08006f34 	.word	0x08006f34

0800014c <LoRa_RX>:
extern bool flag_command_received;		// Flag show status receive data (completed/not completed)
extern char uart_rx_data[50];			// Main rx buffer data

//----------------------------------------------------------------------------------------
void LoRa_RX(bool flag)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	static bool flag_first_time = true;		// Trigger variable

	if((flag_first_time == true) && (flag == true))
 8000156:	4b3e      	ldr	r3, [pc, #248]	; (8000250 <LoRa_RX+0x104>)
 8000158:	781b      	ldrb	r3, [r3, #0]
 800015a:	2b00      	cmp	r3, #0
 800015c:	d029      	beq.n	80001b2 <LoRa_RX+0x66>
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	2b00      	cmp	r3, #0
 8000162:	d026      	beq.n	80001b2 <LoRa_RX+0x66>
	{
		// state_machine
		HAL_Delay(100);
 8000164:	2064      	movs	r0, #100	; 0x64
 8000166:	f002 ff7b 	bl	8003060 <HAL_Delay>
		init_lora_RX();
 800016a:	f000 fa0b 	bl	8000584 <init_lora_RX>
		HAL_Delay(500);
 800016e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000172:	f002 ff75 	bl	8003060 <HAL_Delay>

		ssd1306_SetCursor(0, 16);
 8000176:	2110      	movs	r1, #16
 8000178:	2000      	movs	r0, #0
 800017a:	f001 f93f 	bl	80013fc <ssd1306_SetCursor>
		strcpy(test_main, "RX data: ");
 800017e:	4b35      	ldr	r3, [pc, #212]	; (8000254 <LoRa_RX+0x108>)
 8000180:	4a35      	ldr	r2, [pc, #212]	; (8000258 <LoRa_RX+0x10c>)
 8000182:	ca07      	ldmia	r2, {r0, r1, r2}
 8000184:	c303      	stmia	r3!, {r0, r1}
 8000186:	801a      	strh	r2, [r3, #0]
		ssd1306_WriteString(test_main,  Font_7x10, White);
 8000188:	4a34      	ldr	r2, [pc, #208]	; (800025c <LoRa_RX+0x110>)
 800018a:	2301      	movs	r3, #1
 800018c:	ca06      	ldmia	r2, {r1, r2}
 800018e:	4831      	ldr	r0, [pc, #196]	; (8000254 <LoRa_RX+0x108>)
 8000190:	f001 f90e 	bl	80013b0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000194:	f000 fffc 	bl	8001190 <ssd1306_UpdateScreen>

		HAL_UART_Receive_IT(&huart1, str, 1);
 8000198:	2201      	movs	r2, #1
 800019a:	4931      	ldr	r1, [pc, #196]	; (8000260 <LoRa_RX+0x114>)
 800019c:	4831      	ldr	r0, [pc, #196]	; (8000264 <LoRa_RX+0x118>)
 800019e:	f005 fdc8 	bl	8005d32 <HAL_UART_Receive_IT>
		memset(test_main, 0, sizeof(test_main));
 80001a2:	2214      	movs	r2, #20
 80001a4:	2100      	movs	r1, #0
 80001a6:	482b      	ldr	r0, [pc, #172]	; (8000254 <LoRa_RX+0x108>)
 80001a8:	f006 fa24 	bl	80065f4 <memset>
		flag_first_time = false;
 80001ac:	4b28      	ldr	r3, [pc, #160]	; (8000250 <LoRa_RX+0x104>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	701a      	strb	r2, [r3, #0]
	}
	if((flag_first_time == false) && (flag == true))
 80001b2:	4b27      	ldr	r3, [pc, #156]	; (8000250 <LoRa_RX+0x104>)
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	f083 0301 	eor.w	r3, r3, #1
 80001ba:	b2db      	uxtb	r3, r3
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d039      	beq.n	8000234 <LoRa_RX+0xe8>
 80001c0:	79fb      	ldrb	r3, [r7, #7]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d036      	beq.n	8000234 <LoRa_RX+0xe8>
	{
		if(flag_command_received == true)			// If data is ready
 80001c6:	4b28      	ldr	r3, [pc, #160]	; (8000268 <LoRa_RX+0x11c>)
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d032      	beq.n	8000234 <LoRa_RX+0xe8>
		{
			// Data received

			//   Print on OLED
			char clearn_array[10] = "         ";
 80001ce:	4a27      	ldr	r2, [pc, #156]	; (800026c <LoRa_RX+0x120>)
 80001d0:	f107 030c 	add.w	r3, r7, #12
 80001d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80001d6:	c303      	stmia	r3!, {r0, r1}
 80001d8:	801a      	strh	r2, [r3, #0]
			ssd1306_SetCursor(60, 16);
 80001da:	2110      	movs	r1, #16
 80001dc:	203c      	movs	r0, #60	; 0x3c
 80001de:	f001 f90d 	bl	80013fc <ssd1306_SetCursor>

			ssd1306_WriteString(clearn_array,  Font_7x10, White);
 80001e2:	4a1e      	ldr	r2, [pc, #120]	; (800025c <LoRa_RX+0x110>)
 80001e4:	f107 000c 	add.w	r0, r7, #12
 80001e8:	2301      	movs	r3, #1
 80001ea:	ca06      	ldmia	r2, {r1, r2}
 80001ec:	f001 f8e0 	bl	80013b0 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80001f0:	f000 ffce 	bl	8001190 <ssd1306_UpdateScreen>

			ssd1306_SetCursor(60, 16);
 80001f4:	2110      	movs	r1, #16
 80001f6:	203c      	movs	r0, #60	; 0x3c
 80001f8:	f001 f900 	bl	80013fc <ssd1306_SetCursor>
			strcpy(test_main, uart_rx_data);
 80001fc:	491c      	ldr	r1, [pc, #112]	; (8000270 <LoRa_RX+0x124>)
 80001fe:	4815      	ldr	r0, [pc, #84]	; (8000254 <LoRa_RX+0x108>)
 8000200:	f006 fae5 	bl	80067ce <strcpy>

			ssd1306_WriteString(test_main,  Font_7x10, White);
 8000204:	4a15      	ldr	r2, [pc, #84]	; (800025c <LoRa_RX+0x110>)
 8000206:	2301      	movs	r3, #1
 8000208:	ca06      	ldmia	r2, {r1, r2}
 800020a:	4812      	ldr	r0, [pc, #72]	; (8000254 <LoRa_RX+0x108>)
 800020c:	f001 f8d0 	bl	80013b0 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000210:	f000 ffbe 	bl	8001190 <ssd1306_UpdateScreen>

			HAL_Delay(100);
 8000214:	2064      	movs	r0, #100	; 0x64
 8000216:	f002 ff23 	bl	8003060 <HAL_Delay>
			memset(uart_rx_data, 0, sizeof(uart_rx_data));
 800021a:	2232      	movs	r2, #50	; 0x32
 800021c:	2100      	movs	r1, #0
 800021e:	4814      	ldr	r0, [pc, #80]	; (8000270 <LoRa_RX+0x124>)
 8000220:	f006 f9e8 	bl	80065f4 <memset>
			flag_command_received = false;
 8000224:	4b10      	ldr	r3, [pc, #64]	; (8000268 <LoRa_RX+0x11c>)
 8000226:	2200      	movs	r2, #0
 8000228:	701a      	strb	r2, [r3, #0]

			HAL_UART_Receive_IT(&huart1, str, 1);		// Start interrupt again
 800022a:	2201      	movs	r2, #1
 800022c:	490c      	ldr	r1, [pc, #48]	; (8000260 <LoRa_RX+0x114>)
 800022e:	480d      	ldr	r0, [pc, #52]	; (8000264 <LoRa_RX+0x118>)
 8000230:	f005 fd7f 	bl	8005d32 <HAL_UART_Receive_IT>
		}
	}
	if(flag == false)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f083 0301 	eor.w	r3, r3, #1
 800023a:	b2db      	uxtb	r3, r3
 800023c:	2b00      	cmp	r3, #0
 800023e:	d002      	beq.n	8000246 <LoRa_RX+0xfa>
	{
		flag_first_time = true;
 8000240:	4b03      	ldr	r3, [pc, #12]	; (8000250 <LoRa_RX+0x104>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
	}
}
 8000246:	bf00      	nop
 8000248:	3718      	adds	r7, #24
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	20000000 	.word	0x20000000
 8000254:	200000c8 	.word	0x200000c8
 8000258:	08006f4c 	.word	0x08006f4c
 800025c:	20000014 	.word	0x20000014
 8000260:	20000594 	.word	0x20000594
 8000264:	20000644 	.word	0x20000644
 8000268:	20000595 	.word	0x20000595
 800026c:	08006f58 	.word	0x08006f58
 8000270:	20000560 	.word	0x20000560

08000274 <LoRa_TX>:
//----------------------------------------------------------------------------------------
void LoRa_TX(bool flag)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
	static bool flag_first_time = true;		// Trigger variable
	static int transmit_count = 0;			// Variable for transmit
	if((flag_first_time == true) && (flag == true))
 800027e:	4b34      	ldr	r3, [pc, #208]	; (8000350 <LoRa_TX+0xdc>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d024      	beq.n	80002d0 <LoRa_TX+0x5c>
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d021      	beq.n	80002d0 <LoRa_TX+0x5c>
	{
		HAL_Delay(100);
 800028c:	2064      	movs	r0, #100	; 0x64
 800028e:	f002 fee7 	bl	8003060 <HAL_Delay>
		init_lora_TX();
 8000292:	f000 f92f 	bl	80004f4 <init_lora_TX>
		HAL_Delay(500);
 8000296:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800029a:	f002 fee1 	bl	8003060 <HAL_Delay>

		ssd1306_SetCursor(0, 16);
 800029e:	2110      	movs	r1, #16
 80002a0:	2000      	movs	r0, #0
 80002a2:	f001 f8ab 	bl	80013fc <ssd1306_SetCursor>
		strcpy(test_main, "TX data: ");
 80002a6:	4b2b      	ldr	r3, [pc, #172]	; (8000354 <LoRa_TX+0xe0>)
 80002a8:	4a2b      	ldr	r2, [pc, #172]	; (8000358 <LoRa_TX+0xe4>)
 80002aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ac:	c303      	stmia	r3!, {r0, r1}
 80002ae:	801a      	strh	r2, [r3, #0]
		ssd1306_WriteString(test_main,  Font_7x10, White);
 80002b0:	4a2a      	ldr	r2, [pc, #168]	; (800035c <LoRa_TX+0xe8>)
 80002b2:	2301      	movs	r3, #1
 80002b4:	ca06      	ldmia	r2, {r1, r2}
 80002b6:	4827      	ldr	r0, [pc, #156]	; (8000354 <LoRa_TX+0xe0>)
 80002b8:	f001 f87a 	bl	80013b0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80002bc:	f000 ff68 	bl	8001190 <ssd1306_UpdateScreen>

		HAL_UART_Receive_IT(&huart1, str, 1);
 80002c0:	2201      	movs	r2, #1
 80002c2:	4927      	ldr	r1, [pc, #156]	; (8000360 <LoRa_TX+0xec>)
 80002c4:	4827      	ldr	r0, [pc, #156]	; (8000364 <LoRa_TX+0xf0>)
 80002c6:	f005 fd34 	bl	8005d32 <HAL_UART_Receive_IT>
		flag_first_time = false;
 80002ca:	4b21      	ldr	r3, [pc, #132]	; (8000350 <LoRa_TX+0xdc>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	701a      	strb	r2, [r3, #0]
	}
	if((flag_first_time == false) && (flag == true))
 80002d0:	4b1f      	ldr	r3, [pc, #124]	; (8000350 <LoRa_TX+0xdc>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	f083 0301 	eor.w	r3, r3, #1
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d027      	beq.n	800032e <LoRa_TX+0xba>
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d024      	beq.n	800032e <LoRa_TX+0xba>
	{
		int count = lora_transmit_data(transmit_count);
 80002e4:	4b20      	ldr	r3, [pc, #128]	; (8000368 <LoRa_TX+0xf4>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 f841 	bl	8000370 <lora_transmit_data>
 80002ee:	60f8      	str	r0, [r7, #12]
		transmit_count ++;
 80002f0:	4b1d      	ldr	r3, [pc, #116]	; (8000368 <LoRa_TX+0xf4>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	3301      	adds	r3, #1
 80002f6:	4a1c      	ldr	r2, [pc, #112]	; (8000368 <LoRa_TX+0xf4>)
 80002f8:	6013      	str	r3, [r2, #0]
		// Print transmeeting data
		memset(test_main, 0, sizeof(test_main));
 80002fa:	2214      	movs	r2, #20
 80002fc:	2100      	movs	r1, #0
 80002fe:	4815      	ldr	r0, [pc, #84]	; (8000354 <LoRa_TX+0xe0>)
 8000300:	f006 f978 	bl	80065f4 <memset>
		ssd1306_SetCursor(60, 16);
 8000304:	2110      	movs	r1, #16
 8000306:	203c      	movs	r0, #60	; 0x3c
 8000308:	f001 f878 	bl	80013fc <ssd1306_SetCursor>
		sprintf(test_main, "%d", count);
 800030c:	68fa      	ldr	r2, [r7, #12]
 800030e:	4917      	ldr	r1, [pc, #92]	; (800036c <LoRa_TX+0xf8>)
 8000310:	4810      	ldr	r0, [pc, #64]	; (8000354 <LoRa_TX+0xe0>)
 8000312:	f006 fa2d 	bl	8006770 <siprintf>
		ssd1306_WriteString(test_main,  Font_7x10, White);
 8000316:	4a11      	ldr	r2, [pc, #68]	; (800035c <LoRa_TX+0xe8>)
 8000318:	2301      	movs	r3, #1
 800031a:	ca06      	ldmia	r2, {r1, r2}
 800031c:	480d      	ldr	r0, [pc, #52]	; (8000354 <LoRa_TX+0xe0>)
 800031e:	f001 f847 	bl	80013b0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000322:	f000 ff35 	bl	8001190 <ssd1306_UpdateScreen>

		HAL_Delay(2000);			// Must be more than 1.5 sec
 8000326:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800032a:	f002 fe99 	bl	8003060 <HAL_Delay>
	}
	if(flag == false)
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	f083 0301 	eor.w	r3, r3, #1
 8000334:	b2db      	uxtb	r3, r3
 8000336:	2b00      	cmp	r3, #0
 8000338:	d005      	beq.n	8000346 <LoRa_TX+0xd2>
	{
		flag_first_time = true;
 800033a:	4b05      	ldr	r3, [pc, #20]	; (8000350 <LoRa_TX+0xdc>)
 800033c:	2201      	movs	r2, #1
 800033e:	701a      	strb	r2, [r3, #0]
		transmit_count = 0;
 8000340:	4b09      	ldr	r3, [pc, #36]	; (8000368 <LoRa_TX+0xf4>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
	}


}
 8000346:	bf00      	nop
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000001 	.word	0x20000001
 8000354:	200000c8 	.word	0x200000c8
 8000358:	08006f64 	.word	0x08006f64
 800035c:	20000014 	.word	0x20000014
 8000360:	20000594 	.word	0x20000594
 8000364:	20000644 	.word	0x20000644
 8000368:	200000dc 	.word	0x200000dc
 800036c:	08006f70 	.word	0x08006f70

08000370 <lora_transmit_data>:
//----------------------------------------------------------------------------------------
int lora_transmit_data(int transmit_count)    // Rename
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
//	static int transmit_count = 0;			// Variable for transmit
	static uint8_t data[10] = {0};

	//transmit_count++;

	data[5] = '0' + transmit_count%10;
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	4b48      	ldr	r3, [pc, #288]	; (800049c <lora_transmit_data+0x12c>)
 800037c:	fb83 1302 	smull	r1, r3, r3, r2
 8000380:	1099      	asrs	r1, r3, #2
 8000382:	17d3      	asrs	r3, r2, #31
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	460b      	mov	r3, r1
 8000388:	009b      	lsls	r3, r3, #2
 800038a:	440b      	add	r3, r1
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	1ad1      	subs	r1, r2, r3
 8000390:	b2cb      	uxtb	r3, r1
 8000392:	3330      	adds	r3, #48	; 0x30
 8000394:	b2da      	uxtb	r2, r3
 8000396:	4b42      	ldr	r3, [pc, #264]	; (80004a0 <lora_transmit_data+0x130>)
 8000398:	715a      	strb	r2, [r3, #5]
	data[4] = '0' + (transmit_count/10) % 10;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a3f      	ldr	r2, [pc, #252]	; (800049c <lora_transmit_data+0x12c>)
 800039e:	fb82 1203 	smull	r1, r2, r2, r3
 80003a2:	1092      	asrs	r2, r2, #2
 80003a4:	17db      	asrs	r3, r3, #31
 80003a6:	1ad2      	subs	r2, r2, r3
 80003a8:	4b3c      	ldr	r3, [pc, #240]	; (800049c <lora_transmit_data+0x12c>)
 80003aa:	fb83 1302 	smull	r1, r3, r3, r2
 80003ae:	1099      	asrs	r1, r3, #2
 80003b0:	17d3      	asrs	r3, r2, #31
 80003b2:	1ac9      	subs	r1, r1, r3
 80003b4:	460b      	mov	r3, r1
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	440b      	add	r3, r1
 80003ba:	005b      	lsls	r3, r3, #1
 80003bc:	1ad1      	subs	r1, r2, r3
 80003be:	b2cb      	uxtb	r3, r1
 80003c0:	3330      	adds	r3, #48	; 0x30
 80003c2:	b2da      	uxtb	r2, r3
 80003c4:	4b36      	ldr	r3, [pc, #216]	; (80004a0 <lora_transmit_data+0x130>)
 80003c6:	711a      	strb	r2, [r3, #4]
	data[3] = '0' + (transmit_count/100) % 10;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a36      	ldr	r2, [pc, #216]	; (80004a4 <lora_transmit_data+0x134>)
 80003cc:	fb82 1203 	smull	r1, r2, r2, r3
 80003d0:	1152      	asrs	r2, r2, #5
 80003d2:	17db      	asrs	r3, r3, #31
 80003d4:	1ad2      	subs	r2, r2, r3
 80003d6:	4b31      	ldr	r3, [pc, #196]	; (800049c <lora_transmit_data+0x12c>)
 80003d8:	fb83 1302 	smull	r1, r3, r3, r2
 80003dc:	1099      	asrs	r1, r3, #2
 80003de:	17d3      	asrs	r3, r2, #31
 80003e0:	1ac9      	subs	r1, r1, r3
 80003e2:	460b      	mov	r3, r1
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	440b      	add	r3, r1
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	1ad1      	subs	r1, r2, r3
 80003ec:	b2cb      	uxtb	r3, r1
 80003ee:	3330      	adds	r3, #48	; 0x30
 80003f0:	b2da      	uxtb	r2, r3
 80003f2:	4b2b      	ldr	r3, [pc, #172]	; (80004a0 <lora_transmit_data+0x130>)
 80003f4:	70da      	strb	r2, [r3, #3]
	data[2] = '0' + (transmit_count/1000) % 10;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a2b      	ldr	r2, [pc, #172]	; (80004a8 <lora_transmit_data+0x138>)
 80003fa:	fb82 1203 	smull	r1, r2, r2, r3
 80003fe:	1192      	asrs	r2, r2, #6
 8000400:	17db      	asrs	r3, r3, #31
 8000402:	1ad2      	subs	r2, r2, r3
 8000404:	4b25      	ldr	r3, [pc, #148]	; (800049c <lora_transmit_data+0x12c>)
 8000406:	fb83 1302 	smull	r1, r3, r3, r2
 800040a:	1099      	asrs	r1, r3, #2
 800040c:	17d3      	asrs	r3, r2, #31
 800040e:	1ac9      	subs	r1, r1, r3
 8000410:	460b      	mov	r3, r1
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	440b      	add	r3, r1
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	1ad1      	subs	r1, r2, r3
 800041a:	b2cb      	uxtb	r3, r1
 800041c:	3330      	adds	r3, #48	; 0x30
 800041e:	b2da      	uxtb	r2, r3
 8000420:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <lora_transmit_data+0x130>)
 8000422:	709a      	strb	r2, [r3, #2]
	data[1] = '0' + (transmit_count/10000) % 10;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a21      	ldr	r2, [pc, #132]	; (80004ac <lora_transmit_data+0x13c>)
 8000428:	fb82 1203 	smull	r1, r2, r2, r3
 800042c:	1312      	asrs	r2, r2, #12
 800042e:	17db      	asrs	r3, r3, #31
 8000430:	1ad2      	subs	r2, r2, r3
 8000432:	4b1a      	ldr	r3, [pc, #104]	; (800049c <lora_transmit_data+0x12c>)
 8000434:	fb83 1302 	smull	r1, r3, r3, r2
 8000438:	1099      	asrs	r1, r3, #2
 800043a:	17d3      	asrs	r3, r2, #31
 800043c:	1ac9      	subs	r1, r1, r3
 800043e:	460b      	mov	r3, r1
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	440b      	add	r3, r1
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	1ad1      	subs	r1, r2, r3
 8000448:	b2cb      	uxtb	r3, r1
 800044a:	3330      	adds	r3, #48	; 0x30
 800044c:	b2da      	uxtb	r2, r3
 800044e:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <lora_transmit_data+0x130>)
 8000450:	705a      	strb	r2, [r3, #1]
	data[0] = '0' + (transmit_count/100000) % 10;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a16      	ldr	r2, [pc, #88]	; (80004b0 <lora_transmit_data+0x140>)
 8000456:	fb82 1203 	smull	r1, r2, r2, r3
 800045a:	1352      	asrs	r2, r2, #13
 800045c:	17db      	asrs	r3, r3, #31
 800045e:	1ad2      	subs	r2, r2, r3
 8000460:	4b0e      	ldr	r3, [pc, #56]	; (800049c <lora_transmit_data+0x12c>)
 8000462:	fb83 1302 	smull	r1, r3, r3, r2
 8000466:	1099      	asrs	r1, r3, #2
 8000468:	17d3      	asrs	r3, r2, #31
 800046a:	1ac9      	subs	r1, r1, r3
 800046c:	460b      	mov	r3, r1
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	440b      	add	r3, r1
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	1ad1      	subs	r1, r2, r3
 8000476:	b2cb      	uxtb	r3, r1
 8000478:	3330      	adds	r3, #48	; 0x30
 800047a:	b2da      	uxtb	r2, r3
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <lora_transmit_data+0x130>)
 800047e:	701a      	strb	r2, [r3, #0]
	data[6] = '\0';
 8000480:	4b07      	ldr	r3, [pc, #28]	; (80004a0 <lora_transmit_data+0x130>)
 8000482:	2200      	movs	r2, #0
 8000484:	719a      	strb	r2, [r3, #6]

	HAL_UART_Transmit_IT(&huart1, data, 7);
 8000486:	2207      	movs	r2, #7
 8000488:	4905      	ldr	r1, [pc, #20]	; (80004a0 <lora_transmit_data+0x130>)
 800048a:	480a      	ldr	r0, [pc, #40]	; (80004b4 <lora_transmit_data+0x144>)
 800048c:	f005 fc0d 	bl	8005caa <HAL_UART_Transmit_IT>

	return transmit_count;
 8000490:	687b      	ldr	r3, [r7, #4]
}
 8000492:	4618      	mov	r0, r3
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	66666667 	.word	0x66666667
 80004a0:	200000e0 	.word	0x200000e0
 80004a4:	51eb851f 	.word	0x51eb851f
 80004a8:	10624dd3 	.word	0x10624dd3
 80004ac:	68db8bad 	.word	0x68db8bad
 80004b0:	14f8b589 	.word	0x14f8b589
 80004b4:	20000644 	.word	0x20000644

080004b8 <read_all_settings_from_module>:
//-------------------------------------------------------------------------------------------------
void read_all_settings_from_module(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	// Turn on configuration mode
	set_config_deep_sleep_mode();
 80004bc:	f000 f8c8 	bl	8000650 <set_config_deep_sleep_mode>
	HAL_Delay(10);
 80004c0:	200a      	movs	r0, #10
 80004c2:	f002 fdcd 	bl	8003060 <HAL_Delay>

	static uint8_t data[10] = {0};
	// Read module address, serial port, and airspeed COMMAND
	data[0] = 0xC1;			// 0xC1 - Read register command
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <read_all_settings_from_module+0x34>)
 80004c8:	22c1      	movs	r2, #193	; 0xc1
 80004ca:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;			// Number of register for read
 80004cc:	4b07      	ldr	r3, [pc, #28]	; (80004ec <read_all_settings_from_module+0x34>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	705a      	strb	r2, [r3, #1]
	data[2] = 0x08;			// How many registers must be read
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <read_all_settings_from_module+0x34>)
 80004d4:	2208      	movs	r2, #8
 80004d6:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_IT(&huart1, data, 3);
 80004d8:	2203      	movs	r2, #3
 80004da:	4904      	ldr	r1, [pc, #16]	; (80004ec <read_all_settings_from_module+0x34>)
 80004dc:	4804      	ldr	r0, [pc, #16]	; (80004f0 <read_all_settings_from_module+0x38>)
 80004de:	f005 fbe4 	bl	8005caa <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 80004e2:	2064      	movs	r0, #100	; 0x64
 80004e4:	f002 fdbc 	bl	8003060 <HAL_Delay>

	// Return:
	// 0xC1 0x00 0x03 0x12 0x34 0x62
	// 0x12 0x34 - Adders 1234
	// 0x62 - 9600, 8n1 and 2,4 k air data rate
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	200000ec 	.word	0x200000ec
 80004f0:	20000644 	.word	0x20000644

080004f4 <init_lora_TX>:
//----------------------------------------------------------------------------------------
bool init_lora_TX(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	// з зчитаними даними конфіг регістрів. Якщо співпадає повністю, тоді записати в
	// глобальну змінну що модуль ініціалізований нормально

	static uint8_t data[10] = {0};

	set_config_deep_sleep_mode();
 80004f8:	f000 f8aa 	bl	8000650 <set_config_deep_sleep_mode>
	HAL_Delay(100);
 80004fc:	2064      	movs	r0, #100	; 0x64
 80004fe:	f002 fdaf 	bl	8003060 <HAL_Delay>

	// Init module
	// Descripe settings structure
	data[0] = 0xC0;		// 0xC0 - Set register command
 8000502:	4b1e      	ldr	r3, [pc, #120]	; (800057c <init_lora_TX+0x88>)
 8000504:	22c0      	movs	r2, #192	; 0xc0
 8000506:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;		// Starting address
 8000508:	4b1c      	ldr	r3, [pc, #112]	; (800057c <init_lora_TX+0x88>)
 800050a:	2200      	movs	r2, #0
 800050c:	705a      	strb	r2, [r3, #1]
	data[2] = 0x03;		// Length
 800050e:	4b1b      	ldr	r3, [pc, #108]	; (800057c <init_lora_TX+0x88>)
 8000510:	2203      	movs	r2, #3
 8000512:	709a      	strb	r2, [r3, #2]
	data[3] = 0x12;		// 00H ADD H
 8000514:	4b19      	ldr	r3, [pc, #100]	; (800057c <init_lora_TX+0x88>)
 8000516:	2212      	movs	r2, #18
 8000518:	70da      	strb	r2, [r3, #3]
	data[4] = 0x34;		// 01H ADD L
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <init_lora_TX+0x88>)
 800051c:	2234      	movs	r2, #52	; 0x34
 800051e:	711a      	strb	r2, [r3, #4]
	data[5] = 0x62;		// 02H register (see in Datasheet)
 8000520:	4b16      	ldr	r3, [pc, #88]	; (800057c <init_lora_TX+0x88>)
 8000522:	2262      	movs	r2, #98	; 0x62
 8000524:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit_IT(&huart1, data, 6);
 8000526:	2206      	movs	r2, #6
 8000528:	4914      	ldr	r1, [pc, #80]	; (800057c <init_lora_TX+0x88>)
 800052a:	4815      	ldr	r0, [pc, #84]	; (8000580 <init_lora_TX+0x8c>)
 800052c:	f005 fbbd 	bl	8005caa <HAL_UART_Transmit_IT>
	HAL_Delay(10);
 8000530:	200a      	movs	r0, #10
 8000532:	f002 fd95 	bl	8003060 <HAL_Delay>

	memset(data, 0, sizeof(data));
 8000536:	220a      	movs	r2, #10
 8000538:	2100      	movs	r1, #0
 800053a:	4810      	ldr	r0, [pc, #64]	; (800057c <init_lora_TX+0x88>)
 800053c:	f006 f85a 	bl	80065f4 <memset>
	// Set WOR Cycle
	data[0] = 0xC0;		// 0xC0 - Set register command
 8000540:	4b0e      	ldr	r3, [pc, #56]	; (800057c <init_lora_TX+0x88>)
 8000542:	22c0      	movs	r2, #192	; 0xc0
 8000544:	701a      	strb	r2, [r3, #0]
	data[1] = 0x05;		// Starting address
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <init_lora_TX+0x88>)
 8000548:	2205      	movs	r2, #5
 800054a:	705a      	strb	r2, [r3, #1]
	data[2] = 0x01;		// Length
 800054c:	4b0b      	ldr	r3, [pc, #44]	; (800057c <init_lora_TX+0x88>)
 800054e:	2201      	movs	r2, #1
 8000550:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;		// set WOR Cycle 500ms
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <init_lora_TX+0x88>)
 8000554:	2200      	movs	r2, #0
 8000556:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart1, data, 4);
 8000558:	2204      	movs	r2, #4
 800055a:	4908      	ldr	r1, [pc, #32]	; (800057c <init_lora_TX+0x88>)
 800055c:	4808      	ldr	r0, [pc, #32]	; (8000580 <init_lora_TX+0x8c>)
 800055e:	f005 fba4 	bl	8005caa <HAL_UART_Transmit_IT>
	HAL_Delay(10);
 8000562:	200a      	movs	r0, #10
 8000564:	f002 fd7c 	bl	8003060 <HAL_Delay>
	///////////////

	read_all_settings_from_module();
 8000568:	f7ff ffa6 	bl	80004b8 <read_all_settings_from_module>
	set_WOR_TX_mode();
 800056c:	f000 f894 	bl	8000698 <set_WOR_TX_mode>
	HAL_Delay(100);
 8000570:	2064      	movs	r0, #100	; 0x64
 8000572:	f002 fd75 	bl	8003060 <HAL_Delay>
}
 8000576:	bf00      	nop
 8000578:	4618      	mov	r0, r3
 800057a:	bd80      	pop	{r7, pc}
 800057c:	200000f8 	.word	0x200000f8
 8000580:	20000644 	.word	0x20000644

08000584 <init_lora_RX>:
//----------------------------------------------------------------------------------------
bool init_lora_RX(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	static uint8_t data[10] = {0};
	set_config_deep_sleep_mode();
 8000588:	f000 f862 	bl	8000650 <set_config_deep_sleep_mode>
	HAL_Delay(100);
 800058c:	2064      	movs	r0, #100	; 0x64
 800058e:	f002 fd67 	bl	8003060 <HAL_Delay>

	data[0] = 0xC0;
 8000592:	4b1e      	ldr	r3, [pc, #120]	; (800060c <init_lora_RX+0x88>)
 8000594:	22c0      	movs	r2, #192	; 0xc0
 8000596:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;		// Starting address
 8000598:	4b1c      	ldr	r3, [pc, #112]	; (800060c <init_lora_RX+0x88>)
 800059a:	2200      	movs	r2, #0
 800059c:	705a      	strb	r2, [r3, #1]
	data[2] = 0x03;		// Length
 800059e:	4b1b      	ldr	r3, [pc, #108]	; (800060c <init_lora_RX+0x88>)
 80005a0:	2203      	movs	r2, #3
 80005a2:	709a      	strb	r2, [r3, #2]
	data[3] = 0x12;		// 00H ADD H
 80005a4:	4b19      	ldr	r3, [pc, #100]	; (800060c <init_lora_RX+0x88>)
 80005a6:	2212      	movs	r2, #18
 80005a8:	70da      	strb	r2, [r3, #3]
	data[4] = 0x34;		// 01H ADD L
 80005aa:	4b18      	ldr	r3, [pc, #96]	; (800060c <init_lora_RX+0x88>)
 80005ac:	2234      	movs	r2, #52	; 0x34
 80005ae:	711a      	strb	r2, [r3, #4]
	data[5] = 0x62;		// 02H register ()
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <init_lora_RX+0x88>)
 80005b2:	2262      	movs	r2, #98	; 0x62
 80005b4:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit_IT(&huart1, data, 6);
 80005b6:	2206      	movs	r2, #6
 80005b8:	4914      	ldr	r1, [pc, #80]	; (800060c <init_lora_RX+0x88>)
 80005ba:	4815      	ldr	r0, [pc, #84]	; (8000610 <init_lora_RX+0x8c>)
 80005bc:	f005 fb75 	bl	8005caa <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 80005c0:	2064      	movs	r0, #100	; 0x64
 80005c2:	f002 fd4d 	bl	8003060 <HAL_Delay>

	memset(data, 0, sizeof(data));
 80005c6:	220a      	movs	r2, #10
 80005c8:	2100      	movs	r1, #0
 80005ca:	4810      	ldr	r0, [pc, #64]	; (800060c <init_lora_RX+0x88>)
 80005cc:	f006 f812 	bl	80065f4 <memset>
	// Set WOR Cycle
	data[0] = 0xC0;		// 0xC0 - Set register command
 80005d0:	4b0e      	ldr	r3, [pc, #56]	; (800060c <init_lora_RX+0x88>)
 80005d2:	22c0      	movs	r2, #192	; 0xc0
 80005d4:	701a      	strb	r2, [r3, #0]
	data[1] = 0x05;		// Starting address
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <init_lora_RX+0x88>)
 80005d8:	2205      	movs	r2, #5
 80005da:	705a      	strb	r2, [r3, #1]
	data[2] = 0x01;		// Length
 80005dc:	4b0b      	ldr	r3, [pc, #44]	; (800060c <init_lora_RX+0x88>)
 80005de:	2201      	movs	r2, #1
 80005e0:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;		// set WOR Cycle 500ms
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <init_lora_RX+0x88>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart1, data, 4);
 80005e8:	2204      	movs	r2, #4
 80005ea:	4908      	ldr	r1, [pc, #32]	; (800060c <init_lora_RX+0x88>)
 80005ec:	4808      	ldr	r0, [pc, #32]	; (8000610 <init_lora_RX+0x8c>)
 80005ee:	f005 fb5c 	bl	8005caa <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 80005f2:	2064      	movs	r0, #100	; 0x64
 80005f4:	f002 fd34 	bl	8003060 <HAL_Delay>

	read_settings_from_module();
 80005f8:	f000 f80c 	bl	8000614 <read_settings_from_module>

	set_WOR_RX_mode();
 80005fc:	f000 f83a 	bl	8000674 <set_WOR_RX_mode>

	HAL_Delay(100);
 8000600:	2064      	movs	r0, #100	; 0x64
 8000602:	f002 fd2d 	bl	8003060 <HAL_Delay>
}
 8000606:	bf00      	nop
 8000608:	4618      	mov	r0, r3
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000104 	.word	0x20000104
 8000610:	20000644 	.word	0x20000644

08000614 <read_settings_from_module>:
//-------------------------------------------------------------------------------------------------
void read_settings_from_module(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	// Turn on configuration mode
	set_config_deep_sleep_mode();
 8000618:	f000 f81a 	bl	8000650 <set_config_deep_sleep_mode>
	HAL_Delay(10);
 800061c:	200a      	movs	r0, #10
 800061e:	f002 fd1f 	bl	8003060 <HAL_Delay>

	static uint8_t data[10] = {0};
	// Read module address, serial port, and airspeed COMMAND
	data[0] = 0xC1;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <read_settings_from_module+0x34>)
 8000624:	22c1      	movs	r2, #193	; 0xc1
 8000626:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <read_settings_from_module+0x34>)
 800062a:	2200      	movs	r2, #0
 800062c:	705a      	strb	r2, [r3, #1]
	data[2] = 0x08;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <read_settings_from_module+0x34>)
 8000630:	2208      	movs	r2, #8
 8000632:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_IT(&huart1, data, 3);
 8000634:	2203      	movs	r2, #3
 8000636:	4904      	ldr	r1, [pc, #16]	; (8000648 <read_settings_from_module+0x34>)
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <read_settings_from_module+0x38>)
 800063a:	f005 fb36 	bl	8005caa <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 800063e:	2064      	movs	r0, #100	; 0x64
 8000640:	f002 fd0e 	bl	8003060 <HAL_Delay>
	// Return:
	// 0xC1 0x00 0x03 0x12 0x34 0x62
	// 0x12 0x34 - Adders 1234
	// 0x62 - 9600, 8n1 and 2,4 k air data rate

	return true;
 8000644:	bf00      	nop
}
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000110 	.word	0x20000110
 800064c:	20000644 	.word	0x20000644

08000650 <set_config_deep_sleep_mode>:
//-------------------------------------------------------------------------------------------------
void set_config_deep_sleep_mode (void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	// Function use for go to deep sleep and configuration mode
	// Set M0 and M1 PINs
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <set_config_deep_sleep_mode+0x20>)
 800065c:	f003 f87d 	bl	800375a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2101      	movs	r1, #1
 8000664:	4802      	ldr	r0, [pc, #8]	; (8000670 <set_config_deep_sleep_mode+0x20>)
 8000666:	f003 f878 	bl	800375a <HAL_GPIO_WritePin>
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40010c00 	.word	0x40010c00

08000674 <set_WOR_RX_mode>:
//-------------------------------------------------------------------------------------------------
void set_WOR_RX_mode (void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	// Set M0 and M1 PINs in WOR Receiving mode
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <set_WOR_RX_mode+0x20>)
 8000680:	f003 f86b 	bl	800375a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	2101      	movs	r1, #1
 8000688:	4802      	ldr	r0, [pc, #8]	; (8000694 <set_WOR_RX_mode+0x20>)
 800068a:	f003 f866 	bl	800375a <HAL_GPIO_WritePin>
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40010c00 	.word	0x40010c00

08000698 <set_WOR_TX_mode>:
//-------------------------------------------------------------------------------------------------
void set_WOR_TX_mode (void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	// Set M0 and M1 PINs in WOR Transmitting mode
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_SET);
 800069c:	2201      	movs	r2, #1
 800069e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <set_WOR_TX_mode+0x20>)
 80006a4:	f003 f859 	bl	800375a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2101      	movs	r1, #1
 80006ac:	4802      	ldr	r0, [pc, #8]	; (80006b8 <set_WOR_TX_mode+0x20>)
 80006ae:	f003 f854 	bl	800375a <HAL_GPIO_WritePin>
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40010c00 	.word	0x40010c00

080006bc <DelayMicro>:
=======
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08005760 	.word	0x08005760

0800014c <DelayMicro>:
>>>>>>> FFF
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000154:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <DelayMicro+0x3c>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <DelayMicro+0x3c>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4a0b      	ldr	r2, [pc, #44]	; (800018c <DelayMicro+0x40>)
 8000160:	fba2 2303 	umull	r2, r3, r2, r3
 8000164:	0ddb      	lsrs	r3, r3, #23
 8000166:	687a      	ldr	r2, [r7, #4]
 8000168:	fb02 f303 	mul.w	r3, r2, r3
 800016c:	607b      	str	r3, [r7, #4]
	while (micros--);
<<<<<<< HEAD
 80006de:	bf00      	nop
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	1e5a      	subs	r2, r3, #1
 80006e4:	607a      	str	r2, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d1fa      	bne.n	80006e0 <DelayMicro+0x24>
}
 80006ea:	bf00      	nop
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	20000024 	.word	0x20000024
 80006fc:	ffa71ee7 	.word	0xffa71ee7

08000700 <NRF24_ReadReg>:
=======
 800016e:	bf00      	nop
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	1e5a      	subs	r2, r3, #1
 8000174:	607a      	str	r2, [r7, #4]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d1fa      	bne.n	8000170 <DelayMicro+0x24>
}
 800017a:	bf00      	nop
 800017c:	bf00      	nop
 800017e:	3714      	adds	r7, #20
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	20000018 	.word	0x20000018
 800018c:	ffa71ee7 	.word	0xffa71ee7

08000190 <NRF24_ReadReg>:
>>>>>>> FFF
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b086      	sub	sp, #24
 8000194:	af02      	add	r7, sp, #8
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 800019a:	2300      	movs	r3, #0
 800019c:	73fb      	strb	r3, [r7, #15]
  CS_ON;
<<<<<<< HEAD
 800070e:	2200      	movs	r2, #0
 8000710:	2110      	movs	r1, #16
 8000712:	4813      	ldr	r0, [pc, #76]	; (8000760 <NRF24_ReadReg+0x60>)
 8000714:	f003 f821 	bl	800375a <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 8000718:	f107 020f 	add.w	r2, r7, #15
 800071c:	1df9      	adds	r1, r7, #7
 800071e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2301      	movs	r3, #1
 8000726:	480f      	ldr	r0, [pc, #60]	; (8000764 <NRF24_ReadReg+0x64>)
 8000728:	f004 fba5 	bl	8004e76 <HAL_SPI_TransmitReceive>
=======
 800019e:	2200      	movs	r2, #0
 80001a0:	2110      	movs	r1, #16
 80001a2:	4813      	ldr	r0, [pc, #76]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001a4:	f001 ff4d 	bl	8002042 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 80001a8:	f107 020f 	add.w	r2, r7, #15
 80001ac:	1df9      	adds	r1, r7, #7
 80001ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b2:	9300      	str	r3, [sp, #0]
 80001b4:	2301      	movs	r3, #1
 80001b6:	480f      	ldr	r0, [pc, #60]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001b8:	f003 fad1 	bl	800375e <HAL_SPI_TransmitReceive>
>>>>>>> FFF
  if (addr!=STATUS_NRF)
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	2b07      	cmp	r3, #7
 80001c0:	d00c      	beq.n	80001dc <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 80001c2:	23ff      	movs	r3, #255	; 0xff
 80001c4:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
<<<<<<< HEAD
 8000736:	f107 020f 	add.w	r2, r7, #15
 800073a:	f107 010e 	add.w	r1, r7, #14
 800073e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	2301      	movs	r3, #1
 8000746:	4807      	ldr	r0, [pc, #28]	; (8000764 <NRF24_ReadReg+0x64>)
 8000748:	f004 fb95 	bl	8004e76 <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 800074c:	2201      	movs	r2, #1
 800074e:	2110      	movs	r1, #16
 8000750:	4803      	ldr	r0, [pc, #12]	; (8000760 <NRF24_ReadReg+0x60>)
 8000752:	f003 f802 	bl	800375a <HAL_GPIO_WritePin>
=======
 80001c6:	f107 020f 	add.w	r2, r7, #15
 80001ca:	f107 010e 	add.w	r1, r7, #14
 80001ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d2:	9300      	str	r3, [sp, #0]
 80001d4:	2301      	movs	r3, #1
 80001d6:	4807      	ldr	r0, [pc, #28]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001d8:	f003 fac1 	bl	800375e <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 80001dc:	2201      	movs	r2, #1
 80001de:	2110      	movs	r1, #16
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001e2:	f001 ff2e 	bl	8002042 <HAL_GPIO_WritePin>
>>>>>>> FFF
  return dt;
 80001e6:	7bfb      	ldrb	r3, [r7, #15]
}
<<<<<<< HEAD
 8000758:	4618      	mov	r0, r3
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40010800 	.word	0x40010800
 8000764:	200006d0 	.word	0x200006d0

08000768 <NRF24_WriteReg>:
=======
 80001e8:	4618      	mov	r0, r3
 80001ea:	3710      	adds	r7, #16
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40010800 	.word	0x40010800
 80001f4:	20000658 	.word	0x20000658

080001f8 <NRF24_WriteReg>:
>>>>>>> FFF
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	460a      	mov	r2, r1
 8000202:	71fb      	strb	r3, [r7, #7]
 8000204:	4613      	mov	r3, r2
 8000206:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	f043 0320 	orr.w	r3, r3, #32
 800020e:	b2db      	uxtb	r3, r3
 8000210:	71fb      	strb	r3, [r7, #7]
  CS_ON;
<<<<<<< HEAD
 8000782:	2200      	movs	r2, #0
 8000784:	2110      	movs	r1, #16
 8000786:	480d      	ldr	r0, [pc, #52]	; (80007bc <NRF24_WriteReg+0x54>)
 8000788:	f002 ffe7 	bl	800375a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800078c:	1df9      	adds	r1, r7, #7
 800078e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000792:	2201      	movs	r2, #1
 8000794:	480a      	ldr	r0, [pc, #40]	; (80007c0 <NRF24_WriteReg+0x58>)
 8000796:	f004 f921 	bl	80049dc <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 800079a:	1db9      	adds	r1, r7, #6
 800079c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a0:	2201      	movs	r2, #1
 80007a2:	4807      	ldr	r0, [pc, #28]	; (80007c0 <NRF24_WriteReg+0x58>)
 80007a4:	f004 f91a 	bl	80049dc <HAL_SPI_Transmit>
  CS_OFF;
 80007a8:	2201      	movs	r2, #1
 80007aa:	2110      	movs	r1, #16
 80007ac:	4803      	ldr	r0, [pc, #12]	; (80007bc <NRF24_WriteReg+0x54>)
 80007ae:	f002 ffd4 	bl	800375a <HAL_GPIO_WritePin>
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40010800 	.word	0x40010800
 80007c0:	200006d0 	.word	0x200006d0

080007c4 <NRF24_ToggleFeatures>:
//----------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 80007ca:	2350      	movs	r3, #80	; 0x50
 80007cc:	713b      	strb	r3, [r7, #4]
  CS_ON;
 80007ce:	2200      	movs	r2, #0
 80007d0:	2110      	movs	r1, #16
 80007d2:	480f      	ldr	r0, [pc, #60]	; (8000810 <NRF24_ToggleFeatures+0x4c>)
 80007d4:	f002 ffc1 	bl	800375a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 80007d8:	1d39      	adds	r1, r7, #4
 80007da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007de:	2201      	movs	r2, #1
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <NRF24_ToggleFeatures+0x50>)
 80007e2:	f004 f8fb 	bl	80049dc <HAL_SPI_Transmit>
  DelayMicro(1);
 80007e6:	2001      	movs	r0, #1
 80007e8:	f7ff ff68 	bl	80006bc <DelayMicro>
  dt[0] = 0x73;
 80007ec:	2373      	movs	r3, #115	; 0x73
 80007ee:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 80007f0:	1d39      	adds	r1, r7, #4
 80007f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f6:	2201      	movs	r2, #1
 80007f8:	4806      	ldr	r0, [pc, #24]	; (8000814 <NRF24_ToggleFeatures+0x50>)
 80007fa:	f004 f8ef 	bl	80049dc <HAL_SPI_Transmit>
  CS_OFF;
 80007fe:	2201      	movs	r2, #1
 8000800:	2110      	movs	r1, #16
 8000802:	4803      	ldr	r0, [pc, #12]	; (8000810 <NRF24_ToggleFeatures+0x4c>)
 8000804:	f002 ffa9 	bl	800375a <HAL_GPIO_WritePin>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40010800 	.word	0x40010800
 8000814:	200006d0 	.word	0x200006d0

08000818 <NRF24_Read_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	6039      	str	r1, [r7, #0]
 8000822:	71fb      	strb	r3, [r7, #7]
 8000824:	4613      	mov	r3, r2
 8000826:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 8000828:	2200      	movs	r2, #0
 800082a:	2110      	movs	r1, #16
 800082c:	480d      	ldr	r0, [pc, #52]	; (8000864 <NRF24_Read_Buf+0x4c>)
 800082e:	f002 ff94 	bl	800375a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000832:	1df9      	adds	r1, r7, #7
 8000834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000838:	2201      	movs	r2, #1
 800083a:	480b      	ldr	r0, [pc, #44]	; (8000868 <NRF24_Read_Buf+0x50>)
 800083c:	f004 f8ce 	bl	80049dc <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	b29a      	uxth	r2, r3
 8000844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000848:	6839      	ldr	r1, [r7, #0]
 800084a:	4807      	ldr	r0, [pc, #28]	; (8000868 <NRF24_Read_Buf+0x50>)
 800084c:	f004 fa02 	bl	8004c54 <HAL_SPI_Receive>
  CS_OFF;
 8000850:	2201      	movs	r2, #1
 8000852:	2110      	movs	r1, #16
 8000854:	4803      	ldr	r0, [pc, #12]	; (8000864 <NRF24_Read_Buf+0x4c>)
 8000856:	f002 ff80 	bl	800375a <HAL_GPIO_WritePin>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40010800 	.word	0x40010800
 8000868:	200006d0 	.word	0x200006d0

0800086c <NRF24_Write_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	6039      	str	r1, [r7, #0]
 8000876:	71fb      	strb	r3, [r7, #7]
 8000878:	4613      	mov	r3, r2
 800087a:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								//Add write bit
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f043 0320 	orr.w	r3, r3, #32
 8000882:	b2db      	uxtb	r3, r3
 8000884:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000886:	2200      	movs	r2, #0
 8000888:	2110      	movs	r1, #16
 800088a:	480f      	ldr	r0, [pc, #60]	; (80008c8 <NRF24_Write_Buf+0x5c>)
 800088c:	f002 ff65 	bl	800375a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000890:	1df9      	adds	r1, r7, #7
 8000892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000896:	2201      	movs	r2, #1
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <NRF24_Write_Buf+0x60>)
 800089a:	f004 f89f 	bl	80049dc <HAL_SPI_Transmit>
  DelayMicro(1);
 800089e:	2001      	movs	r0, #1
 80008a0:	f7ff ff0c 	bl	80006bc <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000);			// Send data in buffer
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ac:	6839      	ldr	r1, [r7, #0]
 80008ae:	4807      	ldr	r0, [pc, #28]	; (80008cc <NRF24_Write_Buf+0x60>)
 80008b0:	f004 f894 	bl	80049dc <HAL_SPI_Transmit>
  CS_OFF;
 80008b4:	2201      	movs	r2, #1
 80008b6:	2110      	movs	r1, #16
 80008b8:	4803      	ldr	r0, [pc, #12]	; (80008c8 <NRF24_Write_Buf+0x5c>)
 80008ba:	f002 ff4e 	bl	800375a <HAL_GPIO_WritePin>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40010800 	.word	0x40010800
 80008cc:	200006d0 	.word	0x200006d0

080008d0 <NRF24_FlushRX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushRX(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 80008d6:	23e2      	movs	r3, #226	; 0xe2
 80008d8:	713b      	strb	r3, [r7, #4]
  CS_ON;
 80008da:	2200      	movs	r2, #0
 80008dc:	2110      	movs	r1, #16
 80008de:	480b      	ldr	r0, [pc, #44]	; (800090c <NRF24_FlushRX+0x3c>)
 80008e0:	f002 ff3b 	bl	800375a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 80008e4:	1d39      	adds	r1, r7, #4
 80008e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ea:	2201      	movs	r2, #1
 80008ec:	4808      	ldr	r0, [pc, #32]	; (8000910 <NRF24_FlushRX+0x40>)
 80008ee:	f004 f875 	bl	80049dc <HAL_SPI_Transmit>
  DelayMicro(1);
 80008f2:	2001      	movs	r0, #1
 80008f4:	f7ff fee2 	bl	80006bc <DelayMicro>
  CS_OFF;
 80008f8:	2201      	movs	r2, #1
 80008fa:	2110      	movs	r1, #16
 80008fc:	4803      	ldr	r0, [pc, #12]	; (800090c <NRF24_FlushRX+0x3c>)
 80008fe:	f002 ff2c 	bl	800375a <HAL_GPIO_WritePin>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40010800 	.word	0x40010800
 8000910:	200006d0 	.word	0x200006d0

08000914 <NRF24_FlushTX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushTX(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 800091a:	23e1      	movs	r3, #225	; 0xe1
 800091c:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800091e:	2200      	movs	r2, #0
 8000920:	2110      	movs	r1, #16
 8000922:	480b      	ldr	r0, [pc, #44]	; (8000950 <NRF24_FlushTX+0x3c>)
 8000924:	f002 ff19 	bl	800375a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000928:	1d39      	adds	r1, r7, #4
 800092a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092e:	2201      	movs	r2, #1
 8000930:	4808      	ldr	r0, [pc, #32]	; (8000954 <NRF24_FlushTX+0x40>)
 8000932:	f004 f853 	bl	80049dc <HAL_SPI_Transmit>
  DelayMicro(1);
 8000936:	2001      	movs	r0, #1
 8000938:	f7ff fec0 	bl	80006bc <DelayMicro>
  CS_OFF;
 800093c:	2201      	movs	r2, #1
 800093e:	2110      	movs	r1, #16
 8000940:	4803      	ldr	r0, [pc, #12]	; (8000950 <NRF24_FlushTX+0x3c>)
 8000942:	f002 ff0a 	bl	800375a <HAL_GPIO_WritePin>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40010800 	.word	0x40010800
 8000954:	200006d0 	.word	0x200006d0

08000958 <NRF24L01_RX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 800095e:	2300      	movs	r3, #0
 8000960:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 8000962:	2000      	movs	r0, #0
 8000964:	f7ff fecc 	bl	8000700 <NRF24_ReadReg>
 8000968:	4603      	mov	r3, r0
 800096a:	71fb      	strb	r3, [r7, #7]

  regval |= (1<<PWR_UP) | (1<<PRIM_RX);    	// Power up module. Write PWR_UP and PRIM_RX bits
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	f043 0303 	orr.w	r3, r3, #3
 8000972:	71fb      	strb	r3, [r7, #7]

  NRF24_WriteReg(CONFIG,regval);
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	4619      	mov	r1, r3
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff fef5 	bl	8000768 <NRF24_WriteReg>

  NRF24_WriteReg(CONFIG, 0x33);     		//  IRQ WORK  ~ 130 us
 800097e:	2133      	movs	r1, #51	; 0x33
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff fef1 	bl	8000768 <NRF24_WriteReg>

  CE_SET;
 8000986:	2201      	movs	r2, #1
 8000988:	2108      	movs	r1, #8
 800098a:	4807      	ldr	r0, [pc, #28]	; (80009a8 <NRF24L01_RX_Mode+0x50>)
 800098c:	f002 fee5 	bl	800375a <HAL_GPIO_WritePin>
  DelayMicro(150); // Delay 130 us
 8000990:	2096      	movs	r0, #150	; 0x96
 8000992:	f7ff fe93 	bl	80006bc <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 8000996:	f7ff ff9b 	bl	80008d0 <NRF24_FlushRX>
  NRF24_FlushTX();
 800099a:	f7ff ffbb 	bl	8000914 <NRF24_FlushTX>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40010800 	.word	0x40010800

080009ac <NRF24L01_Receive>:
//----------------------------------------------------------------------------------------
// Function waite Low IRQ signal from NRF module
bool NRF24L01_Receive(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0
	if(rx_flag == 1)
 80009b2:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <NRF24L01_Receive+0xac>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d148      	bne.n	8000a4e <NRF24L01_Receive+0xa2>
	{
		// Detect what's pipes data come from
		if(pipe == 0)
 80009bc:	4b27      	ldr	r3, [pc, #156]	; (8000a5c <NRF24L01_Receive+0xb0>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d11f      	bne.n	8000a04 <NRF24L01_Receive+0x58>
		{
			ssd1306_SetCursor(0, 16);
 80009c4:	2110      	movs	r1, #16
 80009c6:	2000      	movs	r0, #0
 80009c8:	f000 fd18 	bl	80013fc <ssd1306_SetCursor>
			char test_main[15] = {0};
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	f8c3 2007 	str.w	r2, [r3, #7]
			strcpy(test_main, "P0 data:");
 80009de:	f107 0310 	add.w	r3, r7, #16
 80009e2:	4a1f      	ldr	r2, [pc, #124]	; (8000a60 <NRF24L01_Receive+0xb4>)
 80009e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80009e6:	c303      	stmia	r3!, {r0, r1}
 80009e8:	701a      	strb	r2, [r3, #0]
			strcat(test_main, RX_BUF);
 80009ea:	f107 0310 	add.w	r3, r7, #16
 80009ee:	491d      	ldr	r1, [pc, #116]	; (8000a64 <NRF24L01_Receive+0xb8>)
 80009f0:	4618      	mov	r0, r3
 80009f2:	f005 fedd 	bl	80067b0 <strcat>
			ssd1306_WriteString(test_main,  Font_7x10, White);
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <NRF24L01_Receive+0xbc>)
 80009f8:	f107 0010 	add.w	r0, r7, #16
 80009fc:	2301      	movs	r3, #1
 80009fe:	ca06      	ldmia	r2, {r1, r2}
 8000a00:	f000 fcd6 	bl	80013b0 <ssd1306_WriteString>
		}
		if(pipe == 1)
 8000a04:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <NRF24L01_Receive+0xb0>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d11b      	bne.n	8000a44 <NRF24L01_Receive+0x98>
		{
			ssd1306_SetCursor(0, 26);
 8000a0c:	211a      	movs	r1, #26
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f000 fcf4 	bl	80013fc <ssd1306_SetCursor>
			char test_main[15] = {0};
 8000a14:	2300      	movs	r3, #0
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	f8c3 2007 	str.w	r2, [r3, #7]
			strcpy(test_main, "P1 data:");
 8000a24:	463b      	mov	r3, r7
 8000a26:	4a11      	ldr	r2, [pc, #68]	; (8000a6c <NRF24L01_Receive+0xc0>)
 8000a28:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a2a:	c303      	stmia	r3!, {r0, r1}
 8000a2c:	701a      	strb	r2, [r3, #0]
			strcat(test_main, RX_BUF);
 8000a2e:	463b      	mov	r3, r7
 8000a30:	490c      	ldr	r1, [pc, #48]	; (8000a64 <NRF24L01_Receive+0xb8>)
 8000a32:	4618      	mov	r0, r3
 8000a34:	f005 febc 	bl	80067b0 <strcat>
			ssd1306_WriteString(test_main,  Font_7x10, White);
 8000a38:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <NRF24L01_Receive+0xbc>)
 8000a3a:	4638      	mov	r0, r7
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	ca06      	ldmia	r2, {r1, r2}
 8000a40:	f000 fcb6 	bl	80013b0 <ssd1306_WriteString>
		}

		// Print RX data on OLED
		ssd1306_UpdateScreen();
 8000a44:	f000 fba4 	bl	8001190 <ssd1306_UpdateScreen>

		rx_flag = 0;
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <NRF24L01_Receive+0xac>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
	}
}
 8000a4e:	bf00      	nop
 8000a50:	4618      	mov	r0, r3
 8000a52:	3720      	adds	r7, #32
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000126 	.word	0x20000126
 8000a5c:	2000014c 	.word	0x2000014c
 8000a60:	08006f74 	.word	0x08006f74
 8000a64:	2000011c 	.word	0x2000011c
 8000a68:	20000014 	.word	0x20000014
 8000a6c:	08006f80 	.word	0x08006f80

08000a70 <NRF24_ini_rx_mode>:
//----------------------------------------------------------------------------------------
void NRF24_ini_rx_mode(void)                  // RECEIVE
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	CE_RESET;
 8000a74:	2200      	movs	r2, #0
 8000a76:	2108      	movs	r1, #8
 8000a78:	4827      	ldr	r0, [pc, #156]	; (8000b18 <NRF24_ini_rx_mode+0xa8>)
 8000a7a:	f002 fe6e 	bl	800375a <HAL_GPIO_WritePin>
	DelayMicro(5000);
 8000a7e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a82:	f7ff fe1b 	bl	80006bc <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter) 0b 0000 1010
 8000a86:	210a      	movs	r1, #10
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff fe6d 	bl	8000768 <NRF24_WriteReg>

	DelayMicro(5000);
 8000a8e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a92:	f7ff fe13 	bl	80006bc <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x03); 			// Enable Pipe0 and Pipe1
 8000a96:	2103      	movs	r1, #3
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f7ff fe65 	bl	8000768 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x03); 		// Enable Pipe0 and Pipe1
 8000a9e:	2103      	movs	r1, #3
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	f7ff fe61 	bl	8000768 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	f7ff fe5d 	bl	8000768 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 8000aae:	215f      	movs	r1, #95	; 0x5f
 8000ab0:	2004      	movs	r0, #4
 8000ab2:	f7ff fe59 	bl	8000768 <NRF24_WriteReg>
	NRF24_ToggleFeatures();					// Send activated command
 8000ab6:	f7ff fe85 	bl	80007c4 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);				// Turn off all FEATURE register
 8000aba:	2100      	movs	r1, #0
 8000abc:	201d      	movs	r0, #29
 8000abe:	f7ff fe53 	bl	8000768 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0); 				// Turn off all payload length data pipe
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	201c      	movs	r0, #28
 8000ac6:	f7ff fe4f 	bl	8000768 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 8000aca:	2170      	movs	r1, #112	; 0x70
 8000acc:	2007      	movs	r0, #7
 8000ace:	f7ff fe4b 	bl	8000768 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz  // was 76
 8000ad2:	214c      	movs	r1, #76	; 0x4c
 8000ad4:	2005      	movs	r0, #5
 8000ad6:	f7ff fe47 	bl	8000768 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26); 	    // TX_PWR:0dBm, Datarate:250kbps
 8000ada:	2126      	movs	r1, #38	; 0x26
 8000adc:	2006      	movs	r0, #6
 8000ade:	f7ff fe43 	bl	8000768 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_0, TX_ADR_WIDTH);		//	set up Transmit address. Used for a PTX device only.
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	490d      	ldr	r1, [pc, #52]	; (8000b1c <NRF24_ini_rx_mode+0xac>)
 8000ae6:	2010      	movs	r0, #16
 8000ae8:	f7ff fec0 	bl	800086c <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_0, TX_ADR_WIDTH);    // Set up pipe 0 address
 8000aec:	2203      	movs	r2, #3
 8000aee:	490b      	ldr	r1, [pc, #44]	; (8000b1c <NRF24_ini_rx_mode+0xac>)
 8000af0:	200a      	movs	r0, #10
 8000af2:	f7ff febb 	bl	800086c <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS_1, TX_ADR_WIDTH);    // Set up pipe 1 address
 8000af6:	2203      	movs	r2, #3
 8000af8:	4909      	ldr	r1, [pc, #36]	; (8000b20 <NRF24_ini_rx_mode+0xb0>)
 8000afa:	200b      	movs	r0, #11
 8000afc:	f7ff feb6 	bl	800086c <NRF24_Write_Buf>

	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 //Number of bytes in RX pipe 0
 8000b00:	210a      	movs	r1, #10
 8000b02:	2011      	movs	r0, #17
 8000b04:	f7ff fe30 	bl	8000768 <NRF24_WriteReg>
	NRF24_WriteReg(RX_PW_P1, TX_PLOAD_WIDTH);				 //Number of bytes in RX pipe 1
 8000b08:	210a      	movs	r1, #10
 8000b0a:	2012      	movs	r0, #18
 8000b0c:	f7ff fe2c 	bl	8000768 <NRF24_WriteReg>

	NRF24L01_RX_Mode();
 8000b10:	f7ff ff22 	bl	8000958 <NRF24L01_RX_Mode>
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40010800 	.word	0x40010800
 8000b1c:	20000004 	.word	0x20000004
 8000b20:	20000008 	.word	0x20000008

08000b24 <read_config_registers>:
=======
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	480d      	ldr	r0, [pc, #52]	; (800024c <NRF24_WriteReg+0x54>)
 8000218:	f001 ff13 	bl	8002042 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800021c:	1df9      	adds	r1, r7, #7
 800021e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000222:	2201      	movs	r2, #1
 8000224:	480a      	ldr	r0, [pc, #40]	; (8000250 <NRF24_WriteReg+0x58>)
 8000226:	f003 f84d 	bl	80032c4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 800022a:	1db9      	adds	r1, r7, #6
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	2201      	movs	r2, #1
 8000232:	4807      	ldr	r0, [pc, #28]	; (8000250 <NRF24_WriteReg+0x58>)
 8000234:	f003 f846 	bl	80032c4 <HAL_SPI_Transmit>
  CS_OFF;
 8000238:	2201      	movs	r2, #1
 800023a:	2110      	movs	r1, #16
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <NRF24_WriteReg+0x54>)
 800023e:	f001 ff00 	bl	8002042 <HAL_GPIO_WritePin>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40010800 	.word	0x40010800
 8000250:	20000658 	.word	0x20000658

08000254 <NRF24_ToggleFeatures>:
//----------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 800025a:	2350      	movs	r3, #80	; 0x50
 800025c:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800025e:	2200      	movs	r2, #0
 8000260:	2110      	movs	r1, #16
 8000262:	480f      	ldr	r0, [pc, #60]	; (80002a0 <NRF24_ToggleFeatures+0x4c>)
 8000264:	f001 feed 	bl	8002042 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000268:	1d39      	adds	r1, r7, #4
 800026a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800026e:	2201      	movs	r2, #1
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <NRF24_ToggleFeatures+0x50>)
 8000272:	f003 f827 	bl	80032c4 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000276:	2001      	movs	r0, #1
 8000278:	f7ff ff68 	bl	800014c <DelayMicro>
  dt[0] = 0x73;
 800027c:	2373      	movs	r3, #115	; 0x73
 800027e:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000280:	1d39      	adds	r1, r7, #4
 8000282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000286:	2201      	movs	r2, #1
 8000288:	4806      	ldr	r0, [pc, #24]	; (80002a4 <NRF24_ToggleFeatures+0x50>)
 800028a:	f003 f81b 	bl	80032c4 <HAL_SPI_Transmit>
  CS_OFF;
 800028e:	2201      	movs	r2, #1
 8000290:	2110      	movs	r1, #16
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <NRF24_ToggleFeatures+0x4c>)
 8000294:	f001 fed5 	bl	8002042 <HAL_GPIO_WritePin>
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40010800 	.word	0x40010800
 80002a4:	20000658 	.word	0x20000658

080002a8 <NRF24_Read_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	6039      	str	r1, [r7, #0]
 80002b2:	71fb      	strb	r3, [r7, #7]
 80002b4:	4613      	mov	r3, r2
 80002b6:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 80002b8:	2200      	movs	r2, #0
 80002ba:	2110      	movs	r1, #16
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <NRF24_Read_Buf+0x4c>)
 80002be:	f001 fec0 	bl	8002042 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 80002c2:	1df9      	adds	r1, r7, #7
 80002c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c8:	2201      	movs	r2, #1
 80002ca:	480b      	ldr	r0, [pc, #44]	; (80002f8 <NRF24_Read_Buf+0x50>)
 80002cc:	f002 fffa 	bl	80032c4 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 80002d0:	79bb      	ldrb	r3, [r7, #6]
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d8:	6839      	ldr	r1, [r7, #0]
 80002da:	4807      	ldr	r0, [pc, #28]	; (80002f8 <NRF24_Read_Buf+0x50>)
 80002dc:	f003 f92e 	bl	800353c <HAL_SPI_Receive>
  CS_OFF;
 80002e0:	2201      	movs	r2, #1
 80002e2:	2110      	movs	r1, #16
 80002e4:	4803      	ldr	r0, [pc, #12]	; (80002f4 <NRF24_Read_Buf+0x4c>)
 80002e6:	f001 feac 	bl	8002042 <HAL_GPIO_WritePin>
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40010800 	.word	0x40010800
 80002f8:	20000658 	.word	0x20000658

080002fc <NRF24_Write_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]
 8000308:	4613      	mov	r3, r2
 800030a:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								//Add write bit
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	f043 0320 	orr.w	r3, r3, #32
 8000312:	b2db      	uxtb	r3, r3
 8000314:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000316:	2200      	movs	r2, #0
 8000318:	2110      	movs	r1, #16
 800031a:	480f      	ldr	r0, [pc, #60]	; (8000358 <NRF24_Write_Buf+0x5c>)
 800031c:	f001 fe91 	bl	8002042 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000320:	1df9      	adds	r1, r7, #7
 8000322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000326:	2201      	movs	r2, #1
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <NRF24_Write_Buf+0x60>)
 800032a:	f002 ffcb 	bl	80032c4 <HAL_SPI_Transmit>
  DelayMicro(1);
 800032e:	2001      	movs	r0, #1
 8000330:	f7ff ff0c 	bl	800014c <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000);			// Send data in buffer
 8000334:	79bb      	ldrb	r3, [r7, #6]
 8000336:	b29a      	uxth	r2, r3
 8000338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033c:	6839      	ldr	r1, [r7, #0]
 800033e:	4807      	ldr	r0, [pc, #28]	; (800035c <NRF24_Write_Buf+0x60>)
 8000340:	f002 ffc0 	bl	80032c4 <HAL_SPI_Transmit>
  CS_OFF;
 8000344:	2201      	movs	r2, #1
 8000346:	2110      	movs	r1, #16
 8000348:	4803      	ldr	r0, [pc, #12]	; (8000358 <NRF24_Write_Buf+0x5c>)
 800034a:	f001 fe7a 	bl	8002042 <HAL_GPIO_WritePin>
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010800 	.word	0x40010800
 800035c:	20000658 	.word	0x20000658

08000360 <NRF24_FlushRX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushRX(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 8000366:	23e2      	movs	r3, #226	; 0xe2
 8000368:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800036a:	2200      	movs	r2, #0
 800036c:	2110      	movs	r1, #16
 800036e:	480b      	ldr	r0, [pc, #44]	; (800039c <NRF24_FlushRX+0x3c>)
 8000370:	f001 fe67 	bl	8002042 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000374:	1d39      	adds	r1, r7, #4
 8000376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800037a:	2201      	movs	r2, #1
 800037c:	4808      	ldr	r0, [pc, #32]	; (80003a0 <NRF24_FlushRX+0x40>)
 800037e:	f002 ffa1 	bl	80032c4 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000382:	2001      	movs	r0, #1
 8000384:	f7ff fee2 	bl	800014c <DelayMicro>
  CS_OFF;
 8000388:	2201      	movs	r2, #1
 800038a:	2110      	movs	r1, #16
 800038c:	4803      	ldr	r0, [pc, #12]	; (800039c <NRF24_FlushRX+0x3c>)
 800038e:	f001 fe58 	bl	8002042 <HAL_GPIO_WritePin>
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40010800 	.word	0x40010800
 80003a0:	20000658 	.word	0x20000658

080003a4 <NRF24_FlushTX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushTX(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 80003aa:	23e1      	movs	r3, #225	; 0xe1
 80003ac:	713b      	strb	r3, [r7, #4]
  CS_ON;
 80003ae:	2200      	movs	r2, #0
 80003b0:	2110      	movs	r1, #16
 80003b2:	480b      	ldr	r0, [pc, #44]	; (80003e0 <NRF24_FlushTX+0x3c>)
 80003b4:	f001 fe45 	bl	8002042 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 80003b8:	1d39      	adds	r1, r7, #4
 80003ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003be:	2201      	movs	r2, #1
 80003c0:	4808      	ldr	r0, [pc, #32]	; (80003e4 <NRF24_FlushTX+0x40>)
 80003c2:	f002 ff7f 	bl	80032c4 <HAL_SPI_Transmit>
  DelayMicro(1);
 80003c6:	2001      	movs	r0, #1
 80003c8:	f7ff fec0 	bl	800014c <DelayMicro>
  CS_OFF;
 80003cc:	2201      	movs	r2, #1
 80003ce:	2110      	movs	r1, #16
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <NRF24_FlushTX+0x3c>)
 80003d2:	f001 fe36 	bl	8002042 <HAL_GPIO_WritePin>
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40010800 	.word	0x40010800
 80003e4:	20000658 	.word	0x20000658

080003e8 <read_config_registers>:
	NRF24L01_RX_Mode();
}
>>>>>>> FFF
//----------------------------------------------------------------------------------------
// Read config data from nrf registers
bool read_config_registers(void)
{
<<<<<<< HEAD
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8000b28:	2064      	movs	r0, #100	; 0x64
 8000b2a:	f002 fa99 	bl	8003060 <HAL_Delay>

	config_array[0] = NRF24_ReadReg(CONFIG);			// 0x0B
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f7ff fde6 	bl	8000700 <NRF24_ReadReg>
 8000b34:	4603      	mov	r3, r0
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <read_config_registers+0x78>)
 8000b3a:	701a      	strb	r2, [r3, #0]
	config_array[1] = NRF24_ReadReg(EN_AA);			    // 0x01
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f7ff fddf 	bl	8000700 <NRF24_ReadReg>
 8000b42:	4603      	mov	r3, r0
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <read_config_registers+0x78>)
 8000b48:	705a      	strb	r2, [r3, #1]
	config_array[2] = NRF24_ReadReg(EN_RXADDR); 		// 0x01
 8000b4a:	2002      	movs	r0, #2
 8000b4c:	f7ff fdd8 	bl	8000700 <NRF24_ReadReg>
 8000b50:	4603      	mov	r3, r0
 8000b52:	461a      	mov	r2, r3
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <read_config_registers+0x78>)
 8000b56:	709a      	strb	r2, [r3, #2]
	config_array[3] = NRF24_ReadReg(STATUS_NRF);		// 0x0E
 8000b58:	2007      	movs	r0, #7
 8000b5a:	f7ff fdd1 	bl	8000700 <NRF24_ReadReg>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <read_config_registers+0x78>)
 8000b64:	70da      	strb	r2, [r3, #3]
	config_array[4] = NRF24_ReadReg(RF_SETUP);		    // 0x06
 8000b66:	2006      	movs	r0, #6
 8000b68:	f7ff fdca 	bl	8000700 <NRF24_ReadReg>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <read_config_registers+0x78>)
 8000b72:	711a      	strb	r2, [r3, #4]

	NRF24_Read_Buf(TX_ADDR,buf1,3);
 8000b74:	2203      	movs	r2, #3
 8000b76:	490a      	ldr	r1, [pc, #40]	; (8000ba0 <read_config_registers+0x7c>)
 8000b78:	2010      	movs	r0, #16
 8000b7a:	f7ff fe4d 	bl	8000818 <NRF24_Read_Buf>
	NRF24_Read_Buf(RX_ADDR_P0,buf1,3);
 8000b7e:	2203      	movs	r2, #3
 8000b80:	4907      	ldr	r1, [pc, #28]	; (8000ba0 <read_config_registers+0x7c>)
 8000b82:	200a      	movs	r0, #10
 8000b84:	f7ff fe48 	bl	8000818 <NRF24_Read_Buf>

	if(config_array[0] == 0)		// Data from nrf module was read
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <read_config_registers+0x78>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d101      	bne.n	8000b94 <read_config_registers+0x70>
	{
		return false;
 8000b90:	2300      	movs	r3, #0
 8000b92:	e000      	b.n	8000b96 <read_config_registers+0x72>
=======
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80003ec:	2064      	movs	r0, #100	; 0x64
 80003ee:	f001 faab 	bl	8001948 <HAL_Delay>

	config_array[0] = NRF24_ReadReg(CONFIG);			// 0x0B
 80003f2:	2000      	movs	r0, #0
 80003f4:	f7ff fecc 	bl	8000190 <NRF24_ReadReg>
 80003f8:	4603      	mov	r3, r0
 80003fa:	461a      	mov	r2, r3
 80003fc:	4b18      	ldr	r3, [pc, #96]	; (8000460 <read_config_registers+0x78>)
 80003fe:	701a      	strb	r2, [r3, #0]
	config_array[1] = NRF24_ReadReg(EN_AA);			    // 0x01
 8000400:	2001      	movs	r0, #1
 8000402:	f7ff fec5 	bl	8000190 <NRF24_ReadReg>
 8000406:	4603      	mov	r3, r0
 8000408:	461a      	mov	r2, r3
 800040a:	4b15      	ldr	r3, [pc, #84]	; (8000460 <read_config_registers+0x78>)
 800040c:	705a      	strb	r2, [r3, #1]
	config_array[2] = NRF24_ReadReg(EN_RXADDR); 		// 0x01
 800040e:	2002      	movs	r0, #2
 8000410:	f7ff febe 	bl	8000190 <NRF24_ReadReg>
 8000414:	4603      	mov	r3, r0
 8000416:	461a      	mov	r2, r3
 8000418:	4b11      	ldr	r3, [pc, #68]	; (8000460 <read_config_registers+0x78>)
 800041a:	709a      	strb	r2, [r3, #2]
	config_array[3] = NRF24_ReadReg(STATUS_NRF);		// 0x0E
 800041c:	2007      	movs	r0, #7
 800041e:	f7ff feb7 	bl	8000190 <NRF24_ReadReg>
 8000422:	4603      	mov	r3, r0
 8000424:	461a      	mov	r2, r3
 8000426:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <read_config_registers+0x78>)
 8000428:	70da      	strb	r2, [r3, #3]
	config_array[4] = NRF24_ReadReg(RF_SETUP);		    // 0x06
 800042a:	2006      	movs	r0, #6
 800042c:	f7ff feb0 	bl	8000190 <NRF24_ReadReg>
 8000430:	4603      	mov	r3, r0
 8000432:	461a      	mov	r2, r3
 8000434:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <read_config_registers+0x78>)
 8000436:	711a      	strb	r2, [r3, #4]

	NRF24_Read_Buf(TX_ADDR,buf1,3);
 8000438:	2203      	movs	r2, #3
 800043a:	490a      	ldr	r1, [pc, #40]	; (8000464 <read_config_registers+0x7c>)
 800043c:	2010      	movs	r0, #16
 800043e:	f7ff ff33 	bl	80002a8 <NRF24_Read_Buf>
	NRF24_Read_Buf(RX_ADDR_P0,buf1,3);
 8000442:	2203      	movs	r2, #3
 8000444:	4907      	ldr	r1, [pc, #28]	; (8000464 <read_config_registers+0x7c>)
 8000446:	200a      	movs	r0, #10
 8000448:	f7ff ff2e 	bl	80002a8 <NRF24_Read_Buf>

	if(config_array[0] == 0)		// Data from nrf module was read
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <read_config_registers+0x78>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d101      	bne.n	8000458 <read_config_registers+0x70>
	{
		return false;
 8000454:	2300      	movs	r3, #0
 8000456:	e000      	b.n	800045a <read_config_registers+0x72>
>>>>>>> FFF
	}
	else
	{
		return true;
<<<<<<< HEAD
 8000b94:	2301      	movs	r3, #1
	}
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000128 	.word	0x20000128
 8000ba0:	20000138 	.word	0x20000138

08000ba4 <IRQ_Callback>:
=======
 8000458:	2301      	movs	r3, #1
	}
}
 800045a:	4618      	mov	r0, r3
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	200000b0 	.word	0x200000b0
 8000464:	200000c0 	.word	0x200000c0

08000468 <IRQ_Callback>:
>>>>>>> FFF
	status = read_config_registers();
	return status;
}
//----------------------------------------------------------------------------------------
void IRQ_Callback(void)
{
<<<<<<< HEAD
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
	Якщо в режимі передавача, тоді колбек всеодно викличиться, тільки колбеком потрібно
	замінити читанням #define IRQ HAL_GPIO_ReadPin(IRQ_GPIO_PORT, IRQ_PIN)
	*/


	uint8_t status=0x01;
 8000baa:	2301      	movs	r3, #1
 8000bac:	71fb      	strb	r3, [r7, #7]
	uint16_t dt=0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000bb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb6:	4814      	ldr	r0, [pc, #80]	; (8000c08 <IRQ_Callback+0x64>)
 8000bb8:	f002 fde7 	bl	800378a <HAL_GPIO_TogglePin>

	DelayMicro(10);
 8000bbc:	200a      	movs	r0, #10
 8000bbe:	f7ff fd7d 	bl	80006bc <DelayMicro>

	status = NRF24_ReadReg(STATUS_NRF);
 8000bc2:	2007      	movs	r0, #7
 8000bc4:	f7ff fd9c 	bl	8000700 <NRF24_ReadReg>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	71fb      	strb	r3, [r7, #7]
	if(status & 0x40)									    //	Flag: Data ready in FIFO  (Check RX_DR flag)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d013      	beq.n	8000bfe <IRQ_Callback+0x5a>
	{
		pipe = (status>>1) & 0x07;
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	085b      	lsrs	r3, r3, #1
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	f003 0307 	and.w	r3, r3, #7
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <IRQ_Callback+0x68>)
 8000be4:	701a      	strb	r2, [r3, #0]
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 8000be6:	220a      	movs	r2, #10
 8000be8:	4909      	ldr	r1, [pc, #36]	; (8000c10 <IRQ_Callback+0x6c>)
 8000bea:	2061      	movs	r0, #97	; 0x61
 8000bec:	f7ff fe14 	bl	8000818 <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS_NRF, 0x40);					// For turn down interrupt in nrf module
 8000bf0:	2140      	movs	r1, #64	; 0x40
 8000bf2:	2007      	movs	r0, #7
 8000bf4:	f7ff fdb8 	bl	8000768 <NRF24_WriteReg>
		rx_flag = 1;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <IRQ_Callback+0x70>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
	}
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40011000 	.word	0x40011000
 8000c0c:	2000014c 	.word	0x2000014c
 8000c10:	2000011c 	.word	0x2000011c
 8000c14:	20000126 	.word	0x20000126

08000c18 <NRF24L01_TX_Mode>:

	read_config_registers();	// For debug
}
//----------------------------------------------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 8000c20:	2203      	movs	r2, #3
 8000c22:	4908      	ldr	r1, [pc, #32]	; (8000c44 <NRF24L01_TX_Mode+0x2c>)
 8000c24:	2010      	movs	r0, #16
 8000c26:	f7ff fe21 	bl	800086c <NRF24_Write_Buf>
  CE_RESET;
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <NRF24L01_TX_Mode+0x30>)
 8000c30:	f002 fd93 	bl	800375a <HAL_GPIO_WritePin>
  // Flush buffers
  NRF24_FlushRX();
 8000c34:	f7ff fe4c 	bl	80008d0 <NRF24_FlushRX>
  NRF24_FlushTX();
 8000c38:	f7ff fe6c 	bl	8000914 <NRF24_FlushTX>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	2000000c 	.word	0x2000000c
 8000c48:	40010800 	.word	0x40010800

08000c4c <NRF24_Transmit>:
//----------------------------------------------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	71bb      	strb	r3, [r7, #6]
  CE_RESET;
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2108      	movs	r1, #8
 8000c60:	4813      	ldr	r0, [pc, #76]	; (8000cb0 <NRF24_Transmit+0x64>)
 8000c62:	f002 fd7a 	bl	800375a <HAL_GPIO_WritePin>
  CS_ON;
 8000c66:	2200      	movs	r2, #0
 8000c68:	2110      	movs	r1, #16
 8000c6a:	4811      	ldr	r0, [pc, #68]	; (8000cb0 <NRF24_Transmit+0x64>)
 8000c6c:	f002 fd75 	bl	800375a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);	//Send address in NRF module
 8000c70:	1df9      	adds	r1, r7, #7
 8000c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c76:	2201      	movs	r2, #1
 8000c78:	480e      	ldr	r0, [pc, #56]	; (8000cb4 <NRF24_Transmit+0x68>)
 8000c7a:	f003 feaf 	bl	80049dc <HAL_SPI_Transmit>
  DelayMicro(1);
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f7ff fd1c 	bl	80006bc <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000); //Send buff in NRF module
 8000c84:	79bb      	ldrb	r3, [r7, #6]
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8c:	6839      	ldr	r1, [r7, #0]
 8000c8e:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <NRF24_Transmit+0x68>)
 8000c90:	f003 fea4 	bl	80049dc <HAL_SPI_Transmit>
  CS_OFF;
 8000c94:	2201      	movs	r2, #1
 8000c96:	2110      	movs	r1, #16
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <NRF24_Transmit+0x64>)
 8000c9a:	f002 fd5e 	bl	800375a <HAL_GPIO_WritePin>
  CE_SET;
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <NRF24_Transmit+0x64>)
 8000ca4:	f002 fd59 	bl	800375a <HAL_GPIO_WritePin>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40010800 	.word	0x40010800
 8000cb4:	200006d0 	.word	0x200006d0

08000cb8 <NRF24L01_Send>:
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint8_t status=0x00, regval=0x00;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	73fb      	strb	r3, [r7, #15]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73bb      	strb	r3, [r7, #14]
  NRF24L01_TX_Mode(pBuf);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ffa5 	bl	8000c18 <NRF24L01_TX_Mode>
  // If module in sleep mode, wake up it send PWR_UP and PRIM_RX bits in CONFIG
  regval |= (1<<PWR_UP);			// Set power up
 8000cce:	7bbb      	ldrb	r3, [r7, #14]
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	73bb      	strb	r3, [r7, #14]
  regval &= ~(1<<PRIM_RX);			// Set TX mode
 8000cd6:	7bbb      	ldrb	r3, [r7, #14]
 8000cd8:	f023 0301 	bic.w	r3, r3, #1
 8000cdc:	73bb      	strb	r3, [r7, #14]
  NRF24_WriteReg(CONFIG,regval);
 8000cde:	7bbb      	ldrb	r3, [r7, #14]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f7ff fd40 	bl	8000768 <NRF24_WriteReg>
  DelayMicro(150); 					// Delay more then 130 us
 8000ce8:	2096      	movs	r0, #150	; 0x96
 8000cea:	f7ff fce7 	bl	80006bc <DelayMicro>
  NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);	// Send data
 8000cee:	220a      	movs	r2, #10
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	20a0      	movs	r0, #160	; 0xa0
 8000cf4:	f7ff ffaa 	bl	8000c4c <NRF24_Transmit>

  CE_SET;
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2108      	movs	r1, #8
 8000cfc:	481c      	ldr	r0, [pc, #112]	; (8000d70 <NRF24L01_Send+0xb8>)
 8000cfe:	f002 fd2c 	bl	800375a <HAL_GPIO_WritePin>
  DelayMicro(15); 					//minimum 10us high pulse (Page 21)
 8000d02:	200f      	movs	r0, #15
 8000d04:	f7ff fcda 	bl	80006bc <DelayMicro>
  CE_RESET;
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2108      	movs	r1, #8
 8000d0c:	4818      	ldr	r0, [pc, #96]	; (8000d70 <NRF24L01_Send+0xb8>)
 8000d0e:	f002 fd24 	bl	800375a <HAL_GPIO_WritePin>

  // Waiting interrupt signal from IRQ
  while((GPIO_PinState)IRQ == GPIO_PIN_SET){}
 8000d12:	bf00      	nop
 8000d14:	2104      	movs	r1, #4
 8000d16:	4816      	ldr	r0, [pc, #88]	; (8000d70 <NRF24L01_Send+0xb8>)
 8000d18:	f002 fd08 	bl	800372c <HAL_GPIO_ReadPin>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d0f8      	beq.n	8000d14 <NRF24L01_Send+0x5c>

  status = NRF24_ReadReg(STATUS_NRF);		// Read status sent data to RX
 8000d22:	2007      	movs	r0, #7
 8000d24:	f7ff fcec 	bl	8000700 <NRF24_ReadReg>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	73fb      	strb	r3, [r7, #15]
  if(status & TX_DS) 	     //TX_DS == 0x20   // When transmitted data was receive, and we take back ACK answer
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	f003 0320 	and.w	r3, r3, #32
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d004      	beq.n	8000d40 <NRF24L01_Send+0x88>
  {
      NRF24_WriteReg(STATUS_NRF, 0x20);
 8000d36:	2120      	movs	r1, #32
 8000d38:	2007      	movs	r0, #7
 8000d3a:	f7ff fd15 	bl	8000768 <NRF24_WriteReg>
 8000d3e:	e00a      	b.n	8000d56 <NRF24L01_Send+0x9e>
  }
  else if(status & MAX_RT)   //MAX_RT == 0x10  // Retransmeet data flag
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	f003 0310 	and.w	r3, r3, #16
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d005      	beq.n	8000d56 <NRF24L01_Send+0x9e>
  {
	  NRF24_WriteReg(STATUS_NRF, 0x10);
 8000d4a:	2110      	movs	r1, #16
 8000d4c:	2007      	movs	r0, #7
 8000d4e:	f7ff fd0b 	bl	8000768 <NRF24_WriteReg>
	  NRF24_FlushTX();
 8000d52:	f7ff fddf 	bl	8000914 <NRF24_FlushTX>
  }

  regval = NRF24_ReadReg(OBSERVE_TX);   // Return Count lost packets and count transmitted packets
 8000d56:	2008      	movs	r0, #8
 8000d58:	f7ff fcd2 	bl	8000700 <NRF24_ReadReg>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	73bb      	strb	r3, [r7, #14]

  // Switch on RX mode
  NRF24L01_RX_Mode();
 8000d60:	f7ff fdfa 	bl	8000958 <NRF24L01_RX_Mode>

  return regval;
 8000d64:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40010800 	.word	0x40010800

08000d74 <NRF24_ini>:
//----------------------------------------------------------------------------------------
void NRF24_ini(void)    // TRANSMITTER
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	CE_RESET;
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2108      	movs	r1, #8
 8000d7c:	4824      	ldr	r0, [pc, #144]	; (8000e10 <NRF24_ini+0x9c>)
 8000d7e:	f002 fcec 	bl	800375a <HAL_GPIO_WritePin>
	DelayMicro(5000);
 8000d82:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d86:	f7ff fc99 	bl	80006bc <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 8000d8a:	210a      	movs	r1, #10
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f7ff fceb 	bl	8000768 <NRF24_WriteReg>

	DelayMicro(5000);
 8000d92:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d96:	f7ff fc91 	bl	80006bc <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable Pipe0
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f7ff fce3 	bl	8000768 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe0
 8000da2:	2101      	movs	r1, #1
 8000da4:	2002      	movs	r0, #2
 8000da6:	f7ff fcdf 	bl	8000768 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 8000daa:	2101      	movs	r1, #1
 8000dac:	2003      	movs	r0, #3
 8000dae:	f7ff fcdb 	bl	8000768 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 8000db2:	215f      	movs	r1, #95	; 0x5f
 8000db4:	2004      	movs	r0, #4
 8000db6:	f7ff fcd7 	bl	8000768 <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 8000dba:	f7ff fd03 	bl	80007c4 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	201d      	movs	r0, #29
 8000dc2:	f7ff fcd1 	bl	8000768 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	201c      	movs	r0, #28
 8000dca:	f7ff fccd 	bl	8000768 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 8000dce:	2170      	movs	r1, #112	; 0x70
 8000dd0:	2007      	movs	r0, #7
 8000dd2:	f7ff fcc9 	bl	8000768 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 8000dd6:	214c      	movs	r1, #76	; 0x4c
 8000dd8:	2005      	movs	r0, #5
 8000dda:	f7ff fcc5 	bl	8000768 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate:250kbps
 8000dde:	2126      	movs	r1, #38	; 0x26
 8000de0:	2006      	movs	r0, #6
 8000de2:	f7ff fcc1 	bl	8000768 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);			// Write TX address
 8000de6:	2203      	movs	r2, #3
 8000de8:	490a      	ldr	r1, [pc, #40]	; (8000e14 <NRF24_ini+0xa0>)
 8000dea:	2010      	movs	r0, #16
 8000dec:	f7ff fd3e 	bl	800086c <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);		// Set up pipe 0 address
 8000df0:	2203      	movs	r2, #3
 8000df2:	4908      	ldr	r1, [pc, #32]	; (8000e14 <NRF24_ini+0xa0>)
 8000df4:	200a      	movs	r0, #10
 8000df6:	f7ff fd39 	bl	800086c <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 	// Number of bytes in TX buffer
 8000dfa:	210a      	movs	r1, #10
 8000dfc:	2011      	movs	r0, #17
 8000dfe:	f7ff fcb3 	bl	8000768 <NRF24_WriteReg>

	NRF24L01_RX_Mode();
 8000e02:	f7ff fda9 	bl	8000958 <NRF24L01_RX_Mode>

	read_config_registers();	// For debug
 8000e06:	f7ff fe8d 	bl	8000b24 <read_config_registers>
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40010800 	.word	0x40010800
 8000e14:	2000000c 	.word	0x2000000c

08000e18 <nrf_communication_test>:
//----------------------------------------------------------------------------------------
void nrf_communication_test(void)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b091      	sub	sp, #68	; 0x44
 8000e1c:	af00      	add	r7, sp, #0
	NRF24_ini();
 8000e1e:	f7ff ffa9 	bl	8000d74 <NRF24_ini>

	char ctr[5] = {0};
 8000e22:	2300      	movs	r3, #0
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
 8000e26:	2300      	movs	r3, #0
 8000e28:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	char ctr_buf[5] = {0};
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e30:	2300      	movs	r3, #0
 8000e32:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uint8_t retr_cnt, dt = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	int test_data = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	63fb      	str	r3, [r7, #60]	; 0x3c

	while(1)
	{
		// Test transmit data
		sprintf(buf1, "%d", test_data);
 8000e40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e42:	4971      	ldr	r1, [pc, #452]	; (8001008 <nrf_communication_test+0x1f0>)
 8000e44:	4871      	ldr	r0, [pc, #452]	; (800100c <nrf_communication_test+0x1f4>)
 8000e46:	f005 fc93 	bl	8006770 <siprintf>

		// Print transmit data
		uint8_t test[25] = {0};
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]
 8000e5e:	751a      	strb	r2, [r3, #20]
		uint8_t test_i[10] = {0};
 8000e60:	2300      	movs	r3, #0
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	f107 0308 	add.w	r3, r7, #8
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	809a      	strh	r2, [r3, #4]

		ssd1306_SetCursor(0, 16);
 8000e6e:	2110      	movs	r1, #16
 8000e70:	2000      	movs	r0, #0
 8000e72:	f000 fac3 	bl	80013fc <ssd1306_SetCursor>
		strcpy(test, "Data:");
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	4a65      	ldr	r2, [pc, #404]	; (8001010 <nrf_communication_test+0x1f8>)
 8000e7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e80:	6018      	str	r0, [r3, #0]
 8000e82:	3304      	adds	r3, #4
 8000e84:	8019      	strh	r1, [r3, #0]
		strcat(test, buf1);
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	4960      	ldr	r1, [pc, #384]	; (800100c <nrf_communication_test+0x1f4>)
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f005 fc8f 	bl	80067b0 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 8000e92:	4a60      	ldr	r2, [pc, #384]	; (8001014 <nrf_communication_test+0x1fc>)
 8000e94:	f107 0010 	add.w	r0, r7, #16
 8000e98:	2301      	movs	r3, #1
 8000e9a:	ca06      	ldmia	r2, {r1, r2}
 8000e9c:	f000 fa88 	bl	80013b0 <ssd1306_WriteString>

		dt = NRF24L01_Send(buf1);						// Transmit data
 8000ea0:	485a      	ldr	r0, [pc, #360]	; (800100c <nrf_communication_test+0x1f4>)
 8000ea2:	f7ff ff09 	bl	8000cb8 <NRF24L01_Send>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		retr_cnt = dt & 0xF;
 8000eac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eb0:	f003 030f 	and.w	r3, r3, #15
 8000eb4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		retr_cnt_full += retr_cnt;
 8000eb8:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8000ebc:	4b56      	ldr	r3, [pc, #344]	; (8001018 <nrf_communication_test+0x200>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	4a55      	ldr	r2, [pc, #340]	; (8001018 <nrf_communication_test+0x200>)
 8000ec4:	6013      	str	r3, [r2, #0]

		// Print transmit counter
		memset(test, 0, sizeof(test));
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	2219      	movs	r2, #25
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f005 fb90 	bl	80065f4 <memset>
		memset(test_i, 0, sizeof(test_i));
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	220a      	movs	r2, #10
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f005 fb8a 	bl	80065f4 <memset>

		ssd1306_SetCursor(0, 26);
 8000ee0:	211a      	movs	r1, #26
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 fa8a 	bl	80013fc <ssd1306_SetCursor>
		strcpy(test, "Conut trans:");
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	4a4b      	ldr	r2, [pc, #300]	; (800101c <nrf_communication_test+0x204>)
 8000eee:	461c      	mov	r4, r3
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ef4:	c407      	stmia	r4!, {r0, r1, r2}
 8000ef6:	7023      	strb	r3, [r4, #0]
		// number in string
		itoa(i, test_i, 10);
 8000ef8:	4b49      	ldr	r3, [pc, #292]	; (8001020 <nrf_communication_test+0x208>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	1d39      	adds	r1, r7, #4
 8000efe:	220a      	movs	r2, #10
 8000f00:	4618      	mov	r0, r3
 8000f02:	f005 fb67 	bl	80065d4 <itoa>
		strcat(test, test_i);
 8000f06:	1d3a      	adds	r2, r7, #4
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f005 fc4e 	bl	80067b0 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 8000f14:	4a3f      	ldr	r2, [pc, #252]	; (8001014 <nrf_communication_test+0x1fc>)
 8000f16:	f107 0010 	add.w	r0, r7, #16
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	ca06      	ldmia	r2, {r1, r2}
 8000f1e:	f000 fa47 	bl	80013b0 <ssd1306_WriteString>

		// Print retransmeet counter
		memset(test, 0, sizeof(test));
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	2219      	movs	r2, #25
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f005 fb62 	bl	80065f4 <memset>
		memset(test_i, 0, sizeof(test_i));
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	220a      	movs	r2, #10
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f005 fb5c 	bl	80065f4 <memset>

		ssd1306_SetCursor(0, 36);
 8000f3c:	2124      	movs	r1, #36	; 0x24
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f000 fa5c 	bl	80013fc <ssd1306_SetCursor>
		strcpy(test, "Retransm:");
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	4a36      	ldr	r2, [pc, #216]	; (8001024 <nrf_communication_test+0x20c>)
 8000f4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f4c:	c303      	stmia	r3!, {r0, r1}
 8000f4e:	801a      	strh	r2, [r3, #0]
		itoa(retr_cnt_full, test_i, 10);
 8000f50:	4b31      	ldr	r3, [pc, #196]	; (8001018 <nrf_communication_test+0x200>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	1d39      	adds	r1, r7, #4
 8000f56:	220a      	movs	r2, #10
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f005 fb3b 	bl	80065d4 <itoa>
		strcat(test, test_i);
 8000f5e:	1d3a      	adds	r2, r7, #4
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	4611      	mov	r1, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f005 fc22 	bl	80067b0 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 8000f6c:	4a29      	ldr	r2, [pc, #164]	; (8001014 <nrf_communication_test+0x1fc>)
 8000f6e:	f107 0010 	add.w	r0, r7, #16
 8000f72:	2301      	movs	r3, #1
 8000f74:	ca06      	ldmia	r2, {r1, r2}
 8000f76:	f000 fa1b 	bl	80013b0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000f7a:	f000 f909 	bl	8001190 <ssd1306_UpdateScreen>

		// Print lost pacets
		memset(test, 0, sizeof(test));
 8000f7e:	f107 0310 	add.w	r3, r7, #16
 8000f82:	2219      	movs	r2, #25
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f005 fb34 	bl	80065f4 <memset>
		memset(test_i, 0, sizeof(test_i));
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	220a      	movs	r2, #10
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f005 fb2e 	bl	80065f4 <memset>

		cnt_lost = dt >> 4;
 8000f98:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f9c:	091b      	lsrs	r3, r3, #4
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b21      	ldr	r3, [pc, #132]	; (8001028 <nrf_communication_test+0x210>)
 8000fa4:	601a      	str	r2, [r3, #0]

		ssd1306_SetCursor(0, 46);
 8000fa6:	212e      	movs	r1, #46	; 0x2e
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f000 fa27 	bl	80013fc <ssd1306_SetCursor>
		strcpy(test, "Lost:");
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	4a1e      	ldr	r2, [pc, #120]	; (800102c <nrf_communication_test+0x214>)
 8000fb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fb8:	6018      	str	r0, [r3, #0]
 8000fba:	3304      	adds	r3, #4
 8000fbc:	8019      	strh	r1, [r3, #0]
		itoa(cnt_lost, test_i, 10);
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <nrf_communication_test+0x210>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	1d39      	adds	r1, r7, #4
 8000fc4:	220a      	movs	r2, #10
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f005 fb04 	bl	80065d4 <itoa>
		strcat(test, test_i);
 8000fcc:	1d3a      	adds	r2, r7, #4
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f005 fbeb 	bl	80067b0 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 8000fda:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <nrf_communication_test+0x1fc>)
 8000fdc:	f107 0010 	add.w	r0, r7, #16
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	ca06      	ldmia	r2, {r1, r2}
 8000fe4:	f000 f9e4 	bl	80013b0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000fe8:	f000 f8d2 	bl	8001190 <ssd1306_UpdateScreen>

		test_data++;
 8000fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fee:	3301      	adds	r3, #1
 8000ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
		i++;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <nrf_communication_test+0x208>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	4a09      	ldr	r2, [pc, #36]	; (8001020 <nrf_communication_test+0x208>)
 8000ffa:	6013      	str	r3, [r2, #0]

		HAL_Delay(500);
 8000ffc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001000:	f002 f82e 	bl	8003060 <HAL_Delay>
	{
 8001004:	e71c      	b.n	8000e40 <nrf_communication_test+0x28>
 8001006:	bf00      	nop
 8001008:	08006f8c 	.word	0x08006f8c
 800100c:	20000138 	.word	0x20000138
 8001010:	08006f90 	.word	0x08006f90
 8001014:	20000014 	.word	0x20000014
 8001018:	20000150 	.word	0x20000150
 800101c:	08006f98 	.word	0x08006f98
 8001020:	20000010 	.word	0x20000010
 8001024:	08006fa8 	.word	0x08006fa8
 8001028:	20000154 	.word	0x20000154
 800102c:	08006fb4 	.word	0x08006fb4

08001030 <clearn_oled>:
	  ssd1306_Fill(Black);
	  ssd1306_UpdateScreen();
}
=======
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 800046e:	2301      	movs	r3, #1
 8000470:	71fb      	strb	r3, [r7, #7]
	uint16_t dt=0;
 8000472:	2300      	movs	r3, #0
 8000474:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000476:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047a:	4814      	ldr	r0, [pc, #80]	; (80004cc <IRQ_Callback+0x64>)
 800047c:	f001 fdf9 	bl	8002072 <HAL_GPIO_TogglePin>

	DelayMicro(10);
 8000480:	200a      	movs	r0, #10
 8000482:	f7ff fe63 	bl	800014c <DelayMicro>

	status = NRF24_ReadReg(STATUS_NRF);
 8000486:	2007      	movs	r0, #7
 8000488:	f7ff fe82 	bl	8000190 <NRF24_ReadReg>
 800048c:	4603      	mov	r3, r0
 800048e:	71fb      	strb	r3, [r7, #7]
	if(status & 0x40)									    //	Flag: Data ready in FIFO  (Check RX_DR flag)
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000496:	2b00      	cmp	r3, #0
 8000498:	d013      	beq.n	80004c2 <IRQ_Callback+0x5a>
	{
		pipe = (status>>1) & 0x07;
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	085b      	lsrs	r3, r3, #1
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	f003 0307 	and.w	r3, r3, #7
 80004a4:	b2da      	uxtb	r2, r3
 80004a6:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <IRQ_Callback+0x68>)
 80004a8:	701a      	strb	r2, [r3, #0]
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 80004aa:	220a      	movs	r2, #10
 80004ac:	4909      	ldr	r1, [pc, #36]	; (80004d4 <IRQ_Callback+0x6c>)
 80004ae:	2061      	movs	r0, #97	; 0x61
 80004b0:	f7ff fefa 	bl	80002a8 <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS_NRF, 0x40);					// For turn down interrupt in nrf module
 80004b4:	2140      	movs	r1, #64	; 0x40
 80004b6:	2007      	movs	r0, #7
 80004b8:	f7ff fe9e 	bl	80001f8 <NRF24_WriteReg>
		rx_flag = 1;
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <IRQ_Callback+0x70>)
 80004be:	2201      	movs	r2, #1
 80004c0:	701a      	strb	r2, [r3, #0]
	}
}
 80004c2:	bf00      	nop
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40011000 	.word	0x40011000
 80004d0:	200000d4 	.word	0x200000d4
 80004d4:	200000a4 	.word	0x200000a4
 80004d8:	200000ae 	.word	0x200000ae

080004dc <NRF24L01_RX_Mode_ddddd>:

uint8_t TX_ADDRESS[TX_ADR_WIDTH] = {0xb3,0xb4,0x01};   // Address for pipe 0
uint32_t i=1,retr_cnt_full=0, cnt_lost=0;
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode_ddddd(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 80004e2:	2300      	movs	r3, #0
 80004e4:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 80004e6:	2000      	movs	r0, #0
 80004e8:	f7ff fe52 	bl	8000190 <NRF24_ReadReg>
 80004ec:	4603      	mov	r3, r0
 80004ee:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP)|(1<<PRIM_RX);	 // Power up module. Write PWR_UP и PRIM_RX bits
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	f043 0303 	orr.w	r3, r3, #3
 80004f6:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	4619      	mov	r1, r3
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff fe7b 	bl	80001f8 <NRF24_WriteReg>
  CE_SET;
 8000502:	2201      	movs	r2, #1
 8000504:	2108      	movs	r1, #8
 8000506:	4807      	ldr	r0, [pc, #28]	; (8000524 <NRF24L01_RX_Mode_ddddd+0x48>)
 8000508:	f001 fd9b 	bl	8002042 <HAL_GPIO_WritePin>
  DelayMicro(150);						 // Delay 130 us
 800050c:	2096      	movs	r0, #150	; 0x96
 800050e:	f7ff fe1d 	bl	800014c <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 8000512:	f7ff ff25 	bl	8000360 <NRF24_FlushRX>
  NRF24_FlushTX();
 8000516:	f7ff ff45 	bl	80003a4 <NRF24_FlushTX>
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40010800 	.word	0x40010800

08000528 <nrf_TX>:
>>>>>>> FFF
//----------------------------------------------------------------------------------------
void nrf_TX(void)
{
<<<<<<< HEAD
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	 ssd1306_Fill(Black);
 8001034:	2000      	movs	r0, #0
 8001036:	f000 f889 	bl	800114c <ssd1306_Fill>
	 ssd1306_UpdateScreen();
 800103a:	f000 f8a9 	bl	8001190 <ssd1306_UpdateScreen>
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <ssd1306_WriteCommand>:
=======
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	NRF24_init_TX_mode();
 800052c:	f000 f804 	bl	8000538 <NRF24_init_TX_mode>
	while(1)
	{
		NRF24L01_Transmission();
 8000530:	f000 f906 	bl	8000740 <NRF24L01_Transmission>
	{
 8000534:	e7fc      	b.n	8000530 <nrf_TX+0x8>
	...

08000538 <NRF24_init_TX_mode>:
	}
}
//----------------------------------------------------------------------------------------
void NRF24_init_TX_mode(void)    // TRANSMITTER
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
//	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
//	  GPIO_InitStruct.Pull = GPIO_PULLUP;
//	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);


	CE_RESET;
 800053c:	2200      	movs	r2, #0
 800053e:	2108      	movs	r1, #8
 8000540:	4824      	ldr	r0, [pc, #144]	; (80005d4 <NRF24_init_TX_mode+0x9c>)
 8000542:	f001 fd7e 	bl	8002042 <HAL_GPIO_WritePin>
	DelayMicro(5000);
 8000546:	f241 3088 	movw	r0, #5000	; 0x1388
 800054a:	f7ff fdff 	bl	800014c <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 800054e:	210a      	movs	r1, #10
 8000550:	2000      	movs	r0, #0
 8000552:	f7ff fe51 	bl	80001f8 <NRF24_WriteReg>

	DelayMicro(5000);
 8000556:	f241 3088 	movw	r0, #5000	; 0x1388
 800055a:	f7ff fdf7 	bl	800014c <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable Pipe0
 800055e:	2101      	movs	r1, #1
 8000560:	2001      	movs	r0, #1
 8000562:	f7ff fe49 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe0
 8000566:	2101      	movs	r1, #1
 8000568:	2002      	movs	r0, #2
 800056a:	f7ff fe45 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 800056e:	2101      	movs	r1, #1
 8000570:	2003      	movs	r0, #3
 8000572:	f7ff fe41 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 8000576:	215f      	movs	r1, #95	; 0x5f
 8000578:	2004      	movs	r0, #4
 800057a:	f7ff fe3d 	bl	80001f8 <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 800057e:	f7ff fe69 	bl	8000254 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 8000582:	2100      	movs	r1, #0
 8000584:	201d      	movs	r0, #29
 8000586:	f7ff fe37 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 800058a:	2100      	movs	r1, #0
 800058c:	201c      	movs	r0, #28
 800058e:	f7ff fe33 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 8000592:	2170      	movs	r1, #112	; 0x70
 8000594:	2007      	movs	r0, #7
 8000596:	f7ff fe2f 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 800059a:	214c      	movs	r1, #76	; 0x4c
 800059c:	2005      	movs	r0, #5
 800059e:	f7ff fe2b 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate:250kbps
 80005a2:	2126      	movs	r1, #38	; 0x26
 80005a4:	2006      	movs	r0, #6
 80005a6:	f7ff fe27 	bl	80001f8 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);			// Write TX address
 80005aa:	2203      	movs	r2, #3
 80005ac:	490a      	ldr	r1, [pc, #40]	; (80005d8 <NRF24_init_TX_mode+0xa0>)
 80005ae:	2010      	movs	r0, #16
 80005b0:	f7ff fea4 	bl	80002fc <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);		// Set up pipe 0 address
 80005b4:	2203      	movs	r2, #3
 80005b6:	4908      	ldr	r1, [pc, #32]	; (80005d8 <NRF24_init_TX_mode+0xa0>)
 80005b8:	200a      	movs	r0, #10
 80005ba:	f7ff fe9f 	bl	80002fc <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 	// Number of bytes in TX buffer
 80005be:	210a      	movs	r1, #10
 80005c0:	2011      	movs	r0, #17
 80005c2:	f7ff fe19 	bl	80001f8 <NRF24_WriteReg>

	NRF24L01_RX_Mode_ddddd();
 80005c6:	f7ff ff89 	bl	80004dc <NRF24L01_RX_Mode_ddddd>

	read_config_registers();	// For debug
 80005ca:	f7ff ff0d 	bl	80003e8 <read_config_registers>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40010800 	.word	0x40010800
 80005d8:	20000000 	.word	0x20000000

080005dc <NRF24L01_TX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 80005e4:	2203      	movs	r2, #3
 80005e6:	4908      	ldr	r1, [pc, #32]	; (8000608 <NRF24L01_TX_Mode+0x2c>)
 80005e8:	2010      	movs	r0, #16
 80005ea:	f7ff fe87 	bl	80002fc <NRF24_Write_Buf>
  CE_RESET;
 80005ee:	2200      	movs	r2, #0
 80005f0:	2108      	movs	r1, #8
 80005f2:	4806      	ldr	r0, [pc, #24]	; (800060c <NRF24L01_TX_Mode+0x30>)
 80005f4:	f001 fd25 	bl	8002042 <HAL_GPIO_WritePin>
  // Flush buffers
  NRF24_FlushRX();
 80005f8:	f7ff feb2 	bl	8000360 <NRF24_FlushRX>
  NRF24_FlushTX();
 80005fc:	f7ff fed2 	bl	80003a4 <NRF24_FlushTX>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000000 	.word	0x20000000
 800060c:	40010800 	.word	0x40010800

08000610 <NRF24_Transmit>:
//----------------------------------------------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	6039      	str	r1, [r7, #0]
 800061a:	71fb      	strb	r3, [r7, #7]
 800061c:	4613      	mov	r3, r2
 800061e:	71bb      	strb	r3, [r7, #6]
  CE_RESET;
 8000620:	2200      	movs	r2, #0
 8000622:	2108      	movs	r1, #8
 8000624:	4813      	ldr	r0, [pc, #76]	; (8000674 <NRF24_Transmit+0x64>)
 8000626:	f001 fd0c 	bl	8002042 <HAL_GPIO_WritePin>
  CS_ON;
 800062a:	2200      	movs	r2, #0
 800062c:	2110      	movs	r1, #16
 800062e:	4811      	ldr	r0, [pc, #68]	; (8000674 <NRF24_Transmit+0x64>)
 8000630:	f001 fd07 	bl	8002042 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);	//Send address in NRF module
 8000634:	1df9      	adds	r1, r7, #7
 8000636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063a:	2201      	movs	r2, #1
 800063c:	480e      	ldr	r0, [pc, #56]	; (8000678 <NRF24_Transmit+0x68>)
 800063e:	f002 fe41 	bl	80032c4 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000642:	2001      	movs	r0, #1
 8000644:	f7ff fd82 	bl	800014c <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000); //Send buff in NRF module
 8000648:	79bb      	ldrb	r3, [r7, #6]
 800064a:	b29a      	uxth	r2, r3
 800064c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000650:	6839      	ldr	r1, [r7, #0]
 8000652:	4809      	ldr	r0, [pc, #36]	; (8000678 <NRF24_Transmit+0x68>)
 8000654:	f002 fe36 	bl	80032c4 <HAL_SPI_Transmit>
  CS_OFF;
 8000658:	2201      	movs	r2, #1
 800065a:	2110      	movs	r1, #16
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <NRF24_Transmit+0x64>)
 800065e:	f001 fcf0 	bl	8002042 <HAL_GPIO_WritePin>
  CE_SET;
 8000662:	2201      	movs	r2, #1
 8000664:	2108      	movs	r1, #8
 8000666:	4803      	ldr	r0, [pc, #12]	; (8000674 <NRF24_Transmit+0x64>)
 8000668:	f001 fceb 	bl	8002042 <HAL_GPIO_WritePin>
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40010800 	.word	0x40010800
 8000678:	20000658 	.word	0x20000658

0800067c <NRF24L01_Send>:
//----------------------------------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint8_t status=0x00, regval=0x00;
 8000684:	2300      	movs	r3, #0
 8000686:	73fb      	strb	r3, [r7, #15]
 8000688:	2300      	movs	r3, #0
 800068a:	73bb      	strb	r3, [r7, #14]
  NRF24L01_TX_Mode(pBuf);
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff ffa5 	bl	80005dc <NRF24L01_TX_Mode>
  regval = NRF24_ReadReg(CONFIG);
 8000692:	2000      	movs	r0, #0
 8000694:	f7ff fd7c 	bl	8000190 <NRF24_ReadReg>
 8000698:	4603      	mov	r3, r0
 800069a:	73bb      	strb	r3, [r7, #14]
  // If module in sleep mode, wake up it send PWR_UP and PRIM_RX bits in CONFIG
  regval |= (1<<PWR_UP);			// Set power up
 800069c:	7bbb      	ldrb	r3, [r7, #14]
 800069e:	f043 0302 	orr.w	r3, r3, #2
 80006a2:	73bb      	strb	r3, [r7, #14]
  regval &= ~(1<<PRIM_RX);			// Set TX mode
 80006a4:	7bbb      	ldrb	r3, [r7, #14]
 80006a6:	f023 0301 	bic.w	r3, r3, #1
 80006aa:	73bb      	strb	r3, [r7, #14]
  NRF24_WriteReg(CONFIG,regval);
 80006ac:	7bbb      	ldrb	r3, [r7, #14]
 80006ae:	4619      	mov	r1, r3
 80006b0:	2000      	movs	r0, #0
 80006b2:	f7ff fda1 	bl	80001f8 <NRF24_WriteReg>
  DelayMicro(150); 					// Delay more then 130 us
 80006b6:	2096      	movs	r0, #150	; 0x96
 80006b8:	f7ff fd48 	bl	800014c <DelayMicro>
  NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);	// Send data
 80006bc:	220a      	movs	r2, #10
 80006be:	6879      	ldr	r1, [r7, #4]
 80006c0:	20a0      	movs	r0, #160	; 0xa0
 80006c2:	f7ff ffa5 	bl	8000610 <NRF24_Transmit>

  CE_SET;
 80006c6:	2201      	movs	r2, #1
 80006c8:	2108      	movs	r1, #8
 80006ca:	481c      	ldr	r0, [pc, #112]	; (800073c <NRF24L01_Send+0xc0>)
 80006cc:	f001 fcb9 	bl	8002042 <HAL_GPIO_WritePin>
  DelayMicro(15); 					//minimum 10us high pulse (Page 21)
 80006d0:	200f      	movs	r0, #15
 80006d2:	f7ff fd3b 	bl	800014c <DelayMicro>
  CE_RESET;
 80006d6:	2200      	movs	r2, #0
 80006d8:	2108      	movs	r1, #8
 80006da:	4818      	ldr	r0, [pc, #96]	; (800073c <NRF24L01_Send+0xc0>)
 80006dc:	f001 fcb1 	bl	8002042 <HAL_GPIO_WritePin>

  // Waiting interrupt signal from IRQ
  // ПРограма тут зависає !!!!!!!!!!!!!
  // Можливе рішення: Переконфігурувати пін з переривань на вхід. Перевірити на осцилографі чи єигнал від модуля !!!!!!
  // Чекає на відповідь від модуля NRF
  while((GPIO_PinState)IRQ == GPIO_PIN_SET){}		// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<, PROBLEM WHERE !!!!!!!!!!!!!!
 80006e0:	bf00      	nop
 80006e2:	2104      	movs	r1, #4
 80006e4:	4815      	ldr	r0, [pc, #84]	; (800073c <NRF24L01_Send+0xc0>)
 80006e6:	f001 fc95 	bl	8002014 <HAL_GPIO_ReadPin>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d0f8      	beq.n	80006e2 <NRF24L01_Send+0x66>

  status = NRF24_ReadReg(STATUS_NRF);		// Read status sent data to RX
 80006f0:	2007      	movs	r0, #7
 80006f2:	f7ff fd4d 	bl	8000190 <NRF24_ReadReg>
 80006f6:	4603      	mov	r3, r0
 80006f8:	73fb      	strb	r3, [r7, #15]
  if(status & TX_DS) 	     //TX_DS == 0x20   // When transmitted data was receive, and we take back ACK answer
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	f003 0320 	and.w	r3, r3, #32
 8000700:	2b00      	cmp	r3, #0
 8000702:	d004      	beq.n	800070e <NRF24L01_Send+0x92>
  {
      NRF24_WriteReg(STATUS_NRF, 0x20);
 8000704:	2120      	movs	r1, #32
 8000706:	2007      	movs	r0, #7
 8000708:	f7ff fd76 	bl	80001f8 <NRF24_WriteReg>
 800070c:	e00a      	b.n	8000724 <NRF24L01_Send+0xa8>
  }
  else if(status & MAX_RT)   //MAX_RT == 0x10  // Retransmeet data flag
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	f003 0310 	and.w	r3, r3, #16
 8000714:	2b00      	cmp	r3, #0
 8000716:	d005      	beq.n	8000724 <NRF24L01_Send+0xa8>
  {
    NRF24_WriteReg(STATUS_NRF, 0x10);
 8000718:	2110      	movs	r1, #16
 800071a:	2007      	movs	r0, #7
 800071c:	f7ff fd6c 	bl	80001f8 <NRF24_WriteReg>
    NRF24_FlushTX();
 8000720:	f7ff fe40 	bl	80003a4 <NRF24_FlushTX>
  }

  regval = NRF24_ReadReg(OBSERVE_TX);   // Return Count lost packets and count transmitted packets
 8000724:	2008      	movs	r0, #8
 8000726:	f7ff fd33 	bl	8000190 <NRF24_ReadReg>
 800072a:	4603      	mov	r3, r0
 800072c:	73bb      	strb	r3, [r7, #14]

  // Switch on RX mode
  NRF24L01_RX_Mode_ddddd();
 800072e:	f7ff fed5 	bl	80004dc <NRF24L01_RX_Mode_ddddd>

  return regval;
 8000732:	7bbb      	ldrb	r3, [r7, #14]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40010800 	.word	0x40010800

08000740 <NRF24L01_Transmission>:
//----------------------------------------------------------------------------------------
void NRF24L01_Transmission(void)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b095      	sub	sp, #84	; 0x54
 8000744:	af00      	add	r7, sp, #0
	//NRF24_ini();

	char ctr[5] = {0};
 8000746:	2300      	movs	r3, #0
 8000748:	647b      	str	r3, [r7, #68]	; 0x44
 800074a:	2300      	movs	r3, #0
 800074c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	char ctr_buf[5] = {0};
 8000750:	2300      	movs	r3, #0
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000754:	2300      	movs	r3, #0
 8000756:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

	uint8_t retr_cnt, dt = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	int test_data = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c

	while(1)
	{
		// Test transmit data
		uint8_t buf2[20]={0};
 8000764:	2300      	movs	r3, #0
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
 8000768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
		sprintf(buf2, "%d", test_data);
 8000776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800077a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800077c:	4972      	ldr	r1, [pc, #456]	; (8000948 <NRF24L01_Transmission+0x208>)
 800077e:	4618      	mov	r0, r3
 8000780:	f004 fc26 	bl	8004fd0 <siprintf>

		// Print transmit data
		uint8_t test[25] = {0};
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
 8000798:	751a      	strb	r2, [r3, #20]
		uint8_t test_i[10] = {0};
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	809a      	strh	r2, [r3, #4]

		ssd1306_SetCursor(0, 16);
 80007a6:	2110      	movs	r1, #16
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 fabb 	bl	8000d24 <ssd1306_SetCursor>
		strcpy(test, "Data:");
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	4a66      	ldr	r2, [pc, #408]	; (800094c <NRF24L01_Transmission+0x20c>)
 80007b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007b8:	6018      	str	r0, [r3, #0]
 80007ba:	3304      	adds	r3, #4
 80007bc:	8019      	strh	r1, [r3, #0]
		strcat(test, buf2);
 80007be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	4611      	mov	r1, r2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f004 fc21 	bl	8005010 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 80007ce:	4a60      	ldr	r2, [pc, #384]	; (8000950 <NRF24L01_Transmission+0x210>)
 80007d0:	f107 000c 	add.w	r0, r7, #12
 80007d4:	2301      	movs	r3, #1
 80007d6:	ca06      	ldmia	r2, {r1, r2}
 80007d8:	f000 fa7e 	bl	8000cd8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80007dc:	f000 f96c 	bl	8000ab8 <ssd1306_UpdateScreen>

		dt = NRF24L01_Send(buf2);						// Transmit data
 80007e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ff49 	bl	800067c <NRF24L01_Send>
 80007ea:	4603      	mov	r3, r0
 80007ec:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

		retr_cnt = dt & 0xF;
 80007f0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80007f4:	f003 030f 	and.w	r3, r3, #15
 80007f8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
		retr_cnt_full += retr_cnt;
 80007fc:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8000800:	4b54      	ldr	r3, [pc, #336]	; (8000954 <NRF24L01_Transmission+0x214>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4413      	add	r3, r2
 8000806:	4a53      	ldr	r2, [pc, #332]	; (8000954 <NRF24L01_Transmission+0x214>)
 8000808:	6013      	str	r3, [r2, #0]

		// Print transmit counter
		memset(test, 0, sizeof(test));
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2219      	movs	r2, #25
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f004 fb1e 	bl	8004e54 <memset>
		memset(test_i, 0, sizeof(test_i));
 8000818:	463b      	mov	r3, r7
 800081a:	220a      	movs	r2, #10
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f004 fb18 	bl	8004e54 <memset>

		ssd1306_SetCursor(0, 26);
 8000824:	211a      	movs	r1, #26
 8000826:	2000      	movs	r0, #0
 8000828:	f000 fa7c 	bl	8000d24 <ssd1306_SetCursor>
		strcpy(test, "Conut trans:");
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	4a49      	ldr	r2, [pc, #292]	; (8000958 <NRF24L01_Transmission+0x218>)
 8000832:	461c      	mov	r4, r3
 8000834:	4613      	mov	r3, r2
 8000836:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000838:	c407      	stmia	r4!, {r0, r1, r2}
 800083a:	7023      	strb	r3, [r4, #0]
		// number in string
		itoa(i, test_i, 10);
 800083c:	4b47      	ldr	r3, [pc, #284]	; (800095c <NRF24L01_Transmission+0x21c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4639      	mov	r1, r7
 8000842:	220a      	movs	r2, #10
 8000844:	4618      	mov	r0, r3
 8000846:	f004 faf5 	bl	8004e34 <itoa>
		strcat(test, test_i);
 800084a:	463a      	mov	r2, r7
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4611      	mov	r1, r2
 8000852:	4618      	mov	r0, r3
 8000854:	f004 fbdc 	bl	8005010 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 8000858:	4a3d      	ldr	r2, [pc, #244]	; (8000950 <NRF24L01_Transmission+0x210>)
 800085a:	f107 000c 	add.w	r0, r7, #12
 800085e:	2301      	movs	r3, #1
 8000860:	ca06      	ldmia	r2, {r1, r2}
 8000862:	f000 fa39 	bl	8000cd8 <ssd1306_WriteString>

		// Print retransmeet counter
		memset(test, 0, sizeof(test));
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2219      	movs	r2, #25
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f004 faf0 	bl	8004e54 <memset>
		memset(test_i, 0, sizeof(test_i));
 8000874:	463b      	mov	r3, r7
 8000876:	220a      	movs	r2, #10
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f004 faea 	bl	8004e54 <memset>

		ssd1306_SetCursor(0, 36);
 8000880:	2124      	movs	r1, #36	; 0x24
 8000882:	2000      	movs	r0, #0
 8000884:	f000 fa4e 	bl	8000d24 <ssd1306_SetCursor>
		strcpy(test, "Retransm:");
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	4a34      	ldr	r2, [pc, #208]	; (8000960 <NRF24L01_Transmission+0x220>)
 800088e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000890:	c303      	stmia	r3!, {r0, r1}
 8000892:	801a      	strh	r2, [r3, #0]
		itoa(retr_cnt_full, test_i, 10);
 8000894:	4b2f      	ldr	r3, [pc, #188]	; (8000954 <NRF24L01_Transmission+0x214>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4639      	mov	r1, r7
 800089a:	220a      	movs	r2, #10
 800089c:	4618      	mov	r0, r3
 800089e:	f004 fac9 	bl	8004e34 <itoa>
		strcat(test, test_i);
 80008a2:	463a      	mov	r2, r7
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f004 fbb0 	bl	8005010 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 80008b0:	4a27      	ldr	r2, [pc, #156]	; (8000950 <NRF24L01_Transmission+0x210>)
 80008b2:	f107 000c 	add.w	r0, r7, #12
 80008b6:	2301      	movs	r3, #1
 80008b8:	ca06      	ldmia	r2, {r1, r2}
 80008ba:	f000 fa0d 	bl	8000cd8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80008be:	f000 f8fb 	bl	8000ab8 <ssd1306_UpdateScreen>

		// Print lost pacets
		memset(test, 0, sizeof(test));
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	2219      	movs	r2, #25
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f004 fac2 	bl	8004e54 <memset>
		memset(test_i, 0, sizeof(test_i));
 80008d0:	463b      	mov	r3, r7
 80008d2:	220a      	movs	r2, #10
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f004 fabc 	bl	8004e54 <memset>

		cnt_lost = dt >> 4;
 80008dc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80008e0:	091b      	lsrs	r3, r3, #4
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <NRF24L01_Transmission+0x224>)
 80008e8:	601a      	str	r2, [r3, #0]

		ssd1306_SetCursor(0, 46);
 80008ea:	212e      	movs	r1, #46	; 0x2e
 80008ec:	2000      	movs	r0, #0
 80008ee:	f000 fa19 	bl	8000d24 <ssd1306_SetCursor>
		strcpy(test, "Lost:");
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	4a1c      	ldr	r2, [pc, #112]	; (8000968 <NRF24L01_Transmission+0x228>)
 80008f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008fc:	6018      	str	r0, [r3, #0]
 80008fe:	3304      	adds	r3, #4
 8000900:	8019      	strh	r1, [r3, #0]
		itoa(cnt_lost, test_i, 10);
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <NRF24L01_Transmission+0x224>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4639      	mov	r1, r7
 8000908:	220a      	movs	r2, #10
 800090a:	4618      	mov	r0, r3
 800090c:	f004 fa92 	bl	8004e34 <itoa>
		strcat(test, test_i);
 8000910:	463a      	mov	r2, r7
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f004 fb79 	bl	8005010 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 800091e:	4a0c      	ldr	r2, [pc, #48]	; (8000950 <NRF24L01_Transmission+0x210>)
 8000920:	f107 000c 	add.w	r0, r7, #12
 8000924:	2301      	movs	r3, #1
 8000926:	ca06      	ldmia	r2, {r1, r2}
 8000928:	f000 f9d6 	bl	8000cd8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800092c:	f000 f8c4 	bl	8000ab8 <ssd1306_UpdateScreen>

		test_data++;
 8000930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000932:	3301      	adds	r3, #1
 8000934:	64fb      	str	r3, [r7, #76]	; 0x4c
		i++;
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <NRF24L01_Transmission+0x21c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	3301      	adds	r3, #1
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <NRF24L01_Transmission+0x21c>)
 800093e:	6013      	str	r3, [r2, #0]

		HAL_Delay(100);
 8000940:	2064      	movs	r0, #100	; 0x64
 8000942:	f001 f801 	bl	8001948 <HAL_Delay>
	{
 8000946:	e70d      	b.n	8000764 <NRF24L01_Transmission+0x24>
 8000948:	08005790 	.word	0x08005790
 800094c:	08005794 	.word	0x08005794
 8000950:	20000008 	.word	0x20000008
 8000954:	200000d8 	.word	0x200000d8
 8000958:	0800579c 	.word	0x0800579c
 800095c:	20000004 	.word	0x20000004
 8000960:	080057ac 	.word	0x080057ac
 8000964:	200000dc 	.word	0x200000dc
 8000968:	080057b8 	.word	0x080057b8

0800096c <ssd1306_WriteCommand>:
>>>>>>> FFF

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
<<<<<<< HEAD
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af04      	add	r7, sp, #16
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800104e:	230a      	movs	r3, #10
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	2301      	movs	r3, #1
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	1dfb      	adds	r3, r7, #7
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	2200      	movs	r2, #0
 800105e:	2178      	movs	r1, #120	; 0x78
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <ssd1306_WriteCommand+0x2c>)
 8001062:	f002 fd07 	bl	8003a74 <HAL_I2C_Mem_Write>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200005f0 	.word	0x200005f0

08001074 <ssd1306_Init>:
=======
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af04      	add	r7, sp, #16
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8000976:	230a      	movs	r3, #10
 8000978:	9302      	str	r3, [sp, #8]
 800097a:	2301      	movs	r3, #1
 800097c:	9301      	str	r3, [sp, #4]
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	2301      	movs	r3, #1
 8000984:	2200      	movs	r2, #0
 8000986:	2178      	movs	r1, #120	; 0x78
 8000988:	4803      	ldr	r0, [pc, #12]	; (8000998 <ssd1306_WriteCommand+0x2c>)
 800098a:	f001 fce7 	bl	800235c <HAL_I2C_Mem_Write>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000578 	.word	0x20000578

0800099c <ssd1306_Init>:
>>>>>>> FFF

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
<<<<<<< HEAD
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8001078:	2064      	movs	r0, #100	; 0x64
 800107a:	f001 fff1 	bl	8003060 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 800107e:	20ae      	movs	r0, #174	; 0xae
 8001080:	f7ff ffe0 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001084:	2020      	movs	r0, #32
 8001086:	f7ff ffdd 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800108a:	2010      	movs	r0, #16
 800108c:	f7ff ffda 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001090:	20b0      	movs	r0, #176	; 0xb0
 8001092:	f7ff ffd7 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001096:	20c8      	movs	r0, #200	; 0xc8
 8001098:	f7ff ffd4 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff ffd1 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80010a2:	2010      	movs	r0, #16
 80010a4:	f7ff ffce 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 80010a8:	2040      	movs	r0, #64	; 0x40
 80010aa:	f7ff ffcb 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80010ae:	2081      	movs	r0, #129	; 0x81
 80010b0:	f7ff ffc8 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80010b4:	20ff      	movs	r0, #255	; 0xff
 80010b6:	f7ff ffc5 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80010ba:	20a1      	movs	r0, #161	; 0xa1
 80010bc:	f7ff ffc2 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80010c0:	20a6      	movs	r0, #166	; 0xa6
 80010c2:	f7ff ffbf 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80010c6:	20a8      	movs	r0, #168	; 0xa8
 80010c8:	f7ff ffbc 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80010cc:	203f      	movs	r0, #63	; 0x3f
 80010ce:	f7ff ffb9 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80010d2:	20a4      	movs	r0, #164	; 0xa4
 80010d4:	f7ff ffb6 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80010d8:	20d3      	movs	r0, #211	; 0xd3
 80010da:	f7ff ffb3 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80010de:	2000      	movs	r0, #0
 80010e0:	f7ff ffb0 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80010e4:	20d5      	movs	r0, #213	; 0xd5
 80010e6:	f7ff ffad 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80010ea:	20f0      	movs	r0, #240	; 0xf0
 80010ec:	f7ff ffaa 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80010f0:	20d9      	movs	r0, #217	; 0xd9
 80010f2:	f7ff ffa7 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80010f6:	2022      	movs	r0, #34	; 0x22
 80010f8:	f7ff ffa4 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 80010fc:	20da      	movs	r0, #218	; 0xda
 80010fe:	f7ff ffa1 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8001102:	2012      	movs	r0, #18
 8001104:	f7ff ff9e 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8001108:	20db      	movs	r0, #219	; 0xdb
 800110a:	f7ff ff9b 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800110e:	2020      	movs	r0, #32
 8001110:	f7ff ff98 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001114:	208d      	movs	r0, #141	; 0x8d
 8001116:	f7ff ff95 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 800111a:	2014      	movs	r0, #20
 800111c:	f7ff ff92 	bl	8001044 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001120:	20af      	movs	r0, #175	; 0xaf
 8001122:	f7ff ff8f 	bl	8001044 <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 8001126:	2000      	movs	r0, #0
 8001128:	f000 f810 	bl	800114c <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 800112c:	f000 f830 	bl	8001190 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <ssd1306_Init+0xd4>)
 8001132:	2200      	movs	r2, #0
 8001134:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <ssd1306_Init+0xd4>)
 8001138:	2200      	movs	r2, #0
 800113a:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 800113c:	4b02      	ldr	r3, [pc, #8]	; (8001148 <ssd1306_Init+0xd4>)
 800113e:	2201      	movs	r2, #1
 8001140:	715a      	strb	r2, [r3, #5]

	return 1;
 8001142:	2301      	movs	r3, #1
}
 8001144:	4618      	mov	r0, r3
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000558 	.word	0x20000558

0800114c <ssd1306_Fill>:
=======
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 80009a0:	2064      	movs	r0, #100	; 0x64
 80009a2:	f000 ffd1 	bl	8001948 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 80009a6:	20ae      	movs	r0, #174	; 0xae
 80009a8:	f7ff ffe0 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80009ac:	2020      	movs	r0, #32
 80009ae:	f7ff ffdd 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80009b2:	2010      	movs	r0, #16
 80009b4:	f7ff ffda 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80009b8:	20b0      	movs	r0, #176	; 0xb0
 80009ba:	f7ff ffd7 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80009be:	20c8      	movs	r0, #200	; 0xc8
 80009c0:	f7ff ffd4 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff ffd1 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80009ca:	2010      	movs	r0, #16
 80009cc:	f7ff ffce 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 80009d0:	2040      	movs	r0, #64	; 0x40
 80009d2:	f7ff ffcb 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80009d6:	2081      	movs	r0, #129	; 0x81
 80009d8:	f7ff ffc8 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80009dc:	20ff      	movs	r0, #255	; 0xff
 80009de:	f7ff ffc5 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80009e2:	20a1      	movs	r0, #161	; 0xa1
 80009e4:	f7ff ffc2 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80009e8:	20a6      	movs	r0, #166	; 0xa6
 80009ea:	f7ff ffbf 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80009ee:	20a8      	movs	r0, #168	; 0xa8
 80009f0:	f7ff ffbc 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80009f4:	203f      	movs	r0, #63	; 0x3f
 80009f6:	f7ff ffb9 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80009fa:	20a4      	movs	r0, #164	; 0xa4
 80009fc:	f7ff ffb6 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8000a00:	20d3      	movs	r0, #211	; 0xd3
 8000a02:	f7ff ffb3 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff ffb0 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000a0c:	20d5      	movs	r0, #213	; 0xd5
 8000a0e:	f7ff ffad 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000a12:	20f0      	movs	r0, #240	; 0xf0
 8000a14:	f7ff ffaa 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000a18:	20d9      	movs	r0, #217	; 0xd9
 8000a1a:	f7ff ffa7 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8000a1e:	2022      	movs	r0, #34	; 0x22
 8000a20:	f7ff ffa4 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8000a24:	20da      	movs	r0, #218	; 0xda
 8000a26:	f7ff ffa1 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8000a2a:	2012      	movs	r0, #18
 8000a2c:	f7ff ff9e 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8000a30:	20db      	movs	r0, #219	; 0xdb
 8000a32:	f7ff ff9b 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000a36:	2020      	movs	r0, #32
 8000a38:	f7ff ff98 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000a3c:	208d      	movs	r0, #141	; 0x8d
 8000a3e:	f7ff ff95 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8000a42:	2014      	movs	r0, #20
 8000a44:	f7ff ff92 	bl	800096c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000a48:	20af      	movs	r0, #175	; 0xaf
 8000a4a:	f7ff ff8f 	bl	800096c <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 f810 	bl	8000a74 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8000a54:	f000 f830 	bl	8000ab8 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <ssd1306_Init+0xd4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000a5e:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <ssd1306_Init+0xd4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8000a64:	4b02      	ldr	r3, [pc, #8]	; (8000a70 <ssd1306_Init+0xd4>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	715a      	strb	r2, [r3, #5]

	return 1;
 8000a6a:	2301      	movs	r3, #1
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200004e0 	.word	0x200004e0

08000a74 <ssd1306_Fill>:
>>>>>>> FFF

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
<<<<<<< HEAD
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
=======
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
>>>>>>> FFF
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
<<<<<<< HEAD
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	e00d      	b.n	8001178 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <ssd1306_Fill+0x1a>
 8001162:	2100      	movs	r1, #0
 8001164:	e000      	b.n	8001168 <ssd1306_Fill+0x1c>
 8001166:	21ff      	movs	r1, #255	; 0xff
 8001168:	4a08      	ldr	r2, [pc, #32]	; (800118c <ssd1306_Fill+0x40>)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4413      	add	r3, r2
 800116e:	460a      	mov	r2, r1
 8001170:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	3301      	adds	r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800117e:	d3ed      	bcc.n	800115c <ssd1306_Fill+0x10>
	}
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	20000158 	.word	0x20000158

08001190 <ssd1306_UpdateScreen>:
=======
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	e00d      	b.n	8000aa0 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d101      	bne.n	8000a8e <ssd1306_Fill+0x1a>
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	e000      	b.n	8000a90 <ssd1306_Fill+0x1c>
 8000a8e:	21ff      	movs	r1, #255	; 0xff
 8000a90:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <ssd1306_Fill+0x40>)
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4413      	add	r3, r2
 8000a96:	460a      	mov	r2, r1
 8000a98:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000aa6:	d3ed      	bcc.n	8000a84 <ssd1306_Fill+0x10>
	}
}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	200000e0 	.word	0x200000e0

08000ab8 <ssd1306_UpdateScreen>:
>>>>>>> FFF

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
<<<<<<< HEAD
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8001196:	2300      	movs	r3, #0
 8001198:	71fb      	strb	r3, [r7, #7]
 800119a:	e01d      	b.n	80011d8 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	3b50      	subs	r3, #80	; 0x50
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff4e 	bl	8001044 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff ff4b 	bl	8001044 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 80011ae:	2010      	movs	r0, #16
 80011b0:	f7ff ff48 	bl	8001044 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	01db      	lsls	r3, r3, #7
 80011b8:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <ssd1306_UpdateScreen+0x58>)
 80011ba:	4413      	add	r3, r2
 80011bc:	2264      	movs	r2, #100	; 0x64
 80011be:	9202      	str	r2, [sp, #8]
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	9201      	str	r2, [sp, #4]
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2301      	movs	r3, #1
 80011c8:	2240      	movs	r2, #64	; 0x40
 80011ca:	2178      	movs	r1, #120	; 0x78
 80011cc:	4807      	ldr	r0, [pc, #28]	; (80011ec <ssd1306_UpdateScreen+0x5c>)
 80011ce:	f002 fc51 	bl	8003a74 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	3301      	adds	r3, #1
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2b07      	cmp	r3, #7
 80011dc:	d9de      	bls.n	800119c <ssd1306_UpdateScreen+0xc>
	}
}
 80011de:	bf00      	nop
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000158 	.word	0x20000158
 80011ec:	200005f0 	.word	0x200005f0

080011f0 <ssd1306_DrawPixel>:
=======
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8000abe:	2300      	movs	r3, #0
 8000ac0:	71fb      	strb	r3, [r7, #7]
 8000ac2:	e01d      	b.n	8000b00 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	3b50      	subs	r3, #80	; 0x50
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff ff4e 	bl	800096c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff ff4b 	bl	800096c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8000ad6:	2010      	movs	r0, #16
 8000ad8:	f7ff ff48 	bl	800096c <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	01db      	lsls	r3, r3, #7
 8000ae0:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <ssd1306_UpdateScreen+0x58>)
 8000ae2:	4413      	add	r3, r2
 8000ae4:	2264      	movs	r2, #100	; 0x64
 8000ae6:	9202      	str	r2, [sp, #8]
 8000ae8:	2280      	movs	r2, #128	; 0x80
 8000aea:	9201      	str	r2, [sp, #4]
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	2301      	movs	r3, #1
 8000af0:	2240      	movs	r2, #64	; 0x40
 8000af2:	2178      	movs	r1, #120	; 0x78
 8000af4:	4807      	ldr	r0, [pc, #28]	; (8000b14 <ssd1306_UpdateScreen+0x5c>)
 8000af6:	f001 fc31 	bl	800235c <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	3301      	adds	r3, #1
 8000afe:	71fb      	strb	r3, [r7, #7]
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	2b07      	cmp	r3, #7
 8000b04:	d9de      	bls.n	8000ac4 <ssd1306_UpdateScreen+0xc>
	}
}
 8000b06:	bf00      	nop
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	200000e0 	.word	0x200000e0
 8000b14:	20000578 	.word	0x20000578

08000b18 <ssd1306_DrawPixel>:
>>>>>>> FFF
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
<<<<<<< HEAD
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
 80011fa:	460b      	mov	r3, r1
 80011fc:	71bb      	strb	r3, [r7, #6]
 80011fe:	4613      	mov	r3, r2
 8001200:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db48      	blt.n	800129c <ssd1306_DrawPixel+0xac>
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	2b3f      	cmp	r3, #63	; 0x3f
 800120e:	d845      	bhi.n	800129c <ssd1306_DrawPixel+0xac>
=======
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
 8000b22:	460b      	mov	r3, r1
 8000b24:	71bb      	strb	r3, [r7, #6]
 8000b26:	4613      	mov	r3, r2
 8000b28:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	db48      	blt.n	8000bc4 <ssd1306_DrawPixel+0xac>
 8000b32:	79bb      	ldrb	r3, [r7, #6]
 8000b34:	2b3f      	cmp	r3, #63	; 0x3f
 8000b36:	d845      	bhi.n	8000bc4 <ssd1306_DrawPixel+0xac>
>>>>>>> FFF
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
<<<<<<< HEAD
 8001210:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <ssd1306_DrawPixel+0xb8>)
 8001212:	791b      	ldrb	r3, [r3, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d006      	beq.n	8001226 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8001218:	797b      	ldrb	r3, [r7, #5]
 800121a:	2b00      	cmp	r3, #0
 800121c:	bf0c      	ite	eq
 800121e:	2301      	moveq	r3, #1
 8001220:	2300      	movne	r3, #0
 8001222:	b2db      	uxtb	r3, r3
 8001224:	717b      	strb	r3, [r7, #5]
=======
 8000b38:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <ssd1306_DrawPixel+0xb8>)
 8000b3a:	791b      	ldrb	r3, [r3, #4]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d006      	beq.n	8000b4e <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8000b40:	797b      	ldrb	r3, [r7, #5]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	bf0c      	ite	eq
 8000b46:	2301      	moveq	r3, #1
 8000b48:	2300      	movne	r3, #0
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	717b      	strb	r3, [r7, #5]
>>>>>>> FFF
	}

	// Draw in the right color
	if (color == White)
<<<<<<< HEAD
 8001226:	797b      	ldrb	r3, [r7, #5]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d11a      	bne.n	8001262 <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800122c:	79fa      	ldrb	r2, [r7, #7]
 800122e:	79bb      	ldrb	r3, [r7, #6]
 8001230:	08db      	lsrs	r3, r3, #3
 8001232:	b2d8      	uxtb	r0, r3
 8001234:	4603      	mov	r3, r0
 8001236:	01db      	lsls	r3, r3, #7
 8001238:	4413      	add	r3, r2
 800123a:	4a1c      	ldr	r2, [pc, #112]	; (80012ac <ssd1306_DrawPixel+0xbc>)
 800123c:	5cd3      	ldrb	r3, [r2, r3]
 800123e:	b25a      	sxtb	r2, r3
 8001240:	79bb      	ldrb	r3, [r7, #6]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	2101      	movs	r1, #1
 8001248:	fa01 f303 	lsl.w	r3, r1, r3
 800124c:	b25b      	sxtb	r3, r3
 800124e:	4313      	orrs	r3, r2
 8001250:	b259      	sxtb	r1, r3
 8001252:	79fa      	ldrb	r2, [r7, #7]
 8001254:	4603      	mov	r3, r0
 8001256:	01db      	lsls	r3, r3, #7
 8001258:	4413      	add	r3, r2
 800125a:	b2c9      	uxtb	r1, r1
 800125c:	4a13      	ldr	r2, [pc, #76]	; (80012ac <ssd1306_DrawPixel+0xbc>)
 800125e:	54d1      	strb	r1, [r2, r3]
 8001260:	e01d      	b.n	800129e <ssd1306_DrawPixel+0xae>
=======
 8000b4e:	797b      	ldrb	r3, [r7, #5]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d11a      	bne.n	8000b8a <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b54:	79fa      	ldrb	r2, [r7, #7]
 8000b56:	79bb      	ldrb	r3, [r7, #6]
 8000b58:	08db      	lsrs	r3, r3, #3
 8000b5a:	b2d8      	uxtb	r0, r3
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	01db      	lsls	r3, r3, #7
 8000b60:	4413      	add	r3, r2
 8000b62:	4a1c      	ldr	r2, [pc, #112]	; (8000bd4 <ssd1306_DrawPixel+0xbc>)
 8000b64:	5cd3      	ldrb	r3, [r2, r3]
 8000b66:	b25a      	sxtb	r2, r3
 8000b68:	79bb      	ldrb	r3, [r7, #6]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	2101      	movs	r1, #1
 8000b70:	fa01 f303 	lsl.w	r3, r1, r3
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	b259      	sxtb	r1, r3
 8000b7a:	79fa      	ldrb	r2, [r7, #7]
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	01db      	lsls	r3, r3, #7
 8000b80:	4413      	add	r3, r2
 8000b82:	b2c9      	uxtb	r1, r1
 8000b84:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <ssd1306_DrawPixel+0xbc>)
 8000b86:	54d1      	strb	r1, [r2, r3]
 8000b88:	e01d      	b.n	8000bc6 <ssd1306_DrawPixel+0xae>
>>>>>>> FFF
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
<<<<<<< HEAD
 8001262:	79fa      	ldrb	r2, [r7, #7]
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	b2d8      	uxtb	r0, r3
 800126a:	4603      	mov	r3, r0
 800126c:	01db      	lsls	r3, r3, #7
 800126e:	4413      	add	r3, r2
 8001270:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <ssd1306_DrawPixel+0xbc>)
 8001272:	5cd3      	ldrb	r3, [r2, r3]
 8001274:	b25a      	sxtb	r2, r3
 8001276:	79bb      	ldrb	r3, [r7, #6]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	2101      	movs	r1, #1
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	b25b      	sxtb	r3, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	b25b      	sxtb	r3, r3
 8001288:	4013      	ands	r3, r2
 800128a:	b259      	sxtb	r1, r3
 800128c:	79fa      	ldrb	r2, [r7, #7]
 800128e:	4603      	mov	r3, r0
 8001290:	01db      	lsls	r3, r3, #7
 8001292:	4413      	add	r3, r2
 8001294:	b2c9      	uxtb	r1, r1
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <ssd1306_DrawPixel+0xbc>)
 8001298:	54d1      	strb	r1, [r2, r3]
 800129a:	e000      	b.n	800129e <ssd1306_DrawPixel+0xae>
		return;
 800129c:	bf00      	nop
	}
}
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000558 	.word	0x20000558
 80012ac:	20000158 	.word	0x20000158

080012b0 <ssd1306_WriteChar>:
=======
 8000b8a:	79fa      	ldrb	r2, [r7, #7]
 8000b8c:	79bb      	ldrb	r3, [r7, #6]
 8000b8e:	08db      	lsrs	r3, r3, #3
 8000b90:	b2d8      	uxtb	r0, r3
 8000b92:	4603      	mov	r3, r0
 8000b94:	01db      	lsls	r3, r3, #7
 8000b96:	4413      	add	r3, r2
 8000b98:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <ssd1306_DrawPixel+0xbc>)
 8000b9a:	5cd3      	ldrb	r3, [r2, r3]
 8000b9c:	b25a      	sxtb	r2, r3
 8000b9e:	79bb      	ldrb	r3, [r7, #6]
 8000ba0:	f003 0307 	and.w	r3, r3, #7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	43db      	mvns	r3, r3
 8000bae:	b25b      	sxtb	r3, r3
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	b259      	sxtb	r1, r3
 8000bb4:	79fa      	ldrb	r2, [r7, #7]
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	01db      	lsls	r3, r3, #7
 8000bba:	4413      	add	r3, r2
 8000bbc:	b2c9      	uxtb	r1, r1
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <ssd1306_DrawPixel+0xbc>)
 8000bc0:	54d1      	strb	r1, [r2, r3]
 8000bc2:	e000      	b.n	8000bc6 <ssd1306_DrawPixel+0xae>
		return;
 8000bc4:	bf00      	nop
	}
}
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	200004e0 	.word	0x200004e0
 8000bd4:	200000e0 	.word	0x200000e0

08000bd8 <ssd1306_WriteChar>:
>>>>>>> FFF
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
<<<<<<< HEAD
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b089      	sub	sp, #36	; 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4604      	mov	r4, r0
 80012b8:	1d38      	adds	r0, r7, #4
 80012ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80012be:	461a      	mov	r2, r3
 80012c0:	4623      	mov	r3, r4
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	4613      	mov	r3, r2
 80012c6:	73bb      	strb	r3, [r7, #14]
=======
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b089      	sub	sp, #36	; 0x24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4604      	mov	r4, r0
 8000be0:	1d38      	adds	r0, r7, #4
 8000be2:	e880 0006 	stmia.w	r0, {r1, r2}
 8000be6:	461a      	mov	r2, r3
 8000be8:	4623      	mov	r3, r4
 8000bea:	73fb      	strb	r3, [r7, #15]
 8000bec:	4613      	mov	r3, r2
 8000bee:	73bb      	strb	r3, [r7, #14]
>>>>>>> FFF
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
<<<<<<< HEAD
 80012c8:	4b38      	ldr	r3, [pc, #224]	; (80013ac <ssd1306_WriteChar+0xfc>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	793b      	ldrb	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	2b7f      	cmp	r3, #127	; 0x7f
 80012d4:	dc06      	bgt.n	80012e4 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80012d6:	4b35      	ldr	r3, [pc, #212]	; (80013ac <ssd1306_WriteChar+0xfc>)
 80012d8:	885b      	ldrh	r3, [r3, #2]
 80012da:	461a      	mov	r2, r3
 80012dc:	797b      	ldrb	r3, [r7, #5]
 80012de:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80012e0:	2b3f      	cmp	r3, #63	; 0x3f
 80012e2:	dd01      	ble.n	80012e8 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	e05d      	b.n	80013a4 <ssd1306_WriteChar+0xf4>
=======
 8000bf0:	4b38      	ldr	r3, [pc, #224]	; (8000cd4 <ssd1306_WriteChar+0xfc>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	793b      	ldrb	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	2b7f      	cmp	r3, #127	; 0x7f
 8000bfc:	dc06      	bgt.n	8000c0c <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000bfe:	4b35      	ldr	r3, [pc, #212]	; (8000cd4 <ssd1306_WriteChar+0xfc>)
 8000c00:	885b      	ldrh	r3, [r3, #2]
 8000c02:	461a      	mov	r2, r3
 8000c04:	797b      	ldrb	r3, [r7, #5]
 8000c06:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000c08:	2b3f      	cmp	r3, #63	; 0x3f
 8000c0a:	dd01      	ble.n	8000c10 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e05d      	b.n	8000ccc <ssd1306_WriteChar+0xf4>
>>>>>>> FFF
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
<<<<<<< HEAD
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	e04c      	b.n	8001388 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	3b20      	subs	r3, #32
 80012f4:	7979      	ldrb	r1, [r7, #5]
 80012f6:	fb01 f303 	mul.w	r3, r1, r3
 80012fa:	4619      	mov	r1, r3
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	440b      	add	r3, r1
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8001308:	2300      	movs	r3, #0
 800130a:	61bb      	str	r3, [r7, #24]
 800130c:	e034      	b.n	8001378 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d012      	beq.n	8001344 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <ssd1306_WriteChar+0xfc>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	b2da      	uxtb	r2, r3
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	4413      	add	r3, r2
 800132a:	b2d8      	uxtb	r0, r3
 800132c:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <ssd1306_WriteChar+0xfc>)
 800132e:	885b      	ldrh	r3, [r3, #2]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4413      	add	r3, r2
 8001338:	b2db      	uxtb	r3, r3
 800133a:	7bba      	ldrb	r2, [r7, #14]
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff ff57 	bl	80011f0 <ssd1306_DrawPixel>
 8001342:	e016      	b.n	8001372 <ssd1306_WriteChar+0xc2>
=======
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
 8000c14:	e04c      	b.n	8000cb0 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	3b20      	subs	r3, #32
 8000c1c:	7979      	ldrb	r1, [r7, #5]
 8000c1e:	fb01 f303 	mul.w	r3, r1, r3
 8000c22:	4619      	mov	r1, r3
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	440b      	add	r3, r1
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
 8000c34:	e034      	b.n	8000ca0 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d012      	beq.n	8000c6c <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000c46:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <ssd1306_WriteChar+0xfc>)
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	4413      	add	r3, r2
 8000c52:	b2d8      	uxtb	r0, r3
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <ssd1306_WriteChar+0xfc>)
 8000c56:	885b      	ldrh	r3, [r3, #2]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	4413      	add	r3, r2
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	7bba      	ldrb	r2, [r7, #14]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f7ff ff57 	bl	8000b18 <ssd1306_DrawPixel>
 8000c6a:	e016      	b.n	8000c9a <ssd1306_WriteChar+0xc2>
>>>>>>> FFF
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
<<<<<<< HEAD
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <ssd1306_WriteChar+0xfc>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	b2db      	uxtb	r3, r3
 800134e:	4413      	add	r3, r2
 8001350:	b2d8      	uxtb	r0, r3
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <ssd1306_WriteChar+0xfc>)
 8001354:	885b      	ldrh	r3, [r3, #2]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	4413      	add	r3, r2
 800135e:	b2d9      	uxtb	r1, r3
 8001360:	7bbb      	ldrb	r3, [r7, #14]
 8001362:	2b00      	cmp	r3, #0
 8001364:	bf0c      	ite	eq
 8001366:	2301      	moveq	r3, #1
 8001368:	2300      	movne	r3, #0
 800136a:	b2db      	uxtb	r3, r3
 800136c:	461a      	mov	r2, r3
 800136e:	f7ff ff3f 	bl	80011f0 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	3301      	adds	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	793b      	ldrb	r3, [r7, #4]
 800137a:	461a      	mov	r2, r3
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	4293      	cmp	r3, r2
 8001380:	d3c5      	bcc.n	800130e <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3301      	adds	r3, #1
 8001386:	61fb      	str	r3, [r7, #28]
 8001388:	797b      	ldrb	r3, [r7, #5]
 800138a:	461a      	mov	r2, r3
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	4293      	cmp	r3, r2
 8001390:	d3ad      	bcc.n	80012ee <ssd1306_WriteChar+0x3e>
=======
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <ssd1306_WriteChar+0xfc>)
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	4413      	add	r3, r2
 8000c78:	b2d8      	uxtb	r0, r3
 8000c7a:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <ssd1306_WriteChar+0xfc>)
 8000c7c:	885b      	ldrh	r3, [r3, #2]
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	4413      	add	r3, r2
 8000c86:	b2d9      	uxtb	r1, r3
 8000c88:	7bbb      	ldrb	r3, [r7, #14]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	bf0c      	ite	eq
 8000c8e:	2301      	moveq	r3, #1
 8000c90:	2300      	movne	r3, #0
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	461a      	mov	r2, r3
 8000c96:	f7ff ff3f 	bl	8000b18 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	61bb      	str	r3, [r7, #24]
 8000ca0:	793b      	ldrb	r3, [r7, #4]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d3c5      	bcc.n	8000c36 <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3301      	adds	r3, #1
 8000cae:	61fb      	str	r3, [r7, #28]
 8000cb0:	797b      	ldrb	r3, [r7, #5]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d3ad      	bcc.n	8000c16 <ssd1306_WriteChar+0x3e>
>>>>>>> FFF
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
<<<<<<< HEAD
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <ssd1306_WriteChar+0xfc>)
 8001394:	881a      	ldrh	r2, [r3, #0]
 8001396:	793b      	ldrb	r3, [r7, #4]
 8001398:	b29b      	uxth	r3, r3
 800139a:	4413      	add	r3, r2
 800139c:	b29a      	uxth	r2, r3
 800139e:	4b03      	ldr	r3, [pc, #12]	; (80013ac <ssd1306_WriteChar+0xfc>)
 80013a0:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3724      	adds	r7, #36	; 0x24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd90      	pop	{r4, r7, pc}
 80013ac:	20000558 	.word	0x20000558

080013b0 <ssd1306_WriteString>:
=======
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <ssd1306_WriteChar+0xfc>)
 8000cbc:	881a      	ldrh	r2, [r3, #0]
 8000cbe:	793b      	ldrb	r3, [r7, #4]
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	4413      	add	r3, r2
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <ssd1306_WriteChar+0xfc>)
 8000cc8:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3724      	adds	r7, #36	; 0x24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd90      	pop	{r4, r7, pc}
 8000cd4:	200004e0 	.word	0x200004e0

08000cd8 <ssd1306_WriteString>:
>>>>>>> FFF

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
<<<<<<< HEAD
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	1d38      	adds	r0, r7, #4
 80013ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80013be:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 80013c0:	e012      	b.n	80013e8 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	7818      	ldrb	r0, [r3, #0]
 80013c6:	78fb      	ldrb	r3, [r7, #3]
 80013c8:	1d3a      	adds	r2, r7, #4
 80013ca:	ca06      	ldmia	r2, {r1, r2}
 80013cc:	f7ff ff70 	bl	80012b0 <ssd1306_WriteChar>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d002      	beq.n	80013e2 <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	e008      	b.n	80013f4 <ssd1306_WriteString+0x44>
=======
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	1d38      	adds	r0, r7, #4
 8000ce2:	e880 0006 	stmia.w	r0, {r1, r2}
 8000ce6:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 8000ce8:	e012      	b.n	8000d10 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	7818      	ldrb	r0, [r3, #0]
 8000cee:	78fb      	ldrb	r3, [r7, #3]
 8000cf0:	1d3a      	adds	r2, r7, #4
 8000cf2:	ca06      	ldmia	r2, {r1, r2}
 8000cf4:	f7ff ff70 	bl	8000bd8 <ssd1306_WriteChar>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d002      	beq.n	8000d0a <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	e008      	b.n	8000d1c <ssd1306_WriteString+0x44>
>>>>>>> FFF
		}

		// Next char
		str++;
<<<<<<< HEAD
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3301      	adds	r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
	while (*str)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1e8      	bne.n	80013c2 <ssd1306_WriteString+0x12>
=======
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d1e8      	bne.n	8000cea <ssd1306_WriteString+0x12>
>>>>>>> FFF
	}

	// Everything ok
	return *str;
<<<<<<< HEAD
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	781b      	ldrb	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <ssd1306_SetCursor>:
=======
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <ssd1306_SetCursor>:
>>>>>>> FFF

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
<<<<<<< HEAD
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	460a      	mov	r2, r1
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	4613      	mov	r3, r2
 800140a:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	b29a      	uxth	r2, r3
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <ssd1306_SetCursor+0x2c>)
 8001412:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001414:	79bb      	ldrb	r3, [r7, #6]
 8001416:	b29a      	uxth	r2, r3
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <ssd1306_SetCursor+0x2c>)
 800141a:	805a      	strh	r2, [r3, #2]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000558 	.word	0x20000558

0800142c <ssd1306_Line>:

void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	4604      	mov	r4, r0
 8001434:	4608      	mov	r0, r1
 8001436:	4611      	mov	r1, r2
 8001438:	461a      	mov	r2, r3
 800143a:	4623      	mov	r3, r4
 800143c:	71fb      	strb	r3, [r7, #7]
 800143e:	4603      	mov	r3, r0
 8001440:	71bb      	strb	r3, [r7, #6]
 8001442:	460b      	mov	r3, r1
 8001444:	717b      	strb	r3, [r7, #5]
 8001446:	4613      	mov	r3, r2
 8001448:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 800144a:	797a      	ldrb	r2, [r7, #5]
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	bfb8      	it	lt
 8001454:	425b      	neglt	r3, r3
 8001456:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8001458:	793a      	ldrb	r2, [r7, #4]
 800145a:	79bb      	ldrb	r3, [r7, #6]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	bfb8      	it	lt
 8001462:	425b      	neglt	r3, r3
 8001464:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8001466:	79fa      	ldrb	r2, [r7, #7]
 8001468:	797b      	ldrb	r3, [r7, #5]
 800146a:	429a      	cmp	r2, r3
 800146c:	d201      	bcs.n	8001472 <ssd1306_Line+0x46>
 800146e:	2301      	movs	r3, #1
 8001470:	e001      	b.n	8001476 <ssd1306_Line+0x4a>
 8001472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001476:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8001478:	79ba      	ldrb	r2, [r7, #6]
 800147a:	793b      	ldrb	r3, [r7, #4]
 800147c:	429a      	cmp	r2, r3
 800147e:	d201      	bcs.n	8001484 <ssd1306_Line+0x58>
 8001480:	2301      	movs	r3, #1
 8001482:	e001      	b.n	8001488 <ssd1306_Line+0x5c>
 8001484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001488:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	61fb      	str	r3, [r7, #28]
  int32_t error2;

  ssd1306_DrawPixel(x2, y2, color);
 8001492:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001496:	7939      	ldrb	r1, [r7, #4]
 8001498:	797b      	ldrb	r3, [r7, #5]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fea8 	bl	80011f0 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80014a0:	e024      	b.n	80014ec <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 80014a2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80014a6:	79b9      	ldrb	r1, [r7, #6]
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fea0 	bl	80011f0 <ssd1306_DrawPixel>
    error2 = error * 2;
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	425b      	negs	r3, r3
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	429a      	cmp	r2, r3
 80014be:	dd08      	ble.n	80014d2 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 80014c0:	69fa      	ldr	r2, [r7, #28]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	4413      	add	r3, r2
 80014d0:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }

    if(error2 < deltaX)
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	da08      	bge.n	80014ec <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80014da:	69fa      	ldr	r2, [r7, #28]
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	4413      	add	r3, r2
 80014e0:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	79bb      	ldrb	r3, [r7, #6]
 80014e8:	4413      	add	r3, r2
 80014ea:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 80014ec:	79fa      	ldrb	r2, [r7, #7]
 80014ee:	797b      	ldrb	r3, [r7, #5]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d1d6      	bne.n	80014a2 <ssd1306_Line+0x76>
 80014f4:	79ba      	ldrb	r2, [r7, #6]
 80014f6:	793b      	ldrb	r3, [r7, #4]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d1d2      	bne.n	80014a2 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 80014fc:	bf00      	nop
}
 80014fe:	3724      	adds	r7, #36	; 0x24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd90      	pop	{r4, r7, pc}

08001504 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b085      	sub	sp, #20
 8001508:	af02      	add	r7, sp, #8
 800150a:	4604      	mov	r4, r0
 800150c:	4608      	mov	r0, r1
 800150e:	4611      	mov	r1, r2
 8001510:	461a      	mov	r2, r3
 8001512:	4623      	mov	r3, r4
 8001514:	71fb      	strb	r3, [r7, #7]
 8001516:	4603      	mov	r3, r0
 8001518:	71bb      	strb	r3, [r7, #6]
 800151a:	460b      	mov	r3, r1
 800151c:	717b      	strb	r3, [r7, #5]
 800151e:	4613      	mov	r3, r2
 8001520:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 8001522:	79bc      	ldrb	r4, [r7, #6]
 8001524:	797a      	ldrb	r2, [r7, #5]
 8001526:	79b9      	ldrb	r1, [r7, #6]
 8001528:	79f8      	ldrb	r0, [r7, #7]
 800152a:	7e3b      	ldrb	r3, [r7, #24]
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	4623      	mov	r3, r4
 8001530:	f7ff ff7c 	bl	800142c <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8001534:	793c      	ldrb	r4, [r7, #4]
 8001536:	797a      	ldrb	r2, [r7, #5]
 8001538:	79b9      	ldrb	r1, [r7, #6]
 800153a:	7978      	ldrb	r0, [r7, #5]
 800153c:	7e3b      	ldrb	r3, [r7, #24]
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	4623      	mov	r3, r4
 8001542:	f7ff ff73 	bl	800142c <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8001546:	793c      	ldrb	r4, [r7, #4]
 8001548:	79fa      	ldrb	r2, [r7, #7]
 800154a:	7939      	ldrb	r1, [r7, #4]
 800154c:	7978      	ldrb	r0, [r7, #5]
 800154e:	7e3b      	ldrb	r3, [r7, #24]
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	4623      	mov	r3, r4
 8001554:	f7ff ff6a 	bl	800142c <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8001558:	79bc      	ldrb	r4, [r7, #6]
 800155a:	79fa      	ldrb	r2, [r7, #7]
 800155c:	7939      	ldrb	r1, [r7, #4]
 800155e:	79f8      	ldrb	r0, [r7, #7]
 8001560:	7e3b      	ldrb	r3, [r7, #24]
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	4623      	mov	r3, r4
 8001566:	f7ff ff61 	bl	800142c <ssd1306_Line>

  return;
 800156a:	bf00      	nop
}
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}

08001572 <ssd1306FillRect>:
void ssd1306FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color) {
 8001572:	b590      	push	{r4, r7, lr}
 8001574:	b085      	sub	sp, #20
 8001576:	af00      	add	r7, sp, #0
 8001578:	4604      	mov	r4, r0
 800157a:	4608      	mov	r0, r1
 800157c:	4611      	mov	r1, r2
 800157e:	461a      	mov	r2, r3
 8001580:	4623      	mov	r3, r4
 8001582:	71fb      	strb	r3, [r7, #7]
 8001584:	4603      	mov	r3, r0
 8001586:	71bb      	strb	r3, [r7, #6]
 8001588:	460b      	mov	r3, r1
 800158a:	717b      	strb	r3, [r7, #5]
 800158c:	4613      	mov	r3, r2
 800158e:	713b      	strb	r3, [r7, #4]
    uint8_t x0, x1, y1;

    x0 = x;
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	73fb      	strb	r3, [r7, #15]
    x1 = x + w;
 8001594:	79fa      	ldrb	r2, [r7, #7]
 8001596:	797b      	ldrb	r3, [r7, #5]
 8001598:	4413      	add	r3, r2
 800159a:	73bb      	strb	r3, [r7, #14]
    y1 = y + h;
 800159c:	79ba      	ldrb	r2, [r7, #6]
 800159e:	793b      	ldrb	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	737b      	strb	r3, [r7, #13]
    for(; y < y1; y++)
 80015a4:	e013      	b.n	80015ce <ssd1306FillRect+0x5c>
        for(x = x0; x < x1; x++)
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	71fb      	strb	r3, [r7, #7]
 80015aa:	e009      	b.n	80015c0 <ssd1306FillRect+0x4e>
        	ssd1306_DrawPixel(x, y, color);
 80015ac:	8c3b      	ldrh	r3, [r7, #32]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	79b9      	ldrb	r1, [r7, #6]
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fe1b 	bl	80011f0 <ssd1306_DrawPixel>
        for(x = x0; x < x1; x++)
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	3301      	adds	r3, #1
 80015be:	71fb      	strb	r3, [r7, #7]
 80015c0:	79fa      	ldrb	r2, [r7, #7]
 80015c2:	7bbb      	ldrb	r3, [r7, #14]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d3f1      	bcc.n	80015ac <ssd1306FillRect+0x3a>
    for(; y < y1; y++)
 80015c8:	79bb      	ldrb	r3, [r7, #6]
 80015ca:	3301      	adds	r3, #1
 80015cc:	71bb      	strb	r3, [r7, #6]
 80015ce:	79ba      	ldrb	r2, [r7, #6]
 80015d0:	7b7b      	ldrb	r3, [r7, #13]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d3e7      	bcc.n	80015a6 <ssd1306FillRect+0x34>
            //ssd1306DrawPixel( x, y, color, layer);
}
 80015d6:	bf00      	nop
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd90      	pop	{r4, r7, pc}

080015e0 <main>:
=======
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	460a      	mov	r2, r1
 8000d2e:	71fb      	strb	r3, [r7, #7]
 8000d30:	4613      	mov	r3, r2
 8000d32:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <ssd1306_SetCursor+0x2c>)
 8000d3a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <ssd1306_SetCursor+0x2c>)
 8000d42:	805a      	strh	r2, [r3, #2]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	200004e0 	.word	0x200004e0

08000d54 <main>:
>>>>>>> FFF
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
=======
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 80015e4:	f001 fcda 	bl	8002f9c <HAL_Init>
=======
 8000d58:	f000 fd94 	bl	8001884 <HAL_Init>
>>>>>>> FFF
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 80015e8:	f000 f826 	bl	8001638 <SystemClock_Config>
=======
 8000d5c:	f000 f826 	bl	8000dac <SystemClock_Config>
>>>>>>> FFF
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 80015ec:	f000 f972 	bl	80018d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80015f0:	f000 f868 	bl	80016c4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80015f4:	f000 f894 	bl	8001720 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80015f8:	f000 f918 	bl	800182c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80015fc:	f000 f8c6 	bl	800178c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001600:	f000 f93e 	bl	8001880 <MX_USART3_UART_Init>
=======
 8000d60:	f000 f972 	bl	8001048 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d64:	f000 f868 	bl	8000e38 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d68:	f000 f894 	bl	8000e94 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000d6c:	f000 f918 	bl	8000fa0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000d70:	f000 f8c6 	bl	8000f00 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000d74:	f000 f93e 	bl	8000ff4 <MX_USART3_UART_Init>
>>>>>>> FFF
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
<<<<<<< HEAD
 8001604:	2201      	movs	r2, #1
 8001606:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800160a:	480a      	ldr	r0, [pc, #40]	; (8001634 <main+0x54>)
 800160c:	f002 f8a5 	bl	800375a <HAL_GPIO_WritePin>

  // Init interrupt (For LoRa)
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001610:	2200      	movs	r2, #0
 8001612:	2100      	movs	r1, #0
 8001614:	2025      	movs	r0, #37	; 0x25
 8001616:	f001 fe1e 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800161a:	2025      	movs	r0, #37	; 0x25
 800161c:	f001 fe37 	bl	800328e <HAL_NVIC_EnableIRQ>

  // OLED init
  ssd1306_Init();
 8001620:	f7ff fd28 	bl	8001074 <ssd1306_Init>
  ssd1306_Fill(Black);
 8001624:	2000      	movs	r0, #0
 8001626:	f7ff fd91 	bl	800114c <ssd1306_Fill>
  ssd1306_UpdateScreen();
 800162a:	f7ff fdb1 	bl	8001190 <ssd1306_UpdateScreen>

  while (1)
  {
	menu();
 800162e:	f001 fc63 	bl	8002ef8 <menu>
 8001632:	e7fc      	b.n	800162e <main+0x4e>
 8001634:	40011000 	.word	0x40011000

08001638 <SystemClock_Config>:
=======
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7e:	480a      	ldr	r0, [pc, #40]	; (8000da8 <main+0x54>)
 8000d80:	f001 f95f 	bl	8002042 <HAL_GPIO_WritePin>

  // Init interrupt (For LoRa)
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2100      	movs	r1, #0
 8000d88:	2025      	movs	r0, #37	; 0x25
 8000d8a:	f000 fed8 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d8e:	2025      	movs	r0, #37	; 0x25
 8000d90:	f000 fef1 	bl	8001b76 <HAL_NVIC_EnableIRQ>

  // OLED init
  ssd1306_Init();
 8000d94:	f7ff fe02 	bl	800099c <ssd1306_Init>
  ssd1306_Fill(Black);
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f7ff fe6b 	bl	8000a74 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8000d9e:	f7ff fe8b 	bl	8000ab8 <ssd1306_UpdateScreen>
  {
	//menu();

	  //nrf_RX();

       nrf_TX();		// <<<<<<<<<<<<<<<<<<<<<,,
 8000da2:	f7ff fbc1 	bl	8000528 <nrf_TX>
 8000da6:	e7fc      	b.n	8000da2 <main+0x4e>
 8000da8:	40011000 	.word	0x40011000

08000dac <SystemClock_Config>:
>>>>>>> FFF
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8001638:	b580      	push	{r7, lr}
 800163a:	b090      	sub	sp, #64	; 0x40
 800163c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163e:	f107 0318 	add.w	r3, r7, #24
 8001642:	2228      	movs	r2, #40	; 0x28
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f004 ffd4 	bl	80065f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]
=======
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b090      	sub	sp, #64	; 0x40
 8000db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db2:	f107 0318 	add.w	r3, r7, #24
 8000db6:	2228      	movs	r2, #40	; 0x28
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f004 f84a 	bl	8004e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]
>>>>>>> FFF

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< HEAD
 800165a:	2301      	movs	r3, #1
 800165c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800165e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001662:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001668:	2301      	movs	r3, #1
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166c:	2302      	movs	r3, #2
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001674:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001676:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800167a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167c:	f107 0318 	add.w	r3, r7, #24
 8001680:	4618      	mov	r0, r3
 8001682:	f002 fd0d 	bl	80040a0 <HAL_RCC_OscConfig>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800168c:	f000 fa38 	bl	8001b00 <Error_Handler>
=======
 8000dce:	2301      	movs	r3, #1
 8000dd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de0:	2302      	movs	r3, #2
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000dea:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df0:	f107 0318 	add.w	r3, r7, #24
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 fdc7 	bl	8002988 <HAL_RCC_OscConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e00:	f000 fa40 	bl	8001284 <Error_Handler>
>>>>>>> FFF
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8001690:	230f      	movs	r3, #15
 8001692:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001694:	2302      	movs	r3, #2
 8001696:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800169c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2102      	movs	r1, #2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f002 ff78 	bl	80045a0 <HAL_RCC_ClockConfig>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016b6:	f000 fa23 	bl	8001b00 <Error_Handler>
  }
}
 80016ba:	bf00      	nop
 80016bc:	3740      	adds	r7, #64	; 0x40
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <MX_I2C1_Init>:
=======
 8000e04:	230f      	movs	r3, #15
 8000e06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f002 f832 	bl	8002e88 <HAL_RCC_ClockConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e2a:	f000 fa2b 	bl	8001284 <Error_Handler>
  }
}
 8000e2e:	bf00      	nop
 8000e30:	3740      	adds	r7, #64	; 0x40
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <MX_I2C1_Init>:
>>>>>>> FFF
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
<<<<<<< HEAD
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
=======
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
<<<<<<< HEAD
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <MX_I2C1_Init+0x50>)
 80016ca:	4a13      	ldr	r2, [pc, #76]	; (8001718 <MX_I2C1_Init+0x54>)
 80016cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_I2C1_Init+0x50>)
 80016d0:	4a12      	ldr	r2, [pc, #72]	; (800171c <MX_I2C1_Init+0x58>)
 80016d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <MX_I2C1_Init+0x50>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <MX_I2C1_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <MX_I2C1_Init+0x50>)
 80016e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <MX_I2C1_Init+0x50>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <MX_I2C1_Init+0x50>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <MX_I2C1_Init+0x50>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <MX_I2C1_Init+0x50>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001700:	4804      	ldr	r0, [pc, #16]	; (8001714 <MX_I2C1_Init+0x50>)
 8001702:	f002 f873 	bl	80037ec <HAL_I2C_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800170c:	f000 f9f8 	bl	8001b00 <Error_Handler>
=======
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e3e:	4a13      	ldr	r2, [pc, #76]	; (8000e8c <MX_I2C1_Init+0x54>)
 8000e40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e44:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <MX_I2C1_Init+0x58>)
 8000e46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e74:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e76:	f001 f92d 	bl	80020d4 <HAL_I2C_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e80:	f000 fa00 	bl	8001284 <Error_Handler>
>>>>>>> FFF
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
<<<<<<< HEAD
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200005f0 	.word	0x200005f0
 8001718:	40005400 	.word	0x40005400
 800171c:	00061a80 	.word	0x00061a80

08001720 <MX_SPI1_Init>:
=======
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000578 	.word	0x20000578
 8000e8c:	40005400 	.word	0x40005400
 8000e90:	00061a80 	.word	0x00061a80

08000e94 <MX_SPI1_Init>:
>>>>>>> FFF
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
<<<<<<< HEAD
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
=======
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
>>>>>>> FFF

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
<<<<<<< HEAD
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <MX_SPI1_Init+0x64>)
 8001726:	4a18      	ldr	r2, [pc, #96]	; (8001788 <MX_SPI1_Init+0x68>)
 8001728:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <MX_SPI1_Init+0x64>)
 800172c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001730:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <MX_SPI1_Init+0x64>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <MX_SPI1_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_SPI1_Init+0x64>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_SPI1_Init+0x64>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_SPI1_Init+0x64>)
 800174c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001750:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_SPI1_Init+0x64>)
 8001754:	2220      	movs	r2, #32
 8001756:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <MX_SPI1_Init+0x64>)
 800175a:	2200      	movs	r2, #0
 800175c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_SPI1_Init+0x64>)
 8001760:	2200      	movs	r2, #0
 8001762:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <MX_SPI1_Init+0x64>)
 8001766:	2200      	movs	r2, #0
 8001768:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_SPI1_Init+0x64>)
 800176c:	220a      	movs	r2, #10
 800176e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <MX_SPI1_Init+0x64>)
 8001772:	f003 f8af 	bl	80048d4 <HAL_SPI_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800177c:	f000 f9c0 	bl	8001b00 <Error_Handler>
=======
 8000e98:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000e9a:	4a18      	ldr	r2, [pc, #96]	; (8000efc <MX_SPI1_Init+0x68>)
 8000e9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e9e:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ea0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ea4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ec8:	2220      	movs	r2, #32
 8000eca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed8:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ee0:	220a      	movs	r2, #10
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ee4:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ee6:	f002 f969 	bl	80031bc <HAL_SPI_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ef0:	f000 f9c8 	bl	8001284 <Error_Handler>
>>>>>>> FFF
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
<<<<<<< HEAD
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200006d0 	.word	0x200006d0
 8001788:	40013000 	.word	0x40013000

0800178c <MX_TIM1_Init>:
=======
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000658 	.word	0x20000658
 8000efc:	40013000 	.word	0x40013000

08000f00 <MX_TIM1_Init>:
>>>>>>> FFF
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
<<<<<<< HEAD
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
=======
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
>>>>>>> FFF

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a0:	463b      	mov	r3, r7
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
=======
 8000f06:	f107 0308 	add.w	r3, r7, #8
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f14:	463b      	mov	r3, r7
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
>>>>>>> FFF

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
<<<<<<< HEAD
 80017a8:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <MX_TIM1_Init+0x98>)
 80017aa:	4a1f      	ldr	r2, [pc, #124]	; (8001828 <MX_TIM1_Init+0x9c>)
 80017ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 80017ae:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <MX_TIM1_Init+0x98>)
 80017b0:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80017b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b6:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <MX_TIM1_Init+0x98>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80017bc:	4b19      	ldr	r3, [pc, #100]	; (8001824 <MX_TIM1_Init+0x98>)
 80017be:	2264      	movs	r2, #100	; 0x64
 80017c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <MX_TIM1_Init+0x98>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <MX_TIM1_Init+0x98>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <MX_TIM1_Init+0x98>)
 80017d0:	2280      	movs	r2, #128	; 0x80
 80017d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017d4:	4813      	ldr	r0, [pc, #76]	; (8001824 <MX_TIM1_Init+0x98>)
 80017d6:	f003 fde9 	bl	80053ac <HAL_TIM_Base_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80017e0:	f000 f98e 	bl	8001b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	4619      	mov	r1, r3
 80017f0:	480c      	ldr	r0, [pc, #48]	; (8001824 <MX_TIM1_Init+0x98>)
 80017f2:	f003 ffb3 	bl	800575c <HAL_TIM_ConfigClockSource>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80017fc:	f000 f980 	bl	8001b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001800:	2310      	movs	r3, #16
 8001802:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001808:	463b      	mov	r3, r7
 800180a:	4619      	mov	r1, r3
 800180c:	4805      	ldr	r0, [pc, #20]	; (8001824 <MX_TIM1_Init+0x98>)
 800180e:	f004 f98f 	bl	8005b30 <HAL_TIMEx_MasterConfigSynchronization>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001818:	f000 f972 	bl	8001b00 <Error_Handler>
=======
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <MX_TIM1_Init+0x98>)
 8000f1e:	4a1f      	ldr	r2, [pc, #124]	; (8000f9c <MX_TIM1_Init+0x9c>)
 8000f20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 8000f22:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <MX_TIM1_Init+0x98>)
 8000f24:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8000f28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <MX_TIM1_Init+0x98>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <MX_TIM1_Init+0x98>)
 8000f32:	2264      	movs	r2, #100	; 0x64
 8000f34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_TIM1_Init+0x98>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <MX_TIM1_Init+0x98>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <MX_TIM1_Init+0x98>)
 8000f44:	2280      	movs	r2, #128	; 0x80
 8000f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f48:	4813      	ldr	r0, [pc, #76]	; (8000f98 <MX_TIM1_Init+0x98>)
 8000f4a:	f002 fea3 	bl	8003c94 <HAL_TIM_Base_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000f54:	f000 f996 	bl	8001284 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	4619      	mov	r1, r3
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <MX_TIM1_Init+0x98>)
 8000f66:	f003 f86d 	bl	8004044 <HAL_TIM_ConfigClockSource>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000f70:	f000 f988 	bl	8001284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000f74:	2310      	movs	r3, #16
 8000f76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_TIM1_Init+0x98>)
 8000f82:	f003 fa49 	bl	8004418 <HAL_TIMEx_MasterConfigSynchronization>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f8c:	f000 f97a 	bl	8001284 <Error_Handler>
>>>>>>> FFF
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
<<<<<<< HEAD
 800181c:	bf00      	nop
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000688 	.word	0x20000688
 8001828:	40012c00 	.word	0x40012c00

0800182c <MX_USART1_UART_Init>:
=======
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000610 	.word	0x20000610
 8000f9c:	40012c00 	.word	0x40012c00

08000fa0 <MX_USART1_UART_Init>:
>>>>>>> FFF
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
=======
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <MX_USART1_UART_Init+0x4c>)
 8001832:	4a12      	ldr	r2, [pc, #72]	; (800187c <MX_USART1_UART_Init+0x50>)
 8001834:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <MX_USART1_UART_Init+0x4c>)
 8001838:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800183c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <MX_USART1_UART_Init+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <MX_USART1_UART_Init+0x4c>)
 8001846:	2200      	movs	r2, #0
 8001848:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <MX_USART1_UART_Init+0x4c>)
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <MX_USART1_UART_Init+0x4c>)
 8001852:	220c      	movs	r2, #12
 8001854:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <MX_USART1_UART_Init+0x4c>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <MX_USART1_UART_Init+0x4c>)
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001862:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_USART1_UART_Init+0x4c>)
 8001864:	f004 f9d4 	bl	8005c10 <HAL_UART_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800186e:	f000 f947 	bl	8001b00 <Error_Handler>
=======
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <MX_USART1_UART_Init+0x50>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fd8:	f003 fa8e 	bl	80044f8 <HAL_UART_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fe2:	f000 f94f 	bl	8001284 <Error_Handler>
>>>>>>> FFF
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000644 	.word	0x20000644
 800187c:	40013800 	.word	0x40013800

08001880 <MX_USART3_UART_Init>:
=======
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200005cc 	.word	0x200005cc
 8000ff0:	40013800 	.word	0x40013800

08000ff4 <MX_USART3_UART_Init>:
>>>>>>> FFF
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
<<<<<<< HEAD
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
=======
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
<<<<<<< HEAD
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <MX_USART3_UART_Init+0x50>)
 8001888:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 800188c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001890:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 80018a6:	220c      	movs	r2, #12
 80018a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 80018b8:	f004 f9aa 	bl	8005c10 <HAL_UART_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018c2:	f000 f91d 	bl	8001b00 <Error_Handler>
=======
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_USART3_UART_Init+0x4c>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <MX_USART3_UART_Init+0x50>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_USART3_UART_Init+0x4c>)
 8001000:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001004:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_USART3_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_USART3_UART_Init+0x4c>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <MX_USART3_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_USART3_UART_Init+0x4c>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <MX_USART3_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_USART3_UART_Init+0x4c>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_USART3_UART_Init+0x4c>)
 800102c:	f003 fa64 	bl	80044f8 <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001036:	f000 f925 	bl	8001284 <Error_Handler>
>>>>>>> FFF
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
<<<<<<< HEAD
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200005ac 	.word	0x200005ac
 80018d0:	40004800 	.word	0x40004800

080018d4 <MX_GPIO_Init>:
=======
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000534 	.word	0x20000534
 8001044:	40004800 	.word	0x40004800

08001048 <MX_GPIO_Init>:
>>>>>>> FFF
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018da:	f107 0310 	add.w	r3, r7, #16
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e8:	4b5b      	ldr	r3, [pc, #364]	; (8001a58 <MX_GPIO_Init+0x184>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4a5a      	ldr	r2, [pc, #360]	; (8001a58 <MX_GPIO_Init+0x184>)
 80018ee:	f043 0310 	orr.w	r3, r3, #16
 80018f2:	6193      	str	r3, [r2, #24]
 80018f4:	4b58      	ldr	r3, [pc, #352]	; (8001a58 <MX_GPIO_Init+0x184>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0310 	and.w	r3, r3, #16
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001900:	4b55      	ldr	r3, [pc, #340]	; (8001a58 <MX_GPIO_Init+0x184>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a54      	ldr	r2, [pc, #336]	; (8001a58 <MX_GPIO_Init+0x184>)
 8001906:	f043 0320 	orr.w	r3, r3, #32
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b52      	ldr	r3, [pc, #328]	; (8001a58 <MX_GPIO_Init+0x184>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0320 	and.w	r3, r3, #32
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001918:	4b4f      	ldr	r3, [pc, #316]	; (8001a58 <MX_GPIO_Init+0x184>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a4e      	ldr	r2, [pc, #312]	; (8001a58 <MX_GPIO_Init+0x184>)
 800191e:	f043 0304 	orr.w	r3, r3, #4
 8001922:	6193      	str	r3, [r2, #24]
 8001924:	4b4c      	ldr	r3, [pc, #304]	; (8001a58 <MX_GPIO_Init+0x184>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001930:	4b49      	ldr	r3, [pc, #292]	; (8001a58 <MX_GPIO_Init+0x184>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	4a48      	ldr	r2, [pc, #288]	; (8001a58 <MX_GPIO_Init+0x184>)
 8001936:	f043 0308 	orr.w	r3, r3, #8
 800193a:	6193      	str	r3, [r2, #24]
 800193c:	4b46      	ldr	r3, [pc, #280]	; (8001a58 <MX_GPIO_Init+0x184>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001948:	2200      	movs	r2, #0
 800194a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800194e:	4843      	ldr	r0, [pc, #268]	; (8001a5c <MX_GPIO_Init+0x188>)
 8001950:	f001 ff03 	bl	800375a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	2108      	movs	r1, #8
 8001958:	4841      	ldr	r0, [pc, #260]	; (8001a60 <MX_GPIO_Init+0x18c>)
 800195a:	f001 fefe 	bl	800375a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800195e:	2201      	movs	r2, #1
 8001960:	2110      	movs	r1, #16
 8001962:	483f      	ldr	r0, [pc, #252]	; (8001a60 <MX_GPIO_Init+0x18c>)
 8001964:	f001 fef9 	bl	800375a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	f242 0101 	movw	r1, #8193	; 0x2001
 800196e:	483d      	ldr	r0, [pc, #244]	; (8001a64 <MX_GPIO_Init+0x190>)
 8001970:	f001 fef3 	bl	800375a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197a:	2301      	movs	r3, #1
 800197c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2302      	movs	r3, #2
 8001984:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001986:	f107 0310 	add.w	r3, r7, #16
 800198a:	4619      	mov	r1, r3
 800198c:	4833      	ldr	r0, [pc, #204]	; (8001a5c <MX_GPIO_Init+0x188>)
 800198e:	f001 fd49 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001992:	2304      	movs	r3, #4
 8001994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f107 0310 	add.w	r3, r7, #16
 80019a2:	4619      	mov	r1, r3
 80019a4:	482e      	ldr	r0, [pc, #184]	; (8001a60 <MX_GPIO_Init+0x18c>)
 80019a6:	f001 fd3d 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80019aa:	2318      	movs	r3, #24
 80019ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	2301      	movs	r3, #1
 80019b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b6:	2303      	movs	r3, #3
 80019b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ba:	f107 0310 	add.w	r3, r7, #16
 80019be:	4619      	mov	r1, r3
 80019c0:	4827      	ldr	r0, [pc, #156]	; (8001a60 <MX_GPIO_Init+0x18c>)
 80019c2:	f001 fd2f 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 80019c6:	f242 0301 	movw	r3, #8193	; 0x2001
 80019ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2302      	movs	r3, #2
 80019d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	4619      	mov	r1, r3
 80019de:	4821      	ldr	r0, [pc, #132]	; (8001a64 <MX_GPIO_Init+0x190>)
 80019e0:	f001 fd20 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 80019e4:	2302      	movs	r3, #2
 80019e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 80019f0:	f107 0310 	add.w	r3, r7, #16
 80019f4:	4619      	mov	r1, r3
 80019f6:	481b      	ldr	r0, [pc, #108]	; (8001a64 <MX_GPIO_Init+0x190>)
 80019f8:	f001 fd14 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80019fc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a02:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <MX_GPIO_Init+0x194>)
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a06:	2301      	movs	r3, #1
 8001a08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4814      	ldr	r0, [pc, #80]	; (8001a64 <MX_GPIO_Init+0x190>)
 8001a12:	f001 fd07 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <MX_GPIO_Init+0x194>)
 8001a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480d      	ldr	r0, [pc, #52]	; (8001a60 <MX_GPIO_Init+0x18c>)
 8001a2c:	f001 fcfa 	bl	8003424 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2100      	movs	r1, #0
 8001a34:	2017      	movs	r0, #23
 8001a36:	f001 fc0e 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a3a:	2017      	movs	r0, #23
 8001a3c:	f001 fc27 	bl	800328e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	2028      	movs	r0, #40	; 0x28
 8001a46:	f001 fc06 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a4a:	2028      	movs	r0, #40	; 0x28
 8001a4c:	f001 fc1f 	bl	800328e <HAL_NVIC_EnableIRQ>

}
 8001a50:	bf00      	nop
 8001a52:	3720      	adds	r7, #32
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40011000 	.word	0x40011000
 8001a60:	40010800 	.word	0x40010800
 8001a64:	40010c00 	.word	0x40010c00
 8001a68:	10210000 	.word	0x10210000

08001a6c <HAL_GPIO_EXTI_Callback>:
=======
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105c:	4b5f      	ldr	r3, [pc, #380]	; (80011dc <MX_GPIO_Init+0x194>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a5e      	ldr	r2, [pc, #376]	; (80011dc <MX_GPIO_Init+0x194>)
 8001062:	f043 0310 	orr.w	r3, r3, #16
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b5c      	ldr	r3, [pc, #368]	; (80011dc <MX_GPIO_Init+0x194>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0310 	and.w	r3, r3, #16
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001074:	4b59      	ldr	r3, [pc, #356]	; (80011dc <MX_GPIO_Init+0x194>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a58      	ldr	r2, [pc, #352]	; (80011dc <MX_GPIO_Init+0x194>)
 800107a:	f043 0320 	orr.w	r3, r3, #32
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b56      	ldr	r3, [pc, #344]	; (80011dc <MX_GPIO_Init+0x194>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0320 	and.w	r3, r3, #32
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b53      	ldr	r3, [pc, #332]	; (80011dc <MX_GPIO_Init+0x194>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a52      	ldr	r2, [pc, #328]	; (80011dc <MX_GPIO_Init+0x194>)
 8001092:	f043 0304 	orr.w	r3, r3, #4
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b50      	ldr	r3, [pc, #320]	; (80011dc <MX_GPIO_Init+0x194>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	4b4d      	ldr	r3, [pc, #308]	; (80011dc <MX_GPIO_Init+0x194>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a4c      	ldr	r2, [pc, #304]	; (80011dc <MX_GPIO_Init+0x194>)
 80010aa:	f043 0308 	orr.w	r3, r3, #8
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b4a      	ldr	r3, [pc, #296]	; (80011dc <MX_GPIO_Init+0x194>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c2:	4847      	ldr	r0, [pc, #284]	; (80011e0 <MX_GPIO_Init+0x198>)
 80010c4:	f000 ffbd 	bl	8002042 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2108      	movs	r1, #8
 80010cc:	4845      	ldr	r0, [pc, #276]	; (80011e4 <MX_GPIO_Init+0x19c>)
 80010ce:	f000 ffb8 	bl	8002042 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	2110      	movs	r1, #16
 80010d6:	4843      	ldr	r0, [pc, #268]	; (80011e4 <MX_GPIO_Init+0x19c>)
 80010d8:	f000 ffb3 	bl	8002042 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f242 0101 	movw	r1, #8193	; 0x2001
 80010e2:	4841      	ldr	r0, [pc, #260]	; (80011e8 <MX_GPIO_Init+0x1a0>)
 80010e4:	f000 ffad 	bl	8002042 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fa:	f107 0310 	add.w	r3, r7, #16
 80010fe:	4619      	mov	r1, r3
 8001100:	4837      	ldr	r0, [pc, #220]	; (80011e0 <MX_GPIO_Init+0x198>)
 8001102:	f000 fe03 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001106:	2304      	movs	r3, #4
 8001108:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800110a:	4b38      	ldr	r3, [pc, #224]	; (80011ec <MX_GPIO_Init+0x1a4>)
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	4619      	mov	r1, r3
 8001118:	4832      	ldr	r0, [pc, #200]	; (80011e4 <MX_GPIO_Init+0x19c>)
 800111a:	f000 fdf7 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800111e:	2318      	movs	r3, #24
 8001120:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	4619      	mov	r1, r3
 8001134:	482b      	ldr	r0, [pc, #172]	; (80011e4 <MX_GPIO_Init+0x19c>)
 8001136:	f000 fde9 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 800113a:	f242 0301 	movw	r3, #8193	; 0x2001
 800113e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2301      	movs	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2302      	movs	r3, #2
 800114a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	4619      	mov	r1, r3
 8001152:	4825      	ldr	r0, [pc, #148]	; (80011e8 <MX_GPIO_Init+0x1a0>)
 8001154:	f000 fdda 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 8001158:	2302      	movs	r3, #2
 800115a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	4619      	mov	r1, r3
 800116a:	481f      	ldr	r0, [pc, #124]	; (80011e8 <MX_GPIO_Init+0x1a0>)
 800116c:	f000 fdce 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001170:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001174:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <MX_GPIO_Init+0x1a4>)
 8001178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800117a:	2301      	movs	r3, #1
 800117c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	4619      	mov	r1, r3
 8001184:	4818      	ldr	r0, [pc, #96]	; (80011e8 <MX_GPIO_Init+0x1a0>)
 8001186:	f000 fdc1 	bl	8001d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800118a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800118e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_GPIO_Init+0x1a4>)
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001194:	2301      	movs	r3, #1
 8001196:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	4619      	mov	r1, r3
 800119e:	4811      	ldr	r0, [pc, #68]	; (80011e4 <MX_GPIO_Init+0x19c>)
 80011a0:	f000 fdb4 	bl	8001d0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	2008      	movs	r0, #8
 80011aa:	f000 fcc8 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011ae:	2008      	movs	r0, #8
 80011b0:	f000 fce1 	bl	8001b76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2100      	movs	r1, #0
 80011b8:	2017      	movs	r0, #23
 80011ba:	f000 fcc0 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011be:	2017      	movs	r0, #23
 80011c0:	f000 fcd9 	bl	8001b76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2100      	movs	r1, #0
 80011c8:	2028      	movs	r0, #40	; 0x28
 80011ca:	f000 fcb8 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011ce:	2028      	movs	r0, #40	; 0x28
 80011d0:	f000 fcd1 	bl	8001b76 <HAL_NVIC_EnableIRQ>

}
 80011d4:	bf00      	nop
 80011d6:	3720      	adds	r7, #32
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40011000 	.word	0x40011000
 80011e4:	40010800 	.word	0x40010800
 80011e8:	40010c00 	.word	0x40010c00
 80011ec:	10210000 	.word	0x10210000

080011f0 <HAL_GPIO_EXTI_Callback>:

>>>>>>> FFF


//----------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_2)			// If detect External interrupt from PA2
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d102      	bne.n	8001a82 <HAL_GPIO_EXTI_Callback+0x16>
  {
	  IRQ_Callback();					// Call Callback
 8001a7c:	f7ff f892 	bl	8000ba4 <IRQ_Callback>
=======
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_2)			// If detect External interrupt from PA2
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d102      	bne.n	8001206 <HAL_GPIO_EXTI_Callback+0x16>
  {
    IRQ_Callback();					// Call Callback
 8001200:	f7ff f932 	bl	8000468 <IRQ_Callback>
>>>>>>> FFF
  }
  else
  {
    __NOP();
  }
}
<<<<<<< HEAD
 8001a80:	e000      	b.n	8001a84 <HAL_GPIO_EXTI_Callback+0x18>
    __NOP();
 8001a82:	bf00      	nop
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_UART_RxCpltCallback>:
=======
 8001204:	e000      	b.n	8001208 <HAL_GPIO_EXTI_Callback+0x18>
    __NOP();
 8001206:	bf00      	nop
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_UART_RxCpltCallback>:
>>>>>>> FFF
//----------------------------------------------------------------------------------------
// Receive data from LoRa module
// If data received (Received 1 bytes)        Define in: HAL_UART_Receive_IT(&huart1, str, 1);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)											// Which uart generate Callback function
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a15      	ldr	r2, [pc, #84]	; (8001aec <HAL_UART_RxCpltCallback+0x60>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d123      	bne.n	8001ae4 <HAL_UART_RxCpltCallback+0x58>
	{
		if((str[0] == '\0') || (rx_data_counter >= sizeof(uart_rx_data)))   		// Detect '\0' Null or  data too long
 8001a9c:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <HAL_UART_RxCpltCallback+0x64>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_UART_RxCpltCallback+0x20>
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <HAL_UART_RxCpltCallback+0x68>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b31      	cmp	r3, #49	; 0x31
 8001aaa:	d906      	bls.n	8001aba <HAL_UART_RxCpltCallback+0x2e>
		{
			flag_command_received = true;                          // Data is ready
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_UART_RxCpltCallback+0x6c>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]
			rx_data_counter = 0;
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <HAL_UART_RxCpltCallback+0x68>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
=======
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)											// Which uart generate Callback function
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a15      	ldr	r2, [pc, #84]	; (8001270 <HAL_UART_RxCpltCallback+0x60>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d123      	bne.n	8001268 <HAL_UART_RxCpltCallback+0x58>
	{
		if((str[0] == '\0') || (rx_data_counter >= sizeof(uart_rx_data)))   		// Detect '\0' Null or  data too long
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <HAL_UART_RxCpltCallback+0x64>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_UART_RxCpltCallback+0x20>
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <HAL_UART_RxCpltCallback+0x68>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b31      	cmp	r3, #49	; 0x31
 800122e:	d906      	bls.n	800123e <HAL_UART_RxCpltCallback+0x2e>
		{
			flag_command_received = true;                          // Data is ready
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_UART_RxCpltCallback+0x6c>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
			rx_data_counter = 0;
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <HAL_UART_RxCpltCallback+0x68>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
>>>>>>> FFF
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
			rx_data_counter ++;
		}
	}
}
<<<<<<< HEAD
 8001ab8:	e014      	b.n	8001ae4 <HAL_UART_RxCpltCallback+0x58>
			flag_command_received = false;							// Receive data
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_UART_RxCpltCallback+0x6c>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <HAL_UART_RxCpltCallback+0x68>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <HAL_UART_RxCpltCallback+0x64>)
 8001ac8:	7819      	ldrb	r1, [r3, #0]
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <HAL_UART_RxCpltCallback+0x70>)
 8001acc:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4907      	ldr	r1, [pc, #28]	; (8001af0 <HAL_UART_RxCpltCallback+0x64>)
 8001ad2:	4806      	ldr	r0, [pc, #24]	; (8001aec <HAL_UART_RxCpltCallback+0x60>)
 8001ad4:	f004 f92d 	bl	8005d32 <HAL_UART_Receive_IT>
			rx_data_counter ++;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_UART_RxCpltCallback+0x68>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <HAL_UART_RxCpltCallback+0x68>)
 8001ae2:	701a      	strb	r2, [r3, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000644 	.word	0x20000644
 8001af0:	20000594 	.word	0x20000594
 8001af4:	20000596 	.word	0x20000596
 8001af8:	20000595 	.word	0x20000595
 8001afc:	20000560 	.word	0x20000560

08001b00 <Error_Handler>:
=======
 800123c:	e014      	b.n	8001268 <HAL_UART_RxCpltCallback+0x58>
			flag_command_received = false;							// Receive data
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <HAL_UART_RxCpltCallback+0x6c>)
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <HAL_UART_RxCpltCallback+0x68>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <HAL_UART_RxCpltCallback+0x64>)
 800124c:	7819      	ldrb	r1, [r3, #0]
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <HAL_UART_RxCpltCallback+0x70>)
 8001250:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
 8001252:	2201      	movs	r2, #1
 8001254:	4907      	ldr	r1, [pc, #28]	; (8001274 <HAL_UART_RxCpltCallback+0x64>)
 8001256:	4806      	ldr	r0, [pc, #24]	; (8001270 <HAL_UART_RxCpltCallback+0x60>)
 8001258:	f003 f99b 	bl	8004592 <HAL_UART_Receive_IT>
			rx_data_counter ++;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_UART_RxCpltCallback+0x68>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <HAL_UART_RxCpltCallback+0x68>)
 8001266:	701a      	strb	r2, [r3, #0]
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	200005cc 	.word	0x200005cc
 8001274:	2000051c 	.word	0x2000051c
 8001278:	2000051e 	.word	0x2000051e
 800127c:	2000051d 	.word	0x2000051d
 8001280:	200004e8 	.word	0x200004e8

08001284 <Error_Handler>:
>>>>>>> FFF
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
=======
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
>>>>>>> FFF
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8001b04:	b672      	cpsid	i
}
 8001b06:	bf00      	nop
=======
 8001288:	b672      	cpsid	i
}
 800128a:	bf00      	nop
>>>>>>> FFF
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8001b08:	e7fe      	b.n	8001b08 <Error_Handler+0x8>
	...

08001b0c <HAL_MspInit>:
=======
 800128c:	e7fe      	b.n	800128c <Error_Handler+0x8>
	...

08001290 <HAL_MspInit>:
>>>>>>> FFF
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
=======
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
<<<<<<< HEAD
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6193      	str	r3, [r2, #24]
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b34:	61d3      	str	r3, [r2, #28]
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_MspInit+0x5c>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
=======
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_MspInit+0x5c>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	4a14      	ldr	r2, [pc, #80]	; (80012ec <HAL_MspInit+0x5c>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6193      	str	r3, [r2, #24]
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_MspInit+0x5c>)
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <HAL_MspInit+0x5c>)
 80012b0:	69db      	ldr	r3, [r3, #28]
 80012b2:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <HAL_MspInit+0x5c>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b8:	61d3      	str	r3, [r2, #28]
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <HAL_MspInit+0x5c>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
>>>>>>> FFF

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
<<<<<<< HEAD
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_MspInit+0x60>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <HAL_MspInit+0x60>)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6053      	str	r3, [r2, #4]
=======
 80012c6:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_MspInit+0x60>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <HAL_MspInit+0x60>)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6053      	str	r3, [r2, #4]
>>>>>>> FFF

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40010000 	.word	0x40010000

08001b70 <HAL_I2C_MspInit>:
=======
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010000 	.word	0x40010000

080012f4 <HAL_I2C_MspInit>:
>>>>>>> FFF
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
<<<<<<< HEAD
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a15      	ldr	r2, [pc, #84]	; (8001be0 <HAL_I2C_MspInit+0x70>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d123      	bne.n	8001bd8 <HAL_I2C_MspInit+0x68>
=======
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a15      	ldr	r2, [pc, #84]	; (8001364 <HAL_I2C_MspInit+0x70>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d123      	bne.n	800135c <HAL_I2C_MspInit+0x68>
>>>>>>> FFF
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 8001b90:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <HAL_I2C_MspInit+0x74>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <HAL_I2C_MspInit+0x74>)
 8001b96:	f043 0308 	orr.w	r3, r3, #8
 8001b9a:	6193      	str	r3, [r2, #24]
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <HAL_I2C_MspInit+0x74>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
=======
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <HAL_I2C_MspInit+0x74>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a13      	ldr	r2, [pc, #76]	; (8001368 <HAL_I2C_MspInit+0x74>)
 800131a:	f043 0308 	orr.w	r3, r3, #8
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_I2C_MspInit+0x74>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]
>>>>>>> FFF
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< HEAD
 8001ba8:	23c0      	movs	r3, #192	; 0xc0
 8001baa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bac:	2312      	movs	r3, #18
 8001bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb4:	f107 0310 	add.w	r3, r7, #16
 8001bb8:	4619      	mov	r1, r3
 8001bba:	480b      	ldr	r0, [pc, #44]	; (8001be8 <HAL_I2C_MspInit+0x78>)
 8001bbc:	f001 fc32 	bl	8003424 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <HAL_I2C_MspInit+0x74>)
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	4a07      	ldr	r2, [pc, #28]	; (8001be4 <HAL_I2C_MspInit+0x74>)
 8001bc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bca:	61d3      	str	r3, [r2, #28]
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_I2C_MspInit+0x74>)
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
=======
 800132c:	23c0      	movs	r3, #192	; 0xc0
 800132e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001330:	2312      	movs	r3, #18
 8001332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	4619      	mov	r1, r3
 800133e:	480b      	ldr	r0, [pc, #44]	; (800136c <HAL_I2C_MspInit+0x78>)
 8001340:	f000 fce4 	bl	8001d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <HAL_I2C_MspInit+0x74>)
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	4a07      	ldr	r2, [pc, #28]	; (8001368 <HAL_I2C_MspInit+0x74>)
 800134a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800134e:	61d3      	str	r3, [r2, #28]
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_I2C_MspInit+0x74>)
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
>>>>>>> FFF
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001bd8:	bf00      	nop
 8001bda:	3720      	adds	r7, #32
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40005400 	.word	0x40005400
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010c00 	.word	0x40010c00

08001bec <HAL_SPI_MspInit>:
=======
 800135c:	bf00      	nop
 800135e:	3720      	adds	r7, #32
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40005400 	.word	0x40005400
 8001368:	40021000 	.word	0x40021000
 800136c:	40010c00 	.word	0x40010c00

08001370 <HAL_SPI_MspInit>:
>>>>>>> FFF
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
<<<<<<< HEAD
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0310 	add.w	r3, r7, #16
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a1b      	ldr	r2, [pc, #108]	; (8001c74 <HAL_SPI_MspInit+0x88>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d12f      	bne.n	8001c6c <HAL_SPI_MspInit+0x80>
=======
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a1b      	ldr	r2, [pc, #108]	; (80013f8 <HAL_SPI_MspInit+0x88>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d12f      	bne.n	80013f0 <HAL_SPI_MspInit+0x80>
>>>>>>> FFF
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< HEAD
 8001c0c:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <HAL_SPI_MspInit+0x8c>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	4a19      	ldr	r2, [pc, #100]	; (8001c78 <HAL_SPI_MspInit+0x8c>)
 8001c12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c16:	6193      	str	r3, [r2, #24]
 8001c18:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_SPI_MspInit+0x8c>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <HAL_SPI_MspInit+0x8c>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4a13      	ldr	r2, [pc, #76]	; (8001c78 <HAL_SPI_MspInit+0x8c>)
 8001c2a:	f043 0304 	orr.w	r3, r3, #4
 8001c2e:	6193      	str	r3, [r2, #24]
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_SPI_MspInit+0x8c>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
=======
 8001390:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <HAL_SPI_MspInit+0x8c>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a19      	ldr	r2, [pc, #100]	; (80013fc <HAL_SPI_MspInit+0x8c>)
 8001396:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <HAL_SPI_MspInit+0x8c>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <HAL_SPI_MspInit+0x8c>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a13      	ldr	r2, [pc, #76]	; (80013fc <HAL_SPI_MspInit+0x8c>)
 80013ae:	f043 0304 	orr.w	r3, r3, #4
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_SPI_MspInit+0x8c>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
>>>>>>> FFF
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
<<<<<<< HEAD
 8001c3c:	23a0      	movs	r3, #160	; 0xa0
 8001c3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c48:	f107 0310 	add.w	r3, r7, #16
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	480b      	ldr	r0, [pc, #44]	; (8001c7c <HAL_SPI_MspInit+0x90>)
 8001c50:	f001 fbe8 	bl	8003424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c54:	2340      	movs	r3, #64	; 0x40
 8001c56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c60:	f107 0310 	add.w	r3, r7, #16
 8001c64:	4619      	mov	r1, r3
 8001c66:	4805      	ldr	r0, [pc, #20]	; (8001c7c <HAL_SPI_MspInit+0x90>)
 8001c68:	f001 fbdc 	bl	8003424 <HAL_GPIO_Init>
=======
 80013c0:	23a0      	movs	r3, #160	; 0xa0
 80013c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4619      	mov	r1, r3
 80013d2:	480b      	ldr	r0, [pc, #44]	; (8001400 <HAL_SPI_MspInit+0x90>)
 80013d4:	f000 fc9a 	bl	8001d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013d8:	2340      	movs	r3, #64	; 0x40
 80013da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	4619      	mov	r1, r3
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <HAL_SPI_MspInit+0x90>)
 80013ec:	f000 fc8e 	bl	8001d0c <HAL_GPIO_Init>
>>>>>>> FFF
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001c6c:	bf00      	nop
 8001c6e:	3720      	adds	r7, #32
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40013000 	.word	0x40013000
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40010800 	.word	0x40010800

08001c80 <HAL_TIM_Base_MspInit>:
=======
 80013f0:	bf00      	nop
 80013f2:	3720      	adds	r7, #32
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40013000 	.word	0x40013000
 80013fc:	40021000 	.word	0x40021000
 8001400:	40010800 	.word	0x40010800

08001404 <HAL_TIM_Base_MspInit>:
>>>>>>> FFF
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	; (8001cc4 <HAL_TIM_Base_MspInit+0x44>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d113      	bne.n	8001cba <HAL_TIM_Base_MspInit+0x3a>
=======
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <HAL_TIM_Base_MspInit+0x44>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d113      	bne.n	800143e <HAL_TIM_Base_MspInit+0x3a>
>>>>>>> FFF
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< HEAD
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <HAL_TIM_Base_MspInit+0x48>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	4a0c      	ldr	r2, [pc, #48]	; (8001cc8 <HAL_TIM_Base_MspInit+0x48>)
 8001c98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c9c:	6193      	str	r3, [r2, #24]
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_TIM_Base_MspInit+0x48>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	2019      	movs	r0, #25
 8001cb0:	f001 fad1 	bl	8003256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001cb4:	2019      	movs	r0, #25
 8001cb6:	f001 faea 	bl	800328e <HAL_NVIC_EnableIRQ>
=======
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <HAL_TIM_Base_MspInit+0x48>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	4a0c      	ldr	r2, [pc, #48]	; (800144c <HAL_TIM_Base_MspInit+0x48>)
 800141c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001420:	6193      	str	r3, [r2, #24]
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_TIM_Base_MspInit+0x48>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	2019      	movs	r0, #25
 8001434:	f000 fb83 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001438:	2019      	movs	r0, #25
 800143a:	f000 fb9c 	bl	8001b76 <HAL_NVIC_EnableIRQ>
>>>>>>> FFF
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40012c00 	.word	0x40012c00
 8001cc8:	40021000 	.word	0x40021000

08001ccc <HAL_UART_MspInit>:
=======
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40012c00 	.word	0x40012c00
 800144c:	40021000 	.word	0x40021000

08001450 <HAL_UART_MspInit>:
>>>>>>> FFF
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0318 	add.w	r3, r7, #24
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a3c      	ldr	r2, [pc, #240]	; (8001dd8 <HAL_UART_MspInit+0x10c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d13a      	bne.n	8001d62 <HAL_UART_MspInit+0x96>
=======
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0318 	add.w	r3, r7, #24
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a3c      	ldr	r2, [pc, #240]	; (800155c <HAL_UART_MspInit+0x10c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d13a      	bne.n	80014e6 <HAL_UART_MspInit+0x96>
>>>>>>> FFF
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 8001cec:	4b3b      	ldr	r3, [pc, #236]	; (8001ddc <HAL_UART_MspInit+0x110>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	4a3a      	ldr	r2, [pc, #232]	; (8001ddc <HAL_UART_MspInit+0x110>)
 8001cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf6:	6193      	str	r3, [r2, #24]
 8001cf8:	4b38      	ldr	r3, [pc, #224]	; (8001ddc <HAL_UART_MspInit+0x110>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d04:	4b35      	ldr	r3, [pc, #212]	; (8001ddc <HAL_UART_MspInit+0x110>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	4a34      	ldr	r2, [pc, #208]	; (8001ddc <HAL_UART_MspInit+0x110>)
 8001d0a:	f043 0304 	orr.w	r3, r3, #4
 8001d0e:	6193      	str	r3, [r2, #24]
 8001d10:	4b32      	ldr	r3, [pc, #200]	; (8001ddc <HAL_UART_MspInit+0x110>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	693b      	ldr	r3, [r7, #16]
=======
 8001470:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <HAL_UART_MspInit+0x110>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a3a      	ldr	r2, [pc, #232]	; (8001560 <HAL_UART_MspInit+0x110>)
 8001476:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b38      	ldr	r3, [pc, #224]	; (8001560 <HAL_UART_MspInit+0x110>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	4b35      	ldr	r3, [pc, #212]	; (8001560 <HAL_UART_MspInit+0x110>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a34      	ldr	r2, [pc, #208]	; (8001560 <HAL_UART_MspInit+0x110>)
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	4b32      	ldr	r3, [pc, #200]	; (8001560 <HAL_UART_MspInit+0x110>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	693b      	ldr	r3, [r7, #16]
>>>>>>> FFF
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
<<<<<<< HEAD
 8001d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2a:	f107 0318 	add.w	r3, r7, #24
 8001d2e:	4619      	mov	r1, r3
 8001d30:	482b      	ldr	r0, [pc, #172]	; (8001de0 <HAL_UART_MspInit+0x114>)
 8001d32:	f001 fb77 	bl	8003424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d44:	f107 0318 	add.w	r3, r7, #24
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4825      	ldr	r0, [pc, #148]	; (8001de0 <HAL_UART_MspInit+0x114>)
 8001d4c:	f001 fb6a 	bl	8003424 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2101      	movs	r1, #1
 8001d54:	2025      	movs	r0, #37	; 0x25
 8001d56:	f001 fa7e 	bl	8003256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d5a:	2025      	movs	r0, #37	; 0x25
 8001d5c:	f001 fa97 	bl	800328e <HAL_NVIC_EnableIRQ>
=======
 80014a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f107 0318 	add.w	r3, r7, #24
 80014b2:	4619      	mov	r1, r3
 80014b4:	482b      	ldr	r0, [pc, #172]	; (8001564 <HAL_UART_MspInit+0x114>)
 80014b6:	f000 fc29 	bl	8001d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 0318 	add.w	r3, r7, #24
 80014cc:	4619      	mov	r1, r3
 80014ce:	4825      	ldr	r0, [pc, #148]	; (8001564 <HAL_UART_MspInit+0x114>)
 80014d0:	f000 fc1c 	bl	8001d0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2101      	movs	r1, #1
 80014d8:	2025      	movs	r0, #37	; 0x25
 80014da:	f000 fb30 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014de:	2025      	movs	r0, #37	; 0x25
 80014e0:	f000 fb49 	bl	8001b76 <HAL_NVIC_EnableIRQ>
>>>>>>> FFF
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001d60:	e036      	b.n	8001dd0 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <HAL_UART_MspInit+0x118>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d131      	bne.n	8001dd0 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <HAL_UART_MspInit+0x110>)
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	4a1a      	ldr	r2, [pc, #104]	; (8001ddc <HAL_UART_MspInit+0x110>)
 8001d72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d76:	61d3      	str	r3, [r2, #28]
 8001d78:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <HAL_UART_MspInit+0x110>)
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d84:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <HAL_UART_MspInit+0x110>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <HAL_UART_MspInit+0x110>)
 8001d8a:	f043 0308 	orr.w	r3, r3, #8
 8001d8e:	6193      	str	r3, [r2, #24]
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_UART_MspInit+0x110>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da6:	2303      	movs	r3, #3
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001daa:	f107 0318 	add.w	r3, r7, #24
 8001dae:	4619      	mov	r1, r3
 8001db0:	480d      	ldr	r0, [pc, #52]	; (8001de8 <HAL_UART_MspInit+0x11c>)
 8001db2:	f001 fb37 	bl	8003424 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001db6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc4:	f107 0318 	add.w	r3, r7, #24
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4807      	ldr	r0, [pc, #28]	; (8001de8 <HAL_UART_MspInit+0x11c>)
 8001dcc:	f001 fb2a 	bl	8003424 <HAL_GPIO_Init>
}
 8001dd0:	bf00      	nop
 8001dd2:	3728      	adds	r7, #40	; 0x28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40013800 	.word	0x40013800
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010800 	.word	0x40010800
 8001de4:	40004800 	.word	0x40004800
 8001de8:	40010c00 	.word	0x40010c00

08001dec <NMI_Handler>:
=======
 80014e4:	e036      	b.n	8001554 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a1f      	ldr	r2, [pc, #124]	; (8001568 <HAL_UART_MspInit+0x118>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d131      	bne.n	8001554 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <HAL_UART_MspInit+0x110>)
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	4a1a      	ldr	r2, [pc, #104]	; (8001560 <HAL_UART_MspInit+0x110>)
 80014f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014fa:	61d3      	str	r3, [r2, #28]
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <HAL_UART_MspInit+0x110>)
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_UART_MspInit+0x110>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a14      	ldr	r2, [pc, #80]	; (8001560 <HAL_UART_MspInit+0x110>)
 800150e:	f043 0308 	orr.w	r3, r3, #8
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_UART_MspInit+0x110>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800152a:	2303      	movs	r3, #3
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152e:	f107 0318 	add.w	r3, r7, #24
 8001532:	4619      	mov	r1, r3
 8001534:	480d      	ldr	r0, [pc, #52]	; (800156c <HAL_UART_MspInit+0x11c>)
 8001536:	f000 fbe9 	bl	8001d0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800153a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800153e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001548:	f107 0318 	add.w	r3, r7, #24
 800154c:	4619      	mov	r1, r3
 800154e:	4807      	ldr	r0, [pc, #28]	; (800156c <HAL_UART_MspInit+0x11c>)
 8001550:	f000 fbdc 	bl	8001d0c <HAL_GPIO_Init>
}
 8001554:	bf00      	nop
 8001556:	3728      	adds	r7, #40	; 0x28
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40013800 	.word	0x40013800
 8001560:	40021000 	.word	0x40021000
 8001564:	40010800 	.word	0x40010800
 8001568:	40004800 	.word	0x40004800
 800156c:	40010c00 	.word	0x40010c00

08001570 <NMI_Handler>:
>>>>>>> FFF
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
=======
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 8001df0:	e7fe      	b.n	8001df0 <NMI_Handler+0x4>

08001df2 <HardFault_Handler>:
=======
 8001574:	e7fe      	b.n	8001574 <NMI_Handler+0x4>

08001576 <HardFault_Handler>:
>>>>>>> FFF

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
=======
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001df6:	e7fe      	b.n	8001df6 <HardFault_Handler+0x4>

08001df8 <MemManage_Handler>:
=======
 800157a:	e7fe      	b.n	800157a <HardFault_Handler+0x4>

0800157c <MemManage_Handler>:
>>>>>>> FFF

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
=======
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001dfc:	e7fe      	b.n	8001dfc <MemManage_Handler+0x4>

08001dfe <BusFault_Handler>:
=======
 8001580:	e7fe      	b.n	8001580 <MemManage_Handler+0x4>

08001582 <BusFault_Handler>:
>>>>>>> FFF

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0
=======
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001e02:	e7fe      	b.n	8001e02 <BusFault_Handler+0x4>

08001e04 <UsageFault_Handler>:
=======
 8001586:	e7fe      	b.n	8001586 <BusFault_Handler+0x4>

08001588 <UsageFault_Handler>:
>>>>>>> FFF

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
=======
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001e08:	e7fe      	b.n	8001e08 <UsageFault_Handler+0x4>

08001e0a <SVC_Handler>:
=======
 800158c:	e7fe      	b.n	800158c <UsageFault_Handler+0x4>

0800158e <SVC_Handler>:
>>>>>>> FFF

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
=======
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
>>>>>>> FFF

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8001e0e:	bf00      	nop
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr

08001e16 <DebugMon_Handler>:
=======
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <DebugMon_Handler>:
>>>>>>> FFF

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0
=======
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
>>>>>>> FFF

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr

08001e22 <PendSV_Handler>:
=======
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr

080015a6 <PendSV_Handler>:
>>>>>>> FFF

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0
=======
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
>>>>>>> FFF

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr

08001e2e <SysTick_Handler>:
=======
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr

080015b2 <SysTick_Handler>:
>>>>>>> FFF

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	af00      	add	r7, sp, #0
=======
 80015b2:	b580      	push	{r7, lr}
 80015b4:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8001e32:	f001 f8f9 	bl	8003028 <HAL_IncTick>
=======
 80015b6:	f000 f9ab 	bl	8001910 <HAL_IncTick>
>>>>>>> FFF
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <EXTI9_5_IRQHandler>:
=======
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}

080015be <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80015c2:	2004      	movs	r0, #4
 80015c4:	f000 fd6e 	bl	80020a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}

080015cc <EXTI9_5_IRQHandler>:
>>>>>>> FFF

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
<<<<<<< HEAD
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Detect "DOWN" button
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <EXTI9_5_IRQHandler+0x44>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	f083 0301 	eor.w	r3, r3, #1
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d012      	beq.n	8001e74 <EXTI9_5_IRQHandler+0x38>
	{
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8))						// If interrupt from GPIOA PIN_8
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <EXTI9_5_IRQHandler+0x48>)
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00c      	beq.n	8001e74 <EXTI9_5_IRQHandler+0x38>
			{
				if(button_processed_status == doesent_detected)
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <EXTI9_5_IRQHandler+0x4c>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <EXTI9_5_IRQHandler+0x50>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d105      	bne.n	8001e74 <EXTI9_5_IRQHandler+0x38>
				{
					HAL_TIM_Base_Start_IT(&htim1);							// Turn on Timer 1
 8001e68:	4809      	ldr	r0, [pc, #36]	; (8001e90 <EXTI9_5_IRQHandler+0x54>)
 8001e6a:	f003 faef 	bl	800544c <HAL_TIM_Base_Start_IT>
					button_processed_status = detected;						// For interrupt work only one time
 8001e6e:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <EXTI9_5_IRQHandler+0x50>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
=======
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Detect "DOWN" button
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <EXTI9_5_IRQHandler+0x44>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	f083 0301 	eor.w	r3, r3, #1
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d012      	beq.n	8001604 <EXTI9_5_IRQHandler+0x38>
	{
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8))						// If interrupt from GPIOA PIN_8
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <EXTI9_5_IRQHandler+0x48>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00c      	beq.n	8001604 <EXTI9_5_IRQHandler+0x38>
			{
				if(button_processed_status == doesent_detected)
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <EXTI9_5_IRQHandler+0x4c>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <EXTI9_5_IRQHandler+0x50>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d105      	bne.n	8001604 <EXTI9_5_IRQHandler+0x38>
				{
					HAL_TIM_Base_Start_IT(&htim1);							// Turn on Timer 1
 80015f8:	4809      	ldr	r0, [pc, #36]	; (8001620 <EXTI9_5_IRQHandler+0x54>)
 80015fa:	f002 fb9b 	bl	8003d34 <HAL_TIM_Base_Start_IT>
					button_processed_status = detected;						// For interrupt work only one time
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <EXTI9_5_IRQHandler+0x50>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
>>>>>>> FFF
				}
			}
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
<<<<<<< HEAD
 8001e74:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e78:	f001 fca0 	bl	80037bc <HAL_GPIO_EXTI_IRQHandler>
=======
 8001604:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001608:	f000 fd4c 	bl	80020a4 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> FFF
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
<<<<<<< HEAD
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	200005a0 	.word	0x200005a0
 8001e84:	40010400 	.word	0x40010400
 8001e88:	2000001c 	.word	0x2000001c
 8001e8c:	20000020 	.word	0x20000020
 8001e90:	20000688 	.word	0x20000688

08001e94 <TIM1_UP_IRQHandler>:
=======
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000528 	.word	0x20000528
 8001614:	40010400 	.word	0x40010400
 8001618:	20000010 	.word	0x20000010
 800161c:	20000014 	.word	0x20000014
 8001620:	20000610 	.word	0x20000610

08001624 <TIM1_UP_IRQHandler>:
>>>>>>> FFF

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
<<<<<<< HEAD
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
=======
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
>>>>>>> FFF
	 * EXTI9_5_IRQHandler and EXTI15_10_IRQHandler
	 */

//	static int delay_time = 0;										//	Counter

	if(button_processed_status == detected)							// If pressed button was detected by external interrupts
<<<<<<< HEAD
 8001e98:	4b37      	ldr	r3, [pc, #220]	; (8001f78 <TIM1_UP_IRQHandler+0xe4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d165      	bne.n	8001f6c <TIM1_UP_IRQHandler+0xd8>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)    			// If "UP" button was pressed
 8001ea0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ea4:	4835      	ldr	r0, [pc, #212]	; (8001f7c <TIM1_UP_IRQHandler+0xe8>)
 8001ea6:	f001 fc41 	bl	800372c <HAL_GPIO_ReadPin>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d118      	bne.n	8001ee2 <TIM1_UP_IRQHandler+0x4e>
=======
 8001628:	4b37      	ldr	r3, [pc, #220]	; (8001708 <TIM1_UP_IRQHandler+0xe4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d165      	bne.n	80016fc <TIM1_UP_IRQHandler+0xd8>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)    			// If "UP" button was pressed
 8001630:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001634:	4835      	ldr	r0, [pc, #212]	; (800170c <TIM1_UP_IRQHandler+0xe8>)
 8001636:	f000 fced 	bl	8002014 <HAL_GPIO_ReadPin>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d118      	bne.n	8001672 <TIM1_UP_IRQHandler+0x4e>
>>>>>>> FFF
		{
			/*
			 * If every time when timer interrupt, delay_time will increment
			 * for avoid bounce button
			 */
			delay_time++;
<<<<<<< HEAD
 8001eb0:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <TIM1_UP_IRQHandler+0xec>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	4a32      	ldr	r2, [pc, #200]	; (8001f80 <TIM1_UP_IRQHandler+0xec>)
 8001eb8:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8001eba:	4b32      	ldr	r3, [pc, #200]	; (8001f84 <TIM1_UP_IRQHandler+0xf0>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4b2f      	ldr	r3, [pc, #188]	; (8001f80 <TIM1_UP_IRQHandler+0xec>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	dc51      	bgt.n	8001f6c <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 8001ec8:	4b2b      	ldr	r3, [pc, #172]	; (8001f78 <TIM1_UP_IRQHandler+0xe4>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8001ece:	482e      	ldr	r0, [pc, #184]	; (8001f88 <TIM1_UP_IRQHandler+0xf4>)
 8001ed0:	f003 fb0e 	bl	80054f0 <HAL_TIM_Base_Stop_IT>

				button_status = BOTTON_UP;
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <TIM1_UP_IRQHandler+0xf8>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 8001eda:	4b29      	ldr	r3, [pc, #164]	; (8001f80 <TIM1_UP_IRQHandler+0xec>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	e044      	b.n	8001f6c <TIM1_UP_IRQHandler+0xd8>
=======
 8001640:	4b33      	ldr	r3, [pc, #204]	; (8001710 <TIM1_UP_IRQHandler+0xec>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3301      	adds	r3, #1
 8001646:	4a32      	ldr	r2, [pc, #200]	; (8001710 <TIM1_UP_IRQHandler+0xec>)
 8001648:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 800164a:	4b32      	ldr	r3, [pc, #200]	; (8001714 <TIM1_UP_IRQHandler+0xf0>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	4b2f      	ldr	r3, [pc, #188]	; (8001710 <TIM1_UP_IRQHandler+0xec>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	dc51      	bgt.n	80016fc <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <TIM1_UP_IRQHandler+0xe4>)
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 800165e:	482e      	ldr	r0, [pc, #184]	; (8001718 <TIM1_UP_IRQHandler+0xf4>)
 8001660:	f002 fbba 	bl	8003dd8 <HAL_TIM_Base_Stop_IT>

				button_status = BOTTON_UP;
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <TIM1_UP_IRQHandler+0xf8>)
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 800166a:	4b29      	ldr	r3, [pc, #164]	; (8001710 <TIM1_UP_IRQHandler+0xec>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	e044      	b.n	80016fc <TIM1_UP_IRQHandler+0xd8>
>>>>>>> FFF
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0)   			 	// If "DOWN" button was pressed
<<<<<<< HEAD
 8001ee2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ee6:	482a      	ldr	r0, [pc, #168]	; (8001f90 <TIM1_UP_IRQHandler+0xfc>)
 8001ee8:	f001 fc20 	bl	800372c <HAL_GPIO_ReadPin>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d118      	bne.n	8001f24 <TIM1_UP_IRQHandler+0x90>
=======
 8001672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001676:	482a      	ldr	r0, [pc, #168]	; (8001720 <TIM1_UP_IRQHandler+0xfc>)
 8001678:	f000 fccc 	bl	8002014 <HAL_GPIO_ReadPin>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d118      	bne.n	80016b4 <TIM1_UP_IRQHandler+0x90>
>>>>>>> FFF
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
<<<<<<< HEAD
 8001ef2:	4b23      	ldr	r3, [pc, #140]	; (8001f80 <TIM1_UP_IRQHandler+0xec>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	4a21      	ldr	r2, [pc, #132]	; (8001f80 <TIM1_UP_IRQHandler+0xec>)
 8001efa:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8001efc:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <TIM1_UP_IRQHandler+0xf0>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <TIM1_UP_IRQHandler+0xec>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	dc30      	bgt.n	8001f6c <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <TIM1_UP_IRQHandler+0xe4>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8001f10:	481d      	ldr	r0, [pc, #116]	; (8001f88 <TIM1_UP_IRQHandler+0xf4>)
 8001f12:	f003 faed 	bl	80054f0 <HAL_TIM_Base_Stop_IT>

				button_status = BUTTON_DOWN;
 8001f16:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <TIM1_UP_IRQHandler+0xf8>)
 8001f18:	2203      	movs	r2, #3
 8001f1a:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 8001f1c:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <TIM1_UP_IRQHandler+0xec>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	e023      	b.n	8001f6c <TIM1_UP_IRQHandler+0xd8>
=======
 8001682:	4b23      	ldr	r3, [pc, #140]	; (8001710 <TIM1_UP_IRQHandler+0xec>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	4a21      	ldr	r2, [pc, #132]	; (8001710 <TIM1_UP_IRQHandler+0xec>)
 800168a:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 800168c:	4b21      	ldr	r3, [pc, #132]	; (8001714 <TIM1_UP_IRQHandler+0xf0>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <TIM1_UP_IRQHandler+0xec>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	dc30      	bgt.n	80016fc <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 800169a:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <TIM1_UP_IRQHandler+0xe4>)
 800169c:	2201      	movs	r2, #1
 800169e:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 80016a0:	481d      	ldr	r0, [pc, #116]	; (8001718 <TIM1_UP_IRQHandler+0xf4>)
 80016a2:	f002 fb99 	bl	8003dd8 <HAL_TIM_Base_Stop_IT>

				button_status = BUTTON_DOWN;
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <TIM1_UP_IRQHandler+0xf8>)
 80016a8:	2203      	movs	r2, #3
 80016aa:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 80016ac:	4b18      	ldr	r3, [pc, #96]	; (8001710 <TIM1_UP_IRQHandler+0xec>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	e023      	b.n	80016fc <TIM1_UP_IRQHandler+0xd8>
>>>>>>> FFF
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0)   			// If "ENTER" button was pressed
<<<<<<< HEAD
 8001f24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f28:	4814      	ldr	r0, [pc, #80]	; (8001f7c <TIM1_UP_IRQHandler+0xe8>)
 8001f2a:	f001 fbff 	bl	800372c <HAL_GPIO_ReadPin>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d118      	bne.n	8001f66 <TIM1_UP_IRQHandler+0xd2>
=======
 80016b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016b8:	4814      	ldr	r0, [pc, #80]	; (800170c <TIM1_UP_IRQHandler+0xe8>)
 80016ba:	f000 fcab 	bl	8002014 <HAL_GPIO_ReadPin>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d118      	bne.n	80016f6 <TIM1_UP_IRQHandler+0xd2>
>>>>>>> FFF
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
<<<<<<< HEAD
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <TIM1_UP_IRQHandler+0xec>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	4a11      	ldr	r2, [pc, #68]	; (8001f80 <TIM1_UP_IRQHandler+0xec>)
 8001f3c:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <TIM1_UP_IRQHandler+0xf0>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <TIM1_UP_IRQHandler+0xec>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	dc0f      	bgt.n	8001f6c <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <TIM1_UP_IRQHandler+0xe4>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
				button_status = BUTTON_ENTER;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <TIM1_UP_IRQHandler+0xf8>)
 8001f54:	2202      	movs	r2, #2
 8001f56:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <TIM1_UP_IRQHandler+0xec>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8001f5e:	480a      	ldr	r0, [pc, #40]	; (8001f88 <TIM1_UP_IRQHandler+0xf4>)
 8001f60:	f003 fac6 	bl	80054f0 <HAL_TIM_Base_Stop_IT>
 8001f64:	e002      	b.n	8001f6c <TIM1_UP_IRQHandler+0xd8>
=======
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <TIM1_UP_IRQHandler+0xec>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	3301      	adds	r3, #1
 80016ca:	4a11      	ldr	r2, [pc, #68]	; (8001710 <TIM1_UP_IRQHandler+0xec>)
 80016cc:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <TIM1_UP_IRQHandler+0xf0>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	461a      	mov	r2, r3
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <TIM1_UP_IRQHandler+0xec>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	dc0f      	bgt.n	80016fc <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <TIM1_UP_IRQHandler+0xe4>)
 80016de:	2201      	movs	r2, #1
 80016e0:	601a      	str	r2, [r3, #0]
				button_status = BUTTON_ENTER;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <TIM1_UP_IRQHandler+0xf8>)
 80016e4:	2202      	movs	r2, #2
 80016e6:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <TIM1_UP_IRQHandler+0xec>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 80016ee:	480a      	ldr	r0, [pc, #40]	; (8001718 <TIM1_UP_IRQHandler+0xf4>)
 80016f0:	f002 fb72 	bl	8003dd8 <HAL_TIM_Base_Stop_IT>
 80016f4:	e002      	b.n	80016fc <TIM1_UP_IRQHandler+0xd8>
>>>>>>> FFF
			}
		}
		else
		{
			delay_time = 0;
<<<<<<< HEAD
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <TIM1_UP_IRQHandler+0xec>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
=======
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <TIM1_UP_IRQHandler+0xec>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
>>>>>>> FFF
		}

	}

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
<<<<<<< HEAD
 8001f6c:	4806      	ldr	r0, [pc, #24]	; (8001f88 <TIM1_UP_IRQHandler+0xf4>)
 8001f6e:	f003 faed 	bl	800554c <HAL_TIM_IRQHandler>
=======
 80016fc:	4806      	ldr	r0, [pc, #24]	; (8001718 <TIM1_UP_IRQHandler+0xf4>)
 80016fe:	f002 fb99 	bl	8003e34 <HAL_TIM_IRQHandler>
>>>>>>> FFF
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
<<<<<<< HEAD
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000020 	.word	0x20000020
 8001f7c:	40010c00 	.word	0x40010c00
 8001f80:	20000598 	.word	0x20000598
 8001f84:	2000001d 	.word	0x2000001d
 8001f88:	20000688 	.word	0x20000688
 8001f8c:	200005a1 	.word	0x200005a1
 8001f90:	40010800 	.word	0x40010800

08001f94 <USART1_IRQHandler>:
=======
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000014 	.word	0x20000014
 800170c:	40010c00 	.word	0x40010c00
 8001710:	20000520 	.word	0x20000520
 8001714:	20000011 	.word	0x20000011
 8001718:	20000610 	.word	0x20000610
 800171c:	20000529 	.word	0x20000529
 8001720:	40010800 	.word	0x40010800

08001724 <USART1_IRQHandler>:
>>>>>>> FFF

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
<<<<<<< HEAD
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
=======
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
<<<<<<< HEAD
 8001f98:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <USART1_IRQHandler+0x10>)
 8001f9a:	f003 fefb 	bl	8005d94 <HAL_UART_IRQHandler>
=======
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <USART1_IRQHandler+0x10>)
 800172a:	f002 ff63 	bl	80045f4 <HAL_UART_IRQHandler>
>>>>>>> FFF
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
<<<<<<< HEAD
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000644 	.word	0x20000644

08001fa8 <EXTI15_10_IRQHandler>:
=======
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200005cc 	.word	0x200005cc

08001738 <EXTI15_10_IRQHandler>:
>>>>>>> FFF

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
<<<<<<< HEAD
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 8001fac:	4b1b      	ldr	r3, [pc, #108]	; (800201c <EXTI15_10_IRQHandler+0x74>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	f083 0301 	eor.w	r3, r3, #1
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d012      	beq.n	8001fe0 <EXTI15_10_IRQHandler+0x38>
	{
		// Detect "UP" button
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))	// If interrupt from GPIOB PIN_14
 8001fba:	4b19      	ldr	r3, [pc, #100]	; (8002020 <EXTI15_10_IRQHandler+0x78>)
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00c      	beq.n	8001fe0 <EXTI15_10_IRQHandler+0x38>
		{
			if(button_processed_status == doesent_detected)
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <EXTI15_10_IRQHandler+0x7c>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4b16      	ldr	r3, [pc, #88]	; (8002028 <EXTI15_10_IRQHandler+0x80>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d105      	bne.n	8001fe0 <EXTI15_10_IRQHandler+0x38>
			{
				HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8001fd4:	4815      	ldr	r0, [pc, #84]	; (800202c <EXTI15_10_IRQHandler+0x84>)
 8001fd6:	f003 fa39 	bl	800544c <HAL_TIM_Base_Start_IT>
				button_processed_status = detected;						// For interrupt work only one time
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <EXTI15_10_IRQHandler+0x80>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
=======
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <EXTI15_10_IRQHandler+0x74>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	f083 0301 	eor.w	r3, r3, #1
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d012      	beq.n	8001770 <EXTI15_10_IRQHandler+0x38>
	{
		// Detect "UP" button
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))	// If interrupt from GPIOB PIN_14
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <EXTI15_10_IRQHandler+0x78>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00c      	beq.n	8001770 <EXTI15_10_IRQHandler+0x38>
		{
			if(button_processed_status == doesent_detected)
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <EXTI15_10_IRQHandler+0x7c>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <EXTI15_10_IRQHandler+0x80>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d105      	bne.n	8001770 <EXTI15_10_IRQHandler+0x38>
			{
				HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8001764:	4815      	ldr	r0, [pc, #84]	; (80017bc <EXTI15_10_IRQHandler+0x84>)
 8001766:	f002 fae5 	bl	8003d34 <HAL_TIM_Base_Start_IT>
				button_processed_status = detected;						// For interrupt work only one time
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <EXTI15_10_IRQHandler+0x80>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
>>>>>>> FFF
			}
		}
	}

	// Detect "ENTER" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15))	// If interrupt from GPIOB PIN_15
<<<<<<< HEAD
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <EXTI15_10_IRQHandler+0x78>)
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00c      	beq.n	8002006 <EXTI15_10_IRQHandler+0x5e>
	{
		if(button_processed_status == doesent_detected)
 8001fec:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <EXTI15_10_IRQHandler+0x7c>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <EXTI15_10_IRQHandler+0x80>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d105      	bne.n	8002006 <EXTI15_10_IRQHandler+0x5e>
		{
			HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8001ffa:	480c      	ldr	r0, [pc, #48]	; (800202c <EXTI15_10_IRQHandler+0x84>)
 8001ffc:	f003 fa26 	bl	800544c <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 8002000:	4b09      	ldr	r3, [pc, #36]	; (8002028 <EXTI15_10_IRQHandler+0x80>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
=======
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <EXTI15_10_IRQHandler+0x78>)
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00c      	beq.n	8001796 <EXTI15_10_IRQHandler+0x5e>
	{
		if(button_processed_status == doesent_detected)
 800177c:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <EXTI15_10_IRQHandler+0x7c>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <EXTI15_10_IRQHandler+0x80>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d105      	bne.n	8001796 <EXTI15_10_IRQHandler+0x5e>
		{
			HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 800178a:	480c      	ldr	r0, [pc, #48]	; (80017bc <EXTI15_10_IRQHandler+0x84>)
 800178c:	f002 fad2 	bl	8003d34 <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <EXTI15_10_IRQHandler+0x80>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
>>>>>>> FFF
		}
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
<<<<<<< HEAD
 8002006:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800200a:	f001 fbd7 	bl	80037bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800200e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002012:	f001 fbd3 	bl	80037bc <HAL_GPIO_EXTI_IRQHandler>
=======
 8001796:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800179a:	f000 fc83 	bl	80020a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800179e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017a2:	f000 fc7f 	bl	80020a4 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> FFF
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
<<<<<<< HEAD
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200005a0 	.word	0x200005a0
 8002020:	40010400 	.word	0x40010400
 8002024:	2000001c 	.word	0x2000001c
 8002028:	20000020 	.word	0x20000020
 800202c:	20000688 	.word	0x20000688

08002030 <_sbrk>:
=======
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000528 	.word	0x20000528
 80017b0:	40010400 	.word	0x40010400
 80017b4:	20000010 	.word	0x20000010
 80017b8:	20000014 	.word	0x20000014
 80017bc:	20000610 	.word	0x20000610

080017c0 <_sbrk>:
>>>>>>> FFF
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
<<<<<<< HEAD
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002038:	4a14      	ldr	r2, [pc, #80]	; (800208c <_sbrk+0x5c>)
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <_sbrk+0x60>)
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <_sbrk+0x64>)
 800204e:	4a12      	ldr	r2, [pc, #72]	; (8002098 <_sbrk+0x68>)
 8002050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <_sbrk+0x64>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	429a      	cmp	r2, r3
 800205e:	d207      	bcs.n	8002070 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002060:	f004 fa76 	bl	8006550 <__errno>
 8002064:	4603      	mov	r3, r0
 8002066:	220c      	movs	r2, #12
 8002068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800206e:	e009      	b.n	8002084 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <_sbrk+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002076:	4b07      	ldr	r3, [pc, #28]	; (8002094 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	4a05      	ldr	r2, [pc, #20]	; (8002094 <_sbrk+0x64>)
 8002080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002082:	68fb      	ldr	r3, [r7, #12]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20005000 	.word	0x20005000
 8002090:	00000400 	.word	0x00000400
 8002094:	2000059c 	.word	0x2000059c
 8002098:	200008c8 	.word	0x200008c8

0800209c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <Menu_Init>:
void nrf_rx_mode(void);


// ----------------------------------------------------------------------------------------
void Menu_Init (void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b08d      	sub	sp, #52	; 0x34
 80020ac:	af00      	add	r7, sp, #0
	// Make pointers on funsctions
	// Main functions
	void (*p_print_rows_on_oled_if_up) (void);
	p_print_rows_on_oled_if_up = print_rows_on_oled_if_up;
 80020ae:	4b89      	ldr	r3, [pc, #548]	; (80022d4 <Menu_Init+0x22c>)
 80020b0:	62fb      	str	r3, [r7, #44]	; 0x2c

	void (*p_print_rows_on_oled_if_down) (void);					// Create pointer on function
	p_print_rows_on_oled_if_down = print_rows_on_oled_if_down;		// Save function print on pointer print_p
 80020b2:	4b89      	ldr	r3, [pc, #548]	; (80022d8 <Menu_Init+0x230>)
 80020b4:	62bb      	str	r3, [r7, #40]	; 0x28

	void (*p_return_from_menu)(void);
	p_return_from_menu = return_from_menu;
 80020b6:	4b89      	ldr	r3, [pc, #548]	; (80022dc <Menu_Init+0x234>)
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24

	void (*p_action) (void);										// Create pointer on function
	p_action = action;												// Save function action on pointer action_p
 80020ba:	4b89      	ldr	r3, [pc, #548]	; (80022e0 <Menu_Init+0x238>)
 80020bc:	623b      	str	r3, [r7, #32]

	// LoRa  menu functions
	void (*p_lora_rx_mode) (void);						// Function "Do it". Works when select it
	p_lora_rx_mode = lora_rx_mode;
 80020be:	4b89      	ldr	r3, [pc, #548]	; (80022e4 <Menu_Init+0x23c>)
 80020c0:	61fb      	str	r3, [r7, #28]

	void (*p_lora_tx_mode) (void);						// Function "Do it". Works when select it
	p_lora_tx_mode = lora_tx_mode;
 80020c2:	4b89      	ldr	r3, [pc, #548]	; (80022e8 <Menu_Init+0x240>)
 80020c4:	61bb      	str	r3, [r7, #24]


	void (*p_items_menu_1_set_par_2) (void);			// Doesen't use yet
	p_items_menu_1_set_par_2 = items_menu_1_set_par_2;
 80020c6:	4b89      	ldr	r3, [pc, #548]	; (80022ec <Menu_Init+0x244>)
 80020c8:	617b      	str	r3, [r7, #20]
	// items_menu_2 menu functions
//	void (*p_do_it_function_menu_2) (void);						// Function "Do it". Works when select it
//	p_do_it_function_menu_2 = do_it_function_menu_2;

	void (*p_items_menu_2_set_par_1) (void);
	p_items_menu_2_set_par_1 = items_menu_2_set_par_1;
 80020ca:	4b89      	ldr	r3, [pc, #548]	; (80022f0 <Menu_Init+0x248>)
 80020cc:	613b      	str	r3, [r7, #16]

	// items_menu_3 menu functions
	void (*p_do_it_function_menu_3) (void);						// Function "Do it". Works when select it
	p_do_it_function_menu_3 = do_it_function_menu_3;
 80020ce:	4b89      	ldr	r3, [pc, #548]	; (80022f4 <Menu_Init+0x24c>)
 80020d0:	60fb      	str	r3, [r7, #12]


	void (*p_nrf_tx_mode) (void);						// Function "Do it". Works when select it
	p_nrf_tx_mode = nrf_tx_mode;
 80020d2:	4b89      	ldr	r3, [pc, #548]	; (80022f8 <Menu_Init+0x250>)
 80020d4:	60bb      	str	r3, [r7, #8]

	void (*p_nrf_rx_mode) (void);						// Function "Do it". Works when select it
	p_nrf_rx_mode = nrf_rx_mode;
 80020d6:	4b89      	ldr	r3, [pc, #548]	; (80022fc <Menu_Init+0x254>)
 80020d8:	607b      	str	r3, [r7, #4]

	// Fill in elements(nodes) of list (7 items)
	// Main menu items
	/////////////////////////////////////////////////////////////////

	items[0].up = 0;
 80020da:	4b89      	ldr	r3, [pc, #548]	; (8002300 <Menu_Init+0x258>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
	items[0].down = &items[1];
 80020e0:	4b87      	ldr	r3, [pc, #540]	; (8002300 <Menu_Init+0x258>)
 80020e2:	4a88      	ldr	r2, [pc, #544]	; (8002304 <Menu_Init+0x25c>)
 80020e4:	605a      	str	r2, [r3, #4]
	items[0].child = &items_menu_1[0];
 80020e6:	4b86      	ldr	r3, [pc, #536]	; (8002300 <Menu_Init+0x258>)
 80020e8:	4a87      	ldr	r2, [pc, #540]	; (8002308 <Menu_Init+0x260>)
 80020ea:	609a      	str	r2, [r3, #8]
	items[0].parent = 0;
 80020ec:	4b84      	ldr	r3, [pc, #528]	; (8002300 <Menu_Init+0x258>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	60da      	str	r2, [r3, #12]
	items[0].id = 1;
 80020f2:	4b83      	ldr	r3, [pc, #524]	; (8002300 <Menu_Init+0x258>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	741a      	strb	r2, [r3, #16]
	items[0].name = "LoRa E220";
 80020f8:	4b81      	ldr	r3, [pc, #516]	; (8002300 <Menu_Init+0x258>)
 80020fa:	4a84      	ldr	r2, [pc, #528]	; (800230c <Menu_Init+0x264>)
 80020fc:	615a      	str	r2, [r3, #20]
	items[0].updateScreen_up = p_print_rows_on_oled_if_up;
 80020fe:	4a80      	ldr	r2, [pc, #512]	; (8002300 <Menu_Init+0x258>)
 8002100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002102:	6193      	str	r3, [r2, #24]
	items[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8002104:	4a7e      	ldr	r2, [pc, #504]	; (8002300 <Menu_Init+0x258>)
 8002106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002108:	61d3      	str	r3, [r2, #28]
	items[0].makeAction = 0;
 800210a:	4b7d      	ldr	r3, [pc, #500]	; (8002300 <Menu_Init+0x258>)
 800210c:	2200      	movs	r2, #0
 800210e:	621a      	str	r2, [r3, #32]

	items[1].up = &items[0];
 8002110:	4b7b      	ldr	r3, [pc, #492]	; (8002300 <Menu_Init+0x258>)
 8002112:	4a7b      	ldr	r2, [pc, #492]	; (8002300 <Menu_Init+0x258>)
 8002114:	625a      	str	r2, [r3, #36]	; 0x24
	items[1].down = &items[2];
 8002116:	4b7a      	ldr	r3, [pc, #488]	; (8002300 <Menu_Init+0x258>)
 8002118:	4a7d      	ldr	r2, [pc, #500]	; (8002310 <Menu_Init+0x268>)
 800211a:	629a      	str	r2, [r3, #40]	; 0x28
	items[1].child = &items_menu_2[0];
 800211c:	4b78      	ldr	r3, [pc, #480]	; (8002300 <Menu_Init+0x258>)
 800211e:	4a7d      	ldr	r2, [pc, #500]	; (8002314 <Menu_Init+0x26c>)
 8002120:	62da      	str	r2, [r3, #44]	; 0x2c
	items[1].parent = 0;
 8002122:	4b77      	ldr	r3, [pc, #476]	; (8002300 <Menu_Init+0x258>)
 8002124:	2200      	movs	r2, #0
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
	items[1].id = 2;
 8002128:	4b75      	ldr	r3, [pc, #468]	; (8002300 <Menu_Init+0x258>)
 800212a:	2202      	movs	r2, #2
 800212c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items[1].name = "NRF24L01";
 8002130:	4b73      	ldr	r3, [pc, #460]	; (8002300 <Menu_Init+0x258>)
 8002132:	4a79      	ldr	r2, [pc, #484]	; (8002318 <Menu_Init+0x270>)
 8002134:	639a      	str	r2, [r3, #56]	; 0x38
	items[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8002136:	4a72      	ldr	r2, [pc, #456]	; (8002300 <Menu_Init+0x258>)
 8002138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213a:	63d3      	str	r3, [r2, #60]	; 0x3c
	items[1].updateScreen_down = p_print_rows_on_oled_if_down;
 800213c:	4a70      	ldr	r2, [pc, #448]	; (8002300 <Menu_Init+0x258>)
 800213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
	items[1].makeAction = 0;
 8002142:	4b6f      	ldr	r3, [pc, #444]	; (8002300 <Menu_Init+0x258>)
 8002144:	2200      	movs	r2, #0
 8002146:	645a      	str	r2, [r3, #68]	; 0x44

	items[2].up = &items[1];
 8002148:	4b6d      	ldr	r3, [pc, #436]	; (8002300 <Menu_Init+0x258>)
 800214a:	4a6e      	ldr	r2, [pc, #440]	; (8002304 <Menu_Init+0x25c>)
 800214c:	649a      	str	r2, [r3, #72]	; 0x48
	items[2].down = 0;
 800214e:	4b6c      	ldr	r3, [pc, #432]	; (8002300 <Menu_Init+0x258>)
 8002150:	2200      	movs	r2, #0
 8002152:	64da      	str	r2, [r3, #76]	; 0x4c
	items[2].child = &items_menu_3[0];
 8002154:	4b6a      	ldr	r3, [pc, #424]	; (8002300 <Menu_Init+0x258>)
 8002156:	4a71      	ldr	r2, [pc, #452]	; (800231c <Menu_Init+0x274>)
 8002158:	651a      	str	r2, [r3, #80]	; 0x50
	items[2].parent = 0;
 800215a:	4b69      	ldr	r3, [pc, #420]	; (8002300 <Menu_Init+0x258>)
 800215c:	2200      	movs	r2, #0
 800215e:	655a      	str	r2, [r3, #84]	; 0x54
	items[2].id = 3;
 8002160:	4b67      	ldr	r3, [pc, #412]	; (8002300 <Menu_Init+0x258>)
 8002162:	2203      	movs	r2, #3
 8002164:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items[2].name = "AM2302 sensor";
 8002168:	4b65      	ldr	r3, [pc, #404]	; (8002300 <Menu_Init+0x258>)
 800216a:	4a6d      	ldr	r2, [pc, #436]	; (8002320 <Menu_Init+0x278>)
 800216c:	65da      	str	r2, [r3, #92]	; 0x5c
	items[2].updateScreen_up = p_print_rows_on_oled_if_up;
 800216e:	4a64      	ldr	r2, [pc, #400]	; (8002300 <Menu_Init+0x258>)
 8002170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002172:	6613      	str	r3, [r2, #96]	; 0x60
	items[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8002174:	4a62      	ldr	r2, [pc, #392]	; (8002300 <Menu_Init+0x258>)
 8002176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002178:	6653      	str	r3, [r2, #100]	; 0x64
	items[2].makeAction = 0;
 800217a:	4b61      	ldr	r3, [pc, #388]	; (8002300 <Menu_Init+0x258>)
 800217c:	2200      	movs	r2, #0
 800217e:	669a      	str	r2, [r3, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating LoRa menu
	items_menu_1[0].up = 0;
 8002180:	4b61      	ldr	r3, [pc, #388]	; (8002308 <Menu_Init+0x260>)
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
	items_menu_1[0].down = &items_menu_1[1];
 8002186:	4b60      	ldr	r3, [pc, #384]	; (8002308 <Menu_Init+0x260>)
 8002188:	4a66      	ldr	r2, [pc, #408]	; (8002324 <Menu_Init+0x27c>)
 800218a:	605a      	str	r2, [r3, #4]
	items_menu_1[0].id = 1;
 800218c:	4b5e      	ldr	r3, [pc, #376]	; (8002308 <Menu_Init+0x260>)
 800218e:	2201      	movs	r2, #1
 8002190:	741a      	strb	r2, [r3, #16]
	items_menu_1[0].child = 0;
 8002192:	4b5d      	ldr	r3, [pc, #372]	; (8002308 <Menu_Init+0x260>)
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
	items_menu_1[0].parent = &items[0];
 8002198:	4b5b      	ldr	r3, [pc, #364]	; (8002308 <Menu_Init+0x260>)
 800219a:	4a59      	ldr	r2, [pc, #356]	; (8002300 <Menu_Init+0x258>)
 800219c:	60da      	str	r2, [r3, #12]
	items_menu_1[0].name = "LoRa RX";
 800219e:	4b5a      	ldr	r3, [pc, #360]	; (8002308 <Menu_Init+0x260>)
 80021a0:	4a61      	ldr	r2, [pc, #388]	; (8002328 <Menu_Init+0x280>)
 80021a2:	615a      	str	r2, [r3, #20]
	items_menu_1[0].updateScreen_up = p_print_rows_on_oled_if_up;
 80021a4:	4a58      	ldr	r2, [pc, #352]	; (8002308 <Menu_Init+0x260>)
 80021a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a8:	6193      	str	r3, [r2, #24]
	items_menu_1[0].updateScreen_down = p_print_rows_on_oled_if_down;
 80021aa:	4a57      	ldr	r2, [pc, #348]	; (8002308 <Menu_Init+0x260>)
 80021ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ae:	61d3      	str	r3, [r2, #28]
	items_menu_1[0].makeAction = p_lora_rx_mode;
 80021b0:	4a55      	ldr	r2, [pc, #340]	; (8002308 <Menu_Init+0x260>)
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	6213      	str	r3, [r2, #32]

	items_menu_1[1].up = &items_menu_1[0];
 80021b6:	4b54      	ldr	r3, [pc, #336]	; (8002308 <Menu_Init+0x260>)
 80021b8:	4a53      	ldr	r2, [pc, #332]	; (8002308 <Menu_Init+0x260>)
 80021ba:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_1[1].down = &items_menu_1[2];
 80021bc:	4b52      	ldr	r3, [pc, #328]	; (8002308 <Menu_Init+0x260>)
 80021be:	4a5b      	ldr	r2, [pc, #364]	; (800232c <Menu_Init+0x284>)
 80021c0:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_1[1].child = 0;
 80021c2:	4b51      	ldr	r3, [pc, #324]	; (8002308 <Menu_Init+0x260>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_1[1].parent = &items[0];
 80021c8:	4b4f      	ldr	r3, [pc, #316]	; (8002308 <Menu_Init+0x260>)
 80021ca:	4a4d      	ldr	r2, [pc, #308]	; (8002300 <Menu_Init+0x258>)
 80021cc:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_1[1].id = 2;
 80021ce:	4b4e      	ldr	r3, [pc, #312]	; (8002308 <Menu_Init+0x260>)
 80021d0:	2202      	movs	r2, #2
 80021d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_1[1].name = "LoRa TX";
 80021d6:	4b4c      	ldr	r3, [pc, #304]	; (8002308 <Menu_Init+0x260>)
 80021d8:	4a55      	ldr	r2, [pc, #340]	; (8002330 <Menu_Init+0x288>)
 80021da:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_1[1].updateScreen_up = p_print_rows_on_oled_if_up;
 80021dc:	4a4a      	ldr	r2, [pc, #296]	; (8002308 <Menu_Init+0x260>)
 80021de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e0:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_1[1].updateScreen_down = p_print_rows_on_oled_if_down;
 80021e2:	4a49      	ldr	r2, [pc, #292]	; (8002308 <Menu_Init+0x260>)
 80021e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e6:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_1[1].makeAction = p_lora_tx_mode;
 80021e8:	4a47      	ldr	r2, [pc, #284]	; (8002308 <Menu_Init+0x260>)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_1[2].up = &items_menu_1[1];
 80021ee:	4b46      	ldr	r3, [pc, #280]	; (8002308 <Menu_Init+0x260>)
 80021f0:	4a4c      	ldr	r2, [pc, #304]	; (8002324 <Menu_Init+0x27c>)
 80021f2:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_1[2].down = 0;
 80021f4:	4b44      	ldr	r3, [pc, #272]	; (8002308 <Menu_Init+0x260>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_1[2].child = 0;
 80021fa:	4b43      	ldr	r3, [pc, #268]	; (8002308 <Menu_Init+0x260>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_1[2].parent = &items[0];
 8002200:	4b41      	ldr	r3, [pc, #260]	; (8002308 <Menu_Init+0x260>)
 8002202:	4a3f      	ldr	r2, [pc, #252]	; (8002300 <Menu_Init+0x258>)
 8002204:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_1[2].id = 3;
 8002206:	4b40      	ldr	r3, [pc, #256]	; (8002308 <Menu_Init+0x260>)
 8002208:	2203      	movs	r2, #3
 800220a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_1[2].name = "EXIT";						// Name of item
 800220e:	4b3e      	ldr	r3, [pc, #248]	; (8002308 <Menu_Init+0x260>)
 8002210:	4a48      	ldr	r2, [pc, #288]	; (8002334 <Menu_Init+0x28c>)
 8002212:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_1[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8002214:	4a3c      	ldr	r2, [pc, #240]	; (8002308 <Menu_Init+0x260>)
 8002216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002218:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_1[2].updateScreen_down = p_print_rows_on_oled_if_down;
 800221a:	4a3b      	ldr	r2, [pc, #236]	; (8002308 <Menu_Init+0x260>)
 800221c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221e:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_1[2].makeAction = p_return_from_menu;
 8002220:	4a39      	ldr	r2, [pc, #228]	; (8002308 <Menu_Init+0x260>)
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	6693      	str	r3, [r2, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating next menu
	items_menu_2[0].up = 0;
 8002226:	4b3b      	ldr	r3, [pc, #236]	; (8002314 <Menu_Init+0x26c>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
	items_menu_2[0].down = &items_menu_2[1];
 800222c:	4b39      	ldr	r3, [pc, #228]	; (8002314 <Menu_Init+0x26c>)
 800222e:	4a42      	ldr	r2, [pc, #264]	; (8002338 <Menu_Init+0x290>)
 8002230:	605a      	str	r2, [r3, #4]
	items_menu_2[0].child = 0;
 8002232:	4b38      	ldr	r3, [pc, #224]	; (8002314 <Menu_Init+0x26c>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
	items_menu_2[0].parent = &items[1];
 8002238:	4b36      	ldr	r3, [pc, #216]	; (8002314 <Menu_Init+0x26c>)
 800223a:	4a32      	ldr	r2, [pc, #200]	; (8002304 <Menu_Init+0x25c>)
 800223c:	60da      	str	r2, [r3, #12]
	items_menu_2[0].id = 1;
 800223e:	4b35      	ldr	r3, [pc, #212]	; (8002314 <Menu_Init+0x26c>)
 8002240:	2201      	movs	r2, #1
 8002242:	741a      	strb	r2, [r3, #16]
	items_menu_2[0].name = "NRF RX";						// Name of item
 8002244:	4b33      	ldr	r3, [pc, #204]	; (8002314 <Menu_Init+0x26c>)
 8002246:	4a3d      	ldr	r2, [pc, #244]	; (800233c <Menu_Init+0x294>)
 8002248:	615a      	str	r2, [r3, #20]
	items_menu_2[0].updateScreen_up = p_print_rows_on_oled_if_up;
 800224a:	4a32      	ldr	r2, [pc, #200]	; (8002314 <Menu_Init+0x26c>)
 800224c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224e:	6193      	str	r3, [r2, #24]
	items_menu_2[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8002250:	4a30      	ldr	r2, [pc, #192]	; (8002314 <Menu_Init+0x26c>)
 8002252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002254:	61d3      	str	r3, [r2, #28]
	items_menu_2[0].makeAction = p_nrf_rx_mode;
 8002256:	4a2f      	ldr	r2, [pc, #188]	; (8002314 <Menu_Init+0x26c>)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6213      	str	r3, [r2, #32]

	items_menu_2[1].up = &items_menu_2[0];
 800225c:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <Menu_Init+0x26c>)
 800225e:	4a2d      	ldr	r2, [pc, #180]	; (8002314 <Menu_Init+0x26c>)
 8002260:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_2[1].down = &items_menu_2[2];
 8002262:	4b2c      	ldr	r3, [pc, #176]	; (8002314 <Menu_Init+0x26c>)
 8002264:	4a36      	ldr	r2, [pc, #216]	; (8002340 <Menu_Init+0x298>)
 8002266:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_2[1].child = 0;
 8002268:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <Menu_Init+0x26c>)
 800226a:	2200      	movs	r2, #0
 800226c:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_2[1].parent = &items[1];
 800226e:	4b29      	ldr	r3, [pc, #164]	; (8002314 <Menu_Init+0x26c>)
 8002270:	4a24      	ldr	r2, [pc, #144]	; (8002304 <Menu_Init+0x25c>)
 8002272:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_2[1].id = 2;
 8002274:	4b27      	ldr	r3, [pc, #156]	; (8002314 <Menu_Init+0x26c>)
 8002276:	2202      	movs	r2, #2
 8002278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_2[1].name = "NRF TX";						// Name of item
 800227c:	4b25      	ldr	r3, [pc, #148]	; (8002314 <Menu_Init+0x26c>)
 800227e:	4a31      	ldr	r2, [pc, #196]	; (8002344 <Menu_Init+0x29c>)
 8002280:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_2[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8002282:	4a24      	ldr	r2, [pc, #144]	; (8002314 <Menu_Init+0x26c>)
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002286:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_2[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8002288:	4a22      	ldr	r2, [pc, #136]	; (8002314 <Menu_Init+0x26c>)
 800228a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228c:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_2[1].makeAction = p_nrf_tx_mode;
 800228e:	4a21      	ldr	r2, [pc, #132]	; (8002314 <Menu_Init+0x26c>)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_2[2].up = &items_menu_2[1];
 8002294:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <Menu_Init+0x26c>)
 8002296:	4a28      	ldr	r2, [pc, #160]	; (8002338 <Menu_Init+0x290>)
 8002298:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_2[2].down = 0;
 800229a:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <Menu_Init+0x26c>)
 800229c:	2200      	movs	r2, #0
 800229e:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_2[2].child = 0;
 80022a0:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <Menu_Init+0x26c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_2[2].parent = &items[1];
 80022a6:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <Menu_Init+0x26c>)
 80022a8:	4a16      	ldr	r2, [pc, #88]	; (8002304 <Menu_Init+0x25c>)
 80022aa:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_2[2].id = 3;
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <Menu_Init+0x26c>)
 80022ae:	2203      	movs	r2, #3
 80022b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_2[2].name = "EXIT";						// Name of item
 80022b4:	4b17      	ldr	r3, [pc, #92]	; (8002314 <Menu_Init+0x26c>)
 80022b6:	4a1f      	ldr	r2, [pc, #124]	; (8002334 <Menu_Init+0x28c>)
 80022b8:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_2[2].updateScreen_up = p_print_rows_on_oled_if_up;
 80022ba:	4a16      	ldr	r2, [pc, #88]	; (8002314 <Menu_Init+0x26c>)
 80022bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022be:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_2[2].updateScreen_down = p_print_rows_on_oled_if_down;
 80022c0:	4a14      	ldr	r2, [pc, #80]	; (8002314 <Menu_Init+0x26c>)
 80022c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c4:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_2[2].makeAction = p_return_from_menu;
 80022c6:	4a13      	ldr	r2, [pc, #76]	; (8002314 <Menu_Init+0x26c>)
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	6693      	str	r3, [r2, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating sensor menu
	items_menu_3[0].up = 0;
 80022cc:	4b13      	ldr	r3, [pc, #76]	; (800231c <Menu_Init+0x274>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	e039      	b.n	8002348 <Menu_Init+0x2a0>
 80022d4:	080025ed 	.word	0x080025ed
 80022d8:	080026e5 	.word	0x080026e5
 80022dc:	08002a51 	.word	0x08002a51
 80022e0:	08002915 	.word	0x08002915
 80022e4:	08002aa5 	.word	0x08002aa5
 80022e8:	08002b41 	.word	0x08002b41
 80022ec:	08002bdd 	.word	0x08002bdd
 80022f0:	08002c9d 	.word	0x08002c9d
 80022f4:	08002d5d 	.word	0x08002d5d
 80022f8:	080023f1 	.word	0x080023f1
 80022fc:	080023d1 	.word	0x080023d1
 8002300:	20000848 	.word	0x20000848
 8002304:	2000086c 	.word	0x2000086c
 8002308:	20000794 	.word	0x20000794
 800230c:	08006fbc 	.word	0x08006fbc
 8002310:	20000890 	.word	0x20000890
 8002314:	20000728 	.word	0x20000728
 8002318:	08006fc8 	.word	0x08006fc8
 800231c:	20000800 	.word	0x20000800
 8002320:	08006fd4 	.word	0x08006fd4
 8002324:	200007b8 	.word	0x200007b8
 8002328:	08006fe4 	.word	0x08006fe4
 800232c:	200007dc 	.word	0x200007dc
 8002330:	08006fec 	.word	0x08006fec
 8002334:	08006ff4 	.word	0x08006ff4
 8002338:	2000074c 	.word	0x2000074c
 800233c:	08006ffc 	.word	0x08006ffc
 8002340:	20000770 	.word	0x20000770
 8002344:	08007004 	.word	0x08007004
	items_menu_3[0].down = &items_menu_3[1];
 8002348:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <Menu_Init+0x314>)
 800234a:	4a1d      	ldr	r2, [pc, #116]	; (80023c0 <Menu_Init+0x318>)
 800234c:	605a      	str	r2, [r3, #4]
	items_menu_3[0].child = 0;
 800234e:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <Menu_Init+0x314>)
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
	items_menu_3[0].parent = &items[2];
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <Menu_Init+0x314>)
 8002356:	4a1b      	ldr	r2, [pc, #108]	; (80023c4 <Menu_Init+0x31c>)
 8002358:	60da      	str	r2, [r3, #12]
	items_menu_3[0].id = 1;
 800235a:	4b18      	ldr	r3, [pc, #96]	; (80023bc <Menu_Init+0x314>)
 800235c:	2201      	movs	r2, #1
 800235e:	741a      	strb	r2, [r3, #16]
	items_menu_3[0].name = "Measure T & H";						// Name of item
 8002360:	4b16      	ldr	r3, [pc, #88]	; (80023bc <Menu_Init+0x314>)
 8002362:	4a19      	ldr	r2, [pc, #100]	; (80023c8 <Menu_Init+0x320>)
 8002364:	615a      	str	r2, [r3, #20]
	items_menu_3[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8002366:	4a15      	ldr	r2, [pc, #84]	; (80023bc <Menu_Init+0x314>)
 8002368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236a:	6193      	str	r3, [r2, #24]
	items_menu_3[0].updateScreen_down = p_print_rows_on_oled_if_down;
 800236c:	4a13      	ldr	r2, [pc, #76]	; (80023bc <Menu_Init+0x314>)
 800236e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002370:	61d3      	str	r3, [r2, #28]
	items_menu_3[0].makeAction = p_do_it_function_menu_3;
 8002372:	4a12      	ldr	r2, [pc, #72]	; (80023bc <Menu_Init+0x314>)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6213      	str	r3, [r2, #32]

	items_menu_3[1].up = &items_menu_3[0];
 8002378:	4b10      	ldr	r3, [pc, #64]	; (80023bc <Menu_Init+0x314>)
 800237a:	4a10      	ldr	r2, [pc, #64]	; (80023bc <Menu_Init+0x314>)
 800237c:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_3[1].down = 0;
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <Menu_Init+0x314>)
 8002380:	2200      	movs	r2, #0
 8002382:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_3[1].child = 0;
 8002384:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <Menu_Init+0x314>)
 8002386:	2200      	movs	r2, #0
 8002388:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_3[1].parent = &items[2];
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <Menu_Init+0x314>)
 800238c:	4a0d      	ldr	r2, [pc, #52]	; (80023c4 <Menu_Init+0x31c>)
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_3[1].id = 2;
 8002390:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <Menu_Init+0x314>)
 8002392:	2202      	movs	r2, #2
 8002394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_3[1].name = "EXIT";						// Name of item
 8002398:	4b08      	ldr	r3, [pc, #32]	; (80023bc <Menu_Init+0x314>)
 800239a:	4a0c      	ldr	r2, [pc, #48]	; (80023cc <Menu_Init+0x324>)
 800239c:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_3[1].updateScreen_up = p_print_rows_on_oled_if_up;
 800239e:	4a07      	ldr	r2, [pc, #28]	; (80023bc <Menu_Init+0x314>)
 80023a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a2:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_3[1].updateScreen_down = p_print_rows_on_oled_if_down;
 80023a4:	4a05      	ldr	r2, [pc, #20]	; (80023bc <Menu_Init+0x314>)
 80023a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_3[1].makeAction = p_return_from_menu;
 80023aa:	4a04      	ldr	r2, [pc, #16]	; (80023bc <Menu_Init+0x314>)
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	6453      	str	r3, [r2, #68]	; 0x44

}
 80023b0:	bf00      	nop
 80023b2:	3734      	adds	r7, #52	; 0x34
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	20000800 	.word	0x20000800
 80023c0:	20000824 	.word	0x20000824
 80023c4:	20000890 	.word	0x20000890
 80023c8:	0800700c 	.word	0x0800700c
 80023cc:	08006ff4 	.word	0x08006ff4

080023d0 <nrf_rx_mode>:
// ----------------------------------------------------------------------------------------
void nrf_rx_mode(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0

	clearn_oled();
 80023d6:	f7fe fe2b 	bl	8001030 <clearn_oled>
	bool init_status = NRF24_ini_rx_mode();
 80023da:	f7fe fb49 	bl	8000a70 <NRF24_ini_rx_mode>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf14      	ite	ne
 80023e4:	2301      	movne	r3, #1
 80023e6:	2300      	moveq	r3, #0
 80023e8:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		NRF24L01_Receive();
 80023ea:	f7fe fadf 	bl	80009ac <NRF24L01_Receive>
 80023ee:	e7fc      	b.n	80023ea <nrf_rx_mode+0x1a>

080023f0 <nrf_tx_mode>:
	}
}
// ----------------------------------------------------------------------------------------
void nrf_tx_mode(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0

	clearn_oled();
 80023f4:	f7fe fe1c 	bl	8001030 <clearn_oled>
	nrf_communication_test();     //nrf_tx_test();
 80023f8:	f7fe fd0e 	bl	8000e18 <nrf_communication_test>
}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}

08002400 <scroll_bar>:

/*
This function print scrollbar on right part of OLED.
 */
void scroll_bar(void)
{
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	b089      	sub	sp, #36	; 0x24
 8002404:	af02      	add	r7, sp, #8
	// Work size scrollbar
	uint16_t start_x_scrollbar = 124;
 8002406:	237c      	movs	r3, #124	; 0x7c
 8002408:	81fb      	strh	r3, [r7, #14]
	uint16_t start_y_scrollbar = 17;
 800240a:	2311      	movs	r3, #17
 800240c:	81bb      	strh	r3, [r7, #12]
	uint16_t active_width = 3;
 800240e:	2303      	movs	r3, #3
 8002410:	817b      	strh	r3, [r7, #10]
	uint16_t lenght_all_scrollbar = 48;
 8002412:	2330      	movs	r3, #48	; 0x30
 8002414:	813b      	strh	r3, [r7, #8]

	uint8_t menu_items_counter = 1;
 8002416:	2301      	movs	r3, #1
 8002418:	75fb      	strb	r3, [r7, #23]
	// 1. Скопіювати показник на меню в буффер.
	// 2. Піднятися до першого елемента меню.
	// 3. Опускатися вниз до останнього пункту меню і інкрементувати лічильник елементів меню.
	// 4. Використати лічильник пунктів меню для вираховування довжини полоси прокрутки і її координат.

	MenuItem_t * currentItem_buff = currentItem;
 800241a:	4b32      	ldr	r3, [pc, #200]	; (80024e4 <scroll_bar+0xe4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	613b      	str	r3, [r7, #16]

	if ((currentItem_buff -> up) != 0)							// Step up if existing up
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d006      	beq.n	8002436 <scroll_bar+0x36>
	{
		do{
			currentItem_buff = currentItem_buff -> up;			// Step up to the top of menu
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	613b      	str	r3, [r7, #16]
		}
		while ((currentItem_buff -> up) != 0);					// If the top of item doesen't found
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f8      	bne.n	8002428 <scroll_bar+0x28>
	}

	if ((currentItem_buff -> up) == 0)							// If found top of menu item
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <scroll_bar+0x52>
	{
		do{
			currentItem_buff = currentItem_buff -> down;
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	613b      	str	r3, [r7, #16]
			menu_items_counter++;								// Count how many list on menu
 8002444:	7dfb      	ldrb	r3, [r7, #23]
 8002446:	3301      	adds	r3, #1
 8002448:	75fb      	strb	r3, [r7, #23]
		}
		while ((currentItem_buff -> down) != 0);
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f5      	bne.n	800243e <scroll_bar+0x3e>
	}
	 // Очистити частину керану де є скролбар
	ssd1306FillRect(start_x_scrollbar, start_y_scrollbar, active_width, lenght_all_scrollbar - 2, Black);
 8002452:	89fb      	ldrh	r3, [r7, #14]
 8002454:	b2d8      	uxtb	r0, r3
 8002456:	89bb      	ldrh	r3, [r7, #12]
 8002458:	b2d9      	uxtb	r1, r3
 800245a:	897b      	ldrh	r3, [r7, #10]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	893b      	ldrh	r3, [r7, #8]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	3b02      	subs	r3, #2
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2400      	movs	r4, #0
 8002468:	9400      	str	r4, [sp, #0]
 800246a:	f7ff f882 	bl	8001572 <ssd1306FillRect>

	// Вивести подовгастий квадрат на край екрану
	ssd1306_DrawRectangle(start_x_scrollbar - 1, start_y_scrollbar - 1, start_x_scrollbar + active_width, 63, White);
 800246e:	89fb      	ldrh	r3, [r7, #14]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b2d8      	uxtb	r0, r3
 8002476:	89bb      	ldrh	r3, [r7, #12]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	3b01      	subs	r3, #1
 800247c:	b2d9      	uxtb	r1, r3
 800247e:	89fb      	ldrh	r3, [r7, #14]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	897b      	ldrh	r3, [r7, #10]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	4413      	add	r3, r2
 8002488:	b2da      	uxtb	r2, r3
 800248a:	2301      	movs	r3, #1
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	233f      	movs	r3, #63	; 0x3f
 8002490:	f7ff f838 	bl	8001504 <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 8002494:	f7fe fe7c 	bl	8001190 <ssd1306_UpdateScreen>

	 // Print scroling line
	int id_for_line = currentItem -> id;				// Скопіювати порядковий номер меню (Для того щоб взнати на якому пункті меню зараз стоїмо)
 8002498:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <scroll_bar+0xe4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	7c1b      	ldrb	r3, [r3, #16]
 800249e:	607b      	str	r3, [r7, #4]
	// Print scroling line
	uint16_t line_lenght = (lenght_all_scrollbar/menu_items_counter + 1);					   	// Довжина лінії яка відповідає одному меню
 80024a0:	893a      	ldrh	r2, [r7, #8]
 80024a2:	7dfb      	ldrb	r3, [r7, #23]
 80024a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	3301      	adds	r3, #1
 80024ac:	807b      	strh	r3, [r7, #2]
	uint16_t start_lenght = 16 + ((id_for_line - 1)*line_lenght);								// Початок лінії
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	887a      	ldrh	r2, [r7, #2]
 80024b6:	fb02 f303 	mul.w	r3, r2, r3
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3310      	adds	r3, #16
 80024be:	803b      	strh	r3, [r7, #0]
	// Print active scrollbar part (line)
	ssd1306FillRect(start_x_scrollbar, start_lenght, active_width, line_lenght, White);
 80024c0:	89fb      	ldrh	r3, [r7, #14]
 80024c2:	b2d8      	uxtb	r0, r3
 80024c4:	883b      	ldrh	r3, [r7, #0]
 80024c6:	b2d9      	uxtb	r1, r3
 80024c8:	897b      	ldrh	r3, [r7, #10]
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	887b      	ldrh	r3, [r7, #2]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2401      	movs	r4, #1
 80024d2:	9400      	str	r4, [sp, #0]
 80024d4:	f7ff f84d 	bl	8001572 <ssd1306FillRect>

	ssd1306_UpdateScreen();
 80024d8:	f7fe fe5a 	bl	8001190 <ssd1306_UpdateScreen>
}
 80024dc:	bf00      	nop
 80024de:	371c      	adds	r7, #28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd90      	pop	{r4, r7, pc}
 80024e4:	20000028 	.word	0x20000028

080024e8 <print_rectangle_on_head>:
// ----------------------------------------------------------------------------------------
void print_rectangle_on_head(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af02      	add	r7, sp, #8
	ssd1306_DrawRectangle(0, 0, 127 , 15, White);
 80024ee:	2301      	movs	r3, #1
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	230f      	movs	r3, #15
 80024f4:	227f      	movs	r2, #127	; 0x7f
 80024f6:	2100      	movs	r1, #0
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7ff f803 	bl	8001504 <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 80024fe:	f7fe fe47 	bl	8001190 <ssd1306_UpdateScreen>
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <clear_menu_items>:
// ----------------------------------------------------------------------------------------
// Clear some menu items.
void clear_menu_items (bool first, bool second, bool third, bool fourth)
{
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	4604      	mov	r4, r0
 8002510:	4608      	mov	r0, r1
 8002512:	4611      	mov	r1, r2
 8002514:	461a      	mov	r2, r3
 8002516:	4623      	mov	r3, r4
 8002518:	71fb      	strb	r3, [r7, #7]
 800251a:	4603      	mov	r3, r0
 800251c:	71bb      	strb	r3, [r7, #6]
 800251e:	460b      	mov	r3, r1
 8002520:	717b      	strb	r3, [r7, #5]
 8002522:	4613      	mov	r3, r2
 8002524:	713b      	strb	r3, [r7, #4]
	uint8_t start_row_x = 15;
 8002526:	230f      	movs	r3, #15
 8002528:	77fb      	strb	r3, [r7, #31]
	char str[16] = "               ";   // Must be 15
 800252a:	4b2a      	ldr	r3, [pc, #168]	; (80025d4 <clear_menu_items+0xcc>)
 800252c:	f107 040c 	add.w	r4, r7, #12
 8002530:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002532:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if(first == true)
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00e      	beq.n	800255a <clear_menu_items+0x52>
	{
		ssd1306_SetCursor(start_row_x, first_menu_row);
 800253c:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <clear_menu_items+0xd0>)
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	b2da      	uxtb	r2, r3
 8002542:	7ffb      	ldrb	r3, [r7, #31]
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f7fe ff58 	bl	80013fc <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 800254c:	4a23      	ldr	r2, [pc, #140]	; (80025dc <clear_menu_items+0xd4>)
 800254e:	f107 000c 	add.w	r0, r7, #12
 8002552:	2301      	movs	r3, #1
 8002554:	ca06      	ldmia	r2, {r1, r2}
 8002556:	f7fe ff2b 	bl	80013b0 <ssd1306_WriteString>
	}
	if(second == true)
 800255a:	79bb      	ldrb	r3, [r7, #6]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00e      	beq.n	800257e <clear_menu_items+0x76>
	{
		ssd1306_SetCursor(start_row_x, second_menu_row);
 8002560:	4b1f      	ldr	r3, [pc, #124]	; (80025e0 <clear_menu_items+0xd8>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	b2da      	uxtb	r2, r3
 8002566:	7ffb      	ldrb	r3, [r7, #31]
 8002568:	4611      	mov	r1, r2
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe ff46 	bl	80013fc <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8002570:	4a1a      	ldr	r2, [pc, #104]	; (80025dc <clear_menu_items+0xd4>)
 8002572:	f107 000c 	add.w	r0, r7, #12
 8002576:	2301      	movs	r3, #1
 8002578:	ca06      	ldmia	r2, {r1, r2}
 800257a:	f7fe ff19 	bl	80013b0 <ssd1306_WriteString>
	}
	if(first == true)
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00e      	beq.n	80025a2 <clear_menu_items+0x9a>
	{
		ssd1306_SetCursor(start_row_x, third_menu_row);
 8002584:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <clear_menu_items+0xdc>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	b2da      	uxtb	r2, r3
 800258a:	7ffb      	ldrb	r3, [r7, #31]
 800258c:	4611      	mov	r1, r2
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe ff34 	bl	80013fc <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8002594:	4a11      	ldr	r2, [pc, #68]	; (80025dc <clear_menu_items+0xd4>)
 8002596:	f107 000c 	add.w	r0, r7, #12
 800259a:	2301      	movs	r3, #1
 800259c:	ca06      	ldmia	r2, {r1, r2}
 800259e:	f7fe ff07 	bl	80013b0 <ssd1306_WriteString>
	}
	if(fourth == true)
 80025a2:	793b      	ldrb	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00e      	beq.n	80025c6 <clear_menu_items+0xbe>
	{
		ssd1306_SetCursor(start_row_x, fourth_menu_row);
 80025a8:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <clear_menu_items+0xe0>)
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	7ffb      	ldrb	r3, [r7, #31]
 80025b0:	4611      	mov	r1, r2
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe ff22 	bl	80013fc <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80025b8:	4a08      	ldr	r2, [pc, #32]	; (80025dc <clear_menu_items+0xd4>)
 80025ba:	f107 000c 	add.w	r0, r7, #12
 80025be:	2301      	movs	r3, #1
 80025c0:	ca06      	ldmia	r2, {r1, r2}
 80025c2:	f7fe fef5 	bl	80013b0 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 80025c6:	f7fe fde3 	bl	8001190 <ssd1306_UpdateScreen>
}
 80025ca:	bf00      	nop
 80025cc:	3724      	adds	r7, #36	; 0x24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd90      	pop	{r4, r7, pc}
 80025d2:	bf00      	nop
 80025d4:	0800701c 	.word	0x0800701c
 80025d8:	20000030 	.word	0x20000030
 80025dc:	20000014 	.word	0x20000014
 80025e0:	20000032 	.word	0x20000032
 80025e4:	20000034 	.word	0x20000034
 80025e8:	20000036 	.word	0x20000036

080025ec <print_rows_on_oled_if_up>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_up(void)				// print text menu items
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
	char str[16] = {0};
 80025f2:	2300      	movs	r3, #0
 80025f4:	603b      	str	r3, [r7, #0]
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]

	clear_menu_items (true , true , true , true );
 8002600:	2301      	movs	r3, #1
 8002602:	2201      	movs	r2, #1
 8002604:	2101      	movs	r1, #1
 8002606:	2001      	movs	r0, #1
 8002608:	f7ff ff7e 	bl	8002508 <clear_menu_items>

	print_rectangle_on_head();
 800260c:	f7ff ff6c 	bl	80024e8 <print_rectangle_on_head>

	// Print pointer on first item menu
	ssd1306_SetCursor(0, first_menu_row);
 8002610:	4b2c      	ldr	r3, [pc, #176]	; (80026c4 <print_rows_on_oled_if_up+0xd8>)
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	4619      	mov	r1, r3
 8002618:	2000      	movs	r0, #0
 800261a:	f7fe feef 	bl	80013fc <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 800261e:	4a2a      	ldr	r2, [pc, #168]	; (80026c8 <print_rows_on_oled_if_up+0xdc>)
 8002620:	2301      	movs	r3, #1
 8002622:	ca06      	ldmia	r2, {r1, r2}
 8002624:	4829      	ldr	r0, [pc, #164]	; (80026cc <print_rows_on_oled_if_up+0xe0>)
 8002626:	f7fe fec3 	bl	80013b0 <ssd1306_WriteString>

	MenuItem_t * currentItem_buff_up = currentItem;				// Create buffer on selected current item pointer.
 800262a:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <print_rows_on_oled_if_up+0xe4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	617b      	str	r3, [r7, #20]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8002630:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <print_rows_on_oled_if_up+0xd8>)
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	74fb      	strb	r3, [r7, #19]
 8002636:	e035      	b.n	80026a4 <print_rows_on_oled_if_up+0xb8>
	{
		// Print number of menu item
		itoa(currentItem_buff_up -> id, str, 10);
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	7c1b      	ldrb	r3, [r3, #16]
 800263c:	4618      	mov	r0, r3
 800263e:	463b      	mov	r3, r7
 8002640:	220a      	movs	r2, #10
 8002642:	4619      	mov	r1, r3
 8002644:	f003 ffc6 	bl	80065d4 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8002648:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <print_rows_on_oled_if_up+0xe8>)
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	7cfa      	ldrb	r2, [r7, #19]
 8002650:	4611      	mov	r1, r2
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fed2 	bl	80013fc <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8002658:	4a1b      	ldr	r2, [pc, #108]	; (80026c8 <print_rows_on_oled_if_up+0xdc>)
 800265a:	4638      	mov	r0, r7
 800265c:	2301      	movs	r3, #1
 800265e:	ca06      	ldmia	r2, {r1, r2}
 8002660:	f7fe fea6 	bl	80013b0 <ssd1306_WriteString>

		// Print name of menu item
		strncpy(str, currentItem_buff_up -> name, 15);
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	6959      	ldr	r1, [r3, #20]
 8002668:	463b      	mov	r3, r7
 800266a:	220f      	movs	r2, #15
 800266c:	4618      	mov	r0, r3
 800266e:	f004 f8b6 	bl	80067de <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 8002672:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <print_rows_on_oled_if_up+0xec>)
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	7cfa      	ldrb	r2, [r7, #19]
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f7fe febd 	bl	80013fc <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8002682:	4a11      	ldr	r2, [pc, #68]	; (80026c8 <print_rows_on_oled_if_up+0xdc>)
 8002684:	4638      	mov	r0, r7
 8002686:	2301      	movs	r3, #1
 8002688:	ca06      	ldmia	r2, {r1, r2}
 800268a:	f7fe fe91 	bl	80013b0 <ssd1306_WriteString>

		currentItem_buff_up = currentItem_buff_up -> down;		// Make a step down
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	617b      	str	r3, [r7, #20]

		// Print only existing items
		if(currentItem_buff_up == 0)							// If no next item
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00b      	beq.n	80026b2 <print_rows_on_oled_if_up+0xc6>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <print_rows_on_oled_if_up+0xf0>)
 800269c:	781a      	ldrb	r2, [r3, #0]
 800269e:	7cfb      	ldrb	r3, [r7, #19]
 80026a0:	4413      	add	r3, r2
 80026a2:	74fb      	strb	r3, [r7, #19]
 80026a4:	7cfb      	ldrb	r3, [r7, #19]
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <print_rows_on_oled_if_up+0xf4>)
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d9c3      	bls.n	8002638 <print_rows_on_oled_if_up+0x4c>
 80026b0:	e000      	b.n	80026b4 <print_rows_on_oled_if_up+0xc8>
		{
			break;
 80026b2:	bf00      	nop
		}
	}
	ssd1306_UpdateScreen();
 80026b4:	f7fe fd6c 	bl	8001190 <ssd1306_UpdateScreen>
	scroll_bar();
 80026b8:	f7ff fea2 	bl	8002400 <scroll_bar>
}
 80026bc:	bf00      	nop
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000030 	.word	0x20000030
 80026c8:	20000014 	.word	0x20000014
 80026cc:	2000002c 	.word	0x2000002c
 80026d0:	20000028 	.word	0x20000028
 80026d4:	2000003a 	.word	0x2000003a
 80026d8:	2000003c 	.word	0x2000003c
 80026dc:	20000038 	.word	0x20000038
 80026e0:	20000036 	.word	0x20000036

080026e4 <print_rows_on_oled_if_down>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_down(void)			// print text menu items
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
	char str[16] = {0};
 80026ea:	2300      	movs	r3, #0
 80026ec:	603b      	str	r3, [r7, #0]
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]

	clear_menu_items (true , true , true , true );
 80026f8:	2301      	movs	r3, #1
 80026fa:	2201      	movs	r2, #1
 80026fc:	2101      	movs	r1, #1
 80026fe:	2001      	movs	r0, #1
 8002700:	f7ff ff02 	bl	8002508 <clear_menu_items>

	print_rectangle_on_head();
 8002704:	f7ff fef0 	bl	80024e8 <print_rectangle_on_head>

	// Print pointer on first item menu
	ssd1306_SetCursor(0, first_menu_row);
 8002708:	4b2f      	ldr	r3, [pc, #188]	; (80027c8 <print_rows_on_oled_if_down+0xe4>)
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	4619      	mov	r1, r3
 8002710:	2000      	movs	r0, #0
 8002712:	f7fe fe73 	bl	80013fc <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8002716:	4a2d      	ldr	r2, [pc, #180]	; (80027cc <print_rows_on_oled_if_down+0xe8>)
 8002718:	2301      	movs	r3, #1
 800271a:	ca06      	ldmia	r2, {r1, r2}
 800271c:	482c      	ldr	r0, [pc, #176]	; (80027d0 <print_rows_on_oled_if_down+0xec>)
 800271e:	f7fe fe47 	bl	80013b0 <ssd1306_WriteString>

	MenuItem_t * currentItem_buff = currentItem;
 8002722:	4b2c      	ldr	r3, [pc, #176]	; (80027d4 <print_rows_on_oled_if_down+0xf0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	617b      	str	r3, [r7, #20]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8002728:	4b27      	ldr	r3, [pc, #156]	; (80027c8 <print_rows_on_oled_if_down+0xe4>)
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	74fb      	strb	r3, [r7, #19]
 800272e:	e03b      	b.n	80027a8 <print_rows_on_oled_if_down+0xc4>
	{
		// Print number of menu item
        itoa(currentItem_buff -> id, str, 10);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	7c1b      	ldrb	r3, [r3, #16]
 8002734:	4618      	mov	r0, r3
 8002736:	463b      	mov	r3, r7
 8002738:	220a      	movs	r2, #10
 800273a:	4619      	mov	r1, r3
 800273c:	f003 ff4a 	bl	80065d4 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8002740:	4b25      	ldr	r3, [pc, #148]	; (80027d8 <print_rows_on_oled_if_down+0xf4>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	7cfa      	ldrb	r2, [r7, #19]
 8002748:	4611      	mov	r1, r2
 800274a:	4618      	mov	r0, r3
 800274c:	f7fe fe56 	bl	80013fc <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8002750:	4a1e      	ldr	r2, [pc, #120]	; (80027cc <print_rows_on_oled_if_down+0xe8>)
 8002752:	4638      	mov	r0, r7
 8002754:	2301      	movs	r3, #1
 8002756:	ca06      	ldmia	r2, {r1, r2}
 8002758:	f7fe fe2a 	bl	80013b0 <ssd1306_WriteString>

		// Print name of menu item
		memset(str, 0, sizeof(str));
 800275c:	463b      	mov	r3, r7
 800275e:	2210      	movs	r2, #16
 8002760:	2100      	movs	r1, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f003 ff46 	bl	80065f4 <memset>
	    strncpy(str, currentItem_buff -> name, 15);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	6959      	ldr	r1, [r3, #20]
 800276c:	463b      	mov	r3, r7
 800276e:	220f      	movs	r2, #15
 8002770:	4618      	mov	r0, r3
 8002772:	f004 f834 	bl	80067de <strncpy>
	    ssd1306_SetCursor(start_print_name_menu_x, row);
 8002776:	4b19      	ldr	r3, [pc, #100]	; (80027dc <print_rows_on_oled_if_down+0xf8>)
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	7cfa      	ldrb	r2, [r7, #19]
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe fe3b 	bl	80013fc <ssd1306_SetCursor>
	    ssd1306_WriteString(str,  Font_7x10, White);
 8002786:	4a11      	ldr	r2, [pc, #68]	; (80027cc <print_rows_on_oled_if_down+0xe8>)
 8002788:	4638      	mov	r0, r7
 800278a:	2301      	movs	r3, #1
 800278c:	ca06      	ldmia	r2, {r1, r2}
 800278e:	f7fe fe0f 	bl	80013b0 <ssd1306_WriteString>

	    currentItem_buff = currentItem_buff -> down;			// Make a step down
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	617b      	str	r3, [r7, #20]

	    // Print only existing items
	    if(currentItem_buff == 0)		 						// If no next item
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <print_rows_on_oled_if_down+0xd2>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 800279e:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <print_rows_on_oled_if_down+0xfc>)
 80027a0:	781a      	ldrb	r2, [r3, #0]
 80027a2:	7cfb      	ldrb	r3, [r7, #19]
 80027a4:	4413      	add	r3, r2
 80027a6:	74fb      	strb	r3, [r7, #19]
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	4b0d      	ldr	r3, [pc, #52]	; (80027e4 <print_rows_on_oled_if_down+0x100>)
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d9bd      	bls.n	8002730 <print_rows_on_oled_if_down+0x4c>
 80027b4:	e000      	b.n	80027b8 <print_rows_on_oled_if_down+0xd4>
	    {
	    	break;
 80027b6:	bf00      	nop
	    }
	 }
	 ssd1306_UpdateScreen();
 80027b8:	f7fe fcea 	bl	8001190 <ssd1306_UpdateScreen>
	 scroll_bar();
 80027bc:	f7ff fe20 	bl	8002400 <scroll_bar>
}
 80027c0:	bf00      	nop
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000030 	.word	0x20000030
 80027cc:	20000014 	.word	0x20000014
 80027d0:	2000002c 	.word	0x2000002c
 80027d4:	20000028 	.word	0x20000028
 80027d8:	2000003a 	.word	0x2000003a
 80027dc:	2000003c 	.word	0x2000003c
 80027e0:	20000038 	.word	0x20000038
 80027e4:	20000036 	.word	0x20000036

080027e8 <print_menu_init>:
// ----------------------------------------------------------------------------------------
// Print first 4 items of menu (only first time)
void print_menu_init(void)
{
 80027e8:	b590      	push	{r4, r7, lr}
 80027ea:	b089      	sub	sp, #36	; 0x24
 80027ec:	af00      	add	r7, sp, #0
	MenuItem_t * currentItem_buff = currentItem;
 80027ee:	4b41      	ldr	r3, [pc, #260]	; (80028f4 <print_menu_init+0x10c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	61fb      	str	r3, [r7, #28]

	print_rectangle_on_head();
 80027f4:	f7ff fe78 	bl	80024e8 <print_rectangle_on_head>

	//Print selected name of menu
	char str[20] = ">> MAIN MENU <<";
 80027f8:	4b3f      	ldr	r3, [pc, #252]	; (80028f8 <print_menu_init+0x110>)
 80027fa:	1d3c      	adds	r4, r7, #4
 80027fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(10, 3);
 8002806:	2103      	movs	r1, #3
 8002808:	200a      	movs	r0, #10
 800280a:	f7fe fdf7 	bl	80013fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800280e:	4a3b      	ldr	r2, [pc, #236]	; (80028fc <print_menu_init+0x114>)
 8002810:	1d38      	adds	r0, r7, #4
 8002812:	2301      	movs	r3, #1
 8002814:	ca06      	ldmia	r2, {r1, r2}
 8002816:	f7fe fdcb 	bl	80013b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800281a:	f7fe fcb9 	bl	8001190 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 800281e:	1d3b      	adds	r3, r7, #4
 8002820:	2214      	movs	r2, #20
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f003 fee5 	bl	80065f4 <memset>

	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 800282a:	4b35      	ldr	r3, [pc, #212]	; (8002900 <print_menu_init+0x118>)
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	76fb      	strb	r3, [r7, #27]
 8002830:	e051      	b.n	80028d6 <print_menu_init+0xee>
	{
		if(row == first_menu_row)
 8002832:	7efb      	ldrb	r3, [r7, #27]
 8002834:	b29a      	uxth	r2, r3
 8002836:	4b32      	ldr	r3, [pc, #200]	; (8002900 <print_menu_init+0x118>)
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d10d      	bne.n	800285a <print_menu_init+0x72>
		{
			// Print pointer on menu (On top)
			char str_pointer[4] = "->";
 800283e:	f643 632d 	movw	r3, #15917	; 0x3e2d
 8002842:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 8002844:	7efb      	ldrb	r3, [r7, #27]
 8002846:	4619      	mov	r1, r3
 8002848:	2000      	movs	r0, #0
 800284a:	f7fe fdd7 	bl	80013fc <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 800284e:	4a2b      	ldr	r2, [pc, #172]	; (80028fc <print_menu_init+0x114>)
 8002850:	4638      	mov	r0, r7
 8002852:	2301      	movs	r3, #1
 8002854:	ca06      	ldmia	r2, {r1, r2}
 8002856:	f7fe fdab 	bl	80013b0 <ssd1306_WriteString>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	7c1b      	ldrb	r3, [r3, #16]
 800285e:	4618      	mov	r0, r3
 8002860:	1d3b      	adds	r3, r7, #4
 8002862:	220a      	movs	r2, #10
 8002864:	4619      	mov	r1, r3
 8002866:	f003 feb5 	bl	80065d4 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 800286a:	4b26      	ldr	r3, [pc, #152]	; (8002904 <print_menu_init+0x11c>)
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	b2db      	uxtb	r3, r3
 8002870:	7efa      	ldrb	r2, [r7, #27]
 8002872:	4611      	mov	r1, r2
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe fdc1 	bl	80013fc <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 800287a:	4a20      	ldr	r2, [pc, #128]	; (80028fc <print_menu_init+0x114>)
 800287c:	1d38      	adds	r0, r7, #4
 800287e:	2301      	movs	r3, #1
 8002880:	ca06      	ldmia	r2, {r1, r2}
 8002882:	f7fe fd95 	bl	80013b0 <ssd1306_WriteString>
		memset(str, 0, sizeof(str));
 8002886:	1d3b      	adds	r3, r7, #4
 8002888:	2214      	movs	r2, #20
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f003 feb1 	bl	80065f4 <memset>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 15);
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	6959      	ldr	r1, [r3, #20]
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	220f      	movs	r2, #15
 800289a:	4618      	mov	r0, r3
 800289c:	f003 ff9f 	bl	80067de <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 80028a0:	4b19      	ldr	r3, [pc, #100]	; (8002908 <print_menu_init+0x120>)
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	7efa      	ldrb	r2, [r7, #27]
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe fda6 	bl	80013fc <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80028b0:	4a12      	ldr	r2, [pc, #72]	; (80028fc <print_menu_init+0x114>)
 80028b2:	1d38      	adds	r0, r7, #4
 80028b4:	2301      	movs	r3, #1
 80028b6:	ca06      	ldmia	r2, {r1, r2}
 80028b8:	f7fe fd7a 	bl	80013b0 <ssd1306_WriteString>

		ssd1306_UpdateScreen();
 80028bc:	f7fe fc68 	bl	8001190 <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	61fb      	str	r3, [r7, #28]
		if(currentItem_buff == 0)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00b      	beq.n	80028e4 <print_menu_init+0xfc>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 80028cc:	4b0f      	ldr	r3, [pc, #60]	; (800290c <print_menu_init+0x124>)
 80028ce:	781a      	ldrb	r2, [r3, #0]
 80028d0:	7efb      	ldrb	r3, [r7, #27]
 80028d2:	4413      	add	r3, r2
 80028d4:	76fb      	strb	r3, [r7, #27]
 80028d6:	7efb      	ldrb	r3, [r7, #27]
 80028d8:	b29a      	uxth	r2, r3
 80028da:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <print_menu_init+0x128>)
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d9a7      	bls.n	8002832 <print_menu_init+0x4a>
 80028e2:	e000      	b.n	80028e6 <print_menu_init+0xfe>
		{
			break;
 80028e4:	bf00      	nop
		}
	}
	scroll_bar();
 80028e6:	f7ff fd8b 	bl	8002400 <scroll_bar>
}
 80028ea:	bf00      	nop
 80028ec:	3724      	adds	r7, #36	; 0x24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd90      	pop	{r4, r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000028 	.word	0x20000028
 80028f8:	0800702c 	.word	0x0800702c
 80028fc:	20000014 	.word	0x20000014
 8002900:	20000030 	.word	0x20000030
 8002904:	2000003a 	.word	0x2000003a
 8002908:	2000003c 	.word	0x2000003c
 800290c:	20000038 	.word	0x20000038
 8002910:	20000036 	.word	0x20000036

08002914 <action>:
// ----------------------------------------------------------------------------------------
void action(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
	char str[16] = {0};
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	f107 0308 	add.w	r3, r7, #8
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]

	clearn_oled();
 800292a:	f7fe fb81 	bl	8001030 <clearn_oled>

	print_rectangle_on_head();
 800292e:	f7ff fddb 	bl	80024e8 <print_rectangle_on_head>

	//Print selected name of menu on top of OLED (in rectangle)
	MenuItem_t * currentItem_buff_parent = currentItem;
 8002932:	4b40      	ldr	r3, [pc, #256]	; (8002a34 <action+0x120>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	617b      	str	r3, [r7, #20]
	currentItem_buff_parent = currentItem_buff_parent -> parent;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	617b      	str	r3, [r7, #20]

	strncpy(str, currentItem_buff_parent -> name, 15);
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	6959      	ldr	r1, [r3, #20]
 8002942:	1d3b      	adds	r3, r7, #4
 8002944:	220f      	movs	r2, #15
 8002946:	4618      	mov	r0, r3
 8002948:	f003 ff49 	bl	80067de <strncpy>
	ssd1306_SetCursor(10, 3);
 800294c:	2103      	movs	r1, #3
 800294e:	200a      	movs	r0, #10
 8002950:	f7fe fd54 	bl	80013fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002954:	4a38      	ldr	r2, [pc, #224]	; (8002a38 <action+0x124>)
 8002956:	1d38      	adds	r0, r7, #4
 8002958:	2301      	movs	r3, #1
 800295a:	ca06      	ldmia	r2, {r1, r2}
 800295c:	f7fe fd28 	bl	80013b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002960:	f7fe fc16 	bl	8001190 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002964:	1d3b      	adds	r3, r7, #4
 8002966:	2210      	movs	r2, #16
 8002968:	2100      	movs	r1, #0
 800296a:	4618      	mov	r0, r3
 800296c:	f003 fe42 	bl	80065f4 <memset>

	MenuItem_t * currentItem_buff = currentItem;
 8002970:	4b30      	ldr	r3, [pc, #192]	; (8002a34 <action+0x120>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	61fb      	str	r3, [r7, #28]

	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8002976:	4b31      	ldr	r3, [pc, #196]	; (8002a3c <action+0x128>)
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	76fb      	strb	r3, [r7, #27]
 800297c:	e04b      	b.n	8002a16 <action+0x102>
	{
		if(row == first_menu_row)
 800297e:	7efb      	ldrb	r3, [r7, #27]
 8002980:	b29a      	uxth	r2, r3
 8002982:	4b2e      	ldr	r3, [pc, #184]	; (8002a3c <action+0x128>)
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d10d      	bne.n	80029a6 <action+0x92>
		{
			// Print pointer on menu
			char str_pointer[4] = "->";
 800298a:	f643 632d 	movw	r3, #15917	; 0x3e2d
 800298e:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 8002990:	7efb      	ldrb	r3, [r7, #27]
 8002992:	4619      	mov	r1, r3
 8002994:	2000      	movs	r0, #0
 8002996:	f7fe fd31 	bl	80013fc <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 800299a:	4a27      	ldr	r2, [pc, #156]	; (8002a38 <action+0x124>)
 800299c:	4638      	mov	r0, r7
 800299e:	2301      	movs	r3, #1
 80029a0:	ca06      	ldmia	r2, {r1, r2}
 80029a2:	f7fe fd05 	bl	80013b0 <ssd1306_WriteString>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	7c1b      	ldrb	r3, [r3, #16]
 80029aa:	4618      	mov	r0, r3
 80029ac:	1d3b      	adds	r3, r7, #4
 80029ae:	220a      	movs	r2, #10
 80029b0:	4619      	mov	r1, r3
 80029b2:	f003 fe0f 	bl	80065d4 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 80029b6:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <action+0x12c>)
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	7efa      	ldrb	r2, [r7, #27]
 80029be:	4611      	mov	r1, r2
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fe fd1b 	bl	80013fc <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80029c6:	4a1c      	ldr	r2, [pc, #112]	; (8002a38 <action+0x124>)
 80029c8:	1d38      	adds	r0, r7, #4
 80029ca:	2301      	movs	r3, #1
 80029cc:	ca06      	ldmia	r2, {r1, r2}
 80029ce:	f7fe fcef 	bl	80013b0 <ssd1306_WriteString>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 15);
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	6959      	ldr	r1, [r3, #20]
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	220f      	movs	r2, #15
 80029da:	4618      	mov	r0, r3
 80029dc:	f003 feff 	bl	80067de <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 80029e0:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <action+0x130>)
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	7efa      	ldrb	r2, [r7, #27]
 80029e8:	4611      	mov	r1, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe fd06 	bl	80013fc <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80029f0:	4a11      	ldr	r2, [pc, #68]	; (8002a38 <action+0x124>)
 80029f2:	1d38      	adds	r0, r7, #4
 80029f4:	2301      	movs	r3, #1
 80029f6:	ca06      	ldmia	r2, {r1, r2}
 80029f8:	f7fe fcda 	bl	80013b0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80029fc:	f7fe fbc8 	bl	8001190 <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	61fb      	str	r3, [r7, #28]
		if(currentItem_buff == 0)
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00b      	beq.n	8002a24 <action+0x110>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <action+0x134>)
 8002a0e:	781a      	ldrb	r2, [r3, #0]
 8002a10:	7efb      	ldrb	r3, [r7, #27]
 8002a12:	4413      	add	r3, r2
 8002a14:	76fb      	strb	r3, [r7, #27]
 8002a16:	7efb      	ldrb	r3, [r7, #27]
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <action+0x138>)
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d9ad      	bls.n	800297e <action+0x6a>
 8002a22:	e000      	b.n	8002a26 <action+0x112>
		{
			break;
 8002a24:	bf00      	nop
		}
	}
	scroll_bar();
 8002a26:	f7ff fceb 	bl	8002400 <scroll_bar>
}
 8002a2a:	bf00      	nop
 8002a2c:	3720      	adds	r7, #32
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000028 	.word	0x20000028
 8002a38:	20000014 	.word	0x20000014
 8002a3c:	20000030 	.word	0x20000030
 8002a40:	2000003a 	.word	0x2000003a
 8002a44:	2000003c 	.word	0x2000003c
 8002a48:	20000038 	.word	0x20000038
 8002a4c:	20000036 	.word	0x20000036

08002a50 <return_from_menu>:
// ----------------------------------------------------------------------------------------
void return_from_menu(void)
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
	currentItem = &items[0];											// Jump to main menu
 8002a56:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <return_from_menu+0x44>)
 8002a58:	4a0f      	ldr	r2, [pc, #60]	; (8002a98 <return_from_menu+0x48>)
 8002a5a:	601a      	str	r2, [r3, #0]
	clearn_oled();
 8002a5c:	f7fe fae8 	bl	8001030 <clearn_oled>

	// Print "MAIN MENU:"
	char str[20] = ">> MAIN MENU <<";
 8002a60:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <return_from_menu+0x4c>)
 8002a62:	1d3c      	adds	r4, r7, #4
 8002a64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(10, 3);
 8002a6e:	2103      	movs	r1, #3
 8002a70:	200a      	movs	r0, #10
 8002a72:	f7fe fcc3 	bl	80013fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002a76:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <return_from_menu+0x50>)
 8002a78:	1d38      	adds	r0, r7, #4
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	ca06      	ldmia	r2, {r1, r2}
 8002a7e:	f7fe fc97 	bl	80013b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002a82:	f7fe fb85 	bl	8001190 <ssd1306_UpdateScreen>

	print_menu_init();													// Print all start menu
 8002a86:	f7ff feaf 	bl	80027e8 <print_menu_init>
}
 8002a8a:	bf00      	nop
 8002a8c:	371c      	adds	r7, #28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd90      	pop	{r4, r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000028 	.word	0x20000028
 8002a98:	20000848 	.word	0x20000848
 8002a9c:	0800702c 	.word	0x0800702c
 8002aa0:	20000014 	.word	0x20000014

08002aa4 <lora_rx_mode>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// LORA FUNCTIONS
void lora_rx_mode(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
	clearn_oled();
 8002aaa:	f7fe fac1 	bl	8001030 <clearn_oled>
	print_rectangle_on_head();
 8002aae:	f7ff fd1b 	bl	80024e8 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002ac0:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <lora_rx_mode+0x88>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6959      	ldr	r1, [r3, #20]
 8002ac6:	463b      	mov	r3, r7
 8002ac8:	220f      	movs	r2, #15
 8002aca:	4618      	mov	r0, r3
 8002acc:	f003 fe87 	bl	80067de <strncpy>
	ssd1306_SetCursor(10, 3);
 8002ad0:	2103      	movs	r1, #3
 8002ad2:	200a      	movs	r0, #10
 8002ad4:	f7fe fc92 	bl	80013fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002ad8:	4a15      	ldr	r2, [pc, #84]	; (8002b30 <lora_rx_mode+0x8c>)
 8002ada:	4638      	mov	r0, r7
 8002adc:	2301      	movs	r3, #1
 8002ade:	ca06      	ldmia	r2, {r1, r2}
 8002ae0:	f7fe fc66 	bl	80013b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002ae4:	f7fe fb54 	bl	8001190 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002ae8:	463b      	mov	r3, r7
 8002aea:	2210      	movs	r2, #16
 8002aec:	2100      	movs	r1, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f003 fd80 	bl	80065f4 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8002af4:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <lora_rx_mode+0x90>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8002afa:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <lora_rx_mode+0x94>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		LoRa_RX(true);
 8002b00:	2001      	movs	r0, #1
 8002b02:	f7fd fb23 	bl	800014c <LoRa_RX>
	}while (button_status != BUTTON_ENTER);
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <lora_rx_mode+0x90>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d1f8      	bne.n	8002b00 <lora_rx_mode+0x5c>
	LoRa_RX(false);
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f7fd fb1c 	bl	800014c <LoRa_RX>

	block_interrupt_form_up_and_down_buttons = false;
 8002b14:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <lora_rx_mode+0x94>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8002b1a:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <lora_rx_mode+0x88>)
 8002b1c:	4a07      	ldr	r2, [pc, #28]	; (8002b3c <lora_rx_mode+0x98>)
 8002b1e:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8002b20:	f7ff fef8 	bl	8002914 <action>
}
 8002b24:	bf00      	nop
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000028 	.word	0x20000028
 8002b30:	20000014 	.word	0x20000014
 8002b34:	200005a1 	.word	0x200005a1
 8002b38:	200005a0 	.word	0x200005a0
 8002b3c:	20000794 	.word	0x20000794

08002b40 <lora_tx_mode>:
// ----------------------------------------------------------------------------------------
void lora_tx_mode(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
	clearn_oled();
 8002b46:	f7fe fa73 	bl	8001030 <clearn_oled>
	print_rectangle_on_head();
 8002b4a:	f7ff fccd 	bl	80024e8 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8002b4e:	2300      	movs	r3, #0
 8002b50:	603b      	str	r3, [r7, #0]
 8002b52:	1d3b      	adds	r3, r7, #4
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002b5c:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <lora_tx_mode+0x88>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6959      	ldr	r1, [r3, #20]
 8002b62:	463b      	mov	r3, r7
 8002b64:	220f      	movs	r2, #15
 8002b66:	4618      	mov	r0, r3
 8002b68:	f003 fe39 	bl	80067de <strncpy>
	ssd1306_SetCursor(10, 3);
 8002b6c:	2103      	movs	r1, #3
 8002b6e:	200a      	movs	r0, #10
 8002b70:	f7fe fc44 	bl	80013fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002b74:	4a15      	ldr	r2, [pc, #84]	; (8002bcc <lora_tx_mode+0x8c>)
 8002b76:	4638      	mov	r0, r7
 8002b78:	2301      	movs	r3, #1
 8002b7a:	ca06      	ldmia	r2, {r1, r2}
 8002b7c:	f7fe fc18 	bl	80013b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002b80:	f7fe fb06 	bl	8001190 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002b84:	463b      	mov	r3, r7
 8002b86:	2210      	movs	r2, #16
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f003 fd32 	bl	80065f4 <memset>


	button_status = BOTTON_DOESENT_PRESS;
 8002b90:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <lora_tx_mode+0x90>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8002b96:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <lora_tx_mode+0x94>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		LoRa_TX(true);
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	f7fd fb69 	bl	8000274 <LoRa_TX>

	}while (button_status != BUTTON_ENTER);
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <lora_tx_mode+0x90>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d1f8      	bne.n	8002b9c <lora_tx_mode+0x5c>
	LoRa_TX(false);
 8002baa:	2000      	movs	r0, #0
 8002bac:	f7fd fb62 	bl	8000274 <LoRa_TX>

	block_interrupt_form_up_and_down_buttons = false;
 8002bb0:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <lora_tx_mode+0x94>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8002bb6:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <lora_tx_mode+0x88>)
 8002bb8:	4a07      	ldr	r2, [pc, #28]	; (8002bd8 <lora_tx_mode+0x98>)
 8002bba:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8002bbc:	f7ff feaa 	bl	8002914 <action>
}
 8002bc0:	bf00      	nop
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000028 	.word	0x20000028
 8002bcc:	20000014 	.word	0x20000014
 8002bd0:	200005a1 	.word	0x200005a1
 8002bd4:	200005a0 	.word	0x200005a0
 8002bd8:	20000794 	.word	0x20000794

08002bdc <items_menu_1_set_par_2>:
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
	action();															// Print items on OLED
}
// ----------------------------------------------------------------------------------------
void items_menu_1_set_par_2(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
	clearn_oled();
 8002be2:	f7fe fa25 	bl	8001030 <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8002be6:	2300      	movs	r3, #0
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002bf4:	4b22      	ldr	r3, [pc, #136]	; (8002c80 <items_menu_1_set_par_2+0xa4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6959      	ldr	r1, [r3, #20]
 8002bfa:	463b      	mov	r3, r7
 8002bfc:	220f      	movs	r2, #15
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f003 fded 	bl	80067de <strncpy>
	ssd1306_SetCursor(10, 3);
 8002c04:	2103      	movs	r1, #3
 8002c06:	200a      	movs	r0, #10
 8002c08:	f7fe fbf8 	bl	80013fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002c0c:	4a1d      	ldr	r2, [pc, #116]	; (8002c84 <items_menu_1_set_par_2+0xa8>)
 8002c0e:	4638      	mov	r0, r7
 8002c10:	2301      	movs	r3, #1
 8002c12:	ca06      	ldmia	r2, {r1, r2}
 8002c14:	f7fe fbcc 	bl	80013b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002c18:	f7fe faba 	bl	8001190 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002c1c:	463b      	mov	r3, r7
 8002c1e:	2210      	movs	r2, #16
 8002c20:	2100      	movs	r1, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	f003 fce6 	bl	80065f4 <memset>

	strncpy(str, "Set parametr 2", sizeof(str));
 8002c28:	463b      	mov	r3, r7
 8002c2a:	2210      	movs	r2, #16
 8002c2c:	4916      	ldr	r1, [pc, #88]	; (8002c88 <items_menu_1_set_par_2+0xac>)
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f003 fdd5 	bl	80067de <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8002c34:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <items_menu_1_set_par_2+0xb0>)
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f7fe fbdd 	bl	80013fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002c42:	4a10      	ldr	r2, [pc, #64]	; (8002c84 <items_menu_1_set_par_2+0xa8>)
 8002c44:	4638      	mov	r0, r7
 8002c46:	2301      	movs	r3, #1
 8002c48:	ca06      	ldmia	r2, {r1, r2}
 8002c4a:	f7fe fbb1 	bl	80013b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002c4e:	f7fe fa9f 	bl	8001190 <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8002c52:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <items_menu_1_set_par_2+0xb4>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8002c58:	4b0e      	ldr	r3, [pc, #56]	; (8002c94 <items_menu_1_set_par_2+0xb8>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 8002c5e:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <items_menu_1_set_par_2+0xb4>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d1fb      	bne.n	8002c5e <items_menu_1_set_par_2+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8002c66:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <items_menu_1_set_par_2+0xb8>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8002c6c:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <items_menu_1_set_par_2+0xa4>)
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <items_menu_1_set_par_2+0xbc>)
 8002c70:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8002c72:	f7ff fe4f 	bl	8002914 <action>
}
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000028 	.word	0x20000028
 8002c84:	20000014 	.word	0x20000014
 8002c88:	08007050 	.word	0x08007050
 8002c8c:	20000030 	.word	0x20000030
 8002c90:	200005a1 	.word	0x200005a1
 8002c94:	200005a0 	.word	0x200005a0
 8002c98:	20000794 	.word	0x20000794

08002c9c <items_menu_2_set_par_1>:
//	currentItem = &items_menu_2[0];										// Set global pointer on first menu
//	action();															// Print items on OLED
//}
// ----------------------------------------------------------------------------------------
void items_menu_2_set_par_1(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
	clearn_oled();
 8002ca2:	f7fe f9c5 	bl	8001030 <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002cb4:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <items_menu_2_set_par_1+0xa4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6959      	ldr	r1, [r3, #20]
 8002cba:	463b      	mov	r3, r7
 8002cbc:	220f      	movs	r2, #15
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f003 fd8d 	bl	80067de <strncpy>
	ssd1306_SetCursor(10, 3);
 8002cc4:	2103      	movs	r1, #3
 8002cc6:	200a      	movs	r0, #10
 8002cc8:	f7fe fb98 	bl	80013fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002ccc:	4a1d      	ldr	r2, [pc, #116]	; (8002d44 <items_menu_2_set_par_1+0xa8>)
 8002cce:	4638      	mov	r0, r7
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	ca06      	ldmia	r2, {r1, r2}
 8002cd4:	f7fe fb6c 	bl	80013b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002cd8:	f7fe fa5a 	bl	8001190 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002cdc:	463b      	mov	r3, r7
 8002cde:	2210      	movs	r2, #16
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f003 fc86 	bl	80065f4 <memset>

	strncpy(str, "Set parametr 1", sizeof(str));
 8002ce8:	463b      	mov	r3, r7
 8002cea:	2210      	movs	r2, #16
 8002cec:	4916      	ldr	r1, [pc, #88]	; (8002d48 <items_menu_2_set_par_1+0xac>)
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f003 fd75 	bl	80067de <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8002cf4:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <items_menu_2_set_par_1+0xb0>)
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f7fe fb7d 	bl	80013fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002d02:	4a10      	ldr	r2, [pc, #64]	; (8002d44 <items_menu_2_set_par_1+0xa8>)
 8002d04:	4638      	mov	r0, r7
 8002d06:	2301      	movs	r3, #1
 8002d08:	ca06      	ldmia	r2, {r1, r2}
 8002d0a:	f7fe fb51 	bl	80013b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002d0e:	f7fe fa3f 	bl	8001190 <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8002d12:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <items_menu_2_set_par_1+0xb4>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8002d18:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <items_menu_2_set_par_1+0xb8>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <items_menu_2_set_par_1+0xb4>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d1fb      	bne.n	8002d1e <items_menu_2_set_par_1+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <items_menu_2_set_par_1+0xb8>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_2[0];										// Set global pointer on first menu
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <items_menu_2_set_par_1+0xa4>)
 8002d2e:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <items_menu_2_set_par_1+0xbc>)
 8002d30:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8002d32:	f7ff fdef 	bl	8002914 <action>
}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000028 	.word	0x20000028
 8002d44:	20000014 	.word	0x20000014
 8002d48:	08007040 	.word	0x08007040
 8002d4c:	20000030 	.word	0x20000030
 8002d50:	200005a1 	.word	0x200005a1
 8002d54:	200005a0 	.word	0x200005a0
 8002d58:	20000728 	.word	0x20000728

08002d5c <do_it_function_menu_3>:
// ----------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
void do_it_function_menu_3(void)        // Print T and H
{
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
	clearn_oled();
 8002d62:	f7fe f965 	bl	8001030 <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8002d66:	2300      	movs	r3, #0
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	1d3b      	adds	r3, r7, #4
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8002d74:	4b2b      	ldr	r3, [pc, #172]	; (8002e24 <do_it_function_menu_3+0xc8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6959      	ldr	r1, [r3, #20]
 8002d7a:	463b      	mov	r3, r7
 8002d7c:	220f      	movs	r2, #15
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f003 fd2d 	bl	80067de <strncpy>
	ssd1306_SetCursor(10, 3);
 8002d84:	2103      	movs	r1, #3
 8002d86:	200a      	movs	r0, #10
 8002d88:	f7fe fb38 	bl	80013fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002d8c:	4a26      	ldr	r2, [pc, #152]	; (8002e28 <do_it_function_menu_3+0xcc>)
 8002d8e:	4638      	mov	r0, r7
 8002d90:	2301      	movs	r3, #1
 8002d92:	ca06      	ldmia	r2, {r1, r2}
 8002d94:	f7fe fb0c 	bl	80013b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002d98:	f7fe f9fa 	bl	8001190 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8002d9c:	463b      	mov	r3, r7
 8002d9e:	2210      	movs	r2, #16
 8002da0:	2100      	movs	r1, #0
 8002da2:	4618      	mov	r0, r3
 8002da4:	f003 fc26 	bl	80065f4 <memset>

	strncpy(str, "Doing something 3", sizeof(str));
 8002da8:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <do_it_function_menu_3+0xd0>)
 8002daa:	463c      	mov	r4, r7
 8002dac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_SetCursor(0, first_menu_row);
 8002db2:	4b1f      	ldr	r3, [pc, #124]	; (8002e30 <do_it_function_menu_3+0xd4>)
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	4619      	mov	r1, r3
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f7fe fb1e 	bl	80013fc <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8002dc0:	4a19      	ldr	r2, [pc, #100]	; (8002e28 <do_it_function_menu_3+0xcc>)
 8002dc2:	4638      	mov	r0, r7
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	ca06      	ldmia	r2, {r1, r2}
 8002dc8:	f7fe faf2 	bl	80013b0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002dcc:	f7fe f9e0 	bl	8001190 <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8002dd0:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <do_it_function_menu_3+0xd8>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8002dd6:	4b18      	ldr	r3, [pc, #96]	; (8002e38 <do_it_function_menu_3+0xdc>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	701a      	strb	r2, [r3, #0]
	do{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002de2:	4816      	ldr	r0, [pc, #88]	; (8002e3c <do_it_function_menu_3+0xe0>)
 8002de4:	f000 fcb9 	bl	800375a <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8002de8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002dec:	f000 f938 	bl	8003060 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002df0:	2201      	movs	r2, #1
 8002df2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002df6:	4811      	ldr	r0, [pc, #68]	; (8002e3c <do_it_function_menu_3+0xe0>)
 8002df8:	f000 fcaf 	bl	800375a <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8002dfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e00:	f000 f92e 	bl	8003060 <HAL_Delay>

	}while (button_status != BUTTON_ENTER);
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <do_it_function_menu_3+0xd8>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d1e7      	bne.n	8002ddc <do_it_function_menu_3+0x80>
	block_interrupt_form_up_and_down_buttons = false;
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <do_it_function_menu_3+0xdc>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_3[0];										// Set global pointer on first menu
 8002e12:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <do_it_function_menu_3+0xc8>)
 8002e14:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <do_it_function_menu_3+0xe4>)
 8002e16:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8002e18:	f7ff fd7c 	bl	8002914 <action>
}
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd90      	pop	{r4, r7, pc}
 8002e24:	20000028 	.word	0x20000028
 8002e28:	20000014 	.word	0x20000014
 8002e2c:	08007060 	.word	0x08007060
 8002e30:	20000030 	.word	0x20000030
 8002e34:	200005a1 	.word	0x200005a1
 8002e38:	200005a0 	.word	0x200005a0
 8002e3c:	40011000 	.word	0x40011000
 8002e40:	20000800 	.word	0x20000800

08002e44 <up>:
//// ----------------------------------------------------------------------------------------
void up(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
	if (currentItem->up)
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <up+0x30>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00d      	beq.n	8002e6e <up+0x2a>
	{
	    currentItem = currentItem->up;
 8002e52:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <up+0x30>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a06      	ldr	r2, [pc, #24]	; (8002e74 <up+0x30>)
 8002e5a:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_up )
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <up+0x30>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <up+0x2a>
	    {
	        currentItem->updateScreen_up();
 8002e66:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <up+0x30>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	4798      	blx	r3
	    }
	}
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000028 	.word	0x20000028

08002e78 <down>:
// ----------------------------------------------------------------------------------------
void down(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
	if (currentItem->down)
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <down+0x30>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00d      	beq.n	8002ea2 <down+0x2a>
	{
	    currentItem = currentItem->down;
 8002e86:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <down+0x30>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	4a06      	ldr	r2, [pc, #24]	; (8002ea8 <down+0x30>)
 8002e8e:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_down )
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <down+0x30>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <down+0x2a>
	    {
	        currentItem->updateScreen_down();
 8002e9a:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <down+0x30>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	4798      	blx	r3
	    }
	}
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000028 	.word	0x20000028

08002eac <enter>:
// ----------------------------------------------------------------------------------------
void enter(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
	bool status = true;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	71fb      	strb	r3, [r7, #7]
	// Якщо є функція "makeAction" тоді виконати її
	if (currentItem->makeAction)
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <enter+0x48>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <enter+0x20>
	{
		currentItem->makeAction();
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <enter+0x48>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	4798      	blx	r3
		status = false;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	71fb      	strb	r3, [r7, #7]
	}
	// Якщо є перехід на  "child" і "makeAction" не була виконана, тоді виконати перехід
	if((currentItem->child) && (status == true))
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <enter+0x48>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <enter+0x3e>
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d006      	beq.n	8002eea <enter+0x3e>
	{
		currentItem = currentItem->child;
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <enter+0x48>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	4a04      	ldr	r2, [pc, #16]	; (8002ef4 <enter+0x48>)
 8002ee4:	6013      	str	r3, [r2, #0]
		action();
 8002ee6:	f7ff fd15 	bl	8002914 <action>
	}
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000028 	.word	0x20000028

08002ef8 <menu>:
// ----------------------------------------------------------------------------------------
void menu(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
	Menu_Init();									// Init all structures
 8002efc:	f7ff f8d4 	bl	80020a8 <Menu_Init>

	print_menu_init();								// Print start menu and scrolingbar
 8002f00:	f7ff fc72 	bl	80027e8 <print_menu_init>

	HAL_Delay(10);
 8002f04:	200a      	movs	r0, #10
 8002f06:	f000 f8ab 	bl	8003060 <HAL_Delay>

	while(1)
	{
		if(button_processed_status == 1)			// If buttons was pressed
 8002f0a:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <menu+0x50>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d1fb      	bne.n	8002f0a <menu+0x12>
		{

			button_processed_status = 1;
 8002f12:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <menu+0x50>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
			switch (button_status)
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <menu+0x54>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d00c      	beq.n	8002f3a <menu+0x42>
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	dc0d      	bgt.n	8002f40 <menu+0x48>
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d002      	beq.n	8002f2e <menu+0x36>
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d003      	beq.n	8002f34 <menu+0x3c>
 8002f2c:	e008      	b.n	8002f40 <menu+0x48>
			{
				case BOTTON_UP:
					up();
 8002f2e:	f7ff ff89 	bl	8002e44 <up>
					break;
 8002f32:	e005      	b.n	8002f40 <menu+0x48>
				case BUTTON_ENTER:
					enter();
 8002f34:	f7ff ffba 	bl	8002eac <enter>
					break;
 8002f38:	e002      	b.n	8002f40 <menu+0x48>
				case BUTTON_DOWN:
					down();
 8002f3a:	f7ff ff9d 	bl	8002e78 <down>
					break;
 8002f3e:	bf00      	nop
			}
			button_status = BOTTON_DOESENT_PRESS;
 8002f40:	4b02      	ldr	r3, [pc, #8]	; (8002f4c <menu+0x54>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
		if(button_processed_status == 1)			// If buttons was pressed
 8002f46:	e7e0      	b.n	8002f0a <menu+0x12>
 8002f48:	20000020 	.word	0x20000020
 8002f4c:	200005a1 	.word	0x200005a1

08002f50 <Reset_Handler>:
=======
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c8:	4a14      	ldr	r2, [pc, #80]	; (800181c <_sbrk+0x5c>)
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <_sbrk+0x60>)
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d102      	bne.n	80017e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <_sbrk+0x64>)
 80017de:	4a12      	ldr	r2, [pc, #72]	; (8001828 <_sbrk+0x68>)
 80017e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <_sbrk+0x64>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d207      	bcs.n	8001800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f0:	f003 fade 	bl	8004db0 <__errno>
 80017f4:	4603      	mov	r3, r0
 80017f6:	220c      	movs	r2, #12
 80017f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017fe:	e009      	b.n	8001814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <_sbrk+0x64>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	4a05      	ldr	r2, [pc, #20]	; (8001824 <_sbrk+0x64>)
 8001810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20005000 	.word	0x20005000
 8001820:	00000400 	.word	0x00000400
 8001824:	20000524 	.word	0x20000524
 8001828:	200006c8 	.word	0x200006c8

0800182c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <Reset_Handler>:
>>>>>>> FFF
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
<<<<<<< HEAD
 8002f50:	480c      	ldr	r0, [pc, #48]	; (8002f84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f52:	490d      	ldr	r1, [pc, #52]	; (8002f88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f54:	4a0d      	ldr	r2, [pc, #52]	; (8002f8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f58:	e002      	b.n	8002f60 <LoopCopyDataInit>

08002f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f5e:	3304      	adds	r3, #4

08002f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f64:	d3f9      	bcc.n	8002f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f66:	4a0a      	ldr	r2, [pc, #40]	; (8002f90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f68:	4c0a      	ldr	r4, [pc, #40]	; (8002f94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f6c:	e001      	b.n	8002f72 <LoopFillZerobss>

08002f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f70:	3204      	adds	r2, #4

08002f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f74:	d3fb      	bcc.n	8002f6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f76:	f7ff f891 	bl	800209c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f7a:	f003 faef 	bl	800655c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f7e:	f7fe fb2f 	bl	80015e0 <main>
  bx lr
 8002f82:	4770      	bx	lr
  ldr r0, =_sdata
 8002f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f88:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8002f8c:	08007868 	.word	0x08007868
  ldr r2, =_sbss
 8002f90:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8002f94:	200008c8 	.word	0x200008c8

08002f98 <ADC1_2_IRQHandler>:
=======
 8001838:	480c      	ldr	r0, [pc, #48]	; (800186c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800183a:	490d      	ldr	r1, [pc, #52]	; (8001870 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800183c:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001840:	e002      	b.n	8001848 <LoopCopyDataInit>

08001842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001846:	3304      	adds	r3, #4

08001848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800184c:	d3f9      	bcc.n	8001842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001850:	4c0a      	ldr	r4, [pc, #40]	; (800187c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001854:	e001      	b.n	800185a <LoopFillZerobss>

08001856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001858:	3204      	adds	r2, #4

0800185a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800185c:	d3fb      	bcc.n	8001856 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800185e:	f7ff ffe5 	bl	800182c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001862:	f003 faab 	bl	8004dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001866:	f7ff fa75 	bl	8000d54 <main>
  bx lr
 800186a:	4770      	bx	lr
  ldr r0, =_sdata
 800186c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001870:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001874:	08005fb4 	.word	0x08005fb4
  ldr r2, =_sbss
 8001878:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800187c:	200006c4 	.word	0x200006c4

08001880 <ADC1_2_IRQHandler>:
>>>>>>> FFF
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< HEAD
 8002f98:	e7fe      	b.n	8002f98 <ADC1_2_IRQHandler>
	...

08002f9c <HAL_Init>:
=======
 8001880:	e7fe      	b.n	8001880 <ADC1_2_IRQHandler>
	...

08001884 <HAL_Init>:
>>>>>>> FFF
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
=======
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
>>>>>>> FFF
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8002fa0:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <HAL_Init+0x28>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a07      	ldr	r2, [pc, #28]	; (8002fc4 <HAL_Init+0x28>)
 8002fa6:	f043 0310 	orr.w	r3, r3, #16
 8002faa:	6013      	str	r3, [r2, #0]
=======
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_Init+0x28>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <HAL_Init+0x28>)
 800188e:	f043 0310 	orr.w	r3, r3, #16
 8001892:	6013      	str	r3, [r2, #0]
>>>>>>> FFF
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8002fac:	2003      	movs	r0, #3
 8002fae:	f000 f947 	bl	8003240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	f000 f808 	bl	8002fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fb8:	f7fe fda8 	bl	8001b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40022000 	.word	0x40022000

08002fc8 <HAL_InitTick>:
=======
 8001894:	2003      	movs	r0, #3
 8001896:	f000 f947 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189a:	2000      	movs	r0, #0
 800189c:	f000 f808 	bl	80018b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a0:	f7ff fcf6 	bl	8001290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40022000 	.word	0x40022000

080018b0 <HAL_InitTick>:
>>>>>>> FFF
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fd0:	4b12      	ldr	r3, [pc, #72]	; (800301c <HAL_InitTick+0x54>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b12      	ldr	r3, [pc, #72]	; (8003020 <HAL_InitTick+0x58>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f95f 	bl	80032aa <HAL_SYSTICK_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e00e      	b.n	8003014 <HAL_InitTick+0x4c>
=======
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x54>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_InitTick+0x58>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f95f 	bl	8001b92 <HAL_SYSTICK_Config>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e00e      	b.n	80018fc <HAL_InitTick+0x4c>
>>>>>>> FFF
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b0f      	cmp	r3, #15
 8002ffa:	d80a      	bhi.n	8003012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003004:	f000 f927 	bl	8003256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003008:	4a06      	ldr	r2, [pc, #24]	; (8003024 <HAL_InitTick+0x5c>)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6013      	str	r3, [r2, #0]
=======
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	d80a      	bhi.n	80018fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018ec:	f000 f927 	bl	8001b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f0:	4a06      	ldr	r2, [pc, #24]	; (800190c <HAL_InitTick+0x5c>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
>>>>>>> FFF
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 800300e:	2300      	movs	r3, #0
 8003010:	e000      	b.n	8003014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20000024 	.word	0x20000024
 8003020:	20000044 	.word	0x20000044
 8003024:	20000040 	.word	0x20000040

08003028 <HAL_IncTick>:
=======
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000018 	.word	0x20000018
 8001908:	20000020 	.word	0x20000020
 800190c:	2000001c 	.word	0x2000001c

08001910 <HAL_IncTick>:
>>>>>>> FFF
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <HAL_IncTick+0x1c>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HAL_IncTick+0x20>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4413      	add	r3, r2
 8003038:	4a03      	ldr	r2, [pc, #12]	; (8003048 <HAL_IncTick+0x20>)
 800303a:	6013      	str	r3, [r2, #0]
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	20000044 	.word	0x20000044
 8003048:	200008b4 	.word	0x200008b4

0800304c <HAL_GetTick>:
=======
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_IncTick+0x1c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_IncTick+0x20>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a03      	ldr	r2, [pc, #12]	; (8001930 <HAL_IncTick+0x20>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	20000020 	.word	0x20000020
 8001930:	200006b0 	.word	0x200006b0

08001934 <HAL_GetTick>:
>>>>>>> FFF
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return uwTick;
 8003050:	4b02      	ldr	r3, [pc, #8]	; (800305c <HAL_GetTick+0x10>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	200008b4 	.word	0x200008b4

08003060 <HAL_Delay>:
=======
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b02      	ldr	r3, [pc, #8]	; (8001944 <HAL_GetTick+0x10>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	200006b0 	.word	0x200006b0

08001948 <HAL_Delay>:
>>>>>>> FFF
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003068:	f7ff fff0 	bl	800304c <HAL_GetTick>
 800306c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003078:	d005      	beq.n	8003086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800307a:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <HAL_Delay+0x44>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4413      	add	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003086:	bf00      	nop
 8003088:	f7ff ffe0 	bl	800304c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	429a      	cmp	r2, r3
 8003096:	d8f7      	bhi.n	8003088 <HAL_Delay+0x28>
  {
  }
}
 8003098:	bf00      	nop
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20000044 	.word	0x20000044

080030a8 <__NVIC_SetPriorityGrouping>:
=======
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff fff0 	bl	8001934 <HAL_GetTick>
 8001954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001960:	d005      	beq.n	800196e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_Delay+0x44>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800196e:	bf00      	nop
 8001970:	f7ff ffe0 	bl	8001934 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	429a      	cmp	r2, r3
 800197e:	d8f7      	bhi.n	8001970 <HAL_Delay+0x28>
  {
  }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000020 	.word	0x20000020

08001990 <__NVIC_SetPriorityGrouping>:
>>>>>>> FFF
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b8:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <__NVIC_SetPriorityGrouping+0x44>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030c4:	4013      	ands	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030da:	4a04      	ldr	r2, [pc, #16]	; (80030ec <__NVIC_SetPriorityGrouping+0x44>)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	60d3      	str	r3, [r2, #12]
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <__NVIC_GetPriorityGrouping>:
=======
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c2:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_GetPriorityGrouping>:
>>>>>>> FFF
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f4:	4b04      	ldr	r3, [pc, #16]	; (8003108 <__NVIC_GetPriorityGrouping+0x18>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	0a1b      	lsrs	r3, r3, #8
 80030fa:	f003 0307 	and.w	r3, r3, #7
}
 80030fe:	4618      	mov	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <__NVIC_EnableIRQ>:
=======
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <__NVIC_GetPriorityGrouping+0x18>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	f003 0307 	and.w	r3, r3, #7
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_EnableIRQ>:
>>>>>>> FFF
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	2b00      	cmp	r3, #0
 800311c:	db0b      	blt.n	8003136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	f003 021f 	and.w	r2, r3, #31
 8003124:	4906      	ldr	r1, [pc, #24]	; (8003140 <__NVIC_EnableIRQ+0x34>)
 8003126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	2001      	movs	r0, #1
 800312e:	fa00 f202 	lsl.w	r2, r0, r2
 8003132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr
 8003140:	e000e100 	.word	0xe000e100

08003144 <__NVIC_SetPriority>:
=======
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db0b      	blt.n	8001a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	f003 021f 	and.w	r2, r3, #31
 8001a0c:	4906      	ldr	r1, [pc, #24]	; (8001a28 <__NVIC_EnableIRQ+0x34>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	2001      	movs	r0, #1
 8001a16:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	e000e100 	.word	0xe000e100

08001a2c <__NVIC_SetPriority>:
>>>>>>> FFF
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	6039      	str	r1, [r7, #0]
 800314e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003154:	2b00      	cmp	r3, #0
 8003156:	db0a      	blt.n	800316e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	b2da      	uxtb	r2, r3
 800315c:	490c      	ldr	r1, [pc, #48]	; (8003190 <__NVIC_SetPriority+0x4c>)
 800315e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003162:	0112      	lsls	r2, r2, #4
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	440b      	add	r3, r1
 8003168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db0a      	blt.n	8001a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	490c      	ldr	r1, [pc, #48]	; (8001a78 <__NVIC_SetPriority+0x4c>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	440b      	add	r3, r1
 8001a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> FFF
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 800316c:	e00a      	b.n	8003184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	b2da      	uxtb	r2, r3
 8003172:	4908      	ldr	r1, [pc, #32]	; (8003194 <__NVIC_SetPriority+0x50>)
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	3b04      	subs	r3, #4
 800317c:	0112      	lsls	r2, r2, #4
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	440b      	add	r3, r1
 8003182:	761a      	strb	r2, [r3, #24]
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	e000e100 	.word	0xe000e100
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <NVIC_EncodePriority>:
=======
 8001a54:	e00a      	b.n	8001a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4908      	ldr	r1, [pc, #32]	; (8001a7c <__NVIC_SetPriority+0x50>)
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	3b04      	subs	r3, #4
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	440b      	add	r3, r1
 8001a6a:	761a      	strb	r2, [r3, #24]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000e100 	.word	0xe000e100
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <NVIC_EncodePriority>:
>>>>>>> FFF
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8003198:	b480      	push	{r7}
 800319a:	b089      	sub	sp, #36	; 0x24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	61fb      	str	r3, [r7, #28]
=======
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	61fb      	str	r3, [r7, #28]
>>>>>>> FFF
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f1c3 0307 	rsb	r3, r3, #7
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	bf28      	it	cs
 80031b6:	2304      	movcs	r3, #4
 80031b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	3304      	adds	r3, #4
 80031be:	2b06      	cmp	r3, #6
 80031c0:	d902      	bls.n	80031c8 <NVIC_EncodePriority+0x30>
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	3b03      	subs	r3, #3
 80031c6:	e000      	b.n	80031ca <NVIC_EncodePriority+0x32>
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43da      	mvns	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	401a      	ands	r2, r3
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ea:	43d9      	mvns	r1, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f0:	4313      	orrs	r3, r2
         );
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3724      	adds	r7, #36	; 0x24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <SysTick_Config>:
=======
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f1c3 0307 	rsb	r3, r3, #7
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	bf28      	it	cs
 8001a9e:	2304      	movcs	r3, #4
 8001aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d902      	bls.n	8001ab0 <NVIC_EncodePriority+0x30>
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3b03      	subs	r3, #3
 8001aae:	e000      	b.n	8001ab2 <NVIC_EncodePriority+0x32>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43d9      	mvns	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	4313      	orrs	r3, r2
         );
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	; 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <SysTick_Config>:
>>>>>>> FFF
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3b01      	subs	r3, #1
 8003208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800320c:	d301      	bcc.n	8003212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800320e:	2301      	movs	r3, #1
 8003210:	e00f      	b.n	8003232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <SysTick_Config+0x40>)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3b01      	subs	r3, #1
 8003218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800321a:	210f      	movs	r1, #15
 800321c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003220:	f7ff ff90 	bl	8003144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <SysTick_Config+0x40>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800322a:	4b04      	ldr	r3, [pc, #16]	; (800323c <SysTick_Config+0x40>)
 800322c:	2207      	movs	r2, #7
 800322e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	e000e010 	.word	0xe000e010

08003240 <HAL_NVIC_SetPriorityGrouping>:
=======
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af4:	d301      	bcc.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00f      	b.n	8001b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <SysTick_Config+0x40>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	210f      	movs	r1, #15
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b08:	f7ff ff90 	bl	8001a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <SysTick_Config+0x40>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <SysTick_Config+0x40>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> FFF
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
=======
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff ff2d 	bl	80030a8 <__NVIC_SetPriorityGrouping>
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_NVIC_SetPriority>:
=======
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff2d 	bl	8001990 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
>>>>>>> FFF
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8003256:	b580      	push	{r7, lr}
 8003258:	b086      	sub	sp, #24
 800325a:	af00      	add	r7, sp, #0
 800325c:	4603      	mov	r3, r0
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
=======
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
>>>>>>> FFF
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8003268:	f7ff ff42 	bl	80030f0 <__NVIC_GetPriorityGrouping>
 800326c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	6978      	ldr	r0, [r7, #20]
 8003274:	f7ff ff90 	bl	8003198 <NVIC_EncodePriority>
 8003278:	4602      	mov	r2, r0
 800327a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff5f 	bl	8003144 <__NVIC_SetPriority>
}
 8003286:	bf00      	nop
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_NVIC_EnableIRQ>:
=======
 8001b50:	f7ff ff42 	bl	80019d8 <__NVIC_GetPriorityGrouping>
 8001b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	6978      	ldr	r0, [r7, #20]
 8001b5c:	f7ff ff90 	bl	8001a80 <NVIC_EncodePriority>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff5f 	bl	8001a2c <__NVIC_SetPriority>
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_EnableIRQ>:
>>>>>>> FFF
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	71fb      	strb	r3, [r7, #7]
=======
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	71fb      	strb	r3, [r7, #7]
>>>>>>> FFF
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8003298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ff35 	bl	800310c <__NVIC_EnableIRQ>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_SYSTICK_Config>:
=======
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff35 	bl	80019f4 <__NVIC_EnableIRQ>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
>>>>>>> FFF
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff ffa2 	bl	80031fc <SysTick_Config>
 80032b8:	4603      	mov	r3, r0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_DMA_Abort>:
=======
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffa2 	bl	8001ae4 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_DMA_Abort>:
>>>>>>> FFF
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80032c2:	b480      	push	{r7}
 80032c4:	b085      	sub	sp, #20
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d008      	beq.n	80032ea <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2204      	movs	r2, #4
 80032dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e020      	b.n	800332c <HAL_DMA_Abort+0x6a>
=======
 8001baa:	b480      	push	{r7}
 8001bac:	b085      	sub	sp, #20
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d008      	beq.n	8001bd2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2204      	movs	r2, #4
 8001bc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e020      	b.n	8001c14 <HAL_DMA_Abort+0x6a>
>>>>>>> FFF
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 020e 	bic.w	r2, r2, #14
 80032f8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0201 	bic.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003312:	2101      	movs	r1, #1
 8003314:	fa01 f202 	lsl.w	r2, r1, r2
 8003318:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800332a:	7bfb      	ldrb	r3, [r7, #15]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr
	...

08003338 <HAL_DMA_Abort_IT>:
=======
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 020e 	bic.w	r2, r2, #14
 8001be0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0201 	bic.w	r2, r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001c00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
	...

08001c20 <HAL_DMA_Abort_IT>:
>>>>>>> FFF
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
<<<<<<< HEAD
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800334a:	2b02      	cmp	r3, #2
 800334c:	d005      	beq.n	800335a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2204      	movs	r2, #4
 8003352:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
 8003358:	e051      	b.n	80033fe <HAL_DMA_Abort_IT+0xc6>
=======
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d005      	beq.n	8001c42 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2204      	movs	r2, #4
 8001c3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	e051      	b.n	8001ce6 <HAL_DMA_Abort_IT+0xc6>
>>>>>>> FFF
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 020e 	bic.w	r2, r2, #14
 8003368:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0201 	bic.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a22      	ldr	r2, [pc, #136]	; (8003408 <HAL_DMA_Abort_IT+0xd0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d029      	beq.n	80033d8 <HAL_DMA_Abort_IT+0xa0>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a20      	ldr	r2, [pc, #128]	; (800340c <HAL_DMA_Abort_IT+0xd4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d022      	beq.n	80033d4 <HAL_DMA_Abort_IT+0x9c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a1f      	ldr	r2, [pc, #124]	; (8003410 <HAL_DMA_Abort_IT+0xd8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d01a      	beq.n	80033ce <HAL_DMA_Abort_IT+0x96>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1d      	ldr	r2, [pc, #116]	; (8003414 <HAL_DMA_Abort_IT+0xdc>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d012      	beq.n	80033c8 <HAL_DMA_Abort_IT+0x90>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1c      	ldr	r2, [pc, #112]	; (8003418 <HAL_DMA_Abort_IT+0xe0>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00a      	beq.n	80033c2 <HAL_DMA_Abort_IT+0x8a>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a1a      	ldr	r2, [pc, #104]	; (800341c <HAL_DMA_Abort_IT+0xe4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d102      	bne.n	80033bc <HAL_DMA_Abort_IT+0x84>
 80033b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033ba:	e00e      	b.n	80033da <HAL_DMA_Abort_IT+0xa2>
 80033bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033c0:	e00b      	b.n	80033da <HAL_DMA_Abort_IT+0xa2>
 80033c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033c6:	e008      	b.n	80033da <HAL_DMA_Abort_IT+0xa2>
 80033c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033cc:	e005      	b.n	80033da <HAL_DMA_Abort_IT+0xa2>
 80033ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033d2:	e002      	b.n	80033da <HAL_DMA_Abort_IT+0xa2>
 80033d4:	2310      	movs	r3, #16
 80033d6:	e000      	b.n	80033da <HAL_DMA_Abort_IT+0xa2>
 80033d8:	2301      	movs	r3, #1
 80033da:	4a11      	ldr	r2, [pc, #68]	; (8003420 <HAL_DMA_Abort_IT+0xe8>)
 80033dc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	4798      	blx	r3
    } 
  }
  return status;
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40020008 	.word	0x40020008
 800340c:	4002001c 	.word	0x4002001c
 8003410:	40020030 	.word	0x40020030
 8003414:	40020044 	.word	0x40020044
 8003418:	40020058 	.word	0x40020058
 800341c:	4002006c 	.word	0x4002006c
 8003420:	40020000 	.word	0x40020000

08003424 <HAL_GPIO_Init>:
=======
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 020e 	bic.w	r2, r2, #14
 8001c50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0201 	bic.w	r2, r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a22      	ldr	r2, [pc, #136]	; (8001cf0 <HAL_DMA_Abort_IT+0xd0>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d029      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0xa0>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a20      	ldr	r2, [pc, #128]	; (8001cf4 <HAL_DMA_Abort_IT+0xd4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d022      	beq.n	8001cbc <HAL_DMA_Abort_IT+0x9c>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a1f      	ldr	r2, [pc, #124]	; (8001cf8 <HAL_DMA_Abort_IT+0xd8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d01a      	beq.n	8001cb6 <HAL_DMA_Abort_IT+0x96>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a1d      	ldr	r2, [pc, #116]	; (8001cfc <HAL_DMA_Abort_IT+0xdc>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d012      	beq.n	8001cb0 <HAL_DMA_Abort_IT+0x90>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <HAL_DMA_Abort_IT+0xe0>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d00a      	beq.n	8001caa <HAL_DMA_Abort_IT+0x8a>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a1a      	ldr	r2, [pc, #104]	; (8001d04 <HAL_DMA_Abort_IT+0xe4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d102      	bne.n	8001ca4 <HAL_DMA_Abort_IT+0x84>
 8001c9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ca2:	e00e      	b.n	8001cc2 <HAL_DMA_Abort_IT+0xa2>
 8001ca4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ca8:	e00b      	b.n	8001cc2 <HAL_DMA_Abort_IT+0xa2>
 8001caa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cae:	e008      	b.n	8001cc2 <HAL_DMA_Abort_IT+0xa2>
 8001cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cb4:	e005      	b.n	8001cc2 <HAL_DMA_Abort_IT+0xa2>
 8001cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cba:	e002      	b.n	8001cc2 <HAL_DMA_Abort_IT+0xa2>
 8001cbc:	2310      	movs	r3, #16
 8001cbe:	e000      	b.n	8001cc2 <HAL_DMA_Abort_IT+0xa2>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	4a11      	ldr	r2, [pc, #68]	; (8001d08 <HAL_DMA_Abort_IT+0xe8>)
 8001cc4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	4798      	blx	r3
    } 
  }
  return status;
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40020008 	.word	0x40020008
 8001cf4:	4002001c 	.word	0x4002001c
 8001cf8:	40020030 	.word	0x40020030
 8001cfc:	40020044 	.word	0x40020044
 8001d00:	40020058 	.word	0x40020058
 8001d04:	4002006c 	.word	0x4002006c
 8001d08:	40020000 	.word	0x40020000

08001d0c <HAL_GPIO_Init>:
>>>>>>> FFF
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8003424:	b480      	push	{r7}
 8003426:	b08b      	sub	sp, #44	; 0x2c
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800342e:	2300      	movs	r3, #0
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8001d0c:	b480      	push	{r7}
 8001d0e:	b08b      	sub	sp, #44	; 0x2c
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> FFF
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
<<<<<<< HEAD
 8003432:	2300      	movs	r3, #0
 8003434:	623b      	str	r3, [r7, #32]
=======
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	623b      	str	r3, [r7, #32]
>>>>>>> FFF
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 8003436:	e169      	b.n	800370c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003438:	2201      	movs	r2, #1
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	4013      	ands	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	429a      	cmp	r2, r3
 8003452:	f040 8158 	bne.w	8003706 <HAL_GPIO_Init+0x2e2>
=======
 8001d1e:	e169      	b.n	8001ff4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d20:	2201      	movs	r2, #1
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	69fa      	ldr	r2, [r7, #28]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	f040 8158 	bne.w	8001fee <HAL_GPIO_Init+0x2e2>
>>>>>>> FFF
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
<<<<<<< HEAD
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	4a9a      	ldr	r2, [pc, #616]	; (80036c4 <HAL_GPIO_Init+0x2a0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d05e      	beq.n	800351e <HAL_GPIO_Init+0xfa>
 8003460:	4a98      	ldr	r2, [pc, #608]	; (80036c4 <HAL_GPIO_Init+0x2a0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d875      	bhi.n	8003552 <HAL_GPIO_Init+0x12e>
 8003466:	4a98      	ldr	r2, [pc, #608]	; (80036c8 <HAL_GPIO_Init+0x2a4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d058      	beq.n	800351e <HAL_GPIO_Init+0xfa>
 800346c:	4a96      	ldr	r2, [pc, #600]	; (80036c8 <HAL_GPIO_Init+0x2a4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d86f      	bhi.n	8003552 <HAL_GPIO_Init+0x12e>
 8003472:	4a96      	ldr	r2, [pc, #600]	; (80036cc <HAL_GPIO_Init+0x2a8>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d052      	beq.n	800351e <HAL_GPIO_Init+0xfa>
 8003478:	4a94      	ldr	r2, [pc, #592]	; (80036cc <HAL_GPIO_Init+0x2a8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d869      	bhi.n	8003552 <HAL_GPIO_Init+0x12e>
 800347e:	4a94      	ldr	r2, [pc, #592]	; (80036d0 <HAL_GPIO_Init+0x2ac>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d04c      	beq.n	800351e <HAL_GPIO_Init+0xfa>
 8003484:	4a92      	ldr	r2, [pc, #584]	; (80036d0 <HAL_GPIO_Init+0x2ac>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d863      	bhi.n	8003552 <HAL_GPIO_Init+0x12e>
 800348a:	4a92      	ldr	r2, [pc, #584]	; (80036d4 <HAL_GPIO_Init+0x2b0>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d046      	beq.n	800351e <HAL_GPIO_Init+0xfa>
 8003490:	4a90      	ldr	r2, [pc, #576]	; (80036d4 <HAL_GPIO_Init+0x2b0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d85d      	bhi.n	8003552 <HAL_GPIO_Init+0x12e>
 8003496:	2b12      	cmp	r3, #18
 8003498:	d82a      	bhi.n	80034f0 <HAL_GPIO_Init+0xcc>
 800349a:	2b12      	cmp	r3, #18
 800349c:	d859      	bhi.n	8003552 <HAL_GPIO_Init+0x12e>
 800349e:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <HAL_GPIO_Init+0x80>)
 80034a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a4:	0800351f 	.word	0x0800351f
 80034a8:	080034f9 	.word	0x080034f9
 80034ac:	0800350b 	.word	0x0800350b
 80034b0:	0800354d 	.word	0x0800354d
 80034b4:	08003553 	.word	0x08003553
 80034b8:	08003553 	.word	0x08003553
 80034bc:	08003553 	.word	0x08003553
 80034c0:	08003553 	.word	0x08003553
 80034c4:	08003553 	.word	0x08003553
 80034c8:	08003553 	.word	0x08003553
 80034cc:	08003553 	.word	0x08003553
 80034d0:	08003553 	.word	0x08003553
 80034d4:	08003553 	.word	0x08003553
 80034d8:	08003553 	.word	0x08003553
 80034dc:	08003553 	.word	0x08003553
 80034e0:	08003553 	.word	0x08003553
 80034e4:	08003553 	.word	0x08003553
 80034e8:	08003501 	.word	0x08003501
 80034ec:	08003515 	.word	0x08003515
 80034f0:	4a79      	ldr	r2, [pc, #484]	; (80036d8 <HAL_GPIO_Init+0x2b4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d013      	beq.n	800351e <HAL_GPIO_Init+0xfa>
=======
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4a9a      	ldr	r2, [pc, #616]	; (8001fac <HAL_GPIO_Init+0x2a0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d05e      	beq.n	8001e06 <HAL_GPIO_Init+0xfa>
 8001d48:	4a98      	ldr	r2, [pc, #608]	; (8001fac <HAL_GPIO_Init+0x2a0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d875      	bhi.n	8001e3a <HAL_GPIO_Init+0x12e>
 8001d4e:	4a98      	ldr	r2, [pc, #608]	; (8001fb0 <HAL_GPIO_Init+0x2a4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d058      	beq.n	8001e06 <HAL_GPIO_Init+0xfa>
 8001d54:	4a96      	ldr	r2, [pc, #600]	; (8001fb0 <HAL_GPIO_Init+0x2a4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d86f      	bhi.n	8001e3a <HAL_GPIO_Init+0x12e>
 8001d5a:	4a96      	ldr	r2, [pc, #600]	; (8001fb4 <HAL_GPIO_Init+0x2a8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d052      	beq.n	8001e06 <HAL_GPIO_Init+0xfa>
 8001d60:	4a94      	ldr	r2, [pc, #592]	; (8001fb4 <HAL_GPIO_Init+0x2a8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d869      	bhi.n	8001e3a <HAL_GPIO_Init+0x12e>
 8001d66:	4a94      	ldr	r2, [pc, #592]	; (8001fb8 <HAL_GPIO_Init+0x2ac>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d04c      	beq.n	8001e06 <HAL_GPIO_Init+0xfa>
 8001d6c:	4a92      	ldr	r2, [pc, #584]	; (8001fb8 <HAL_GPIO_Init+0x2ac>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d863      	bhi.n	8001e3a <HAL_GPIO_Init+0x12e>
 8001d72:	4a92      	ldr	r2, [pc, #584]	; (8001fbc <HAL_GPIO_Init+0x2b0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d046      	beq.n	8001e06 <HAL_GPIO_Init+0xfa>
 8001d78:	4a90      	ldr	r2, [pc, #576]	; (8001fbc <HAL_GPIO_Init+0x2b0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d85d      	bhi.n	8001e3a <HAL_GPIO_Init+0x12e>
 8001d7e:	2b12      	cmp	r3, #18
 8001d80:	d82a      	bhi.n	8001dd8 <HAL_GPIO_Init+0xcc>
 8001d82:	2b12      	cmp	r3, #18
 8001d84:	d859      	bhi.n	8001e3a <HAL_GPIO_Init+0x12e>
 8001d86:	a201      	add	r2, pc, #4	; (adr r2, 8001d8c <HAL_GPIO_Init+0x80>)
 8001d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8c:	08001e07 	.word	0x08001e07
 8001d90:	08001de1 	.word	0x08001de1
 8001d94:	08001df3 	.word	0x08001df3
 8001d98:	08001e35 	.word	0x08001e35
 8001d9c:	08001e3b 	.word	0x08001e3b
 8001da0:	08001e3b 	.word	0x08001e3b
 8001da4:	08001e3b 	.word	0x08001e3b
 8001da8:	08001e3b 	.word	0x08001e3b
 8001dac:	08001e3b 	.word	0x08001e3b
 8001db0:	08001e3b 	.word	0x08001e3b
 8001db4:	08001e3b 	.word	0x08001e3b
 8001db8:	08001e3b 	.word	0x08001e3b
 8001dbc:	08001e3b 	.word	0x08001e3b
 8001dc0:	08001e3b 	.word	0x08001e3b
 8001dc4:	08001e3b 	.word	0x08001e3b
 8001dc8:	08001e3b 	.word	0x08001e3b
 8001dcc:	08001e3b 	.word	0x08001e3b
 8001dd0:	08001de9 	.word	0x08001de9
 8001dd4:	08001dfd 	.word	0x08001dfd
 8001dd8:	4a79      	ldr	r2, [pc, #484]	; (8001fc0 <HAL_GPIO_Init+0x2b4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d013      	beq.n	8001e06 <HAL_GPIO_Init+0xfa>
>>>>>>> FFF
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
<<<<<<< HEAD
 80034f6:	e02c      	b.n	8003552 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	623b      	str	r3, [r7, #32]
          break;
 80034fe:	e029      	b.n	8003554 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	3304      	adds	r3, #4
 8003506:	623b      	str	r3, [r7, #32]
          break;
 8003508:	e024      	b.n	8003554 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	3308      	adds	r3, #8
 8003510:	623b      	str	r3, [r7, #32]
          break;
 8003512:	e01f      	b.n	8003554 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	330c      	adds	r3, #12
 800351a:	623b      	str	r3, [r7, #32]
          break;
 800351c:	e01a      	b.n	8003554 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d102      	bne.n	800352c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003526:	2304      	movs	r3, #4
 8003528:	623b      	str	r3, [r7, #32]
          break;
 800352a:	e013      	b.n	8003554 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d105      	bne.n	8003540 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003534:	2308      	movs	r3, #8
 8003536:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	611a      	str	r2, [r3, #16]
          break;
 800353e:	e009      	b.n	8003554 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003540:	2308      	movs	r3, #8
 8003542:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	615a      	str	r2, [r3, #20]
          break;
 800354a:	e003      	b.n	8003554 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800354c:	2300      	movs	r3, #0
 800354e:	623b      	str	r3, [r7, #32]
          break;
 8003550:	e000      	b.n	8003554 <HAL_GPIO_Init+0x130>
          break;
 8003552:	bf00      	nop
=======
 8001dde:	e02c      	b.n	8001e3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	623b      	str	r3, [r7, #32]
          break;
 8001de6:	e029      	b.n	8001e3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	3304      	adds	r3, #4
 8001dee:	623b      	str	r3, [r7, #32]
          break;
 8001df0:	e024      	b.n	8001e3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	3308      	adds	r3, #8
 8001df8:	623b      	str	r3, [r7, #32]
          break;
 8001dfa:	e01f      	b.n	8001e3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	330c      	adds	r3, #12
 8001e02:	623b      	str	r3, [r7, #32]
          break;
 8001e04:	e01a      	b.n	8001e3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e0e:	2304      	movs	r3, #4
 8001e10:	623b      	str	r3, [r7, #32]
          break;
 8001e12:	e013      	b.n	8001e3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d105      	bne.n	8001e28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e1c:	2308      	movs	r3, #8
 8001e1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	611a      	str	r2, [r3, #16]
          break;
 8001e26:	e009      	b.n	8001e3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e28:	2308      	movs	r3, #8
 8001e2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	615a      	str	r2, [r3, #20]
          break;
 8001e32:	e003      	b.n	8001e3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
          break;
 8001e38:	e000      	b.n	8001e3c <HAL_GPIO_Init+0x130>
          break;
 8001e3a:	bf00      	nop
>>>>>>> FFF
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
<<<<<<< HEAD
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2bff      	cmp	r3, #255	; 0xff
 8003558:	d801      	bhi.n	800355e <HAL_GPIO_Init+0x13a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	e001      	b.n	8003562 <HAL_GPIO_Init+0x13e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3304      	adds	r3, #4
 8003562:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2bff      	cmp	r3, #255	; 0xff
 8003568:	d802      	bhi.n	8003570 <HAL_GPIO_Init+0x14c>
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	e002      	b.n	8003576 <HAL_GPIO_Init+0x152>
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	3b08      	subs	r3, #8
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	210f      	movs	r1, #15
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	fa01 f303 	lsl.w	r3, r1, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	401a      	ands	r2, r3
 8003588:	6a39      	ldr	r1, [r7, #32]
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	fa01 f303 	lsl.w	r3, r1, r3
 8003590:	431a      	orrs	r2, r3
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	601a      	str	r2, [r3, #0]
=======
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	2bff      	cmp	r3, #255	; 0xff
 8001e40:	d801      	bhi.n	8001e46 <HAL_GPIO_Init+0x13a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	e001      	b.n	8001e4a <HAL_GPIO_Init+0x13e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2bff      	cmp	r3, #255	; 0xff
 8001e50:	d802      	bhi.n	8001e58 <HAL_GPIO_Init+0x14c>
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	e002      	b.n	8001e5e <HAL_GPIO_Init+0x152>
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	3b08      	subs	r3, #8
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	210f      	movs	r1, #15
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	401a      	ands	r2, r3
 8001e70:	6a39      	ldr	r1, [r7, #32]
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	601a      	str	r2, [r3, #0]
>>>>>>> FFF

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 80b1 	beq.w	8003706 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035a4:	4b4d      	ldr	r3, [pc, #308]	; (80036dc <HAL_GPIO_Init+0x2b8>)
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	4a4c      	ldr	r2, [pc, #304]	; (80036dc <HAL_GPIO_Init+0x2b8>)
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	6193      	str	r3, [r2, #24]
 80035b0:	4b4a      	ldr	r3, [pc, #296]	; (80036dc <HAL_GPIO_Init+0x2b8>)
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035bc:	4a48      	ldr	r2, [pc, #288]	; (80036e0 <HAL_GPIO_Init+0x2bc>)
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	089b      	lsrs	r3, r3, #2
 80035c2:	3302      	adds	r3, #2
 80035c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	220f      	movs	r2, #15
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4013      	ands	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a40      	ldr	r2, [pc, #256]	; (80036e4 <HAL_GPIO_Init+0x2c0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d013      	beq.n	8003610 <HAL_GPIO_Init+0x1ec>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a3f      	ldr	r2, [pc, #252]	; (80036e8 <HAL_GPIO_Init+0x2c4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00d      	beq.n	800360c <HAL_GPIO_Init+0x1e8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a3e      	ldr	r2, [pc, #248]	; (80036ec <HAL_GPIO_Init+0x2c8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d007      	beq.n	8003608 <HAL_GPIO_Init+0x1e4>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a3d      	ldr	r2, [pc, #244]	; (80036f0 <HAL_GPIO_Init+0x2cc>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d101      	bne.n	8003604 <HAL_GPIO_Init+0x1e0>
 8003600:	2303      	movs	r3, #3
 8003602:	e006      	b.n	8003612 <HAL_GPIO_Init+0x1ee>
 8003604:	2304      	movs	r3, #4
 8003606:	e004      	b.n	8003612 <HAL_GPIO_Init+0x1ee>
 8003608:	2302      	movs	r3, #2
 800360a:	e002      	b.n	8003612 <HAL_GPIO_Init+0x1ee>
 800360c:	2301      	movs	r3, #1
 800360e:	e000      	b.n	8003612 <HAL_GPIO_Init+0x1ee>
 8003610:	2300      	movs	r3, #0
 8003612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003614:	f002 0203 	and.w	r2, r2, #3
 8003618:	0092      	lsls	r2, r2, #2
 800361a:	4093      	lsls	r3, r2
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003622:	492f      	ldr	r1, [pc, #188]	; (80036e0 <HAL_GPIO_Init+0x2bc>)
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	089b      	lsrs	r3, r3, #2
 8003628:	3302      	adds	r3, #2
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 80b1 	beq.w	8001fee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e8c:	4b4d      	ldr	r3, [pc, #308]	; (8001fc4 <HAL_GPIO_Init+0x2b8>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	4a4c      	ldr	r2, [pc, #304]	; (8001fc4 <HAL_GPIO_Init+0x2b8>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6193      	str	r3, [r2, #24]
 8001e98:	4b4a      	ldr	r3, [pc, #296]	; (8001fc4 <HAL_GPIO_Init+0x2b8>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ea4:	4a48      	ldr	r2, [pc, #288]	; (8001fc8 <HAL_GPIO_Init+0x2bc>)
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	220f      	movs	r2, #15
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a40      	ldr	r2, [pc, #256]	; (8001fcc <HAL_GPIO_Init+0x2c0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d013      	beq.n	8001ef8 <HAL_GPIO_Init+0x1ec>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a3f      	ldr	r2, [pc, #252]	; (8001fd0 <HAL_GPIO_Init+0x2c4>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d00d      	beq.n	8001ef4 <HAL_GPIO_Init+0x1e8>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a3e      	ldr	r2, [pc, #248]	; (8001fd4 <HAL_GPIO_Init+0x2c8>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d007      	beq.n	8001ef0 <HAL_GPIO_Init+0x1e4>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a3d      	ldr	r2, [pc, #244]	; (8001fd8 <HAL_GPIO_Init+0x2cc>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d101      	bne.n	8001eec <HAL_GPIO_Init+0x1e0>
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e006      	b.n	8001efa <HAL_GPIO_Init+0x1ee>
 8001eec:	2304      	movs	r3, #4
 8001eee:	e004      	b.n	8001efa <HAL_GPIO_Init+0x1ee>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e002      	b.n	8001efa <HAL_GPIO_Init+0x1ee>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_GPIO_Init+0x1ee>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001efc:	f002 0203 	and.w	r2, r2, #3
 8001f00:	0092      	lsls	r2, r2, #2
 8001f02:	4093      	lsls	r3, r2
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f0a:	492f      	ldr	r1, [pc, #188]	; (8001fc8 <HAL_GPIO_Init+0x2bc>)
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	3302      	adds	r3, #2
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> FFF


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
<<<<<<< HEAD
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d006      	beq.n	800364a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800363c:	4b2d      	ldr	r3, [pc, #180]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	492c      	ldr	r1, [pc, #176]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	4313      	orrs	r3, r2
 8003646:	600b      	str	r3, [r1, #0]
 8003648:	e006      	b.n	8003658 <HAL_GPIO_Init+0x234>
=======
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d006      	beq.n	8001f32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f24:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <HAL_GPIO_Init+0x2d0>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	492c      	ldr	r1, [pc, #176]	; (8001fdc <HAL_GPIO_Init+0x2d0>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	600b      	str	r3, [r1, #0]
 8001f30:	e006      	b.n	8001f40 <HAL_GPIO_Init+0x234>
>>>>>>> FFF
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
<<<<<<< HEAD
 800364a:	4b2a      	ldr	r3, [pc, #168]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	43db      	mvns	r3, r3
 8003652:	4928      	ldr	r1, [pc, #160]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 8003654:	4013      	ands	r3, r2
 8003656:	600b      	str	r3, [r1, #0]
=======
 8001f32:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <HAL_GPIO_Init+0x2d0>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	4928      	ldr	r1, [pc, #160]	; (8001fdc <HAL_GPIO_Init+0x2d0>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	600b      	str	r3, [r1, #0]
>>>>>>> FFF
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
<<<<<<< HEAD
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d006      	beq.n	8003672 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003664:	4b23      	ldr	r3, [pc, #140]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	4922      	ldr	r1, [pc, #136]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	4313      	orrs	r3, r2
 800366e:	604b      	str	r3, [r1, #4]
 8003670:	e006      	b.n	8003680 <HAL_GPIO_Init+0x25c>
=======
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f4c:	4b23      	ldr	r3, [pc, #140]	; (8001fdc <HAL_GPIO_Init+0x2d0>)
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	4922      	ldr	r1, [pc, #136]	; (8001fdc <HAL_GPIO_Init+0x2d0>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x25c>
>>>>>>> FFF
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
<<<<<<< HEAD
 8003672:	4b20      	ldr	r3, [pc, #128]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	43db      	mvns	r3, r3
 800367a:	491e      	ldr	r1, [pc, #120]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 800367c:	4013      	ands	r3, r2
 800367e:	604b      	str	r3, [r1, #4]
=======
 8001f5a:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <HAL_GPIO_Init+0x2d0>)
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	491e      	ldr	r1, [pc, #120]	; (8001fdc <HAL_GPIO_Init+0x2d0>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
>>>>>>> FFF
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
<<<<<<< HEAD
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d006      	beq.n	800369a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800368c:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	4918      	ldr	r1, [pc, #96]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	4313      	orrs	r3, r2
 8003696:	608b      	str	r3, [r1, #8]
 8003698:	e006      	b.n	80036a8 <HAL_GPIO_Init+0x284>
=======
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d006      	beq.n	8001f82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f74:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <HAL_GPIO_Init+0x2d0>)
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	4918      	ldr	r1, [pc, #96]	; (8001fdc <HAL_GPIO_Init+0x2d0>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	608b      	str	r3, [r1, #8]
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x284>
>>>>>>> FFF
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
<<<<<<< HEAD
 800369a:	4b16      	ldr	r3, [pc, #88]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	43db      	mvns	r3, r3
 80036a2:	4914      	ldr	r1, [pc, #80]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	608b      	str	r3, [r1, #8]
=======
 8001f82:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <HAL_GPIO_Init+0x2d0>)
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	4914      	ldr	r1, [pc, #80]	; (8001fdc <HAL_GPIO_Init+0x2d0>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	608b      	str	r3, [r1, #8]
>>>>>>> FFF
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
<<<<<<< HEAD
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d021      	beq.n	80036f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036b4:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	490e      	ldr	r1, [pc, #56]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60cb      	str	r3, [r1, #12]
 80036c0:	e021      	b.n	8003706 <HAL_GPIO_Init+0x2e2>
 80036c2:	bf00      	nop
 80036c4:	10320000 	.word	0x10320000
 80036c8:	10310000 	.word	0x10310000
 80036cc:	10220000 	.word	0x10220000
 80036d0:	10210000 	.word	0x10210000
 80036d4:	10120000 	.word	0x10120000
 80036d8:	10110000 	.word	0x10110000
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40010000 	.word	0x40010000
 80036e4:	40010800 	.word	0x40010800
 80036e8:	40010c00 	.word	0x40010c00
 80036ec:	40011000 	.word	0x40011000
 80036f0:	40011400 	.word	0x40011400
 80036f4:	40010400 	.word	0x40010400
=======
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d021      	beq.n	8001fe0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <HAL_GPIO_Init+0x2d0>)
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	490e      	ldr	r1, [pc, #56]	; (8001fdc <HAL_GPIO_Init+0x2d0>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60cb      	str	r3, [r1, #12]
 8001fa8:	e021      	b.n	8001fee <HAL_GPIO_Init+0x2e2>
 8001faa:	bf00      	nop
 8001fac:	10320000 	.word	0x10320000
 8001fb0:	10310000 	.word	0x10310000
 8001fb4:	10220000 	.word	0x10220000
 8001fb8:	10210000 	.word	0x10210000
 8001fbc:	10120000 	.word	0x10120000
 8001fc0:	10110000 	.word	0x10110000
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	40010800 	.word	0x40010800
 8001fd0:	40010c00 	.word	0x40010c00
 8001fd4:	40011000 	.word	0x40011000
 8001fd8:	40011400 	.word	0x40011400
 8001fdc:	40010400 	.word	0x40010400
>>>>>>> FFF
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
<<<<<<< HEAD
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <HAL_GPIO_Init+0x304>)
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	43db      	mvns	r3, r3
 8003700:	4909      	ldr	r1, [pc, #36]	; (8003728 <HAL_GPIO_Init+0x304>)
 8003702:	4013      	ands	r3, r2
 8003704:	60cb      	str	r3, [r1, #12]
=======
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_GPIO_Init+0x304>)
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	4909      	ldr	r1, [pc, #36]	; (8002010 <HAL_GPIO_Init+0x304>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	60cb      	str	r3, [r1, #12]
>>>>>>> FFF
        }
      }
    }

	position++;
<<<<<<< HEAD
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	3301      	adds	r3, #1
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	fa22 f303 	lsr.w	r3, r2, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	f47f ae8e 	bne.w	8003438 <HAL_GPIO_Init+0x14>
  }
}
 800371c:	bf00      	nop
 800371e:	bf00      	nop
 8003720:	372c      	adds	r7, #44	; 0x2c
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr
 8003728:	40010400 	.word	0x40010400

0800372c <HAL_GPIO_ReadPin>:
=======
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f47f ae8e 	bne.w	8001d20 <HAL_GPIO_Init+0x14>
  }
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	372c      	adds	r7, #44	; 0x2c
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	40010400 	.word	0x40010400

08002014 <HAL_GPIO_ReadPin>:
>>>>>>> FFF
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	807b      	strh	r3, [r7, #2]
=======
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	807b      	strh	r3, [r7, #2]
>>>>>>> FFF
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< HEAD
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	887b      	ldrh	r3, [r7, #2]
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
 8003748:	e001      	b.n	800374e <HAL_GPIO_ReadPin+0x22>
=======
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	887b      	ldrh	r3, [r7, #2]
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800202c:	2301      	movs	r3, #1
 800202e:	73fb      	strb	r3, [r7, #15]
 8002030:	e001      	b.n	8002036 <HAL_GPIO_ReadPin+0x22>
>>>>>>> FFF
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< HEAD
 800374a:	2300      	movs	r3, #0
 800374c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800374e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr

0800375a <HAL_GPIO_WritePin>:
=======
 8002032:	2300      	movs	r3, #0
 8002034:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002036:	7bfb      	ldrb	r3, [r7, #15]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <HAL_GPIO_WritePin>:
>>>>>>> FFF
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	460b      	mov	r3, r1
 8003764:	807b      	strh	r3, [r7, #2]
 8003766:	4613      	mov	r3, r2
 8003768:	707b      	strb	r3, [r7, #1]
=======
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	460b      	mov	r3, r1
 800204c:	807b      	strh	r3, [r7, #2]
 800204e:	4613      	mov	r3, r2
 8002050:	707b      	strb	r3, [r7, #1]
>>>>>>> FFF
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 800376a:	787b      	ldrb	r3, [r7, #1]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003770:	887a      	ldrh	r2, [r7, #2]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	611a      	str	r2, [r3, #16]
=======
 8002052:	787b      	ldrb	r3, [r7, #1]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002058:	887a      	ldrh	r2, [r7, #2]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	611a      	str	r2, [r3, #16]
>>>>>>> FFF
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
<<<<<<< HEAD
 8003776:	e003      	b.n	8003780 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003778:	887b      	ldrh	r3, [r7, #2]
 800377a:	041a      	lsls	r2, r3, #16
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	611a      	str	r2, [r3, #16]
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr

0800378a <HAL_GPIO_TogglePin>:
=======
 800205e:	e003      	b.n	8002068 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002060:	887b      	ldrh	r3, [r7, #2]
 8002062:	041a      	lsls	r2, r3, #16
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	611a      	str	r2, [r3, #16]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr

08002072 <HAL_GPIO_TogglePin>:
>>>>>>> FFF
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 800378a:	b480      	push	{r7}
 800378c:	b085      	sub	sp, #20
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	460b      	mov	r3, r1
 8003794:	807b      	strh	r3, [r7, #2]
=======
 8002072:	b480      	push	{r7}
 8002074:	b085      	sub	sp, #20
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	460b      	mov	r3, r1
 800207c:	807b      	strh	r3, [r7, #2]
>>>>>>> FFF

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
<<<<<<< HEAD
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800379c:	887a      	ldrh	r2, [r7, #2]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4013      	ands	r3, r2
 80037a2:	041a      	lsls	r2, r3, #16
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	43d9      	mvns	r1, r3
 80037a8:	887b      	ldrh	r3, [r7, #2]
 80037aa:	400b      	ands	r3, r1
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	611a      	str	r2, [r3, #16]
}
 80037b2:	bf00      	nop
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr

080037bc <HAL_GPIO_EXTI_IRQHandler>:
=======
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002084:	887a      	ldrh	r2, [r7, #2]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4013      	ands	r3, r2
 800208a:	041a      	lsls	r2, r3, #16
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	43d9      	mvns	r1, r3
 8002090:	887b      	ldrh	r3, [r7, #2]
 8002092:	400b      	ands	r3, r1
 8002094:	431a      	orrs	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	611a      	str	r2, [r3, #16]
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> FFF
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80037c6:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d006      	beq.n	80037e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037d2:	4a05      	ldr	r2, [pc, #20]	; (80037e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037d4:	88fb      	ldrh	r3, [r7, #6]
 80037d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037d8:	88fb      	ldrh	r3, [r7, #6]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe f946 	bl	8001a6c <HAL_GPIO_EXTI_Callback>
  }
}
 80037e0:	bf00      	nop
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40010400 	.word	0x40010400

080037ec <HAL_I2C_Init>:
=======
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	4013      	ands	r3, r2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d006      	beq.n	80020c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020ba:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020c0:	88fb      	ldrh	r3, [r7, #6]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff f894 	bl	80011f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40010400 	.word	0x40010400

080020d4 <HAL_I2C_Init>:
>>>>>>> FFF
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
=======
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
<<<<<<< HEAD
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e12b      	b.n	8003a56 <HAL_I2C_Init+0x26a>
=======
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e12b      	b.n	800233e <HAL_I2C_Init+0x26a>
>>>>>>> FFF
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< HEAD
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d106      	bne.n	8002100 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> FFF

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fe f9ac 	bl	8001b70 <HAL_I2C_MspInit>
=======
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff f8fa 	bl	80012f4 <HAL_I2C_MspInit>
>>>>>>> FFF
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2224      	movs	r2, #36	; 0x24
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800383e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800384e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003850:	f000 fffa 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 8003854:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	4a81      	ldr	r2, [pc, #516]	; (8003a60 <HAL_I2C_Init+0x274>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d807      	bhi.n	8003870 <HAL_I2C_Init+0x84>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4a80      	ldr	r2, [pc, #512]	; (8003a64 <HAL_I2C_Init+0x278>)
 8003864:	4293      	cmp	r3, r2
 8003866:	bf94      	ite	ls
 8003868:	2301      	movls	r3, #1
 800386a:	2300      	movhi	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	e006      	b.n	800387e <HAL_I2C_Init+0x92>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4a7d      	ldr	r2, [pc, #500]	; (8003a68 <HAL_I2C_Init+0x27c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	bf94      	ite	ls
 8003878:	2301      	movls	r3, #1
 800387a:	2300      	movhi	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e0e7      	b.n	8003a56 <HAL_I2C_Init+0x26a>
=======
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2224      	movs	r2, #36	; 0x24
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0201 	bic.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002126:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002136:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002138:	f000 fffa 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 800213c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4a81      	ldr	r2, [pc, #516]	; (8002348 <HAL_I2C_Init+0x274>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d807      	bhi.n	8002158 <HAL_I2C_Init+0x84>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4a80      	ldr	r2, [pc, #512]	; (800234c <HAL_I2C_Init+0x278>)
 800214c:	4293      	cmp	r3, r2
 800214e:	bf94      	ite	ls
 8002150:	2301      	movls	r3, #1
 8002152:	2300      	movhi	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	e006      	b.n	8002166 <HAL_I2C_Init+0x92>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4a7d      	ldr	r2, [pc, #500]	; (8002350 <HAL_I2C_Init+0x27c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	bf94      	ite	ls
 8002160:	2301      	movls	r3, #1
 8002162:	2300      	movhi	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e0e7      	b.n	800233e <HAL_I2C_Init+0x26a>
>>>>>>> FFF
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
<<<<<<< HEAD
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4a78      	ldr	r2, [pc, #480]	; (8003a6c <HAL_I2C_Init+0x280>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	0c9b      	lsrs	r3, r3, #18
 8003890:	60bb      	str	r3, [r7, #8]
=======
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4a78      	ldr	r2, [pc, #480]	; (8002354 <HAL_I2C_Init+0x280>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	0c9b      	lsrs	r3, r3, #18
 8002178:	60bb      	str	r3, [r7, #8]
>>>>>>> FFF

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
<<<<<<< HEAD
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]
=======
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	430a      	orrs	r2, r1
 800218c:	605a      	str	r2, [r3, #4]
>>>>>>> FFF

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
<<<<<<< HEAD
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	4a6a      	ldr	r2, [pc, #424]	; (8003a60 <HAL_I2C_Init+0x274>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d802      	bhi.n	80038c0 <HAL_I2C_Init+0xd4>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	3301      	adds	r3, #1
 80038be:	e009      	b.n	80038d4 <HAL_I2C_Init+0xe8>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	4a69      	ldr	r2, [pc, #420]	; (8003a70 <HAL_I2C_Init+0x284>)
 80038cc:	fba2 2303 	umull	r2, r3, r2, r3
 80038d0:	099b      	lsrs	r3, r3, #6
 80038d2:	3301      	adds	r3, #1
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6812      	ldr	r2, [r2, #0]
 80038d8:	430b      	orrs	r3, r1
 80038da:	6213      	str	r3, [r2, #32]
=======
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4a6a      	ldr	r2, [pc, #424]	; (8002348 <HAL_I2C_Init+0x274>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d802      	bhi.n	80021a8 <HAL_I2C_Init+0xd4>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	3301      	adds	r3, #1
 80021a6:	e009      	b.n	80021bc <HAL_I2C_Init+0xe8>
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021ae:	fb02 f303 	mul.w	r3, r2, r3
 80021b2:	4a69      	ldr	r2, [pc, #420]	; (8002358 <HAL_I2C_Init+0x284>)
 80021b4:	fba2 2303 	umull	r2, r3, r2, r3
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	3301      	adds	r3, #1
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	430b      	orrs	r3, r1
 80021c2:	6213      	str	r3, [r2, #32]
>>>>>>> FFF

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
<<<<<<< HEAD
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	495c      	ldr	r1, [pc, #368]	; (8003a60 <HAL_I2C_Init+0x274>)
 80038f0:	428b      	cmp	r3, r1
 80038f2:	d819      	bhi.n	8003928 <HAL_I2C_Init+0x13c>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1e59      	subs	r1, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003902:	1c59      	adds	r1, r3, #1
 8003904:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003908:	400b      	ands	r3, r1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_I2C_Init+0x138>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1e59      	subs	r1, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	fbb1 f3f3 	udiv	r3, r1, r3
 800391c:	3301      	adds	r3, #1
 800391e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003922:	e051      	b.n	80039c8 <HAL_I2C_Init+0x1dc>
 8003924:	2304      	movs	r3, #4
 8003926:	e04f      	b.n	80039c8 <HAL_I2C_Init+0x1dc>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d111      	bne.n	8003954 <HAL_I2C_Init+0x168>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1e58      	subs	r0, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6859      	ldr	r1, [r3, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	440b      	add	r3, r1
 800393e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003942:	3301      	adds	r3, #1
 8003944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003948:	2b00      	cmp	r3, #0
 800394a:	bf0c      	ite	eq
 800394c:	2301      	moveq	r3, #1
 800394e:	2300      	movne	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	e012      	b.n	800397a <HAL_I2C_Init+0x18e>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1e58      	subs	r0, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6859      	ldr	r1, [r3, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	0099      	lsls	r1, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	fbb0 f3f3 	udiv	r3, r0, r3
 800396a:	3301      	adds	r3, #1
 800396c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003970:	2b00      	cmp	r3, #0
 8003972:	bf0c      	ite	eq
 8003974:	2301      	moveq	r3, #1
 8003976:	2300      	movne	r3, #0
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_I2C_Init+0x196>
 800397e:	2301      	movs	r3, #1
 8003980:	e022      	b.n	80039c8 <HAL_I2C_Init+0x1dc>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10e      	bne.n	80039a8 <HAL_I2C_Init+0x1bc>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	1e58      	subs	r0, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6859      	ldr	r1, [r3, #4]
 8003992:	460b      	mov	r3, r1
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	440b      	add	r3, r1
 8003998:	fbb0 f3f3 	udiv	r3, r0, r3
 800399c:	3301      	adds	r3, #1
 800399e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039a6:	e00f      	b.n	80039c8 <HAL_I2C_Init+0x1dc>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1e58      	subs	r0, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6859      	ldr	r1, [r3, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	0099      	lsls	r1, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80039be:	3301      	adds	r3, #1
 80039c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	6809      	ldr	r1, [r1, #0]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61cb      	str	r3, [r1, #28]
=======
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	495c      	ldr	r1, [pc, #368]	; (8002348 <HAL_I2C_Init+0x274>)
 80021d8:	428b      	cmp	r3, r1
 80021da:	d819      	bhi.n	8002210 <HAL_I2C_Init+0x13c>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	1e59      	subs	r1, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ea:	1c59      	adds	r1, r3, #1
 80021ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021f0:	400b      	ands	r3, r1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <HAL_I2C_Init+0x138>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1e59      	subs	r1, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fbb1 f3f3 	udiv	r3, r1, r3
 8002204:	3301      	adds	r3, #1
 8002206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800220a:	e051      	b.n	80022b0 <HAL_I2C_Init+0x1dc>
 800220c:	2304      	movs	r3, #4
 800220e:	e04f      	b.n	80022b0 <HAL_I2C_Init+0x1dc>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d111      	bne.n	800223c <HAL_I2C_Init+0x168>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1e58      	subs	r0, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6859      	ldr	r1, [r3, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	440b      	add	r3, r1
 8002226:	fbb0 f3f3 	udiv	r3, r0, r3
 800222a:	3301      	adds	r3, #1
 800222c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002230:	2b00      	cmp	r3, #0
 8002232:	bf0c      	ite	eq
 8002234:	2301      	moveq	r3, #1
 8002236:	2300      	movne	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	e012      	b.n	8002262 <HAL_I2C_Init+0x18e>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1e58      	subs	r0, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6859      	ldr	r1, [r3, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	0099      	lsls	r1, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002252:	3301      	adds	r3, #1
 8002254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf0c      	ite	eq
 800225c:	2301      	moveq	r3, #1
 800225e:	2300      	movne	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_I2C_Init+0x196>
 8002266:	2301      	movs	r3, #1
 8002268:	e022      	b.n	80022b0 <HAL_I2C_Init+0x1dc>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10e      	bne.n	8002290 <HAL_I2C_Init+0x1bc>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1e58      	subs	r0, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6859      	ldr	r1, [r3, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	440b      	add	r3, r1
 8002280:	fbb0 f3f3 	udiv	r3, r0, r3
 8002284:	3301      	adds	r3, #1
 8002286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800228a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800228e:	e00f      	b.n	80022b0 <HAL_I2C_Init+0x1dc>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1e58      	subs	r0, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	0099      	lsls	r1, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a6:	3301      	adds	r3, #1
 80022a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	6809      	ldr	r1, [r1, #0]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61cb      	str	r3, [r1, #28]
>>>>>>> FFF

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
<<<<<<< HEAD
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69da      	ldr	r2, [r3, #28]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	601a      	str	r2, [r3, #0]
=======
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]
>>>>>>> FFF

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
<<<<<<< HEAD
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6911      	ldr	r1, [r2, #16]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	68d2      	ldr	r2, [r2, #12]
 8003a02:	4311      	orrs	r1, r2
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	6093      	str	r3, [r2, #8]
=======
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6911      	ldr	r1, [r2, #16]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68d2      	ldr	r2, [r2, #12]
 80022ea:	4311      	orrs	r1, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	430b      	orrs	r3, r1
 80022f2:	6093      	str	r3, [r2, #8]
>>>>>>> FFF

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
<<<<<<< HEAD
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	000186a0 	.word	0x000186a0
 8003a64:	001e847f 	.word	0x001e847f
 8003a68:	003d08ff 	.word	0x003d08ff
 8003a6c:	431bde83 	.word	0x431bde83
 8003a70:	10624dd3 	.word	0x10624dd3

08003a74 <HAL_I2C_Mem_Write>:
=======
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2220      	movs	r2, #32
 800232a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	000186a0 	.word	0x000186a0
 800234c:	001e847f 	.word	0x001e847f
 8002350:	003d08ff 	.word	0x003d08ff
 8002354:	431bde83 	.word	0x431bde83
 8002358:	10624dd3 	.word	0x10624dd3

0800235c <HAL_I2C_Mem_Write>:
>>>>>>> FFF
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af02      	add	r7, sp, #8
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	4608      	mov	r0, r1
 8003a7e:	4611      	mov	r1, r2
 8003a80:	461a      	mov	r2, r3
 8003a82:	4603      	mov	r3, r0
 8003a84:	817b      	strh	r3, [r7, #10]
 8003a86:	460b      	mov	r3, r1
 8003a88:	813b      	strh	r3, [r7, #8]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a8e:	f7ff fadd 	bl	800304c <HAL_GetTick>
 8003a92:	6178      	str	r0, [r7, #20]
=======
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af02      	add	r7, sp, #8
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	4608      	mov	r0, r1
 8002366:	4611      	mov	r1, r2
 8002368:	461a      	mov	r2, r3
 800236a:	4603      	mov	r3, r0
 800236c:	817b      	strh	r3, [r7, #10]
 800236e:	460b      	mov	r3, r1
 8002370:	813b      	strh	r3, [r7, #8]
 8002372:	4613      	mov	r3, r2
 8002374:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002376:	f7ff fadd 	bl	8001934 <HAL_GetTick>
 800237a:	6178      	str	r0, [r7, #20]
>>>>>>> FFF

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	f040 80d9 	bne.w	8003c54 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	2319      	movs	r3, #25
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	496d      	ldr	r1, [pc, #436]	; (8003c60 <HAL_I2C_Mem_Write+0x1ec>)
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f971 	bl	8003d94 <I2C_WaitOnFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e0cc      	b.n	8003c56 <HAL_I2C_Mem_Write+0x1e2>
=======
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b20      	cmp	r3, #32
 8002386:	f040 80d9 	bne.w	800253c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	2319      	movs	r3, #25
 8002390:	2201      	movs	r2, #1
 8002392:	496d      	ldr	r1, [pc, #436]	; (8002548 <HAL_I2C_Mem_Write+0x1ec>)
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f971 	bl	800267c <I2C_WaitOnFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80023a0:	2302      	movs	r3, #2
 80023a2:	e0cc      	b.n	800253e <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> FFF
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_I2C_Mem_Write+0x56>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e0c5      	b.n	8003c56 <HAL_I2C_Mem_Write+0x1e2>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d007      	beq.n	8003af0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]
=======
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_I2C_Mem_Write+0x56>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e0c5      	b.n	800253e <HAL_I2C_Mem_Write+0x1e2>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d007      	beq.n	80023d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
>>>>>>> FFF
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003afe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2221      	movs	r2, #33	; 0x21
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2240      	movs	r2, #64	; 0x40
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a3a      	ldr	r2, [r7, #32]
 8003b1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4a4d      	ldr	r2, [pc, #308]	; (8003c64 <HAL_I2C_Mem_Write+0x1f0>)
 8003b30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b32:	88f8      	ldrh	r0, [r7, #6]
 8003b34:	893a      	ldrh	r2, [r7, #8]
 8003b36:	8979      	ldrh	r1, [r7, #10]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	9301      	str	r3, [sp, #4]
 8003b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	4603      	mov	r3, r0
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f890 	bl	8003c68 <I2C_RequestMemoryWrite>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d052      	beq.n	8003bf4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e081      	b.n	8003c56 <HAL_I2C_Mem_Write+0x1e2>
=======
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2221      	movs	r2, #33	; 0x21
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2240      	movs	r2, #64	; 0x40
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a3a      	ldr	r2, [r7, #32]
 8002402:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002408:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4a4d      	ldr	r2, [pc, #308]	; (800254c <HAL_I2C_Mem_Write+0x1f0>)
 8002418:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800241a:	88f8      	ldrh	r0, [r7, #6]
 800241c:	893a      	ldrh	r2, [r7, #8]
 800241e:	8979      	ldrh	r1, [r7, #10]
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	4603      	mov	r3, r0
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 f890 	bl	8002550 <I2C_RequestMemoryWrite>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d052      	beq.n	80024dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e081      	b.n	800253e <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> FFF
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f9f2 	bl	8003f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00d      	beq.n	8003b7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d107      	bne.n	8003b7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e06b      	b.n	8003c56 <HAL_I2C_Mem_Write+0x1e2>
=======
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f9f2 	bl	8002828 <I2C_WaitOnTXEFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00d      	beq.n	8002466 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	2b04      	cmp	r3, #4
 8002450:	d107      	bne.n	8002462 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002460:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e06b      	b.n	800253e <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> FFF
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
<<<<<<< HEAD
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	781a      	ldrb	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d11b      	bne.n	8003bf4 <HAL_I2C_Mem_Write+0x180>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d017      	beq.n	8003bf4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1aa      	bne.n	8003b52 <HAL_I2C_Mem_Write+0xde>
=======
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	781a      	ldrb	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	1c5a      	adds	r2, r3, #1
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248c:	b29b      	uxth	r3, r3
 800248e:	3b01      	subs	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d11b      	bne.n	80024dc <HAL_I2C_Mem_Write+0x180>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d017      	beq.n	80024dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	781a      	ldrb	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1aa      	bne.n	800243a <HAL_I2C_Mem_Write+0xde>
>>>>>>> FFF
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f9de 	bl	8003fc2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00d      	beq.n	8003c28 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d107      	bne.n	8003c24 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e016      	b.n	8003c56 <HAL_I2C_Mem_Write+0x1e2>
=======
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 f9de 	bl	80028aa <I2C_WaitOnBTFFlagUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00d      	beq.n	8002510 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d107      	bne.n	800250c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800250a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e016      	b.n	800253e <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> FFF
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	e000      	b.n	8003c56 <HAL_I2C_Mem_Write+0x1e2>
=======
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800251e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	e000      	b.n	800253e <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> FFF
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8003c54:	2302      	movs	r3, #2
  }
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	00100002 	.word	0x00100002
 8003c64:	ffff0000 	.word	0xffff0000

08003c68 <I2C_RequestMemoryWrite>:
=======
 800253c:	2302      	movs	r3, #2
  }
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	00100002 	.word	0x00100002
 800254c:	ffff0000 	.word	0xffff0000

08002550 <I2C_RequestMemoryWrite>:
>>>>>>> FFF
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	4608      	mov	r0, r1
 8003c72:	4611      	mov	r1, r2
 8003c74:	461a      	mov	r2, r3
 8003c76:	4603      	mov	r3, r0
 8003c78:	817b      	strh	r3, [r7, #10]
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	813b      	strh	r3, [r7, #8]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f878 	bl	8003d94 <I2C_WaitOnFlagUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00d      	beq.n	8003cc6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb8:	d103      	bne.n	8003cc2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e05f      	b.n	8003d86 <I2C_RequestMemoryWrite+0x11e>
=======
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af02      	add	r7, sp, #8
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	4608      	mov	r0, r1
 800255a:	4611      	mov	r1, r2
 800255c:	461a      	mov	r2, r3
 800255e:	4603      	mov	r3, r0
 8002560:	817b      	strh	r3, [r7, #10]
 8002562:	460b      	mov	r3, r1
 8002564:	813b      	strh	r3, [r7, #8]
 8002566:	4613      	mov	r3, r2
 8002568:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002578:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	2200      	movs	r2, #0
 8002582:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f878 	bl	800267c <I2C_WaitOnFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00d      	beq.n	80025ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025a0:	d103      	bne.n	80025aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e05f      	b.n	800266e <I2C_RequestMemoryWrite+0x11e>
>>>>>>> FFF
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
<<<<<<< HEAD
 8003cc6:	897b      	ldrh	r3, [r7, #10]
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	6a3a      	ldr	r2, [r7, #32]
 8003cda:	492d      	ldr	r1, [pc, #180]	; (8003d90 <I2C_RequestMemoryWrite+0x128>)
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 f8b0 	bl	8003e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e04c      	b.n	8003d86 <I2C_RequestMemoryWrite+0x11e>
=======
 80025ae:	897b      	ldrh	r3, [r7, #10]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	461a      	mov	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	6a3a      	ldr	r2, [r7, #32]
 80025c2:	492d      	ldr	r1, [pc, #180]	; (8002678 <I2C_RequestMemoryWrite+0x128>)
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 f8b0 	bl	800272a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e04c      	b.n	800266e <I2C_RequestMemoryWrite+0x11e>
>>>>>>> FFF
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d04:	6a39      	ldr	r1, [r7, #32]
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f91a 	bl	8003f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00d      	beq.n	8003d2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d107      	bne.n	8003d2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e02b      	b.n	8003d86 <I2C_RequestMemoryWrite+0x11e>
=======
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ec:	6a39      	ldr	r1, [r7, #32]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f91a 	bl	8002828 <I2C_WaitOnTXEFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00d      	beq.n	8002616 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d107      	bne.n	8002612 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002610:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e02b      	b.n	800266e <I2C_RequestMemoryWrite+0x11e>
>>>>>>> FFF
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
<<<<<<< HEAD
 8003d2e:	88fb      	ldrh	r3, [r7, #6]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d105      	bne.n	8003d40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d34:	893b      	ldrh	r3, [r7, #8]
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	611a      	str	r2, [r3, #16]
 8003d3e:	e021      	b.n	8003d84 <I2C_RequestMemoryWrite+0x11c>
=======
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d105      	bne.n	8002628 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800261c:	893b      	ldrh	r3, [r7, #8]
 800261e:	b2da      	uxtb	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	611a      	str	r2, [r3, #16]
 8002626:	e021      	b.n	800266c <I2C_RequestMemoryWrite+0x11c>
>>>>>>> FFF
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
<<<<<<< HEAD
 8003d40:	893b      	ldrh	r3, [r7, #8]
 8003d42:	0a1b      	lsrs	r3, r3, #8
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d50:	6a39      	ldr	r1, [r7, #32]
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 f8f4 	bl	8003f40 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00d      	beq.n	8003d7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d107      	bne.n	8003d76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e005      	b.n	8003d86 <I2C_RequestMemoryWrite+0x11e>
=======
 8002628:	893b      	ldrh	r3, [r7, #8]
 800262a:	0a1b      	lsrs	r3, r3, #8
 800262c:	b29b      	uxth	r3, r3
 800262e:	b2da      	uxtb	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002638:	6a39      	ldr	r1, [r7, #32]
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 f8f4 	bl	8002828 <I2C_WaitOnTXEFlagUntilTimeout>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00d      	beq.n	8002662 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	2b04      	cmp	r3, #4
 800264c:	d107      	bne.n	800265e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800265c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e005      	b.n	800266e <I2C_RequestMemoryWrite+0x11e>
>>>>>>> FFF
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
<<<<<<< HEAD
 8003d7a:	893b      	ldrh	r3, [r7, #8]
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	00010002 	.word	0x00010002

08003d94 <I2C_WaitOnFlagUntilTimeout>:
=======
 8002662:	893b      	ldrh	r3, [r7, #8]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	00010002 	.word	0x00010002

0800267c <I2C_WaitOnFlagUntilTimeout>:
>>>>>>> FFF
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	4613      	mov	r3, r2
 8003da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003da4:	e025      	b.n	8003df2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dac:	d021      	beq.n	8003df2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dae:	f7ff f94d 	bl	800304c <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d302      	bcc.n	8003dc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d116      	bne.n	8003df2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f043 0220 	orr.w	r2, r3, #32
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e023      	b.n	8003e3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	0c1b      	lsrs	r3, r3, #16
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d10d      	bne.n	8003e18 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	43da      	mvns	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	4013      	ands	r3, r2
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	bf0c      	ite	eq
 8003e0e:	2301      	moveq	r3, #1
 8003e10:	2300      	movne	r3, #0
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	e00c      	b.n	8003e32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4013      	ands	r3, r2
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	bf0c      	ite	eq
 8003e2a:	2301      	moveq	r3, #1
 8003e2c:	2300      	movne	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	461a      	mov	r2, r3
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d0b6      	beq.n	8003da6 <I2C_WaitOnFlagUntilTimeout+0x12>
=======
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	4613      	mov	r3, r2
 800268a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800268c:	e025      	b.n	80026da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002694:	d021      	beq.n	80026da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002696:	f7ff f94d 	bl	8001934 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d302      	bcc.n	80026ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d116      	bne.n	80026da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f043 0220 	orr.w	r2, r3, #32
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e023      	b.n	8002722 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	0c1b      	lsrs	r3, r3, #16
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d10d      	bne.n	8002700 <I2C_WaitOnFlagUntilTimeout+0x84>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	43da      	mvns	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4013      	ands	r3, r2
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	bf0c      	ite	eq
 80026f6:	2301      	moveq	r3, #1
 80026f8:	2300      	movne	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	e00c      	b.n	800271a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	43da      	mvns	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4013      	ands	r3, r2
 800270c:	b29b      	uxth	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	bf0c      	ite	eq
 8002712:	2301      	moveq	r3, #1
 8002714:	2300      	movne	r3, #0
 8002716:	b2db      	uxtb	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	429a      	cmp	r2, r3
 800271e:	d0b6      	beq.n	800268e <I2C_WaitOnFlagUntilTimeout+0x12>
>>>>>>> FFF
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
=======
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
>>>>>>> FFF
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b084      	sub	sp, #16
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
 8003e4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e50:	e051      	b.n	8003ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e60:	d123      	bne.n	8003eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	f043 0204 	orr.w	r2, r3, #4
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e046      	b.n	8003f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
=======
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002738:	e051      	b.n	80027de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002748:	d123      	bne.n	8002792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002758:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002762:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f043 0204 	orr.w	r2, r3, #4
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e046      	b.n	8002820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
>>>>>>> FFF
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eb0:	d021      	beq.n	8003ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb2:	f7ff f8cb 	bl	800304c <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d302      	bcc.n	8003ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d116      	bne.n	8003ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f043 0220 	orr.w	r2, r3, #32
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e020      	b.n	8003f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	0c1b      	lsrs	r3, r3, #16
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d10c      	bne.n	8003f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	43da      	mvns	r2, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	bf14      	ite	ne
 8003f12:	2301      	movne	r3, #1
 8003f14:	2300      	moveq	r3, #0
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	e00b      	b.n	8003f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	43da      	mvns	r2, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4013      	ands	r3, r2
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	bf14      	ite	ne
 8003f2c:	2301      	movne	r3, #1
 8003f2e:	2300      	moveq	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d18d      	bne.n	8003e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
=======
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002798:	d021      	beq.n	80027de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800279a:	f7ff f8cb 	bl	8001934 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d302      	bcc.n	80027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d116      	bne.n	80027de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f043 0220 	orr.w	r2, r3, #32
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e020      	b.n	8002820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	0c1b      	lsrs	r3, r3, #16
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d10c      	bne.n	8002802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	43da      	mvns	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4013      	ands	r3, r2
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	bf14      	ite	ne
 80027fa:	2301      	movne	r3, #1
 80027fc:	2300      	moveq	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	e00b      	b.n	800281a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	43da      	mvns	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	4013      	ands	r3, r2
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf14      	ite	ne
 8002814:	2301      	movne	r3, #1
 8002816:	2300      	moveq	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d18d      	bne.n	800273a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
>>>>>>> FFF
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <I2C_WaitOnTXEFlagUntilTimeout>:
=======
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <I2C_WaitOnTXEFlagUntilTimeout>:
>>>>>>> FFF
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f4c:	e02d      	b.n	8003faa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f878 	bl	8004044 <I2C_IsAcknowledgeFailed>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e02d      	b.n	8003fba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
=======
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002834:	e02d      	b.n	8002892 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 f878 	bl	800292c <I2C_IsAcknowledgeFailed>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e02d      	b.n	80028a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
>>>>>>> FFF
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f64:	d021      	beq.n	8003faa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f66:	f7ff f871 	bl	800304c <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d302      	bcc.n	8003f7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d116      	bne.n	8003faa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	f043 0220 	orr.w	r2, r3, #32
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e007      	b.n	8003fba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb4:	2b80      	cmp	r3, #128	; 0x80
 8003fb6:	d1ca      	bne.n	8003f4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
=======
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800284c:	d021      	beq.n	8002892 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284e:	f7ff f871 	bl	8001934 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	429a      	cmp	r2, r3
 800285c:	d302      	bcc.n	8002864 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d116      	bne.n	8002892 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2220      	movs	r2, #32
 800286e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f043 0220 	orr.w	r2, r3, #32
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e007      	b.n	80028a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289c:	2b80      	cmp	r3, #128	; 0x80
 800289e:	d1ca      	bne.n	8002836 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
>>>>>>> FFF
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <I2C_WaitOnBTFFlagUntilTimeout>:
=======
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <I2C_WaitOnBTFFlagUntilTimeout>:
>>>>>>> FFF
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	60f8      	str	r0, [r7, #12]
 8003fca:	60b9      	str	r1, [r7, #8]
 8003fcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fce:	e02d      	b.n	800402c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f837 	bl	8004044 <I2C_IsAcknowledgeFailed>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e02d      	b.n	800403c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
=======
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b084      	sub	sp, #16
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028b6:	e02d      	b.n	8002914 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f837 	bl	800292c <I2C_IsAcknowledgeFailed>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e02d      	b.n	8002924 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
>>>>>>> FFF
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fe6:	d021      	beq.n	800402c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe8:	f7ff f830 	bl	800304c <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d302      	bcc.n	8003ffe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d116      	bne.n	800402c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	f043 0220 	orr.w	r2, r3, #32
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e007      	b.n	800403c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	2b04      	cmp	r3, #4
 8004038:	d1ca      	bne.n	8003fd0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
=======
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ce:	d021      	beq.n	8002914 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d0:	f7ff f830 	bl	8001934 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d302      	bcc.n	80028e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d116      	bne.n	8002914 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f043 0220 	orr.w	r2, r3, #32
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e007      	b.n	8002924 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b04      	cmp	r3, #4
 8002920:	d1ca      	bne.n	80028b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
>>>>>>> FFF
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <I2C_IsAcknowledgeFailed>:
=======
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <I2C_IsAcknowledgeFailed>:
>>>>>>> FFF
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405a:	d11b      	bne.n	8004094 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004064:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	f043 0204 	orr.w	r2, r3, #4
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr

080040a0 <HAL_RCC_OscConfig>:
=======
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002942:	d11b      	bne.n	800297c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800294c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	f043 0204 	orr.w	r2, r3, #4
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <HAL_RCC_OscConfig>:
>>>>>>> FFF
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
=======
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e26c      	b.n	800458c <HAL_RCC_OscConfig+0x4ec>
=======
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e26c      	b.n	8002e74 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> FFF

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 8087 	beq.w	80041ce <HAL_RCC_OscConfig+0x12e>
=======
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 8087 	beq.w	8002ab6 <HAL_RCC_OscConfig+0x12e>
>>>>>>> FFF
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< HEAD
 80040c0:	4b92      	ldr	r3, [pc, #584]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 030c 	and.w	r3, r3, #12
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d00c      	beq.n	80040e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040cc:	4b8f      	ldr	r3, [pc, #572]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 030c 	and.w	r3, r3, #12
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d112      	bne.n	80040fe <HAL_RCC_OscConfig+0x5e>
 80040d8:	4b8c      	ldr	r3, [pc, #560]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e4:	d10b      	bne.n	80040fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e6:	4b89      	ldr	r3, [pc, #548]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d06c      	beq.n	80041cc <HAL_RCC_OscConfig+0x12c>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d168      	bne.n	80041cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e246      	b.n	800458c <HAL_RCC_OscConfig+0x4ec>
=======
 80029a8:	4b92      	ldr	r3, [pc, #584]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 030c 	and.w	r3, r3, #12
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d00c      	beq.n	80029ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029b4:	4b8f      	ldr	r3, [pc, #572]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d112      	bne.n	80029e6 <HAL_RCC_OscConfig+0x5e>
 80029c0:	4b8c      	ldr	r3, [pc, #560]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029cc:	d10b      	bne.n	80029e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ce:	4b89      	ldr	r3, [pc, #548]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d06c      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x12c>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d168      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e246      	b.n	8002e74 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> FFF
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004106:	d106      	bne.n	8004116 <HAL_RCC_OscConfig+0x76>
 8004108:	4b80      	ldr	r3, [pc, #512]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a7f      	ldr	r2, [pc, #508]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 800410e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	e02e      	b.n	8004174 <HAL_RCC_OscConfig+0xd4>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10c      	bne.n	8004138 <HAL_RCC_OscConfig+0x98>
 800411e:	4b7b      	ldr	r3, [pc, #492]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a7a      	ldr	r2, [pc, #488]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 8004124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	4b78      	ldr	r3, [pc, #480]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a77      	ldr	r2, [pc, #476]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 8004130:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	e01d      	b.n	8004174 <HAL_RCC_OscConfig+0xd4>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004140:	d10c      	bne.n	800415c <HAL_RCC_OscConfig+0xbc>
 8004142:	4b72      	ldr	r3, [pc, #456]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a71      	ldr	r2, [pc, #452]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 8004148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	4b6f      	ldr	r3, [pc, #444]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a6e      	ldr	r2, [pc, #440]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 8004154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	e00b      	b.n	8004174 <HAL_RCC_OscConfig+0xd4>
 800415c:	4b6b      	ldr	r3, [pc, #428]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a6a      	ldr	r2, [pc, #424]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 8004162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	4b68      	ldr	r3, [pc, #416]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a67      	ldr	r2, [pc, #412]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 800416e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004172:	6013      	str	r3, [r2, #0]
=======
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ee:	d106      	bne.n	80029fe <HAL_RCC_OscConfig+0x76>
 80029f0:	4b80      	ldr	r3, [pc, #512]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a7f      	ldr	r2, [pc, #508]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	e02e      	b.n	8002a5c <HAL_RCC_OscConfig+0xd4>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10c      	bne.n	8002a20 <HAL_RCC_OscConfig+0x98>
 8002a06:	4b7b      	ldr	r3, [pc, #492]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a7a      	ldr	r2, [pc, #488]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	4b78      	ldr	r3, [pc, #480]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a77      	ldr	r2, [pc, #476]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	e01d      	b.n	8002a5c <HAL_RCC_OscConfig+0xd4>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a28:	d10c      	bne.n	8002a44 <HAL_RCC_OscConfig+0xbc>
 8002a2a:	4b72      	ldr	r3, [pc, #456]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a71      	ldr	r2, [pc, #452]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	4b6f      	ldr	r3, [pc, #444]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a6e      	ldr	r2, [pc, #440]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	e00b      	b.n	8002a5c <HAL_RCC_OscConfig+0xd4>
 8002a44:	4b6b      	ldr	r3, [pc, #428]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a6a      	ldr	r2, [pc, #424]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	4b68      	ldr	r3, [pc, #416]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a67      	ldr	r2, [pc, #412]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a5a:	6013      	str	r3, [r2, #0]
>>>>>>> FFF


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
<<<<<<< HEAD
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d013      	beq.n	80041a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417c:	f7fe ff66 	bl	800304c <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004184:	f7fe ff62 	bl	800304c <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b64      	cmp	r3, #100	; 0x64
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e1fa      	b.n	800458c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004196:	4b5d      	ldr	r3, [pc, #372]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0f0      	beq.n	8004184 <HAL_RCC_OscConfig+0xe4>
 80041a2:	e014      	b.n	80041ce <HAL_RCC_OscConfig+0x12e>
=======
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d013      	beq.n	8002a8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7fe ff66 	bl	8001934 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7fe ff62 	bl	8001934 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e1fa      	b.n	8002e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7e:	4b5d      	ldr	r3, [pc, #372]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0xe4>
 8002a8a:	e014      	b.n	8002ab6 <HAL_RCC_OscConfig+0x12e>
>>>>>>> FFF
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 80041a4:	f7fe ff52 	bl	800304c <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041ac:	f7fe ff4e 	bl	800304c <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b64      	cmp	r3, #100	; 0x64
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e1e6      	b.n	800458c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041be:	4b53      	ldr	r3, [pc, #332]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f0      	bne.n	80041ac <HAL_RCC_OscConfig+0x10c>
 80041ca:	e000      	b.n	80041ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041cc:	bf00      	nop
=======
 8002a8c:	f7fe ff52 	bl	8001934 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a94:	f7fe ff4e 	bl	8001934 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	; 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e1e6      	b.n	8002e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa6:	4b53      	ldr	r3, [pc, #332]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x10c>
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab4:	bf00      	nop
>>>>>>> FFF
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d063      	beq.n	80042a2 <HAL_RCC_OscConfig+0x202>
=======
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d063      	beq.n	8002b8a <HAL_RCC_OscConfig+0x202>
>>>>>>> FFF
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< HEAD
 80041da:	4b4c      	ldr	r3, [pc, #304]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f003 030c 	and.w	r3, r3, #12
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00b      	beq.n	80041fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041e6:	4b49      	ldr	r3, [pc, #292]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d11c      	bne.n	800422c <HAL_RCC_OscConfig+0x18c>
 80041f2:	4b46      	ldr	r3, [pc, #280]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d116      	bne.n	800422c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041fe:	4b43      	ldr	r3, [pc, #268]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d005      	beq.n	8004216 <HAL_RCC_OscConfig+0x176>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d001      	beq.n	8004216 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e1ba      	b.n	800458c <HAL_RCC_OscConfig+0x4ec>
=======
 8002ac2:	4b4c      	ldr	r3, [pc, #304]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00b      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ace:	4b49      	ldr	r3, [pc, #292]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d11c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x18c>
 8002ada:	4b46      	ldr	r3, [pc, #280]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d116      	bne.n	8002b14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae6:	4b43      	ldr	r3, [pc, #268]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_RCC_OscConfig+0x176>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d001      	beq.n	8002afe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e1ba      	b.n	8002e74 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> FFF
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8004216:	4b3d      	ldr	r3, [pc, #244]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	4939      	ldr	r1, [pc, #228]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 8004226:	4313      	orrs	r3, r2
 8004228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800422a:	e03a      	b.n	80042a2 <HAL_RCC_OscConfig+0x202>
=======
 8002afe:	4b3d      	ldr	r3, [pc, #244]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4939      	ldr	r1, [pc, #228]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b12:	e03a      	b.n	8002b8a <HAL_RCC_OscConfig+0x202>
>>>>>>> FFF
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d020      	beq.n	8004276 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004234:	4b36      	ldr	r3, [pc, #216]	; (8004310 <HAL_RCC_OscConfig+0x270>)
 8004236:	2201      	movs	r2, #1
 8004238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423a:	f7fe ff07 	bl	800304c <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004240:	e008      	b.n	8004254 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004242:	f7fe ff03 	bl	800304c <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e19b      	b.n	800458c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004254:	4b2d      	ldr	r3, [pc, #180]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0f0      	beq.n	8004242 <HAL_RCC_OscConfig+0x1a2>
=======
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d020      	beq.n	8002b5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b1c:	4b36      	ldr	r3, [pc, #216]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b22:	f7fe ff07 	bl	8001934 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b2a:	f7fe ff03 	bl	8001934 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e19b      	b.n	8002e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3c:	4b2d      	ldr	r3, [pc, #180]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x1a2>
>>>>>>> FFF
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8004260:	4b2a      	ldr	r3, [pc, #168]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	4927      	ldr	r1, [pc, #156]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 8004270:	4313      	orrs	r3, r2
 8004272:	600b      	str	r3, [r1, #0]
 8004274:	e015      	b.n	80042a2 <HAL_RCC_OscConfig+0x202>
=======
 8002b48:	4b2a      	ldr	r3, [pc, #168]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4927      	ldr	r1, [pc, #156]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	600b      	str	r3, [r1, #0]
 8002b5c:	e015      	b.n	8002b8a <HAL_RCC_OscConfig+0x202>
>>>>>>> FFF
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8004276:	4b26      	ldr	r3, [pc, #152]	; (8004310 <HAL_RCC_OscConfig+0x270>)
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f7fe fee6 	bl	800304c <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004284:	f7fe fee2 	bl	800304c <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e17a      	b.n	800458c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004296:	4b1d      	ldr	r3, [pc, #116]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0x1e4>
=======
 8002b5e:	4b26      	ldr	r3, [pc, #152]	; (8002bf8 <HAL_RCC_OscConfig+0x270>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7fe fee6 	bl	8001934 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b6c:	f7fe fee2 	bl	8001934 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e17a      	b.n	8002e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7e:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x1e4>
>>>>>>> FFF
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d03a      	beq.n	8004324 <HAL_RCC_OscConfig+0x284>
=======
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d03a      	beq.n	8002c0c <HAL_RCC_OscConfig+0x284>
>>>>>>> FFF
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d019      	beq.n	80042ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042b6:	4b17      	ldr	r3, [pc, #92]	; (8004314 <HAL_RCC_OscConfig+0x274>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042bc:	f7fe fec6 	bl	800304c <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042c4:	f7fe fec2 	bl	800304c <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e15a      	b.n	800458c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d6:	4b0d      	ldr	r3, [pc, #52]	; (800430c <HAL_RCC_OscConfig+0x26c>)
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCC_OscConfig+0x224>
=======
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d019      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b9e:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <HAL_RCC_OscConfig+0x274>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba4:	f7fe fec6 	bl	8001934 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bac:	f7fe fec2 	bl	8001934 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e15a      	b.n	8002e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0x224>
>>>>>>> FFF
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
<<<<<<< HEAD
 80042e2:	2001      	movs	r0, #1
 80042e4:	f000 fad8 	bl	8004898 <RCC_Delay>
 80042e8:	e01c      	b.n	8004324 <HAL_RCC_OscConfig+0x284>
=======
 8002bca:	2001      	movs	r0, #1
 8002bcc:	f000 fad8 	bl	8003180 <RCC_Delay>
 8002bd0:	e01c      	b.n	8002c0c <HAL_RCC_OscConfig+0x284>
>>>>>>> FFF
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 80042ea:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <HAL_RCC_OscConfig+0x274>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f0:	f7fe feac 	bl	800304c <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f6:	e00f      	b.n	8004318 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042f8:	f7fe fea8 	bl	800304c <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d908      	bls.n	8004318 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e140      	b.n	800458c <HAL_RCC_OscConfig+0x4ec>
 800430a:	bf00      	nop
 800430c:	40021000 	.word	0x40021000
 8004310:	42420000 	.word	0x42420000
 8004314:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004318:	4b9e      	ldr	r3, [pc, #632]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e9      	bne.n	80042f8 <HAL_RCC_OscConfig+0x258>
=======
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <HAL_RCC_OscConfig+0x274>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd8:	f7fe feac 	bl	8001934 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bde:	e00f      	b.n	8002c00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be0:	f7fe fea8 	bl	8001934 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d908      	bls.n	8002c00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e140      	b.n	8002e74 <HAL_RCC_OscConfig+0x4ec>
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	42420000 	.word	0x42420000
 8002bfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c00:	4b9e      	ldr	r3, [pc, #632]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1e9      	bne.n	8002be0 <HAL_RCC_OscConfig+0x258>
>>>>>>> FFF
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 80a6 	beq.w	800447e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004332:	2300      	movs	r3, #0
 8004334:	75fb      	strb	r3, [r7, #23]
=======
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 80a6 	beq.w	8002d66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	75fb      	strb	r3, [r7, #23]
>>>>>>> FFF
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8004336:	4b97      	ldr	r3, [pc, #604]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10d      	bne.n	800435e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004342:	4b94      	ldr	r3, [pc, #592]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	4a93      	ldr	r2, [pc, #588]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 8004348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800434c:	61d3      	str	r3, [r2, #28]
 800434e:	4b91      	ldr	r3, [pc, #580]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004356:	60bb      	str	r3, [r7, #8]
 8004358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800435a:	2301      	movs	r3, #1
 800435c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435e:	4b8e      	ldr	r3, [pc, #568]	; (8004598 <HAL_RCC_OscConfig+0x4f8>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004366:	2b00      	cmp	r3, #0
 8004368:	d118      	bne.n	800439c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800436a:	4b8b      	ldr	r3, [pc, #556]	; (8004598 <HAL_RCC_OscConfig+0x4f8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a8a      	ldr	r2, [pc, #552]	; (8004598 <HAL_RCC_OscConfig+0x4f8>)
 8004370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004376:	f7fe fe69 	bl	800304c <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800437e:	f7fe fe65 	bl	800304c <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b64      	cmp	r3, #100	; 0x64
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e0fd      	b.n	800458c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004390:	4b81      	ldr	r3, [pc, #516]	; (8004598 <HAL_RCC_OscConfig+0x4f8>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0f0      	beq.n	800437e <HAL_RCC_OscConfig+0x2de>
=======
 8002c1e:	4b97      	ldr	r3, [pc, #604]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10d      	bne.n	8002c46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2a:	4b94      	ldr	r3, [pc, #592]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	4a93      	ldr	r2, [pc, #588]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c34:	61d3      	str	r3, [r2, #28]
 8002c36:	4b91      	ldr	r3, [pc, #580]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c42:	2301      	movs	r3, #1
 8002c44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c46:	4b8e      	ldr	r3, [pc, #568]	; (8002e80 <HAL_RCC_OscConfig+0x4f8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d118      	bne.n	8002c84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c52:	4b8b      	ldr	r3, [pc, #556]	; (8002e80 <HAL_RCC_OscConfig+0x4f8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a8a      	ldr	r2, [pc, #552]	; (8002e80 <HAL_RCC_OscConfig+0x4f8>)
 8002c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c5e:	f7fe fe69 	bl	8001934 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c66:	f7fe fe65 	bl	8001934 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b64      	cmp	r3, #100	; 0x64
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e0fd      	b.n	8002e74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c78:	4b81      	ldr	r3, [pc, #516]	; (8002e80 <HAL_RCC_OscConfig+0x4f8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f0      	beq.n	8002c66 <HAL_RCC_OscConfig+0x2de>
>>>>>>> FFF
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d106      	bne.n	80043b2 <HAL_RCC_OscConfig+0x312>
 80043a4:	4b7b      	ldr	r3, [pc, #492]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	4a7a      	ldr	r2, [pc, #488]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	6213      	str	r3, [r2, #32]
 80043b0:	e02d      	b.n	800440e <HAL_RCC_OscConfig+0x36e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10c      	bne.n	80043d4 <HAL_RCC_OscConfig+0x334>
 80043ba:	4b76      	ldr	r3, [pc, #472]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	4a75      	ldr	r2, [pc, #468]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 80043c0:	f023 0301 	bic.w	r3, r3, #1
 80043c4:	6213      	str	r3, [r2, #32]
 80043c6:	4b73      	ldr	r3, [pc, #460]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	4a72      	ldr	r2, [pc, #456]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 80043cc:	f023 0304 	bic.w	r3, r3, #4
 80043d0:	6213      	str	r3, [r2, #32]
 80043d2:	e01c      	b.n	800440e <HAL_RCC_OscConfig+0x36e>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	2b05      	cmp	r3, #5
 80043da:	d10c      	bne.n	80043f6 <HAL_RCC_OscConfig+0x356>
 80043dc:	4b6d      	ldr	r3, [pc, #436]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	4a6c      	ldr	r2, [pc, #432]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 80043e2:	f043 0304 	orr.w	r3, r3, #4
 80043e6:	6213      	str	r3, [r2, #32]
 80043e8:	4b6a      	ldr	r3, [pc, #424]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	4a69      	ldr	r2, [pc, #420]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 80043ee:	f043 0301 	orr.w	r3, r3, #1
 80043f2:	6213      	str	r3, [r2, #32]
 80043f4:	e00b      	b.n	800440e <HAL_RCC_OscConfig+0x36e>
 80043f6:	4b67      	ldr	r3, [pc, #412]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	4a66      	ldr	r2, [pc, #408]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 80043fc:	f023 0301 	bic.w	r3, r3, #1
 8004400:	6213      	str	r3, [r2, #32]
 8004402:	4b64      	ldr	r3, [pc, #400]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	4a63      	ldr	r2, [pc, #396]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 8004408:	f023 0304 	bic.w	r3, r3, #4
 800440c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d015      	beq.n	8004442 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004416:	f7fe fe19 	bl	800304c <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441c:	e00a      	b.n	8004434 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800441e:	f7fe fe15 	bl	800304c <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	f241 3288 	movw	r2, #5000	; 0x1388
 800442c:	4293      	cmp	r3, r2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e0ab      	b.n	800458c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004434:	4b57      	ldr	r3, [pc, #348]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0ee      	beq.n	800441e <HAL_RCC_OscConfig+0x37e>
 8004440:	e014      	b.n	800446c <HAL_RCC_OscConfig+0x3cc>
=======
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d106      	bne.n	8002c9a <HAL_RCC_OscConfig+0x312>
 8002c8c:	4b7b      	ldr	r3, [pc, #492]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	4a7a      	ldr	r2, [pc, #488]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	6213      	str	r3, [r2, #32]
 8002c98:	e02d      	b.n	8002cf6 <HAL_RCC_OscConfig+0x36e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x334>
 8002ca2:	4b76      	ldr	r3, [pc, #472]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	4a75      	ldr	r2, [pc, #468]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	6213      	str	r3, [r2, #32]
 8002cae:	4b73      	ldr	r3, [pc, #460]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	4a72      	ldr	r2, [pc, #456]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002cb4:	f023 0304 	bic.w	r3, r3, #4
 8002cb8:	6213      	str	r3, [r2, #32]
 8002cba:	e01c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x36e>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	2b05      	cmp	r3, #5
 8002cc2:	d10c      	bne.n	8002cde <HAL_RCC_OscConfig+0x356>
 8002cc4:	4b6d      	ldr	r3, [pc, #436]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	4a6c      	ldr	r2, [pc, #432]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002cca:	f043 0304 	orr.w	r3, r3, #4
 8002cce:	6213      	str	r3, [r2, #32]
 8002cd0:	4b6a      	ldr	r3, [pc, #424]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	4a69      	ldr	r2, [pc, #420]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	6213      	str	r3, [r2, #32]
 8002cdc:	e00b      	b.n	8002cf6 <HAL_RCC_OscConfig+0x36e>
 8002cde:	4b67      	ldr	r3, [pc, #412]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	4a66      	ldr	r2, [pc, #408]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002ce4:	f023 0301 	bic.w	r3, r3, #1
 8002ce8:	6213      	str	r3, [r2, #32]
 8002cea:	4b64      	ldr	r3, [pc, #400]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	4a63      	ldr	r2, [pc, #396]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002cf0:	f023 0304 	bic.w	r3, r3, #4
 8002cf4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d015      	beq.n	8002d2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe fe19 	bl	8001934 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d04:	e00a      	b.n	8002d1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d06:	f7fe fe15 	bl	8001934 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e0ab      	b.n	8002e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1c:	4b57      	ldr	r3, [pc, #348]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0ee      	beq.n	8002d06 <HAL_RCC_OscConfig+0x37e>
 8002d28:	e014      	b.n	8002d54 <HAL_RCC_OscConfig+0x3cc>
>>>>>>> FFF
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8004442:	f7fe fe03 	bl	800304c <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004448:	e00a      	b.n	8004460 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444a:	f7fe fdff 	bl	800304c <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	f241 3288 	movw	r2, #5000	; 0x1388
 8004458:	4293      	cmp	r3, r2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e095      	b.n	800458c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004460:	4b4c      	ldr	r3, [pc, #304]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1ee      	bne.n	800444a <HAL_RCC_OscConfig+0x3aa>
=======
 8002d2a:	f7fe fe03 	bl	8001934 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d30:	e00a      	b.n	8002d48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d32:	f7fe fdff 	bl	8001934 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e095      	b.n	8002e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d48:	4b4c      	ldr	r3, [pc, #304]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1ee      	bne.n	8002d32 <HAL_RCC_OscConfig+0x3aa>
>>>>>>> FFF
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 800446c:	7dfb      	ldrb	r3, [r7, #23]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d105      	bne.n	800447e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004472:	4b48      	ldr	r3, [pc, #288]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	4a47      	ldr	r2, [pc, #284]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 8004478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800447c:	61d3      	str	r3, [r2, #28]
=======
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d105      	bne.n	8002d66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5a:	4b48      	ldr	r3, [pc, #288]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	4a47      	ldr	r2, [pc, #284]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d64:	61d3      	str	r3, [r2, #28]
>>>>>>> FFF

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 8081 	beq.w	800458a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004488:	4b42      	ldr	r3, [pc, #264]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f003 030c 	and.w	r3, r3, #12
 8004490:	2b08      	cmp	r3, #8
 8004492:	d061      	beq.n	8004558 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d146      	bne.n	800452a <HAL_RCC_OscConfig+0x48a>
=======
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 8081 	beq.w	8002e72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d70:	4b42      	ldr	r3, [pc, #264]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d061      	beq.n	8002e40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d146      	bne.n	8002e12 <HAL_RCC_OscConfig+0x48a>
>>>>>>> FFF
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 800449c:	4b3f      	ldr	r3, [pc, #252]	; (800459c <HAL_RCC_OscConfig+0x4fc>)
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a2:	f7fe fdd3 	bl	800304c <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044aa:	f7fe fdcf 	bl	800304c <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e067      	b.n	800458c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044bc:	4b35      	ldr	r3, [pc, #212]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1f0      	bne.n	80044aa <HAL_RCC_OscConfig+0x40a>
=======
 8002d84:	4b3f      	ldr	r3, [pc, #252]	; (8002e84 <HAL_RCC_OscConfig+0x4fc>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8a:	f7fe fdd3 	bl	8001934 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d92:	f7fe fdcf 	bl	8001934 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e067      	b.n	8002e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da4:	4b35      	ldr	r3, [pc, #212]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f0      	bne.n	8002d92 <HAL_RCC_OscConfig+0x40a>
>>>>>>> FFF
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
<<<<<<< HEAD
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d0:	d108      	bne.n	80044e4 <HAL_RCC_OscConfig+0x444>
=======
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db8:	d108      	bne.n	8002dcc <HAL_RCC_OscConfig+0x444>
>>>>>>> FFF
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
<<<<<<< HEAD
 80044d2:	4b30      	ldr	r3, [pc, #192]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	492d      	ldr	r1, [pc, #180]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	604b      	str	r3, [r1, #4]
=======
 8002dba:	4b30      	ldr	r3, [pc, #192]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	492d      	ldr	r1, [pc, #180]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	604b      	str	r3, [r1, #4]
>>>>>>> FFF
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 80044e4:	4b2b      	ldr	r3, [pc, #172]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a19      	ldr	r1, [r3, #32]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	430b      	orrs	r3, r1
 80044f6:	4927      	ldr	r1, [pc, #156]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044fc:	4b27      	ldr	r3, [pc, #156]	; (800459c <HAL_RCC_OscConfig+0x4fc>)
 80044fe:	2201      	movs	r2, #1
 8004500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004502:	f7fe fda3 	bl	800304c <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450a:	f7fe fd9f 	bl	800304c <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e037      	b.n	800458c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800451c:	4b1d      	ldr	r3, [pc, #116]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0f0      	beq.n	800450a <HAL_RCC_OscConfig+0x46a>
 8004528:	e02f      	b.n	800458a <HAL_RCC_OscConfig+0x4ea>
=======
 8002dcc:	4b2b      	ldr	r3, [pc, #172]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a19      	ldr	r1, [r3, #32]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	4927      	ldr	r1, [pc, #156]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002de4:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <HAL_RCC_OscConfig+0x4fc>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dea:	f7fe fda3 	bl	8001934 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df2:	f7fe fd9f 	bl	8001934 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e037      	b.n	8002e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e04:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0f0      	beq.n	8002df2 <HAL_RCC_OscConfig+0x46a>
 8002e10:	e02f      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ea>
>>>>>>> FFF
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 800452a:	4b1c      	ldr	r3, [pc, #112]	; (800459c <HAL_RCC_OscConfig+0x4fc>)
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004530:	f7fe fd8c 	bl	800304c <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004538:	f7fe fd88 	bl	800304c <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e020      	b.n	800458c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800454a:	4b12      	ldr	r3, [pc, #72]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f0      	bne.n	8004538 <HAL_RCC_OscConfig+0x498>
 8004556:	e018      	b.n	800458a <HAL_RCC_OscConfig+0x4ea>
=======
 8002e12:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <HAL_RCC_OscConfig+0x4fc>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e18:	f7fe fd8c 	bl	8001934 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e20:	f7fe fd88 	bl	8001934 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e020      	b.n	8002e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e32:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0x498>
 8002e3e:	e018      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ea>
>>>>>>> FFF
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e013      	b.n	800458c <HAL_RCC_OscConfig+0x4ec>
=======
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e013      	b.n	8002e74 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> FFF
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
<<<<<<< HEAD
 8004564:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <HAL_RCC_OscConfig+0x4f4>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	429a      	cmp	r2, r3
 8004576:	d106      	bne.n	8004586 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004582:	429a      	cmp	r2, r3
 8004584:	d001      	beq.n	800458a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <HAL_RCC_OscConfig+0x4ec>
=======
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <HAL_RCC_OscConfig+0x4f4>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d106      	bne.n	8002e6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d001      	beq.n	8002e72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> FFF
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40021000 	.word	0x40021000
 8004598:	40007000 	.word	0x40007000
 800459c:	42420060 	.word	0x42420060

080045a0 <HAL_RCC_ClockConfig>:
=======
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	40007000 	.word	0x40007000
 8002e84:	42420060 	.word	0x42420060

08002e88 <HAL_RCC_ClockConfig>:
>>>>>>> FFF
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
=======
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
>>>>>>> FFF
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0d0      	b.n	8004756 <HAL_RCC_ClockConfig+0x1b6>
=======
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0d0      	b.n	800303e <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> FFF
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80045b4:	4b6a      	ldr	r3, [pc, #424]	; (8004760 <HAL_RCC_ClockConfig+0x1c0>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d910      	bls.n	80045e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c2:	4b67      	ldr	r3, [pc, #412]	; (8004760 <HAL_RCC_ClockConfig+0x1c0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f023 0207 	bic.w	r2, r3, #7
 80045ca:	4965      	ldr	r1, [pc, #404]	; (8004760 <HAL_RCC_ClockConfig+0x1c0>)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]
=======
 8002e9c:	4b6a      	ldr	r3, [pc, #424]	; (8003048 <HAL_RCC_ClockConfig+0x1c0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d910      	bls.n	8002ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b67      	ldr	r3, [pc, #412]	; (8003048 <HAL_RCC_ClockConfig+0x1c0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 0207 	bic.w	r2, r3, #7
 8002eb2:	4965      	ldr	r1, [pc, #404]	; (8003048 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]
>>>>>>> FFF

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80045d2:	4b63      	ldr	r3, [pc, #396]	; (8004760 <HAL_RCC_ClockConfig+0x1c0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d001      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e0b8      	b.n	8004756 <HAL_RCC_ClockConfig+0x1b6>
=======
 8002eba:	4b63      	ldr	r3, [pc, #396]	; (8003048 <HAL_RCC_ClockConfig+0x1c0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0b8      	b.n	800303e <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> FFF
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d020      	beq.n	8004632 <HAL_RCC_ClockConfig+0x92>
=======
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d020      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x92>
>>>>>>> FFF
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045fc:	4b59      	ldr	r3, [pc, #356]	; (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	4a58      	ldr	r2, [pc, #352]	; (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 8004602:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004606:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0308 	and.w	r3, r3, #8
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004614:	4b53      	ldr	r3, [pc, #332]	; (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	4a52      	ldr	r2, [pc, #328]	; (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 800461a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800461e:	6053      	str	r3, [r2, #4]
=======
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ee4:	4b59      	ldr	r3, [pc, #356]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	4a58      	ldr	r2, [pc, #352]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002eea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002eee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002efc:	4b53      	ldr	r3, [pc, #332]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	4a52      	ldr	r2, [pc, #328]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002f02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f06:	6053      	str	r3, [r2, #4]
>>>>>>> FFF
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8004620:	4b50      	ldr	r3, [pc, #320]	; (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	494d      	ldr	r1, [pc, #308]	; (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 800462e:	4313      	orrs	r3, r2
 8004630:	604b      	str	r3, [r1, #4]
=======
 8002f08:	4b50      	ldr	r3, [pc, #320]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	494d      	ldr	r1, [pc, #308]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	604b      	str	r3, [r1, #4]
>>>>>>> FFF
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d040      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x120>
=======
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d040      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x120>
>>>>>>> FFF
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d107      	bne.n	8004656 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004646:	4b47      	ldr	r3, [pc, #284]	; (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d115      	bne.n	800467e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e07f      	b.n	8004756 <HAL_RCC_ClockConfig+0x1b6>
=======
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d107      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	4b47      	ldr	r3, [pc, #284]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d115      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e07f      	b.n	800303e <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> FFF
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d107      	bne.n	800466e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465e:	4b41      	ldr	r3, [pc, #260]	; (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d109      	bne.n	800467e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e073      	b.n	8004756 <HAL_RCC_ClockConfig+0x1b6>
=======
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d107      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f46:	4b41      	ldr	r3, [pc, #260]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e073      	b.n	800303e <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> FFF
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 800466e:	4b3d      	ldr	r3, [pc, #244]	; (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e06b      	b.n	8004756 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800467e:	4b39      	ldr	r3, [pc, #228]	; (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f023 0203 	bic.w	r2, r3, #3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	4936      	ldr	r1, [pc, #216]	; (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 800468c:	4313      	orrs	r3, r2
 800468e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004690:	f7fe fcdc 	bl	800304c <HAL_GetTick>
 8004694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004696:	e00a      	b.n	80046ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004698:	f7fe fcd8 	bl	800304c <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e053      	b.n	8004756 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ae:	4b2d      	ldr	r3, [pc, #180]	; (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 020c 	and.w	r2, r3, #12
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	429a      	cmp	r2, r3
 80046be:	d1eb      	bne.n	8004698 <HAL_RCC_ClockConfig+0xf8>
=======
 8002f56:	4b3d      	ldr	r3, [pc, #244]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e06b      	b.n	800303e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f66:	4b39      	ldr	r3, [pc, #228]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f023 0203 	bic.w	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4936      	ldr	r1, [pc, #216]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f78:	f7fe fcdc 	bl	8001934 <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f80:	f7fe fcd8 	bl	8001934 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e053      	b.n	800303e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f96:	4b2d      	ldr	r3, [pc, #180]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f003 020c 	and.w	r2, r3, #12
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d1eb      	bne.n	8002f80 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> FFF
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80046c0:	4b27      	ldr	r3, [pc, #156]	; (8004760 <HAL_RCC_ClockConfig+0x1c0>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d210      	bcs.n	80046f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ce:	4b24      	ldr	r3, [pc, #144]	; (8004760 <HAL_RCC_ClockConfig+0x1c0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f023 0207 	bic.w	r2, r3, #7
 80046d6:	4922      	ldr	r1, [pc, #136]	; (8004760 <HAL_RCC_ClockConfig+0x1c0>)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	4313      	orrs	r3, r2
 80046dc:	600b      	str	r3, [r1, #0]
=======
 8002fa8:	4b27      	ldr	r3, [pc, #156]	; (8003048 <HAL_RCC_ClockConfig+0x1c0>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d210      	bcs.n	8002fd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb6:	4b24      	ldr	r3, [pc, #144]	; (8003048 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 0207 	bic.w	r2, r3, #7
 8002fbe:	4922      	ldr	r1, [pc, #136]	; (8003048 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	600b      	str	r3, [r1, #0]
>>>>>>> FFF

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80046de:	4b20      	ldr	r3, [pc, #128]	; (8004760 <HAL_RCC_ClockConfig+0x1c0>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d001      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e032      	b.n	8004756 <HAL_RCC_ClockConfig+0x1b6>
=======
 8002fc6:	4b20      	ldr	r3, [pc, #128]	; (8003048 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e032      	b.n	800303e <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> FFF
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046fc:	4b19      	ldr	r3, [pc, #100]	; (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	4916      	ldr	r1, [pc, #88]	; (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 800470a:	4313      	orrs	r3, r2
 800470c:	604b      	str	r3, [r1, #4]
=======
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe4:	4b19      	ldr	r3, [pc, #100]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4916      	ldr	r1, [pc, #88]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	604b      	str	r3, [r1, #4]
>>>>>>> FFF
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d009      	beq.n	800472e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800471a:	4b12      	ldr	r3, [pc, #72]	; (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	490e      	ldr	r1, [pc, #56]	; (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 800472a:	4313      	orrs	r3, r2
 800472c:	604b      	str	r3, [r1, #4]
=======
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d009      	beq.n	8003016 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	490e      	ldr	r1, [pc, #56]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
>>>>>>> FFF
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 800472e:	f000 f821 	bl	8004774 <HAL_RCC_GetSysClockFreq>
 8004732:	4602      	mov	r2, r0
 8004734:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	091b      	lsrs	r3, r3, #4
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	490a      	ldr	r1, [pc, #40]	; (8004768 <HAL_RCC_ClockConfig+0x1c8>)
 8004740:	5ccb      	ldrb	r3, [r1, r3]
 8004742:	fa22 f303 	lsr.w	r3, r2, r3
 8004746:	4a09      	ldr	r2, [pc, #36]	; (800476c <HAL_RCC_ClockConfig+0x1cc>)
 8004748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800474a:	4b09      	ldr	r3, [pc, #36]	; (8004770 <HAL_RCC_ClockConfig+0x1d0>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe fc3a 	bl	8002fc8 <HAL_InitTick>

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40022000 	.word	0x40022000
 8004764:	40021000 	.word	0x40021000
 8004768:	080077f0 	.word	0x080077f0
 800476c:	20000024 	.word	0x20000024
 8004770:	20000040 	.word	0x20000040

08004774 <HAL_RCC_GetSysClockFreq>:
=======
 8003016:	f000 f821 	bl	800305c <HAL_RCC_GetSysClockFreq>
 800301a:	4602      	mov	r2, r0
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	091b      	lsrs	r3, r3, #4
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	490a      	ldr	r1, [pc, #40]	; (8003050 <HAL_RCC_ClockConfig+0x1c8>)
 8003028:	5ccb      	ldrb	r3, [r1, r3]
 800302a:	fa22 f303 	lsr.w	r3, r2, r3
 800302e:	4a09      	ldr	r2, [pc, #36]	; (8003054 <HAL_RCC_ClockConfig+0x1cc>)
 8003030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003032:	4b09      	ldr	r3, [pc, #36]	; (8003058 <HAL_RCC_ClockConfig+0x1d0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fc3a 	bl	80018b0 <HAL_InitTick>

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40022000 	.word	0x40022000
 800304c:	40021000 	.word	0x40021000
 8003050:	08005f3c 	.word	0x08005f3c
 8003054:	20000018 	.word	0x20000018
 8003058:	2000001c 	.word	0x2000001c

0800305c <HAL_RCC_GetSysClockFreq>:
>>>>>>> FFF
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8004774:	b490      	push	{r4, r7}
 8004776:	b08a      	sub	sp, #40	; 0x28
 8004778:	af00      	add	r7, sp, #0
=======
 800305c:	b490      	push	{r4, r7}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af00      	add	r7, sp, #0
>>>>>>> FFF
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
<<<<<<< HEAD
 800477a:	4b2a      	ldr	r3, [pc, #168]	; (8004824 <HAL_RCC_GetSysClockFreq+0xb0>)
 800477c:	1d3c      	adds	r4, r7, #4
 800477e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004780:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
=======
 8003062:	4b2a      	ldr	r3, [pc, #168]	; (800310c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003064:	1d3c      	adds	r4, r7, #4
 8003066:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003068:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
>>>>>>> FFF
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
<<<<<<< HEAD
 8004784:	f240 2301 	movw	r3, #513	; 0x201
 8004788:	803b      	strh	r3, [r7, #0]
=======
 800306c:	f240 2301 	movw	r3, #513	; 0x201
 8003070:	803b      	strh	r3, [r7, #0]
>>>>>>> FFF
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
<<<<<<< HEAD
 800478a:	2300      	movs	r3, #0
 800478c:	61fb      	str	r3, [r7, #28]
 800478e:	2300      	movs	r3, #0
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	2300      	movs	r3, #0
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	623b      	str	r3, [r7, #32]
=======
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	2300      	movs	r3, #0
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	623b      	str	r3, [r7, #32]
>>>>>>> FFF
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
<<<<<<< HEAD
 800479e:	4b22      	ldr	r3, [pc, #136]	; (8004828 <HAL_RCC_GetSysClockFreq+0xb4>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	f003 030c 	and.w	r3, r3, #12
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d002      	beq.n	80047b4 <HAL_RCC_GetSysClockFreq+0x40>
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d003      	beq.n	80047ba <HAL_RCC_GetSysClockFreq+0x46>
 80047b2:	e02d      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x9c>
=======
 8003086:	4b22      	ldr	r3, [pc, #136]	; (8003110 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b04      	cmp	r3, #4
 8003094:	d002      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0x40>
 8003096:	2b08      	cmp	r3, #8
 8003098:	d003      	beq.n	80030a2 <HAL_RCC_GetSysClockFreq+0x46>
 800309a:	e02d      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x9c>
>>>>>>> FFF
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 80047b4:	4b1d      	ldr	r3, [pc, #116]	; (800482c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047b6:	623b      	str	r3, [r7, #32]
      break;
 80047b8:	e02d      	b.n	8004816 <HAL_RCC_GetSysClockFreq+0xa2>
=======
 800309c:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <HAL_RCC_GetSysClockFreq+0xb8>)
 800309e:	623b      	str	r3, [r7, #32]
      break;
 80030a0:	e02d      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0xa2>
>>>>>>> FFF
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
<<<<<<< HEAD
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	0c9b      	lsrs	r3, r3, #18
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80047c6:	4413      	add	r3, r2
 80047c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80047cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d013      	beq.n	8004800 <HAL_RCC_GetSysClockFreq+0x8c>
=======
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	0c9b      	lsrs	r3, r3, #18
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030ae:	4413      	add	r3, r2
 80030b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d013      	beq.n	80030e8 <HAL_RCC_GetSysClockFreq+0x8c>
>>>>>>> FFF
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
<<<<<<< HEAD
 80047d8:	4b13      	ldr	r3, [pc, #76]	; (8004828 <HAL_RCC_GetSysClockFreq+0xb4>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	0c5b      	lsrs	r3, r3, #17
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80047e6:	4413      	add	r3, r2
 80047e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80047ec:	61bb      	str	r3, [r7, #24]
=======
 80030c0:	4b13      	ldr	r3, [pc, #76]	; (8003110 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	0c5b      	lsrs	r3, r3, #17
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030ce:	4413      	add	r3, r2
 80030d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030d4:	61bb      	str	r3, [r7, #24]
>>>>>>> FFF
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
<<<<<<< HEAD
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	4a0e      	ldr	r2, [pc, #56]	; (800482c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047f2:	fb02 f203 	mul.w	r2, r2, r3
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
 80047fe:	e004      	b.n	800480a <HAL_RCC_GetSysClockFreq+0x96>
=======
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	4a0e      	ldr	r2, [pc, #56]	; (8003114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030da:	fb02 f203 	mul.w	r2, r2, r3
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
 80030e6:	e004      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0x96>
>>>>>>> FFF
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
<<<<<<< HEAD
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	4a0b      	ldr	r2, [pc, #44]	; (8004830 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004804:	fb02 f303 	mul.w	r3, r2, r3
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	623b      	str	r3, [r7, #32]
      break;
 800480e:	e002      	b.n	8004816 <HAL_RCC_GetSysClockFreq+0xa2>
=======
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	4a0b      	ldr	r2, [pc, #44]	; (8003118 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030ec:	fb02 f303 	mul.w	r3, r2, r3
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	623b      	str	r3, [r7, #32]
      break;
 80030f6:	e002      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0xa2>
>>>>>>> FFF
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8004810:	4b06      	ldr	r3, [pc, #24]	; (800482c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004812:	623b      	str	r3, [r7, #32]
      break;
 8004814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004816:	6a3b      	ldr	r3, [r7, #32]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3728      	adds	r7, #40	; 0x28
 800481c:	46bd      	mov	sp, r7
 800481e:	bc90      	pop	{r4, r7}
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	08007074 	.word	0x08007074
 8004828:	40021000 	.word	0x40021000
 800482c:	007a1200 	.word	0x007a1200
 8004830:	003d0900 	.word	0x003d0900

08004834 <HAL_RCC_GetHCLKFreq>:
=======
 80030f8:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030fa:	623b      	str	r3, [r7, #32]
      break;
 80030fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030fe:	6a3b      	ldr	r3, [r7, #32]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3728      	adds	r7, #40	; 0x28
 8003104:	46bd      	mov	sp, r7
 8003106:	bc90      	pop	{r4, r7}
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	080057c0 	.word	0x080057c0
 8003110:	40021000 	.word	0x40021000
 8003114:	007a1200 	.word	0x007a1200
 8003118:	003d0900 	.word	0x003d0900

0800311c <HAL_RCC_GetHCLKFreq>:
>>>>>>> FFF
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004838:	4b02      	ldr	r3, [pc, #8]	; (8004844 <HAL_RCC_GetHCLKFreq+0x10>)
 800483a:	681b      	ldr	r3, [r3, #0]
}
 800483c:	4618      	mov	r0, r3
 800483e:	46bd      	mov	sp, r7
 8004840:	bc80      	pop	{r7}
 8004842:	4770      	bx	lr
 8004844:	20000024 	.word	0x20000024

08004848 <HAL_RCC_GetPCLK1Freq>:
=======
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003120:	4b02      	ldr	r3, [pc, #8]	; (800312c <HAL_RCC_GetHCLKFreq+0x10>)
 8003122:	681b      	ldr	r3, [r3, #0]
}
 8003124:	4618      	mov	r0, r3
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr
 800312c:	20000018 	.word	0x20000018

08003130 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> FFF
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800484c:	f7ff fff2 	bl	8004834 <HAL_RCC_GetHCLKFreq>
 8004850:	4602      	mov	r2, r0
 8004852:	4b05      	ldr	r3, [pc, #20]	; (8004868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	0a1b      	lsrs	r3, r3, #8
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	4903      	ldr	r1, [pc, #12]	; (800486c <HAL_RCC_GetPCLK1Freq+0x24>)
 800485e:	5ccb      	ldrb	r3, [r1, r3]
 8004860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004864:	4618      	mov	r0, r3
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40021000 	.word	0x40021000
 800486c:	08007800 	.word	0x08007800

08004870 <HAL_RCC_GetPCLK2Freq>:
=======
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003134:	f7ff fff2 	bl	800311c <HAL_RCC_GetHCLKFreq>
 8003138:	4602      	mov	r2, r0
 800313a:	4b05      	ldr	r3, [pc, #20]	; (8003150 <HAL_RCC_GetPCLK1Freq+0x20>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	0a1b      	lsrs	r3, r3, #8
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	4903      	ldr	r1, [pc, #12]	; (8003154 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003146:	5ccb      	ldrb	r3, [r1, r3]
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800314c:	4618      	mov	r0, r3
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40021000 	.word	0x40021000
 8003154:	08005f4c 	.word	0x08005f4c

08003158 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> FFF
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004874:	f7ff ffde 	bl	8004834 <HAL_RCC_GetHCLKFreq>
 8004878:	4602      	mov	r2, r0
 800487a:	4b05      	ldr	r3, [pc, #20]	; (8004890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	0adb      	lsrs	r3, r3, #11
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	4903      	ldr	r1, [pc, #12]	; (8004894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004886:	5ccb      	ldrb	r3, [r1, r3]
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800488c:	4618      	mov	r0, r3
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40021000 	.word	0x40021000
 8004894:	08007800 	.word	0x08007800

08004898 <RCC_Delay>:
=======
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800315c:	f7ff ffde 	bl	800311c <HAL_RCC_GetHCLKFreq>
 8003160:	4602      	mov	r2, r0
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	0adb      	lsrs	r3, r3, #11
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	4903      	ldr	r1, [pc, #12]	; (800317c <HAL_RCC_GetPCLK2Freq+0x24>)
 800316e:	5ccb      	ldrb	r3, [r1, r3]
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003174:	4618      	mov	r0, r3
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021000 	.word	0x40021000
 800317c:	08005f4c 	.word	0x08005f4c

08003180 <RCC_Delay>:
>>>>>>> FFF
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
<<<<<<< HEAD
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80048a0:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <RCC_Delay+0x34>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a0a      	ldr	r2, [pc, #40]	; (80048d0 <RCC_Delay+0x38>)
 80048a6:	fba2 2303 	umull	r2, r3, r2, r3
 80048aa:	0a5b      	lsrs	r3, r3, #9
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	fb02 f303 	mul.w	r3, r2, r3
 80048b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80048b4:	bf00      	nop
  }
  while (Delay --);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	1e5a      	subs	r2, r3, #1
 80048ba:	60fa      	str	r2, [r7, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1f9      	bne.n	80048b4 <RCC_Delay+0x1c>
}
 80048c0:	bf00      	nop
 80048c2:	bf00      	nop
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr
 80048cc:	20000024 	.word	0x20000024
 80048d0:	10624dd3 	.word	0x10624dd3

080048d4 <HAL_SPI_Init>:
=======
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003188:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <RCC_Delay+0x34>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a0a      	ldr	r2, [pc, #40]	; (80031b8 <RCC_Delay+0x38>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	0a5b      	lsrs	r3, r3, #9
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	fb02 f303 	mul.w	r3, r2, r3
 800319a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800319c:	bf00      	nop
  }
  while (Delay --);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1e5a      	subs	r2, r3, #1
 80031a2:	60fa      	str	r2, [r7, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1f9      	bne.n	800319c <RCC_Delay+0x1c>
}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	20000018 	.word	0x20000018
 80031b8:	10624dd3 	.word	0x10624dd3

080031bc <HAL_SPI_Init>:
>>>>>>> FFF
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e076      	b.n	80049d4 <HAL_SPI_Init+0x100>
=======
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e076      	b.n	80032bc <HAL_SPI_Init+0x100>
>>>>>>> FFF
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< HEAD
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d108      	bne.n	8004900 <HAL_SPI_Init+0x2c>
=======
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d108      	bne.n	80031e8 <HAL_SPI_Init+0x2c>
>>>>>>> FFF
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< HEAD
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048f6:	d009      	beq.n	800490c <HAL_SPI_Init+0x38>
=======
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031de:	d009      	beq.n	80031f4 <HAL_SPI_Init+0x38>
>>>>>>> FFF
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< HEAD
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	61da      	str	r2, [r3, #28]
 80048fe:	e005      	b.n	800490c <HAL_SPI_Init+0x38>
=======
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	61da      	str	r2, [r3, #28]
 80031e6:	e005      	b.n	80031f4 <HAL_SPI_Init+0x38>
>>>>>>> FFF
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< HEAD
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	615a      	str	r2, [r3, #20]
=======
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	615a      	str	r2, [r3, #20]
>>>>>>> FFF
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> FFF

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< HEAD
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fd f960 	bl	8001bec <HAL_SPI_MspInit>
=======
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fe f8ae 	bl	8001370 <HAL_SPI_MspInit>
>>>>>>> FFF
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< HEAD
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004942:	601a      	str	r2, [r3, #0]
=======
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800322a:	601a      	str	r2, [r3, #0]
>>>>>>> FFF

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< HEAD
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800497c:	431a      	orrs	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004990:	ea42 0103 	orr.w	r1, r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004998:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	601a      	str	r2, [r3, #0]
=======
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003278:	ea42 0103 	orr.w	r1, r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003280:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	601a      	str	r2, [r3, #0]
>>>>>>> FFF
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
<<<<<<< HEAD
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	0c1a      	lsrs	r2, r3, #16
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f002 0204 	and.w	r2, r2, #4
 80049b2:	605a      	str	r2, [r3, #4]
=======
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	0c1a      	lsrs	r2, r3, #16
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f002 0204 	and.w	r2, r2, #4
 800329a:	605a      	str	r2, [r3, #4]
>>>>>>> FFF
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< HEAD
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	69da      	ldr	r2, [r3, #28]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_SPI_Transmit>:
=======
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	69da      	ldr	r2, [r3, #28]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_SPI_Transmit>:
>>>>>>> FFF
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 80049dc:	b580      	push	{r7, lr}
 80049de:	b088      	sub	sp, #32
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	603b      	str	r3, [r7, #0]
 80049e8:	4613      	mov	r3, r2
 80049ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	77fb      	strb	r3, [r7, #31]
=======
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	4613      	mov	r3, r2
 80032d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	77fb      	strb	r3, [r7, #31]
>>>>>>> FFF

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <HAL_SPI_Transmit+0x22>
 80049fa:	2302      	movs	r3, #2
 80049fc:	e126      	b.n	8004c4c <HAL_SPI_Transmit+0x270>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a06:	f7fe fb21 	bl	800304c <HAL_GetTick>
 8004a0a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a0c:	88fb      	ldrh	r3, [r7, #6]
 8004a0e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d002      	beq.n	8004a22 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a20:	e10b      	b.n	8004c3a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <HAL_SPI_Transmit+0x52>
 8004a28:	88fb      	ldrh	r3, [r7, #6]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d102      	bne.n	8004a34 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a32:	e102      	b.n	8004c3a <HAL_SPI_Transmit+0x25e>
=======
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_SPI_Transmit+0x22>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e126      	b.n	8003534 <HAL_SPI_Transmit+0x270>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032ee:	f7fe fb21 	bl	8001934 <HAL_GetTick>
 80032f2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d002      	beq.n	800330a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003304:	2302      	movs	r3, #2
 8003306:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003308:	e10b      	b.n	8003522 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <HAL_SPI_Transmit+0x52>
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d102      	bne.n	800331c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	77fb      	strb	r3, [r7, #31]
    goto error;
 800331a:	e102      	b.n	8003522 <HAL_SPI_Transmit+0x25e>
>>>>>>> FFF
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
<<<<<<< HEAD
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2203      	movs	r2, #3
 8004a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	88fa      	ldrh	r2, [r7, #6]
 8004a4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	88fa      	ldrh	r2, [r7, #6]
 8004a52:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a7a:	d10f      	bne.n	8004a9c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a9a:	601a      	str	r2, [r3, #0]
=======
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2203      	movs	r2, #3
 8003320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	88fa      	ldrh	r2, [r7, #6]
 8003334:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	88fa      	ldrh	r2, [r7, #6]
 800333a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003362:	d10f      	bne.n	8003384 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003372:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003382:	601a      	str	r2, [r3, #0]
>>>>>>> FFF
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa6:	2b40      	cmp	r3, #64	; 0x40
 8004aa8:	d007      	beq.n	8004aba <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ab8:	601a      	str	r2, [r3, #0]
=======
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338e:	2b40      	cmp	r3, #64	; 0x40
 8003390:	d007      	beq.n	80033a2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033a0:	601a      	str	r2, [r3, #0]
>>>>>>> FFF
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
<<<<<<< HEAD
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ac2:	d14b      	bne.n	8004b5c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <HAL_SPI_Transmit+0xf6>
 8004acc:	8afb      	ldrh	r3, [r7, #22]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d13e      	bne.n	8004b50 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	881a      	ldrh	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	1c9a      	adds	r2, r3, #2
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	3b01      	subs	r3, #1
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004af6:	e02b      	b.n	8004b50 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d112      	bne.n	8004b2c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0a:	881a      	ldrh	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b16:	1c9a      	adds	r2, r3, #2
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b2a:	e011      	b.n	8004b50 <HAL_SPI_Transmit+0x174>
=======
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033aa:	d14b      	bne.n	8003444 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <HAL_SPI_Transmit+0xf6>
 80033b4:	8afb      	ldrh	r3, [r7, #22]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d13e      	bne.n	8003438 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	881a      	ldrh	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	1c9a      	adds	r2, r3, #2
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033de:	e02b      	b.n	8003438 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d112      	bne.n	8003414 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	881a      	ldrh	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	1c9a      	adds	r2, r3, #2
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003408:	b29b      	uxth	r3, r3
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	86da      	strh	r2, [r3, #54]	; 0x36
 8003412:	e011      	b.n	8003438 <HAL_SPI_Transmit+0x174>
>>>>>>> FFF
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 8004b2c:	f7fe fa8e 	bl	800304c <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d803      	bhi.n	8004b44 <HAL_SPI_Transmit+0x168>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b42:	d102      	bne.n	8004b4a <HAL_SPI_Transmit+0x16e>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d102      	bne.n	8004b50 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b4e:	e074      	b.n	8004c3a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1ce      	bne.n	8004af8 <HAL_SPI_Transmit+0x11c>
 8004b5a:	e04c      	b.n	8004bf6 <HAL_SPI_Transmit+0x21a>
=======
 8003414:	f7fe fa8e 	bl	8001934 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d803      	bhi.n	800342c <HAL_SPI_Transmit+0x168>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800342a:	d102      	bne.n	8003432 <HAL_SPI_Transmit+0x16e>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d102      	bne.n	8003438 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003436:	e074      	b.n	8003522 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1ce      	bne.n	80033e0 <HAL_SPI_Transmit+0x11c>
 8003442:	e04c      	b.n	80034de <HAL_SPI_Transmit+0x21a>
>>>>>>> FFF
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< HEAD
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <HAL_SPI_Transmit+0x18e>
 8004b64:	8afb      	ldrh	r3, [r7, #22]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d140      	bne.n	8004bec <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	330c      	adds	r3, #12
 8004b74:	7812      	ldrb	r2, [r2, #0]
 8004b76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b90:	e02c      	b.n	8004bec <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d113      	bne.n	8004bc8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	330c      	adds	r3, #12
 8004baa:	7812      	ldrb	r2, [r2, #0]
 8004bac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bc6:	e011      	b.n	8004bec <HAL_SPI_Transmit+0x210>
=======
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HAL_SPI_Transmit+0x18e>
 800344c:	8afb      	ldrh	r3, [r7, #22]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d140      	bne.n	80034d4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	330c      	adds	r3, #12
 800345c:	7812      	ldrb	r2, [r2, #0]
 800345e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003478:	e02c      	b.n	80034d4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b02      	cmp	r3, #2
 8003486:	d113      	bne.n	80034b0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	330c      	adds	r3, #12
 8003492:	7812      	ldrb	r2, [r2, #0]
 8003494:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80034ae:	e011      	b.n	80034d4 <HAL_SPI_Transmit+0x210>
>>>>>>> FFF
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 8004bc8:	f7fe fa40 	bl	800304c <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d803      	bhi.n	8004be0 <HAL_SPI_Transmit+0x204>
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bde:	d102      	bne.n	8004be6 <HAL_SPI_Transmit+0x20a>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d102      	bne.n	8004bec <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bea:	e026      	b.n	8004c3a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1cd      	bne.n	8004b92 <HAL_SPI_Transmit+0x1b6>
=======
 80034b0:	f7fe fa40 	bl	8001934 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d803      	bhi.n	80034c8 <HAL_SPI_Transmit+0x204>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034c6:	d102      	bne.n	80034ce <HAL_SPI_Transmit+0x20a>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d102      	bne.n	80034d4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034d2:	e026      	b.n	8003522 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1cd      	bne.n	800347a <HAL_SPI_Transmit+0x1b6>
>>>>>>> FFF
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	6839      	ldr	r1, [r7, #0]
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 fbb8 	bl	8005370 <SPI_EndRxTxTransaction>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	6839      	ldr	r1, [r7, #0]
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 fbb8 	bl	8003c58 <SPI_EndRxTxTransaction>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2220      	movs	r2, #32
 80034f2:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> FFF
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< HEAD
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c14:	2300      	movs	r3, #0
 8004c16:	613b      	str	r3, [r7, #16]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	613b      	str	r3, [r7, #16]
 8004c28:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d002      	beq.n	8004c38 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	77fb      	strb	r3, [r7, #31]
 8004c36:	e000      	b.n	8004c3a <HAL_SPI_Transmit+0x25e>
  }

error:
 8004c38:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3720      	adds	r7, #32
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_SPI_Receive>:
=======
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10a      	bne.n	8003512 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034fc:	2300      	movs	r3, #0
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	77fb      	strb	r3, [r7, #31]
 800351e:	e000      	b.n	8003522 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003520:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003532:	7ffb      	ldrb	r3, [r7, #31]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3720      	adds	r7, #32
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_SPI_Receive>:
>>>>>>> FFF
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	4613      	mov	r3, r2
 8004c62:	80fb      	strh	r3, [r7, #6]
=======
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af02      	add	r7, sp, #8
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	4613      	mov	r3, r2
 800354a:	80fb      	strh	r3, [r7, #6]
>>>>>>> FFF
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
<<<<<<< HEAD
 8004c64:	2300      	movs	r3, #0
 8004c66:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c70:	d112      	bne.n	8004c98 <HAL_SPI_Receive+0x44>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10e      	bne.n	8004c98 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2204      	movs	r2, #4
 8004c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c82:	88fa      	ldrh	r2, [r7, #6]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	68b9      	ldr	r1, [r7, #8]
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 f8f1 	bl	8004e76 <HAL_SPI_TransmitReceive>
 8004c94:	4603      	mov	r3, r0
 8004c96:	e0ea      	b.n	8004e6e <HAL_SPI_Receive+0x21a>
=======
 800354c:	2300      	movs	r3, #0
 800354e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003558:	d112      	bne.n	8003580 <HAL_SPI_Receive+0x44>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10e      	bne.n	8003580 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2204      	movs	r2, #4
 8003566:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800356a:	88fa      	ldrh	r2, [r7, #6]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	4613      	mov	r3, r2
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f8f1 	bl	800375e <HAL_SPI_TransmitReceive>
 800357c:	4603      	mov	r3, r0
 800357e:	e0ea      	b.n	8003756 <HAL_SPI_Receive+0x21a>
>>>>>>> FFF
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_SPI_Receive+0x52>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e0e3      	b.n	8004e6e <HAL_SPI_Receive+0x21a>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cae:	f7fe f9cd 	bl	800304c <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d002      	beq.n	8004cc6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cc4:	e0ca      	b.n	8004e5c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <HAL_SPI_Receive+0x7e>
 8004ccc:	88fb      	ldrh	r3, [r7, #6]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d102      	bne.n	8004cd8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cd6:	e0c1      	b.n	8004e5c <HAL_SPI_Receive+0x208>
=======
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_SPI_Receive+0x52>
 800358a:	2302      	movs	r3, #2
 800358c:	e0e3      	b.n	8003756 <HAL_SPI_Receive+0x21a>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003596:	f7fe f9cd 	bl	8001934 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d002      	beq.n	80035ae <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80035a8:	2302      	movs	r3, #2
 80035aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035ac:	e0ca      	b.n	8003744 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <HAL_SPI_Receive+0x7e>
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d102      	bne.n	80035c0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035be:	e0c1      	b.n	8003744 <HAL_SPI_Receive+0x208>
>>>>>>> FFF
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
<<<<<<< HEAD
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2204      	movs	r2, #4
 8004cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	88fa      	ldrh	r2, [r7, #6]
 8004cf0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	88fa      	ldrh	r2, [r7, #6]
 8004cf6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2204      	movs	r2, #4
 80035c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	88fa      	ldrh	r2, [r7, #6]
 80035d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	88fa      	ldrh	r2, [r7, #6]
 80035de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> FFF
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
<<<<<<< HEAD
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d1e:	d10f      	bne.n	8004d40 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d3e:	601a      	str	r2, [r3, #0]
=======
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003606:	d10f      	bne.n	8003628 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003616:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003626:	601a      	str	r2, [r3, #0]
>>>>>>> FFF
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4a:	2b40      	cmp	r3, #64	; 0x40
 8004d4c:	d007      	beq.n	8004d5e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d5c:	601a      	str	r2, [r3, #0]
=======
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003632:	2b40      	cmp	r3, #64	; 0x40
 8003634:	d007      	beq.n	8003646 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003644:	601a      	str	r2, [r3, #0]
>>>>>>> FFF
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
<<<<<<< HEAD
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d162      	bne.n	8004e2c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d66:	e02e      	b.n	8004dc6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d115      	bne.n	8004da2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f103 020c 	add.w	r2, r3, #12
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d82:	7812      	ldrb	r2, [r2, #0]
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004da0:	e011      	b.n	8004dc6 <HAL_SPI_Receive+0x172>
=======
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d162      	bne.n	8003714 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800364e:	e02e      	b.n	80036ae <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b01      	cmp	r3, #1
 800365c:	d115      	bne.n	800368a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f103 020c 	add.w	r2, r3, #12
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	7812      	ldrb	r2, [r2, #0]
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003688:	e011      	b.n	80036ae <HAL_SPI_Receive+0x172>
>>>>>>> FFF
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 8004da2:	f7fe f953 	bl	800304c <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d803      	bhi.n	8004dba <HAL_SPI_Receive+0x166>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004db8:	d102      	bne.n	8004dc0 <HAL_SPI_Receive+0x16c>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d102      	bne.n	8004dc6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004dc4:	e04a      	b.n	8004e5c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1cb      	bne.n	8004d68 <HAL_SPI_Receive+0x114>
 8004dd0:	e031      	b.n	8004e36 <HAL_SPI_Receive+0x1e2>
=======
 800368a:	f7fe f953 	bl	8001934 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d803      	bhi.n	80036a2 <HAL_SPI_Receive+0x166>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036a0:	d102      	bne.n	80036a8 <HAL_SPI_Receive+0x16c>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d102      	bne.n	80036ae <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036ac:	e04a      	b.n	8003744 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1cb      	bne.n	8003650 <HAL_SPI_Receive+0x114>
 80036b8:	e031      	b.n	800371e <HAL_SPI_Receive+0x1e2>
>>>>>>> FFF
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
<<<<<<< HEAD
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d113      	bne.n	8004e08 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	b292      	uxth	r2, r2
 8004dec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	1c9a      	adds	r2, r3, #2
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e06:	e011      	b.n	8004e2c <HAL_SPI_Receive+0x1d8>
=======
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d113      	bne.n	80036f0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	b292      	uxth	r2, r2
 80036d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	1c9a      	adds	r2, r3, #2
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036ee:	e011      	b.n	8003714 <HAL_SPI_Receive+0x1d8>
>>>>>>> FFF
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 8004e08:	f7fe f920 	bl	800304c <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d803      	bhi.n	8004e20 <HAL_SPI_Receive+0x1cc>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e1e:	d102      	bne.n	8004e26 <HAL_SPI_Receive+0x1d2>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d102      	bne.n	8004e2c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e2a:	e017      	b.n	8004e5c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1cd      	bne.n	8004dd2 <HAL_SPI_Receive+0x17e>
=======
 80036f0:	f7fe f920 	bl	8001934 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d803      	bhi.n	8003708 <HAL_SPI_Receive+0x1cc>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003706:	d102      	bne.n	800370e <HAL_SPI_Receive+0x1d2>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d102      	bne.n	8003714 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003712:	e017      	b.n	8003744 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1cd      	bne.n	80036ba <HAL_SPI_Receive+0x17e>
>>>>>>> FFF
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	6839      	ldr	r1, [r7, #0]
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 fa46 	bl	80052cc <SPI_EndRxTransaction>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	655a      	str	r2, [r3, #84]	; 0x54
=======
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	6839      	ldr	r1, [r7, #0]
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 fa46 	bl	8003bb4 <SPI_EndRxTransaction>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d002      	beq.n	8003734 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2220      	movs	r2, #32
 8003732:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> FFF
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
<<<<<<< HEAD
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	75fb      	strb	r3, [r7, #23]
 8004e58:	e000      	b.n	8004e5c <HAL_SPI_Receive+0x208>
  }

error :
 8004e5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_SPI_TransmitReceive>:
=======
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	75fb      	strb	r3, [r7, #23]
 8003740:	e000      	b.n	8003744 <HAL_SPI_Receive+0x208>
  }

error :
 8003742:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003754:	7dfb      	ldrb	r3, [r7, #23]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_SPI_TransmitReceive>:
>>>>>>> FFF
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
<<<<<<< HEAD
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b08c      	sub	sp, #48	; 0x30
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	607a      	str	r2, [r7, #4]
 8004e82:	807b      	strh	r3, [r7, #2]
=======
 800375e:	b580      	push	{r7, lr}
 8003760:	b08c      	sub	sp, #48	; 0x30
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
 800376a:	807b      	strh	r3, [r7, #2]
>>>>>>> FFF
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
<<<<<<< HEAD
 8004e84:	2301      	movs	r3, #1
 8004e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
=======
 800376c:	2301      	movs	r3, #1
 800376e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
>>>>>>> FFF

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_SPI_TransmitReceive+0x26>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e18a      	b.n	80051b2 <HAL_SPI_TransmitReceive+0x33c>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ea4:	f7fe f8d2 	bl	800304c <HAL_GetTick>
 8004ea8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004eba:	887b      	ldrh	r3, [r7, #2]
 8004ebc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ebe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d00f      	beq.n	8004ee6 <HAL_SPI_TransmitReceive+0x70>
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ecc:	d107      	bne.n	8004ede <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d103      	bne.n	8004ede <HAL_SPI_TransmitReceive+0x68>
 8004ed6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d003      	beq.n	8004ee6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ede:	2302      	movs	r3, #2
 8004ee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ee4:	e15b      	b.n	800519e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <HAL_SPI_TransmitReceive+0x82>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_SPI_TransmitReceive+0x82>
 8004ef2:	887b      	ldrh	r3, [r7, #2]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d103      	bne.n	8004f00 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004efe:	e14e      	b.n	800519e <HAL_SPI_TransmitReceive+0x328>
=======
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_SPI_TransmitReceive+0x26>
 8003780:	2302      	movs	r3, #2
 8003782:	e18a      	b.n	8003a9a <HAL_SPI_TransmitReceive+0x33c>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800378c:	f7fe f8d2 	bl	8001934 <HAL_GetTick>
 8003790:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80037a2:	887b      	ldrh	r3, [r7, #2]
 80037a4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d00f      	beq.n	80037ce <HAL_SPI_TransmitReceive+0x70>
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037b4:	d107      	bne.n	80037c6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d103      	bne.n	80037c6 <HAL_SPI_TransmitReceive+0x68>
 80037be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d003      	beq.n	80037ce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80037c6:	2302      	movs	r3, #2
 80037c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037cc:	e15b      	b.n	8003a86 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_SPI_TransmitReceive+0x82>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <HAL_SPI_TransmitReceive+0x82>
 80037da:	887b      	ldrh	r3, [r7, #2]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d103      	bne.n	80037e8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037e6:	e14e      	b.n	8003a86 <HAL_SPI_TransmitReceive+0x328>
>>>>>>> FFF
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
<<<<<<< HEAD
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d003      	beq.n	8004f14 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2205      	movs	r2, #5
 8004f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
=======
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d003      	beq.n	80037fc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2205      	movs	r2, #5
 80037f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
>>>>>>> FFF
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
<<<<<<< HEAD
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	887a      	ldrh	r2, [r7, #2]
 8004f24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	887a      	ldrh	r2, [r7, #2]
 8004f2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	887a      	ldrh	r2, [r7, #2]
 8004f36:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	887a      	ldrh	r2, [r7, #2]
 8004f3c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	887a      	ldrh	r2, [r7, #2]
 800380c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	887a      	ldrh	r2, [r7, #2]
 8003812:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	887a      	ldrh	r2, [r7, #2]
 800381e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	887a      	ldrh	r2, [r7, #2]
 8003824:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> FFF
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f54:	2b40      	cmp	r3, #64	; 0x40
 8004f56:	d007      	beq.n	8004f68 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f66:	601a      	str	r2, [r3, #0]
=======
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383c:	2b40      	cmp	r3, #64	; 0x40
 800383e:	d007      	beq.n	8003850 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800384e:	601a      	str	r2, [r3, #0]
>>>>>>> FFF
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
<<<<<<< HEAD
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f70:	d178      	bne.n	8005064 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <HAL_SPI_TransmitReceive+0x10a>
 8004f7a:	8b7b      	ldrh	r3, [r7, #26]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d166      	bne.n	800504e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f84:	881a      	ldrh	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	1c9a      	adds	r2, r3, #2
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fa4:	e053      	b.n	800504e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d11b      	bne.n	8004fec <HAL_SPI_TransmitReceive+0x176>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d016      	beq.n	8004fec <HAL_SPI_TransmitReceive+0x176>
 8004fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d113      	bne.n	8004fec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	881a      	ldrh	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	1c9a      	adds	r2, r3, #2
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003858:	d178      	bne.n	800394c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <HAL_SPI_TransmitReceive+0x10a>
 8003862:	8b7b      	ldrh	r3, [r7, #26]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d166      	bne.n	8003936 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	881a      	ldrh	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	1c9a      	adds	r2, r3, #2
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003882:	b29b      	uxth	r3, r3
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800388c:	e053      	b.n	8003936 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b02      	cmp	r3, #2
 800389a:	d11b      	bne.n	80038d4 <HAL_SPI_TransmitReceive+0x176>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d016      	beq.n	80038d4 <HAL_SPI_TransmitReceive+0x176>
 80038a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d113      	bne.n	80038d4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b0:	881a      	ldrh	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	1c9a      	adds	r2, r3, #2
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> FFF
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d119      	bne.n	800502e <HAL_SPI_TransmitReceive+0x1b8>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d014      	beq.n	800502e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	b292      	uxth	r2, r2
 8005010:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	1c9a      	adds	r2, r3, #2
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800502a:	2301      	movs	r3, #1
 800502c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800502e:	f7fe f80d 	bl	800304c <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800503a:	429a      	cmp	r2, r3
 800503c:	d807      	bhi.n	800504e <HAL_SPI_TransmitReceive+0x1d8>
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005044:	d003      	beq.n	800504e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800504c:	e0a7      	b.n	800519e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1a6      	bne.n	8004fa6 <HAL_SPI_TransmitReceive+0x130>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1a1      	bne.n	8004fa6 <HAL_SPI_TransmitReceive+0x130>
 8005062:	e07c      	b.n	800515e <HAL_SPI_TransmitReceive+0x2e8>
=======
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d119      	bne.n	8003916 <HAL_SPI_TransmitReceive+0x1b8>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d014      	beq.n	8003916 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	b292      	uxth	r2, r2
 80038f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	1c9a      	adds	r2, r3, #2
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003912:	2301      	movs	r3, #1
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003916:	f7fe f80d 	bl	8001934 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003922:	429a      	cmp	r2, r3
 8003924:	d807      	bhi.n	8003936 <HAL_SPI_TransmitReceive+0x1d8>
 8003926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800392c:	d003      	beq.n	8003936 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003934:	e0a7      	b.n	8003a86 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1a6      	bne.n	800388e <HAL_SPI_TransmitReceive+0x130>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1a1      	bne.n	800388e <HAL_SPI_TransmitReceive+0x130>
 800394a:	e07c      	b.n	8003a46 <HAL_SPI_TransmitReceive+0x2e8>
>>>>>>> FFF
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< HEAD
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <HAL_SPI_TransmitReceive+0x1fc>
 800506c:	8b7b      	ldrh	r3, [r7, #26]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d16b      	bne.n	800514a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	330c      	adds	r3, #12
 800507c:	7812      	ldrb	r2, [r2, #0]
 800507e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005098:	e057      	b.n	800514a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d11c      	bne.n	80050e2 <HAL_SPI_TransmitReceive+0x26c>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d017      	beq.n	80050e2 <HAL_SPI_TransmitReceive+0x26c>
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d114      	bne.n	80050e2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	330c      	adds	r3, #12
 80050c2:	7812      	ldrb	r2, [r2, #0]
 80050c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_SPI_TransmitReceive+0x1fc>
 8003954:	8b7b      	ldrh	r3, [r7, #26]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d16b      	bne.n	8003a32 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	330c      	adds	r3, #12
 8003964:	7812      	ldrb	r2, [r2, #0]
 8003966:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003976:	b29b      	uxth	r3, r3
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003980:	e057      	b.n	8003a32 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b02      	cmp	r3, #2
 800398e:	d11c      	bne.n	80039ca <HAL_SPI_TransmitReceive+0x26c>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d017      	beq.n	80039ca <HAL_SPI_TransmitReceive+0x26c>
 800399a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399c:	2b01      	cmp	r3, #1
 800399e:	d114      	bne.n	80039ca <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	330c      	adds	r3, #12
 80039aa:	7812      	ldrb	r2, [r2, #0]
 80039ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039bc:	b29b      	uxth	r3, r3
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> FFF
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d119      	bne.n	8005124 <HAL_SPI_TransmitReceive+0x2ae>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d014      	beq.n	8005124 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005120:	2301      	movs	r3, #1
 8005122:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005124:	f7fd ff92 	bl	800304c <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005130:	429a      	cmp	r2, r3
 8005132:	d803      	bhi.n	800513c <HAL_SPI_TransmitReceive+0x2c6>
 8005134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800513a:	d102      	bne.n	8005142 <HAL_SPI_TransmitReceive+0x2cc>
 800513c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513e:	2b00      	cmp	r3, #0
 8005140:	d103      	bne.n	800514a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005148:	e029      	b.n	800519e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800514e:	b29b      	uxth	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1a2      	bne.n	800509a <HAL_SPI_TransmitReceive+0x224>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d19d      	bne.n	800509a <HAL_SPI_TransmitReceive+0x224>
=======
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d119      	bne.n	8003a0c <HAL_SPI_TransmitReceive+0x2ae>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d014      	beq.n	8003a0c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a0c:	f7fd ff92 	bl	8001934 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d803      	bhi.n	8003a24 <HAL_SPI_TransmitReceive+0x2c6>
 8003a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a22:	d102      	bne.n	8003a2a <HAL_SPI_TransmitReceive+0x2cc>
 8003a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d103      	bne.n	8003a32 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a30:	e029      	b.n	8003a86 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1a2      	bne.n	8003982 <HAL_SPI_TransmitReceive+0x224>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d19d      	bne.n	8003982 <HAL_SPI_TransmitReceive+0x224>
>>>>>>> FFF
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 800515e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005160:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 f904 	bl	8005370 <SPI_EndRxTxTransaction>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d006      	beq.n	800517c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2220      	movs	r2, #32
 8005178:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800517a:	e010      	b.n	800519e <HAL_SPI_TransmitReceive+0x328>
=======
 8003a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f000 f904 	bl	8003c58 <SPI_EndRxTxTransaction>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d006      	beq.n	8003a64 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a62:	e010      	b.n	8003a86 <HAL_SPI_TransmitReceive+0x328>
>>>>>>> FFF
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< HEAD
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10b      	bne.n	800519c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	e000      	b.n	800519e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800519c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3730      	adds	r7, #48	; 0x30
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <SPI_WaitFlagStateUntilTimeout>:
=======
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10b      	bne.n	8003a84 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	e000      	b.n	8003a86 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3730      	adds	r7, #48	; 0x30
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <SPI_WaitFlagStateUntilTimeout>:
>>>>>>> FFF
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	603b      	str	r3, [r7, #0]
 80051c8:	4613      	mov	r3, r2
 80051ca:	71fb      	strb	r3, [r7, #7]
=======
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	71fb      	strb	r3, [r7, #7]
>>>>>>> FFF
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
<<<<<<< HEAD
 80051cc:	f7fd ff3e 	bl	800304c <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d4:	1a9b      	subs	r3, r3, r2
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	4413      	add	r3, r2
 80051da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051dc:	f7fd ff36 	bl	800304c <HAL_GetTick>
 80051e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051e2:	4b39      	ldr	r3, [pc, #228]	; (80052c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	015b      	lsls	r3, r3, #5
 80051e8:	0d1b      	lsrs	r3, r3, #20
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	fb02 f303 	mul.w	r3, r2, r3
 80051f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051f2:	e054      	b.n	800529e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051fa:	d050      	beq.n	800529e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051fc:	f7fd ff26 	bl	800304c <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	69fa      	ldr	r2, [r7, #28]
 8005208:	429a      	cmp	r2, r3
 800520a:	d902      	bls.n	8005212 <SPI_WaitFlagStateUntilTimeout+0x56>
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d13d      	bne.n	800528e <SPI_WaitFlagStateUntilTimeout+0xd2>
=======
 8003ab4:	f7fd ff3e 	bl	8001934 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ac4:	f7fd ff36 	bl	8001934 <HAL_GetTick>
 8003ac8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003aca:	4b39      	ldr	r3, [pc, #228]	; (8003bb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	015b      	lsls	r3, r3, #5
 8003ad0:	0d1b      	lsrs	r3, r3, #20
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	fb02 f303 	mul.w	r3, r2, r3
 8003ad8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ada:	e054      	b.n	8003b86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ae2:	d050      	beq.n	8003b86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ae4:	f7fd ff26 	bl	8001934 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d902      	bls.n	8003afa <SPI_WaitFlagStateUntilTimeout+0x56>
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d13d      	bne.n	8003b76 <SPI_WaitFlagStateUntilTimeout+0xd2>
>>>>>>> FFF
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< HEAD
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005220:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800522a:	d111      	bne.n	8005250 <SPI_WaitFlagStateUntilTimeout+0x94>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005234:	d004      	beq.n	8005240 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800523e:	d107      	bne.n	8005250 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800524e:	601a      	str	r2, [r3, #0]
=======
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b12:	d111      	bne.n	8003b38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b1c:	d004      	beq.n	8003b28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b26:	d107      	bne.n	8003b38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b36:	601a      	str	r2, [r3, #0]
>>>>>>> FFF
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< HEAD
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005258:	d10f      	bne.n	800527a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005278:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e017      	b.n	80052be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	3b01      	subs	r3, #1
 800529c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	4013      	ands	r3, r2
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	bf0c      	ite	eq
 80052ae:	2301      	moveq	r3, #1
 80052b0:	2300      	movne	r3, #0
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	461a      	mov	r2, r3
 80052b6:	79fb      	ldrb	r3, [r7, #7]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d19b      	bne.n	80051f4 <SPI_WaitFlagStateUntilTimeout+0x38>
=======
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b40:	d10f      	bne.n	8003b62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e017      	b.n	8003ba6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	bf0c      	ite	eq
 8003b96:	2301      	moveq	r3, #1
 8003b98:	2300      	movne	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d19b      	bne.n	8003adc <SPI_WaitFlagStateUntilTimeout+0x38>
>>>>>>> FFF
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3720      	adds	r7, #32
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	20000024 	.word	0x20000024

080052cc <SPI_EndRxTransaction>:
=======
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3720      	adds	r7, #32
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000018 	.word	0x20000018

08003bb4 <SPI_EndRxTransaction>:
>>>>>>> FFF
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052e0:	d111      	bne.n	8005306 <SPI_EndRxTransaction+0x3a>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ea:	d004      	beq.n	80052f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f4:	d107      	bne.n	8005306 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005304:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800530e:	d117      	bne.n	8005340 <SPI_EndRxTransaction+0x74>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005318:	d112      	bne.n	8005340 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2200      	movs	r2, #0
 8005322:	2101      	movs	r1, #1
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f7ff ff49 	bl	80051bc <SPI_WaitFlagStateUntilTimeout>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d01a      	beq.n	8005366 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005334:	f043 0220 	orr.w	r2, r3, #32
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e013      	b.n	8005368 <SPI_EndRxTransaction+0x9c>
=======
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bc8:	d111      	bne.n	8003bee <SPI_EndRxTransaction+0x3a>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd2:	d004      	beq.n	8003bde <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bdc:	d107      	bne.n	8003bee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bec:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bf6:	d117      	bne.n	8003c28 <SPI_EndRxTransaction+0x74>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c00:	d112      	bne.n	8003c28 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f7ff ff49 	bl	8003aa4 <SPI_WaitFlagStateUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01a      	beq.n	8003c4e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1c:	f043 0220 	orr.w	r2, r3, #32
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e013      	b.n	8003c50 <SPI_EndRxTransaction+0x9c>
>>>>>>> FFF
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2200      	movs	r2, #0
 8005348:	2180      	movs	r1, #128	; 0x80
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f7ff ff36 	bl	80051bc <SPI_WaitFlagStateUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d007      	beq.n	8005366 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535a:	f043 0220 	orr.w	r2, r3, #32
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e000      	b.n	8005368 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <SPI_EndRxTxTransaction>:
=======
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2180      	movs	r1, #128	; 0x80
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f7ff ff36 	bl	8003aa4 <SPI_WaitFlagStateUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c42:	f043 0220 	orr.w	r2, r3, #32
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e000      	b.n	8003c50 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <SPI_EndRxTxTransaction>:
>>>>>>> FFF
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af02      	add	r7, sp, #8
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2200      	movs	r2, #0
 8005384:	2180      	movs	r1, #128	; 0x80
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f7ff ff18 	bl	80051bc <SPI_WaitFlagStateUntilTimeout>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d007      	beq.n	80053a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005396:	f043 0220 	orr.w	r2, r3, #32
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e000      	b.n	80053a4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_TIM_Base_Init>:
=======
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2180      	movs	r1, #128	; 0x80
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f7ff ff18 	bl	8003aa4 <SPI_WaitFlagStateUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d007      	beq.n	8003c8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7e:	f043 0220 	orr.w	r2, r3, #32
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e000      	b.n	8003c8c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_TIM_Base_Init>:
>>>>>>> FFF
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e041      	b.n	8005442 <HAL_TIM_Base_Init+0x96>
=======
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e041      	b.n	8003d2a <HAL_TIM_Base_Init+0x96>
>>>>>>> FFF
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d106      	bne.n	8003cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> FFF
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fc fc54 	bl	8001c80 <HAL_TIM_Base_MspInit>
=======
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fd fba2 	bl	8001404 <HAL_TIM_Base_MspInit>
>>>>>>> FFF
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3304      	adds	r3, #4
 80053e8:	4619      	mov	r1, r3
 80053ea:	4610      	mov	r0, r2
 80053ec:	f000 faa8 	bl	8005940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
	...

0800544c <HAL_TIM_Base_Start_IT>:
=======
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	f000 faa8 	bl	8004228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <HAL_TIM_Base_Start_IT>:
>>>>>>> FFF
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
=======
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
>>>>>>> FFF

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b01      	cmp	r3, #1
 800545e:	d001      	beq.n	8005464 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e03a      	b.n	80054da <HAL_TIM_Base_Start_IT+0x8e>
=======
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d001      	beq.n	8003d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e03a      	b.n	8003dc2 <HAL_TIM_Base_Start_IT+0x8e>
>>>>>>> FFF
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0201 	orr.w	r2, r2, #1
 800547a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a18      	ldr	r2, [pc, #96]	; (80054e4 <HAL_TIM_Base_Start_IT+0x98>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d00e      	beq.n	80054a4 <HAL_TIM_Base_Start_IT+0x58>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548e:	d009      	beq.n	80054a4 <HAL_TIM_Base_Start_IT+0x58>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a14      	ldr	r2, [pc, #80]	; (80054e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d004      	beq.n	80054a4 <HAL_TIM_Base_Start_IT+0x58>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a13      	ldr	r2, [pc, #76]	; (80054ec <HAL_TIM_Base_Start_IT+0xa0>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d111      	bne.n	80054c8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b06      	cmp	r3, #6
 80054b4:	d010      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0201 	orr.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c6:	e007      	b.n	80054d8 <HAL_TIM_Base_Start_IT+0x8c>
=======
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0201 	orr.w	r2, r2, #1
 8003d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a18      	ldr	r2, [pc, #96]	; (8003dcc <HAL_TIM_Base_Start_IT+0x98>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00e      	beq.n	8003d8c <HAL_TIM_Base_Start_IT+0x58>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d76:	d009      	beq.n	8003d8c <HAL_TIM_Base_Start_IT+0x58>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a14      	ldr	r2, [pc, #80]	; (8003dd0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d004      	beq.n	8003d8c <HAL_TIM_Base_Start_IT+0x58>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a13      	ldr	r2, [pc, #76]	; (8003dd4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d111      	bne.n	8003db0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b06      	cmp	r3, #6
 8003d9c:	d010      	beq.n	8003dc0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f042 0201 	orr.w	r2, r2, #1
 8003dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dae:	e007      	b.n	8003dc0 <HAL_TIM_Base_Start_IT+0x8c>
>>>>>>> FFF
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0201 	orr.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]
=======
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]
>>>>>>> FFF
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc80      	pop	{r7}
 80054e2:	4770      	bx	lr
 80054e4:	40012c00 	.word	0x40012c00
 80054e8:	40000400 	.word	0x40000400
 80054ec:	40000800 	.word	0x40000800

080054f0 <HAL_TIM_Base_Stop_IT>:
=======
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr
 8003dcc:	40012c00 	.word	0x40012c00
 8003dd0:	40000400 	.word	0x40000400
 8003dd4:	40000800 	.word	0x40000800

08003dd8 <HAL_TIM_Base_Stop_IT>:
>>>>>>> FFF
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
=======
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
<<<<<<< HEAD
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0201 	bic.w	r2, r2, #1
 8005506:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6a1a      	ldr	r2, [r3, #32]
 800550e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005512:	4013      	ands	r3, r2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10f      	bne.n	8005538 <HAL_TIM_Base_Stop_IT+0x48>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6a1a      	ldr	r2, [r3, #32]
 800551e:	f240 4344 	movw	r3, #1092	; 0x444
 8005522:	4013      	ands	r3, r2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d107      	bne.n	8005538 <HAL_TIM_Base_Stop_IT+0x48>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0201 	bic.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	bc80      	pop	{r7}
 800554a:	4770      	bx	lr

0800554c <HAL_TIM_IRQHandler>:
=======
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0201 	bic.w	r2, r2, #1
 8003dee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6a1a      	ldr	r2, [r3, #32]
 8003df6:	f241 1311 	movw	r3, #4369	; 0x1111
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10f      	bne.n	8003e20 <HAL_TIM_Base_Stop_IT+0x48>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6a1a      	ldr	r2, [r3, #32]
 8003e06:	f240 4344 	movw	r3, #1092	; 0x444
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d107      	bne.n	8003e20 <HAL_TIM_Base_Stop_IT+0x48>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0201 	bic.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr

08003e34 <HAL_TIM_IRQHandler>:
>>>>>>> FFF
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b02      	cmp	r3, #2
 8005560:	d122      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b02      	cmp	r3, #2
 800556e:	d11b      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f06f 0202 	mvn.w	r2, #2
 8005578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_TIM_IRQHandler+0x4a>
=======
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d122      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d11b      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f06f 0202 	mvn.w	r2, #2
 8003e60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_TIM_IRQHandler+0x4a>
>>>>>>> FFF
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f9ba 	bl	8005908 <HAL_TIM_IC_CaptureCallback>
 8005594:	e005      	b.n	80055a2 <HAL_TIM_IRQHandler+0x56>
=======
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f9ba 	bl	80041f0 <HAL_TIM_IC_CaptureCallback>
 8003e7c:	e005      	b.n	8003e8a <HAL_TIM_IRQHandler+0x56>
>>>>>>> FFF
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f9ad 	bl	80058f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f9bc 	bl	800591a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	771a      	strb	r2, [r3, #28]
=======
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f9ad 	bl	80041de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f9bc 	bl	8004202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	771a      	strb	r2, [r3, #28]
>>>>>>> FFF
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 0304 	and.w	r3, r3, #4
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d122      	bne.n	80055fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	d11b      	bne.n	80055fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f06f 0204 	mvn.w	r2, #4
 80055cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2202      	movs	r2, #2
 80055d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_TIM_IRQHandler+0x9e>
=======
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d122      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d11b      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f06f 0204 	mvn.w	r2, #4
 8003eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> FFF
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f990 	bl	8005908 <HAL_TIM_IC_CaptureCallback>
 80055e8:	e005      	b.n	80055f6 <HAL_TIM_IRQHandler+0xaa>
=======
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f990 	bl	80041f0 <HAL_TIM_IC_CaptureCallback>
 8003ed0:	e005      	b.n	8003ede <HAL_TIM_IRQHandler+0xaa>
>>>>>>> FFF
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f983 	bl	80058f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f992 	bl	800591a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	771a      	strb	r2, [r3, #28]
=======
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f983 	bl	80041de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f992 	bl	8004202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	771a      	strb	r2, [r3, #28]
>>>>>>> FFF
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	f003 0308 	and.w	r3, r3, #8
 8005606:	2b08      	cmp	r3, #8
 8005608:	d122      	bne.n	8005650 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b08      	cmp	r3, #8
 8005616:	d11b      	bne.n	8005650 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f06f 0208 	mvn.w	r2, #8
 8005620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2204      	movs	r2, #4
 8005626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	f003 0303 	and.w	r3, r3, #3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <HAL_TIM_IRQHandler+0xf2>
=======
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d122      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d11b      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0208 	mvn.w	r2, #8
 8003f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2204      	movs	r2, #4
 8003f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> FFF
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f966 	bl	8005908 <HAL_TIM_IC_CaptureCallback>
 800563c:	e005      	b.n	800564a <HAL_TIM_IRQHandler+0xfe>
=======
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f966 	bl	80041f0 <HAL_TIM_IC_CaptureCallback>
 8003f24:	e005      	b.n	8003f32 <HAL_TIM_IRQHandler+0xfe>
>>>>>>> FFF
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f959 	bl	80058f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f968 	bl	800591a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	771a      	strb	r2, [r3, #28]
=======
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f959 	bl	80041de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f968 	bl	8004202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	771a      	strb	r2, [r3, #28]
>>>>>>> FFF
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f003 0310 	and.w	r3, r3, #16
 800565a:	2b10      	cmp	r3, #16
 800565c:	d122      	bne.n	80056a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f003 0310 	and.w	r3, r3, #16
 8005668:	2b10      	cmp	r3, #16
 800566a:	d11b      	bne.n	80056a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f06f 0210 	mvn.w	r2, #16
 8005674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2208      	movs	r2, #8
 800567a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_TIM_IRQHandler+0x146>
=======
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f003 0310 	and.w	r3, r3, #16
 8003f42:	2b10      	cmp	r3, #16
 8003f44:	d122      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	2b10      	cmp	r3, #16
 8003f52:	d11b      	bne.n	8003f8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0210 	mvn.w	r2, #16
 8003f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2208      	movs	r2, #8
 8003f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_TIM_IRQHandler+0x146>
>>>>>>> FFF
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f93c 	bl	8005908 <HAL_TIM_IC_CaptureCallback>
 8005690:	e005      	b.n	800569e <HAL_TIM_IRQHandler+0x152>
=======
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f93c 	bl	80041f0 <HAL_TIM_IC_CaptureCallback>
 8003f78:	e005      	b.n	8003f86 <HAL_TIM_IRQHandler+0x152>
>>>>>>> FFF
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f92f 	bl	80058f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f93e 	bl	800591a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	771a      	strb	r2, [r3, #28]
=======
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f92f 	bl	80041de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f93e 	bl	8004202 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	771a      	strb	r2, [r3, #28]
>>>>>>> FFF
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d10e      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d107      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f06f 0201 	mvn.w	r2, #1
 80056c8:	611a      	str	r2, [r3, #16]
=======
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d10e      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d107      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0201 	mvn.w	r2, #1
 8003fb0:	611a      	str	r2, [r3, #16]
>>>>>>> FFF
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f90a 	bl	80058e4 <HAL_TIM_PeriodElapsedCallback>
=======
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f90a 	bl	80041cc <HAL_TIM_PeriodElapsedCallback>
>>>>>>> FFF
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056da:	2b80      	cmp	r3, #128	; 0x80
 80056dc:	d10e      	bne.n	80056fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e8:	2b80      	cmp	r3, #128	; 0x80
 80056ea:	d107      	bne.n	80056fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056f4:	611a      	str	r2, [r3, #16]
=======
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc2:	2b80      	cmp	r3, #128	; 0x80
 8003fc4:	d10e      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd0:	2b80      	cmp	r3, #128	; 0x80
 8003fd2:	d107      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fdc:	611a      	str	r2, [r3, #16]
>>>>>>> FFF
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fa81 	bl	8005bfe <HAL_TIMEx_BreakCallback>
=======
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 fa81 	bl	80044e6 <HAL_TIMEx_BreakCallback>
>>>>>>> FFF
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005706:	2b40      	cmp	r3, #64	; 0x40
 8005708:	d10e      	bne.n	8005728 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005714:	2b40      	cmp	r3, #64	; 0x40
 8005716:	d107      	bne.n	8005728 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005720:	611a      	str	r2, [r3, #16]
=======
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fee:	2b40      	cmp	r3, #64	; 0x40
 8003ff0:	d10e      	bne.n	8004010 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffc:	2b40      	cmp	r3, #64	; 0x40
 8003ffe:	d107      	bne.n	8004010 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004008:	611a      	str	r2, [r3, #16]
>>>>>>> FFF
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f902 	bl	800592c <HAL_TIM_TriggerCallback>
=======
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f902 	bl	8004214 <HAL_TIM_TriggerCallback>
>>>>>>> FFF
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b20      	cmp	r3, #32
 8005734:	d10e      	bne.n	8005754 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0320 	and.w	r3, r3, #32
 8005740:	2b20      	cmp	r3, #32
 8005742:	d107      	bne.n	8005754 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f06f 0220 	mvn.w	r2, #32
 800574c:	611a      	str	r2, [r3, #16]
=======
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b20      	cmp	r3, #32
 800401c:	d10e      	bne.n	800403c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	2b20      	cmp	r3, #32
 800402a:	d107      	bne.n	800403c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0220 	mvn.w	r2, #32
 8004034:	611a      	str	r2, [r3, #16]
>>>>>>> FFF
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fa4c 	bl	8005bec <HAL_TIMEx_CommutCallback>
=======
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fa4c 	bl	80044d4 <HAL_TIMEx_CommutCallback>
>>>>>>> FFF
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8005754:	bf00      	nop
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_TIM_ConfigClockSource>:
=======
 800403c:	bf00      	nop
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_TIM_ConfigClockSource>:
>>>>>>> FFF
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
=======
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
>>>>>>> FFF
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <HAL_TIM_ConfigClockSource+0x18>
 8005770:	2302      	movs	r3, #2
 8005772:	e0b3      	b.n	80058dc <HAL_TIM_ConfigClockSource+0x180>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_TIM_ConfigClockSource+0x18>
 8004058:	2302      	movs	r3, #2
 800405a:	e0b3      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x180>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> FFF

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005792:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800579a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ac:	d03e      	beq.n	800582c <HAL_TIM_ConfigClockSource+0xd0>
 80057ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057b2:	f200 8087 	bhi.w	80058c4 <HAL_TIM_ConfigClockSource+0x168>
 80057b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ba:	f000 8085 	beq.w	80058c8 <HAL_TIM_ConfigClockSource+0x16c>
 80057be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c2:	d87f      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x168>
 80057c4:	2b70      	cmp	r3, #112	; 0x70
 80057c6:	d01a      	beq.n	80057fe <HAL_TIM_ConfigClockSource+0xa2>
 80057c8:	2b70      	cmp	r3, #112	; 0x70
 80057ca:	d87b      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x168>
 80057cc:	2b60      	cmp	r3, #96	; 0x60
 80057ce:	d050      	beq.n	8005872 <HAL_TIM_ConfigClockSource+0x116>
 80057d0:	2b60      	cmp	r3, #96	; 0x60
 80057d2:	d877      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x168>
 80057d4:	2b50      	cmp	r3, #80	; 0x50
 80057d6:	d03c      	beq.n	8005852 <HAL_TIM_ConfigClockSource+0xf6>
 80057d8:	2b50      	cmp	r3, #80	; 0x50
 80057da:	d873      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x168>
 80057dc:	2b40      	cmp	r3, #64	; 0x40
 80057de:	d058      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0x136>
 80057e0:	2b40      	cmp	r3, #64	; 0x40
 80057e2:	d86f      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x168>
 80057e4:	2b30      	cmp	r3, #48	; 0x30
 80057e6:	d064      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x156>
 80057e8:	2b30      	cmp	r3, #48	; 0x30
 80057ea:	d86b      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x168>
 80057ec:	2b20      	cmp	r3, #32
 80057ee:	d060      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x156>
 80057f0:	2b20      	cmp	r3, #32
 80057f2:	d867      	bhi.n	80058c4 <HAL_TIM_ConfigClockSource+0x168>
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d05c      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x156>
 80057f8:	2b10      	cmp	r3, #16
 80057fa:	d05a      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x156>
=======
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800407a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004082:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004094:	d03e      	beq.n	8004114 <HAL_TIM_ConfigClockSource+0xd0>
 8004096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800409a:	f200 8087 	bhi.w	80041ac <HAL_TIM_ConfigClockSource+0x168>
 800409e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a2:	f000 8085 	beq.w	80041b0 <HAL_TIM_ConfigClockSource+0x16c>
 80040a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040aa:	d87f      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
 80040ac:	2b70      	cmp	r3, #112	; 0x70
 80040ae:	d01a      	beq.n	80040e6 <HAL_TIM_ConfigClockSource+0xa2>
 80040b0:	2b70      	cmp	r3, #112	; 0x70
 80040b2:	d87b      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
 80040b4:	2b60      	cmp	r3, #96	; 0x60
 80040b6:	d050      	beq.n	800415a <HAL_TIM_ConfigClockSource+0x116>
 80040b8:	2b60      	cmp	r3, #96	; 0x60
 80040ba:	d877      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
 80040bc:	2b50      	cmp	r3, #80	; 0x50
 80040be:	d03c      	beq.n	800413a <HAL_TIM_ConfigClockSource+0xf6>
 80040c0:	2b50      	cmp	r3, #80	; 0x50
 80040c2:	d873      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
 80040c4:	2b40      	cmp	r3, #64	; 0x40
 80040c6:	d058      	beq.n	800417a <HAL_TIM_ConfigClockSource+0x136>
 80040c8:	2b40      	cmp	r3, #64	; 0x40
 80040ca:	d86f      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
 80040cc:	2b30      	cmp	r3, #48	; 0x30
 80040ce:	d064      	beq.n	800419a <HAL_TIM_ConfigClockSource+0x156>
 80040d0:	2b30      	cmp	r3, #48	; 0x30
 80040d2:	d86b      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
 80040d4:	2b20      	cmp	r3, #32
 80040d6:	d060      	beq.n	800419a <HAL_TIM_ConfigClockSource+0x156>
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d867      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d05c      	beq.n	800419a <HAL_TIM_ConfigClockSource+0x156>
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d05a      	beq.n	800419a <HAL_TIM_ConfigClockSource+0x156>
>>>>>>> FFF
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
<<<<<<< HEAD
 80057fc:	e062      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6818      	ldr	r0, [r3, #0]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	6899      	ldr	r1, [r3, #8]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f000 f970 	bl	8005af2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005820:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	609a      	str	r2, [r3, #8]
      break;
 800582a:	e04e      	b.n	80058ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	6899      	ldr	r1, [r3, #8]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f000 f959 	bl	8005af2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800584e:	609a      	str	r2, [r3, #8]
      break;
 8005850:	e03b      	b.n	80058ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6818      	ldr	r0, [r3, #0]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	6859      	ldr	r1, [r3, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	461a      	mov	r2, r3
 8005860:	f000 f8d0 	bl	8005a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2150      	movs	r1, #80	; 0x50
 800586a:	4618      	mov	r0, r3
 800586c:	f000 f927 	bl	8005abe <TIM_ITRx_SetConfig>
      break;
 8005870:	e02b      	b.n	80058ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	6859      	ldr	r1, [r3, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	461a      	mov	r2, r3
 8005880:	f000 f8ee 	bl	8005a60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2160      	movs	r1, #96	; 0x60
 800588a:	4618      	mov	r0, r3
 800588c:	f000 f917 	bl	8005abe <TIM_ITRx_SetConfig>
      break;
 8005890:	e01b      	b.n	80058ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6818      	ldr	r0, [r3, #0]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	6859      	ldr	r1, [r3, #4]
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	461a      	mov	r2, r3
 80058a0:	f000 f8b0 	bl	8005a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2140      	movs	r1, #64	; 0x40
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 f907 	bl	8005abe <TIM_ITRx_SetConfig>
      break;
 80058b0:	e00b      	b.n	80058ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4619      	mov	r1, r3
 80058bc:	4610      	mov	r0, r2
 80058be:	f000 f8fe 	bl	8005abe <TIM_ITRx_SetConfig>
        break;
 80058c2:	e002      	b.n	80058ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058c4:	bf00      	nop
 80058c6:	e000      	b.n	80058ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_TIM_PeriodElapsedCallback>:
=======
 80040e4:	e062      	b.n	80041ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	6899      	ldr	r1, [r3, #8]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f000 f970 	bl	80043da <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004108:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	609a      	str	r2, [r3, #8]
      break;
 8004112:	e04e      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	6899      	ldr	r1, [r3, #8]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f000 f959 	bl	80043da <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004136:	609a      	str	r2, [r3, #8]
      break;
 8004138:	e03b      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	6859      	ldr	r1, [r3, #4]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	461a      	mov	r2, r3
 8004148:	f000 f8d0 	bl	80042ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2150      	movs	r1, #80	; 0x50
 8004152:	4618      	mov	r0, r3
 8004154:	f000 f927 	bl	80043a6 <TIM_ITRx_SetConfig>
      break;
 8004158:	e02b      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	6859      	ldr	r1, [r3, #4]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	461a      	mov	r2, r3
 8004168:	f000 f8ee 	bl	8004348 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2160      	movs	r1, #96	; 0x60
 8004172:	4618      	mov	r0, r3
 8004174:	f000 f917 	bl	80043a6 <TIM_ITRx_SetConfig>
      break;
 8004178:	e01b      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6818      	ldr	r0, [r3, #0]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	6859      	ldr	r1, [r3, #4]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	461a      	mov	r2, r3
 8004188:	f000 f8b0 	bl	80042ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2140      	movs	r1, #64	; 0x40
 8004192:	4618      	mov	r0, r3
 8004194:	f000 f907 	bl	80043a6 <TIM_ITRx_SetConfig>
      break;
 8004198:	e00b      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4619      	mov	r1, r3
 80041a4:	4610      	mov	r0, r2
 80041a6:	f000 f8fe 	bl	80043a6 <TIM_ITRx_SetConfig>
        break;
 80041aa:	e002      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80041ac:	bf00      	nop
 80041ae:	e000      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80041b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> FFF
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
=======
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bc80      	pop	{r7}
 80058f4:	4770      	bx	lr

080058f6 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	bc80      	pop	{r7}
 80041dc:	4770      	bx	lr

080041de <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> FFF
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80058f6:	b480      	push	{r7}
 80058f8:	b083      	sub	sp, #12
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
=======
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80058fe:	bf00      	nop
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr

08005908 <HAL_TIM_IC_CaptureCallback>:
=======
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr

080041f0 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> FFF
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
=======
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	bc80      	pop	{r7}
 8005918:	4770      	bx	lr

0800591a <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr

08004202 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> FFF
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
=======
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr

0800592c <HAL_TIM_TriggerCallback>:
=======
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr

08004214 <HAL_TIM_TriggerCallback>:
>>>>>>> FFF
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
=======
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	bc80      	pop	{r7}
 800593c:	4770      	bx	lr
	...

08005940 <TIM_Base_SetConfig>:
=======
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr
	...

08004228 <TIM_Base_SetConfig>:
>>>>>>> FFF
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a29      	ldr	r2, [pc, #164]	; (80059f8 <TIM_Base_SetConfig+0xb8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d00b      	beq.n	8005970 <TIM_Base_SetConfig+0x30>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800595e:	d007      	beq.n	8005970 <TIM_Base_SetConfig+0x30>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a26      	ldr	r2, [pc, #152]	; (80059fc <TIM_Base_SetConfig+0xbc>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d003      	beq.n	8005970 <TIM_Base_SetConfig+0x30>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a25      	ldr	r2, [pc, #148]	; (8005a00 <TIM_Base_SetConfig+0xc0>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d108      	bne.n	8005982 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a1c      	ldr	r2, [pc, #112]	; (80059f8 <TIM_Base_SetConfig+0xb8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00b      	beq.n	80059a2 <TIM_Base_SetConfig+0x62>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005990:	d007      	beq.n	80059a2 <TIM_Base_SetConfig+0x62>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a19      	ldr	r2, [pc, #100]	; (80059fc <TIM_Base_SetConfig+0xbc>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d003      	beq.n	80059a2 <TIM_Base_SetConfig+0x62>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a18      	ldr	r2, [pc, #96]	; (8005a00 <TIM_Base_SetConfig+0xc0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d108      	bne.n	80059b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]
=======
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a29      	ldr	r2, [pc, #164]	; (80042e0 <TIM_Base_SetConfig+0xb8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d00b      	beq.n	8004258 <TIM_Base_SetConfig+0x30>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004246:	d007      	beq.n	8004258 <TIM_Base_SetConfig+0x30>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a26      	ldr	r2, [pc, #152]	; (80042e4 <TIM_Base_SetConfig+0xbc>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d003      	beq.n	8004258 <TIM_Base_SetConfig+0x30>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a25      	ldr	r2, [pc, #148]	; (80042e8 <TIM_Base_SetConfig+0xc0>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d108      	bne.n	800426a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800425e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a1c      	ldr	r2, [pc, #112]	; (80042e0 <TIM_Base_SetConfig+0xb8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00b      	beq.n	800428a <TIM_Base_SetConfig+0x62>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004278:	d007      	beq.n	800428a <TIM_Base_SetConfig+0x62>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a19      	ldr	r2, [pc, #100]	; (80042e4 <TIM_Base_SetConfig+0xbc>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d003      	beq.n	800428a <TIM_Base_SetConfig+0x62>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a18      	ldr	r2, [pc, #96]	; (80042e8 <TIM_Base_SetConfig+0xc0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d108      	bne.n	800429c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	4313      	orrs	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
>>>>>>> FFF
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a07      	ldr	r2, [pc, #28]	; (80059f8 <TIM_Base_SetConfig+0xb8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d103      	bne.n	80059e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	631a      	str	r2, [r3, #48]	; 0x30
=======
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a07      	ldr	r2, [pc, #28]	; (80042e0 <TIM_Base_SetConfig+0xb8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d103      	bne.n	80042d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> FFF
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	615a      	str	r2, [r3, #20]
}
 80059ee:	bf00      	nop
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bc80      	pop	{r7}
 80059f6:	4770      	bx	lr
 80059f8:	40012c00 	.word	0x40012c00
 80059fc:	40000400 	.word	0x40000400
 8005a00:	40000800 	.word	0x40000800

08005a04 <TIM_TI1_ConfigInputStage>:
=======
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	615a      	str	r2, [r3, #20]
}
 80042d6:	bf00      	nop
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	40000400 	.word	0x40000400
 80042e8:	40000800 	.word	0x40000800

080042ec <TIM_TI1_ConfigInputStage>:
>>>>>>> FFF
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
=======
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
>>>>>>> FFF
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f023 0201 	bic.w	r2, r3, #1
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f023 030a 	bic.w	r3, r3, #10
 8005a40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	621a      	str	r2, [r3, #32]
}
 8005a56:	bf00      	nop
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr

08005a60 <TIM_TI2_ConfigInputStage>:
=======
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	f023 0201 	bic.w	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4313      	orrs	r3, r2
 8004320:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f023 030a 	bic.w	r3, r3, #10
 8004328:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4313      	orrs	r3, r2
 8004330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	621a      	str	r2, [r3, #32]
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr

08004348 <TIM_TI2_ConfigInputStage>:
>>>>>>> FFF
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
=======
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
>>>>>>> FFF
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	f023 0210 	bic.w	r2, r3, #16
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	031b      	lsls	r3, r3, #12
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	621a      	str	r2, [r3, #32]
}
 8005ab4:	bf00      	nop
 8005ab6:	371c      	adds	r7, #28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr

08005abe <TIM_ITRx_SetConfig>:
=======
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	f023 0210 	bic.w	r2, r3, #16
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004372:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	031b      	lsls	r3, r3, #12
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	4313      	orrs	r3, r2
 800437c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004384:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	621a      	str	r2, [r3, #32]
}
 800439c:	bf00      	nop
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr

080043a6 <TIM_ITRx_SetConfig>:
>>>>>>> FFF
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 8005abe:	b480      	push	{r7}
 8005ac0:	b085      	sub	sp, #20
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
 8005ac6:	6039      	str	r1, [r7, #0]
=======
 80043a6:	b480      	push	{r7}
 80043a8:	b085      	sub	sp, #20
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	6039      	str	r1, [r7, #0]
>>>>>>> FFF
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f043 0307 	orr.w	r3, r3, #7
 8005ae0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	609a      	str	r2, [r3, #8]
}
 8005ae8:	bf00      	nop
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bc80      	pop	{r7}
 8005af0:	4770      	bx	lr

08005af2 <TIM_ETR_SetConfig>:
=======
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f043 0307 	orr.w	r3, r3, #7
 80043c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	609a      	str	r2, [r3, #8]
}
 80043d0:	bf00      	nop
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr

080043da <TIM_ETR_SetConfig>:
>>>>>>> FFF
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8005af2:	b480      	push	{r7}
 8005af4:	b087      	sub	sp, #28
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	60f8      	str	r0, [r7, #12]
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	607a      	str	r2, [r7, #4]
 8005afe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	021a      	lsls	r2, r3, #8
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	431a      	orrs	r2, r3
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	609a      	str	r2, [r3, #8]
}
 8005b26:	bf00      	nop
 8005b28:	371c      	adds	r7, #28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bc80      	pop	{r7}
 8005b2e:	4770      	bx	lr

08005b30 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 80043da:	b480      	push	{r7}
 80043dc:	b087      	sub	sp, #28
 80043de:	af00      	add	r7, sp, #0
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	607a      	str	r2, [r7, #4]
 80043e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	021a      	lsls	r2, r3, #8
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	431a      	orrs	r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4313      	orrs	r3, r2
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	609a      	str	r2, [r3, #8]
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr

08004418 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> FFF
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
=======
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
>>>>>>> FFF
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e046      	b.n	8005bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a16      	ldr	r2, [pc, #88]	; (8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d00e      	beq.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b94:	d009      	beq.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a12      	ldr	r2, [pc, #72]	; (8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d004      	beq.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a10      	ldr	r2, [pc, #64]	; (8005be8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d10c      	bne.n	8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	609a      	str	r2, [r3, #8]
=======
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800442c:	2302      	movs	r3, #2
 800442e:	e046      	b.n	80044be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004456:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a16      	ldr	r2, [pc, #88]	; (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00e      	beq.n	8004492 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447c:	d009      	beq.n	8004492 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a12      	ldr	r2, [pc, #72]	; (80044cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d004      	beq.n	8004492 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a10      	ldr	r2, [pc, #64]	; (80044d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d10c      	bne.n	80044ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004498:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	609a      	str	r2, [r3, #8]
>>>>>>> FFF
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bc80      	pop	{r7}
 8005bde:	4770      	bx	lr
 8005be0:	40012c00 	.word	0x40012c00
 8005be4:	40000400 	.word	0x40000400
 8005be8:	40000800 	.word	0x40000800

08005bec <HAL_TIMEx_CommutCallback>:
=======
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr
 80044c8:	40012c00 	.word	0x40012c00
 80044cc:	40000400 	.word	0x40000400
 80044d0:	40000800 	.word	0x40000800

080044d4 <HAL_TIMEx_CommutCallback>:
>>>>>>> FFF
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
=======
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bc80      	pop	{r7}
 8005bfc:	4770      	bx	lr

08005bfe <HAL_TIMEx_BreakCallback>:
=======
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr

080044e6 <HAL_TIMEx_BreakCallback>:
>>>>>>> FFF
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
=======
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc80      	pop	{r7}
 8005c0e:	4770      	bx	lr

08005c10 <HAL_UART_Init>:
=======
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr

080044f8 <HAL_UART_Init>:
>>>>>>> FFF
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e03f      	b.n	8005ca2 <HAL_UART_Init+0x92>
=======
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e03f      	b.n	800458a <HAL_UART_Init+0x92>
>>>>>>> FFF
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> FFF

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7fc f848 	bl	8001ccc <HAL_UART_MspInit>
=======
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fc ff96 	bl	8001450 <HAL_UART_MspInit>
>>>>>>> FFF
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2224      	movs	r2, #36	; 0x24
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fbed 	bl	8006434 <UART_SetConfig>
=======
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2224      	movs	r2, #36	; 0x24
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800453a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fba9 	bl	8004c94 <UART_SetConfig>
>>>>>>> FFF

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	691a      	ldr	r2, [r3, #16]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	695a      	ldr	r2, [r3, #20]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68da      	ldr	r2, [r3, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2220      	movs	r2, #32
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b085      	sub	sp, #20
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b20      	cmp	r3, #32
 8005cc2:	d130      	bne.n	8005d26 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d002      	beq.n	8005cd0 <HAL_UART_Transmit_IT+0x26>
 8005cca:	88fb      	ldrh	r3, [r7, #6]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e029      	b.n	8005d28 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d101      	bne.n	8005ce2 <HAL_UART_Transmit_IT+0x38>
 8005cde:	2302      	movs	r3, #2
 8005ce0:	e022      	b.n	8005d28 <HAL_UART_Transmit_IT+0x7e>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	88fa      	ldrh	r2, [r7, #6]
 8005cf4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	88fa      	ldrh	r2, [r7, #6]
 8005cfa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2221      	movs	r2, #33	; 0x21
 8005d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68da      	ldr	r2, [r3, #12]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d20:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	e000      	b.n	8005d28 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005d26:	2302      	movs	r3, #2
  }
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bc80      	pop	{r7}
 8005d30:	4770      	bx	lr

08005d32 <HAL_UART_Receive_IT>:
=======
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004550:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695a      	ldr	r2, [r3, #20]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004560:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004570:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_UART_Receive_IT>:
>>>>>>> FFF
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b20      	cmp	r3, #32
 8005d4a:	d11d      	bne.n	8005d88 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <HAL_UART_Receive_IT+0x26>
 8005d52:	88fb      	ldrh	r3, [r7, #6]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e016      	b.n	8005d8a <HAL_UART_Receive_IT+0x58>
=======
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	4613      	mov	r3, r2
 800459e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	d11d      	bne.n	80045e8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <HAL_UART_Receive_IT+0x26>
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e016      	b.n	80045ea <HAL_UART_Receive_IT+0x58>
>>>>>>> FFF
    }

    /* Process Locked */
    __HAL_LOCK(huart);
<<<<<<< HEAD
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_UART_Receive_IT+0x38>
 8005d66:	2302      	movs	r3, #2
 8005d68:	e00f      	b.n	8005d8a <HAL_UART_Receive_IT+0x58>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005d78:	88fb      	ldrh	r3, [r7, #6]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	68b9      	ldr	r1, [r7, #8]
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 f9cf 	bl	8006122 <UART_Start_Receive_IT>
 8005d84:	4603      	mov	r3, r0
 8005d86:	e000      	b.n	8005d8a <HAL_UART_Receive_IT+0x58>
=======
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d101      	bne.n	80045ca <HAL_UART_Receive_IT+0x38>
 80045c6:	2302      	movs	r3, #2
 80045c8:	e00f      	b.n	80045ea <HAL_UART_Receive_IT+0x58>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80045d8:	88fb      	ldrh	r3, [r7, #6]
 80045da:	461a      	mov	r2, r3
 80045dc:	68b9      	ldr	r1, [r7, #8]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 f9cf 	bl	8004982 <UART_Start_Receive_IT>
 80045e4:	4603      	mov	r3, r0
 80045e6:	e000      	b.n	80045ea <HAL_UART_Receive_IT+0x58>
>>>>>>> FFF
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8005d88:	2302      	movs	r3, #2
  }
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <HAL_UART_IRQHandler>:
=======
 80045e8:	2302      	movs	r3, #2
  }
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <HAL_UART_IRQHandler>:
>>>>>>> FFF
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08a      	sub	sp, #40	; 0x28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10d      	bne.n	8005de6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	f003 0320 	and.w	r3, r3, #32
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d008      	beq.n	8005de6 <HAL_UART_IRQHandler+0x52>
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	f003 0320 	and.w	r3, r3, #32
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fa7f 	bl	80062e2 <UART_Receive_IT>
      return;
 8005de4:	e17b      	b.n	80060de <HAL_UART_IRQHandler+0x34a>
=======
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08a      	sub	sp, #40	; 0x28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004614:	2300      	movs	r3, #0
 8004616:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10d      	bne.n	8004646 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b00      	cmp	r3, #0
 8004632:	d008      	beq.n	8004646 <HAL_UART_IRQHandler+0x52>
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fa7f 	bl	8004b42 <UART_Receive_IT>
      return;
 8004644:	e17b      	b.n	800493e <HAL_UART_IRQHandler+0x34a>
>>>>>>> FFF
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
<<<<<<< HEAD
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 80b1 	beq.w	8005f50 <HAL_UART_IRQHandler+0x1bc>
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d105      	bne.n	8005e04 <HAL_UART_IRQHandler+0x70>
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 80a6 	beq.w	8005f50 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <HAL_UART_IRQHandler+0x90>
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d005      	beq.n	8005e24 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1c:	f043 0201 	orr.w	r2, r3, #1
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80b1 	beq.w	80047b0 <HAL_UART_IRQHandler+0x1bc>
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b00      	cmp	r3, #0
 8004656:	d105      	bne.n	8004664 <HAL_UART_IRQHandler+0x70>
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 80a6 	beq.w	80047b0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <HAL_UART_IRQHandler+0x90>
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	f043 0201 	orr.w	r2, r3, #1
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> FFF
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <HAL_UART_IRQHandler+0xb0>
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d005      	beq.n	8005e44 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	f043 0202 	orr.w	r2, r3, #2
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HAL_UART_IRQHandler+0xb0>
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d005      	beq.n	80046a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	f043 0202 	orr.w	r2, r3, #2
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> FFF
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <HAL_UART_IRQHandler+0xd0>
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5c:	f043 0204 	orr.w	r2, r3, #4
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <HAL_UART_IRQHandler+0xd0>
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	f043 0204 	orr.w	r2, r3, #4
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> FFF
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
<<<<<<< HEAD
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00f      	beq.n	8005e8e <HAL_UART_IRQHandler+0xfa>
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d104      	bne.n	8005e82 <HAL_UART_IRQHandler+0xee>
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d005      	beq.n	8005e8e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	f043 0208 	orr.w	r2, r3, #8
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00f      	beq.n	80046ee <HAL_UART_IRQHandler+0xfa>
 80046ce:	6a3b      	ldr	r3, [r7, #32]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d104      	bne.n	80046e2 <HAL_UART_IRQHandler+0xee>
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d005      	beq.n	80046ee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	f043 0208 	orr.w	r2, r3, #8
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> FFF
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 811e 	beq.w	80060d4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d007      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x11e>
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	f003 0320 	and.w	r3, r3, #32
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fa18 	bl	80062e2 <UART_Receive_IT>
=======
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 811e 	beq.w	8004934 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <HAL_UART_IRQHandler+0x11e>
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fa18 	bl	8004b42 <UART_Receive_IT>
>>>>>>> FFF
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	bf14      	ite	ne
 8005ec0:	2301      	movne	r3, #1
 8005ec2:	2300      	moveq	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d102      	bne.n	8005eda <HAL_UART_IRQHandler+0x146>
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d031      	beq.n	8005f3e <HAL_UART_IRQHandler+0x1aa>
=======
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	bf14      	ite	ne
 8004720:	2301      	movne	r3, #1
 8004722:	2300      	moveq	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b00      	cmp	r3, #0
 8004732:	d102      	bne.n	800473a <HAL_UART_IRQHandler+0x146>
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d031      	beq.n	800479e <HAL_UART_IRQHandler+0x1aa>
>>>>>>> FFF
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f95a 	bl	8006194 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d023      	beq.n	8005f36 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	695a      	ldr	r2, [r3, #20]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005efc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d013      	beq.n	8005f2e <HAL_UART_IRQHandler+0x19a>
=======
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f95a 	bl	80049f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d023      	beq.n	8004796 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695a      	ldr	r2, [r3, #20]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800475c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	2b00      	cmp	r3, #0
 8004764:	d013      	beq.n	800478e <HAL_UART_IRQHandler+0x19a>
>>>>>>> FFF
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	4a76      	ldr	r2, [pc, #472]	; (80060e4 <HAL_UART_IRQHandler+0x350>)
 8005f0c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fd fa10 	bl	8003338 <HAL_DMA_Abort_IT>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d016      	beq.n	8005f4c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f28:	4610      	mov	r0, r2
 8005f2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f2c:	e00e      	b.n	8005f4c <HAL_UART_IRQHandler+0x1b8>
=======
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	4a76      	ldr	r2, [pc, #472]	; (8004944 <HAL_UART_IRQHandler+0x350>)
 800476c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	4618      	mov	r0, r3
 8004774:	f7fd fa54 	bl	8001c20 <HAL_DMA_Abort_IT>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d016      	beq.n	80047ac <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004788:	4610      	mov	r0, r2
 800478a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478c:	e00e      	b.n	80047ac <HAL_UART_IRQHandler+0x1b8>
>>>>>>> FFF
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f8e3 	bl	80060fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f34:	e00a      	b.n	8005f4c <HAL_UART_IRQHandler+0x1b8>
=======
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f8e3 	bl	800495a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004794:	e00a      	b.n	80047ac <HAL_UART_IRQHandler+0x1b8>
>>>>>>> FFF
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f8df 	bl	80060fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f3c:	e006      	b.n	8005f4c <HAL_UART_IRQHandler+0x1b8>
=======
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f8df 	bl	800495a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800479c:	e006      	b.n	80047ac <HAL_UART_IRQHandler+0x1b8>
>>>>>>> FFF
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f8db 	bl	80060fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f4a:	e0c3      	b.n	80060d4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4c:	bf00      	nop
    return;
 8005f4e:	e0c1      	b.n	80060d4 <HAL_UART_IRQHandler+0x340>
=======
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f8db 	bl	800495a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80047aa:	e0c3      	b.n	8004934 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ac:	bf00      	nop
    return;
 80047ae:	e0c1      	b.n	8004934 <HAL_UART_IRQHandler+0x340>
>>>>>>> FFF
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	f040 80a1 	bne.w	800609c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 809b 	beq.w	800609c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	f003 0310 	and.w	r3, r3, #16
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 8095 	beq.w	800609c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	60fb      	str	r3, [r7, #12]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	60fb      	str	r3, [r7, #12]
 8005f86:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d04e      	beq.n	8006034 <HAL_UART_IRQHandler+0x2a0>
=======
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	f040 80a1 	bne.w	80048fc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 809b 	beq.w	80048fc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	f003 0310 	and.w	r3, r3, #16
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 8095 	beq.w	80048fc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d04e      	beq.n	8004894 <HAL_UART_IRQHandler+0x2a0>
>>>>>>> FFF
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005fa0:	8a3b      	ldrh	r3, [r7, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 8098 	beq.w	80060d8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fac:	8a3a      	ldrh	r2, [r7, #16]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	f080 8092 	bcs.w	80060d8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	8a3a      	ldrh	r2, [r7, #16]
 8005fb8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	2b20      	cmp	r3, #32
 8005fc2:	d02b      	beq.n	800601c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fd2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	695a      	ldr	r2, [r3, #20]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0201 	bic.w	r2, r2, #1
 8005fe2:	615a      	str	r2, [r3, #20]
=======
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004800:	8a3b      	ldrh	r3, [r7, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 8098 	beq.w	8004938 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800480c:	8a3a      	ldrh	r2, [r7, #16]
 800480e:	429a      	cmp	r2, r3
 8004810:	f080 8092 	bcs.w	8004938 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	8a3a      	ldrh	r2, [r7, #16]
 8004818:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	2b20      	cmp	r3, #32
 8004822:	d02b      	beq.n	800487c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004832:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695a      	ldr	r2, [r3, #20]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0201 	bic.w	r2, r2, #1
 8004842:	615a      	str	r2, [r3, #20]
>>>>>>> FFF

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	695a      	ldr	r2, [r3, #20]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ff2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0210 	bic.w	r2, r2, #16
 8006010:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	4618      	mov	r0, r3
 8006018:	f7fd f953 	bl	80032c2 <HAL_DMA_Abort>
=======
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695a      	ldr	r2, [r3, #20]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004852:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0210 	bic.w	r2, r2, #16
 8004870:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	4618      	mov	r0, r3
 8004878:	f7fd f997 	bl	8001baa <HAL_DMA_Abort>
>>>>>>> FFF
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006024:	b29b      	uxth	r3, r3
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	b29b      	uxth	r3, r3
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f86d 	bl	800610c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006032:	e051      	b.n	80060d8 <HAL_UART_IRQHandler+0x344>
=======
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004884:	b29b      	uxth	r3, r3
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	b29b      	uxth	r3, r3
 800488a:	4619      	mov	r1, r3
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f86d 	bl	800496c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004892:	e051      	b.n	8004938 <HAL_UART_IRQHandler+0x344>
>>>>>>> FFF
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800603c:	b29b      	uxth	r3, r3
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d047      	beq.n	80060dc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800604c:	8a7b      	ldrh	r3, [r7, #18]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d044      	beq.n	80060dc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68da      	ldr	r2, [r3, #12]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006060:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695a      	ldr	r2, [r3, #20]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0201 	bic.w	r2, r2, #1
 8006070:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68da      	ldr	r2, [r3, #12]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0210 	bic.w	r2, r2, #16
 800608e:	60da      	str	r2, [r3, #12]
=======
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800489c:	b29b      	uxth	r3, r3
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d047      	beq.n	800493c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80048ac:	8a7b      	ldrh	r3, [r7, #18]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d044      	beq.n	800493c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68da      	ldr	r2, [r3, #12]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048c0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695a      	ldr	r2, [r3, #20]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0201 	bic.w	r2, r2, #1
 80048d0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0210 	bic.w	r2, r2, #16
 80048ee:	60da      	str	r2, [r3, #12]
>>>>>>> FFF
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 8006090:	8a7b      	ldrh	r3, [r7, #18]
 8006092:	4619      	mov	r1, r3
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f839 	bl	800610c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800609a:	e01f      	b.n	80060dc <HAL_UART_IRQHandler+0x348>
=======
 80048f0:	8a7b      	ldrh	r3, [r7, #18]
 80048f2:	4619      	mov	r1, r3
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f839 	bl	800496c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80048fa:	e01f      	b.n	800493c <HAL_UART_IRQHandler+0x348>
>>>>>>> FFF
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
<<<<<<< HEAD
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d008      	beq.n	80060b8 <HAL_UART_IRQHandler+0x324>
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f8af 	bl	8006214 <UART_Transmit_IT>
    return;
 80060b6:	e012      	b.n	80060de <HAL_UART_IRQHandler+0x34a>
=======
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004902:	2b00      	cmp	r3, #0
 8004904:	d008      	beq.n	8004918 <HAL_UART_IRQHandler+0x324>
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f8af 	bl	8004a74 <UART_Transmit_IT>
    return;
 8004916:	e012      	b.n	800493e <HAL_UART_IRQHandler+0x34a>
>>>>>>> FFF
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
<<<<<<< HEAD
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00d      	beq.n	80060de <HAL_UART_IRQHandler+0x34a>
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d008      	beq.n	80060de <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f8f0 	bl	80062b2 <UART_EndTransmit_IT>
    return;
 80060d2:	e004      	b.n	80060de <HAL_UART_IRQHandler+0x34a>
    return;
 80060d4:	bf00      	nop
 80060d6:	e002      	b.n	80060de <HAL_UART_IRQHandler+0x34a>
      return;
 80060d8:	bf00      	nop
 80060da:	e000      	b.n	80060de <HAL_UART_IRQHandler+0x34a>
      return;
 80060dc:	bf00      	nop
  }
}
 80060de:	3728      	adds	r7, #40	; 0x28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	080061ed 	.word	0x080061ed

080060e8 <HAL_UART_TxCpltCallback>:
=======
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00d      	beq.n	800493e <HAL_UART_IRQHandler+0x34a>
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004928:	2b00      	cmp	r3, #0
 800492a:	d008      	beq.n	800493e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f8f0 	bl	8004b12 <UART_EndTransmit_IT>
    return;
 8004932:	e004      	b.n	800493e <HAL_UART_IRQHandler+0x34a>
    return;
 8004934:	bf00      	nop
 8004936:	e002      	b.n	800493e <HAL_UART_IRQHandler+0x34a>
      return;
 8004938:	bf00      	nop
 800493a:	e000      	b.n	800493e <HAL_UART_IRQHandler+0x34a>
      return;
 800493c:	bf00      	nop
  }
}
 800493e:	3728      	adds	r7, #40	; 0x28
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	08004a4d 	.word	0x08004a4d

08004948 <HAL_UART_TxCpltCallback>:
>>>>>>> FFF
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
=======
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bc80      	pop	{r7}
 80060f8:	4770      	bx	lr

080060fa <HAL_UART_ErrorCallback>:
=======
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	bc80      	pop	{r7}
 8004958:	4770      	bx	lr

0800495a <HAL_UART_ErrorCallback>:
>>>>>>> FFF
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
=======
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	bc80      	pop	{r7}
 800610a:	4770      	bx	lr

0800610c <HAL_UARTEx_RxEventCallback>:
=======
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr

0800496c <HAL_UARTEx_RxEventCallback>:
>>>>>>> FFF
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	460b      	mov	r3, r1
 8006116:	807b      	strh	r3, [r7, #2]
=======
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	460b      	mov	r3, r1
 8004976:	807b      	strh	r3, [r7, #2]
>>>>>>> FFF
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	bc80      	pop	{r7}
 8006120:	4770      	bx	lr

08006122 <UART_Start_Receive_IT>:
=======
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	bc80      	pop	{r7}
 8004980:	4770      	bx	lr

08004982 <UART_Start_Receive_IT>:
>>>>>>> FFF
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8006122:	b480      	push	{r7}
 8006124:	b085      	sub	sp, #20
 8006126:	af00      	add	r7, sp, #0
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	4613      	mov	r3, r2
 800612e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	88fa      	ldrh	r2, [r7, #6]
 800613a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	88fa      	ldrh	r2, [r7, #6]
 8006140:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2222      	movs	r2, #34	; 0x22
 800614c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006166:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	695a      	ldr	r2, [r3, #20]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f042 0201 	orr.w	r2, r2, #1
 8006176:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0220 	orr.w	r2, r2, #32
 8006186:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	bc80      	pop	{r7}
 8006192:	4770      	bx	lr

08006194 <UART_EndRxTransfer>:
=======
 8004982:	b480      	push	{r7}
 8004984:	b085      	sub	sp, #20
 8004986:	af00      	add	r7, sp, #0
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	4613      	mov	r3, r2
 800498e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	88fa      	ldrh	r2, [r7, #6]
 800499a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	88fa      	ldrh	r2, [r7, #6]
 80049a0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2222      	movs	r2, #34	; 0x22
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049c6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695a      	ldr	r2, [r3, #20]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0201 	orr.w	r2, r2, #1
 80049d6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0220 	orr.w	r2, r2, #32
 80049e6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr

080049f4 <UART_EndRxTransfer>:
>>>>>>> FFF
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68da      	ldr	r2, [r3, #12]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061aa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	695a      	ldr	r2, [r3, #20]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0201 	bic.w	r2, r2, #1
 80061ba:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d107      	bne.n	80061d4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 0210 	bic.w	r2, r2, #16
 80061d2:	60da      	str	r2, [r3, #12]
=======
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68da      	ldr	r2, [r3, #12]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a0a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695a      	ldr	r2, [r3, #20]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0201 	bic.w	r2, r2, #1
 8004a1a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d107      	bne.n	8004a34 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0210 	bic.w	r2, r2, #16
 8004a32:	60da      	str	r2, [r3, #12]
>>>>>>> FFF
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bc80      	pop	{r7}
 80061ea:	4770      	bx	lr

080061ec <UART_DMAAbortOnError>:
=======
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr

08004a4c <UART_DMAAbortOnError>:
>>>>>>> FFF
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	84da      	strh	r2, [r3, #38]	; 0x26
=======
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	84da      	strh	r2, [r3, #38]	; 0x26
>>>>>>> FFF
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f7ff ff77 	bl	80060fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800620c:	bf00      	nop
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <UART_Transmit_IT>:
=======
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f7ff ff77 	bl	800495a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a6c:	bf00      	nop
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <UART_Transmit_IT>:
>>>>>>> FFF
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
=======
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b21      	cmp	r3, #33	; 0x21
 8006226:	d13e      	bne.n	80062a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006230:	d114      	bne.n	800625c <UART_Transmit_IT+0x48>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d110      	bne.n	800625c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	461a      	mov	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800624e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	1c9a      	adds	r2, r3, #2
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	621a      	str	r2, [r3, #32]
 800625a:	e008      	b.n	800626e <UART_Transmit_IT+0x5a>
=======
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b21      	cmp	r3, #33	; 0x21
 8004a86:	d13e      	bne.n	8004b06 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a90:	d114      	bne.n	8004abc <UART_Transmit_IT+0x48>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d110      	bne.n	8004abc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	1c9a      	adds	r2, r3, #2
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	621a      	str	r2, [r3, #32]
 8004aba:	e008      	b.n	8004ace <UART_Transmit_IT+0x5a>
>>>>>>> FFF
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
<<<<<<< HEAD
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	1c59      	adds	r1, r3, #1
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6211      	str	r1, [r2, #32]
 8006266:	781a      	ldrb	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006272:	b29b      	uxth	r3, r3
 8006274:	3b01      	subs	r3, #1
 8006276:	b29b      	uxth	r3, r3
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	4619      	mov	r1, r3
 800627c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10f      	bne.n	80062a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006290:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	e000      	b.n	80062a8 <UART_Transmit_IT+0x94>
=======
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	1c59      	adds	r1, r3, #1
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6211      	str	r1, [r2, #32]
 8004ac6:	781a      	ldrb	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	4619      	mov	r1, r3
 8004adc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10f      	bne.n	8004b02 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004af0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	e000      	b.n	8004b08 <UART_Transmit_IT+0x94>
>>>>>>> FFF
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80062a6:	2302      	movs	r3, #2
  }
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bc80      	pop	{r7}
 80062b0:	4770      	bx	lr

080062b2 <UART_EndTransmit_IT>:
=======
 8004b06:	2302      	movs	r3, #2
  }
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr

08004b12 <UART_EndTransmit_IT>:
>>>>>>> FFF
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> FFF
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff ff08 	bl	80060e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <UART_Receive_IT>:
=======
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7ff ff08 	bl	8004948 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <UART_Receive_IT>:
>>>>>>> FFF
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b086      	sub	sp, #24
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
=======
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b086      	sub	sp, #24
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b22      	cmp	r3, #34	; 0x22
 80062f4:	f040 8099 	bne.w	800642a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006300:	d117      	bne.n	8006332 <UART_Receive_IT+0x50>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d113      	bne.n	8006332 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800630a:	2300      	movs	r3, #0
 800630c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006312:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	b29b      	uxth	r3, r3
 800631c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006320:	b29a      	uxth	r2, r3
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632a:	1c9a      	adds	r2, r3, #2
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	629a      	str	r2, [r3, #40]	; 0x28
 8006330:	e026      	b.n	8006380 <UART_Receive_IT+0x9e>
=======
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b22      	cmp	r3, #34	; 0x22
 8004b54:	f040 8099 	bne.w	8004c8a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b60:	d117      	bne.n	8004b92 <UART_Receive_IT+0x50>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d113      	bne.n	8004b92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b72:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8a:	1c9a      	adds	r2, r3, #2
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	629a      	str	r2, [r3, #40]	; 0x28
 8004b90:	e026      	b.n	8004be0 <UART_Receive_IT+0x9e>
>>>>>>> FFF
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
<<<<<<< HEAD
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006336:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006338:	2300      	movs	r3, #0
 800633a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006344:	d007      	beq.n	8006356 <UART_Receive_IT+0x74>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <UART_Receive_IT+0x82>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d106      	bne.n	8006364 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	b2da      	uxtb	r2, r3
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	e008      	b.n	8006376 <UART_Receive_IT+0x94>
=======
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba4:	d007      	beq.n	8004bb6 <UART_Receive_IT+0x74>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10a      	bne.n	8004bc4 <UART_Receive_IT+0x82>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	701a      	strb	r2, [r3, #0]
 8004bc2:	e008      	b.n	8004bd6 <UART_Receive_IT+0x94>
>>>>>>> FFF
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
<<<<<<< HEAD
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	b2db      	uxtb	r3, r3
 800636c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006370:	b2da      	uxtb	r2, r3
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637a:	1c5a      	adds	r2, r3, #1
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006384:	b29b      	uxth	r3, r3
 8006386:	3b01      	subs	r3, #1
 8006388:	b29b      	uxth	r3, r3
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	4619      	mov	r1, r3
 800638e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006390:	2b00      	cmp	r3, #0
 8006392:	d148      	bne.n	8006426 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0220 	bic.w	r2, r2, #32
 80063a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68da      	ldr	r2, [r3, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	695a      	ldr	r2, [r3, #20]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0201 	bic.w	r2, r2, #1
 80063c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2220      	movs	r2, #32
 80063c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
=======
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	4619      	mov	r1, r3
 8004bee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d148      	bne.n	8004c86 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0220 	bic.w	r2, r2, #32
 8004c02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695a      	ldr	r2, [r3, #20]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0201 	bic.w	r2, r2, #1
 8004c22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
>>>>>>> FFF

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d123      	bne.n	800641c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 0210 	bic.w	r2, r2, #16
 80063e8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0310 	and.w	r3, r3, #16
 80063f4:	2b10      	cmp	r3, #16
 80063f6:	d10a      	bne.n	800640e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063f8:	2300      	movs	r3, #0
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	68fb      	ldr	r3, [r7, #12]
=======
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d123      	bne.n	8004c7c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0210 	bic.w	r2, r2, #16
 8004c48:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0310 	and.w	r3, r3, #16
 8004c54:	2b10      	cmp	r3, #16
 8004c56:	d10a      	bne.n	8004c6e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
>>>>>>> FFF
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006412:	4619      	mov	r1, r3
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff fe79 	bl	800610c <HAL_UARTEx_RxEventCallback>
 800641a:	e002      	b.n	8006422 <UART_Receive_IT+0x140>
=======
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c72:	4619      	mov	r1, r3
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff fe79 	bl	800496c <HAL_UARTEx_RxEventCallback>
 8004c7a:	e002      	b.n	8004c82 <UART_Receive_IT+0x140>
>>>>>>> FFF
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7fb fb35 	bl	8001a8c <HAL_UART_RxCpltCallback>
=======
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7fc fac7 	bl	8001210 <HAL_UART_RxCpltCallback>
>>>>>>> FFF
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
<<<<<<< HEAD
 8006422:	2300      	movs	r3, #0
 8006424:	e002      	b.n	800642c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	e000      	b.n	800642c <UART_Receive_IT+0x14a>
=======
 8004c82:	2300      	movs	r3, #0
 8004c84:	e002      	b.n	8004c8c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	e000      	b.n	8004c8c <UART_Receive_IT+0x14a>
>>>>>>> FFF
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 800642a:	2302      	movs	r3, #2
  }
}
 800642c:	4618      	mov	r0, r3
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <UART_SetConfig>:
=======
 8004c8a:	2302      	movs	r3, #2
  }
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <UART_SetConfig>:
>>>>>>> FFF
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
=======
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68da      	ldr	r2, [r3, #12]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	611a      	str	r2, [r3, #16]
=======
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	611a      	str	r2, [r3, #16]
>>>>>>> FFF
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
<<<<<<< HEAD
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	431a      	orrs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800646e:	f023 030c 	bic.w	r3, r3, #12
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	6812      	ldr	r2, [r2, #0]
 8006476:	68b9      	ldr	r1, [r7, #8]
 8006478:	430b      	orrs	r3, r1
 800647a:	60d3      	str	r3, [r2, #12]
=======
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689a      	ldr	r2, [r3, #8]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004cce:	f023 030c 	bic.w	r3, r3, #12
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	60d3      	str	r3, [r2, #12]
>>>>>>> FFF
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a2c      	ldr	r2, [pc, #176]	; (8006548 <UART_SetConfig+0x114>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d103      	bne.n	80064a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800649c:	f7fe f9e8 	bl	8004870 <HAL_RCC_GetPCLK2Freq>
 80064a0:	60f8      	str	r0, [r7, #12]
 80064a2:	e002      	b.n	80064aa <UART_SetConfig+0x76>
=======
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699a      	ldr	r2, [r3, #24]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a2c      	ldr	r2, [pc, #176]	; (8004da8 <UART_SetConfig+0x114>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d103      	bne.n	8004d04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004cfc:	f7fe fa2c 	bl	8003158 <HAL_RCC_GetPCLK2Freq>
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	e002      	b.n	8004d0a <UART_SetConfig+0x76>
>>>>>>> FFF
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 80064a4:	f7fe f9d0 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 80064a8:	60f8      	str	r0, [r7, #12]
=======
 8004d04:	f7fe fa14 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 8004d08:	60f8      	str	r0, [r7, #12]
>>>>>>> FFF
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
<<<<<<< HEAD
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4613      	mov	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	009a      	lsls	r2, r3, #2
 80064b4:	441a      	add	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c0:	4a22      	ldr	r2, [pc, #136]	; (800654c <UART_SetConfig+0x118>)
 80064c2:	fba2 2303 	umull	r2, r3, r2, r3
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	0119      	lsls	r1, r3, #4
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	009a      	lsls	r2, r3, #2
 80064d4:	441a      	add	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80064e0:	4b1a      	ldr	r3, [pc, #104]	; (800654c <UART_SetConfig+0x118>)
 80064e2:	fba3 0302 	umull	r0, r3, r3, r2
 80064e6:	095b      	lsrs	r3, r3, #5
 80064e8:	2064      	movs	r0, #100	; 0x64
 80064ea:	fb00 f303 	mul.w	r3, r0, r3
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	011b      	lsls	r3, r3, #4
 80064f2:	3332      	adds	r3, #50	; 0x32
 80064f4:	4a15      	ldr	r2, [pc, #84]	; (800654c <UART_SetConfig+0x118>)
 80064f6:	fba2 2303 	umull	r2, r3, r2, r3
 80064fa:	095b      	lsrs	r3, r3, #5
 80064fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006500:	4419      	add	r1, r3
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4613      	mov	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	009a      	lsls	r2, r3, #2
 800650c:	441a      	add	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	fbb2 f2f3 	udiv	r2, r2, r3
 8006518:	4b0c      	ldr	r3, [pc, #48]	; (800654c <UART_SetConfig+0x118>)
 800651a:	fba3 0302 	umull	r0, r3, r3, r2
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	2064      	movs	r0, #100	; 0x64
 8006522:	fb00 f303 	mul.w	r3, r0, r3
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	011b      	lsls	r3, r3, #4
 800652a:	3332      	adds	r3, #50	; 0x32
 800652c:	4a07      	ldr	r2, [pc, #28]	; (800654c <UART_SetConfig+0x118>)
 800652e:	fba2 2303 	umull	r2, r3, r2, r3
 8006532:	095b      	lsrs	r3, r3, #5
 8006534:	f003 020f 	and.w	r2, r3, #15
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	440a      	add	r2, r1
 800653e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006540:	bf00      	nop
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	40013800 	.word	0x40013800
 800654c:	51eb851f 	.word	0x51eb851f

08006550 <__errno>:
 8006550:	4b01      	ldr	r3, [pc, #4]	; (8006558 <__errno+0x8>)
 8006552:	6818      	ldr	r0, [r3, #0]
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	20000048 	.word	0x20000048

0800655c <__libc_init_array>:
 800655c:	b570      	push	{r4, r5, r6, lr}
 800655e:	2600      	movs	r6, #0
 8006560:	4d0c      	ldr	r5, [pc, #48]	; (8006594 <__libc_init_array+0x38>)
 8006562:	4c0d      	ldr	r4, [pc, #52]	; (8006598 <__libc_init_array+0x3c>)
 8006564:	1b64      	subs	r4, r4, r5
 8006566:	10a4      	asrs	r4, r4, #2
 8006568:	42a6      	cmp	r6, r4
 800656a:	d109      	bne.n	8006580 <__libc_init_array+0x24>
 800656c:	f000 fce2 	bl	8006f34 <_init>
 8006570:	2600      	movs	r6, #0
 8006572:	4d0a      	ldr	r5, [pc, #40]	; (800659c <__libc_init_array+0x40>)
 8006574:	4c0a      	ldr	r4, [pc, #40]	; (80065a0 <__libc_init_array+0x44>)
 8006576:	1b64      	subs	r4, r4, r5
 8006578:	10a4      	asrs	r4, r4, #2
 800657a:	42a6      	cmp	r6, r4
 800657c:	d105      	bne.n	800658a <__libc_init_array+0x2e>
 800657e:	bd70      	pop	{r4, r5, r6, pc}
 8006580:	f855 3b04 	ldr.w	r3, [r5], #4
 8006584:	4798      	blx	r3
 8006586:	3601      	adds	r6, #1
 8006588:	e7ee      	b.n	8006568 <__libc_init_array+0xc>
 800658a:	f855 3b04 	ldr.w	r3, [r5], #4
 800658e:	4798      	blx	r3
 8006590:	3601      	adds	r6, #1
 8006592:	e7f2      	b.n	800657a <__libc_init_array+0x1e>
 8006594:	08007860 	.word	0x08007860
 8006598:	08007860 	.word	0x08007860
 800659c:	08007860 	.word	0x08007860
 80065a0:	08007864 	.word	0x08007864

080065a4 <__itoa>:
 80065a4:	1e93      	subs	r3, r2, #2
 80065a6:	2b22      	cmp	r3, #34	; 0x22
 80065a8:	b510      	push	{r4, lr}
 80065aa:	460c      	mov	r4, r1
 80065ac:	d904      	bls.n	80065b8 <__itoa+0x14>
 80065ae:	2300      	movs	r3, #0
 80065b0:	461c      	mov	r4, r3
 80065b2:	700b      	strb	r3, [r1, #0]
 80065b4:	4620      	mov	r0, r4
 80065b6:	bd10      	pop	{r4, pc}
 80065b8:	2a0a      	cmp	r2, #10
 80065ba:	d109      	bne.n	80065d0 <__itoa+0x2c>
 80065bc:	2800      	cmp	r0, #0
 80065be:	da07      	bge.n	80065d0 <__itoa+0x2c>
 80065c0:	232d      	movs	r3, #45	; 0x2d
 80065c2:	700b      	strb	r3, [r1, #0]
 80065c4:	2101      	movs	r1, #1
 80065c6:	4240      	negs	r0, r0
 80065c8:	4421      	add	r1, r4
 80065ca:	f000 f91b 	bl	8006804 <__utoa>
 80065ce:	e7f1      	b.n	80065b4 <__itoa+0x10>
 80065d0:	2100      	movs	r1, #0
 80065d2:	e7f9      	b.n	80065c8 <__itoa+0x24>

080065d4 <itoa>:
 80065d4:	f7ff bfe6 	b.w	80065a4 <__itoa>

080065d8 <memcpy>:
 80065d8:	440a      	add	r2, r1
 80065da:	4291      	cmp	r1, r2
 80065dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80065e0:	d100      	bne.n	80065e4 <memcpy+0xc>
 80065e2:	4770      	bx	lr
 80065e4:	b510      	push	{r4, lr}
 80065e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065ea:	4291      	cmp	r1, r2
 80065ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065f0:	d1f9      	bne.n	80065e6 <memcpy+0xe>
 80065f2:	bd10      	pop	{r4, pc}

080065f4 <memset>:
 80065f4:	4603      	mov	r3, r0
 80065f6:	4402      	add	r2, r0
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d100      	bne.n	80065fe <memset+0xa>
 80065fc:	4770      	bx	lr
 80065fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006602:	e7f9      	b.n	80065f8 <memset+0x4>

08006604 <_free_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	4605      	mov	r5, r0
 8006608:	2900      	cmp	r1, #0
 800660a:	d043      	beq.n	8006694 <_free_r+0x90>
 800660c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006610:	1f0c      	subs	r4, r1, #4
 8006612:	2b00      	cmp	r3, #0
 8006614:	bfb8      	it	lt
 8006616:	18e4      	addlt	r4, r4, r3
 8006618:	f000 f936 	bl	8006888 <__malloc_lock>
 800661c:	4a1e      	ldr	r2, [pc, #120]	; (8006698 <_free_r+0x94>)
 800661e:	6813      	ldr	r3, [r2, #0]
 8006620:	4610      	mov	r0, r2
 8006622:	b933      	cbnz	r3, 8006632 <_free_r+0x2e>
 8006624:	6063      	str	r3, [r4, #4]
 8006626:	6014      	str	r4, [r2, #0]
 8006628:	4628      	mov	r0, r5
 800662a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800662e:	f000 b931 	b.w	8006894 <__malloc_unlock>
 8006632:	42a3      	cmp	r3, r4
 8006634:	d90a      	bls.n	800664c <_free_r+0x48>
 8006636:	6821      	ldr	r1, [r4, #0]
 8006638:	1862      	adds	r2, r4, r1
 800663a:	4293      	cmp	r3, r2
 800663c:	bf01      	itttt	eq
 800663e:	681a      	ldreq	r2, [r3, #0]
 8006640:	685b      	ldreq	r3, [r3, #4]
 8006642:	1852      	addeq	r2, r2, r1
 8006644:	6022      	streq	r2, [r4, #0]
 8006646:	6063      	str	r3, [r4, #4]
 8006648:	6004      	str	r4, [r0, #0]
 800664a:	e7ed      	b.n	8006628 <_free_r+0x24>
 800664c:	461a      	mov	r2, r3
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	b10b      	cbz	r3, 8006656 <_free_r+0x52>
 8006652:	42a3      	cmp	r3, r4
 8006654:	d9fa      	bls.n	800664c <_free_r+0x48>
 8006656:	6811      	ldr	r1, [r2, #0]
 8006658:	1850      	adds	r0, r2, r1
 800665a:	42a0      	cmp	r0, r4
 800665c:	d10b      	bne.n	8006676 <_free_r+0x72>
 800665e:	6820      	ldr	r0, [r4, #0]
 8006660:	4401      	add	r1, r0
 8006662:	1850      	adds	r0, r2, r1
 8006664:	4283      	cmp	r3, r0
 8006666:	6011      	str	r1, [r2, #0]
 8006668:	d1de      	bne.n	8006628 <_free_r+0x24>
 800666a:	6818      	ldr	r0, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	4401      	add	r1, r0
 8006670:	6011      	str	r1, [r2, #0]
 8006672:	6053      	str	r3, [r2, #4]
 8006674:	e7d8      	b.n	8006628 <_free_r+0x24>
 8006676:	d902      	bls.n	800667e <_free_r+0x7a>
 8006678:	230c      	movs	r3, #12
 800667a:	602b      	str	r3, [r5, #0]
 800667c:	e7d4      	b.n	8006628 <_free_r+0x24>
 800667e:	6820      	ldr	r0, [r4, #0]
 8006680:	1821      	adds	r1, r4, r0
 8006682:	428b      	cmp	r3, r1
 8006684:	bf01      	itttt	eq
 8006686:	6819      	ldreq	r1, [r3, #0]
 8006688:	685b      	ldreq	r3, [r3, #4]
 800668a:	1809      	addeq	r1, r1, r0
 800668c:	6021      	streq	r1, [r4, #0]
 800668e:	6063      	str	r3, [r4, #4]
 8006690:	6054      	str	r4, [r2, #4]
 8006692:	e7c9      	b.n	8006628 <_free_r+0x24>
 8006694:	bd38      	pop	{r3, r4, r5, pc}
 8006696:	bf00      	nop
 8006698:	200005a4 	.word	0x200005a4

0800669c <_malloc_r>:
 800669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669e:	1ccd      	adds	r5, r1, #3
 80066a0:	f025 0503 	bic.w	r5, r5, #3
 80066a4:	3508      	adds	r5, #8
 80066a6:	2d0c      	cmp	r5, #12
 80066a8:	bf38      	it	cc
 80066aa:	250c      	movcc	r5, #12
 80066ac:	2d00      	cmp	r5, #0
 80066ae:	4606      	mov	r6, r0
 80066b0:	db01      	blt.n	80066b6 <_malloc_r+0x1a>
 80066b2:	42a9      	cmp	r1, r5
 80066b4:	d903      	bls.n	80066be <_malloc_r+0x22>
 80066b6:	230c      	movs	r3, #12
 80066b8:	6033      	str	r3, [r6, #0]
 80066ba:	2000      	movs	r0, #0
 80066bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066be:	f000 f8e3 	bl	8006888 <__malloc_lock>
 80066c2:	4921      	ldr	r1, [pc, #132]	; (8006748 <_malloc_r+0xac>)
 80066c4:	680a      	ldr	r2, [r1, #0]
 80066c6:	4614      	mov	r4, r2
 80066c8:	b99c      	cbnz	r4, 80066f2 <_malloc_r+0x56>
 80066ca:	4f20      	ldr	r7, [pc, #128]	; (800674c <_malloc_r+0xb0>)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	b923      	cbnz	r3, 80066da <_malloc_r+0x3e>
 80066d0:	4621      	mov	r1, r4
 80066d2:	4630      	mov	r0, r6
 80066d4:	f000 f83c 	bl	8006750 <_sbrk_r>
 80066d8:	6038      	str	r0, [r7, #0]
 80066da:	4629      	mov	r1, r5
 80066dc:	4630      	mov	r0, r6
 80066de:	f000 f837 	bl	8006750 <_sbrk_r>
 80066e2:	1c43      	adds	r3, r0, #1
 80066e4:	d123      	bne.n	800672e <_malloc_r+0x92>
 80066e6:	230c      	movs	r3, #12
 80066e8:	4630      	mov	r0, r6
 80066ea:	6033      	str	r3, [r6, #0]
 80066ec:	f000 f8d2 	bl	8006894 <__malloc_unlock>
 80066f0:	e7e3      	b.n	80066ba <_malloc_r+0x1e>
 80066f2:	6823      	ldr	r3, [r4, #0]
 80066f4:	1b5b      	subs	r3, r3, r5
 80066f6:	d417      	bmi.n	8006728 <_malloc_r+0x8c>
 80066f8:	2b0b      	cmp	r3, #11
 80066fa:	d903      	bls.n	8006704 <_malloc_r+0x68>
 80066fc:	6023      	str	r3, [r4, #0]
 80066fe:	441c      	add	r4, r3
 8006700:	6025      	str	r5, [r4, #0]
 8006702:	e004      	b.n	800670e <_malloc_r+0x72>
 8006704:	6863      	ldr	r3, [r4, #4]
 8006706:	42a2      	cmp	r2, r4
 8006708:	bf0c      	ite	eq
 800670a:	600b      	streq	r3, [r1, #0]
 800670c:	6053      	strne	r3, [r2, #4]
 800670e:	4630      	mov	r0, r6
 8006710:	f000 f8c0 	bl	8006894 <__malloc_unlock>
 8006714:	f104 000b 	add.w	r0, r4, #11
 8006718:	1d23      	adds	r3, r4, #4
 800671a:	f020 0007 	bic.w	r0, r0, #7
 800671e:	1ac2      	subs	r2, r0, r3
 8006720:	d0cc      	beq.n	80066bc <_malloc_r+0x20>
 8006722:	1a1b      	subs	r3, r3, r0
 8006724:	50a3      	str	r3, [r4, r2]
 8006726:	e7c9      	b.n	80066bc <_malloc_r+0x20>
 8006728:	4622      	mov	r2, r4
 800672a:	6864      	ldr	r4, [r4, #4]
 800672c:	e7cc      	b.n	80066c8 <_malloc_r+0x2c>
 800672e:	1cc4      	adds	r4, r0, #3
 8006730:	f024 0403 	bic.w	r4, r4, #3
 8006734:	42a0      	cmp	r0, r4
 8006736:	d0e3      	beq.n	8006700 <_malloc_r+0x64>
 8006738:	1a21      	subs	r1, r4, r0
 800673a:	4630      	mov	r0, r6
 800673c:	f000 f808 	bl	8006750 <_sbrk_r>
 8006740:	3001      	adds	r0, #1
 8006742:	d1dd      	bne.n	8006700 <_malloc_r+0x64>
 8006744:	e7cf      	b.n	80066e6 <_malloc_r+0x4a>
 8006746:	bf00      	nop
 8006748:	200005a4 	.word	0x200005a4
 800674c:	200005a8 	.word	0x200005a8

08006750 <_sbrk_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	2300      	movs	r3, #0
 8006754:	4d05      	ldr	r5, [pc, #20]	; (800676c <_sbrk_r+0x1c>)
 8006756:	4604      	mov	r4, r0
 8006758:	4608      	mov	r0, r1
 800675a:	602b      	str	r3, [r5, #0]
 800675c:	f7fb fc68 	bl	8002030 <_sbrk>
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	d102      	bne.n	800676a <_sbrk_r+0x1a>
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	b103      	cbz	r3, 800676a <_sbrk_r+0x1a>
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	bd38      	pop	{r3, r4, r5, pc}
 800676c:	200008b8 	.word	0x200008b8

08006770 <siprintf>:
 8006770:	b40e      	push	{r1, r2, r3}
 8006772:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006776:	b500      	push	{lr}
 8006778:	b09c      	sub	sp, #112	; 0x70
 800677a:	ab1d      	add	r3, sp, #116	; 0x74
 800677c:	9002      	str	r0, [sp, #8]
 800677e:	9006      	str	r0, [sp, #24]
 8006780:	9107      	str	r1, [sp, #28]
 8006782:	9104      	str	r1, [sp, #16]
 8006784:	4808      	ldr	r0, [pc, #32]	; (80067a8 <siprintf+0x38>)
 8006786:	4909      	ldr	r1, [pc, #36]	; (80067ac <siprintf+0x3c>)
 8006788:	f853 2b04 	ldr.w	r2, [r3], #4
 800678c:	9105      	str	r1, [sp, #20]
 800678e:	6800      	ldr	r0, [r0, #0]
 8006790:	a902      	add	r1, sp, #8
 8006792:	9301      	str	r3, [sp, #4]
 8006794:	f000 f8e0 	bl	8006958 <_svfiprintf_r>
 8006798:	2200      	movs	r2, #0
 800679a:	9b02      	ldr	r3, [sp, #8]
 800679c:	701a      	strb	r2, [r3, #0]
 800679e:	b01c      	add	sp, #112	; 0x70
 80067a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80067a4:	b003      	add	sp, #12
 80067a6:	4770      	bx	lr
 80067a8:	20000048 	.word	0x20000048
 80067ac:	ffff0208 	.word	0xffff0208

080067b0 <strcat>:
 80067b0:	4602      	mov	r2, r0
 80067b2:	b510      	push	{r4, lr}
 80067b4:	7814      	ldrb	r4, [r2, #0]
 80067b6:	4613      	mov	r3, r2
 80067b8:	3201      	adds	r2, #1
 80067ba:	2c00      	cmp	r4, #0
 80067bc:	d1fa      	bne.n	80067b4 <strcat+0x4>
 80067be:	3b01      	subs	r3, #1
 80067c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067c8:	2a00      	cmp	r2, #0
 80067ca:	d1f9      	bne.n	80067c0 <strcat+0x10>
 80067cc:	bd10      	pop	{r4, pc}

080067ce <strcpy>:
 80067ce:	4603      	mov	r3, r0
 80067d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067d4:	f803 2b01 	strb.w	r2, [r3], #1
 80067d8:	2a00      	cmp	r2, #0
 80067da:	d1f9      	bne.n	80067d0 <strcpy+0x2>
 80067dc:	4770      	bx	lr

080067de <strncpy>:
 80067de:	4603      	mov	r3, r0
 80067e0:	b510      	push	{r4, lr}
 80067e2:	3901      	subs	r1, #1
 80067e4:	b132      	cbz	r2, 80067f4 <strncpy+0x16>
 80067e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80067ea:	3a01      	subs	r2, #1
 80067ec:	f803 4b01 	strb.w	r4, [r3], #1
 80067f0:	2c00      	cmp	r4, #0
 80067f2:	d1f7      	bne.n	80067e4 <strncpy+0x6>
 80067f4:	2100      	movs	r1, #0
 80067f6:	441a      	add	r2, r3
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d100      	bne.n	80067fe <strncpy+0x20>
 80067fc:	bd10      	pop	{r4, pc}
 80067fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006802:	e7f9      	b.n	80067f8 <strncpy+0x1a>

08006804 <__utoa>:
 8006804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006806:	b08b      	sub	sp, #44	; 0x2c
 8006808:	4605      	mov	r5, r0
 800680a:	460b      	mov	r3, r1
 800680c:	466e      	mov	r6, sp
 800680e:	4c1d      	ldr	r4, [pc, #116]	; (8006884 <__utoa+0x80>)
 8006810:	f104 0c20 	add.w	ip, r4, #32
 8006814:	4637      	mov	r7, r6
 8006816:	6820      	ldr	r0, [r4, #0]
 8006818:	6861      	ldr	r1, [r4, #4]
 800681a:	3408      	adds	r4, #8
 800681c:	c703      	stmia	r7!, {r0, r1}
 800681e:	4564      	cmp	r4, ip
 8006820:	463e      	mov	r6, r7
 8006822:	d1f7      	bne.n	8006814 <__utoa+0x10>
 8006824:	7921      	ldrb	r1, [r4, #4]
 8006826:	6820      	ldr	r0, [r4, #0]
 8006828:	7139      	strb	r1, [r7, #4]
 800682a:	1e91      	subs	r1, r2, #2
 800682c:	2922      	cmp	r1, #34	; 0x22
 800682e:	6038      	str	r0, [r7, #0]
 8006830:	f04f 0100 	mov.w	r1, #0
 8006834:	d904      	bls.n	8006840 <__utoa+0x3c>
 8006836:	7019      	strb	r1, [r3, #0]
 8006838:	460b      	mov	r3, r1
 800683a:	4618      	mov	r0, r3
 800683c:	b00b      	add	sp, #44	; 0x2c
 800683e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006840:	1e58      	subs	r0, r3, #1
 8006842:	4684      	mov	ip, r0
 8006844:	fbb5 f7f2 	udiv	r7, r5, r2
 8006848:	fb02 5617 	mls	r6, r2, r7, r5
 800684c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006850:	4476      	add	r6, lr
 8006852:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006856:	460c      	mov	r4, r1
 8006858:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800685c:	462e      	mov	r6, r5
 800685e:	42b2      	cmp	r2, r6
 8006860:	463d      	mov	r5, r7
 8006862:	f101 0101 	add.w	r1, r1, #1
 8006866:	d9ed      	bls.n	8006844 <__utoa+0x40>
 8006868:	2200      	movs	r2, #0
 800686a:	545a      	strb	r2, [r3, r1]
 800686c:	1919      	adds	r1, r3, r4
 800686e:	1aa5      	subs	r5, r4, r2
 8006870:	42aa      	cmp	r2, r5
 8006872:	dae2      	bge.n	800683a <__utoa+0x36>
 8006874:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006878:	780e      	ldrb	r6, [r1, #0]
 800687a:	3201      	adds	r2, #1
 800687c:	7006      	strb	r6, [r0, #0]
 800687e:	f801 5901 	strb.w	r5, [r1], #-1
 8006882:	e7f4      	b.n	800686e <__utoa+0x6a>
 8006884:	08007808 	.word	0x08007808

08006888 <__malloc_lock>:
 8006888:	4801      	ldr	r0, [pc, #4]	; (8006890 <__malloc_lock+0x8>)
 800688a:	f000 bafb 	b.w	8006e84 <__retarget_lock_acquire_recursive>
 800688e:	bf00      	nop
 8006890:	200008c0 	.word	0x200008c0

08006894 <__malloc_unlock>:
 8006894:	4801      	ldr	r0, [pc, #4]	; (800689c <__malloc_unlock+0x8>)
 8006896:	f000 baf6 	b.w	8006e86 <__retarget_lock_release_recursive>
 800689a:	bf00      	nop
 800689c:	200008c0 	.word	0x200008c0

080068a0 <__ssputs_r>:
 80068a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068a4:	688e      	ldr	r6, [r1, #8]
 80068a6:	4682      	mov	sl, r0
 80068a8:	429e      	cmp	r6, r3
 80068aa:	460c      	mov	r4, r1
 80068ac:	4690      	mov	r8, r2
 80068ae:	461f      	mov	r7, r3
 80068b0:	d838      	bhi.n	8006924 <__ssputs_r+0x84>
 80068b2:	898a      	ldrh	r2, [r1, #12]
 80068b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80068b8:	d032      	beq.n	8006920 <__ssputs_r+0x80>
 80068ba:	6825      	ldr	r5, [r4, #0]
 80068bc:	6909      	ldr	r1, [r1, #16]
 80068be:	3301      	adds	r3, #1
 80068c0:	eba5 0901 	sub.w	r9, r5, r1
 80068c4:	6965      	ldr	r5, [r4, #20]
 80068c6:	444b      	add	r3, r9
 80068c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068d0:	106d      	asrs	r5, r5, #1
 80068d2:	429d      	cmp	r5, r3
 80068d4:	bf38      	it	cc
 80068d6:	461d      	movcc	r5, r3
 80068d8:	0553      	lsls	r3, r2, #21
 80068da:	d531      	bpl.n	8006940 <__ssputs_r+0xa0>
 80068dc:	4629      	mov	r1, r5
 80068de:	f7ff fedd 	bl	800669c <_malloc_r>
 80068e2:	4606      	mov	r6, r0
 80068e4:	b950      	cbnz	r0, 80068fc <__ssputs_r+0x5c>
 80068e6:	230c      	movs	r3, #12
 80068e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068ec:	f8ca 3000 	str.w	r3, [sl]
 80068f0:	89a3      	ldrh	r3, [r4, #12]
 80068f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068f6:	81a3      	strh	r3, [r4, #12]
 80068f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068fc:	464a      	mov	r2, r9
 80068fe:	6921      	ldr	r1, [r4, #16]
 8006900:	f7ff fe6a 	bl	80065d8 <memcpy>
 8006904:	89a3      	ldrh	r3, [r4, #12]
 8006906:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800690a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800690e:	81a3      	strh	r3, [r4, #12]
 8006910:	6126      	str	r6, [r4, #16]
 8006912:	444e      	add	r6, r9
 8006914:	6026      	str	r6, [r4, #0]
 8006916:	463e      	mov	r6, r7
 8006918:	6165      	str	r5, [r4, #20]
 800691a:	eba5 0509 	sub.w	r5, r5, r9
 800691e:	60a5      	str	r5, [r4, #8]
 8006920:	42be      	cmp	r6, r7
 8006922:	d900      	bls.n	8006926 <__ssputs_r+0x86>
 8006924:	463e      	mov	r6, r7
 8006926:	4632      	mov	r2, r6
 8006928:	4641      	mov	r1, r8
 800692a:	6820      	ldr	r0, [r4, #0]
 800692c:	f000 faba 	bl	8006ea4 <memmove>
 8006930:	68a3      	ldr	r3, [r4, #8]
 8006932:	6822      	ldr	r2, [r4, #0]
 8006934:	1b9b      	subs	r3, r3, r6
 8006936:	4432      	add	r2, r6
 8006938:	2000      	movs	r0, #0
 800693a:	60a3      	str	r3, [r4, #8]
 800693c:	6022      	str	r2, [r4, #0]
 800693e:	e7db      	b.n	80068f8 <__ssputs_r+0x58>
 8006940:	462a      	mov	r2, r5
 8006942:	f000 fac9 	bl	8006ed8 <_realloc_r>
 8006946:	4606      	mov	r6, r0
 8006948:	2800      	cmp	r0, #0
 800694a:	d1e1      	bne.n	8006910 <__ssputs_r+0x70>
 800694c:	4650      	mov	r0, sl
 800694e:	6921      	ldr	r1, [r4, #16]
 8006950:	f7ff fe58 	bl	8006604 <_free_r>
 8006954:	e7c7      	b.n	80068e6 <__ssputs_r+0x46>
	...

08006958 <_svfiprintf_r>:
 8006958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800695c:	4698      	mov	r8, r3
 800695e:	898b      	ldrh	r3, [r1, #12]
 8006960:	4607      	mov	r7, r0
 8006962:	061b      	lsls	r3, r3, #24
 8006964:	460d      	mov	r5, r1
 8006966:	4614      	mov	r4, r2
 8006968:	b09d      	sub	sp, #116	; 0x74
 800696a:	d50e      	bpl.n	800698a <_svfiprintf_r+0x32>
 800696c:	690b      	ldr	r3, [r1, #16]
 800696e:	b963      	cbnz	r3, 800698a <_svfiprintf_r+0x32>
 8006970:	2140      	movs	r1, #64	; 0x40
 8006972:	f7ff fe93 	bl	800669c <_malloc_r>
 8006976:	6028      	str	r0, [r5, #0]
 8006978:	6128      	str	r0, [r5, #16]
 800697a:	b920      	cbnz	r0, 8006986 <_svfiprintf_r+0x2e>
 800697c:	230c      	movs	r3, #12
 800697e:	603b      	str	r3, [r7, #0]
 8006980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006984:	e0d1      	b.n	8006b2a <_svfiprintf_r+0x1d2>
 8006986:	2340      	movs	r3, #64	; 0x40
 8006988:	616b      	str	r3, [r5, #20]
 800698a:	2300      	movs	r3, #0
 800698c:	9309      	str	r3, [sp, #36]	; 0x24
 800698e:	2320      	movs	r3, #32
 8006990:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006994:	2330      	movs	r3, #48	; 0x30
 8006996:	f04f 0901 	mov.w	r9, #1
 800699a:	f8cd 800c 	str.w	r8, [sp, #12]
 800699e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006b44 <_svfiprintf_r+0x1ec>
 80069a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069a6:	4623      	mov	r3, r4
 80069a8:	469a      	mov	sl, r3
 80069aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069ae:	b10a      	cbz	r2, 80069b4 <_svfiprintf_r+0x5c>
 80069b0:	2a25      	cmp	r2, #37	; 0x25
 80069b2:	d1f9      	bne.n	80069a8 <_svfiprintf_r+0x50>
 80069b4:	ebba 0b04 	subs.w	fp, sl, r4
 80069b8:	d00b      	beq.n	80069d2 <_svfiprintf_r+0x7a>
 80069ba:	465b      	mov	r3, fp
 80069bc:	4622      	mov	r2, r4
 80069be:	4629      	mov	r1, r5
 80069c0:	4638      	mov	r0, r7
 80069c2:	f7ff ff6d 	bl	80068a0 <__ssputs_r>
 80069c6:	3001      	adds	r0, #1
 80069c8:	f000 80aa 	beq.w	8006b20 <_svfiprintf_r+0x1c8>
 80069cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069ce:	445a      	add	r2, fp
 80069d0:	9209      	str	r2, [sp, #36]	; 0x24
 80069d2:	f89a 3000 	ldrb.w	r3, [sl]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 80a2 	beq.w	8006b20 <_svfiprintf_r+0x1c8>
 80069dc:	2300      	movs	r3, #0
 80069de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069e6:	f10a 0a01 	add.w	sl, sl, #1
 80069ea:	9304      	str	r3, [sp, #16]
 80069ec:	9307      	str	r3, [sp, #28]
 80069ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069f2:	931a      	str	r3, [sp, #104]	; 0x68
 80069f4:	4654      	mov	r4, sl
 80069f6:	2205      	movs	r2, #5
 80069f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069fc:	4851      	ldr	r0, [pc, #324]	; (8006b44 <_svfiprintf_r+0x1ec>)
 80069fe:	f000 fa43 	bl	8006e88 <memchr>
 8006a02:	9a04      	ldr	r2, [sp, #16]
 8006a04:	b9d8      	cbnz	r0, 8006a3e <_svfiprintf_r+0xe6>
 8006a06:	06d0      	lsls	r0, r2, #27
 8006a08:	bf44      	itt	mi
 8006a0a:	2320      	movmi	r3, #32
 8006a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a10:	0711      	lsls	r1, r2, #28
 8006a12:	bf44      	itt	mi
 8006a14:	232b      	movmi	r3, #43	; 0x2b
 8006a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8006a1e:	2b2a      	cmp	r3, #42	; 0x2a
 8006a20:	d015      	beq.n	8006a4e <_svfiprintf_r+0xf6>
 8006a22:	4654      	mov	r4, sl
 8006a24:	2000      	movs	r0, #0
 8006a26:	f04f 0c0a 	mov.w	ip, #10
 8006a2a:	9a07      	ldr	r2, [sp, #28]
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a32:	3b30      	subs	r3, #48	; 0x30
 8006a34:	2b09      	cmp	r3, #9
 8006a36:	d94e      	bls.n	8006ad6 <_svfiprintf_r+0x17e>
 8006a38:	b1b0      	cbz	r0, 8006a68 <_svfiprintf_r+0x110>
 8006a3a:	9207      	str	r2, [sp, #28]
 8006a3c:	e014      	b.n	8006a68 <_svfiprintf_r+0x110>
 8006a3e:	eba0 0308 	sub.w	r3, r0, r8
 8006a42:	fa09 f303 	lsl.w	r3, r9, r3
 8006a46:	4313      	orrs	r3, r2
 8006a48:	46a2      	mov	sl, r4
 8006a4a:	9304      	str	r3, [sp, #16]
 8006a4c:	e7d2      	b.n	80069f4 <_svfiprintf_r+0x9c>
 8006a4e:	9b03      	ldr	r3, [sp, #12]
 8006a50:	1d19      	adds	r1, r3, #4
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	9103      	str	r1, [sp, #12]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	bfbb      	ittet	lt
 8006a5a:	425b      	neglt	r3, r3
 8006a5c:	f042 0202 	orrlt.w	r2, r2, #2
 8006a60:	9307      	strge	r3, [sp, #28]
 8006a62:	9307      	strlt	r3, [sp, #28]
 8006a64:	bfb8      	it	lt
 8006a66:	9204      	strlt	r2, [sp, #16]
 8006a68:	7823      	ldrb	r3, [r4, #0]
 8006a6a:	2b2e      	cmp	r3, #46	; 0x2e
 8006a6c:	d10c      	bne.n	8006a88 <_svfiprintf_r+0x130>
 8006a6e:	7863      	ldrb	r3, [r4, #1]
 8006a70:	2b2a      	cmp	r3, #42	; 0x2a
 8006a72:	d135      	bne.n	8006ae0 <_svfiprintf_r+0x188>
 8006a74:	9b03      	ldr	r3, [sp, #12]
 8006a76:	3402      	adds	r4, #2
 8006a78:	1d1a      	adds	r2, r3, #4
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	9203      	str	r2, [sp, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	bfb8      	it	lt
 8006a82:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006a86:	9305      	str	r3, [sp, #20]
 8006a88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006b54 <_svfiprintf_r+0x1fc>
 8006a8c:	2203      	movs	r2, #3
 8006a8e:	4650      	mov	r0, sl
 8006a90:	7821      	ldrb	r1, [r4, #0]
 8006a92:	f000 f9f9 	bl	8006e88 <memchr>
 8006a96:	b140      	cbz	r0, 8006aaa <_svfiprintf_r+0x152>
 8006a98:	2340      	movs	r3, #64	; 0x40
 8006a9a:	eba0 000a 	sub.w	r0, r0, sl
 8006a9e:	fa03 f000 	lsl.w	r0, r3, r0
 8006aa2:	9b04      	ldr	r3, [sp, #16]
 8006aa4:	3401      	adds	r4, #1
 8006aa6:	4303      	orrs	r3, r0
 8006aa8:	9304      	str	r3, [sp, #16]
 8006aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aae:	2206      	movs	r2, #6
 8006ab0:	4825      	ldr	r0, [pc, #148]	; (8006b48 <_svfiprintf_r+0x1f0>)
 8006ab2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ab6:	f000 f9e7 	bl	8006e88 <memchr>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d038      	beq.n	8006b30 <_svfiprintf_r+0x1d8>
 8006abe:	4b23      	ldr	r3, [pc, #140]	; (8006b4c <_svfiprintf_r+0x1f4>)
 8006ac0:	bb1b      	cbnz	r3, 8006b0a <_svfiprintf_r+0x1b2>
 8006ac2:	9b03      	ldr	r3, [sp, #12]
 8006ac4:	3307      	adds	r3, #7
 8006ac6:	f023 0307 	bic.w	r3, r3, #7
 8006aca:	3308      	adds	r3, #8
 8006acc:	9303      	str	r3, [sp, #12]
 8006ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ad0:	4433      	add	r3, r6
 8006ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad4:	e767      	b.n	80069a6 <_svfiprintf_r+0x4e>
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	2001      	movs	r0, #1
 8006ada:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ade:	e7a5      	b.n	8006a2c <_svfiprintf_r+0xd4>
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f04f 0c0a 	mov.w	ip, #10
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	3401      	adds	r4, #1
 8006aea:	9305      	str	r3, [sp, #20]
 8006aec:	4620      	mov	r0, r4
 8006aee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006af2:	3a30      	subs	r2, #48	; 0x30
 8006af4:	2a09      	cmp	r2, #9
 8006af6:	d903      	bls.n	8006b00 <_svfiprintf_r+0x1a8>
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d0c5      	beq.n	8006a88 <_svfiprintf_r+0x130>
 8006afc:	9105      	str	r1, [sp, #20]
 8006afe:	e7c3      	b.n	8006a88 <_svfiprintf_r+0x130>
 8006b00:	4604      	mov	r4, r0
 8006b02:	2301      	movs	r3, #1
 8006b04:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b08:	e7f0      	b.n	8006aec <_svfiprintf_r+0x194>
 8006b0a:	ab03      	add	r3, sp, #12
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	462a      	mov	r2, r5
 8006b10:	4638      	mov	r0, r7
 8006b12:	4b0f      	ldr	r3, [pc, #60]	; (8006b50 <_svfiprintf_r+0x1f8>)
 8006b14:	a904      	add	r1, sp, #16
 8006b16:	f3af 8000 	nop.w
 8006b1a:	1c42      	adds	r2, r0, #1
 8006b1c:	4606      	mov	r6, r0
 8006b1e:	d1d6      	bne.n	8006ace <_svfiprintf_r+0x176>
 8006b20:	89ab      	ldrh	r3, [r5, #12]
 8006b22:	065b      	lsls	r3, r3, #25
 8006b24:	f53f af2c 	bmi.w	8006980 <_svfiprintf_r+0x28>
 8006b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b2a:	b01d      	add	sp, #116	; 0x74
 8006b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b30:	ab03      	add	r3, sp, #12
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	462a      	mov	r2, r5
 8006b36:	4638      	mov	r0, r7
 8006b38:	4b05      	ldr	r3, [pc, #20]	; (8006b50 <_svfiprintf_r+0x1f8>)
 8006b3a:	a904      	add	r1, sp, #16
 8006b3c:	f000 f87c 	bl	8006c38 <_printf_i>
 8006b40:	e7eb      	b.n	8006b1a <_svfiprintf_r+0x1c2>
 8006b42:	bf00      	nop
 8006b44:	0800782d 	.word	0x0800782d
 8006b48:	08007837 	.word	0x08007837
 8006b4c:	00000000 	.word	0x00000000
 8006b50:	080068a1 	.word	0x080068a1
 8006b54:	08007833 	.word	0x08007833

08006b58 <_printf_common>:
 8006b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b5c:	4616      	mov	r6, r2
 8006b5e:	4699      	mov	r9, r3
 8006b60:	688a      	ldr	r2, [r1, #8]
 8006b62:	690b      	ldr	r3, [r1, #16]
 8006b64:	4607      	mov	r7, r0
 8006b66:	4293      	cmp	r3, r2
 8006b68:	bfb8      	it	lt
 8006b6a:	4613      	movlt	r3, r2
 8006b6c:	6033      	str	r3, [r6, #0]
 8006b6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b72:	460c      	mov	r4, r1
 8006b74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b78:	b10a      	cbz	r2, 8006b7e <_printf_common+0x26>
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	6033      	str	r3, [r6, #0]
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	0699      	lsls	r1, r3, #26
 8006b82:	bf42      	ittt	mi
 8006b84:	6833      	ldrmi	r3, [r6, #0]
 8006b86:	3302      	addmi	r3, #2
 8006b88:	6033      	strmi	r3, [r6, #0]
 8006b8a:	6825      	ldr	r5, [r4, #0]
 8006b8c:	f015 0506 	ands.w	r5, r5, #6
 8006b90:	d106      	bne.n	8006ba0 <_printf_common+0x48>
 8006b92:	f104 0a19 	add.w	sl, r4, #25
 8006b96:	68e3      	ldr	r3, [r4, #12]
 8006b98:	6832      	ldr	r2, [r6, #0]
 8006b9a:	1a9b      	subs	r3, r3, r2
 8006b9c:	42ab      	cmp	r3, r5
 8006b9e:	dc28      	bgt.n	8006bf2 <_printf_common+0x9a>
 8006ba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ba4:	1e13      	subs	r3, r2, #0
 8006ba6:	6822      	ldr	r2, [r4, #0]
 8006ba8:	bf18      	it	ne
 8006baa:	2301      	movne	r3, #1
 8006bac:	0692      	lsls	r2, r2, #26
 8006bae:	d42d      	bmi.n	8006c0c <_printf_common+0xb4>
 8006bb0:	4649      	mov	r1, r9
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bb8:	47c0      	blx	r8
 8006bba:	3001      	adds	r0, #1
 8006bbc:	d020      	beq.n	8006c00 <_printf_common+0xa8>
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	68e5      	ldr	r5, [r4, #12]
 8006bc2:	f003 0306 	and.w	r3, r3, #6
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	bf18      	it	ne
 8006bca:	2500      	movne	r5, #0
 8006bcc:	6832      	ldr	r2, [r6, #0]
 8006bce:	f04f 0600 	mov.w	r6, #0
 8006bd2:	68a3      	ldr	r3, [r4, #8]
 8006bd4:	bf08      	it	eq
 8006bd6:	1aad      	subeq	r5, r5, r2
 8006bd8:	6922      	ldr	r2, [r4, #16]
 8006bda:	bf08      	it	eq
 8006bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006be0:	4293      	cmp	r3, r2
 8006be2:	bfc4      	itt	gt
 8006be4:	1a9b      	subgt	r3, r3, r2
 8006be6:	18ed      	addgt	r5, r5, r3
 8006be8:	341a      	adds	r4, #26
 8006bea:	42b5      	cmp	r5, r6
 8006bec:	d11a      	bne.n	8006c24 <_printf_common+0xcc>
 8006bee:	2000      	movs	r0, #0
 8006bf0:	e008      	b.n	8006c04 <_printf_common+0xac>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	4652      	mov	r2, sl
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	47c0      	blx	r8
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d103      	bne.n	8006c08 <_printf_common+0xb0>
 8006c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c08:	3501      	adds	r5, #1
 8006c0a:	e7c4      	b.n	8006b96 <_printf_common+0x3e>
 8006c0c:	2030      	movs	r0, #48	; 0x30
 8006c0e:	18e1      	adds	r1, r4, r3
 8006c10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c1a:	4422      	add	r2, r4
 8006c1c:	3302      	adds	r3, #2
 8006c1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c22:	e7c5      	b.n	8006bb0 <_printf_common+0x58>
 8006c24:	2301      	movs	r3, #1
 8006c26:	4622      	mov	r2, r4
 8006c28:	4649      	mov	r1, r9
 8006c2a:	4638      	mov	r0, r7
 8006c2c:	47c0      	blx	r8
 8006c2e:	3001      	adds	r0, #1
 8006c30:	d0e6      	beq.n	8006c00 <_printf_common+0xa8>
 8006c32:	3601      	adds	r6, #1
 8006c34:	e7d9      	b.n	8006bea <_printf_common+0x92>
	...

08006c38 <_printf_i>:
 8006c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c3c:	460c      	mov	r4, r1
 8006c3e:	7e27      	ldrb	r7, [r4, #24]
 8006c40:	4691      	mov	r9, r2
 8006c42:	2f78      	cmp	r7, #120	; 0x78
 8006c44:	4680      	mov	r8, r0
 8006c46:	469a      	mov	sl, r3
 8006c48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006c4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c4e:	d807      	bhi.n	8006c60 <_printf_i+0x28>
 8006c50:	2f62      	cmp	r7, #98	; 0x62
 8006c52:	d80a      	bhi.n	8006c6a <_printf_i+0x32>
 8006c54:	2f00      	cmp	r7, #0
 8006c56:	f000 80d9 	beq.w	8006e0c <_printf_i+0x1d4>
 8006c5a:	2f58      	cmp	r7, #88	; 0x58
 8006c5c:	f000 80a4 	beq.w	8006da8 <_printf_i+0x170>
 8006c60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c68:	e03a      	b.n	8006ce0 <_printf_i+0xa8>
 8006c6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c6e:	2b15      	cmp	r3, #21
 8006c70:	d8f6      	bhi.n	8006c60 <_printf_i+0x28>
 8006c72:	a001      	add	r0, pc, #4	; (adr r0, 8006c78 <_printf_i+0x40>)
 8006c74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006c78:	08006cd1 	.word	0x08006cd1
 8006c7c:	08006ce5 	.word	0x08006ce5
 8006c80:	08006c61 	.word	0x08006c61
 8006c84:	08006c61 	.word	0x08006c61
 8006c88:	08006c61 	.word	0x08006c61
 8006c8c:	08006c61 	.word	0x08006c61
 8006c90:	08006ce5 	.word	0x08006ce5
 8006c94:	08006c61 	.word	0x08006c61
 8006c98:	08006c61 	.word	0x08006c61
 8006c9c:	08006c61 	.word	0x08006c61
 8006ca0:	08006c61 	.word	0x08006c61
 8006ca4:	08006df3 	.word	0x08006df3
 8006ca8:	08006d15 	.word	0x08006d15
 8006cac:	08006dd5 	.word	0x08006dd5
 8006cb0:	08006c61 	.word	0x08006c61
 8006cb4:	08006c61 	.word	0x08006c61
 8006cb8:	08006e15 	.word	0x08006e15
 8006cbc:	08006c61 	.word	0x08006c61
 8006cc0:	08006d15 	.word	0x08006d15
 8006cc4:	08006c61 	.word	0x08006c61
 8006cc8:	08006c61 	.word	0x08006c61
 8006ccc:	08006ddd 	.word	0x08006ddd
 8006cd0:	680b      	ldr	r3, [r1, #0]
 8006cd2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006cd6:	1d1a      	adds	r2, r3, #4
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	600a      	str	r2, [r1, #0]
 8006cdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e0a4      	b.n	8006e2e <_printf_i+0x1f6>
 8006ce4:	6825      	ldr	r5, [r4, #0]
 8006ce6:	6808      	ldr	r0, [r1, #0]
 8006ce8:	062e      	lsls	r6, r5, #24
 8006cea:	f100 0304 	add.w	r3, r0, #4
 8006cee:	d50a      	bpl.n	8006d06 <_printf_i+0xce>
 8006cf0:	6805      	ldr	r5, [r0, #0]
 8006cf2:	600b      	str	r3, [r1, #0]
 8006cf4:	2d00      	cmp	r5, #0
 8006cf6:	da03      	bge.n	8006d00 <_printf_i+0xc8>
 8006cf8:	232d      	movs	r3, #45	; 0x2d
 8006cfa:	426d      	negs	r5, r5
 8006cfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d00:	230a      	movs	r3, #10
 8006d02:	485e      	ldr	r0, [pc, #376]	; (8006e7c <_printf_i+0x244>)
 8006d04:	e019      	b.n	8006d3a <_printf_i+0x102>
 8006d06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006d0a:	6805      	ldr	r5, [r0, #0]
 8006d0c:	600b      	str	r3, [r1, #0]
 8006d0e:	bf18      	it	ne
 8006d10:	b22d      	sxthne	r5, r5
 8006d12:	e7ef      	b.n	8006cf4 <_printf_i+0xbc>
 8006d14:	680b      	ldr	r3, [r1, #0]
 8006d16:	6825      	ldr	r5, [r4, #0]
 8006d18:	1d18      	adds	r0, r3, #4
 8006d1a:	6008      	str	r0, [r1, #0]
 8006d1c:	0628      	lsls	r0, r5, #24
 8006d1e:	d501      	bpl.n	8006d24 <_printf_i+0xec>
 8006d20:	681d      	ldr	r5, [r3, #0]
 8006d22:	e002      	b.n	8006d2a <_printf_i+0xf2>
 8006d24:	0669      	lsls	r1, r5, #25
 8006d26:	d5fb      	bpl.n	8006d20 <_printf_i+0xe8>
 8006d28:	881d      	ldrh	r5, [r3, #0]
 8006d2a:	2f6f      	cmp	r7, #111	; 0x6f
 8006d2c:	bf0c      	ite	eq
 8006d2e:	2308      	moveq	r3, #8
 8006d30:	230a      	movne	r3, #10
 8006d32:	4852      	ldr	r0, [pc, #328]	; (8006e7c <_printf_i+0x244>)
 8006d34:	2100      	movs	r1, #0
 8006d36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d3a:	6866      	ldr	r6, [r4, #4]
 8006d3c:	2e00      	cmp	r6, #0
 8006d3e:	bfa8      	it	ge
 8006d40:	6821      	ldrge	r1, [r4, #0]
 8006d42:	60a6      	str	r6, [r4, #8]
 8006d44:	bfa4      	itt	ge
 8006d46:	f021 0104 	bicge.w	r1, r1, #4
 8006d4a:	6021      	strge	r1, [r4, #0]
 8006d4c:	b90d      	cbnz	r5, 8006d52 <_printf_i+0x11a>
 8006d4e:	2e00      	cmp	r6, #0
 8006d50:	d04d      	beq.n	8006dee <_printf_i+0x1b6>
 8006d52:	4616      	mov	r6, r2
 8006d54:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d58:	fb03 5711 	mls	r7, r3, r1, r5
 8006d5c:	5dc7      	ldrb	r7, [r0, r7]
 8006d5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d62:	462f      	mov	r7, r5
 8006d64:	42bb      	cmp	r3, r7
 8006d66:	460d      	mov	r5, r1
 8006d68:	d9f4      	bls.n	8006d54 <_printf_i+0x11c>
 8006d6a:	2b08      	cmp	r3, #8
 8006d6c:	d10b      	bne.n	8006d86 <_printf_i+0x14e>
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	07df      	lsls	r7, r3, #31
 8006d72:	d508      	bpl.n	8006d86 <_printf_i+0x14e>
 8006d74:	6923      	ldr	r3, [r4, #16]
 8006d76:	6861      	ldr	r1, [r4, #4]
 8006d78:	4299      	cmp	r1, r3
 8006d7a:	bfde      	ittt	le
 8006d7c:	2330      	movle	r3, #48	; 0x30
 8006d7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d82:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006d86:	1b92      	subs	r2, r2, r6
 8006d88:	6122      	str	r2, [r4, #16]
 8006d8a:	464b      	mov	r3, r9
 8006d8c:	4621      	mov	r1, r4
 8006d8e:	4640      	mov	r0, r8
 8006d90:	f8cd a000 	str.w	sl, [sp]
 8006d94:	aa03      	add	r2, sp, #12
 8006d96:	f7ff fedf 	bl	8006b58 <_printf_common>
 8006d9a:	3001      	adds	r0, #1
 8006d9c:	d14c      	bne.n	8006e38 <_printf_i+0x200>
 8006d9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006da2:	b004      	add	sp, #16
 8006da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006da8:	4834      	ldr	r0, [pc, #208]	; (8006e7c <_printf_i+0x244>)
 8006daa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006dae:	680e      	ldr	r6, [r1, #0]
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	f856 5b04 	ldr.w	r5, [r6], #4
 8006db6:	061f      	lsls	r7, r3, #24
 8006db8:	600e      	str	r6, [r1, #0]
 8006dba:	d514      	bpl.n	8006de6 <_printf_i+0x1ae>
 8006dbc:	07d9      	lsls	r1, r3, #31
 8006dbe:	bf44      	itt	mi
 8006dc0:	f043 0320 	orrmi.w	r3, r3, #32
 8006dc4:	6023      	strmi	r3, [r4, #0]
 8006dc6:	b91d      	cbnz	r5, 8006dd0 <_printf_i+0x198>
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	f023 0320 	bic.w	r3, r3, #32
 8006dce:	6023      	str	r3, [r4, #0]
 8006dd0:	2310      	movs	r3, #16
 8006dd2:	e7af      	b.n	8006d34 <_printf_i+0xfc>
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	f043 0320 	orr.w	r3, r3, #32
 8006dda:	6023      	str	r3, [r4, #0]
 8006ddc:	2378      	movs	r3, #120	; 0x78
 8006dde:	4828      	ldr	r0, [pc, #160]	; (8006e80 <_printf_i+0x248>)
 8006de0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006de4:	e7e3      	b.n	8006dae <_printf_i+0x176>
 8006de6:	065e      	lsls	r6, r3, #25
 8006de8:	bf48      	it	mi
 8006dea:	b2ad      	uxthmi	r5, r5
 8006dec:	e7e6      	b.n	8006dbc <_printf_i+0x184>
 8006dee:	4616      	mov	r6, r2
 8006df0:	e7bb      	b.n	8006d6a <_printf_i+0x132>
 8006df2:	680b      	ldr	r3, [r1, #0]
 8006df4:	6826      	ldr	r6, [r4, #0]
 8006df6:	1d1d      	adds	r5, r3, #4
 8006df8:	6960      	ldr	r0, [r4, #20]
 8006dfa:	600d      	str	r5, [r1, #0]
 8006dfc:	0635      	lsls	r5, r6, #24
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	d501      	bpl.n	8006e06 <_printf_i+0x1ce>
 8006e02:	6018      	str	r0, [r3, #0]
 8006e04:	e002      	b.n	8006e0c <_printf_i+0x1d4>
 8006e06:	0671      	lsls	r1, r6, #25
 8006e08:	d5fb      	bpl.n	8006e02 <_printf_i+0x1ca>
 8006e0a:	8018      	strh	r0, [r3, #0]
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	4616      	mov	r6, r2
 8006e10:	6123      	str	r3, [r4, #16]
 8006e12:	e7ba      	b.n	8006d8a <_printf_i+0x152>
 8006e14:	680b      	ldr	r3, [r1, #0]
 8006e16:	1d1a      	adds	r2, r3, #4
 8006e18:	600a      	str	r2, [r1, #0]
 8006e1a:	681e      	ldr	r6, [r3, #0]
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	4630      	mov	r0, r6
 8006e20:	6862      	ldr	r2, [r4, #4]
 8006e22:	f000 f831 	bl	8006e88 <memchr>
 8006e26:	b108      	cbz	r0, 8006e2c <_printf_i+0x1f4>
 8006e28:	1b80      	subs	r0, r0, r6
 8006e2a:	6060      	str	r0, [r4, #4]
 8006e2c:	6863      	ldr	r3, [r4, #4]
 8006e2e:	6123      	str	r3, [r4, #16]
 8006e30:	2300      	movs	r3, #0
 8006e32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e36:	e7a8      	b.n	8006d8a <_printf_i+0x152>
 8006e38:	4632      	mov	r2, r6
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	4640      	mov	r0, r8
 8006e3e:	6923      	ldr	r3, [r4, #16]
 8006e40:	47d0      	blx	sl
 8006e42:	3001      	adds	r0, #1
 8006e44:	d0ab      	beq.n	8006d9e <_printf_i+0x166>
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	079b      	lsls	r3, r3, #30
 8006e4a:	d413      	bmi.n	8006e74 <_printf_i+0x23c>
 8006e4c:	68e0      	ldr	r0, [r4, #12]
 8006e4e:	9b03      	ldr	r3, [sp, #12]
 8006e50:	4298      	cmp	r0, r3
 8006e52:	bfb8      	it	lt
 8006e54:	4618      	movlt	r0, r3
 8006e56:	e7a4      	b.n	8006da2 <_printf_i+0x16a>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	4632      	mov	r2, r6
 8006e5c:	4649      	mov	r1, r9
 8006e5e:	4640      	mov	r0, r8
 8006e60:	47d0      	blx	sl
 8006e62:	3001      	adds	r0, #1
 8006e64:	d09b      	beq.n	8006d9e <_printf_i+0x166>
 8006e66:	3501      	adds	r5, #1
 8006e68:	68e3      	ldr	r3, [r4, #12]
 8006e6a:	9903      	ldr	r1, [sp, #12]
 8006e6c:	1a5b      	subs	r3, r3, r1
 8006e6e:	42ab      	cmp	r3, r5
 8006e70:	dcf2      	bgt.n	8006e58 <_printf_i+0x220>
 8006e72:	e7eb      	b.n	8006e4c <_printf_i+0x214>
 8006e74:	2500      	movs	r5, #0
 8006e76:	f104 0619 	add.w	r6, r4, #25
 8006e7a:	e7f5      	b.n	8006e68 <_printf_i+0x230>
 8006e7c:	0800783e 	.word	0x0800783e
 8006e80:	0800784f 	.word	0x0800784f

08006e84 <__retarget_lock_acquire_recursive>:
 8006e84:	4770      	bx	lr

08006e86 <__retarget_lock_release_recursive>:
 8006e86:	4770      	bx	lr

08006e88 <memchr>:
 8006e88:	4603      	mov	r3, r0
 8006e8a:	b510      	push	{r4, lr}
 8006e8c:	b2c9      	uxtb	r1, r1
 8006e8e:	4402      	add	r2, r0
 8006e90:	4293      	cmp	r3, r2
 8006e92:	4618      	mov	r0, r3
 8006e94:	d101      	bne.n	8006e9a <memchr+0x12>
 8006e96:	2000      	movs	r0, #0
 8006e98:	e003      	b.n	8006ea2 <memchr+0x1a>
 8006e9a:	7804      	ldrb	r4, [r0, #0]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	428c      	cmp	r4, r1
 8006ea0:	d1f6      	bne.n	8006e90 <memchr+0x8>
 8006ea2:	bd10      	pop	{r4, pc}

08006ea4 <memmove>:
 8006ea4:	4288      	cmp	r0, r1
 8006ea6:	b510      	push	{r4, lr}
 8006ea8:	eb01 0402 	add.w	r4, r1, r2
 8006eac:	d902      	bls.n	8006eb4 <memmove+0x10>
 8006eae:	4284      	cmp	r4, r0
 8006eb0:	4623      	mov	r3, r4
 8006eb2:	d807      	bhi.n	8006ec4 <memmove+0x20>
 8006eb4:	1e43      	subs	r3, r0, #1
 8006eb6:	42a1      	cmp	r1, r4
 8006eb8:	d008      	beq.n	8006ecc <memmove+0x28>
 8006eba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ebe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ec2:	e7f8      	b.n	8006eb6 <memmove+0x12>
 8006ec4:	4601      	mov	r1, r0
 8006ec6:	4402      	add	r2, r0
 8006ec8:	428a      	cmp	r2, r1
 8006eca:	d100      	bne.n	8006ece <memmove+0x2a>
 8006ecc:	bd10      	pop	{r4, pc}
 8006ece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ed6:	e7f7      	b.n	8006ec8 <memmove+0x24>

08006ed8 <_realloc_r>:
 8006ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eda:	4607      	mov	r7, r0
 8006edc:	4614      	mov	r4, r2
 8006ede:	460e      	mov	r6, r1
 8006ee0:	b921      	cbnz	r1, 8006eec <_realloc_r+0x14>
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006ee8:	f7ff bbd8 	b.w	800669c <_malloc_r>
 8006eec:	b922      	cbnz	r2, 8006ef8 <_realloc_r+0x20>
 8006eee:	f7ff fb89 	bl	8006604 <_free_r>
 8006ef2:	4625      	mov	r5, r4
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ef8:	f000 f814 	bl	8006f24 <_malloc_usable_size_r>
 8006efc:	42a0      	cmp	r0, r4
 8006efe:	d20f      	bcs.n	8006f20 <_realloc_r+0x48>
 8006f00:	4621      	mov	r1, r4
 8006f02:	4638      	mov	r0, r7
 8006f04:	f7ff fbca 	bl	800669c <_malloc_r>
 8006f08:	4605      	mov	r5, r0
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	d0f2      	beq.n	8006ef4 <_realloc_r+0x1c>
 8006f0e:	4631      	mov	r1, r6
 8006f10:	4622      	mov	r2, r4
 8006f12:	f7ff fb61 	bl	80065d8 <memcpy>
 8006f16:	4631      	mov	r1, r6
 8006f18:	4638      	mov	r0, r7
 8006f1a:	f7ff fb73 	bl	8006604 <_free_r>
 8006f1e:	e7e9      	b.n	8006ef4 <_realloc_r+0x1c>
 8006f20:	4635      	mov	r5, r6
 8006f22:	e7e7      	b.n	8006ef4 <_realloc_r+0x1c>

08006f24 <_malloc_usable_size_r>:
 8006f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f28:	1f18      	subs	r0, r3, #4
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	bfbc      	itt	lt
 8006f2e:	580b      	ldrlt	r3, [r1, r0]
 8006f30:	18c0      	addlt	r0, r0, r3
 8006f32:	4770      	bx	lr

08006f34 <_init>:
 8006f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f36:	bf00      	nop
 8006f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f3a:	bc08      	pop	{r3}
 8006f3c:	469e      	mov	lr, r3
 8006f3e:	4770      	bx	lr

08006f40 <_fini>:
 8006f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f42:	bf00      	nop
 8006f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f46:	bc08      	pop	{r3}
 8006f48:	469e      	mov	lr, r3
 8006f4a:	4770      	bx	lr
=======
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009a      	lsls	r2, r3, #2
 8004d14:	441a      	add	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d20:	4a22      	ldr	r2, [pc, #136]	; (8004dac <UART_SetConfig+0x118>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	0119      	lsls	r1, r3, #4
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009a      	lsls	r2, r3, #2
 8004d34:	441a      	add	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d40:	4b1a      	ldr	r3, [pc, #104]	; (8004dac <UART_SetConfig+0x118>)
 8004d42:	fba3 0302 	umull	r0, r3, r3, r2
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	2064      	movs	r0, #100	; 0x64
 8004d4a:	fb00 f303 	mul.w	r3, r0, r3
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	3332      	adds	r3, #50	; 0x32
 8004d54:	4a15      	ldr	r2, [pc, #84]	; (8004dac <UART_SetConfig+0x118>)
 8004d56:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d60:	4419      	add	r1, r3
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	009a      	lsls	r2, r3, #2
 8004d6c:	441a      	add	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d78:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <UART_SetConfig+0x118>)
 8004d7a:	fba3 0302 	umull	r0, r3, r3, r2
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	2064      	movs	r0, #100	; 0x64
 8004d82:	fb00 f303 	mul.w	r3, r0, r3
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	3332      	adds	r3, #50	; 0x32
 8004d8c:	4a07      	ldr	r2, [pc, #28]	; (8004dac <UART_SetConfig+0x118>)
 8004d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	f003 020f 	and.w	r2, r3, #15
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	440a      	add	r2, r1
 8004d9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004da0:	bf00      	nop
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40013800 	.word	0x40013800
 8004dac:	51eb851f 	.word	0x51eb851f

08004db0 <__errno>:
 8004db0:	4b01      	ldr	r3, [pc, #4]	; (8004db8 <__errno+0x8>)
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	20000024 	.word	0x20000024

08004dbc <__libc_init_array>:
 8004dbc:	b570      	push	{r4, r5, r6, lr}
 8004dbe:	2600      	movs	r6, #0
 8004dc0:	4d0c      	ldr	r5, [pc, #48]	; (8004df4 <__libc_init_array+0x38>)
 8004dc2:	4c0d      	ldr	r4, [pc, #52]	; (8004df8 <__libc_init_array+0x3c>)
 8004dc4:	1b64      	subs	r4, r4, r5
 8004dc6:	10a4      	asrs	r4, r4, #2
 8004dc8:	42a6      	cmp	r6, r4
 8004dca:	d109      	bne.n	8004de0 <__libc_init_array+0x24>
 8004dcc:	f000 fcc8 	bl	8005760 <_init>
 8004dd0:	2600      	movs	r6, #0
 8004dd2:	4d0a      	ldr	r5, [pc, #40]	; (8004dfc <__libc_init_array+0x40>)
 8004dd4:	4c0a      	ldr	r4, [pc, #40]	; (8004e00 <__libc_init_array+0x44>)
 8004dd6:	1b64      	subs	r4, r4, r5
 8004dd8:	10a4      	asrs	r4, r4, #2
 8004dda:	42a6      	cmp	r6, r4
 8004ddc:	d105      	bne.n	8004dea <__libc_init_array+0x2e>
 8004dde:	bd70      	pop	{r4, r5, r6, pc}
 8004de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de4:	4798      	blx	r3
 8004de6:	3601      	adds	r6, #1
 8004de8:	e7ee      	b.n	8004dc8 <__libc_init_array+0xc>
 8004dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dee:	4798      	blx	r3
 8004df0:	3601      	adds	r6, #1
 8004df2:	e7f2      	b.n	8004dda <__libc_init_array+0x1e>
 8004df4:	08005fac 	.word	0x08005fac
 8004df8:	08005fac 	.word	0x08005fac
 8004dfc:	08005fac 	.word	0x08005fac
 8004e00:	08005fb0 	.word	0x08005fb0

08004e04 <__itoa>:
 8004e04:	1e93      	subs	r3, r2, #2
 8004e06:	2b22      	cmp	r3, #34	; 0x22
 8004e08:	b510      	push	{r4, lr}
 8004e0a:	460c      	mov	r4, r1
 8004e0c:	d904      	bls.n	8004e18 <__itoa+0x14>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	461c      	mov	r4, r3
 8004e12:	700b      	strb	r3, [r1, #0]
 8004e14:	4620      	mov	r0, r4
 8004e16:	bd10      	pop	{r4, pc}
 8004e18:	2a0a      	cmp	r2, #10
 8004e1a:	d109      	bne.n	8004e30 <__itoa+0x2c>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	da07      	bge.n	8004e30 <__itoa+0x2c>
 8004e20:	232d      	movs	r3, #45	; 0x2d
 8004e22:	700b      	strb	r3, [r1, #0]
 8004e24:	2101      	movs	r1, #1
 8004e26:	4240      	negs	r0, r0
 8004e28:	4421      	add	r1, r4
 8004e2a:	f000 f901 	bl	8005030 <__utoa>
 8004e2e:	e7f1      	b.n	8004e14 <__itoa+0x10>
 8004e30:	2100      	movs	r1, #0
 8004e32:	e7f9      	b.n	8004e28 <__itoa+0x24>

08004e34 <itoa>:
 8004e34:	f7ff bfe6 	b.w	8004e04 <__itoa>

08004e38 <memcpy>:
 8004e38:	440a      	add	r2, r1
 8004e3a:	4291      	cmp	r1, r2
 8004e3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004e40:	d100      	bne.n	8004e44 <memcpy+0xc>
 8004e42:	4770      	bx	lr
 8004e44:	b510      	push	{r4, lr}
 8004e46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e4a:	4291      	cmp	r1, r2
 8004e4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e50:	d1f9      	bne.n	8004e46 <memcpy+0xe>
 8004e52:	bd10      	pop	{r4, pc}

08004e54 <memset>:
 8004e54:	4603      	mov	r3, r0
 8004e56:	4402      	add	r2, r0
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d100      	bne.n	8004e5e <memset+0xa>
 8004e5c:	4770      	bx	lr
 8004e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e62:	e7f9      	b.n	8004e58 <memset+0x4>

08004e64 <_free_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	4605      	mov	r5, r0
 8004e68:	2900      	cmp	r1, #0
 8004e6a:	d043      	beq.n	8004ef4 <_free_r+0x90>
 8004e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e70:	1f0c      	subs	r4, r1, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	bfb8      	it	lt
 8004e76:	18e4      	addlt	r4, r4, r3
 8004e78:	f000 f91c 	bl	80050b4 <__malloc_lock>
 8004e7c:	4a1e      	ldr	r2, [pc, #120]	; (8004ef8 <_free_r+0x94>)
 8004e7e:	6813      	ldr	r3, [r2, #0]
 8004e80:	4610      	mov	r0, r2
 8004e82:	b933      	cbnz	r3, 8004e92 <_free_r+0x2e>
 8004e84:	6063      	str	r3, [r4, #4]
 8004e86:	6014      	str	r4, [r2, #0]
 8004e88:	4628      	mov	r0, r5
 8004e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e8e:	f000 b917 	b.w	80050c0 <__malloc_unlock>
 8004e92:	42a3      	cmp	r3, r4
 8004e94:	d90a      	bls.n	8004eac <_free_r+0x48>
 8004e96:	6821      	ldr	r1, [r4, #0]
 8004e98:	1862      	adds	r2, r4, r1
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	bf01      	itttt	eq
 8004e9e:	681a      	ldreq	r2, [r3, #0]
 8004ea0:	685b      	ldreq	r3, [r3, #4]
 8004ea2:	1852      	addeq	r2, r2, r1
 8004ea4:	6022      	streq	r2, [r4, #0]
 8004ea6:	6063      	str	r3, [r4, #4]
 8004ea8:	6004      	str	r4, [r0, #0]
 8004eaa:	e7ed      	b.n	8004e88 <_free_r+0x24>
 8004eac:	461a      	mov	r2, r3
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	b10b      	cbz	r3, 8004eb6 <_free_r+0x52>
 8004eb2:	42a3      	cmp	r3, r4
 8004eb4:	d9fa      	bls.n	8004eac <_free_r+0x48>
 8004eb6:	6811      	ldr	r1, [r2, #0]
 8004eb8:	1850      	adds	r0, r2, r1
 8004eba:	42a0      	cmp	r0, r4
 8004ebc:	d10b      	bne.n	8004ed6 <_free_r+0x72>
 8004ebe:	6820      	ldr	r0, [r4, #0]
 8004ec0:	4401      	add	r1, r0
 8004ec2:	1850      	adds	r0, r2, r1
 8004ec4:	4283      	cmp	r3, r0
 8004ec6:	6011      	str	r1, [r2, #0]
 8004ec8:	d1de      	bne.n	8004e88 <_free_r+0x24>
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	4401      	add	r1, r0
 8004ed0:	6011      	str	r1, [r2, #0]
 8004ed2:	6053      	str	r3, [r2, #4]
 8004ed4:	e7d8      	b.n	8004e88 <_free_r+0x24>
 8004ed6:	d902      	bls.n	8004ede <_free_r+0x7a>
 8004ed8:	230c      	movs	r3, #12
 8004eda:	602b      	str	r3, [r5, #0]
 8004edc:	e7d4      	b.n	8004e88 <_free_r+0x24>
 8004ede:	6820      	ldr	r0, [r4, #0]
 8004ee0:	1821      	adds	r1, r4, r0
 8004ee2:	428b      	cmp	r3, r1
 8004ee4:	bf01      	itttt	eq
 8004ee6:	6819      	ldreq	r1, [r3, #0]
 8004ee8:	685b      	ldreq	r3, [r3, #4]
 8004eea:	1809      	addeq	r1, r1, r0
 8004eec:	6021      	streq	r1, [r4, #0]
 8004eee:	6063      	str	r3, [r4, #4]
 8004ef0:	6054      	str	r4, [r2, #4]
 8004ef2:	e7c9      	b.n	8004e88 <_free_r+0x24>
 8004ef4:	bd38      	pop	{r3, r4, r5, pc}
 8004ef6:	bf00      	nop
 8004ef8:	2000052c 	.word	0x2000052c

08004efc <_malloc_r>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	1ccd      	adds	r5, r1, #3
 8004f00:	f025 0503 	bic.w	r5, r5, #3
 8004f04:	3508      	adds	r5, #8
 8004f06:	2d0c      	cmp	r5, #12
 8004f08:	bf38      	it	cc
 8004f0a:	250c      	movcc	r5, #12
 8004f0c:	2d00      	cmp	r5, #0
 8004f0e:	4606      	mov	r6, r0
 8004f10:	db01      	blt.n	8004f16 <_malloc_r+0x1a>
 8004f12:	42a9      	cmp	r1, r5
 8004f14:	d903      	bls.n	8004f1e <_malloc_r+0x22>
 8004f16:	230c      	movs	r3, #12
 8004f18:	6033      	str	r3, [r6, #0]
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f1e:	f000 f8c9 	bl	80050b4 <__malloc_lock>
 8004f22:	4921      	ldr	r1, [pc, #132]	; (8004fa8 <_malloc_r+0xac>)
 8004f24:	680a      	ldr	r2, [r1, #0]
 8004f26:	4614      	mov	r4, r2
 8004f28:	b99c      	cbnz	r4, 8004f52 <_malloc_r+0x56>
 8004f2a:	4f20      	ldr	r7, [pc, #128]	; (8004fac <_malloc_r+0xb0>)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	b923      	cbnz	r3, 8004f3a <_malloc_r+0x3e>
 8004f30:	4621      	mov	r1, r4
 8004f32:	4630      	mov	r0, r6
 8004f34:	f000 f83c 	bl	8004fb0 <_sbrk_r>
 8004f38:	6038      	str	r0, [r7, #0]
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	f000 f837 	bl	8004fb0 <_sbrk_r>
 8004f42:	1c43      	adds	r3, r0, #1
 8004f44:	d123      	bne.n	8004f8e <_malloc_r+0x92>
 8004f46:	230c      	movs	r3, #12
 8004f48:	4630      	mov	r0, r6
 8004f4a:	6033      	str	r3, [r6, #0]
 8004f4c:	f000 f8b8 	bl	80050c0 <__malloc_unlock>
 8004f50:	e7e3      	b.n	8004f1a <_malloc_r+0x1e>
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	1b5b      	subs	r3, r3, r5
 8004f56:	d417      	bmi.n	8004f88 <_malloc_r+0x8c>
 8004f58:	2b0b      	cmp	r3, #11
 8004f5a:	d903      	bls.n	8004f64 <_malloc_r+0x68>
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	441c      	add	r4, r3
 8004f60:	6025      	str	r5, [r4, #0]
 8004f62:	e004      	b.n	8004f6e <_malloc_r+0x72>
 8004f64:	6863      	ldr	r3, [r4, #4]
 8004f66:	42a2      	cmp	r2, r4
 8004f68:	bf0c      	ite	eq
 8004f6a:	600b      	streq	r3, [r1, #0]
 8004f6c:	6053      	strne	r3, [r2, #4]
 8004f6e:	4630      	mov	r0, r6
 8004f70:	f000 f8a6 	bl	80050c0 <__malloc_unlock>
 8004f74:	f104 000b 	add.w	r0, r4, #11
 8004f78:	1d23      	adds	r3, r4, #4
 8004f7a:	f020 0007 	bic.w	r0, r0, #7
 8004f7e:	1ac2      	subs	r2, r0, r3
 8004f80:	d0cc      	beq.n	8004f1c <_malloc_r+0x20>
 8004f82:	1a1b      	subs	r3, r3, r0
 8004f84:	50a3      	str	r3, [r4, r2]
 8004f86:	e7c9      	b.n	8004f1c <_malloc_r+0x20>
 8004f88:	4622      	mov	r2, r4
 8004f8a:	6864      	ldr	r4, [r4, #4]
 8004f8c:	e7cc      	b.n	8004f28 <_malloc_r+0x2c>
 8004f8e:	1cc4      	adds	r4, r0, #3
 8004f90:	f024 0403 	bic.w	r4, r4, #3
 8004f94:	42a0      	cmp	r0, r4
 8004f96:	d0e3      	beq.n	8004f60 <_malloc_r+0x64>
 8004f98:	1a21      	subs	r1, r4, r0
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	f000 f808 	bl	8004fb0 <_sbrk_r>
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	d1dd      	bne.n	8004f60 <_malloc_r+0x64>
 8004fa4:	e7cf      	b.n	8004f46 <_malloc_r+0x4a>
 8004fa6:	bf00      	nop
 8004fa8:	2000052c 	.word	0x2000052c
 8004fac:	20000530 	.word	0x20000530

08004fb0 <_sbrk_r>:
 8004fb0:	b538      	push	{r3, r4, r5, lr}
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	4d05      	ldr	r5, [pc, #20]	; (8004fcc <_sbrk_r+0x1c>)
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	4608      	mov	r0, r1
 8004fba:	602b      	str	r3, [r5, #0]
 8004fbc:	f7fc fc00 	bl	80017c0 <_sbrk>
 8004fc0:	1c43      	adds	r3, r0, #1
 8004fc2:	d102      	bne.n	8004fca <_sbrk_r+0x1a>
 8004fc4:	682b      	ldr	r3, [r5, #0]
 8004fc6:	b103      	cbz	r3, 8004fca <_sbrk_r+0x1a>
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	bd38      	pop	{r3, r4, r5, pc}
 8004fcc:	200006b4 	.word	0x200006b4

08004fd0 <siprintf>:
 8004fd0:	b40e      	push	{r1, r2, r3}
 8004fd2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fd6:	b500      	push	{lr}
 8004fd8:	b09c      	sub	sp, #112	; 0x70
 8004fda:	ab1d      	add	r3, sp, #116	; 0x74
 8004fdc:	9002      	str	r0, [sp, #8]
 8004fde:	9006      	str	r0, [sp, #24]
 8004fe0:	9107      	str	r1, [sp, #28]
 8004fe2:	9104      	str	r1, [sp, #16]
 8004fe4:	4808      	ldr	r0, [pc, #32]	; (8005008 <siprintf+0x38>)
 8004fe6:	4909      	ldr	r1, [pc, #36]	; (800500c <siprintf+0x3c>)
 8004fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fec:	9105      	str	r1, [sp, #20]
 8004fee:	6800      	ldr	r0, [r0, #0]
 8004ff0:	a902      	add	r1, sp, #8
 8004ff2:	9301      	str	r3, [sp, #4]
 8004ff4:	f000 f8c6 	bl	8005184 <_svfiprintf_r>
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	9b02      	ldr	r3, [sp, #8]
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	b01c      	add	sp, #112	; 0x70
 8005000:	f85d eb04 	ldr.w	lr, [sp], #4
 8005004:	b003      	add	sp, #12
 8005006:	4770      	bx	lr
 8005008:	20000024 	.word	0x20000024
 800500c:	ffff0208 	.word	0xffff0208

08005010 <strcat>:
 8005010:	4602      	mov	r2, r0
 8005012:	b510      	push	{r4, lr}
 8005014:	7814      	ldrb	r4, [r2, #0]
 8005016:	4613      	mov	r3, r2
 8005018:	3201      	adds	r2, #1
 800501a:	2c00      	cmp	r4, #0
 800501c:	d1fa      	bne.n	8005014 <strcat+0x4>
 800501e:	3b01      	subs	r3, #1
 8005020:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005024:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005028:	2a00      	cmp	r2, #0
 800502a:	d1f9      	bne.n	8005020 <strcat+0x10>
 800502c:	bd10      	pop	{r4, pc}
	...

08005030 <__utoa>:
 8005030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005032:	b08b      	sub	sp, #44	; 0x2c
 8005034:	4605      	mov	r5, r0
 8005036:	460b      	mov	r3, r1
 8005038:	466e      	mov	r6, sp
 800503a:	4c1d      	ldr	r4, [pc, #116]	; (80050b0 <__utoa+0x80>)
 800503c:	f104 0c20 	add.w	ip, r4, #32
 8005040:	4637      	mov	r7, r6
 8005042:	6820      	ldr	r0, [r4, #0]
 8005044:	6861      	ldr	r1, [r4, #4]
 8005046:	3408      	adds	r4, #8
 8005048:	c703      	stmia	r7!, {r0, r1}
 800504a:	4564      	cmp	r4, ip
 800504c:	463e      	mov	r6, r7
 800504e:	d1f7      	bne.n	8005040 <__utoa+0x10>
 8005050:	7921      	ldrb	r1, [r4, #4]
 8005052:	6820      	ldr	r0, [r4, #0]
 8005054:	7139      	strb	r1, [r7, #4]
 8005056:	1e91      	subs	r1, r2, #2
 8005058:	2922      	cmp	r1, #34	; 0x22
 800505a:	6038      	str	r0, [r7, #0]
 800505c:	f04f 0100 	mov.w	r1, #0
 8005060:	d904      	bls.n	800506c <__utoa+0x3c>
 8005062:	7019      	strb	r1, [r3, #0]
 8005064:	460b      	mov	r3, r1
 8005066:	4618      	mov	r0, r3
 8005068:	b00b      	add	sp, #44	; 0x2c
 800506a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800506c:	1e58      	subs	r0, r3, #1
 800506e:	4684      	mov	ip, r0
 8005070:	fbb5 f7f2 	udiv	r7, r5, r2
 8005074:	fb02 5617 	mls	r6, r2, r7, r5
 8005078:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800507c:	4476      	add	r6, lr
 800507e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005082:	460c      	mov	r4, r1
 8005084:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005088:	462e      	mov	r6, r5
 800508a:	42b2      	cmp	r2, r6
 800508c:	463d      	mov	r5, r7
 800508e:	f101 0101 	add.w	r1, r1, #1
 8005092:	d9ed      	bls.n	8005070 <__utoa+0x40>
 8005094:	2200      	movs	r2, #0
 8005096:	545a      	strb	r2, [r3, r1]
 8005098:	1919      	adds	r1, r3, r4
 800509a:	1aa5      	subs	r5, r4, r2
 800509c:	42aa      	cmp	r2, r5
 800509e:	dae2      	bge.n	8005066 <__utoa+0x36>
 80050a0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80050a4:	780e      	ldrb	r6, [r1, #0]
 80050a6:	3201      	adds	r2, #1
 80050a8:	7006      	strb	r6, [r0, #0]
 80050aa:	f801 5901 	strb.w	r5, [r1], #-1
 80050ae:	e7f4      	b.n	800509a <__utoa+0x6a>
 80050b0:	08005f54 	.word	0x08005f54

080050b4 <__malloc_lock>:
 80050b4:	4801      	ldr	r0, [pc, #4]	; (80050bc <__malloc_lock+0x8>)
 80050b6:	f000 bafb 	b.w	80056b0 <__retarget_lock_acquire_recursive>
 80050ba:	bf00      	nop
 80050bc:	200006bc 	.word	0x200006bc

080050c0 <__malloc_unlock>:
 80050c0:	4801      	ldr	r0, [pc, #4]	; (80050c8 <__malloc_unlock+0x8>)
 80050c2:	f000 baf6 	b.w	80056b2 <__retarget_lock_release_recursive>
 80050c6:	bf00      	nop
 80050c8:	200006bc 	.word	0x200006bc

080050cc <__ssputs_r>:
 80050cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050d0:	688e      	ldr	r6, [r1, #8]
 80050d2:	4682      	mov	sl, r0
 80050d4:	429e      	cmp	r6, r3
 80050d6:	460c      	mov	r4, r1
 80050d8:	4690      	mov	r8, r2
 80050da:	461f      	mov	r7, r3
 80050dc:	d838      	bhi.n	8005150 <__ssputs_r+0x84>
 80050de:	898a      	ldrh	r2, [r1, #12]
 80050e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050e4:	d032      	beq.n	800514c <__ssputs_r+0x80>
 80050e6:	6825      	ldr	r5, [r4, #0]
 80050e8:	6909      	ldr	r1, [r1, #16]
 80050ea:	3301      	adds	r3, #1
 80050ec:	eba5 0901 	sub.w	r9, r5, r1
 80050f0:	6965      	ldr	r5, [r4, #20]
 80050f2:	444b      	add	r3, r9
 80050f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050fc:	106d      	asrs	r5, r5, #1
 80050fe:	429d      	cmp	r5, r3
 8005100:	bf38      	it	cc
 8005102:	461d      	movcc	r5, r3
 8005104:	0553      	lsls	r3, r2, #21
 8005106:	d531      	bpl.n	800516c <__ssputs_r+0xa0>
 8005108:	4629      	mov	r1, r5
 800510a:	f7ff fef7 	bl	8004efc <_malloc_r>
 800510e:	4606      	mov	r6, r0
 8005110:	b950      	cbnz	r0, 8005128 <__ssputs_r+0x5c>
 8005112:	230c      	movs	r3, #12
 8005114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005118:	f8ca 3000 	str.w	r3, [sl]
 800511c:	89a3      	ldrh	r3, [r4, #12]
 800511e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005122:	81a3      	strh	r3, [r4, #12]
 8005124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005128:	464a      	mov	r2, r9
 800512a:	6921      	ldr	r1, [r4, #16]
 800512c:	f7ff fe84 	bl	8004e38 <memcpy>
 8005130:	89a3      	ldrh	r3, [r4, #12]
 8005132:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800513a:	81a3      	strh	r3, [r4, #12]
 800513c:	6126      	str	r6, [r4, #16]
 800513e:	444e      	add	r6, r9
 8005140:	6026      	str	r6, [r4, #0]
 8005142:	463e      	mov	r6, r7
 8005144:	6165      	str	r5, [r4, #20]
 8005146:	eba5 0509 	sub.w	r5, r5, r9
 800514a:	60a5      	str	r5, [r4, #8]
 800514c:	42be      	cmp	r6, r7
 800514e:	d900      	bls.n	8005152 <__ssputs_r+0x86>
 8005150:	463e      	mov	r6, r7
 8005152:	4632      	mov	r2, r6
 8005154:	4641      	mov	r1, r8
 8005156:	6820      	ldr	r0, [r4, #0]
 8005158:	f000 faba 	bl	80056d0 <memmove>
 800515c:	68a3      	ldr	r3, [r4, #8]
 800515e:	6822      	ldr	r2, [r4, #0]
 8005160:	1b9b      	subs	r3, r3, r6
 8005162:	4432      	add	r2, r6
 8005164:	2000      	movs	r0, #0
 8005166:	60a3      	str	r3, [r4, #8]
 8005168:	6022      	str	r2, [r4, #0]
 800516a:	e7db      	b.n	8005124 <__ssputs_r+0x58>
 800516c:	462a      	mov	r2, r5
 800516e:	f000 fac9 	bl	8005704 <_realloc_r>
 8005172:	4606      	mov	r6, r0
 8005174:	2800      	cmp	r0, #0
 8005176:	d1e1      	bne.n	800513c <__ssputs_r+0x70>
 8005178:	4650      	mov	r0, sl
 800517a:	6921      	ldr	r1, [r4, #16]
 800517c:	f7ff fe72 	bl	8004e64 <_free_r>
 8005180:	e7c7      	b.n	8005112 <__ssputs_r+0x46>
	...

08005184 <_svfiprintf_r>:
 8005184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005188:	4698      	mov	r8, r3
 800518a:	898b      	ldrh	r3, [r1, #12]
 800518c:	4607      	mov	r7, r0
 800518e:	061b      	lsls	r3, r3, #24
 8005190:	460d      	mov	r5, r1
 8005192:	4614      	mov	r4, r2
 8005194:	b09d      	sub	sp, #116	; 0x74
 8005196:	d50e      	bpl.n	80051b6 <_svfiprintf_r+0x32>
 8005198:	690b      	ldr	r3, [r1, #16]
 800519a:	b963      	cbnz	r3, 80051b6 <_svfiprintf_r+0x32>
 800519c:	2140      	movs	r1, #64	; 0x40
 800519e:	f7ff fead 	bl	8004efc <_malloc_r>
 80051a2:	6028      	str	r0, [r5, #0]
 80051a4:	6128      	str	r0, [r5, #16]
 80051a6:	b920      	cbnz	r0, 80051b2 <_svfiprintf_r+0x2e>
 80051a8:	230c      	movs	r3, #12
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051b0:	e0d1      	b.n	8005356 <_svfiprintf_r+0x1d2>
 80051b2:	2340      	movs	r3, #64	; 0x40
 80051b4:	616b      	str	r3, [r5, #20]
 80051b6:	2300      	movs	r3, #0
 80051b8:	9309      	str	r3, [sp, #36]	; 0x24
 80051ba:	2320      	movs	r3, #32
 80051bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051c0:	2330      	movs	r3, #48	; 0x30
 80051c2:	f04f 0901 	mov.w	r9, #1
 80051c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80051ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005370 <_svfiprintf_r+0x1ec>
 80051ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051d2:	4623      	mov	r3, r4
 80051d4:	469a      	mov	sl, r3
 80051d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051da:	b10a      	cbz	r2, 80051e0 <_svfiprintf_r+0x5c>
 80051dc:	2a25      	cmp	r2, #37	; 0x25
 80051de:	d1f9      	bne.n	80051d4 <_svfiprintf_r+0x50>
 80051e0:	ebba 0b04 	subs.w	fp, sl, r4
 80051e4:	d00b      	beq.n	80051fe <_svfiprintf_r+0x7a>
 80051e6:	465b      	mov	r3, fp
 80051e8:	4622      	mov	r2, r4
 80051ea:	4629      	mov	r1, r5
 80051ec:	4638      	mov	r0, r7
 80051ee:	f7ff ff6d 	bl	80050cc <__ssputs_r>
 80051f2:	3001      	adds	r0, #1
 80051f4:	f000 80aa 	beq.w	800534c <_svfiprintf_r+0x1c8>
 80051f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051fa:	445a      	add	r2, fp
 80051fc:	9209      	str	r2, [sp, #36]	; 0x24
 80051fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 80a2 	beq.w	800534c <_svfiprintf_r+0x1c8>
 8005208:	2300      	movs	r3, #0
 800520a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800520e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005212:	f10a 0a01 	add.w	sl, sl, #1
 8005216:	9304      	str	r3, [sp, #16]
 8005218:	9307      	str	r3, [sp, #28]
 800521a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800521e:	931a      	str	r3, [sp, #104]	; 0x68
 8005220:	4654      	mov	r4, sl
 8005222:	2205      	movs	r2, #5
 8005224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005228:	4851      	ldr	r0, [pc, #324]	; (8005370 <_svfiprintf_r+0x1ec>)
 800522a:	f000 fa43 	bl	80056b4 <memchr>
 800522e:	9a04      	ldr	r2, [sp, #16]
 8005230:	b9d8      	cbnz	r0, 800526a <_svfiprintf_r+0xe6>
 8005232:	06d0      	lsls	r0, r2, #27
 8005234:	bf44      	itt	mi
 8005236:	2320      	movmi	r3, #32
 8005238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800523c:	0711      	lsls	r1, r2, #28
 800523e:	bf44      	itt	mi
 8005240:	232b      	movmi	r3, #43	; 0x2b
 8005242:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005246:	f89a 3000 	ldrb.w	r3, [sl]
 800524a:	2b2a      	cmp	r3, #42	; 0x2a
 800524c:	d015      	beq.n	800527a <_svfiprintf_r+0xf6>
 800524e:	4654      	mov	r4, sl
 8005250:	2000      	movs	r0, #0
 8005252:	f04f 0c0a 	mov.w	ip, #10
 8005256:	9a07      	ldr	r2, [sp, #28]
 8005258:	4621      	mov	r1, r4
 800525a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800525e:	3b30      	subs	r3, #48	; 0x30
 8005260:	2b09      	cmp	r3, #9
 8005262:	d94e      	bls.n	8005302 <_svfiprintf_r+0x17e>
 8005264:	b1b0      	cbz	r0, 8005294 <_svfiprintf_r+0x110>
 8005266:	9207      	str	r2, [sp, #28]
 8005268:	e014      	b.n	8005294 <_svfiprintf_r+0x110>
 800526a:	eba0 0308 	sub.w	r3, r0, r8
 800526e:	fa09 f303 	lsl.w	r3, r9, r3
 8005272:	4313      	orrs	r3, r2
 8005274:	46a2      	mov	sl, r4
 8005276:	9304      	str	r3, [sp, #16]
 8005278:	e7d2      	b.n	8005220 <_svfiprintf_r+0x9c>
 800527a:	9b03      	ldr	r3, [sp, #12]
 800527c:	1d19      	adds	r1, r3, #4
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	9103      	str	r1, [sp, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	bfbb      	ittet	lt
 8005286:	425b      	neglt	r3, r3
 8005288:	f042 0202 	orrlt.w	r2, r2, #2
 800528c:	9307      	strge	r3, [sp, #28]
 800528e:	9307      	strlt	r3, [sp, #28]
 8005290:	bfb8      	it	lt
 8005292:	9204      	strlt	r2, [sp, #16]
 8005294:	7823      	ldrb	r3, [r4, #0]
 8005296:	2b2e      	cmp	r3, #46	; 0x2e
 8005298:	d10c      	bne.n	80052b4 <_svfiprintf_r+0x130>
 800529a:	7863      	ldrb	r3, [r4, #1]
 800529c:	2b2a      	cmp	r3, #42	; 0x2a
 800529e:	d135      	bne.n	800530c <_svfiprintf_r+0x188>
 80052a0:	9b03      	ldr	r3, [sp, #12]
 80052a2:	3402      	adds	r4, #2
 80052a4:	1d1a      	adds	r2, r3, #4
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	9203      	str	r2, [sp, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	bfb8      	it	lt
 80052ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80052b2:	9305      	str	r3, [sp, #20]
 80052b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005380 <_svfiprintf_r+0x1fc>
 80052b8:	2203      	movs	r2, #3
 80052ba:	4650      	mov	r0, sl
 80052bc:	7821      	ldrb	r1, [r4, #0]
 80052be:	f000 f9f9 	bl	80056b4 <memchr>
 80052c2:	b140      	cbz	r0, 80052d6 <_svfiprintf_r+0x152>
 80052c4:	2340      	movs	r3, #64	; 0x40
 80052c6:	eba0 000a 	sub.w	r0, r0, sl
 80052ca:	fa03 f000 	lsl.w	r0, r3, r0
 80052ce:	9b04      	ldr	r3, [sp, #16]
 80052d0:	3401      	adds	r4, #1
 80052d2:	4303      	orrs	r3, r0
 80052d4:	9304      	str	r3, [sp, #16]
 80052d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052da:	2206      	movs	r2, #6
 80052dc:	4825      	ldr	r0, [pc, #148]	; (8005374 <_svfiprintf_r+0x1f0>)
 80052de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052e2:	f000 f9e7 	bl	80056b4 <memchr>
 80052e6:	2800      	cmp	r0, #0
 80052e8:	d038      	beq.n	800535c <_svfiprintf_r+0x1d8>
 80052ea:	4b23      	ldr	r3, [pc, #140]	; (8005378 <_svfiprintf_r+0x1f4>)
 80052ec:	bb1b      	cbnz	r3, 8005336 <_svfiprintf_r+0x1b2>
 80052ee:	9b03      	ldr	r3, [sp, #12]
 80052f0:	3307      	adds	r3, #7
 80052f2:	f023 0307 	bic.w	r3, r3, #7
 80052f6:	3308      	adds	r3, #8
 80052f8:	9303      	str	r3, [sp, #12]
 80052fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052fc:	4433      	add	r3, r6
 80052fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005300:	e767      	b.n	80051d2 <_svfiprintf_r+0x4e>
 8005302:	460c      	mov	r4, r1
 8005304:	2001      	movs	r0, #1
 8005306:	fb0c 3202 	mla	r2, ip, r2, r3
 800530a:	e7a5      	b.n	8005258 <_svfiprintf_r+0xd4>
 800530c:	2300      	movs	r3, #0
 800530e:	f04f 0c0a 	mov.w	ip, #10
 8005312:	4619      	mov	r1, r3
 8005314:	3401      	adds	r4, #1
 8005316:	9305      	str	r3, [sp, #20]
 8005318:	4620      	mov	r0, r4
 800531a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800531e:	3a30      	subs	r2, #48	; 0x30
 8005320:	2a09      	cmp	r2, #9
 8005322:	d903      	bls.n	800532c <_svfiprintf_r+0x1a8>
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0c5      	beq.n	80052b4 <_svfiprintf_r+0x130>
 8005328:	9105      	str	r1, [sp, #20]
 800532a:	e7c3      	b.n	80052b4 <_svfiprintf_r+0x130>
 800532c:	4604      	mov	r4, r0
 800532e:	2301      	movs	r3, #1
 8005330:	fb0c 2101 	mla	r1, ip, r1, r2
 8005334:	e7f0      	b.n	8005318 <_svfiprintf_r+0x194>
 8005336:	ab03      	add	r3, sp, #12
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	462a      	mov	r2, r5
 800533c:	4638      	mov	r0, r7
 800533e:	4b0f      	ldr	r3, [pc, #60]	; (800537c <_svfiprintf_r+0x1f8>)
 8005340:	a904      	add	r1, sp, #16
 8005342:	f3af 8000 	nop.w
 8005346:	1c42      	adds	r2, r0, #1
 8005348:	4606      	mov	r6, r0
 800534a:	d1d6      	bne.n	80052fa <_svfiprintf_r+0x176>
 800534c:	89ab      	ldrh	r3, [r5, #12]
 800534e:	065b      	lsls	r3, r3, #25
 8005350:	f53f af2c 	bmi.w	80051ac <_svfiprintf_r+0x28>
 8005354:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005356:	b01d      	add	sp, #116	; 0x74
 8005358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535c:	ab03      	add	r3, sp, #12
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	462a      	mov	r2, r5
 8005362:	4638      	mov	r0, r7
 8005364:	4b05      	ldr	r3, [pc, #20]	; (800537c <_svfiprintf_r+0x1f8>)
 8005366:	a904      	add	r1, sp, #16
 8005368:	f000 f87c 	bl	8005464 <_printf_i>
 800536c:	e7eb      	b.n	8005346 <_svfiprintf_r+0x1c2>
 800536e:	bf00      	nop
 8005370:	08005f79 	.word	0x08005f79
 8005374:	08005f83 	.word	0x08005f83
 8005378:	00000000 	.word	0x00000000
 800537c:	080050cd 	.word	0x080050cd
 8005380:	08005f7f 	.word	0x08005f7f

08005384 <_printf_common>:
 8005384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005388:	4616      	mov	r6, r2
 800538a:	4699      	mov	r9, r3
 800538c:	688a      	ldr	r2, [r1, #8]
 800538e:	690b      	ldr	r3, [r1, #16]
 8005390:	4607      	mov	r7, r0
 8005392:	4293      	cmp	r3, r2
 8005394:	bfb8      	it	lt
 8005396:	4613      	movlt	r3, r2
 8005398:	6033      	str	r3, [r6, #0]
 800539a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800539e:	460c      	mov	r4, r1
 80053a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053a4:	b10a      	cbz	r2, 80053aa <_printf_common+0x26>
 80053a6:	3301      	adds	r3, #1
 80053a8:	6033      	str	r3, [r6, #0]
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	0699      	lsls	r1, r3, #26
 80053ae:	bf42      	ittt	mi
 80053b0:	6833      	ldrmi	r3, [r6, #0]
 80053b2:	3302      	addmi	r3, #2
 80053b4:	6033      	strmi	r3, [r6, #0]
 80053b6:	6825      	ldr	r5, [r4, #0]
 80053b8:	f015 0506 	ands.w	r5, r5, #6
 80053bc:	d106      	bne.n	80053cc <_printf_common+0x48>
 80053be:	f104 0a19 	add.w	sl, r4, #25
 80053c2:	68e3      	ldr	r3, [r4, #12]
 80053c4:	6832      	ldr	r2, [r6, #0]
 80053c6:	1a9b      	subs	r3, r3, r2
 80053c8:	42ab      	cmp	r3, r5
 80053ca:	dc28      	bgt.n	800541e <_printf_common+0x9a>
 80053cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053d0:	1e13      	subs	r3, r2, #0
 80053d2:	6822      	ldr	r2, [r4, #0]
 80053d4:	bf18      	it	ne
 80053d6:	2301      	movne	r3, #1
 80053d8:	0692      	lsls	r2, r2, #26
 80053da:	d42d      	bmi.n	8005438 <_printf_common+0xb4>
 80053dc:	4649      	mov	r1, r9
 80053de:	4638      	mov	r0, r7
 80053e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053e4:	47c0      	blx	r8
 80053e6:	3001      	adds	r0, #1
 80053e8:	d020      	beq.n	800542c <_printf_common+0xa8>
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	68e5      	ldr	r5, [r4, #12]
 80053ee:	f003 0306 	and.w	r3, r3, #6
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	bf18      	it	ne
 80053f6:	2500      	movne	r5, #0
 80053f8:	6832      	ldr	r2, [r6, #0]
 80053fa:	f04f 0600 	mov.w	r6, #0
 80053fe:	68a3      	ldr	r3, [r4, #8]
 8005400:	bf08      	it	eq
 8005402:	1aad      	subeq	r5, r5, r2
 8005404:	6922      	ldr	r2, [r4, #16]
 8005406:	bf08      	it	eq
 8005408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800540c:	4293      	cmp	r3, r2
 800540e:	bfc4      	itt	gt
 8005410:	1a9b      	subgt	r3, r3, r2
 8005412:	18ed      	addgt	r5, r5, r3
 8005414:	341a      	adds	r4, #26
 8005416:	42b5      	cmp	r5, r6
 8005418:	d11a      	bne.n	8005450 <_printf_common+0xcc>
 800541a:	2000      	movs	r0, #0
 800541c:	e008      	b.n	8005430 <_printf_common+0xac>
 800541e:	2301      	movs	r3, #1
 8005420:	4652      	mov	r2, sl
 8005422:	4649      	mov	r1, r9
 8005424:	4638      	mov	r0, r7
 8005426:	47c0      	blx	r8
 8005428:	3001      	adds	r0, #1
 800542a:	d103      	bne.n	8005434 <_printf_common+0xb0>
 800542c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005434:	3501      	adds	r5, #1
 8005436:	e7c4      	b.n	80053c2 <_printf_common+0x3e>
 8005438:	2030      	movs	r0, #48	; 0x30
 800543a:	18e1      	adds	r1, r4, r3
 800543c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005446:	4422      	add	r2, r4
 8005448:	3302      	adds	r3, #2
 800544a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800544e:	e7c5      	b.n	80053dc <_printf_common+0x58>
 8005450:	2301      	movs	r3, #1
 8005452:	4622      	mov	r2, r4
 8005454:	4649      	mov	r1, r9
 8005456:	4638      	mov	r0, r7
 8005458:	47c0      	blx	r8
 800545a:	3001      	adds	r0, #1
 800545c:	d0e6      	beq.n	800542c <_printf_common+0xa8>
 800545e:	3601      	adds	r6, #1
 8005460:	e7d9      	b.n	8005416 <_printf_common+0x92>
	...

08005464 <_printf_i>:
 8005464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005468:	460c      	mov	r4, r1
 800546a:	7e27      	ldrb	r7, [r4, #24]
 800546c:	4691      	mov	r9, r2
 800546e:	2f78      	cmp	r7, #120	; 0x78
 8005470:	4680      	mov	r8, r0
 8005472:	469a      	mov	sl, r3
 8005474:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005476:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800547a:	d807      	bhi.n	800548c <_printf_i+0x28>
 800547c:	2f62      	cmp	r7, #98	; 0x62
 800547e:	d80a      	bhi.n	8005496 <_printf_i+0x32>
 8005480:	2f00      	cmp	r7, #0
 8005482:	f000 80d9 	beq.w	8005638 <_printf_i+0x1d4>
 8005486:	2f58      	cmp	r7, #88	; 0x58
 8005488:	f000 80a4 	beq.w	80055d4 <_printf_i+0x170>
 800548c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005494:	e03a      	b.n	800550c <_printf_i+0xa8>
 8005496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800549a:	2b15      	cmp	r3, #21
 800549c:	d8f6      	bhi.n	800548c <_printf_i+0x28>
 800549e:	a001      	add	r0, pc, #4	; (adr r0, 80054a4 <_printf_i+0x40>)
 80054a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80054a4:	080054fd 	.word	0x080054fd
 80054a8:	08005511 	.word	0x08005511
 80054ac:	0800548d 	.word	0x0800548d
 80054b0:	0800548d 	.word	0x0800548d
 80054b4:	0800548d 	.word	0x0800548d
 80054b8:	0800548d 	.word	0x0800548d
 80054bc:	08005511 	.word	0x08005511
 80054c0:	0800548d 	.word	0x0800548d
 80054c4:	0800548d 	.word	0x0800548d
 80054c8:	0800548d 	.word	0x0800548d
 80054cc:	0800548d 	.word	0x0800548d
 80054d0:	0800561f 	.word	0x0800561f
 80054d4:	08005541 	.word	0x08005541
 80054d8:	08005601 	.word	0x08005601
 80054dc:	0800548d 	.word	0x0800548d
 80054e0:	0800548d 	.word	0x0800548d
 80054e4:	08005641 	.word	0x08005641
 80054e8:	0800548d 	.word	0x0800548d
 80054ec:	08005541 	.word	0x08005541
 80054f0:	0800548d 	.word	0x0800548d
 80054f4:	0800548d 	.word	0x0800548d
 80054f8:	08005609 	.word	0x08005609
 80054fc:	680b      	ldr	r3, [r1, #0]
 80054fe:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005502:	1d1a      	adds	r2, r3, #4
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	600a      	str	r2, [r1, #0]
 8005508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800550c:	2301      	movs	r3, #1
 800550e:	e0a4      	b.n	800565a <_printf_i+0x1f6>
 8005510:	6825      	ldr	r5, [r4, #0]
 8005512:	6808      	ldr	r0, [r1, #0]
 8005514:	062e      	lsls	r6, r5, #24
 8005516:	f100 0304 	add.w	r3, r0, #4
 800551a:	d50a      	bpl.n	8005532 <_printf_i+0xce>
 800551c:	6805      	ldr	r5, [r0, #0]
 800551e:	600b      	str	r3, [r1, #0]
 8005520:	2d00      	cmp	r5, #0
 8005522:	da03      	bge.n	800552c <_printf_i+0xc8>
 8005524:	232d      	movs	r3, #45	; 0x2d
 8005526:	426d      	negs	r5, r5
 8005528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800552c:	230a      	movs	r3, #10
 800552e:	485e      	ldr	r0, [pc, #376]	; (80056a8 <_printf_i+0x244>)
 8005530:	e019      	b.n	8005566 <_printf_i+0x102>
 8005532:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005536:	6805      	ldr	r5, [r0, #0]
 8005538:	600b      	str	r3, [r1, #0]
 800553a:	bf18      	it	ne
 800553c:	b22d      	sxthne	r5, r5
 800553e:	e7ef      	b.n	8005520 <_printf_i+0xbc>
 8005540:	680b      	ldr	r3, [r1, #0]
 8005542:	6825      	ldr	r5, [r4, #0]
 8005544:	1d18      	adds	r0, r3, #4
 8005546:	6008      	str	r0, [r1, #0]
 8005548:	0628      	lsls	r0, r5, #24
 800554a:	d501      	bpl.n	8005550 <_printf_i+0xec>
 800554c:	681d      	ldr	r5, [r3, #0]
 800554e:	e002      	b.n	8005556 <_printf_i+0xf2>
 8005550:	0669      	lsls	r1, r5, #25
 8005552:	d5fb      	bpl.n	800554c <_printf_i+0xe8>
 8005554:	881d      	ldrh	r5, [r3, #0]
 8005556:	2f6f      	cmp	r7, #111	; 0x6f
 8005558:	bf0c      	ite	eq
 800555a:	2308      	moveq	r3, #8
 800555c:	230a      	movne	r3, #10
 800555e:	4852      	ldr	r0, [pc, #328]	; (80056a8 <_printf_i+0x244>)
 8005560:	2100      	movs	r1, #0
 8005562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005566:	6866      	ldr	r6, [r4, #4]
 8005568:	2e00      	cmp	r6, #0
 800556a:	bfa8      	it	ge
 800556c:	6821      	ldrge	r1, [r4, #0]
 800556e:	60a6      	str	r6, [r4, #8]
 8005570:	bfa4      	itt	ge
 8005572:	f021 0104 	bicge.w	r1, r1, #4
 8005576:	6021      	strge	r1, [r4, #0]
 8005578:	b90d      	cbnz	r5, 800557e <_printf_i+0x11a>
 800557a:	2e00      	cmp	r6, #0
 800557c:	d04d      	beq.n	800561a <_printf_i+0x1b6>
 800557e:	4616      	mov	r6, r2
 8005580:	fbb5 f1f3 	udiv	r1, r5, r3
 8005584:	fb03 5711 	mls	r7, r3, r1, r5
 8005588:	5dc7      	ldrb	r7, [r0, r7]
 800558a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800558e:	462f      	mov	r7, r5
 8005590:	42bb      	cmp	r3, r7
 8005592:	460d      	mov	r5, r1
 8005594:	d9f4      	bls.n	8005580 <_printf_i+0x11c>
 8005596:	2b08      	cmp	r3, #8
 8005598:	d10b      	bne.n	80055b2 <_printf_i+0x14e>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	07df      	lsls	r7, r3, #31
 800559e:	d508      	bpl.n	80055b2 <_printf_i+0x14e>
 80055a0:	6923      	ldr	r3, [r4, #16]
 80055a2:	6861      	ldr	r1, [r4, #4]
 80055a4:	4299      	cmp	r1, r3
 80055a6:	bfde      	ittt	le
 80055a8:	2330      	movle	r3, #48	; 0x30
 80055aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055ae:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80055b2:	1b92      	subs	r2, r2, r6
 80055b4:	6122      	str	r2, [r4, #16]
 80055b6:	464b      	mov	r3, r9
 80055b8:	4621      	mov	r1, r4
 80055ba:	4640      	mov	r0, r8
 80055bc:	f8cd a000 	str.w	sl, [sp]
 80055c0:	aa03      	add	r2, sp, #12
 80055c2:	f7ff fedf 	bl	8005384 <_printf_common>
 80055c6:	3001      	adds	r0, #1
 80055c8:	d14c      	bne.n	8005664 <_printf_i+0x200>
 80055ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055ce:	b004      	add	sp, #16
 80055d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d4:	4834      	ldr	r0, [pc, #208]	; (80056a8 <_printf_i+0x244>)
 80055d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055da:	680e      	ldr	r6, [r1, #0]
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	f856 5b04 	ldr.w	r5, [r6], #4
 80055e2:	061f      	lsls	r7, r3, #24
 80055e4:	600e      	str	r6, [r1, #0]
 80055e6:	d514      	bpl.n	8005612 <_printf_i+0x1ae>
 80055e8:	07d9      	lsls	r1, r3, #31
 80055ea:	bf44      	itt	mi
 80055ec:	f043 0320 	orrmi.w	r3, r3, #32
 80055f0:	6023      	strmi	r3, [r4, #0]
 80055f2:	b91d      	cbnz	r5, 80055fc <_printf_i+0x198>
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	f023 0320 	bic.w	r3, r3, #32
 80055fa:	6023      	str	r3, [r4, #0]
 80055fc:	2310      	movs	r3, #16
 80055fe:	e7af      	b.n	8005560 <_printf_i+0xfc>
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	f043 0320 	orr.w	r3, r3, #32
 8005606:	6023      	str	r3, [r4, #0]
 8005608:	2378      	movs	r3, #120	; 0x78
 800560a:	4828      	ldr	r0, [pc, #160]	; (80056ac <_printf_i+0x248>)
 800560c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005610:	e7e3      	b.n	80055da <_printf_i+0x176>
 8005612:	065e      	lsls	r6, r3, #25
 8005614:	bf48      	it	mi
 8005616:	b2ad      	uxthmi	r5, r5
 8005618:	e7e6      	b.n	80055e8 <_printf_i+0x184>
 800561a:	4616      	mov	r6, r2
 800561c:	e7bb      	b.n	8005596 <_printf_i+0x132>
 800561e:	680b      	ldr	r3, [r1, #0]
 8005620:	6826      	ldr	r6, [r4, #0]
 8005622:	1d1d      	adds	r5, r3, #4
 8005624:	6960      	ldr	r0, [r4, #20]
 8005626:	600d      	str	r5, [r1, #0]
 8005628:	0635      	lsls	r5, r6, #24
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	d501      	bpl.n	8005632 <_printf_i+0x1ce>
 800562e:	6018      	str	r0, [r3, #0]
 8005630:	e002      	b.n	8005638 <_printf_i+0x1d4>
 8005632:	0671      	lsls	r1, r6, #25
 8005634:	d5fb      	bpl.n	800562e <_printf_i+0x1ca>
 8005636:	8018      	strh	r0, [r3, #0]
 8005638:	2300      	movs	r3, #0
 800563a:	4616      	mov	r6, r2
 800563c:	6123      	str	r3, [r4, #16]
 800563e:	e7ba      	b.n	80055b6 <_printf_i+0x152>
 8005640:	680b      	ldr	r3, [r1, #0]
 8005642:	1d1a      	adds	r2, r3, #4
 8005644:	600a      	str	r2, [r1, #0]
 8005646:	681e      	ldr	r6, [r3, #0]
 8005648:	2100      	movs	r1, #0
 800564a:	4630      	mov	r0, r6
 800564c:	6862      	ldr	r2, [r4, #4]
 800564e:	f000 f831 	bl	80056b4 <memchr>
 8005652:	b108      	cbz	r0, 8005658 <_printf_i+0x1f4>
 8005654:	1b80      	subs	r0, r0, r6
 8005656:	6060      	str	r0, [r4, #4]
 8005658:	6863      	ldr	r3, [r4, #4]
 800565a:	6123      	str	r3, [r4, #16]
 800565c:	2300      	movs	r3, #0
 800565e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005662:	e7a8      	b.n	80055b6 <_printf_i+0x152>
 8005664:	4632      	mov	r2, r6
 8005666:	4649      	mov	r1, r9
 8005668:	4640      	mov	r0, r8
 800566a:	6923      	ldr	r3, [r4, #16]
 800566c:	47d0      	blx	sl
 800566e:	3001      	adds	r0, #1
 8005670:	d0ab      	beq.n	80055ca <_printf_i+0x166>
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	079b      	lsls	r3, r3, #30
 8005676:	d413      	bmi.n	80056a0 <_printf_i+0x23c>
 8005678:	68e0      	ldr	r0, [r4, #12]
 800567a:	9b03      	ldr	r3, [sp, #12]
 800567c:	4298      	cmp	r0, r3
 800567e:	bfb8      	it	lt
 8005680:	4618      	movlt	r0, r3
 8005682:	e7a4      	b.n	80055ce <_printf_i+0x16a>
 8005684:	2301      	movs	r3, #1
 8005686:	4632      	mov	r2, r6
 8005688:	4649      	mov	r1, r9
 800568a:	4640      	mov	r0, r8
 800568c:	47d0      	blx	sl
 800568e:	3001      	adds	r0, #1
 8005690:	d09b      	beq.n	80055ca <_printf_i+0x166>
 8005692:	3501      	adds	r5, #1
 8005694:	68e3      	ldr	r3, [r4, #12]
 8005696:	9903      	ldr	r1, [sp, #12]
 8005698:	1a5b      	subs	r3, r3, r1
 800569a:	42ab      	cmp	r3, r5
 800569c:	dcf2      	bgt.n	8005684 <_printf_i+0x220>
 800569e:	e7eb      	b.n	8005678 <_printf_i+0x214>
 80056a0:	2500      	movs	r5, #0
 80056a2:	f104 0619 	add.w	r6, r4, #25
 80056a6:	e7f5      	b.n	8005694 <_printf_i+0x230>
 80056a8:	08005f8a 	.word	0x08005f8a
 80056ac:	08005f9b 	.word	0x08005f9b

080056b0 <__retarget_lock_acquire_recursive>:
 80056b0:	4770      	bx	lr

080056b2 <__retarget_lock_release_recursive>:
 80056b2:	4770      	bx	lr

080056b4 <memchr>:
 80056b4:	4603      	mov	r3, r0
 80056b6:	b510      	push	{r4, lr}
 80056b8:	b2c9      	uxtb	r1, r1
 80056ba:	4402      	add	r2, r0
 80056bc:	4293      	cmp	r3, r2
 80056be:	4618      	mov	r0, r3
 80056c0:	d101      	bne.n	80056c6 <memchr+0x12>
 80056c2:	2000      	movs	r0, #0
 80056c4:	e003      	b.n	80056ce <memchr+0x1a>
 80056c6:	7804      	ldrb	r4, [r0, #0]
 80056c8:	3301      	adds	r3, #1
 80056ca:	428c      	cmp	r4, r1
 80056cc:	d1f6      	bne.n	80056bc <memchr+0x8>
 80056ce:	bd10      	pop	{r4, pc}

080056d0 <memmove>:
 80056d0:	4288      	cmp	r0, r1
 80056d2:	b510      	push	{r4, lr}
 80056d4:	eb01 0402 	add.w	r4, r1, r2
 80056d8:	d902      	bls.n	80056e0 <memmove+0x10>
 80056da:	4284      	cmp	r4, r0
 80056dc:	4623      	mov	r3, r4
 80056de:	d807      	bhi.n	80056f0 <memmove+0x20>
 80056e0:	1e43      	subs	r3, r0, #1
 80056e2:	42a1      	cmp	r1, r4
 80056e4:	d008      	beq.n	80056f8 <memmove+0x28>
 80056e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056ee:	e7f8      	b.n	80056e2 <memmove+0x12>
 80056f0:	4601      	mov	r1, r0
 80056f2:	4402      	add	r2, r0
 80056f4:	428a      	cmp	r2, r1
 80056f6:	d100      	bne.n	80056fa <memmove+0x2a>
 80056f8:	bd10      	pop	{r4, pc}
 80056fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005702:	e7f7      	b.n	80056f4 <memmove+0x24>

08005704 <_realloc_r>:
 8005704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005706:	4607      	mov	r7, r0
 8005708:	4614      	mov	r4, r2
 800570a:	460e      	mov	r6, r1
 800570c:	b921      	cbnz	r1, 8005718 <_realloc_r+0x14>
 800570e:	4611      	mov	r1, r2
 8005710:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005714:	f7ff bbf2 	b.w	8004efc <_malloc_r>
 8005718:	b922      	cbnz	r2, 8005724 <_realloc_r+0x20>
 800571a:	f7ff fba3 	bl	8004e64 <_free_r>
 800571e:	4625      	mov	r5, r4
 8005720:	4628      	mov	r0, r5
 8005722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005724:	f000 f814 	bl	8005750 <_malloc_usable_size_r>
 8005728:	42a0      	cmp	r0, r4
 800572a:	d20f      	bcs.n	800574c <_realloc_r+0x48>
 800572c:	4621      	mov	r1, r4
 800572e:	4638      	mov	r0, r7
 8005730:	f7ff fbe4 	bl	8004efc <_malloc_r>
 8005734:	4605      	mov	r5, r0
 8005736:	2800      	cmp	r0, #0
 8005738:	d0f2      	beq.n	8005720 <_realloc_r+0x1c>
 800573a:	4631      	mov	r1, r6
 800573c:	4622      	mov	r2, r4
 800573e:	f7ff fb7b 	bl	8004e38 <memcpy>
 8005742:	4631      	mov	r1, r6
 8005744:	4638      	mov	r0, r7
 8005746:	f7ff fb8d 	bl	8004e64 <_free_r>
 800574a:	e7e9      	b.n	8005720 <_realloc_r+0x1c>
 800574c:	4635      	mov	r5, r6
 800574e:	e7e7      	b.n	8005720 <_realloc_r+0x1c>

08005750 <_malloc_usable_size_r>:
 8005750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005754:	1f18      	subs	r0, r3, #4
 8005756:	2b00      	cmp	r3, #0
 8005758:	bfbc      	itt	lt
 800575a:	580b      	ldrlt	r3, [r1, r0]
 800575c:	18c0      	addlt	r0, r0, r3
 800575e:	4770      	bx	lr

08005760 <_init>:
 8005760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005762:	bf00      	nop
 8005764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005766:	bc08      	pop	{r3}
 8005768:	469e      	mov	lr, r3
 800576a:	4770      	bx	lr

0800576c <_fini>:
 800576c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576e:	bf00      	nop
 8005770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005772:	bc08      	pop	{r3}
 8005774:	469e      	mov	lr, r3
 8005776:	4770      	bx	lr
>>>>>>> FFF
