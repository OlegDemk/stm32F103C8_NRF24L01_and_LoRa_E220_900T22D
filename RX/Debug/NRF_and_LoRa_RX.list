
NRF_and_LoRa_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c40  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004d4c  08004d4c  00014d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e04  08004e04  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08004e04  08004e04  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e04  08004e04  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e04  08004e04  00014e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08004e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  20000084  08004e90  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000690  08004e90  00020690  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014946  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bac  00000000  00000000  000349f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  000375a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  000387e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000296f  00000000  00000000  00039948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015fee  00000000  00000000  0003c2b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f737  00000000  00000000  000522a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e19dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f3c  00000000  00000000  000e1a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d34 	.word	0x08004d34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08004d34 	.word	0x08004d34

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000164:	4b0c      	ldr	r3, [pc, #48]	; (8000198 <DelayMicro+0x3c>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 800016a:	4b0b      	ldr	r3, [pc, #44]	; (8000198 <DelayMicro+0x3c>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	4a0b      	ldr	r2, [pc, #44]	; (800019c <DelayMicro+0x40>)
 8000170:	fba2 2303 	umull	r2, r3, r2, r3
 8000174:	0ddb      	lsrs	r3, r3, #23
 8000176:	687a      	ldr	r2, [r7, #4]
 8000178:	fb02 f303 	mul.w	r3, r2, r3
 800017c:	607b      	str	r3, [r7, #4]
	while (micros--);
 800017e:	bf00      	nop
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	1e5a      	subs	r2, r3, #1
 8000184:	607a      	str	r2, [r7, #4]
 8000186:	2b00      	cmp	r3, #0
 8000188:	d1fa      	bne.n	8000180 <DelayMicro+0x24>
}
 800018a:	bf00      	nop
 800018c:	bf00      	nop
 800018e:	3714      	adds	r7, #20
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	20000010 	.word	0x20000010
 800019c:	ffa71ee7 	.word	0xffa71ee7

080001a0 <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b086      	sub	sp, #24
 80001a4:	af02      	add	r7, sp, #8
 80001a6:	4603      	mov	r3, r0
 80001a8:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 80001aa:	2300      	movs	r3, #0
 80001ac:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 80001ae:	2200      	movs	r2, #0
 80001b0:	2110      	movs	r1, #16
 80001b2:	4813      	ldr	r0, [pc, #76]	; (8000200 <NRF24_ReadReg+0x60>)
 80001b4:	f001 fcb9 	bl	8001b2a <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 80001b8:	f107 020f 	add.w	r2, r7, #15
 80001bc:	1df9      	adds	r1, r7, #7
 80001be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001c2:	9300      	str	r3, [sp, #0]
 80001c4:	2301      	movs	r3, #1
 80001c6:	480f      	ldr	r0, [pc, #60]	; (8000204 <NRF24_ReadReg+0x64>)
 80001c8:	f003 f83d 	bl	8003246 <HAL_SPI_TransmitReceive>
  if (addr!=STATUS_NRF)
 80001cc:	79fb      	ldrb	r3, [r7, #7]
 80001ce:	2b07      	cmp	r3, #7
 80001d0:	d00c      	beq.n	80001ec <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 80001d2:	23ff      	movs	r3, #255	; 0xff
 80001d4:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 80001d6:	f107 020f 	add.w	r2, r7, #15
 80001da:	f107 010e 	add.w	r1, r7, #14
 80001de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e2:	9300      	str	r3, [sp, #0]
 80001e4:	2301      	movs	r3, #1
 80001e6:	4807      	ldr	r0, [pc, #28]	; (8000204 <NRF24_ReadReg+0x64>)
 80001e8:	f003 f82d 	bl	8003246 <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 80001ec:	2201      	movs	r2, #1
 80001ee:	2110      	movs	r1, #16
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <NRF24_ReadReg+0x60>)
 80001f2:	f001 fc9a 	bl	8001b2a <HAL_GPIO_WritePin>
  return dt;
 80001f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	3710      	adds	r7, #16
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	40010800 	.word	0x40010800
 8000204:	20000624 	.word	0x20000624

08000208 <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	460a      	mov	r2, r1
 8000212:	71fb      	strb	r3, [r7, #7]
 8000214:	4613      	mov	r3, r2
 8000216:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	f043 0320 	orr.w	r3, r3, #32
 800021e:	b2db      	uxtb	r3, r3
 8000220:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000222:	2200      	movs	r2, #0
 8000224:	2110      	movs	r1, #16
 8000226:	480d      	ldr	r0, [pc, #52]	; (800025c <NRF24_WriteReg+0x54>)
 8000228:	f001 fc7f 	bl	8001b2a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800022c:	1df9      	adds	r1, r7, #7
 800022e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000232:	2201      	movs	r2, #1
 8000234:	480a      	ldr	r0, [pc, #40]	; (8000260 <NRF24_WriteReg+0x58>)
 8000236:	f002 fdb9 	bl	8002dac <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 800023a:	1db9      	adds	r1, r7, #6
 800023c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000240:	2201      	movs	r2, #1
 8000242:	4807      	ldr	r0, [pc, #28]	; (8000260 <NRF24_WriteReg+0x58>)
 8000244:	f002 fdb2 	bl	8002dac <HAL_SPI_Transmit>
  CS_OFF;
 8000248:	2201      	movs	r2, #1
 800024a:	2110      	movs	r1, #16
 800024c:	4803      	ldr	r0, [pc, #12]	; (800025c <NRF24_WriteReg+0x54>)
 800024e:	f001 fc6c 	bl	8001b2a <HAL_GPIO_WritePin>
}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40010800 	.word	0x40010800
 8000260:	20000624 	.word	0x20000624

08000264 <NRF24_Read_Buf>:
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
  CS_OFF;
}
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	6039      	str	r1, [r7, #0]
 800026e:	71fb      	strb	r3, [r7, #7]
 8000270:	4613      	mov	r3, r2
 8000272:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 8000274:	2200      	movs	r2, #0
 8000276:	2110      	movs	r1, #16
 8000278:	480d      	ldr	r0, [pc, #52]	; (80002b0 <NRF24_Read_Buf+0x4c>)
 800027a:	f001 fc56 	bl	8001b2a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800027e:	1df9      	adds	r1, r7, #7
 8000280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000284:	2201      	movs	r2, #1
 8000286:	480b      	ldr	r0, [pc, #44]	; (80002b4 <NRF24_Read_Buf+0x50>)
 8000288:	f002 fd90 	bl	8002dac <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 800028c:	79bb      	ldrb	r3, [r7, #6]
 800028e:	b29a      	uxth	r2, r3
 8000290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000294:	6839      	ldr	r1, [r7, #0]
 8000296:	4807      	ldr	r0, [pc, #28]	; (80002b4 <NRF24_Read_Buf+0x50>)
 8000298:	f002 fec4 	bl	8003024 <HAL_SPI_Receive>
  CS_OFF;
 800029c:	2201      	movs	r2, #1
 800029e:	2110      	movs	r1, #16
 80002a0:	4803      	ldr	r0, [pc, #12]	; (80002b0 <NRF24_Read_Buf+0x4c>)
 80002a2:	f001 fc42 	bl	8001b2a <HAL_GPIO_WritePin>
}
 80002a6:	bf00      	nop
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40010800 	.word	0x40010800
 80002b4:	20000624 	.word	0x20000624

080002b8 <IRQ_Callback>:
	status = read_config_registers();
	return status;
}
//----------------------------------------------------------------------------------------
void IRQ_Callback(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 80002be:	2301      	movs	r3, #1
 80002c0:	71fb      	strb	r3, [r7, #7]
	uint16_t dt=0;
 80002c2:	2300      	movs	r3, #0
 80002c4:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ca:	4814      	ldr	r0, [pc, #80]	; (800031c <IRQ_Callback+0x64>)
 80002cc:	f001 fc45 	bl	8001b5a <HAL_GPIO_TogglePin>

	DelayMicro(10);
 80002d0:	200a      	movs	r0, #10
 80002d2:	f7ff ff43 	bl	800015c <DelayMicro>

	status = NRF24_ReadReg(STATUS_NRF);
 80002d6:	2007      	movs	r0, #7
 80002d8:	f7ff ff62 	bl	80001a0 <NRF24_ReadReg>
 80002dc:	4603      	mov	r3, r0
 80002de:	71fb      	strb	r3, [r7, #7]
	if(status & 0x40)									    //	Flag: Data ready in FIFO  (Check RX_DR flag)
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d013      	beq.n	8000312 <IRQ_Callback+0x5a>
	{
		pipe = (status>>1) & 0x07;
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	085b      	lsrs	r3, r3, #1
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	f003 0307 	and.w	r3, r3, #7
 80002f4:	b2da      	uxtb	r2, r3
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <IRQ_Callback+0x68>)
 80002f8:	701a      	strb	r2, [r3, #0]
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 80002fa:	220a      	movs	r2, #10
 80002fc:	4909      	ldr	r1, [pc, #36]	; (8000324 <IRQ_Callback+0x6c>)
 80002fe:	2061      	movs	r0, #97	; 0x61
 8000300:	f7ff ffb0 	bl	8000264 <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS_NRF, 0x40);					// For turn down interrupt in nrf module
 8000304:	2140      	movs	r1, #64	; 0x40
 8000306:	2007      	movs	r0, #7
 8000308:	f7ff ff7e 	bl	8000208 <NRF24_WriteReg>
		rx_flag = 1;
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <IRQ_Callback+0x70>)
 800030e:	2201      	movs	r2, #1
 8000310:	701a      	strb	r2, [r3, #0]
	}
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40011000 	.word	0x40011000
 8000320:	200000ab 	.word	0x200000ab
 8000324:	200000a0 	.word	0x200000a0
 8000328:	200000aa 	.word	0x200000aa

0800032c <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b086      	sub	sp, #24
 8000330:	af04      	add	r7, sp, #16
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8000336:	230a      	movs	r3, #10
 8000338:	9302      	str	r3, [sp, #8]
 800033a:	2301      	movs	r3, #1
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	1dfb      	adds	r3, r7, #7
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	2301      	movs	r3, #1
 8000344:	2200      	movs	r2, #0
 8000346:	2178      	movs	r1, #120	; 0x78
 8000348:	4803      	ldr	r0, [pc, #12]	; (8000358 <ssd1306_WriteCommand+0x2c>)
 800034a:	f001 fd7b 	bl	8001e44 <HAL_I2C_Mem_Write>
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000544 	.word	0x20000544

0800035c <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8000360:	2064      	movs	r0, #100	; 0x64
 8000362:	f001 f865 	bl	8001430 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8000366:	20ae      	movs	r0, #174	; 0xae
 8000368:	f7ff ffe0 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800036c:	2020      	movs	r0, #32
 800036e:	f7ff ffdd 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000372:	2010      	movs	r0, #16
 8000374:	f7ff ffda 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000378:	20b0      	movs	r0, #176	; 0xb0
 800037a:	f7ff ffd7 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800037e:	20c8      	movs	r0, #200	; 0xc8
 8000380:	f7ff ffd4 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8000384:	2000      	movs	r0, #0
 8000386:	f7ff ffd1 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800038a:	2010      	movs	r0, #16
 800038c:	f7ff ffce 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8000390:	2040      	movs	r0, #64	; 0x40
 8000392:	f7ff ffcb 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8000396:	2081      	movs	r0, #129	; 0x81
 8000398:	f7ff ffc8 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 800039c:	20ff      	movs	r0, #255	; 0xff
 800039e:	f7ff ffc5 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80003a2:	20a1      	movs	r0, #161	; 0xa1
 80003a4:	f7ff ffc2 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80003a8:	20a6      	movs	r0, #166	; 0xa6
 80003aa:	f7ff ffbf 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80003ae:	20a8      	movs	r0, #168	; 0xa8
 80003b0:	f7ff ffbc 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80003b4:	203f      	movs	r0, #63	; 0x3f
 80003b6:	f7ff ffb9 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80003ba:	20a4      	movs	r0, #164	; 0xa4
 80003bc:	f7ff ffb6 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80003c0:	20d3      	movs	r0, #211	; 0xd3
 80003c2:	f7ff ffb3 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80003c6:	2000      	movs	r0, #0
 80003c8:	f7ff ffb0 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80003cc:	20d5      	movs	r0, #213	; 0xd5
 80003ce:	f7ff ffad 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80003d2:	20f0      	movs	r0, #240	; 0xf0
 80003d4:	f7ff ffaa 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80003d8:	20d9      	movs	r0, #217	; 0xd9
 80003da:	f7ff ffa7 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80003de:	2022      	movs	r0, #34	; 0x22
 80003e0:	f7ff ffa4 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 80003e4:	20da      	movs	r0, #218	; 0xda
 80003e6:	f7ff ffa1 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 80003ea:	2012      	movs	r0, #18
 80003ec:	f7ff ff9e 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 80003f0:	20db      	movs	r0, #219	; 0xdb
 80003f2:	f7ff ff9b 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80003f6:	2020      	movs	r0, #32
 80003f8:	f7ff ff98 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80003fc:	208d      	movs	r0, #141	; 0x8d
 80003fe:	f7ff ff95 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8000402:	2014      	movs	r0, #20
 8000404:	f7ff ff92 	bl	800032c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000408:	20af      	movs	r0, #175	; 0xaf
 800040a:	f7ff ff8f 	bl	800032c <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 800040e:	2000      	movs	r0, #0
 8000410:	f000 f810 	bl	8000434 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8000414:	f000 f830 	bl	8000478 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <ssd1306_Init+0xd4>)
 800041a:	2200      	movs	r2, #0
 800041c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800041e:	4b04      	ldr	r3, [pc, #16]	; (8000430 <ssd1306_Init+0xd4>)
 8000420:	2200      	movs	r2, #0
 8000422:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8000424:	4b02      	ldr	r3, [pc, #8]	; (8000430 <ssd1306_Init+0xd4>)
 8000426:	2201      	movs	r2, #1
 8000428:	715a      	strb	r2, [r3, #5]

	return 1;
 800042a:	2301      	movs	r3, #1
}
 800042c:	4618      	mov	r0, r3
 800042e:	bd80      	pop	{r7, pc}
 8000430:	200004ac 	.word	0x200004ac

08000434 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	e00d      	b.n	8000460 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d101      	bne.n	800044e <ssd1306_Fill+0x1a>
 800044a:	2100      	movs	r1, #0
 800044c:	e000      	b.n	8000450 <ssd1306_Fill+0x1c>
 800044e:	21ff      	movs	r1, #255	; 0xff
 8000450:	4a08      	ldr	r2, [pc, #32]	; (8000474 <ssd1306_Fill+0x40>)
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	4413      	add	r3, r2
 8000456:	460a      	mov	r2, r1
 8000458:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	3301      	adds	r3, #1
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000466:	d3ed      	bcc.n	8000444 <ssd1306_Fill+0x10>
	}
}
 8000468:	bf00      	nop
 800046a:	bf00      	nop
 800046c:	3714      	adds	r7, #20
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	200000ac 	.word	0x200000ac

08000478 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 800047e:	2300      	movs	r3, #0
 8000480:	71fb      	strb	r3, [r7, #7]
 8000482:	e01d      	b.n	80004c0 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	3b50      	subs	r3, #80	; 0x50
 8000488:	b2db      	uxtb	r3, r3
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ff4e 	bl	800032c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000490:	2000      	movs	r0, #0
 8000492:	f7ff ff4b 	bl	800032c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8000496:	2010      	movs	r0, #16
 8000498:	f7ff ff48 	bl	800032c <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	01db      	lsls	r3, r3, #7
 80004a0:	4a0b      	ldr	r2, [pc, #44]	; (80004d0 <ssd1306_UpdateScreen+0x58>)
 80004a2:	4413      	add	r3, r2
 80004a4:	2264      	movs	r2, #100	; 0x64
 80004a6:	9202      	str	r2, [sp, #8]
 80004a8:	2280      	movs	r2, #128	; 0x80
 80004aa:	9201      	str	r2, [sp, #4]
 80004ac:	9300      	str	r3, [sp, #0]
 80004ae:	2301      	movs	r3, #1
 80004b0:	2240      	movs	r2, #64	; 0x40
 80004b2:	2178      	movs	r1, #120	; 0x78
 80004b4:	4807      	ldr	r0, [pc, #28]	; (80004d4 <ssd1306_UpdateScreen+0x5c>)
 80004b6:	f001 fcc5 	bl	8001e44 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	3301      	adds	r3, #1
 80004be:	71fb      	strb	r3, [r7, #7]
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	2b07      	cmp	r3, #7
 80004c4:	d9de      	bls.n	8000484 <ssd1306_UpdateScreen+0xc>
	}
}
 80004c6:	bf00      	nop
 80004c8:	bf00      	nop
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	200000ac 	.word	0x200000ac
 80004d4:	20000544 	.word	0x20000544

080004d8 <lists>:
 */



void lists (void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	simply_linced_lists();
 80004dc:	f000 f802 	bl	80004e4 <simply_linced_lists>





}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <simply_linced_lists>:
void push_front(t_list **list, int set_id, char *set_name);
void push_back(t_list **list, int set_id, char *set_name);
void add_list(t_list **list, int id);
// ---------------------------------------------------------------------------------
int simply_linced_lists()
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b0a0      	sub	sp, #128	; 0x80
 80004e8:	af00      	add	r7, sp, #0
	static char test_str[] = "Lists\n\r";
    HAL_UART_Transmit(&huart3, test_str, sizeof(test_str), 1000);
 80004ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ee:	2208      	movs	r2, #8
 80004f0:	4967      	ldr	r1, [pc, #412]	; (8000690 <simply_linced_lists+0x1ac>)
 80004f2:	4868      	ldr	r0, [pc, #416]	; (8000694 <simply_linced_lists+0x1b0>)
 80004f4:	f003 fdc1 	bl	800407a <HAL_UART_Transmit>
 	HAL_Delay(1000);
 80004f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004fc:	f000 ff98 	bl	8001430 <HAL_Delay>
 	memset(test_str, 0, sizeof(test_str));
 8000500:	2208      	movs	r2, #8
 8000502:	2100      	movs	r1, #0
 8000504:	4862      	ldr	r0, [pc, #392]	; (8000690 <simply_linced_lists+0x1ac>)
 8000506:	f004 faf7 	bl	8004af8 <memset>

 	char str_id[10] = {0};
 800050a:	2300      	movs	r3, #0
 800050c:	66bb      	str	r3, [r7, #104]	; 0x68
 800050e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	809a      	strh	r2, [r3, #4]
 	char str_name[20] = {0};
 8000518:	2300      	movs	r3, #0
 800051a:	657b      	str	r3, [r7, #84]	; 0x54
 800051c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
    char str_buffer[80] = {0};
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	f107 0308 	add.w	r3, r7, #8
 8000532:	224c      	movs	r2, #76	; 0x4c
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f004 fade 	bl	8004af8 <memset>

	t_list *list = create_node(0, "Name 0");			// Створення нульового елемента списку
 800053c:	4956      	ldr	r1, [pc, #344]	; (8000698 <simply_linced_lists+0x1b4>)
 800053e:	2000      	movs	r0, #0
 8000540:	f000 f8e4 	bl	800070c <create_node>
 8000544:	4603      	mov	r3, r0
 8000546:	603b      	str	r3, [r7, #0]

	push_back(&list, 1, "Back:Name -1");
 8000548:	463b      	mov	r3, r7
 800054a:	4a54      	ldr	r2, [pc, #336]	; (800069c <simply_linced_lists+0x1b8>)
 800054c:	2101      	movs	r1, #1
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f90a 	bl	8000768 <push_back>
	push_back(&list, 2, "Back:Name -2");
 8000554:	463b      	mov	r3, r7
 8000556:	4a52      	ldr	r2, [pc, #328]	; (80006a0 <simply_linced_lists+0x1bc>)
 8000558:	2102      	movs	r1, #2
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f904 	bl	8000768 <push_back>

	push_front(&list, 2, "Front:Name 2");					// Додати новий елемент на початок списку
 8000560:	463b      	mov	r3, r7
 8000562:	4a50      	ldr	r2, [pc, #320]	; (80006a4 <simply_linced_lists+0x1c0>)
 8000564:	2102      	movs	r1, #2
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f8e8 	bl	800073c <push_front>
	push_front(&list, 3, "Front:Name 3");
 800056c:	463b      	mov	r3, r7
 800056e:	4a4e      	ldr	r2, [pc, #312]	; (80006a8 <simply_linced_lists+0x1c4>)
 8000570:	2103      	movs	r1, #3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f8e2 	bl	800073c <push_front>
	push_front(&list, 4, "Front:Name 4");
 8000578:	463b      	mov	r3, r7
 800057a:	4a4c      	ldr	r2, [pc, #304]	; (80006ac <simply_linced_lists+0x1c8>)
 800057c:	2104      	movs	r1, #4
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f8dc 	bl	800073c <push_front>


	add_list(&list, 0);
 8000584:	463b      	mov	r3, r7
 8000586:	2100      	movs	r1, #0
 8000588:	4618      	mov	r0, r3
 800058a:	f000 f897 	bl	80006bc <add_list>
	// Додати новий елемент списку в середину списку ////
	t_list *tmp = list;
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	67fb      	str	r3, [r7, #124]	; 0x7c
	while(tmp -> next != NULL)		// шукаємо останній елемент списку
 8000592:	e013      	b.n	80005bc <simply_linced_lists+0xd8>
	{
		if(tmp -> id == 0)			// Якщо	знайдений елемент з 0 айдішкою
 8000594:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d10c      	bne.n	80005b6 <simply_linced_lists+0xd2>
		{
			t_list *new_element = create_node(1000, "INSERT");
 800059c:	4944      	ldr	r1, [pc, #272]	; (80006b0 <simply_linced_lists+0x1cc>)
 800059e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a2:	f000 f8b3 	bl	800070c <create_node>
 80005a6:	6778      	str	r0, [r7, #116]	; 0x74
			new_element -> next = tmp -> next;
 80005a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005aa:	689a      	ldr	r2, [r3, #8]
 80005ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005ae:	609a      	str	r2, [r3, #8]
			tmp -> next = new_element;
 80005b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80005b4:	609a      	str	r2, [r3, #8]
		}
		tmp = tmp -> next;
 80005b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	67fb      	str	r3, [r7, #124]	; 0x7c
	while(tmp -> next != NULL)		// шукаємо останній елемент списку
 80005bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d1e7      	bne.n	8000594 <simply_linced_lists+0xb0>
	}
	/////////////////////////////////////////////////////
	// Видалити елемент списку (Видаляє найперший елемент списку)
	t_list *to_delete = list;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	67bb      	str	r3, [r7, #120]	; 0x78
	list = list -> next;
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	603b      	str	r3, [r7, #0]
	free(to_delete);
 80005ce:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80005d0:	f004 fa8a 	bl	8004ae8 <free>

	/////////////////////////////////////////////////////


	while (list != NULL)
 80005d4:	e058      	b.n	8000688 <simply_linced_lists+0x1a4>
	{
		itoa(list -> id, str_id, 10);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80005de:	220a      	movs	r2, #10
 80005e0:	4618      	mov	r0, r3
 80005e2:	f004 fa77 	bl	8004ad4 <itoa>
		strcat(str_name, list -> name);
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	685a      	ldr	r2, [r3, #4]
 80005ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005ee:	4611      	mov	r1, r2
 80005f0:	4618      	mov	r0, r3
 80005f2:	f004 fb3f 	bl	8004c74 <strcat>
		strcat(str_buffer, str_id);
 80005f6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4611      	mov	r1, r2
 80005fe:	4618      	mov	r0, r3
 8000600:	f004 fb38 	bl	8004c74 <strcat>
		strcat(str_buffer, ": ");
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff fda0 	bl	800014c <strlen>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	4413      	add	r3, r2
 8000614:	4a27      	ldr	r2, [pc, #156]	; (80006b4 <simply_linced_lists+0x1d0>)
 8000616:	8811      	ldrh	r1, [r2, #0]
 8000618:	7892      	ldrb	r2, [r2, #2]
 800061a:	8019      	strh	r1, [r3, #0]
 800061c:	709a      	strb	r2, [r3, #2]
		strcat(str_buffer, str_name);
 800061e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4611      	mov	r1, r2
 8000626:	4618      	mov	r0, r3
 8000628:	f004 fb24 	bl	8004c74 <strcat>
		strcat(str_buffer, "\r\n");
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff fd8c 	bl	800014c <strlen>
 8000634:	4603      	mov	r3, r0
 8000636:	461a      	mov	r2, r3
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4413      	add	r3, r2
 800063c:	4a1e      	ldr	r2, [pc, #120]	; (80006b8 <simply_linced_lists+0x1d4>)
 800063e:	8811      	ldrh	r1, [r2, #0]
 8000640:	7892      	ldrb	r2, [r2, #2]
 8000642:	8019      	strh	r1, [r3, #0]
 8000644:	709a      	strb	r2, [r3, #2]


		HAL_UART_Transmit(&huart3, str_buffer, sizeof(str_buffer), 1000);
 8000646:	1d39      	adds	r1, r7, #4
 8000648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064c:	2250      	movs	r2, #80	; 0x50
 800064e:	4811      	ldr	r0, [pc, #68]	; (8000694 <simply_linced_lists+0x1b0>)
 8000650:	f003 fd13 	bl	800407a <HAL_UART_Transmit>

		list = list -> next;						// перейти на наступний елемент списку
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	603b      	str	r3, [r7, #0]

		HAL_Delay(100);
 800065a:	2064      	movs	r0, #100	; 0x64
 800065c:	f000 fee8 	bl	8001430 <HAL_Delay>
		memset(str_id, 0, sizeof(str_id));
 8000660:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000664:	220a      	movs	r2, #10
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f004 fa45 	bl	8004af8 <memset>
		memset(str_name, 0, sizeof(str_name));
 800066e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000672:	2214      	movs	r2, #20
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f004 fa3e 	bl	8004af8 <memset>
		memset(str_buffer, 0, sizeof(str_buffer));
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2250      	movs	r2, #80	; 0x50
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f004 fa38 	bl	8004af8 <memset>
	while (list != NULL)
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1a3      	bne.n	80005d6 <simply_linced_lists+0xf2>
	}

	while(1)
 800068e:	e7fe      	b.n	800068e <simply_linced_lists+0x1aa>
 8000690:	20000000 	.word	0x20000000
 8000694:	20000500 	.word	0x20000500
 8000698:	08004d4c 	.word	0x08004d4c
 800069c:	08004d54 	.word	0x08004d54
 80006a0:	08004d64 	.word	0x08004d64
 80006a4:	08004d74 	.word	0x08004d74
 80006a8:	08004d84 	.word	0x08004d84
 80006ac:	08004d94 	.word	0x08004d94
 80006b0:	08004da4 	.word	0x08004da4
 80006b4:	08004dac 	.word	0x08004dac
 80006b8:	08004db0 	.word	0x08004db0

080006bc <add_list>:
	}
	return 0;
}
// ---------------------------------------------------------------------------------
void add_list(t_list **list, int id )
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
	t_list *tmp = list;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	60fb      	str	r3, [r7, #12]
	while(tmp -> next != NULL)		// шукаємо останній елемент списку
 80006ca:	e013      	b.n	80006f4 <add_list+0x38>
	{
		if(tmp -> id == 0)			// Якщо	знайдений елемент з 0 айдішкою
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d10c      	bne.n	80006ee <add_list+0x32>
		{
			t_list *new_element = create_node(1000, "INSERT");
 80006d4:	490c      	ldr	r1, [pc, #48]	; (8000708 <add_list+0x4c>)
 80006d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006da:	f000 f817 	bl	800070c <create_node>
 80006de:	60b8      	str	r0, [r7, #8]
			new_element -> next = tmp -> next;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	689a      	ldr	r2, [r3, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	609a      	str	r2, [r3, #8]
			tmp -> next = new_element;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	68ba      	ldr	r2, [r7, #8]
 80006ec:	609a      	str	r2, [r3, #8]
		}
		tmp = tmp -> next;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	60fb      	str	r3, [r7, #12]
	while(tmp -> next != NULL)		// шукаємо останній елемент списку
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1e7      	bne.n	80006cc <add_list+0x10>
	}
}
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	08004da4 	.word	0x08004da4

0800070c <create_node>:

// ---------------------------------------------------------------------------------
t_list *create_node(int set_id, char *set_name)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	t_list *node = (t_list *)malloc(sizeof(t_list));
 8000716:	200c      	movs	r0, #12
 8000718:	f004 f9de 	bl	8004ad8 <malloc>
 800071c:	4603      	mov	r3, r0
 800071e:	60fb      	str	r3, [r7, #12]

	node -> id = set_id;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	601a      	str	r2, [r3, #0]
	node -> name = set_name;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	605a      	str	r2, [r3, #4]

	node -> next = NULL;			// Адрес на наступний елемент
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]

	return node;
 8000732:	68fb      	ldr	r3, [r7, #12]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <push_front>:
// ---------------------------------------------------------------------------------
void push_front(t_list **list, int set_id, char *set_name)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
	t_list *new_element = create_node(set_id, set_name);
 8000748:	6879      	ldr	r1, [r7, #4]
 800074a:	68b8      	ldr	r0, [r7, #8]
 800074c:	f7ff ffde 	bl	800070c <create_node>
 8000750:	6178      	str	r0, [r7, #20]

	new_element -> next = *list;					// Адрес нового на наступний елемент ставиться попередній
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	609a      	str	r2, [r3, #8]
	*list = new_element;							// Присвоюємо адрес тільки що доданого елемента
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	697a      	ldr	r2, [r7, #20]
 800075e:	601a      	str	r2, [r3, #0]
}
 8000760:	bf00      	nop
 8000762:	3718      	adds	r7, #24
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <push_back>:
// ---------------------------------------------------------------------------------
void push_back(t_list **list, int set_id, char *set_name)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
	t_list *new_element = create_node(set_id, set_name);	// Створюємо новий елемент списку
 8000774:	6879      	ldr	r1, [r7, #4]
 8000776:	68b8      	ldr	r0, [r7, #8]
 8000778:	f7ff ffc8 	bl	800070c <create_node>
 800077c:	6138      	str	r0, [r7, #16]
	t_list *tmp = *list;									// його адрес записуємо в буфер
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	617b      	str	r3, [r7, #20]

	while(tmp -> next != NULL)								// Знайти останній елемент списку (tmp -> next == NULL)
 8000784:	e002      	b.n	800078c <push_back+0x24>
	{
		tmp = tmp -> next;			// Прохід по полям структури з адресом
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	617b      	str	r3, [r7, #20]
	while(tmp -> next != NULL)								// Знайти останній елемент списку (tmp -> next == NULL)
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d1f8      	bne.n	8000786 <push_back+0x1e>
	}
	// Якщо знайдено останній елемент списку
	tmp -> next = new_element;		 // тоді ми записуємо в поле адресу останнього, адрес на доданий елемент списку
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	693a      	ldr	r2, [r7, #16]
 8000798:	609a      	str	r2, [r3, #8]
}
 800079a:	bf00      	nop
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a8:	f000 fde0 	bl	800136c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ac:	f000 f826 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b0:	f000 f972 	bl	8000a98 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007b4:	f000 f868 	bl	8000888 <MX_I2C1_Init>
  MX_SPI1_Init();
 80007b8:	f000 f894 	bl	80008e4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80007bc:	f000 f918 	bl	80009f0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80007c0:	f000 f8c6 	bl	8000950 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80007c4:	f000 f93e 	bl	8000a44 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ce:	480a      	ldr	r0, [pc, #40]	; (80007f8 <main+0x54>)
 80007d0:	f001 f9ab 	bl	8001b2a <HAL_GPIO_WritePin>

  // Init interrupp
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2100      	movs	r1, #0
 80007d8:	2025      	movs	r0, #37	; 0x25
 80007da:	f000 ff24 	bl	8001626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007de:	2025      	movs	r0, #37	; 0x25
 80007e0:	f000 ff3d 	bl	800165e <HAL_NVIC_EnableIRQ>


  // OLED init
  ssd1306_Init();
 80007e4:	f7ff fdba 	bl	800035c <ssd1306_Init>
  ssd1306_Fill(Black);
 80007e8:	2000      	movs	r0, #0
 80007ea:	f7ff fe23 	bl	8000434 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80007ee:	f7ff fe43 	bl	8000478 <ssd1306_UpdateScreen>
//	{
//		state_machine();
//	}
    //////////////////////////////////////////////

	  lists();
 80007f2:	f7ff fe71 	bl	80004d8 <lists>
  {
 80007f6:	e7fc      	b.n	80007f2 <main+0x4e>
 80007f8:	40011000 	.word	0x40011000

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b090      	sub	sp, #64	; 0x40
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0318 	add.w	r3, r7, #24
 8000806:	2228      	movs	r2, #40	; 0x28
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f004 f974 	bl	8004af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800081e:	2301      	movs	r3, #1
 8000820:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000822:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000826:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082c:	2301      	movs	r3, #1
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000830:	2302      	movs	r3, #2
 8000832:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000834:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000838:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800083a:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800083e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0318 	add.w	r3, r7, #24
 8000844:	4618      	mov	r0, r3
 8000846:	f001 fe13 	bl	8002470 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000850:	f000 fa34 	bl	8000cbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	230f      	movs	r3, #15
 8000856:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000858:	2302      	movs	r3, #2
 800085a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000864:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2102      	movs	r1, #2
 800086e:	4618      	mov	r0, r3
 8000870:	f002 f87e 	bl	8002970 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800087a:	f000 fa1f 	bl	8000cbc <Error_Handler>
  }
}
 800087e:	bf00      	nop
 8000880:	3740      	adds	r7, #64	; 0x40
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_I2C1_Init+0x50>)
 800088e:	4a13      	ldr	r2, [pc, #76]	; (80008dc <MX_I2C1_Init+0x54>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_I2C1_Init+0x50>)
 8000894:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <MX_I2C1_Init+0x58>)
 8000896:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_I2C1_Init+0x50>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_I2C1_Init+0x50>)
 80008c6:	f001 f979 	bl	8001bbc <HAL_I2C_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008d0:	f000 f9f4 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000544 	.word	0x20000544
 80008dc:	40005400 	.word	0x40005400
 80008e0:	00061a80 	.word	0x00061a80

080008e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_SPI1_Init+0x64>)
 80008ea:	4a18      	ldr	r2, [pc, #96]	; (800094c <MX_SPI1_Init+0x68>)
 80008ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_SPI1_Init+0x64>)
 80008f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_SPI1_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_SPI1_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_SPI1_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_SPI1_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_SPI1_Init+0x64>)
 8000910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000914:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_SPI1_Init+0x64>)
 8000918:	2220      	movs	r2, #32
 800091a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_SPI1_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_SPI1_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <MX_SPI1_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_SPI1_Init+0x64>)
 8000930:	220a      	movs	r2, #10
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_SPI1_Init+0x64>)
 8000936:	f002 f9b5 	bl	8002ca4 <HAL_SPI_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000940:	f000 f9bc 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000624 	.word	0x20000624
 800094c:	40013000 	.word	0x40013000

08000950 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000964:	463b      	mov	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800096c:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <MX_TIM1_Init+0x98>)
 800096e:	4a1f      	ldr	r2, [pc, #124]	; (80009ec <MX_TIM1_Init+0x9c>)
 8000970:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 8000972:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <MX_TIM1_Init+0x98>)
 8000974:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8000978:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097a:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_TIM1_Init+0x98>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000980:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <MX_TIM1_Init+0x98>)
 8000982:	2264      	movs	r2, #100	; 0x64
 8000984:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_TIM1_Init+0x98>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <MX_TIM1_Init+0x98>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_TIM1_Init+0x98>)
 8000994:	2280      	movs	r2, #128	; 0x80
 8000996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000998:	4813      	ldr	r0, [pc, #76]	; (80009e8 <MX_TIM1_Init+0x98>)
 800099a:	f002 feef 	bl	800377c <HAL_TIM_Base_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009a4:	f000 f98a 	bl	8000cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	4619      	mov	r1, r3
 80009b4:	480c      	ldr	r0, [pc, #48]	; (80009e8 <MX_TIM1_Init+0x98>)
 80009b6:	f003 f8b9 	bl	8003b2c <HAL_TIM_ConfigClockSource>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009c0:	f000 f97c 	bl	8000cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80009c4:	2310      	movs	r3, #16
 80009c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009cc:	463b      	mov	r3, r7
 80009ce:	4619      	mov	r1, r3
 80009d0:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_TIM1_Init+0x98>)
 80009d2:	f003 fa95 	bl	8003f00 <HAL_TIMEx_MasterConfigSynchronization>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009dc:	f000 f96e 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200005dc 	.word	0x200005dc
 80009ec:	40012c00 	.word	0x40012c00

080009f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <MX_USART1_UART_Init+0x50>)
 80009f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 80009fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_USART1_UART_Init+0x4c>)
 8000a28:	f003 fada 	bl	8003fe0 <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a32:	f000 f943 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000598 	.word	0x20000598
 8000a40:	40013800 	.word	0x40013800

08000a44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_USART3_UART_Init+0x4c>)
 8000a4a:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <MX_USART3_UART_Init+0x50>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <MX_USART3_UART_Init+0x4c>)
 8000a50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_USART3_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_USART3_UART_Init+0x4c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_USART3_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_USART3_UART_Init+0x4c>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_USART3_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_USART3_UART_Init+0x4c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_USART3_UART_Init+0x4c>)
 8000a7c:	f003 fab0 	bl	8003fe0 <HAL_UART_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a86:	f000 f919 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000500 	.word	0x20000500
 8000a94:	40004800 	.word	0x40004800

08000a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 0310 	add.w	r3, r7, #16
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aac:	4b59      	ldr	r3, [pc, #356]	; (8000c14 <MX_GPIO_Init+0x17c>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a58      	ldr	r2, [pc, #352]	; (8000c14 <MX_GPIO_Init+0x17c>)
 8000ab2:	f043 0310 	orr.w	r3, r3, #16
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b56      	ldr	r3, [pc, #344]	; (8000c14 <MX_GPIO_Init+0x17c>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0310 	and.w	r3, r3, #16
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac4:	4b53      	ldr	r3, [pc, #332]	; (8000c14 <MX_GPIO_Init+0x17c>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a52      	ldr	r2, [pc, #328]	; (8000c14 <MX_GPIO_Init+0x17c>)
 8000aca:	f043 0320 	orr.w	r3, r3, #32
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b50      	ldr	r3, [pc, #320]	; (8000c14 <MX_GPIO_Init+0x17c>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f003 0320 	and.w	r3, r3, #32
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	4b4d      	ldr	r3, [pc, #308]	; (8000c14 <MX_GPIO_Init+0x17c>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a4c      	ldr	r2, [pc, #304]	; (8000c14 <MX_GPIO_Init+0x17c>)
 8000ae2:	f043 0304 	orr.w	r3, r3, #4
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b4a      	ldr	r3, [pc, #296]	; (8000c14 <MX_GPIO_Init+0x17c>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af4:	4b47      	ldr	r3, [pc, #284]	; (8000c14 <MX_GPIO_Init+0x17c>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a46      	ldr	r2, [pc, #280]	; (8000c14 <MX_GPIO_Init+0x17c>)
 8000afa:	f043 0308 	orr.w	r3, r3, #8
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b44      	ldr	r3, [pc, #272]	; (8000c14 <MX_GPIO_Init+0x17c>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0308 	and.w	r3, r3, #8
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b12:	4841      	ldr	r0, [pc, #260]	; (8000c18 <MX_GPIO_Init+0x180>)
 8000b14:	f001 f809 	bl	8001b2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2108      	movs	r1, #8
 8000b1c:	483f      	ldr	r0, [pc, #252]	; (8000c1c <MX_GPIO_Init+0x184>)
 8000b1e:	f001 f804 	bl	8001b2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	2110      	movs	r1, #16
 8000b26:	483d      	ldr	r0, [pc, #244]	; (8000c1c <MX_GPIO_Init+0x184>)
 8000b28:	f000 ffff 	bl	8001b2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f242 0101 	movw	r1, #8193	; 0x2001
 8000b32:	483b      	ldr	r0, [pc, #236]	; (8000c20 <MX_GPIO_Init+0x188>)
 8000b34:	f000 fff9 	bl	8001b2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4831      	ldr	r0, [pc, #196]	; (8000c18 <MX_GPIO_Init+0x180>)
 8000b52:	f000 fe4f 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8;
 8000b56:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000b5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b5c:	4b31      	ldr	r3, [pc, #196]	; (8000c24 <MX_GPIO_Init+0x18c>)
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	4619      	mov	r1, r3
 8000b6a:	482c      	ldr	r0, [pc, #176]	; (8000c1c <MX_GPIO_Init+0x184>)
 8000b6c:	f000 fe42 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000b70:	2318      	movs	r3, #24
 8000b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	4619      	mov	r1, r3
 8000b86:	4825      	ldr	r0, [pc, #148]	; (8000c1c <MX_GPIO_Init+0x184>)
 8000b88:	f000 fe34 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 8000b8c:	f242 0301 	movw	r3, #8193	; 0x2001
 8000b90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9e:	f107 0310 	add.w	r3, r7, #16
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	481e      	ldr	r0, [pc, #120]	; (8000c20 <MX_GPIO_Init+0x188>)
 8000ba6:	f000 fe25 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 8000baa:	2302      	movs	r3, #2
 8000bac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4818      	ldr	r0, [pc, #96]	; (8000c20 <MX_GPIO_Init+0x188>)
 8000bbe:	f000 fe19 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000bc2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bc8:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <MX_GPIO_Init+0x18c>)
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4812      	ldr	r0, [pc, #72]	; (8000c20 <MX_GPIO_Init+0x188>)
 8000bd8:	f000 fe0c 	bl	80017f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2100      	movs	r1, #0
 8000be0:	2008      	movs	r0, #8
 8000be2:	f000 fd20 	bl	8001626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000be6:	2008      	movs	r0, #8
 8000be8:	f000 fd39 	bl	800165e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2017      	movs	r0, #23
 8000bf2:	f000 fd18 	bl	8001626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bf6:	2017      	movs	r0, #23
 8000bf8:	f000 fd31 	bl	800165e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2028      	movs	r0, #40	; 0x28
 8000c02:	f000 fd10 	bl	8001626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c06:	2028      	movs	r0, #40	; 0x28
 8000c08:	f000 fd29 	bl	800165e <HAL_NVIC_EnableIRQ>

}
 8000c0c:	bf00      	nop
 8000c0e:	3720      	adds	r7, #32
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40011000 	.word	0x40011000
 8000c1c:	40010800 	.word	0x40010800
 8000c20:	40010c00 	.word	0x40010c00
 8000c24:	10210000 	.word	0x10210000

08000c28 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//----------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_2)			// If detect External interrupt from PA2
 8000c32:	88fb      	ldrh	r3, [r7, #6]
 8000c34:	2b04      	cmp	r3, #4
 8000c36:	d102      	bne.n	8000c3e <HAL_GPIO_EXTI_Callback+0x16>
  {
    IRQ_Callback();					// Call Callback
 8000c38:	f7ff fb3e 	bl	80002b8 <IRQ_Callback>
  }
  else
  {
    __NOP();
  }
}
 8000c3c:	e000      	b.n	8000c40 <HAL_GPIO_EXTI_Callback+0x18>
    __NOP();
 8000c3e:	bf00      	nop
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_UART_RxCpltCallback>:

//----------------------------------------------------------------------------------------
// If data received (Received 1 bytes)        Define in: HAL_UART_Receive_IT(&huart1, str, 1);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)											// Which uart generate Callback function
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <HAL_UART_RxCpltCallback+0x60>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d123      	bne.n	8000ca0 <HAL_UART_RxCpltCallback+0x58>
	{
		if((str[0] == '\0') || (rx_data_counter >= sizeof(uart_rx_data)))   		// Detect '\0' Null or  data too long
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <HAL_UART_RxCpltCallback+0x64>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d003      	beq.n	8000c68 <HAL_UART_RxCpltCallback+0x20>
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <HAL_UART_RxCpltCallback+0x68>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b31      	cmp	r3, #49	; 0x31
 8000c66:	d906      	bls.n	8000c76 <HAL_UART_RxCpltCallback+0x2e>
		{
			flag_command_received = true;                          // Data is ready
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_UART_RxCpltCallback+0x6c>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
			rx_data_counter = 0;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_UART_RxCpltCallback+0x68>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
			rx_data_counter ++;
		}
	}
}
 8000c74:	e014      	b.n	8000ca0 <HAL_UART_RxCpltCallback+0x58>
			flag_command_received = false;							// Receive data
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_UART_RxCpltCallback+0x6c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_UART_RxCpltCallback+0x68>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <HAL_UART_RxCpltCallback+0x64>)
 8000c84:	7819      	ldrb	r1, [r3, #0]
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <HAL_UART_RxCpltCallback+0x70>)
 8000c88:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4907      	ldr	r1, [pc, #28]	; (8000cac <HAL_UART_RxCpltCallback+0x64>)
 8000c8e:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <HAL_UART_RxCpltCallback+0x60>)
 8000c90:	f003 fa85 	bl	800419e <HAL_UART_Receive_IT>
			rx_data_counter ++;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_UART_RxCpltCallback+0x68>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <HAL_UART_RxCpltCallback+0x68>)
 8000c9e:	701a      	strb	r2, [r3, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000598 	.word	0x20000598
 8000cac:	200004e8 	.word	0x200004e8
 8000cb0:	200004ea 	.word	0x200004ea
 8000cb4:	200004e9 	.word	0x200004e9
 8000cb8:	200004b4 	.word	0x200004b4

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>
	...

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_MspInit+0x5c>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <HAL_MspInit+0x5c>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6193      	str	r3, [r2, #24]
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_MspInit+0x5c>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_MspInit+0x5c>)
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <HAL_MspInit+0x5c>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	61d3      	str	r3, [r2, #28]
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <HAL_MspInit+0x5c>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_MspInit+0x60>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_MspInit+0x60>)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40010000 	.word	0x40010000

08000d2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a15      	ldr	r2, [pc, #84]	; (8000d9c <HAL_I2C_MspInit+0x70>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d123      	bne.n	8000d94 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <HAL_I2C_MspInit+0x74>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a13      	ldr	r2, [pc, #76]	; (8000da0 <HAL_I2C_MspInit+0x74>)
 8000d52:	f043 0308 	orr.w	r3, r3, #8
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <HAL_I2C_MspInit+0x74>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0308 	and.w	r3, r3, #8
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d64:	23c0      	movs	r3, #192	; 0xc0
 8000d66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d68:	2312      	movs	r3, #18
 8000d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	4619      	mov	r1, r3
 8000d76:	480b      	ldr	r0, [pc, #44]	; (8000da4 <HAL_I2C_MspInit+0x78>)
 8000d78:	f000 fd3c 	bl	80017f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <HAL_I2C_MspInit+0x74>)
 8000d7e:	69db      	ldr	r3, [r3, #28]
 8000d80:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <HAL_I2C_MspInit+0x74>)
 8000d82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d86:	61d3      	str	r3, [r2, #28]
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <HAL_I2C_MspInit+0x74>)
 8000d8a:	69db      	ldr	r3, [r3, #28]
 8000d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d94:	bf00      	nop
 8000d96:	3720      	adds	r7, #32
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40005400 	.word	0x40005400
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40010c00 	.word	0x40010c00

08000da8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a1b      	ldr	r2, [pc, #108]	; (8000e30 <HAL_SPI_MspInit+0x88>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d12f      	bne.n	8000e28 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <HAL_SPI_MspInit+0x8c>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	4a19      	ldr	r2, [pc, #100]	; (8000e34 <HAL_SPI_MspInit+0x8c>)
 8000dce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dd2:	6193      	str	r3, [r2, #24]
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_SPI_MspInit+0x8c>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_SPI_MspInit+0x8c>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	4a13      	ldr	r2, [pc, #76]	; (8000e34 <HAL_SPI_MspInit+0x8c>)
 8000de6:	f043 0304 	orr.w	r3, r3, #4
 8000dea:	6193      	str	r3, [r2, #24]
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_SPI_MspInit+0x8c>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000df8:	23a0      	movs	r3, #160	; 0xa0
 8000dfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480b      	ldr	r0, [pc, #44]	; (8000e38 <HAL_SPI_MspInit+0x90>)
 8000e0c:	f000 fcf2 	bl	80017f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e10:	2340      	movs	r3, #64	; 0x40
 8000e12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	4619      	mov	r1, r3
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <HAL_SPI_MspInit+0x90>)
 8000e24:	f000 fce6 	bl	80017f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e28:	bf00      	nop
 8000e2a:	3720      	adds	r7, #32
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40013000 	.word	0x40013000
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40010800 	.word	0x40010800

08000e3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <HAL_TIM_Base_MspInit+0x44>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d113      	bne.n	8000e76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <HAL_TIM_Base_MspInit+0x48>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	4a0c      	ldr	r2, [pc, #48]	; (8000e84 <HAL_TIM_Base_MspInit+0x48>)
 8000e54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e58:	6193      	str	r3, [r2, #24]
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_TIM_Base_MspInit+0x48>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2019      	movs	r0, #25
 8000e6c:	f000 fbdb 	bl	8001626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e70:	2019      	movs	r0, #25
 8000e72:	f000 fbf4 	bl	800165e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40012c00 	.word	0x40012c00
 8000e84:	40021000 	.word	0x40021000

08000e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0318 	add.w	r3, r7, #24
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a3c      	ldr	r2, [pc, #240]	; (8000f94 <HAL_UART_MspInit+0x10c>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d13a      	bne.n	8000f1e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ea8:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <HAL_UART_MspInit+0x110>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a3a      	ldr	r2, [pc, #232]	; (8000f98 <HAL_UART_MspInit+0x110>)
 8000eae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b38      	ldr	r3, [pc, #224]	; (8000f98 <HAL_UART_MspInit+0x110>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec0:	4b35      	ldr	r3, [pc, #212]	; (8000f98 <HAL_UART_MspInit+0x110>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a34      	ldr	r2, [pc, #208]	; (8000f98 <HAL_UART_MspInit+0x110>)
 8000ec6:	f043 0304 	orr.w	r3, r3, #4
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b32      	ldr	r3, [pc, #200]	; (8000f98 <HAL_UART_MspInit+0x110>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 0318 	add.w	r3, r7, #24
 8000eea:	4619      	mov	r1, r3
 8000eec:	482b      	ldr	r0, [pc, #172]	; (8000f9c <HAL_UART_MspInit+0x114>)
 8000eee:	f000 fc81 	bl	80017f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0318 	add.w	r3, r7, #24
 8000f04:	4619      	mov	r1, r3
 8000f06:	4825      	ldr	r0, [pc, #148]	; (8000f9c <HAL_UART_MspInit+0x114>)
 8000f08:	f000 fc74 	bl	80017f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2101      	movs	r1, #1
 8000f10:	2025      	movs	r0, #37	; 0x25
 8000f12:	f000 fb88 	bl	8001626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f16:	2025      	movs	r0, #37	; 0x25
 8000f18:	f000 fba1 	bl	800165e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f1c:	e036      	b.n	8000f8c <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a1f      	ldr	r2, [pc, #124]	; (8000fa0 <HAL_UART_MspInit+0x118>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d131      	bne.n	8000f8c <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <HAL_UART_MspInit+0x110>)
 8000f2a:	69db      	ldr	r3, [r3, #28]
 8000f2c:	4a1a      	ldr	r2, [pc, #104]	; (8000f98 <HAL_UART_MspInit+0x110>)
 8000f2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f32:	61d3      	str	r3, [r2, #28]
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <HAL_UART_MspInit+0x110>)
 8000f36:	69db      	ldr	r3, [r3, #28]
 8000f38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_UART_MspInit+0x110>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <HAL_UART_MspInit+0x110>)
 8000f46:	f043 0308 	orr.w	r3, r3, #8
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_UART_MspInit+0x110>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f003 0308 	and.w	r3, r3, #8
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f66:	f107 0318 	add.w	r3, r7, #24
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <HAL_UART_MspInit+0x11c>)
 8000f6e:	f000 fc41 	bl	80017f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 0318 	add.w	r3, r7, #24
 8000f84:	4619      	mov	r1, r3
 8000f86:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <HAL_UART_MspInit+0x11c>)
 8000f88:	f000 fc34 	bl	80017f4 <HAL_GPIO_Init>
}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40013800 	.word	0x40013800
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010800 	.word	0x40010800
 8000fa0:	40004800 	.word	0x40004800
 8000fa4:	40010c00 	.word	0x40010c00

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <NMI_Handler+0x4>

08000fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <HardFault_Handler+0x4>

08000fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <MemManage_Handler+0x4>

08000fba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <BusFault_Handler+0x4>

08000fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <UsageFault_Handler+0x4>

08000fc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr

08000fd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr

08000fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr

08000fea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fee:	f000 fa03 	bl	80013f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000ffa:	2004      	movs	r0, #4
 8000ffc:	f000 fdc6 	bl	8001b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Detect "DOWN" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8))						// If interrupt from GPIOA PIN_8
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <EXTI9_5_IRQHandler+0x38>)
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00c      	beq.n	800102e <EXTI9_5_IRQHandler+0x2a>
	{
		if(button_processed_status == doesent_detected)
 8001014:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <EXTI9_5_IRQHandler+0x3c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <EXTI9_5_IRQHandler+0x40>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	429a      	cmp	r2, r3
 8001020:	d105      	bne.n	800102e <EXTI9_5_IRQHandler+0x2a>
		{
			HAL_TIM_Base_Start_IT(&htim1);							// Turn on Timer 1
 8001022:	4809      	ldr	r0, [pc, #36]	; (8001048 <EXTI9_5_IRQHandler+0x44>)
 8001024:	f002 fbfa 	bl	800381c <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <EXTI9_5_IRQHandler+0x40>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800102e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001032:	f000 fdab 	bl	8001b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40010400 	.word	0x40010400
 8001040:	20000008 	.word	0x20000008
 8001044:	2000000c 	.word	0x2000000c
 8001048:	200005dc 	.word	0x200005dc

0800104c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	/* This timmer start by external interrupts from buttons:
	 * EXTI9_5_IRQHandler and EXTI15_10_IRQHandler
	 */

	if(button_processed_status == detected)							// If pressed button was detected by external interrupts
 8001050:	4b5d      	ldr	r3, [pc, #372]	; (80011c8 <TIM1_UP_IRQHandler+0x17c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	f040 80b2 	bne.w	80011be <TIM1_UP_IRQHandler+0x172>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)    			// If "UP" button was pressed
 800105a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800105e:	485b      	ldr	r0, [pc, #364]	; (80011cc <TIM1_UP_IRQHandler+0x180>)
 8001060:	f000 fd4c 	bl	8001afc <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d13b      	bne.n	80010e2 <TIM1_UP_IRQHandler+0x96>
		{
			/*
			 * If every time when timer interrupt, delay_time will increment
			 * for avoid bounce button
			 */
			delay_time++;
 800106a:	4b59      	ldr	r3, [pc, #356]	; (80011d0 <TIM1_UP_IRQHandler+0x184>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3301      	adds	r3, #1
 8001070:	4a57      	ldr	r2, [pc, #348]	; (80011d0 <TIM1_UP_IRQHandler+0x184>)
 8001072:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8001074:	4b57      	ldr	r3, [pc, #348]	; (80011d4 <TIM1_UP_IRQHandler+0x188>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b55      	ldr	r3, [pc, #340]	; (80011d0 <TIM1_UP_IRQHandler+0x184>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	429a      	cmp	r2, r3
 8001080:	dc2f      	bgt.n	80010e2 <TIM1_UP_IRQHandler+0x96>
			{
				delay_time = 0;
 8001082:	4b53      	ldr	r3, [pc, #332]	; (80011d0 <TIM1_UP_IRQHandler+0x184>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
				button_processed_status = 1;						// Flag for interrupts
 8001088:	4b4f      	ldr	r3, [pc, #316]	; (80011c8 <TIM1_UP_IRQHandler+0x17c>)
 800108a:	2201      	movs	r2, #1
 800108c:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 800108e:	4852      	ldr	r0, [pc, #328]	; (80011d8 <TIM1_UP_IRQHandler+0x18c>)
 8001090:	f002 fc16 	bl	80038c0 <HAL_TIM_Base_Stop_IT>

				if(utton_enter_pressed_flag == 0)					// If menu doesen't enter
 8001094:	4b51      	ldr	r3, [pc, #324]	; (80011dc <TIM1_UP_IRQHandler+0x190>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d122      	bne.n	80010e2 <TIM1_UP_IRQHandler+0x96>
				{
					switch(state_get())
 800109c:	f000 f924 	bl	80012e8 <state_get>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d81a      	bhi.n	80010dc <TIM1_UP_IRQHandler+0x90>
 80010a6:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <TIM1_UP_IRQHandler+0x60>)
 80010a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ac:	080010bd 	.word	0x080010bd
 80010b0:	080010c5 	.word	0x080010c5
 80010b4:	080010cd 	.word	0x080010cd
 80010b8:	080010d5 	.word	0x080010d5
					{
						case ST_1:
							state_set(ST_4);
 80010bc:	2003      	movs	r0, #3
 80010be:	f000 f91f 	bl	8001300 <state_set>
							break;
 80010c2:	e00b      	b.n	80010dc <TIM1_UP_IRQHandler+0x90>
						case ST_2:
							state_set(ST_1);
 80010c4:	2000      	movs	r0, #0
 80010c6:	f000 f91b 	bl	8001300 <state_set>
							break;
 80010ca:	e007      	b.n	80010dc <TIM1_UP_IRQHandler+0x90>
						case ST_3:
							state_set(ST_2);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f000 f917 	bl	8001300 <state_set>
							break;
 80010d2:	e003      	b.n	80010dc <TIM1_UP_IRQHandler+0x90>
						case ST_4:
							state_set(ST_3);
 80010d4:	2002      	movs	r0, #2
 80010d6:	f000 f913 	bl	8001300 <state_set>
						break;
 80010da:	bf00      	nop
					}
					button_was_pressed = true;
 80010dc:	4b40      	ldr	r3, [pc, #256]	; (80011e0 <TIM1_UP_IRQHandler+0x194>)
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0)   			 	// If "DOWN" button was pressed
 80010e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e6:	483f      	ldr	r0, [pc, #252]	; (80011e4 <TIM1_UP_IRQHandler+0x198>)
 80010e8:	f000 fd08 	bl	8001afc <HAL_GPIO_ReadPin>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d13b      	bne.n	800116a <TIM1_UP_IRQHandler+0x11e>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 80010f2:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <TIM1_UP_IRQHandler+0x184>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	3301      	adds	r3, #1
 80010f8:	4a35      	ldr	r2, [pc, #212]	; (80011d0 <TIM1_UP_IRQHandler+0x184>)
 80010fa:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 80010fc:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <TIM1_UP_IRQHandler+0x188>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b33      	ldr	r3, [pc, #204]	; (80011d0 <TIM1_UP_IRQHandler+0x184>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	429a      	cmp	r2, r3
 8001108:	dc2f      	bgt.n	800116a <TIM1_UP_IRQHandler+0x11e>
			{
				delay_time = 0;
 800110a:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <TIM1_UP_IRQHandler+0x184>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
				button_processed_status = 1;						// Flag for interrupts
 8001110:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <TIM1_UP_IRQHandler+0x17c>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8001116:	4830      	ldr	r0, [pc, #192]	; (80011d8 <TIM1_UP_IRQHandler+0x18c>)
 8001118:	f002 fbd2 	bl	80038c0 <HAL_TIM_Base_Stop_IT>

				if(utton_enter_pressed_flag == 0)					// If menu doesen't enter
 800111c:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <TIM1_UP_IRQHandler+0x190>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d122      	bne.n	800116a <TIM1_UP_IRQHandler+0x11e>
				{
					switch(state_get())
 8001124:	f000 f8e0 	bl	80012e8 <state_get>
 8001128:	4603      	mov	r3, r0
 800112a:	2b03      	cmp	r3, #3
 800112c:	d81a      	bhi.n	8001164 <TIM1_UP_IRQHandler+0x118>
 800112e:	a201      	add	r2, pc, #4	; (adr r2, 8001134 <TIM1_UP_IRQHandler+0xe8>)
 8001130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001134:	08001145 	.word	0x08001145
 8001138:	0800114d 	.word	0x0800114d
 800113c:	08001155 	.word	0x08001155
 8001140:	0800115d 	.word	0x0800115d
					{
						case ST_1:
							state_set(ST_2);
 8001144:	2001      	movs	r0, #1
 8001146:	f000 f8db 	bl	8001300 <state_set>
							break;
 800114a:	e00b      	b.n	8001164 <TIM1_UP_IRQHandler+0x118>
						case ST_2:
							state_set(ST_3);
 800114c:	2002      	movs	r0, #2
 800114e:	f000 f8d7 	bl	8001300 <state_set>
							break;
 8001152:	e007      	b.n	8001164 <TIM1_UP_IRQHandler+0x118>
						case ST_3:
							state_set(ST_4);
 8001154:	2003      	movs	r0, #3
 8001156:	f000 f8d3 	bl	8001300 <state_set>
							break;
 800115a:	e003      	b.n	8001164 <TIM1_UP_IRQHandler+0x118>
						case ST_4:
							state_set(ST_1);
 800115c:	2000      	movs	r0, #0
 800115e:	f000 f8cf 	bl	8001300 <state_set>
							break;
 8001162:	bf00      	nop
					}
					button_was_pressed = true;
 8001164:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <TIM1_UP_IRQHandler+0x194>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0)   			// If "ENTER" button was pressed
 800116a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800116e:	4817      	ldr	r0, [pc, #92]	; (80011cc <TIM1_UP_IRQHandler+0x180>)
 8001170:	f000 fcc4 	bl	8001afc <HAL_GPIO_ReadPin>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d121      	bne.n	80011be <TIM1_UP_IRQHandler+0x172>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <TIM1_UP_IRQHandler+0x184>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	4a13      	ldr	r2, [pc, #76]	; (80011d0 <TIM1_UP_IRQHandler+0x184>)
 8001182:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <TIM1_UP_IRQHandler+0x188>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <TIM1_UP_IRQHandler+0x184>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	429a      	cmp	r2, r3
 8001190:	dc15      	bgt.n	80011be <TIM1_UP_IRQHandler+0x172>
			{
				delay_time = 0;
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <TIM1_UP_IRQHandler+0x184>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
				button_processed_status = 1;
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <TIM1_UP_IRQHandler+0x17c>)
 800119a:	2201      	movs	r2, #1
 800119c:	601a      	str	r2, [r3, #0]

				button_was_pressed = true;
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <TIM1_UP_IRQHandler+0x194>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
				utton_enter_pressed_flag = !utton_enter_pressed_flag;
 80011a4:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <TIM1_UP_IRQHandler+0x190>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	bf0c      	ite	eq
 80011ac:	2301      	moveq	r3, #1
 80011ae:	2300      	movne	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <TIM1_UP_IRQHandler+0x190>)
 80011b6:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 80011b8:	4807      	ldr	r0, [pc, #28]	; (80011d8 <TIM1_UP_IRQHandler+0x18c>)
 80011ba:	f002 fb81 	bl	80038c0 <HAL_TIM_Base_Stop_IT>
		}

	}

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011be:	4806      	ldr	r0, [pc, #24]	; (80011d8 <TIM1_UP_IRQHandler+0x18c>)
 80011c0:	f002 fbac 	bl	800391c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	2000000c 	.word	0x2000000c
 80011cc:	40010c00 	.word	0x40010c00
 80011d0:	200004ec 	.word	0x200004ec
 80011d4:	20000009 	.word	0x20000009
 80011d8:	200005dc 	.word	0x200005dc
 80011dc:	200004f5 	.word	0x200004f5
 80011e0:	20000014 	.word	0x20000014
 80011e4:	40010800 	.word	0x40010800

080011e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <USART1_IRQHandler+0x10>)
 80011ee:	f003 f807 	bl	8004200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000598 	.word	0x20000598

080011fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	// Detect "UP" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))	// If interrupt from GPIOB PIN_14
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <EXTI15_10_IRQHandler+0x64>)
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00c      	beq.n	8001226 <EXTI15_10_IRQHandler+0x2a>
	{
		if(button_processed_status == doesent_detected)
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <EXTI15_10_IRQHandler+0x68>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <EXTI15_10_IRQHandler+0x6c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d105      	bne.n	8001226 <EXTI15_10_IRQHandler+0x2a>
		{
			HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 800121a:	4814      	ldr	r0, [pc, #80]	; (800126c <EXTI15_10_IRQHandler+0x70>)
 800121c:	f002 fafe 	bl	800381c <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <EXTI15_10_IRQHandler+0x6c>)
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
		}
	}

	// Detect "ENTER" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15))	// If interrupt from GPIOB PIN_15
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <EXTI15_10_IRQHandler+0x64>)
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00c      	beq.n	800124c <EXTI15_10_IRQHandler+0x50>
	{
		if(button_processed_status == doesent_detected)
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <EXTI15_10_IRQHandler+0x68>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <EXTI15_10_IRQHandler+0x6c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d105      	bne.n	800124c <EXTI15_10_IRQHandler+0x50>
		{
			HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8001240:	480a      	ldr	r0, [pc, #40]	; (800126c <EXTI15_10_IRQHandler+0x70>)
 8001242:	f002 faeb 	bl	800381c <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <EXTI15_10_IRQHandler+0x6c>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
		}
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800124c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001250:	f000 fc9c 	bl	8001b8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001254:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001258:	f000 fc98 	bl	8001b8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40010400 	.word	0x40010400
 8001264:	20000008 	.word	0x20000008
 8001268:	2000000c 	.word	0x2000000c
 800126c:	200005dc 	.word	0x200005dc

08001270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001278:	4a14      	ldr	r2, [pc, #80]	; (80012cc <_sbrk+0x5c>)
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <_sbrk+0x60>)
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <_sbrk+0x64>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d102      	bne.n	8001292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <_sbrk+0x64>)
 800128e:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <_sbrk+0x68>)
 8001290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <_sbrk+0x64>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	429a      	cmp	r2, r3
 800129e:	d207      	bcs.n	80012b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a0:	f003 fbd6 	bl	8004a50 <__errno>
 80012a4:	4603      	mov	r3, r0
 80012a6:	220c      	movs	r2, #12
 80012a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ae:	e009      	b.n	80012c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <_sbrk+0x64>)
 80012c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012c2:	68fb      	ldr	r3, [r7, #12]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20005000 	.word	0x20005000
 80012d0:	00000400 	.word	0x00000400
 80012d4:	200004f0 	.word	0x200004f0
 80012d8:	20000690 	.word	0x20000690

080012dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <state_get>:
int pressed_batton_counter = 0;


// ----------------------------------------------------------------------------------------
STATE_t state_get(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
	return state;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <state_get+0x14>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b2db      	uxtb	r3, r3
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	200004f4 	.word	0x200004f4

08001300 <state_set>:

// ----------------------------------------------------------------------------------------
void state_set(STATE_t new_state)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
	state = new_state;
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <state_set+0x1c>)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	7013      	strb	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	200004f4 	.word	0x200004f4

08001320 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001320:	480c      	ldr	r0, [pc, #48]	; (8001354 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001322:	490d      	ldr	r1, [pc, #52]	; (8001358 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001324:	4a0d      	ldr	r2, [pc, #52]	; (800135c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001328:	e002      	b.n	8001330 <LoopCopyDataInit>

0800132a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800132c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132e:	3304      	adds	r3, #4

08001330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001334:	d3f9      	bcc.n	800132a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001336:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001338:	4c0a      	ldr	r4, [pc, #40]	; (8001364 <LoopFillZerobss+0x22>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800133c:	e001      	b.n	8001342 <LoopFillZerobss>

0800133e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001340:	3204      	adds	r2, #4

08001342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001344:	d3fb      	bcc.n	800133e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001346:	f7ff ffc9 	bl	80012dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800134a:	f003 fb87 	bl	8004a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800134e:	f7ff fa29 	bl	80007a4 <main>
  bx lr
 8001352:	4770      	bx	lr
  ldr r0, =_sdata
 8001354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001358:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800135c:	08004e0c 	.word	0x08004e0c
  ldr r2, =_sbss
 8001360:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001364:	20000690 	.word	0x20000690

08001368 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001368:	e7fe      	b.n	8001368 <ADC1_2_IRQHandler>
	...

0800136c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_Init+0x28>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <HAL_Init+0x28>)
 8001376:	f043 0310 	orr.w	r3, r3, #16
 800137a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800137c:	2003      	movs	r0, #3
 800137e:	f000 f947 	bl	8001610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001382:	2000      	movs	r0, #0
 8001384:	f000 f808 	bl	8001398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001388:	f7ff fc9e 	bl	8000cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40022000 	.word	0x40022000

08001398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_InitTick+0x54>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_InitTick+0x58>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f95f 	bl	800167a <HAL_SYSTICK_Config>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e00e      	b.n	80013e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b0f      	cmp	r3, #15
 80013ca:	d80a      	bhi.n	80013e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013cc:	2200      	movs	r2, #0
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d4:	f000 f927 	bl	8001626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d8:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <HAL_InitTick+0x5c>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	e000      	b.n	80013e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000010 	.word	0x20000010
 80013f0:	2000001c 	.word	0x2000001c
 80013f4:	20000018 	.word	0x20000018

080013f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_IncTick+0x1c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_IncTick+0x20>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4a03      	ldr	r2, [pc, #12]	; (8001418 <HAL_IncTick+0x20>)
 800140a:	6013      	str	r3, [r2, #0]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	2000001c 	.word	0x2000001c
 8001418:	2000067c 	.word	0x2000067c

0800141c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b02      	ldr	r3, [pc, #8]	; (800142c <HAL_GetTick+0x10>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	2000067c 	.word	0x2000067c

08001430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001438:	f7ff fff0 	bl	800141c <HAL_GetTick>
 800143c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001448:	d005      	beq.n	8001456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_Delay+0x44>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001456:	bf00      	nop
 8001458:	f7ff ffe0 	bl	800141c <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	429a      	cmp	r2, r3
 8001466:	d8f7      	bhi.n	8001458 <HAL_Delay+0x28>
  {
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000001c 	.word	0x2000001c

08001478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014aa:	4a04      	ldr	r2, [pc, #16]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	60d3      	str	r3, [r2, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	db0b      	blt.n	8001506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	4906      	ldr	r1, [pc, #24]	; (8001510 <__NVIC_EnableIRQ+0x34>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	e000e100 	.word	0xe000e100

08001514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	db0a      	blt.n	800153e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	490c      	ldr	r1, [pc, #48]	; (8001560 <__NVIC_SetPriority+0x4c>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	0112      	lsls	r2, r2, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	440b      	add	r3, r1
 8001538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800153c:	e00a      	b.n	8001554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4908      	ldr	r1, [pc, #32]	; (8001564 <__NVIC_SetPriority+0x50>)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	3b04      	subs	r3, #4
 800154c:	0112      	lsls	r2, r2, #4
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	440b      	add	r3, r1
 8001552:	761a      	strb	r2, [r3, #24]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f1c3 0307 	rsb	r3, r3, #7
 8001582:	2b04      	cmp	r3, #4
 8001584:	bf28      	it	cs
 8001586:	2304      	movcs	r3, #4
 8001588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3304      	adds	r3, #4
 800158e:	2b06      	cmp	r3, #6
 8001590:	d902      	bls.n	8001598 <NVIC_EncodePriority+0x30>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3b03      	subs	r3, #3
 8001596:	e000      	b.n	800159a <NVIC_EncodePriority+0x32>
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43d9      	mvns	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	4313      	orrs	r3, r2
         );
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015dc:	d301      	bcc.n	80015e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015de:	2301      	movs	r3, #1
 80015e0:	e00f      	b.n	8001602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <SysTick_Config+0x40>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ea:	210f      	movs	r1, #15
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015f0:	f7ff ff90 	bl	8001514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <SysTick_Config+0x40>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <SysTick_Config+0x40>)
 80015fc:	2207      	movs	r2, #7
 80015fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	e000e010 	.word	0xe000e010

08001610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff2d 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001638:	f7ff ff42 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 800163c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	6978      	ldr	r0, [r7, #20]
 8001644:	f7ff ff90 	bl	8001568 <NVIC_EncodePriority>
 8001648:	4602      	mov	r2, r0
 800164a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff5f 	bl	8001514 <__NVIC_SetPriority>
}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff35 	bl	80014dc <__NVIC_EnableIRQ>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ffa2 	bl	80015cc <SysTick_Config>
 8001688:	4603      	mov	r3, r0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001692:	b480      	push	{r7}
 8001694:	b085      	sub	sp, #20
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d008      	beq.n	80016ba <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2204      	movs	r2, #4
 80016ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e020      	b.n	80016fc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 020e 	bic.w	r2, r2, #14
 80016c8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0201 	bic.w	r2, r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e2:	2101      	movs	r1, #1
 80016e4:	fa01 f202 	lsl.w	r2, r1, r2
 80016e8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
	...

08001708 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800171a:	2b02      	cmp	r3, #2
 800171c:	d005      	beq.n	800172a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2204      	movs	r2, #4
 8001722:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	e051      	b.n	80017ce <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 020e 	bic.w	r2, r2, #14
 8001738:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0201 	bic.w	r2, r2, #1
 8001748:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a22      	ldr	r2, [pc, #136]	; (80017d8 <HAL_DMA_Abort_IT+0xd0>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d029      	beq.n	80017a8 <HAL_DMA_Abort_IT+0xa0>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a20      	ldr	r2, [pc, #128]	; (80017dc <HAL_DMA_Abort_IT+0xd4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d022      	beq.n	80017a4 <HAL_DMA_Abort_IT+0x9c>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a1f      	ldr	r2, [pc, #124]	; (80017e0 <HAL_DMA_Abort_IT+0xd8>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d01a      	beq.n	800179e <HAL_DMA_Abort_IT+0x96>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a1d      	ldr	r2, [pc, #116]	; (80017e4 <HAL_DMA_Abort_IT+0xdc>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d012      	beq.n	8001798 <HAL_DMA_Abort_IT+0x90>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a1c      	ldr	r2, [pc, #112]	; (80017e8 <HAL_DMA_Abort_IT+0xe0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d00a      	beq.n	8001792 <HAL_DMA_Abort_IT+0x8a>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1a      	ldr	r2, [pc, #104]	; (80017ec <HAL_DMA_Abort_IT+0xe4>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d102      	bne.n	800178c <HAL_DMA_Abort_IT+0x84>
 8001786:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800178a:	e00e      	b.n	80017aa <HAL_DMA_Abort_IT+0xa2>
 800178c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001790:	e00b      	b.n	80017aa <HAL_DMA_Abort_IT+0xa2>
 8001792:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001796:	e008      	b.n	80017aa <HAL_DMA_Abort_IT+0xa2>
 8001798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179c:	e005      	b.n	80017aa <HAL_DMA_Abort_IT+0xa2>
 800179e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a2:	e002      	b.n	80017aa <HAL_DMA_Abort_IT+0xa2>
 80017a4:	2310      	movs	r3, #16
 80017a6:	e000      	b.n	80017aa <HAL_DMA_Abort_IT+0xa2>
 80017a8:	2301      	movs	r3, #1
 80017aa:	4a11      	ldr	r2, [pc, #68]	; (80017f0 <HAL_DMA_Abort_IT+0xe8>)
 80017ac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	4798      	blx	r3
    } 
  }
  return status;
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40020008 	.word	0x40020008
 80017dc:	4002001c 	.word	0x4002001c
 80017e0:	40020030 	.word	0x40020030
 80017e4:	40020044 	.word	0x40020044
 80017e8:	40020058 	.word	0x40020058
 80017ec:	4002006c 	.word	0x4002006c
 80017f0:	40020000 	.word	0x40020000

080017f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b08b      	sub	sp, #44	; 0x2c
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001806:	e169      	b.n	8001adc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001808:	2201      	movs	r2, #1
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	429a      	cmp	r2, r3
 8001822:	f040 8158 	bne.w	8001ad6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4a9a      	ldr	r2, [pc, #616]	; (8001a94 <HAL_GPIO_Init+0x2a0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d05e      	beq.n	80018ee <HAL_GPIO_Init+0xfa>
 8001830:	4a98      	ldr	r2, [pc, #608]	; (8001a94 <HAL_GPIO_Init+0x2a0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d875      	bhi.n	8001922 <HAL_GPIO_Init+0x12e>
 8001836:	4a98      	ldr	r2, [pc, #608]	; (8001a98 <HAL_GPIO_Init+0x2a4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d058      	beq.n	80018ee <HAL_GPIO_Init+0xfa>
 800183c:	4a96      	ldr	r2, [pc, #600]	; (8001a98 <HAL_GPIO_Init+0x2a4>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d86f      	bhi.n	8001922 <HAL_GPIO_Init+0x12e>
 8001842:	4a96      	ldr	r2, [pc, #600]	; (8001a9c <HAL_GPIO_Init+0x2a8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d052      	beq.n	80018ee <HAL_GPIO_Init+0xfa>
 8001848:	4a94      	ldr	r2, [pc, #592]	; (8001a9c <HAL_GPIO_Init+0x2a8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d869      	bhi.n	8001922 <HAL_GPIO_Init+0x12e>
 800184e:	4a94      	ldr	r2, [pc, #592]	; (8001aa0 <HAL_GPIO_Init+0x2ac>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d04c      	beq.n	80018ee <HAL_GPIO_Init+0xfa>
 8001854:	4a92      	ldr	r2, [pc, #584]	; (8001aa0 <HAL_GPIO_Init+0x2ac>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d863      	bhi.n	8001922 <HAL_GPIO_Init+0x12e>
 800185a:	4a92      	ldr	r2, [pc, #584]	; (8001aa4 <HAL_GPIO_Init+0x2b0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d046      	beq.n	80018ee <HAL_GPIO_Init+0xfa>
 8001860:	4a90      	ldr	r2, [pc, #576]	; (8001aa4 <HAL_GPIO_Init+0x2b0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d85d      	bhi.n	8001922 <HAL_GPIO_Init+0x12e>
 8001866:	2b12      	cmp	r3, #18
 8001868:	d82a      	bhi.n	80018c0 <HAL_GPIO_Init+0xcc>
 800186a:	2b12      	cmp	r3, #18
 800186c:	d859      	bhi.n	8001922 <HAL_GPIO_Init+0x12e>
 800186e:	a201      	add	r2, pc, #4	; (adr r2, 8001874 <HAL_GPIO_Init+0x80>)
 8001870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001874:	080018ef 	.word	0x080018ef
 8001878:	080018c9 	.word	0x080018c9
 800187c:	080018db 	.word	0x080018db
 8001880:	0800191d 	.word	0x0800191d
 8001884:	08001923 	.word	0x08001923
 8001888:	08001923 	.word	0x08001923
 800188c:	08001923 	.word	0x08001923
 8001890:	08001923 	.word	0x08001923
 8001894:	08001923 	.word	0x08001923
 8001898:	08001923 	.word	0x08001923
 800189c:	08001923 	.word	0x08001923
 80018a0:	08001923 	.word	0x08001923
 80018a4:	08001923 	.word	0x08001923
 80018a8:	08001923 	.word	0x08001923
 80018ac:	08001923 	.word	0x08001923
 80018b0:	08001923 	.word	0x08001923
 80018b4:	08001923 	.word	0x08001923
 80018b8:	080018d1 	.word	0x080018d1
 80018bc:	080018e5 	.word	0x080018e5
 80018c0:	4a79      	ldr	r2, [pc, #484]	; (8001aa8 <HAL_GPIO_Init+0x2b4>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d013      	beq.n	80018ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018c6:	e02c      	b.n	8001922 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	623b      	str	r3, [r7, #32]
          break;
 80018ce:	e029      	b.n	8001924 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	3304      	adds	r3, #4
 80018d6:	623b      	str	r3, [r7, #32]
          break;
 80018d8:	e024      	b.n	8001924 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	3308      	adds	r3, #8
 80018e0:	623b      	str	r3, [r7, #32]
          break;
 80018e2:	e01f      	b.n	8001924 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	330c      	adds	r3, #12
 80018ea:	623b      	str	r3, [r7, #32]
          break;
 80018ec:	e01a      	b.n	8001924 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d102      	bne.n	80018fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018f6:	2304      	movs	r3, #4
 80018f8:	623b      	str	r3, [r7, #32]
          break;
 80018fa:	e013      	b.n	8001924 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d105      	bne.n	8001910 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001904:	2308      	movs	r3, #8
 8001906:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	611a      	str	r2, [r3, #16]
          break;
 800190e:	e009      	b.n	8001924 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001910:	2308      	movs	r3, #8
 8001912:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	615a      	str	r2, [r3, #20]
          break;
 800191a:	e003      	b.n	8001924 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800191c:	2300      	movs	r3, #0
 800191e:	623b      	str	r3, [r7, #32]
          break;
 8001920:	e000      	b.n	8001924 <HAL_GPIO_Init+0x130>
          break;
 8001922:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	2bff      	cmp	r3, #255	; 0xff
 8001928:	d801      	bhi.n	800192e <HAL_GPIO_Init+0x13a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	e001      	b.n	8001932 <HAL_GPIO_Init+0x13e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3304      	adds	r3, #4
 8001932:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2bff      	cmp	r3, #255	; 0xff
 8001938:	d802      	bhi.n	8001940 <HAL_GPIO_Init+0x14c>
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	e002      	b.n	8001946 <HAL_GPIO_Init+0x152>
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	3b08      	subs	r3, #8
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	210f      	movs	r1, #15
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	401a      	ands	r2, r3
 8001958:	6a39      	ldr	r1, [r7, #32]
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	431a      	orrs	r2, r3
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 80b1 	beq.w	8001ad6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001974:	4b4d      	ldr	r3, [pc, #308]	; (8001aac <HAL_GPIO_Init+0x2b8>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a4c      	ldr	r2, [pc, #304]	; (8001aac <HAL_GPIO_Init+0x2b8>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b4a      	ldr	r3, [pc, #296]	; (8001aac <HAL_GPIO_Init+0x2b8>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800198c:	4a48      	ldr	r2, [pc, #288]	; (8001ab0 <HAL_GPIO_Init+0x2bc>)
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	089b      	lsrs	r3, r3, #2
 8001992:	3302      	adds	r3, #2
 8001994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001998:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	220f      	movs	r2, #15
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4013      	ands	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a40      	ldr	r2, [pc, #256]	; (8001ab4 <HAL_GPIO_Init+0x2c0>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d013      	beq.n	80019e0 <HAL_GPIO_Init+0x1ec>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a3f      	ldr	r2, [pc, #252]	; (8001ab8 <HAL_GPIO_Init+0x2c4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d00d      	beq.n	80019dc <HAL_GPIO_Init+0x1e8>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a3e      	ldr	r2, [pc, #248]	; (8001abc <HAL_GPIO_Init+0x2c8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d007      	beq.n	80019d8 <HAL_GPIO_Init+0x1e4>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a3d      	ldr	r2, [pc, #244]	; (8001ac0 <HAL_GPIO_Init+0x2cc>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d101      	bne.n	80019d4 <HAL_GPIO_Init+0x1e0>
 80019d0:	2303      	movs	r3, #3
 80019d2:	e006      	b.n	80019e2 <HAL_GPIO_Init+0x1ee>
 80019d4:	2304      	movs	r3, #4
 80019d6:	e004      	b.n	80019e2 <HAL_GPIO_Init+0x1ee>
 80019d8:	2302      	movs	r3, #2
 80019da:	e002      	b.n	80019e2 <HAL_GPIO_Init+0x1ee>
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <HAL_GPIO_Init+0x1ee>
 80019e0:	2300      	movs	r3, #0
 80019e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e4:	f002 0203 	and.w	r2, r2, #3
 80019e8:	0092      	lsls	r2, r2, #2
 80019ea:	4093      	lsls	r3, r2
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019f2:	492f      	ldr	r1, [pc, #188]	; (8001ab0 <HAL_GPIO_Init+0x2bc>)
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	3302      	adds	r3, #2
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	492c      	ldr	r1, [pc, #176]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	4928      	ldr	r1, [pc, #160]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a34:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	4922      	ldr	r1, [pc, #136]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
 8001a40:	e006      	b.n	8001a50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	491e      	ldr	r1, [pc, #120]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d006      	beq.n	8001a6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	4918      	ldr	r1, [pc, #96]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]
 8001a68:	e006      	b.n	8001a78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	4914      	ldr	r1, [pc, #80]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d021      	beq.n	8001ac8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	490e      	ldr	r1, [pc, #56]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	60cb      	str	r3, [r1, #12]
 8001a90:	e021      	b.n	8001ad6 <HAL_GPIO_Init+0x2e2>
 8001a92:	bf00      	nop
 8001a94:	10320000 	.word	0x10320000
 8001a98:	10310000 	.word	0x10310000
 8001a9c:	10220000 	.word	0x10220000
 8001aa0:	10210000 	.word	0x10210000
 8001aa4:	10120000 	.word	0x10120000
 8001aa8:	10110000 	.word	0x10110000
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40010000 	.word	0x40010000
 8001ab4:	40010800 	.word	0x40010800
 8001ab8:	40010c00 	.word	0x40010c00
 8001abc:	40011000 	.word	0x40011000
 8001ac0:	40011400 	.word	0x40011400
 8001ac4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_GPIO_Init+0x304>)
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	4909      	ldr	r1, [pc, #36]	; (8001af8 <HAL_GPIO_Init+0x304>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	3301      	adds	r3, #1
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f47f ae8e 	bne.w	8001808 <HAL_GPIO_Init+0x14>
  }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	372c      	adds	r7, #44	; 0x2c
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	40010400 	.word	0x40010400

08001afc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	e001      	b.n	8001b1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	807b      	strh	r3, [r7, #2]
 8001b36:	4613      	mov	r3, r2
 8001b38:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b3a:	787b      	ldrb	r3, [r7, #1]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b40:	887a      	ldrh	r2, [r7, #2]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b46:	e003      	b.n	8001b50 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b48:	887b      	ldrh	r3, [r7, #2]
 8001b4a:	041a      	lsls	r2, r3, #16
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	611a      	str	r2, [r3, #16]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b085      	sub	sp, #20
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	460b      	mov	r3, r1
 8001b64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b6c:	887a      	ldrh	r2, [r7, #2]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	041a      	lsls	r2, r3, #16
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	887b      	ldrh	r3, [r7, #2]
 8001b7a:	400b      	ands	r3, r1
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	611a      	str	r2, [r3, #16]
}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b98:	695a      	ldr	r2, [r3, #20]
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d006      	beq.n	8001bb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff f83c 	bl	8000c28 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40010400 	.word	0x40010400

08001bbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e12b      	b.n	8001e26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff f8a2 	bl	8000d2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2224      	movs	r2, #36	; 0x24
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0201 	bic.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c20:	f000 fffa 	bl	8002c18 <HAL_RCC_GetPCLK1Freq>
 8001c24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	4a81      	ldr	r2, [pc, #516]	; (8001e30 <HAL_I2C_Init+0x274>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d807      	bhi.n	8001c40 <HAL_I2C_Init+0x84>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4a80      	ldr	r2, [pc, #512]	; (8001e34 <HAL_I2C_Init+0x278>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	bf94      	ite	ls
 8001c38:	2301      	movls	r3, #1
 8001c3a:	2300      	movhi	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	e006      	b.n	8001c4e <HAL_I2C_Init+0x92>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4a7d      	ldr	r2, [pc, #500]	; (8001e38 <HAL_I2C_Init+0x27c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	bf94      	ite	ls
 8001c48:	2301      	movls	r3, #1
 8001c4a:	2300      	movhi	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e0e7      	b.n	8001e26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4a78      	ldr	r2, [pc, #480]	; (8001e3c <HAL_I2C_Init+0x280>)
 8001c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5e:	0c9b      	lsrs	r3, r3, #18
 8001c60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	4a6a      	ldr	r2, [pc, #424]	; (8001e30 <HAL_I2C_Init+0x274>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d802      	bhi.n	8001c90 <HAL_I2C_Init+0xd4>
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	e009      	b.n	8001ca4 <HAL_I2C_Init+0xe8>
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	4a69      	ldr	r2, [pc, #420]	; (8001e40 <HAL_I2C_Init+0x284>)
 8001c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca0:	099b      	lsrs	r3, r3, #6
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	495c      	ldr	r1, [pc, #368]	; (8001e30 <HAL_I2C_Init+0x274>)
 8001cc0:	428b      	cmp	r3, r1
 8001cc2:	d819      	bhi.n	8001cf8 <HAL_I2C_Init+0x13c>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1e59      	subs	r1, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cd2:	1c59      	adds	r1, r3, #1
 8001cd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001cd8:	400b      	ands	r3, r1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00a      	beq.n	8001cf4 <HAL_I2C_Init+0x138>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1e59      	subs	r1, r3, #1
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cec:	3301      	adds	r3, #1
 8001cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf2:	e051      	b.n	8001d98 <HAL_I2C_Init+0x1dc>
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	e04f      	b.n	8001d98 <HAL_I2C_Init+0x1dc>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d111      	bne.n	8001d24 <HAL_I2C_Init+0x168>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1e58      	subs	r0, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	440b      	add	r3, r1
 8001d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d12:	3301      	adds	r3, #1
 8001d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	bf0c      	ite	eq
 8001d1c:	2301      	moveq	r3, #1
 8001d1e:	2300      	movne	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	e012      	b.n	8001d4a <HAL_I2C_Init+0x18e>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	1e58      	subs	r0, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6859      	ldr	r1, [r3, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	0099      	lsls	r1, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	bf0c      	ite	eq
 8001d44:	2301      	moveq	r3, #1
 8001d46:	2300      	movne	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_I2C_Init+0x196>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e022      	b.n	8001d98 <HAL_I2C_Init+0x1dc>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10e      	bne.n	8001d78 <HAL_I2C_Init+0x1bc>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1e58      	subs	r0, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6859      	ldr	r1, [r3, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	440b      	add	r3, r1
 8001d68:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d76:	e00f      	b.n	8001d98 <HAL_I2C_Init+0x1dc>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	1e58      	subs	r0, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6859      	ldr	r1, [r3, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	0099      	lsls	r1, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	6809      	ldr	r1, [r1, #0]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69da      	ldr	r2, [r3, #28]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6911      	ldr	r1, [r2, #16]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	68d2      	ldr	r2, [r2, #12]
 8001dd2:	4311      	orrs	r1, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695a      	ldr	r2, [r3, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2220      	movs	r2, #32
 8001e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	000186a0 	.word	0x000186a0
 8001e34:	001e847f 	.word	0x001e847f
 8001e38:	003d08ff 	.word	0x003d08ff
 8001e3c:	431bde83 	.word	0x431bde83
 8001e40:	10624dd3 	.word	0x10624dd3

08001e44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af02      	add	r7, sp, #8
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	4608      	mov	r0, r1
 8001e4e:	4611      	mov	r1, r2
 8001e50:	461a      	mov	r2, r3
 8001e52:	4603      	mov	r3, r0
 8001e54:	817b      	strh	r3, [r7, #10]
 8001e56:	460b      	mov	r3, r1
 8001e58:	813b      	strh	r3, [r7, #8]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e5e:	f7ff fadd 	bl	800141c <HAL_GetTick>
 8001e62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b20      	cmp	r3, #32
 8001e6e:	f040 80d9 	bne.w	8002024 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	2319      	movs	r3, #25
 8001e78:	2201      	movs	r2, #1
 8001e7a:	496d      	ldr	r1, [pc, #436]	; (8002030 <HAL_I2C_Mem_Write+0x1ec>)
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 f971 	bl	8002164 <I2C_WaitOnFlagUntilTimeout>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e0cc      	b.n	8002026 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <HAL_I2C_Mem_Write+0x56>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e0c5      	b.n	8002026 <HAL_I2C_Mem_Write+0x1e2>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d007      	beq.n	8001ec0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ece:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2221      	movs	r2, #33	; 0x21
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2240      	movs	r2, #64	; 0x40
 8001edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6a3a      	ldr	r2, [r7, #32]
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4a4d      	ldr	r2, [pc, #308]	; (8002034 <HAL_I2C_Mem_Write+0x1f0>)
 8001f00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f02:	88f8      	ldrh	r0, [r7, #6]
 8001f04:	893a      	ldrh	r2, [r7, #8]
 8001f06:	8979      	ldrh	r1, [r7, #10]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	9301      	str	r3, [sp, #4]
 8001f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	4603      	mov	r3, r0
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 f890 	bl	8002038 <I2C_RequestMemoryWrite>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d052      	beq.n	8001fc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e081      	b.n	8002026 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f9f2 	bl	8002310 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00d      	beq.n	8001f4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d107      	bne.n	8001f4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e06b      	b.n	8002026 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	781a      	ldrb	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	3b01      	subs	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d11b      	bne.n	8001fc4 <HAL_I2C_Mem_Write+0x180>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d017      	beq.n	8001fc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	781a      	ldrb	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1aa      	bne.n	8001f22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 f9de 	bl	8002392 <I2C_WaitOnBTFFlagUntilTimeout>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00d      	beq.n	8001ff8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d107      	bne.n	8001ff4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e016      	b.n	8002026 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002006:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	e000      	b.n	8002026 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002024:	2302      	movs	r3, #2
  }
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	00100002 	.word	0x00100002
 8002034:	ffff0000 	.word	0xffff0000

08002038 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af02      	add	r7, sp, #8
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	4608      	mov	r0, r1
 8002042:	4611      	mov	r1, r2
 8002044:	461a      	mov	r2, r3
 8002046:	4603      	mov	r3, r0
 8002048:	817b      	strh	r3, [r7, #10]
 800204a:	460b      	mov	r3, r1
 800204c:	813b      	strh	r3, [r7, #8]
 800204e:	4613      	mov	r3, r2
 8002050:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002060:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	2200      	movs	r2, #0
 800206a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 f878 	bl	8002164 <I2C_WaitOnFlagUntilTimeout>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00d      	beq.n	8002096 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002088:	d103      	bne.n	8002092 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e05f      	b.n	8002156 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002096:	897b      	ldrh	r3, [r7, #10]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	6a3a      	ldr	r2, [r7, #32]
 80020aa:	492d      	ldr	r1, [pc, #180]	; (8002160 <I2C_RequestMemoryWrite+0x128>)
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 f8b0 	bl	8002212 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e04c      	b.n	8002156 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d4:	6a39      	ldr	r1, [r7, #32]
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f91a 	bl	8002310 <I2C_WaitOnTXEFlagUntilTimeout>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00d      	beq.n	80020fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d107      	bne.n	80020fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e02b      	b.n	8002156 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d105      	bne.n	8002110 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002104:	893b      	ldrh	r3, [r7, #8]
 8002106:	b2da      	uxtb	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	611a      	str	r2, [r3, #16]
 800210e:	e021      	b.n	8002154 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002110:	893b      	ldrh	r3, [r7, #8]
 8002112:	0a1b      	lsrs	r3, r3, #8
 8002114:	b29b      	uxth	r3, r3
 8002116:	b2da      	uxtb	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800211e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002120:	6a39      	ldr	r1, [r7, #32]
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f8f4 	bl	8002310 <I2C_WaitOnTXEFlagUntilTimeout>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00d      	beq.n	800214a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	2b04      	cmp	r3, #4
 8002134:	d107      	bne.n	8002146 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002144:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e005      	b.n	8002156 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800214a:	893b      	ldrh	r3, [r7, #8]
 800214c:	b2da      	uxtb	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	00010002 	.word	0x00010002

08002164 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	4613      	mov	r3, r2
 8002172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002174:	e025      	b.n	80021c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800217c:	d021      	beq.n	80021c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800217e:	f7ff f94d 	bl	800141c <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d302      	bcc.n	8002194 <I2C_WaitOnFlagUntilTimeout+0x30>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d116      	bne.n	80021c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2220      	movs	r2, #32
 800219e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f043 0220 	orr.w	r2, r3, #32
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e023      	b.n	800220a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	0c1b      	lsrs	r3, r3, #16
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d10d      	bne.n	80021e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	43da      	mvns	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	4013      	ands	r3, r2
 80021d8:	b29b      	uxth	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	bf0c      	ite	eq
 80021de:	2301      	moveq	r3, #1
 80021e0:	2300      	movne	r3, #0
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	461a      	mov	r2, r3
 80021e6:	e00c      	b.n	8002202 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	4013      	ands	r3, r2
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bf0c      	ite	eq
 80021fa:	2301      	moveq	r3, #1
 80021fc:	2300      	movne	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	429a      	cmp	r2, r3
 8002206:	d0b6      	beq.n	8002176 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002220:	e051      	b.n	80022c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002230:	d123      	bne.n	800227a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002240:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800224a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2220      	movs	r2, #32
 8002256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f043 0204 	orr.w	r2, r3, #4
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e046      	b.n	8002308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002280:	d021      	beq.n	80022c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002282:	f7ff f8cb 	bl	800141c <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	429a      	cmp	r2, r3
 8002290:	d302      	bcc.n	8002298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d116      	bne.n	80022c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2220      	movs	r2, #32
 80022a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f043 0220 	orr.w	r2, r3, #32
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e020      	b.n	8002308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	0c1b      	lsrs	r3, r3, #16
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d10c      	bne.n	80022ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	43da      	mvns	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	4013      	ands	r3, r2
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	bf14      	ite	ne
 80022e2:	2301      	movne	r3, #1
 80022e4:	2300      	moveq	r3, #0
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	e00b      	b.n	8002302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	43da      	mvns	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	4013      	ands	r3, r2
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bf14      	ite	ne
 80022fc:	2301      	movne	r3, #1
 80022fe:	2300      	moveq	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d18d      	bne.n	8002222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800231c:	e02d      	b.n	800237a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f878 	bl	8002414 <I2C_IsAcknowledgeFailed>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e02d      	b.n	800238a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002334:	d021      	beq.n	800237a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002336:	f7ff f871 	bl	800141c <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	429a      	cmp	r2, r3
 8002344:	d302      	bcc.n	800234c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d116      	bne.n	800237a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f043 0220 	orr.w	r2, r3, #32
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e007      	b.n	800238a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002384:	2b80      	cmp	r3, #128	; 0x80
 8002386:	d1ca      	bne.n	800231e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b084      	sub	sp, #16
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800239e:	e02d      	b.n	80023fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 f837 	bl	8002414 <I2C_IsAcknowledgeFailed>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e02d      	b.n	800240c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023b6:	d021      	beq.n	80023fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b8:	f7ff f830 	bl	800141c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d302      	bcc.n	80023ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d116      	bne.n	80023fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	f043 0220 	orr.w	r2, r3, #32
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e007      	b.n	800240c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b04      	cmp	r3, #4
 8002408:	d1ca      	bne.n	80023a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800242a:	d11b      	bne.n	8002464 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002434:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f043 0204 	orr.w	r2, r3, #4
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e26c      	b.n	800295c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8087 	beq.w	800259e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002490:	4b92      	ldr	r3, [pc, #584]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b04      	cmp	r3, #4
 800249a:	d00c      	beq.n	80024b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800249c:	4b8f      	ldr	r3, [pc, #572]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d112      	bne.n	80024ce <HAL_RCC_OscConfig+0x5e>
 80024a8:	4b8c      	ldr	r3, [pc, #560]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b4:	d10b      	bne.n	80024ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b6:	4b89      	ldr	r3, [pc, #548]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d06c      	beq.n	800259c <HAL_RCC_OscConfig+0x12c>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d168      	bne.n	800259c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e246      	b.n	800295c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d6:	d106      	bne.n	80024e6 <HAL_RCC_OscConfig+0x76>
 80024d8:	4b80      	ldr	r3, [pc, #512]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a7f      	ldr	r2, [pc, #508]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	e02e      	b.n	8002544 <HAL_RCC_OscConfig+0xd4>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0x98>
 80024ee:	4b7b      	ldr	r3, [pc, #492]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a7a      	ldr	r2, [pc, #488]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b78      	ldr	r3, [pc, #480]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a77      	ldr	r2, [pc, #476]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002500:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e01d      	b.n	8002544 <HAL_RCC_OscConfig+0xd4>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0xbc>
 8002512:	4b72      	ldr	r3, [pc, #456]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a71      	ldr	r2, [pc, #452]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b6f      	ldr	r3, [pc, #444]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a6e      	ldr	r2, [pc, #440]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e00b      	b.n	8002544 <HAL_RCC_OscConfig+0xd4>
 800252c:	4b6b      	ldr	r3, [pc, #428]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a6a      	ldr	r2, [pc, #424]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b68      	ldr	r3, [pc, #416]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a67      	ldr	r2, [pc, #412]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 800253e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002542:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d013      	beq.n	8002574 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7fe ff66 	bl	800141c <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002554:	f7fe ff62 	bl	800141c <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b64      	cmp	r3, #100	; 0x64
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e1fa      	b.n	800295c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	4b5d      	ldr	r3, [pc, #372]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0xe4>
 8002572:	e014      	b.n	800259e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7fe ff52 	bl	800141c <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800257c:	f7fe ff4e 	bl	800141c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	; 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e1e6      	b.n	800295c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	4b53      	ldr	r3, [pc, #332]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x10c>
 800259a:	e000      	b.n	800259e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d063      	beq.n	8002672 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025aa:	4b4c      	ldr	r3, [pc, #304]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00b      	beq.n	80025ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025b6:	4b49      	ldr	r3, [pc, #292]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d11c      	bne.n	80025fc <HAL_RCC_OscConfig+0x18c>
 80025c2:	4b46      	ldr	r3, [pc, #280]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d116      	bne.n	80025fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ce:	4b43      	ldr	r3, [pc, #268]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_RCC_OscConfig+0x176>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d001      	beq.n	80025e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e1ba      	b.n	800295c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e6:	4b3d      	ldr	r3, [pc, #244]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4939      	ldr	r1, [pc, #228]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	e03a      	b.n	8002672 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002604:	4b36      	ldr	r3, [pc, #216]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002606:	2201      	movs	r2, #1
 8002608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260a:	f7fe ff07 	bl	800141c <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002612:	f7fe ff03 	bl	800141c <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e19b      	b.n	800295c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	4b2d      	ldr	r3, [pc, #180]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4927      	ldr	r1, [pc, #156]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002640:	4313      	orrs	r3, r2
 8002642:	600b      	str	r3, [r1, #0]
 8002644:	e015      	b.n	8002672 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002646:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <HAL_RCC_OscConfig+0x270>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7fe fee6 	bl	800141c <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002654:	f7fe fee2 	bl	800141c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e17a      	b.n	800295c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d03a      	beq.n	80026f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d019      	beq.n	80026ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002686:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <HAL_RCC_OscConfig+0x274>)
 8002688:	2201      	movs	r2, #1
 800268a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268c:	f7fe fec6 	bl	800141c <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002694:	f7fe fec2 	bl	800141c <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e15a      	b.n	800295c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <HAL_RCC_OscConfig+0x26c>)
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026b2:	2001      	movs	r0, #1
 80026b4:	f000 fad8 	bl	8002c68 <RCC_Delay>
 80026b8:	e01c      	b.n	80026f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ba:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <HAL_RCC_OscConfig+0x274>)
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c0:	f7fe feac 	bl	800141c <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c6:	e00f      	b.n	80026e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c8:	f7fe fea8 	bl	800141c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d908      	bls.n	80026e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e140      	b.n	800295c <HAL_RCC_OscConfig+0x4ec>
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000
 80026e0:	42420000 	.word	0x42420000
 80026e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e8:	4b9e      	ldr	r3, [pc, #632]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1e9      	bne.n	80026c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80a6 	beq.w	800284e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002706:	4b97      	ldr	r3, [pc, #604]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10d      	bne.n	800272e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	4b94      	ldr	r3, [pc, #592]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4a93      	ldr	r2, [pc, #588]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271c:	61d3      	str	r3, [r2, #28]
 800271e:	4b91      	ldr	r3, [pc, #580]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272a:	2301      	movs	r3, #1
 800272c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272e:	4b8e      	ldr	r3, [pc, #568]	; (8002968 <HAL_RCC_OscConfig+0x4f8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d118      	bne.n	800276c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273a:	4b8b      	ldr	r3, [pc, #556]	; (8002968 <HAL_RCC_OscConfig+0x4f8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a8a      	ldr	r2, [pc, #552]	; (8002968 <HAL_RCC_OscConfig+0x4f8>)
 8002740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002746:	f7fe fe69 	bl	800141c <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274e:	f7fe fe65 	bl	800141c <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b64      	cmp	r3, #100	; 0x64
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e0fd      	b.n	800295c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	4b81      	ldr	r3, [pc, #516]	; (8002968 <HAL_RCC_OscConfig+0x4f8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d106      	bne.n	8002782 <HAL_RCC_OscConfig+0x312>
 8002774:	4b7b      	ldr	r3, [pc, #492]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	4a7a      	ldr	r2, [pc, #488]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6213      	str	r3, [r2, #32]
 8002780:	e02d      	b.n	80027de <HAL_RCC_OscConfig+0x36e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x334>
 800278a:	4b76      	ldr	r3, [pc, #472]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	4a75      	ldr	r2, [pc, #468]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 8002790:	f023 0301 	bic.w	r3, r3, #1
 8002794:	6213      	str	r3, [r2, #32]
 8002796:	4b73      	ldr	r3, [pc, #460]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	4a72      	ldr	r2, [pc, #456]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 800279c:	f023 0304 	bic.w	r3, r3, #4
 80027a0:	6213      	str	r3, [r2, #32]
 80027a2:	e01c      	b.n	80027de <HAL_RCC_OscConfig+0x36e>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d10c      	bne.n	80027c6 <HAL_RCC_OscConfig+0x356>
 80027ac:	4b6d      	ldr	r3, [pc, #436]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	4a6c      	ldr	r2, [pc, #432]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 80027b2:	f043 0304 	orr.w	r3, r3, #4
 80027b6:	6213      	str	r3, [r2, #32]
 80027b8:	4b6a      	ldr	r3, [pc, #424]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	4a69      	ldr	r2, [pc, #420]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6213      	str	r3, [r2, #32]
 80027c4:	e00b      	b.n	80027de <HAL_RCC_OscConfig+0x36e>
 80027c6:	4b67      	ldr	r3, [pc, #412]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	4a66      	ldr	r2, [pc, #408]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	6213      	str	r3, [r2, #32]
 80027d2:	4b64      	ldr	r3, [pc, #400]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	4a63      	ldr	r2, [pc, #396]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 80027d8:	f023 0304 	bic.w	r3, r3, #4
 80027dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d015      	beq.n	8002812 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e6:	f7fe fe19 	bl	800141c <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ec:	e00a      	b.n	8002804 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ee:	f7fe fe15 	bl	800141c <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e0ab      	b.n	800295c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002804:	4b57      	ldr	r3, [pc, #348]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0ee      	beq.n	80027ee <HAL_RCC_OscConfig+0x37e>
 8002810:	e014      	b.n	800283c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002812:	f7fe fe03 	bl	800141c <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281a:	f7fe fdff 	bl	800141c <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f241 3288 	movw	r2, #5000	; 0x1388
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e095      	b.n	800295c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002830:	4b4c      	ldr	r3, [pc, #304]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1ee      	bne.n	800281a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800283c:	7dfb      	ldrb	r3, [r7, #23]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d105      	bne.n	800284e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002842:	4b48      	ldr	r3, [pc, #288]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	4a47      	ldr	r2, [pc, #284]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 8002848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800284c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8081 	beq.w	800295a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002858:	4b42      	ldr	r3, [pc, #264]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b08      	cmp	r3, #8
 8002862:	d061      	beq.n	8002928 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d146      	bne.n	80028fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286c:	4b3f      	ldr	r3, [pc, #252]	; (800296c <HAL_RCC_OscConfig+0x4fc>)
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002872:	f7fe fdd3 	bl	800141c <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287a:	f7fe fdcf 	bl	800141c <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e067      	b.n	800295c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288c:	4b35      	ldr	r3, [pc, #212]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f0      	bne.n	800287a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a0:	d108      	bne.n	80028b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028a2:	4b30      	ldr	r3, [pc, #192]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	492d      	ldr	r1, [pc, #180]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b4:	4b2b      	ldr	r3, [pc, #172]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a19      	ldr	r1, [r3, #32]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	430b      	orrs	r3, r1
 80028c6:	4927      	ldr	r1, [pc, #156]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028cc:	4b27      	ldr	r3, [pc, #156]	; (800296c <HAL_RCC_OscConfig+0x4fc>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d2:	f7fe fda3 	bl	800141c <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028da:	f7fe fd9f 	bl	800141c <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e037      	b.n	800295c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ec:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x46a>
 80028f8:	e02f      	b.n	800295a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fa:	4b1c      	ldr	r3, [pc, #112]	; (800296c <HAL_RCC_OscConfig+0x4fc>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7fe fd8c 	bl	800141c <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002908:	f7fe fd88 	bl	800141c <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e020      	b.n	800295c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800291a:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x498>
 8002926:	e018      	b.n	800295a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e013      	b.n	800295c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_RCC_OscConfig+0x4f4>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	429a      	cmp	r2, r3
 8002946:	d106      	bne.n	8002956 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002952:	429a      	cmp	r2, r3
 8002954:	d001      	beq.n	800295a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000
 8002968:	40007000 	.word	0x40007000
 800296c:	42420060 	.word	0x42420060

08002970 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0d0      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002984:	4b6a      	ldr	r3, [pc, #424]	; (8002b30 <HAL_RCC_ClockConfig+0x1c0>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d910      	bls.n	80029b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002992:	4b67      	ldr	r3, [pc, #412]	; (8002b30 <HAL_RCC_ClockConfig+0x1c0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 0207 	bic.w	r2, r3, #7
 800299a:	4965      	ldr	r1, [pc, #404]	; (8002b30 <HAL_RCC_ClockConfig+0x1c0>)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a2:	4b63      	ldr	r3, [pc, #396]	; (8002b30 <HAL_RCC_ClockConfig+0x1c0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0b8      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d020      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029cc:	4b59      	ldr	r3, [pc, #356]	; (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	4a58      	ldr	r2, [pc, #352]	; (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 80029d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029e4:	4b53      	ldr	r3, [pc, #332]	; (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4a52      	ldr	r2, [pc, #328]	; (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f0:	4b50      	ldr	r3, [pc, #320]	; (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	494d      	ldr	r1, [pc, #308]	; (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d040      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d107      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a16:	4b47      	ldr	r3, [pc, #284]	; (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d115      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e07f      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d107      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2e:	4b41      	ldr	r3, [pc, #260]	; (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e073      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3e:	4b3d      	ldr	r3, [pc, #244]	; (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e06b      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a4e:	4b39      	ldr	r3, [pc, #228]	; (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f023 0203 	bic.w	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4936      	ldr	r1, [pc, #216]	; (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a60:	f7fe fcdc 	bl	800141c <HAL_GetTick>
 8002a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a68:	f7fe fcd8 	bl	800141c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e053      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7e:	4b2d      	ldr	r3, [pc, #180]	; (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 020c 	and.w	r2, r3, #12
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d1eb      	bne.n	8002a68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a90:	4b27      	ldr	r3, [pc, #156]	; (8002b30 <HAL_RCC_ClockConfig+0x1c0>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d210      	bcs.n	8002ac0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9e:	4b24      	ldr	r3, [pc, #144]	; (8002b30 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 0207 	bic.w	r2, r3, #7
 8002aa6:	4922      	ldr	r1, [pc, #136]	; (8002b30 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aae:	4b20      	ldr	r3, [pc, #128]	; (8002b30 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e032      	b.n	8002b26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002acc:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	4916      	ldr	r1, [pc, #88]	; (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d009      	beq.n	8002afe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aea:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	490e      	ldr	r1, [pc, #56]	; (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002afe:	f000 f821 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8002b02:	4602      	mov	r2, r0
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	490a      	ldr	r1, [pc, #40]	; (8002b38 <HAL_RCC_ClockConfig+0x1c8>)
 8002b10:	5ccb      	ldrb	r3, [r1, r3]
 8002b12:	fa22 f303 	lsr.w	r3, r2, r3
 8002b16:	4a09      	ldr	r2, [pc, #36]	; (8002b3c <HAL_RCC_ClockConfig+0x1cc>)
 8002b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <HAL_RCC_ClockConfig+0x1d0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe fc3a 	bl	8001398 <HAL_InitTick>

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40022000 	.word	0x40022000
 8002b34:	40021000 	.word	0x40021000
 8002b38:	08004dc4 	.word	0x08004dc4
 8002b3c:	20000010 	.word	0x20000010
 8002b40:	20000018 	.word	0x20000018

08002b44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b44:	b490      	push	{r4, r7}
 8002b46:	b08a      	sub	sp, #40	; 0x28
 8002b48:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b4a:	4b2a      	ldr	r3, [pc, #168]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b4c:	1d3c      	adds	r4, r7, #4
 8002b4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b54:	f240 2301 	movw	r3, #513	; 0x201
 8002b58:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b6e:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d002      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x40>
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d003      	beq.n	8002b8a <HAL_RCC_GetSysClockFreq+0x46>
 8002b82:	e02d      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b84:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b86:	623b      	str	r3, [r7, #32]
      break;
 8002b88:	e02d      	b.n	8002be6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	0c9b      	lsrs	r3, r3, #18
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b96:	4413      	add	r3, r2
 8002b98:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b9c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d013      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ba8:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	0c5b      	lsrs	r3, r3, #17
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bbc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bc2:	fb02 f203 	mul.w	r2, r2, r3
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bce:	e004      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	4a0b      	ldr	r2, [pc, #44]	; (8002c00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bd4:	fb02 f303 	mul.w	r3, r2, r3
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	623b      	str	r3, [r7, #32]
      break;
 8002bde:	e002      	b.n	8002be6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002be0:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002be2:	623b      	str	r3, [r7, #32]
      break;
 8002be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002be6:	6a3b      	ldr	r3, [r7, #32]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3728      	adds	r7, #40	; 0x28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc90      	pop	{r4, r7}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	08004db4 	.word	0x08004db4
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	007a1200 	.word	0x007a1200
 8002c00:	003d0900 	.word	0x003d0900

08002c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c08:	4b02      	ldr	r3, [pc, #8]	; (8002c14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	20000010 	.word	0x20000010

08002c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c1c:	f7ff fff2 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c20:	4602      	mov	r2, r0
 8002c22:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	4903      	ldr	r1, [pc, #12]	; (8002c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c2e:	5ccb      	ldrb	r3, [r1, r3]
 8002c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	08004dd4 	.word	0x08004dd4

08002c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c44:	f7ff ffde 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	0adb      	lsrs	r3, r3, #11
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	4903      	ldr	r1, [pc, #12]	; (8002c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c56:	5ccb      	ldrb	r3, [r1, r3]
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021000 	.word	0x40021000
 8002c64:	08004dd4 	.word	0x08004dd4

08002c68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c70:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <RCC_Delay+0x34>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <RCC_Delay+0x38>)
 8002c76:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7a:	0a5b      	lsrs	r3, r3, #9
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c84:	bf00      	nop
  }
  while (Delay --);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1e5a      	subs	r2, r3, #1
 8002c8a:	60fa      	str	r2, [r7, #12]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1f9      	bne.n	8002c84 <RCC_Delay+0x1c>
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr
 8002c9c:	20000010 	.word	0x20000010
 8002ca0:	10624dd3 	.word	0x10624dd3

08002ca4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e076      	b.n	8002da4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d108      	bne.n	8002cd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cc6:	d009      	beq.n	8002cdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	61da      	str	r2, [r3, #28]
 8002cce:	e005      	b.n	8002cdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d106      	bne.n	8002cfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7fe f856 	bl	8000da8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d60:	ea42 0103 	orr.w	r1, r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	0c1a      	lsrs	r2, r3, #16
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f002 0204 	and.w	r2, r2, #4
 8002d82:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	69da      	ldr	r2, [r3, #28]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	4613      	mov	r3, r2
 8002dba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_SPI_Transmit+0x22>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e126      	b.n	800301c <HAL_SPI_Transmit+0x270>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dd6:	f7fe fb21 	bl	800141c <HAL_GetTick>
 8002dda:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d002      	beq.n	8002df2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002dec:	2302      	movs	r3, #2
 8002dee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002df0:	e10b      	b.n	800300a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_SPI_Transmit+0x52>
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d102      	bne.n	8002e04 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e02:	e102      	b.n	800300a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2203      	movs	r2, #3
 8002e08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	88fa      	ldrh	r2, [r7, #6]
 8002e1c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	88fa      	ldrh	r2, [r7, #6]
 8002e22:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e4a:	d10f      	bne.n	8002e6c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e76:	2b40      	cmp	r3, #64	; 0x40
 8002e78:	d007      	beq.n	8002e8a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e92:	d14b      	bne.n	8002f2c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <HAL_SPI_Transmit+0xf6>
 8002e9c:	8afb      	ldrh	r3, [r7, #22]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d13e      	bne.n	8002f20 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	881a      	ldrh	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	1c9a      	adds	r2, r3, #2
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ec6:	e02b      	b.n	8002f20 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d112      	bne.n	8002efc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	881a      	ldrh	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	1c9a      	adds	r2, r3, #2
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002efa:	e011      	b.n	8002f20 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002efc:	f7fe fa8e 	bl	800141c <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d803      	bhi.n	8002f14 <HAL_SPI_Transmit+0x168>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f12:	d102      	bne.n	8002f1a <HAL_SPI_Transmit+0x16e>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f1e:	e074      	b.n	800300a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1ce      	bne.n	8002ec8 <HAL_SPI_Transmit+0x11c>
 8002f2a:	e04c      	b.n	8002fc6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <HAL_SPI_Transmit+0x18e>
 8002f34:	8afb      	ldrh	r3, [r7, #22]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d140      	bne.n	8002fbc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	330c      	adds	r3, #12
 8002f44:	7812      	ldrb	r2, [r2, #0]
 8002f46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f60:	e02c      	b.n	8002fbc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d113      	bne.n	8002f98 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	330c      	adds	r3, #12
 8002f7a:	7812      	ldrb	r2, [r2, #0]
 8002f7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f96:	e011      	b.n	8002fbc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f98:	f7fe fa40 	bl	800141c <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d803      	bhi.n	8002fb0 <HAL_SPI_Transmit+0x204>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fae:	d102      	bne.n	8002fb6 <HAL_SPI_Transmit+0x20a>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d102      	bne.n	8002fbc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fba:	e026      	b.n	800300a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1cd      	bne.n	8002f62 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	6839      	ldr	r1, [r7, #0]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 fbb8 	bl	8003740 <SPI_EndRxTxTransaction>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10a      	bne.n	8002ffa <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	77fb      	strb	r3, [r7, #31]
 8003006:	e000      	b.n	800300a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003008:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800301a:	7ffb      	ldrb	r3, [r7, #31]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3720      	adds	r7, #32
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	4613      	mov	r3, r2
 8003032:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003040:	d112      	bne.n	8003068 <HAL_SPI_Receive+0x44>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10e      	bne.n	8003068 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2204      	movs	r2, #4
 800304e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003052:	88fa      	ldrh	r2, [r7, #6]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f8f1 	bl	8003246 <HAL_SPI_TransmitReceive>
 8003064:	4603      	mov	r3, r0
 8003066:	e0ea      	b.n	800323e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_SPI_Receive+0x52>
 8003072:	2302      	movs	r3, #2
 8003074:	e0e3      	b.n	800323e <HAL_SPI_Receive+0x21a>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800307e:	f7fe f9cd 	bl	800141c <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d002      	beq.n	8003096 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003090:	2302      	movs	r3, #2
 8003092:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003094:	e0ca      	b.n	800322c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <HAL_SPI_Receive+0x7e>
 800309c:	88fb      	ldrh	r3, [r7, #6]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d102      	bne.n	80030a8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030a6:	e0c1      	b.n	800322c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2204      	movs	r2, #4
 80030ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	88fa      	ldrh	r2, [r7, #6]
 80030c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	88fa      	ldrh	r2, [r7, #6]
 80030c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ee:	d10f      	bne.n	8003110 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800310e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	d007      	beq.n	800312e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800312c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d162      	bne.n	80031fc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003136:	e02e      	b.n	8003196 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b01      	cmp	r3, #1
 8003144:	d115      	bne.n	8003172 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f103 020c 	add.w	r2, r3, #12
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003152:	7812      	ldrb	r2, [r2, #0]
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003166:	b29b      	uxth	r3, r3
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003170:	e011      	b.n	8003196 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003172:	f7fe f953 	bl	800141c <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d803      	bhi.n	800318a <HAL_SPI_Receive+0x166>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003188:	d102      	bne.n	8003190 <HAL_SPI_Receive+0x16c>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d102      	bne.n	8003196 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003194:	e04a      	b.n	800322c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800319a:	b29b      	uxth	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1cb      	bne.n	8003138 <HAL_SPI_Receive+0x114>
 80031a0:	e031      	b.n	8003206 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d113      	bne.n	80031d8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ba:	b292      	uxth	r2, r2
 80031bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	1c9a      	adds	r2, r3, #2
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031d6:	e011      	b.n	80031fc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031d8:	f7fe f920 	bl	800141c <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d803      	bhi.n	80031f0 <HAL_SPI_Receive+0x1cc>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031ee:	d102      	bne.n	80031f6 <HAL_SPI_Receive+0x1d2>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d102      	bne.n	80031fc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80031fa:	e017      	b.n	800322c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1cd      	bne.n	80031a2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	6839      	ldr	r1, [r7, #0]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 fa46 	bl	800369c <SPI_EndRxTransaction>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	75fb      	strb	r3, [r7, #23]
 8003228:	e000      	b.n	800322c <HAL_SPI_Receive+0x208>
  }

error :
 800322a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800323c:	7dfb      	ldrb	r3, [r7, #23]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b08c      	sub	sp, #48	; 0x30
 800324a:	af00      	add	r7, sp, #0
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003254:	2301      	movs	r3, #1
 8003256:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_SPI_TransmitReceive+0x26>
 8003268:	2302      	movs	r3, #2
 800326a:	e18a      	b.n	8003582 <HAL_SPI_TransmitReceive+0x33c>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003274:	f7fe f8d2 	bl	800141c <HAL_GetTick>
 8003278:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003280:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800328a:	887b      	ldrh	r3, [r7, #2]
 800328c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800328e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003292:	2b01      	cmp	r3, #1
 8003294:	d00f      	beq.n	80032b6 <HAL_SPI_TransmitReceive+0x70>
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800329c:	d107      	bne.n	80032ae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d103      	bne.n	80032ae <HAL_SPI_TransmitReceive+0x68>
 80032a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d003      	beq.n	80032b6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
 80032b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80032b4:	e15b      	b.n	800356e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_SPI_TransmitReceive+0x82>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <HAL_SPI_TransmitReceive+0x82>
 80032c2:	887b      	ldrh	r3, [r7, #2]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d103      	bne.n	80032d0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80032ce:	e14e      	b.n	800356e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d003      	beq.n	80032e4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2205      	movs	r2, #5
 80032e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	887a      	ldrh	r2, [r7, #2]
 80032f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	887a      	ldrh	r2, [r7, #2]
 80032fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	887a      	ldrh	r2, [r7, #2]
 8003306:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	887a      	ldrh	r2, [r7, #2]
 800330c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003324:	2b40      	cmp	r3, #64	; 0x40
 8003326:	d007      	beq.n	8003338 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003336:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003340:	d178      	bne.n	8003434 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_SPI_TransmitReceive+0x10a>
 800334a:	8b7b      	ldrh	r3, [r7, #26]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d166      	bne.n	800341e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	881a      	ldrh	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	1c9a      	adds	r2, r3, #2
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003374:	e053      	b.n	800341e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b02      	cmp	r3, #2
 8003382:	d11b      	bne.n	80033bc <HAL_SPI_TransmitReceive+0x176>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d016      	beq.n	80033bc <HAL_SPI_TransmitReceive+0x176>
 800338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003390:	2b01      	cmp	r3, #1
 8003392:	d113      	bne.n	80033bc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	881a      	ldrh	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	1c9a      	adds	r2, r3, #2
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d119      	bne.n	80033fe <HAL_SPI_TransmitReceive+0x1b8>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d014      	beq.n	80033fe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	b292      	uxth	r2, r2
 80033e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	1c9a      	adds	r2, r3, #2
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033fa:	2301      	movs	r3, #1
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033fe:	f7fe f80d 	bl	800141c <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800340a:	429a      	cmp	r2, r3
 800340c:	d807      	bhi.n	800341e <HAL_SPI_TransmitReceive+0x1d8>
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003414:	d003      	beq.n	800341e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800341c:	e0a7      	b.n	800356e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1a6      	bne.n	8003376 <HAL_SPI_TransmitReceive+0x130>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1a1      	bne.n	8003376 <HAL_SPI_TransmitReceive+0x130>
 8003432:	e07c      	b.n	800352e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_SPI_TransmitReceive+0x1fc>
 800343c:	8b7b      	ldrh	r3, [r7, #26]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d16b      	bne.n	800351a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	330c      	adds	r3, #12
 800344c:	7812      	ldrb	r2, [r2, #0]
 800344e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003468:	e057      	b.n	800351a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b02      	cmp	r3, #2
 8003476:	d11c      	bne.n	80034b2 <HAL_SPI_TransmitReceive+0x26c>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d017      	beq.n	80034b2 <HAL_SPI_TransmitReceive+0x26c>
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	2b01      	cmp	r3, #1
 8003486:	d114      	bne.n	80034b2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	330c      	adds	r3, #12
 8003492:	7812      	ldrb	r2, [r2, #0]
 8003494:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d119      	bne.n	80034f4 <HAL_SPI_TransmitReceive+0x2ae>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d014      	beq.n	80034f4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034f0:	2301      	movs	r3, #1
 80034f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034f4:	f7fd ff92 	bl	800141c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003500:	429a      	cmp	r2, r3
 8003502:	d803      	bhi.n	800350c <HAL_SPI_TransmitReceive+0x2c6>
 8003504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800350a:	d102      	bne.n	8003512 <HAL_SPI_TransmitReceive+0x2cc>
 800350c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350e:	2b00      	cmp	r3, #0
 8003510:	d103      	bne.n	800351a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003518:	e029      	b.n	800356e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1a2      	bne.n	800346a <HAL_SPI_TransmitReceive+0x224>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d19d      	bne.n	800346a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800352e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003530:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f904 	bl	8003740 <SPI_EndRxTxTransaction>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d006      	beq.n	800354c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800354a:	e010      	b.n	800356e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10b      	bne.n	800356c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003554:	2300      	movs	r3, #0
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	e000      	b.n	800356e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800356c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800357e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003582:	4618      	mov	r0, r3
 8003584:	3730      	adds	r7, #48	; 0x30
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800359c:	f7fd ff3e 	bl	800141c <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	4413      	add	r3, r2
 80035aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035ac:	f7fd ff36 	bl	800141c <HAL_GetTick>
 80035b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035b2:	4b39      	ldr	r3, [pc, #228]	; (8003698 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	015b      	lsls	r3, r3, #5
 80035b8:	0d1b      	lsrs	r3, r3, #20
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	fb02 f303 	mul.w	r3, r2, r3
 80035c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035c2:	e054      	b.n	800366e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035ca:	d050      	beq.n	800366e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035cc:	f7fd ff26 	bl	800141c <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d902      	bls.n	80035e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d13d      	bne.n	800365e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035fa:	d111      	bne.n	8003620 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003604:	d004      	beq.n	8003610 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800360e:	d107      	bne.n	8003620 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800361e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003628:	d10f      	bne.n	800364a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003648:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e017      	b.n	800368e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	3b01      	subs	r3, #1
 800366c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4013      	ands	r3, r2
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	429a      	cmp	r2, r3
 800367c:	bf0c      	ite	eq
 800367e:	2301      	moveq	r3, #1
 8003680:	2300      	movne	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	461a      	mov	r2, r3
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	429a      	cmp	r2, r3
 800368a:	d19b      	bne.n	80035c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3720      	adds	r7, #32
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000010 	.word	0x20000010

0800369c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af02      	add	r7, sp, #8
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036b0:	d111      	bne.n	80036d6 <SPI_EndRxTransaction+0x3a>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ba:	d004      	beq.n	80036c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c4:	d107      	bne.n	80036d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036d4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036de:	d117      	bne.n	8003710 <SPI_EndRxTransaction+0x74>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e8:	d112      	bne.n	8003710 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2200      	movs	r2, #0
 80036f2:	2101      	movs	r1, #1
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f7ff ff49 	bl	800358c <SPI_WaitFlagStateUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01a      	beq.n	8003736 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003704:	f043 0220 	orr.w	r2, r3, #32
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e013      	b.n	8003738 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2200      	movs	r2, #0
 8003718:	2180      	movs	r1, #128	; 0x80
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f7ff ff36 	bl	800358c <SPI_WaitFlagStateUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d007      	beq.n	8003736 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372a:	f043 0220 	orr.w	r2, r3, #32
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e000      	b.n	8003738 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af02      	add	r7, sp, #8
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2200      	movs	r2, #0
 8003754:	2180      	movs	r1, #128	; 0x80
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f7ff ff18 	bl	800358c <SPI_WaitFlagStateUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d007      	beq.n	8003772 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	f043 0220 	orr.w	r2, r3, #32
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e000      	b.n	8003774 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e041      	b.n	8003812 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fd fb4a 	bl	8000e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3304      	adds	r3, #4
 80037b8:	4619      	mov	r1, r3
 80037ba:	4610      	mov	r0, r2
 80037bc:	f000 faa8 	bl	8003d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b01      	cmp	r3, #1
 800382e:	d001      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e03a      	b.n	80038aa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a18      	ldr	r2, [pc, #96]	; (80038b4 <HAL_TIM_Base_Start_IT+0x98>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00e      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0x58>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385e:	d009      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0x58>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a14      	ldr	r2, [pc, #80]	; (80038b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d004      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0x58>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a13      	ldr	r2, [pc, #76]	; (80038bc <HAL_TIM_Base_Start_IT+0xa0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d111      	bne.n	8003898 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b06      	cmp	r3, #6
 8003884:	d010      	beq.n	80038a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0201 	orr.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003896:	e007      	b.n	80038a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr
 80038b4:	40012c00 	.word	0x40012c00
 80038b8:	40000400 	.word	0x40000400
 80038bc:	40000800 	.word	0x40000800

080038c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0201 	bic.w	r2, r2, #1
 80038d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6a1a      	ldr	r2, [r3, #32]
 80038de:	f241 1311 	movw	r3, #4369	; 0x1111
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10f      	bne.n	8003908 <HAL_TIM_Base_Stop_IT+0x48>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6a1a      	ldr	r2, [r3, #32]
 80038ee:	f240 4344 	movw	r3, #1092	; 0x444
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d107      	bne.n	8003908 <HAL_TIM_Base_Stop_IT+0x48>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr

0800391c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b02      	cmp	r3, #2
 8003930:	d122      	bne.n	8003978 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b02      	cmp	r3, #2
 800393e:	d11b      	bne.n	8003978 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0202 	mvn.w	r2, #2
 8003948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f9ba 	bl	8003cd8 <HAL_TIM_IC_CaptureCallback>
 8003964:	e005      	b.n	8003972 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f9ad 	bl	8003cc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f9bc 	bl	8003cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b04      	cmp	r3, #4
 8003984:	d122      	bne.n	80039cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b04      	cmp	r3, #4
 8003992:	d11b      	bne.n	80039cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0204 	mvn.w	r2, #4
 800399c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2202      	movs	r2, #2
 80039a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f990 	bl	8003cd8 <HAL_TIM_IC_CaptureCallback>
 80039b8:	e005      	b.n	80039c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f983 	bl	8003cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f992 	bl	8003cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d122      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d11b      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0208 	mvn.w	r2, #8
 80039f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2204      	movs	r2, #4
 80039f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f966 	bl	8003cd8 <HAL_TIM_IC_CaptureCallback>
 8003a0c:	e005      	b.n	8003a1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f959 	bl	8003cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f968 	bl	8003cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	f003 0310 	and.w	r3, r3, #16
 8003a2a:	2b10      	cmp	r3, #16
 8003a2c:	d122      	bne.n	8003a74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	2b10      	cmp	r3, #16
 8003a3a:	d11b      	bne.n	8003a74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0210 	mvn.w	r2, #16
 8003a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2208      	movs	r2, #8
 8003a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f93c 	bl	8003cd8 <HAL_TIM_IC_CaptureCallback>
 8003a60:	e005      	b.n	8003a6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f92f 	bl	8003cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f93e 	bl	8003cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d10e      	bne.n	8003aa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d107      	bne.n	8003aa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f06f 0201 	mvn.w	r2, #1
 8003a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f90a 	bl	8003cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aaa:	2b80      	cmp	r3, #128	; 0x80
 8003aac:	d10e      	bne.n	8003acc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab8:	2b80      	cmp	r3, #128	; 0x80
 8003aba:	d107      	bne.n	8003acc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fa81 	bl	8003fce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad6:	2b40      	cmp	r3, #64	; 0x40
 8003ad8:	d10e      	bne.n	8003af8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae4:	2b40      	cmp	r3, #64	; 0x40
 8003ae6:	d107      	bne.n	8003af8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f902 	bl	8003cfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	2b20      	cmp	r3, #32
 8003b04:	d10e      	bne.n	8003b24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d107      	bne.n	8003b24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f06f 0220 	mvn.w	r2, #32
 8003b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fa4c 	bl	8003fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b24:	bf00      	nop
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_TIM_ConfigClockSource+0x18>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e0b3      	b.n	8003cac <HAL_TIM_ConfigClockSource+0x180>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b7c:	d03e      	beq.n	8003bfc <HAL_TIM_ConfigClockSource+0xd0>
 8003b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b82:	f200 8087 	bhi.w	8003c94 <HAL_TIM_ConfigClockSource+0x168>
 8003b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8a:	f000 8085 	beq.w	8003c98 <HAL_TIM_ConfigClockSource+0x16c>
 8003b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b92:	d87f      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x168>
 8003b94:	2b70      	cmp	r3, #112	; 0x70
 8003b96:	d01a      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0xa2>
 8003b98:	2b70      	cmp	r3, #112	; 0x70
 8003b9a:	d87b      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x168>
 8003b9c:	2b60      	cmp	r3, #96	; 0x60
 8003b9e:	d050      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x116>
 8003ba0:	2b60      	cmp	r3, #96	; 0x60
 8003ba2:	d877      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x168>
 8003ba4:	2b50      	cmp	r3, #80	; 0x50
 8003ba6:	d03c      	beq.n	8003c22 <HAL_TIM_ConfigClockSource+0xf6>
 8003ba8:	2b50      	cmp	r3, #80	; 0x50
 8003baa:	d873      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x168>
 8003bac:	2b40      	cmp	r3, #64	; 0x40
 8003bae:	d058      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x136>
 8003bb0:	2b40      	cmp	r3, #64	; 0x40
 8003bb2:	d86f      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x168>
 8003bb4:	2b30      	cmp	r3, #48	; 0x30
 8003bb6:	d064      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x156>
 8003bb8:	2b30      	cmp	r3, #48	; 0x30
 8003bba:	d86b      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x168>
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	d060      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x156>
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d867      	bhi.n	8003c94 <HAL_TIM_ConfigClockSource+0x168>
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d05c      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x156>
 8003bc8:	2b10      	cmp	r3, #16
 8003bca:	d05a      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003bcc:	e062      	b.n	8003c94 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	6899      	ldr	r1, [r3, #8]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f000 f970 	bl	8003ec2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bf0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	609a      	str	r2, [r3, #8]
      break;
 8003bfa:	e04e      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	6899      	ldr	r1, [r3, #8]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f000 f959 	bl	8003ec2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c1e:	609a      	str	r2, [r3, #8]
      break;
 8003c20:	e03b      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6859      	ldr	r1, [r3, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f000 f8d0 	bl	8003dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2150      	movs	r1, #80	; 0x50
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 f927 	bl	8003e8e <TIM_ITRx_SetConfig>
      break;
 8003c40:	e02b      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6859      	ldr	r1, [r3, #4]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f000 f8ee 	bl	8003e30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2160      	movs	r1, #96	; 0x60
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 f917 	bl	8003e8e <TIM_ITRx_SetConfig>
      break;
 8003c60:	e01b      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6859      	ldr	r1, [r3, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f000 f8b0 	bl	8003dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2140      	movs	r1, #64	; 0x40
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 f907 	bl	8003e8e <TIM_ITRx_SetConfig>
      break;
 8003c80:	e00b      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	f000 f8fe 	bl	8003e8e <TIM_ITRx_SetConfig>
        break;
 8003c92:	e002      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c94:	bf00      	nop
 8003c96:	e000      	b.n	8003c9a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003c98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr

08003cea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr

08003cfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr
	...

08003d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a29      	ldr	r2, [pc, #164]	; (8003dc8 <TIM_Base_SetConfig+0xb8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00b      	beq.n	8003d40 <TIM_Base_SetConfig+0x30>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d2e:	d007      	beq.n	8003d40 <TIM_Base_SetConfig+0x30>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a26      	ldr	r2, [pc, #152]	; (8003dcc <TIM_Base_SetConfig+0xbc>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d003      	beq.n	8003d40 <TIM_Base_SetConfig+0x30>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a25      	ldr	r2, [pc, #148]	; (8003dd0 <TIM_Base_SetConfig+0xc0>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d108      	bne.n	8003d52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a1c      	ldr	r2, [pc, #112]	; (8003dc8 <TIM_Base_SetConfig+0xb8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00b      	beq.n	8003d72 <TIM_Base_SetConfig+0x62>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d60:	d007      	beq.n	8003d72 <TIM_Base_SetConfig+0x62>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a19      	ldr	r2, [pc, #100]	; (8003dcc <TIM_Base_SetConfig+0xbc>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d003      	beq.n	8003d72 <TIM_Base_SetConfig+0x62>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a18      	ldr	r2, [pc, #96]	; (8003dd0 <TIM_Base_SetConfig+0xc0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d108      	bne.n	8003d84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a07      	ldr	r2, [pc, #28]	; (8003dc8 <TIM_Base_SetConfig+0xb8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d103      	bne.n	8003db8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	615a      	str	r2, [r3, #20]
}
 8003dbe:	bf00      	nop
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr
 8003dc8:	40012c00 	.word	0x40012c00
 8003dcc:	40000400 	.word	0x40000400
 8003dd0:	40000800 	.word	0x40000800

08003dd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	f023 0201 	bic.w	r2, r3, #1
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f023 030a 	bic.w	r3, r3, #10
 8003e10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	621a      	str	r2, [r3, #32]
}
 8003e26:	bf00      	nop
 8003e28:	371c      	adds	r7, #28
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	f023 0210 	bic.w	r2, r3, #16
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	031b      	lsls	r3, r3, #12
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	621a      	str	r2, [r3, #32]
}
 8003e84:	bf00      	nop
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr

08003e8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b085      	sub	sp, #20
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f043 0307 	orr.w	r3, r3, #7
 8003eb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	609a      	str	r2, [r3, #8]
}
 8003eb8:	bf00      	nop
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr

08003ec2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b087      	sub	sp, #28
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	607a      	str	r2, [r7, #4]
 8003ece:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003edc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	021a      	lsls	r2, r3, #8
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	609a      	str	r2, [r3, #8]
}
 8003ef6:	bf00      	nop
 8003ef8:	371c      	adds	r7, #28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e046      	b.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a16      	ldr	r2, [pc, #88]	; (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00e      	beq.n	8003f7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f64:	d009      	beq.n	8003f7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a12      	ldr	r2, [pc, #72]	; (8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d004      	beq.n	8003f7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a10      	ldr	r2, [pc, #64]	; (8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d10c      	bne.n	8003f94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr
 8003fb0:	40012c00 	.word	0x40012c00
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	40000800 	.word	0x40000800

08003fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr

08003fce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr

08003fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e03f      	b.n	8004072 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d106      	bne.n	800400c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fc ff3e 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2224      	movs	r2, #36	; 0x24
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 fc85 	bl	8004934 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695a      	ldr	r2, [r3, #20]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b08a      	sub	sp, #40	; 0x28
 800407e:	af02      	add	r7, sp, #8
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	603b      	str	r3, [r7, #0]
 8004086:	4613      	mov	r3, r2
 8004088:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b20      	cmp	r3, #32
 8004098:	d17c      	bne.n	8004194 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <HAL_UART_Transmit+0x2c>
 80040a0:	88fb      	ldrh	r3, [r7, #6]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e075      	b.n	8004196 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_UART_Transmit+0x3e>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e06e      	b.n	8004196 <HAL_UART_Transmit+0x11c>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2221      	movs	r2, #33	; 0x21
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ce:	f7fd f9a5 	bl	800141c <HAL_GetTick>
 80040d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	88fa      	ldrh	r2, [r7, #6]
 80040d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	88fa      	ldrh	r2, [r7, #6]
 80040de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e8:	d108      	bne.n	80040fc <HAL_UART_Transmit+0x82>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d104      	bne.n	80040fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	61bb      	str	r3, [r7, #24]
 80040fa:	e003      	b.n	8004104 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004100:	2300      	movs	r3, #0
 8004102:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800410c:	e02a      	b.n	8004164 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2200      	movs	r2, #0
 8004116:	2180      	movs	r1, #128	; 0x80
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 fa38 	bl	800458e <UART_WaitOnFlagUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e036      	b.n	8004196 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10b      	bne.n	8004146 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800413c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	3302      	adds	r3, #2
 8004142:	61bb      	str	r3, [r7, #24]
 8004144:	e007      	b.n	8004156 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	781a      	ldrb	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	3301      	adds	r3, #1
 8004154:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1cf      	bne.n	800410e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2200      	movs	r2, #0
 8004176:	2140      	movs	r1, #64	; 0x40
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 fa08 	bl	800458e <UART_WaitOnFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e006      	b.n	8004196 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	e000      	b.n	8004196 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004194:	2302      	movs	r3, #2
  }
}
 8004196:	4618      	mov	r0, r3
 8004198:	3720      	adds	r7, #32
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	4613      	mov	r3, r2
 80041aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b20      	cmp	r3, #32
 80041b6:	d11d      	bne.n	80041f4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <HAL_UART_Receive_IT+0x26>
 80041be:	88fb      	ldrh	r3, [r7, #6]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e016      	b.n	80041f6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_UART_Receive_IT+0x38>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e00f      	b.n	80041f6 <HAL_UART_Receive_IT+0x58>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80041e4:	88fb      	ldrh	r3, [r7, #6]
 80041e6:	461a      	mov	r2, r3
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fa19 	bl	8004622 <UART_Start_Receive_IT>
 80041f0:	4603      	mov	r3, r0
 80041f2:	e000      	b.n	80041f6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80041f4:	2302      	movs	r3, #2
  }
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	; 0x28
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004220:	2300      	movs	r3, #0
 8004222:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10d      	bne.n	8004252 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_UART_IRQHandler+0x52>
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fac9 	bl	80047e2 <UART_Receive_IT>
      return;
 8004250:	e17b      	b.n	800454a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80b1 	beq.w	80043bc <HAL_UART_IRQHandler+0x1bc>
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d105      	bne.n	8004270 <HAL_UART_IRQHandler+0x70>
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80a6 	beq.w	80043bc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <HAL_UART_IRQHandler+0x90>
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	f043 0201 	orr.w	r2, r3, #1
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <HAL_UART_IRQHandler+0xb0>
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	f043 0202 	orr.w	r2, r3, #2
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <HAL_UART_IRQHandler+0xd0>
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d005      	beq.n	80042d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	f043 0204 	orr.w	r2, r3, #4
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00f      	beq.n	80042fa <HAL_UART_IRQHandler+0xfa>
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d104      	bne.n	80042ee <HAL_UART_IRQHandler+0xee>
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f043 0208 	orr.w	r2, r3, #8
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 811e 	beq.w	8004540 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <HAL_UART_IRQHandler+0x11e>
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	f003 0320 	and.w	r3, r3, #32
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 fa62 	bl	80047e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	bf14      	ite	ne
 800432c:	2301      	movne	r3, #1
 800432e:	2300      	moveq	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d102      	bne.n	8004346 <HAL_UART_IRQHandler+0x146>
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d031      	beq.n	80043aa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f9a4 	bl	8004694 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	d023      	beq.n	80043a2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695a      	ldr	r2, [r3, #20]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004368:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	2b00      	cmp	r3, #0
 8004370:	d013      	beq.n	800439a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	4a76      	ldr	r2, [pc, #472]	; (8004550 <HAL_UART_IRQHandler+0x350>)
 8004378:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	4618      	mov	r0, r3
 8004380:	f7fd f9c2 	bl	8001708 <HAL_DMA_Abort_IT>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d016      	beq.n	80043b8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004394:	4610      	mov	r0, r2
 8004396:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004398:	e00e      	b.n	80043b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f8e3 	bl	8004566 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a0:	e00a      	b.n	80043b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f8df 	bl	8004566 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a8:	e006      	b.n	80043b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f8db 	bl	8004566 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80043b6:	e0c3      	b.n	8004540 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b8:	bf00      	nop
    return;
 80043ba:	e0c1      	b.n	8004540 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	f040 80a1 	bne.w	8004508 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 809b 	beq.w	8004508 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8095 	beq.w	8004508 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d04e      	beq.n	80044a0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800440c:	8a3b      	ldrh	r3, [r7, #16]
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 8098 	beq.w	8004544 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004418:	8a3a      	ldrh	r2, [r7, #16]
 800441a:	429a      	cmp	r2, r3
 800441c:	f080 8092 	bcs.w	8004544 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	8a3a      	ldrh	r2, [r7, #16]
 8004424:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	2b20      	cmp	r3, #32
 800442e:	d02b      	beq.n	8004488 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800443e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695a      	ldr	r2, [r3, #20]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0201 	bic.w	r2, r2, #1
 800444e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695a      	ldr	r2, [r3, #20]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800445e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0210 	bic.w	r2, r2, #16
 800447c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	4618      	mov	r0, r3
 8004484:	f7fd f905 	bl	8001692 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004490:	b29b      	uxth	r3, r3
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	b29b      	uxth	r3, r3
 8004496:	4619      	mov	r1, r3
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f86d 	bl	8004578 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800449e:	e051      	b.n	8004544 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d047      	beq.n	8004548 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80044b8:	8a7b      	ldrh	r3, [r7, #18]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d044      	beq.n	8004548 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044cc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695a      	ldr	r2, [r3, #20]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0210 	bic.w	r2, r2, #16
 80044fa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044fc:	8a7b      	ldrh	r3, [r7, #18]
 80044fe:	4619      	mov	r1, r3
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f839 	bl	8004578 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004506:	e01f      	b.n	8004548 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <HAL_UART_IRQHandler+0x324>
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f8f9 	bl	8004714 <UART_Transmit_IT>
    return;
 8004522:	e012      	b.n	800454a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00d      	beq.n	800454a <HAL_UART_IRQHandler+0x34a>
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f93a 	bl	80047b2 <UART_EndTransmit_IT>
    return;
 800453e:	e004      	b.n	800454a <HAL_UART_IRQHandler+0x34a>
    return;
 8004540:	bf00      	nop
 8004542:	e002      	b.n	800454a <HAL_UART_IRQHandler+0x34a>
      return;
 8004544:	bf00      	nop
 8004546:	e000      	b.n	800454a <HAL_UART_IRQHandler+0x34a>
      return;
 8004548:	bf00      	nop
  }
}
 800454a:	3728      	adds	r7, #40	; 0x28
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	080046ed 	.word	0x080046ed

08004554 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr

08004566 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr

08004578 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr

0800458e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	603b      	str	r3, [r7, #0]
 800459a:	4613      	mov	r3, r2
 800459c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800459e:	e02c      	b.n	80045fa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045a6:	d028      	beq.n	80045fa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d007      	beq.n	80045be <UART_WaitOnFlagUntilTimeout+0x30>
 80045ae:	f7fc ff35 	bl	800141c <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d21d      	bcs.n	80045fa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045cc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	695a      	ldr	r2, [r3, #20]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0201 	bic.w	r2, r2, #1
 80045dc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e00f      	b.n	800461a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4013      	ands	r3, r2
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	429a      	cmp	r2, r3
 8004608:	bf0c      	ite	eq
 800460a:	2301      	moveq	r3, #1
 800460c:	2300      	movne	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	461a      	mov	r2, r3
 8004612:	79fb      	ldrb	r3, [r7, #7]
 8004614:	429a      	cmp	r2, r3
 8004616:	d0c3      	beq.n	80045a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004622:	b480      	push	{r7}
 8004624:	b085      	sub	sp, #20
 8004626:	af00      	add	r7, sp, #0
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	4613      	mov	r3, r2
 800462e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	88fa      	ldrh	r2, [r7, #6]
 800463a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	88fa      	ldrh	r2, [r7, #6]
 8004640:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2222      	movs	r2, #34	; 0x22
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68da      	ldr	r2, [r3, #12]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004666:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695a      	ldr	r2, [r3, #20]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0201 	orr.w	r2, r2, #1
 8004676:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0220 	orr.w	r2, r2, #32
 8004686:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046aa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695a      	ldr	r2, [r3, #20]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0201 	bic.w	r2, r2, #1
 80046ba:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d107      	bne.n	80046d4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0210 	bic.w	r2, r2, #16
 80046d2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bc80      	pop	{r7}
 80046ea:	4770      	bx	lr

080046ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f7ff ff2d 	bl	8004566 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b21      	cmp	r3, #33	; 0x21
 8004726:	d13e      	bne.n	80047a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004730:	d114      	bne.n	800475c <UART_Transmit_IT+0x48>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d110      	bne.n	800475c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800474e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	1c9a      	adds	r2, r3, #2
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	621a      	str	r2, [r3, #32]
 800475a:	e008      	b.n	800476e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	1c59      	adds	r1, r3, #1
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6211      	str	r1, [r2, #32]
 8004766:	781a      	ldrb	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	b29b      	uxth	r3, r3
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	4619      	mov	r1, r3
 800477c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10f      	bne.n	80047a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004790:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e000      	b.n	80047a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047a6:	2302      	movs	r3, #2
  }
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr

080047b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b082      	sub	sp, #8
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7ff febe 	bl	8004554 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b086      	sub	sp, #24
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b22      	cmp	r3, #34	; 0x22
 80047f4:	f040 8099 	bne.w	800492a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004800:	d117      	bne.n	8004832 <UART_Receive_IT+0x50>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d113      	bne.n	8004832 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004812:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	b29b      	uxth	r3, r3
 800481c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004820:	b29a      	uxth	r2, r3
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482a:	1c9a      	adds	r2, r3, #2
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	629a      	str	r2, [r3, #40]	; 0x28
 8004830:	e026      	b.n	8004880 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004836:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004838:	2300      	movs	r3, #0
 800483a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004844:	d007      	beq.n	8004856 <UART_Receive_IT+0x74>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10a      	bne.n	8004864 <UART_Receive_IT+0x82>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	b2da      	uxtb	r2, r3
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	701a      	strb	r2, [r3, #0]
 8004862:	e008      	b.n	8004876 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004870:	b2da      	uxtb	r2, r3
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004884:	b29b      	uxth	r3, r3
 8004886:	3b01      	subs	r3, #1
 8004888:	b29b      	uxth	r3, r3
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	4619      	mov	r1, r3
 800488e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004890:	2b00      	cmp	r3, #0
 8004892:	d148      	bne.n	8004926 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0220 	bic.w	r2, r2, #32
 80048a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695a      	ldr	r2, [r3, #20]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0201 	bic.w	r2, r2, #1
 80048c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d123      	bne.n	800491c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0210 	bic.w	r2, r2, #16
 80048e8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	d10a      	bne.n	800490e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048f8:	2300      	movs	r3, #0
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004912:	4619      	mov	r1, r3
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7ff fe2f 	bl	8004578 <HAL_UARTEx_RxEventCallback>
 800491a:	e002      	b.n	8004922 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7fc f993 	bl	8000c48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	e002      	b.n	800492c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	e000      	b.n	800492c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800492a:	2302      	movs	r3, #2
  }
}
 800492c:	4618      	mov	r0, r3
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800496e:	f023 030c 	bic.w	r3, r3, #12
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6812      	ldr	r2, [r2, #0]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	430b      	orrs	r3, r1
 800497a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a2c      	ldr	r2, [pc, #176]	; (8004a48 <UART_SetConfig+0x114>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d103      	bne.n	80049a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800499c:	f7fe f950 	bl	8002c40 <HAL_RCC_GetPCLK2Freq>
 80049a0:	60f8      	str	r0, [r7, #12]
 80049a2:	e002      	b.n	80049aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80049a4:	f7fe f938 	bl	8002c18 <HAL_RCC_GetPCLK1Freq>
 80049a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	009a      	lsls	r2, r3, #2
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	4a22      	ldr	r2, [pc, #136]	; (8004a4c <UART_SetConfig+0x118>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	0119      	lsls	r1, r3, #4
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4613      	mov	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	009a      	lsls	r2, r3, #2
 80049d4:	441a      	add	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80049e0:	4b1a      	ldr	r3, [pc, #104]	; (8004a4c <UART_SetConfig+0x118>)
 80049e2:	fba3 0302 	umull	r0, r3, r3, r2
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	2064      	movs	r0, #100	; 0x64
 80049ea:	fb00 f303 	mul.w	r3, r0, r3
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	3332      	adds	r3, #50	; 0x32
 80049f4:	4a15      	ldr	r2, [pc, #84]	; (8004a4c <UART_SetConfig+0x118>)
 80049f6:	fba2 2303 	umull	r2, r3, r2, r3
 80049fa:	095b      	lsrs	r3, r3, #5
 80049fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a00:	4419      	add	r1, r3
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	009a      	lsls	r2, r3, #2
 8004a0c:	441a      	add	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a18:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <UART_SetConfig+0x118>)
 8004a1a:	fba3 0302 	umull	r0, r3, r3, r2
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	2064      	movs	r0, #100	; 0x64
 8004a22:	fb00 f303 	mul.w	r3, r0, r3
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	3332      	adds	r3, #50	; 0x32
 8004a2c:	4a07      	ldr	r2, [pc, #28]	; (8004a4c <UART_SetConfig+0x118>)
 8004a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	f003 020f 	and.w	r2, r3, #15
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	440a      	add	r2, r1
 8004a3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a40:	bf00      	nop
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	40013800 	.word	0x40013800
 8004a4c:	51eb851f 	.word	0x51eb851f

08004a50 <__errno>:
 8004a50:	4b01      	ldr	r3, [pc, #4]	; (8004a58 <__errno+0x8>)
 8004a52:	6818      	ldr	r0, [r3, #0]
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	20000020 	.word	0x20000020

08004a5c <__libc_init_array>:
 8004a5c:	b570      	push	{r4, r5, r6, lr}
 8004a5e:	2600      	movs	r6, #0
 8004a60:	4d0c      	ldr	r5, [pc, #48]	; (8004a94 <__libc_init_array+0x38>)
 8004a62:	4c0d      	ldr	r4, [pc, #52]	; (8004a98 <__libc_init_array+0x3c>)
 8004a64:	1b64      	subs	r4, r4, r5
 8004a66:	10a4      	asrs	r4, r4, #2
 8004a68:	42a6      	cmp	r6, r4
 8004a6a:	d109      	bne.n	8004a80 <__libc_init_array+0x24>
 8004a6c:	f000 f962 	bl	8004d34 <_init>
 8004a70:	2600      	movs	r6, #0
 8004a72:	4d0a      	ldr	r5, [pc, #40]	; (8004a9c <__libc_init_array+0x40>)
 8004a74:	4c0a      	ldr	r4, [pc, #40]	; (8004aa0 <__libc_init_array+0x44>)
 8004a76:	1b64      	subs	r4, r4, r5
 8004a78:	10a4      	asrs	r4, r4, #2
 8004a7a:	42a6      	cmp	r6, r4
 8004a7c:	d105      	bne.n	8004a8a <__libc_init_array+0x2e>
 8004a7e:	bd70      	pop	{r4, r5, r6, pc}
 8004a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a84:	4798      	blx	r3
 8004a86:	3601      	adds	r6, #1
 8004a88:	e7ee      	b.n	8004a68 <__libc_init_array+0xc>
 8004a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a8e:	4798      	blx	r3
 8004a90:	3601      	adds	r6, #1
 8004a92:	e7f2      	b.n	8004a7a <__libc_init_array+0x1e>
 8004a94:	08004e04 	.word	0x08004e04
 8004a98:	08004e04 	.word	0x08004e04
 8004a9c:	08004e04 	.word	0x08004e04
 8004aa0:	08004e08 	.word	0x08004e08

08004aa4 <__itoa>:
 8004aa4:	1e93      	subs	r3, r2, #2
 8004aa6:	2b22      	cmp	r3, #34	; 0x22
 8004aa8:	b510      	push	{r4, lr}
 8004aaa:	460c      	mov	r4, r1
 8004aac:	d904      	bls.n	8004ab8 <__itoa+0x14>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	461c      	mov	r4, r3
 8004ab2:	700b      	strb	r3, [r1, #0]
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	bd10      	pop	{r4, pc}
 8004ab8:	2a0a      	cmp	r2, #10
 8004aba:	d109      	bne.n	8004ad0 <__itoa+0x2c>
 8004abc:	2800      	cmp	r0, #0
 8004abe:	da07      	bge.n	8004ad0 <__itoa+0x2c>
 8004ac0:	232d      	movs	r3, #45	; 0x2d
 8004ac2:	700b      	strb	r3, [r1, #0]
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	4240      	negs	r0, r0
 8004ac8:	4421      	add	r1, r4
 8004aca:	f000 f8e3 	bl	8004c94 <__utoa>
 8004ace:	e7f1      	b.n	8004ab4 <__itoa+0x10>
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	e7f9      	b.n	8004ac8 <__itoa+0x24>

08004ad4 <itoa>:
 8004ad4:	f7ff bfe6 	b.w	8004aa4 <__itoa>

08004ad8 <malloc>:
 8004ad8:	4b02      	ldr	r3, [pc, #8]	; (8004ae4 <malloc+0xc>)
 8004ada:	4601      	mov	r1, r0
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	f000 b85f 	b.w	8004ba0 <_malloc_r>
 8004ae2:	bf00      	nop
 8004ae4:	20000020 	.word	0x20000020

08004ae8 <free>:
 8004ae8:	4b02      	ldr	r3, [pc, #8]	; (8004af4 <free+0xc>)
 8004aea:	4601      	mov	r1, r0
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	f000 b80b 	b.w	8004b08 <_free_r>
 8004af2:	bf00      	nop
 8004af4:	20000020 	.word	0x20000020

08004af8 <memset>:
 8004af8:	4603      	mov	r3, r0
 8004afa:	4402      	add	r2, r0
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d100      	bne.n	8004b02 <memset+0xa>
 8004b00:	4770      	bx	lr
 8004b02:	f803 1b01 	strb.w	r1, [r3], #1
 8004b06:	e7f9      	b.n	8004afc <memset+0x4>

08004b08 <_free_r>:
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	4605      	mov	r5, r0
 8004b0c:	2900      	cmp	r1, #0
 8004b0e:	d043      	beq.n	8004b98 <_free_r+0x90>
 8004b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b14:	1f0c      	subs	r4, r1, #4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	bfb8      	it	lt
 8004b1a:	18e4      	addlt	r4, r4, r3
 8004b1c:	f000 f8fc 	bl	8004d18 <__malloc_lock>
 8004b20:	4a1e      	ldr	r2, [pc, #120]	; (8004b9c <_free_r+0x94>)
 8004b22:	6813      	ldr	r3, [r2, #0]
 8004b24:	4610      	mov	r0, r2
 8004b26:	b933      	cbnz	r3, 8004b36 <_free_r+0x2e>
 8004b28:	6063      	str	r3, [r4, #4]
 8004b2a:	6014      	str	r4, [r2, #0]
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b32:	f000 b8f7 	b.w	8004d24 <__malloc_unlock>
 8004b36:	42a3      	cmp	r3, r4
 8004b38:	d90a      	bls.n	8004b50 <_free_r+0x48>
 8004b3a:	6821      	ldr	r1, [r4, #0]
 8004b3c:	1862      	adds	r2, r4, r1
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	bf01      	itttt	eq
 8004b42:	681a      	ldreq	r2, [r3, #0]
 8004b44:	685b      	ldreq	r3, [r3, #4]
 8004b46:	1852      	addeq	r2, r2, r1
 8004b48:	6022      	streq	r2, [r4, #0]
 8004b4a:	6063      	str	r3, [r4, #4]
 8004b4c:	6004      	str	r4, [r0, #0]
 8004b4e:	e7ed      	b.n	8004b2c <_free_r+0x24>
 8004b50:	461a      	mov	r2, r3
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	b10b      	cbz	r3, 8004b5a <_free_r+0x52>
 8004b56:	42a3      	cmp	r3, r4
 8004b58:	d9fa      	bls.n	8004b50 <_free_r+0x48>
 8004b5a:	6811      	ldr	r1, [r2, #0]
 8004b5c:	1850      	adds	r0, r2, r1
 8004b5e:	42a0      	cmp	r0, r4
 8004b60:	d10b      	bne.n	8004b7a <_free_r+0x72>
 8004b62:	6820      	ldr	r0, [r4, #0]
 8004b64:	4401      	add	r1, r0
 8004b66:	1850      	adds	r0, r2, r1
 8004b68:	4283      	cmp	r3, r0
 8004b6a:	6011      	str	r1, [r2, #0]
 8004b6c:	d1de      	bne.n	8004b2c <_free_r+0x24>
 8004b6e:	6818      	ldr	r0, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	4401      	add	r1, r0
 8004b74:	6011      	str	r1, [r2, #0]
 8004b76:	6053      	str	r3, [r2, #4]
 8004b78:	e7d8      	b.n	8004b2c <_free_r+0x24>
 8004b7a:	d902      	bls.n	8004b82 <_free_r+0x7a>
 8004b7c:	230c      	movs	r3, #12
 8004b7e:	602b      	str	r3, [r5, #0]
 8004b80:	e7d4      	b.n	8004b2c <_free_r+0x24>
 8004b82:	6820      	ldr	r0, [r4, #0]
 8004b84:	1821      	adds	r1, r4, r0
 8004b86:	428b      	cmp	r3, r1
 8004b88:	bf01      	itttt	eq
 8004b8a:	6819      	ldreq	r1, [r3, #0]
 8004b8c:	685b      	ldreq	r3, [r3, #4]
 8004b8e:	1809      	addeq	r1, r1, r0
 8004b90:	6021      	streq	r1, [r4, #0]
 8004b92:	6063      	str	r3, [r4, #4]
 8004b94:	6054      	str	r4, [r2, #4]
 8004b96:	e7c9      	b.n	8004b2c <_free_r+0x24>
 8004b98:	bd38      	pop	{r3, r4, r5, pc}
 8004b9a:	bf00      	nop
 8004b9c:	200004f8 	.word	0x200004f8

08004ba0 <_malloc_r>:
 8004ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba2:	1ccd      	adds	r5, r1, #3
 8004ba4:	f025 0503 	bic.w	r5, r5, #3
 8004ba8:	3508      	adds	r5, #8
 8004baa:	2d0c      	cmp	r5, #12
 8004bac:	bf38      	it	cc
 8004bae:	250c      	movcc	r5, #12
 8004bb0:	2d00      	cmp	r5, #0
 8004bb2:	4606      	mov	r6, r0
 8004bb4:	db01      	blt.n	8004bba <_malloc_r+0x1a>
 8004bb6:	42a9      	cmp	r1, r5
 8004bb8:	d903      	bls.n	8004bc2 <_malloc_r+0x22>
 8004bba:	230c      	movs	r3, #12
 8004bbc:	6033      	str	r3, [r6, #0]
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bc2:	f000 f8a9 	bl	8004d18 <__malloc_lock>
 8004bc6:	4921      	ldr	r1, [pc, #132]	; (8004c4c <_malloc_r+0xac>)
 8004bc8:	680a      	ldr	r2, [r1, #0]
 8004bca:	4614      	mov	r4, r2
 8004bcc:	b99c      	cbnz	r4, 8004bf6 <_malloc_r+0x56>
 8004bce:	4f20      	ldr	r7, [pc, #128]	; (8004c50 <_malloc_r+0xb0>)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	b923      	cbnz	r3, 8004bde <_malloc_r+0x3e>
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	4630      	mov	r0, r6
 8004bd8:	f000 f83c 	bl	8004c54 <_sbrk_r>
 8004bdc:	6038      	str	r0, [r7, #0]
 8004bde:	4629      	mov	r1, r5
 8004be0:	4630      	mov	r0, r6
 8004be2:	f000 f837 	bl	8004c54 <_sbrk_r>
 8004be6:	1c43      	adds	r3, r0, #1
 8004be8:	d123      	bne.n	8004c32 <_malloc_r+0x92>
 8004bea:	230c      	movs	r3, #12
 8004bec:	4630      	mov	r0, r6
 8004bee:	6033      	str	r3, [r6, #0]
 8004bf0:	f000 f898 	bl	8004d24 <__malloc_unlock>
 8004bf4:	e7e3      	b.n	8004bbe <_malloc_r+0x1e>
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	1b5b      	subs	r3, r3, r5
 8004bfa:	d417      	bmi.n	8004c2c <_malloc_r+0x8c>
 8004bfc:	2b0b      	cmp	r3, #11
 8004bfe:	d903      	bls.n	8004c08 <_malloc_r+0x68>
 8004c00:	6023      	str	r3, [r4, #0]
 8004c02:	441c      	add	r4, r3
 8004c04:	6025      	str	r5, [r4, #0]
 8004c06:	e004      	b.n	8004c12 <_malloc_r+0x72>
 8004c08:	6863      	ldr	r3, [r4, #4]
 8004c0a:	42a2      	cmp	r2, r4
 8004c0c:	bf0c      	ite	eq
 8004c0e:	600b      	streq	r3, [r1, #0]
 8004c10:	6053      	strne	r3, [r2, #4]
 8004c12:	4630      	mov	r0, r6
 8004c14:	f000 f886 	bl	8004d24 <__malloc_unlock>
 8004c18:	f104 000b 	add.w	r0, r4, #11
 8004c1c:	1d23      	adds	r3, r4, #4
 8004c1e:	f020 0007 	bic.w	r0, r0, #7
 8004c22:	1ac2      	subs	r2, r0, r3
 8004c24:	d0cc      	beq.n	8004bc0 <_malloc_r+0x20>
 8004c26:	1a1b      	subs	r3, r3, r0
 8004c28:	50a3      	str	r3, [r4, r2]
 8004c2a:	e7c9      	b.n	8004bc0 <_malloc_r+0x20>
 8004c2c:	4622      	mov	r2, r4
 8004c2e:	6864      	ldr	r4, [r4, #4]
 8004c30:	e7cc      	b.n	8004bcc <_malloc_r+0x2c>
 8004c32:	1cc4      	adds	r4, r0, #3
 8004c34:	f024 0403 	bic.w	r4, r4, #3
 8004c38:	42a0      	cmp	r0, r4
 8004c3a:	d0e3      	beq.n	8004c04 <_malloc_r+0x64>
 8004c3c:	1a21      	subs	r1, r4, r0
 8004c3e:	4630      	mov	r0, r6
 8004c40:	f000 f808 	bl	8004c54 <_sbrk_r>
 8004c44:	3001      	adds	r0, #1
 8004c46:	d1dd      	bne.n	8004c04 <_malloc_r+0x64>
 8004c48:	e7cf      	b.n	8004bea <_malloc_r+0x4a>
 8004c4a:	bf00      	nop
 8004c4c:	200004f8 	.word	0x200004f8
 8004c50:	200004fc 	.word	0x200004fc

08004c54 <_sbrk_r>:
 8004c54:	b538      	push	{r3, r4, r5, lr}
 8004c56:	2300      	movs	r3, #0
 8004c58:	4d05      	ldr	r5, [pc, #20]	; (8004c70 <_sbrk_r+0x1c>)
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	4608      	mov	r0, r1
 8004c5e:	602b      	str	r3, [r5, #0]
 8004c60:	f7fc fb06 	bl	8001270 <_sbrk>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	d102      	bne.n	8004c6e <_sbrk_r+0x1a>
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	b103      	cbz	r3, 8004c6e <_sbrk_r+0x1a>
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	20000680 	.word	0x20000680

08004c74 <strcat>:
 8004c74:	4602      	mov	r2, r0
 8004c76:	b510      	push	{r4, lr}
 8004c78:	7814      	ldrb	r4, [r2, #0]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	3201      	adds	r2, #1
 8004c7e:	2c00      	cmp	r4, #0
 8004c80:	d1fa      	bne.n	8004c78 <strcat+0x4>
 8004c82:	3b01      	subs	r3, #1
 8004c84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c88:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c8c:	2a00      	cmp	r2, #0
 8004c8e:	d1f9      	bne.n	8004c84 <strcat+0x10>
 8004c90:	bd10      	pop	{r4, pc}
	...

08004c94 <__utoa>:
 8004c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c96:	b08b      	sub	sp, #44	; 0x2c
 8004c98:	4605      	mov	r5, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	466e      	mov	r6, sp
 8004c9e:	4c1d      	ldr	r4, [pc, #116]	; (8004d14 <__utoa+0x80>)
 8004ca0:	f104 0c20 	add.w	ip, r4, #32
 8004ca4:	4637      	mov	r7, r6
 8004ca6:	6820      	ldr	r0, [r4, #0]
 8004ca8:	6861      	ldr	r1, [r4, #4]
 8004caa:	3408      	adds	r4, #8
 8004cac:	c703      	stmia	r7!, {r0, r1}
 8004cae:	4564      	cmp	r4, ip
 8004cb0:	463e      	mov	r6, r7
 8004cb2:	d1f7      	bne.n	8004ca4 <__utoa+0x10>
 8004cb4:	7921      	ldrb	r1, [r4, #4]
 8004cb6:	6820      	ldr	r0, [r4, #0]
 8004cb8:	7139      	strb	r1, [r7, #4]
 8004cba:	1e91      	subs	r1, r2, #2
 8004cbc:	2922      	cmp	r1, #34	; 0x22
 8004cbe:	6038      	str	r0, [r7, #0]
 8004cc0:	f04f 0100 	mov.w	r1, #0
 8004cc4:	d904      	bls.n	8004cd0 <__utoa+0x3c>
 8004cc6:	7019      	strb	r1, [r3, #0]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4618      	mov	r0, r3
 8004ccc:	b00b      	add	sp, #44	; 0x2c
 8004cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cd0:	1e58      	subs	r0, r3, #1
 8004cd2:	4684      	mov	ip, r0
 8004cd4:	fbb5 f7f2 	udiv	r7, r5, r2
 8004cd8:	fb02 5617 	mls	r6, r2, r7, r5
 8004cdc:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8004ce0:	4476      	add	r6, lr
 8004ce2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004cec:	462e      	mov	r6, r5
 8004cee:	42b2      	cmp	r2, r6
 8004cf0:	463d      	mov	r5, r7
 8004cf2:	f101 0101 	add.w	r1, r1, #1
 8004cf6:	d9ed      	bls.n	8004cd4 <__utoa+0x40>
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	545a      	strb	r2, [r3, r1]
 8004cfc:	1919      	adds	r1, r3, r4
 8004cfe:	1aa5      	subs	r5, r4, r2
 8004d00:	42aa      	cmp	r2, r5
 8004d02:	dae2      	bge.n	8004cca <__utoa+0x36>
 8004d04:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004d08:	780e      	ldrb	r6, [r1, #0]
 8004d0a:	3201      	adds	r2, #1
 8004d0c:	7006      	strb	r6, [r0, #0]
 8004d0e:	f801 5901 	strb.w	r5, [r1], #-1
 8004d12:	e7f4      	b.n	8004cfe <__utoa+0x6a>
 8004d14:	08004ddc 	.word	0x08004ddc

08004d18 <__malloc_lock>:
 8004d18:	4801      	ldr	r0, [pc, #4]	; (8004d20 <__malloc_lock+0x8>)
 8004d1a:	f000 b809 	b.w	8004d30 <__retarget_lock_acquire_recursive>
 8004d1e:	bf00      	nop
 8004d20:	20000688 	.word	0x20000688

08004d24 <__malloc_unlock>:
 8004d24:	4801      	ldr	r0, [pc, #4]	; (8004d2c <__malloc_unlock+0x8>)
 8004d26:	f000 b804 	b.w	8004d32 <__retarget_lock_release_recursive>
 8004d2a:	bf00      	nop
 8004d2c:	20000688 	.word	0x20000688

08004d30 <__retarget_lock_acquire_recursive>:
 8004d30:	4770      	bx	lr

08004d32 <__retarget_lock_release_recursive>:
 8004d32:	4770      	bx	lr

08004d34 <_init>:
 8004d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d36:	bf00      	nop
 8004d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3a:	bc08      	pop	{r3}
 8004d3c:	469e      	mov	lr, r3
 8004d3e:	4770      	bx	lr

08004d40 <_fini>:
 8004d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d42:	bf00      	nop
 8004d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d46:	bc08      	pop	{r3}
 8004d48:	469e      	mov	lr, r3
 8004d4a:	4770      	bx	lr
