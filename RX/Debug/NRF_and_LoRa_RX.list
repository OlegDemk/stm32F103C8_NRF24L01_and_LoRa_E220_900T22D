
NRF_and_LoRa_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005678  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000840  08005784  08005784  00015784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fc4  08005fc4  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08005fc4  08005fc4  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fc4  08005fc4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fc4  08005fc4  00015fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fc8  08005fc8  00015fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  20000088  08006054  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d8  08006054  000206d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163db  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df1  00000000  00000000  0003648c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  00039280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  0003a568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000033a8  00000000  00000000  0003b758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017384  00000000  00000000  0003eb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000902e2  00000000  00000000  00055e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6166  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005420  00000000  00000000  000e61bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	0800576c 	.word	0x0800576c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	0800576c 	.word	0x0800576c

0800014c <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000154:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <DelayMicro+0x3c>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <DelayMicro+0x3c>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4a0b      	ldr	r2, [pc, #44]	; (800018c <DelayMicro+0x40>)
 8000160:	fba2 2303 	umull	r2, r3, r2, r3
 8000164:	0ddb      	lsrs	r3, r3, #23
 8000166:	687a      	ldr	r2, [r7, #4]
 8000168:	fb02 f303 	mul.w	r3, r2, r3
 800016c:	607b      	str	r3, [r7, #4]
	while (micros--);
 800016e:	bf00      	nop
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	1e5a      	subs	r2, r3, #1
 8000174:	607a      	str	r2, [r7, #4]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d1fa      	bne.n	8000170 <DelayMicro+0x24>
}
 800017a:	bf00      	nop
 800017c:	bf00      	nop
 800017e:	3714      	adds	r7, #20
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	20000018 	.word	0x20000018
 800018c:	ffa71ee7 	.word	0xffa71ee7

08000190 <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b086      	sub	sp, #24
 8000194:	af02      	add	r7, sp, #8
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 800019a:	2300      	movs	r3, #0
 800019c:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 800019e:	2200      	movs	r2, #0
 80001a0:	2110      	movs	r1, #16
 80001a2:	4813      	ldr	r0, [pc, #76]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001a4:	f001 ff53 	bl	800204e <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 80001a8:	f107 020f 	add.w	r2, r7, #15
 80001ac:	1df9      	adds	r1, r7, #7
 80001ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b2:	9300      	str	r3, [sp, #0]
 80001b4:	2301      	movs	r3, #1
 80001b6:	480f      	ldr	r0, [pc, #60]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001b8:	f003 fad7 	bl	800376a <HAL_SPI_TransmitReceive>
  if (addr!=STATUS_NRF)
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	2b07      	cmp	r3, #7
 80001c0:	d00c      	beq.n	80001dc <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 80001c2:	23ff      	movs	r3, #255	; 0xff
 80001c4:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 80001c6:	f107 020f 	add.w	r2, r7, #15
 80001ca:	f107 010e 	add.w	r1, r7, #14
 80001ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d2:	9300      	str	r3, [sp, #0]
 80001d4:	2301      	movs	r3, #1
 80001d6:	4807      	ldr	r0, [pc, #28]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001d8:	f003 fac7 	bl	800376a <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 80001dc:	2201      	movs	r2, #1
 80001de:	2110      	movs	r1, #16
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001e2:	f001 ff34 	bl	800204e <HAL_GPIO_WritePin>
  return dt;
 80001e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3710      	adds	r7, #16
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40010800 	.word	0x40010800
 80001f4:	2000066c 	.word	0x2000066c

080001f8 <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	460a      	mov	r2, r1
 8000202:	71fb      	strb	r3, [r7, #7]
 8000204:	4613      	mov	r3, r2
 8000206:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	f043 0320 	orr.w	r3, r3, #32
 800020e:	b2db      	uxtb	r3, r3
 8000210:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	480d      	ldr	r0, [pc, #52]	; (800024c <NRF24_WriteReg+0x54>)
 8000218:	f001 ff19 	bl	800204e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800021c:	1df9      	adds	r1, r7, #7
 800021e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000222:	2201      	movs	r2, #1
 8000224:	480a      	ldr	r0, [pc, #40]	; (8000250 <NRF24_WriteReg+0x58>)
 8000226:	f003 f853 	bl	80032d0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 800022a:	1db9      	adds	r1, r7, #6
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	2201      	movs	r2, #1
 8000232:	4807      	ldr	r0, [pc, #28]	; (8000250 <NRF24_WriteReg+0x58>)
 8000234:	f003 f84c 	bl	80032d0 <HAL_SPI_Transmit>
  CS_OFF;
 8000238:	2201      	movs	r2, #1
 800023a:	2110      	movs	r1, #16
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <NRF24_WriteReg+0x54>)
 800023e:	f001 ff06 	bl	800204e <HAL_GPIO_WritePin>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40010800 	.word	0x40010800
 8000250:	2000066c 	.word	0x2000066c

08000254 <NRF24_ToggleFeatures>:
//----------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 800025a:	2350      	movs	r3, #80	; 0x50
 800025c:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800025e:	2200      	movs	r2, #0
 8000260:	2110      	movs	r1, #16
 8000262:	480f      	ldr	r0, [pc, #60]	; (80002a0 <NRF24_ToggleFeatures+0x4c>)
 8000264:	f001 fef3 	bl	800204e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000268:	1d39      	adds	r1, r7, #4
 800026a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800026e:	2201      	movs	r2, #1
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <NRF24_ToggleFeatures+0x50>)
 8000272:	f003 f82d 	bl	80032d0 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000276:	2001      	movs	r0, #1
 8000278:	f7ff ff68 	bl	800014c <DelayMicro>
  dt[0] = 0x73;
 800027c:	2373      	movs	r3, #115	; 0x73
 800027e:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000280:	1d39      	adds	r1, r7, #4
 8000282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000286:	2201      	movs	r2, #1
 8000288:	4806      	ldr	r0, [pc, #24]	; (80002a4 <NRF24_ToggleFeatures+0x50>)
 800028a:	f003 f821 	bl	80032d0 <HAL_SPI_Transmit>
  CS_OFF;
 800028e:	2201      	movs	r2, #1
 8000290:	2110      	movs	r1, #16
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <NRF24_ToggleFeatures+0x4c>)
 8000294:	f001 fedb 	bl	800204e <HAL_GPIO_WritePin>
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40010800 	.word	0x40010800
 80002a4:	2000066c 	.word	0x2000066c

080002a8 <NRF24_Read_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	6039      	str	r1, [r7, #0]
 80002b2:	71fb      	strb	r3, [r7, #7]
 80002b4:	4613      	mov	r3, r2
 80002b6:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 80002b8:	2200      	movs	r2, #0
 80002ba:	2110      	movs	r1, #16
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <NRF24_Read_Buf+0x4c>)
 80002be:	f001 fec6 	bl	800204e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 80002c2:	1df9      	adds	r1, r7, #7
 80002c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c8:	2201      	movs	r2, #1
 80002ca:	480b      	ldr	r0, [pc, #44]	; (80002f8 <NRF24_Read_Buf+0x50>)
 80002cc:	f003 f800 	bl	80032d0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 80002d0:	79bb      	ldrb	r3, [r7, #6]
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d8:	6839      	ldr	r1, [r7, #0]
 80002da:	4807      	ldr	r0, [pc, #28]	; (80002f8 <NRF24_Read_Buf+0x50>)
 80002dc:	f003 f934 	bl	8003548 <HAL_SPI_Receive>
  CS_OFF;
 80002e0:	2201      	movs	r2, #1
 80002e2:	2110      	movs	r1, #16
 80002e4:	4803      	ldr	r0, [pc, #12]	; (80002f4 <NRF24_Read_Buf+0x4c>)
 80002e6:	f001 feb2 	bl	800204e <HAL_GPIO_WritePin>
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40010800 	.word	0x40010800
 80002f8:	2000066c 	.word	0x2000066c

080002fc <NRF24_Write_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]
 8000308:	4613      	mov	r3, r2
 800030a:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								//Add write bit
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	f043 0320 	orr.w	r3, r3, #32
 8000312:	b2db      	uxtb	r3, r3
 8000314:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000316:	2200      	movs	r2, #0
 8000318:	2110      	movs	r1, #16
 800031a:	480f      	ldr	r0, [pc, #60]	; (8000358 <NRF24_Write_Buf+0x5c>)
 800031c:	f001 fe97 	bl	800204e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000320:	1df9      	adds	r1, r7, #7
 8000322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000326:	2201      	movs	r2, #1
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <NRF24_Write_Buf+0x60>)
 800032a:	f002 ffd1 	bl	80032d0 <HAL_SPI_Transmit>
  DelayMicro(1);
 800032e:	2001      	movs	r0, #1
 8000330:	f7ff ff0c 	bl	800014c <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000);			// Send data in buffer
 8000334:	79bb      	ldrb	r3, [r7, #6]
 8000336:	b29a      	uxth	r2, r3
 8000338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033c:	6839      	ldr	r1, [r7, #0]
 800033e:	4807      	ldr	r0, [pc, #28]	; (800035c <NRF24_Write_Buf+0x60>)
 8000340:	f002 ffc6 	bl	80032d0 <HAL_SPI_Transmit>
  CS_OFF;
 8000344:	2201      	movs	r2, #1
 8000346:	2110      	movs	r1, #16
 8000348:	4803      	ldr	r0, [pc, #12]	; (8000358 <NRF24_Write_Buf+0x5c>)
 800034a:	f001 fe80 	bl	800204e <HAL_GPIO_WritePin>
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010800 	.word	0x40010800
 800035c:	2000066c 	.word	0x2000066c

08000360 <NRF24_FlushRX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushRX(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 8000366:	23e2      	movs	r3, #226	; 0xe2
 8000368:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800036a:	2200      	movs	r2, #0
 800036c:	2110      	movs	r1, #16
 800036e:	480b      	ldr	r0, [pc, #44]	; (800039c <NRF24_FlushRX+0x3c>)
 8000370:	f001 fe6d 	bl	800204e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000374:	1d39      	adds	r1, r7, #4
 8000376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800037a:	2201      	movs	r2, #1
 800037c:	4808      	ldr	r0, [pc, #32]	; (80003a0 <NRF24_FlushRX+0x40>)
 800037e:	f002 ffa7 	bl	80032d0 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000382:	2001      	movs	r0, #1
 8000384:	f7ff fee2 	bl	800014c <DelayMicro>
  CS_OFF;
 8000388:	2201      	movs	r2, #1
 800038a:	2110      	movs	r1, #16
 800038c:	4803      	ldr	r0, [pc, #12]	; (800039c <NRF24_FlushRX+0x3c>)
 800038e:	f001 fe5e 	bl	800204e <HAL_GPIO_WritePin>
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40010800 	.word	0x40010800
 80003a0:	2000066c 	.word	0x2000066c

080003a4 <NRF24_FlushTX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushTX(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 80003aa:	23e1      	movs	r3, #225	; 0xe1
 80003ac:	713b      	strb	r3, [r7, #4]
  CS_ON;
 80003ae:	2200      	movs	r2, #0
 80003b0:	2110      	movs	r1, #16
 80003b2:	480b      	ldr	r0, [pc, #44]	; (80003e0 <NRF24_FlushTX+0x3c>)
 80003b4:	f001 fe4b 	bl	800204e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 80003b8:	1d39      	adds	r1, r7, #4
 80003ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003be:	2201      	movs	r2, #1
 80003c0:	4808      	ldr	r0, [pc, #32]	; (80003e4 <NRF24_FlushTX+0x40>)
 80003c2:	f002 ff85 	bl	80032d0 <HAL_SPI_Transmit>
  DelayMicro(1);
 80003c6:	2001      	movs	r0, #1
 80003c8:	f7ff fec0 	bl	800014c <DelayMicro>
  CS_OFF;
 80003cc:	2201      	movs	r2, #1
 80003ce:	2110      	movs	r1, #16
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <NRF24_FlushTX+0x3c>)
 80003d2:	f001 fe3c 	bl	800204e <HAL_GPIO_WritePin>
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40010800 	.word	0x40010800
 80003e4:	2000066c 	.word	0x2000066c

080003e8 <NRF24L01_RX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 80003ee:	2300      	movs	r3, #0
 80003f0:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 80003f2:	2000      	movs	r0, #0
 80003f4:	f7ff fecc 	bl	8000190 <NRF24_ReadReg>
 80003f8:	4603      	mov	r3, r0
 80003fa:	71fb      	strb	r3, [r7, #7]

  regval |= (1<<PWR_UP) | (1<<PRIM_RX);    	// Power up module. Write PWR_UP and PRIM_RX bits
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	f043 0303 	orr.w	r3, r3, #3
 8000402:	71fb      	strb	r3, [r7, #7]

  NRF24_WriteReg(CONFIG,regval);
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	4619      	mov	r1, r3
 8000408:	2000      	movs	r0, #0
 800040a:	f7ff fef5 	bl	80001f8 <NRF24_WriteReg>

  NRF24_WriteReg(CONFIG, 0x33);     		//  IRQ WORK  ~ 130 us
 800040e:	2133      	movs	r1, #51	; 0x33
 8000410:	2000      	movs	r0, #0
 8000412:	f7ff fef1 	bl	80001f8 <NRF24_WriteReg>

  CE_SET;
 8000416:	2201      	movs	r2, #1
 8000418:	2108      	movs	r1, #8
 800041a:	4807      	ldr	r0, [pc, #28]	; (8000438 <NRF24L01_RX_Mode+0x50>)
 800041c:	f001 fe17 	bl	800204e <HAL_GPIO_WritePin>
  DelayMicro(150); // Delay 130 us
 8000420:	2096      	movs	r0, #150	; 0x96
 8000422:	f7ff fe93 	bl	800014c <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 8000426:	f7ff ff9b 	bl	8000360 <NRF24_FlushRX>
  NRF24_FlushTX();
 800042a:	f7ff ffbb 	bl	80003a4 <NRF24_FlushTX>
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40010800 	.word	0x40010800

0800043c <read_config_registers>:
	NRF24L01_RX_Mode();
}
//----------------------------------------------------------------------------------------
// Read config data from nrf registers
bool read_config_registers(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8000440:	2064      	movs	r0, #100	; 0x64
 8000442:	f001 fa87 	bl	8001954 <HAL_Delay>

	config_array[0] = NRF24_ReadReg(CONFIG);			// 0x0B
 8000446:	2000      	movs	r0, #0
 8000448:	f7ff fea2 	bl	8000190 <NRF24_ReadReg>
 800044c:	4603      	mov	r3, r0
 800044e:	461a      	mov	r2, r3
 8000450:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <read_config_registers+0x78>)
 8000452:	701a      	strb	r2, [r3, #0]
	config_array[1] = NRF24_ReadReg(EN_AA);			    // 0x01
 8000454:	2001      	movs	r0, #1
 8000456:	f7ff fe9b 	bl	8000190 <NRF24_ReadReg>
 800045a:	4603      	mov	r3, r0
 800045c:	461a      	mov	r2, r3
 800045e:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <read_config_registers+0x78>)
 8000460:	705a      	strb	r2, [r3, #1]
	config_array[2] = NRF24_ReadReg(EN_RXADDR); 		// 0x01
 8000462:	2002      	movs	r0, #2
 8000464:	f7ff fe94 	bl	8000190 <NRF24_ReadReg>
 8000468:	4603      	mov	r3, r0
 800046a:	461a      	mov	r2, r3
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <read_config_registers+0x78>)
 800046e:	709a      	strb	r2, [r3, #2]
	config_array[3] = NRF24_ReadReg(STATUS_NRF);		// 0x0E
 8000470:	2007      	movs	r0, #7
 8000472:	f7ff fe8d 	bl	8000190 <NRF24_ReadReg>
 8000476:	4603      	mov	r3, r0
 8000478:	461a      	mov	r2, r3
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <read_config_registers+0x78>)
 800047c:	70da      	strb	r2, [r3, #3]
	config_array[4] = NRF24_ReadReg(RF_SETUP);		    // 0x06
 800047e:	2006      	movs	r0, #6
 8000480:	f7ff fe86 	bl	8000190 <NRF24_ReadReg>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <read_config_registers+0x78>)
 800048a:	711a      	strb	r2, [r3, #4]

	NRF24_Read_Buf(TX_ADDR,buf1,3);
 800048c:	2203      	movs	r2, #3
 800048e:	490a      	ldr	r1, [pc, #40]	; (80004b8 <read_config_registers+0x7c>)
 8000490:	2010      	movs	r0, #16
 8000492:	f7ff ff09 	bl	80002a8 <NRF24_Read_Buf>
	NRF24_Read_Buf(RX_ADDR_P0,buf1,3);
 8000496:	2203      	movs	r2, #3
 8000498:	4907      	ldr	r1, [pc, #28]	; (80004b8 <read_config_registers+0x7c>)
 800049a:	200a      	movs	r0, #10
 800049c:	f7ff ff04 	bl	80002a8 <NRF24_Read_Buf>

	if(config_array[0] == 0)		// Data from nrf module was read
 80004a0:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <read_config_registers+0x78>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d101      	bne.n	80004ac <read_config_registers+0x70>
	{
		return false;
 80004a8:	2300      	movs	r3, #0
 80004aa:	e000      	b.n	80004ae <read_config_registers+0x72>
	}
	else
	{
		return true;
 80004ac:	2301      	movs	r3, #1
	}
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	200000b0 	.word	0x200000b0
 80004b8:	200000c0 	.word	0x200000c0

080004bc <IRQ_Callback>:
	status = read_config_registers();
	return status;
}
//----------------------------------------------------------------------------------------
void IRQ_Callback(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 80004c2:	2301      	movs	r3, #1
 80004c4:	71fb      	strb	r3, [r7, #7]
	uint16_t dt=0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80004ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ce:	4814      	ldr	r0, [pc, #80]	; (8000520 <IRQ_Callback+0x64>)
 80004d0:	f001 fdd5 	bl	800207e <HAL_GPIO_TogglePin>

	DelayMicro(10);
 80004d4:	200a      	movs	r0, #10
 80004d6:	f7ff fe39 	bl	800014c <DelayMicro>

	status = NRF24_ReadReg(STATUS_NRF);
 80004da:	2007      	movs	r0, #7
 80004dc:	f7ff fe58 	bl	8000190 <NRF24_ReadReg>
 80004e0:	4603      	mov	r3, r0
 80004e2:	71fb      	strb	r3, [r7, #7]
	if(status & 0x40)									    //	Flag: Data ready in FIFO  (Check RX_DR flag)
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d013      	beq.n	8000516 <IRQ_Callback+0x5a>
	{
		pipe = (status>>1) & 0x07;
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	085b      	lsrs	r3, r3, #1
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	f003 0307 	and.w	r3, r3, #7
 80004f8:	b2da      	uxtb	r2, r3
 80004fa:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <IRQ_Callback+0x68>)
 80004fc:	701a      	strb	r2, [r3, #0]
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 80004fe:	220a      	movs	r2, #10
 8000500:	4909      	ldr	r1, [pc, #36]	; (8000528 <IRQ_Callback+0x6c>)
 8000502:	2061      	movs	r0, #97	; 0x61
 8000504:	f7ff fed0 	bl	80002a8 <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS_NRF, 0x40);					// For turn down interrupt in nrf module
 8000508:	2140      	movs	r1, #64	; 0x40
 800050a:	2007      	movs	r0, #7
 800050c:	f7ff fe74 	bl	80001f8 <NRF24_WriteReg>
		rx_flag = 1;
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <IRQ_Callback+0x70>)
 8000512:	2201      	movs	r2, #1
 8000514:	701a      	strb	r2, [r3, #0]
	}
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40011000 	.word	0x40011000
 8000524:	200000e8 	.word	0x200000e8
 8000528:	200000a4 	.word	0x200000a4
 800052c:	200000ae 	.word	0x200000ae

08000530 <NRF24_ini_tx_mode>:
//----------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------
void NRF24_ini_tx_mode(void)    // TRANSMITTER
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	CE_RESET;
 8000534:	2200      	movs	r2, #0
 8000536:	2108      	movs	r1, #8
 8000538:	4824      	ldr	r0, [pc, #144]	; (80005cc <NRF24_ini_tx_mode+0x9c>)
 800053a:	f001 fd88 	bl	800204e <HAL_GPIO_WritePin>
	DelayMicro(5000);
 800053e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000542:	f7ff fe03 	bl	800014c <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 8000546:	210a      	movs	r1, #10
 8000548:	2000      	movs	r0, #0
 800054a:	f7ff fe55 	bl	80001f8 <NRF24_WriteReg>

	DelayMicro(5000);
 800054e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000552:	f7ff fdfb 	bl	800014c <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable Pipe0
 8000556:	2101      	movs	r1, #1
 8000558:	2001      	movs	r0, #1
 800055a:	f7ff fe4d 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe0
 800055e:	2101      	movs	r1, #1
 8000560:	2002      	movs	r0, #2
 8000562:	f7ff fe49 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 8000566:	2101      	movs	r1, #1
 8000568:	2003      	movs	r0, #3
 800056a:	f7ff fe45 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 800056e:	215f      	movs	r1, #95	; 0x5f
 8000570:	2004      	movs	r0, #4
 8000572:	f7ff fe41 	bl	80001f8 <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 8000576:	f7ff fe6d 	bl	8000254 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 800057a:	2100      	movs	r1, #0
 800057c:	201d      	movs	r0, #29
 800057e:	f7ff fe3b 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 8000582:	2100      	movs	r1, #0
 8000584:	201c      	movs	r0, #28
 8000586:	f7ff fe37 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 800058a:	2170      	movs	r1, #112	; 0x70
 800058c:	2007      	movs	r0, #7
 800058e:	f7ff fe33 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 8000592:	214c      	movs	r1, #76	; 0x4c
 8000594:	2005      	movs	r0, #5
 8000596:	f7ff fe2f 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate:250kbps
 800059a:	2126      	movs	r1, #38	; 0x26
 800059c:	2006      	movs	r0, #6
 800059e:	f7ff fe2b 	bl	80001f8 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);			// Write TX address
 80005a2:	2203      	movs	r2, #3
 80005a4:	490a      	ldr	r1, [pc, #40]	; (80005d0 <NRF24_ini_tx_mode+0xa0>)
 80005a6:	2010      	movs	r0, #16
 80005a8:	f7ff fea8 	bl	80002fc <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);		// Set up pipe 0 address
 80005ac:	2203      	movs	r2, #3
 80005ae:	4908      	ldr	r1, [pc, #32]	; (80005d0 <NRF24_ini_tx_mode+0xa0>)
 80005b0:	200a      	movs	r0, #10
 80005b2:	f7ff fea3 	bl	80002fc <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 	// Number of bytes in TX buffer
 80005b6:	210a      	movs	r1, #10
 80005b8:	2011      	movs	r0, #17
 80005ba:	f7ff fe1d 	bl	80001f8 <NRF24_WriteReg>

	NRF24L01_RX_Mode();
 80005be:	f7ff ff13 	bl	80003e8 <NRF24L01_RX_Mode>

	read_config_registers();	// For debug
 80005c2:	f7ff ff3b 	bl	800043c <read_config_registers>
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40010800 	.word	0x40010800
 80005d0:	20000000 	.word	0x20000000

080005d4 <NRF24L01_TX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 80005dc:	2203      	movs	r2, #3
 80005de:	4908      	ldr	r1, [pc, #32]	; (8000600 <NRF24L01_TX_Mode+0x2c>)
 80005e0:	2010      	movs	r0, #16
 80005e2:	f7ff fe8b 	bl	80002fc <NRF24_Write_Buf>
  CE_RESET;
 80005e6:	2200      	movs	r2, #0
 80005e8:	2108      	movs	r1, #8
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <NRF24L01_TX_Mode+0x30>)
 80005ec:	f001 fd2f 	bl	800204e <HAL_GPIO_WritePin>
  // Flush buffers
  NRF24_FlushRX();
 80005f0:	f7ff feb6 	bl	8000360 <NRF24_FlushRX>
  NRF24_FlushTX();
 80005f4:	f7ff fed6 	bl	80003a4 <NRF24_FlushTX>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000000 	.word	0x20000000
 8000604:	40010800 	.word	0x40010800

08000608 <NRF24_Transmit>:
//----------------------------------------------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	6039      	str	r1, [r7, #0]
 8000612:	71fb      	strb	r3, [r7, #7]
 8000614:	4613      	mov	r3, r2
 8000616:	71bb      	strb	r3, [r7, #6]
  CE_RESET;
 8000618:	2200      	movs	r2, #0
 800061a:	2108      	movs	r1, #8
 800061c:	4813      	ldr	r0, [pc, #76]	; (800066c <NRF24_Transmit+0x64>)
 800061e:	f001 fd16 	bl	800204e <HAL_GPIO_WritePin>
  CS_ON;
 8000622:	2200      	movs	r2, #0
 8000624:	2110      	movs	r1, #16
 8000626:	4811      	ldr	r0, [pc, #68]	; (800066c <NRF24_Transmit+0x64>)
 8000628:	f001 fd11 	bl	800204e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);	//Send address in NRF module
 800062c:	1df9      	adds	r1, r7, #7
 800062e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000632:	2201      	movs	r2, #1
 8000634:	480e      	ldr	r0, [pc, #56]	; (8000670 <NRF24_Transmit+0x68>)
 8000636:	f002 fe4b 	bl	80032d0 <HAL_SPI_Transmit>
  DelayMicro(1);
 800063a:	2001      	movs	r0, #1
 800063c:	f7ff fd86 	bl	800014c <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000); //Send buff in NRF module
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	b29a      	uxth	r2, r3
 8000644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000648:	6839      	ldr	r1, [r7, #0]
 800064a:	4809      	ldr	r0, [pc, #36]	; (8000670 <NRF24_Transmit+0x68>)
 800064c:	f002 fe40 	bl	80032d0 <HAL_SPI_Transmit>
  CS_OFF;
 8000650:	2201      	movs	r2, #1
 8000652:	2110      	movs	r1, #16
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <NRF24_Transmit+0x64>)
 8000656:	f001 fcfa 	bl	800204e <HAL_GPIO_WritePin>
  CE_SET;
 800065a:	2201      	movs	r2, #1
 800065c:	2108      	movs	r1, #8
 800065e:	4803      	ldr	r0, [pc, #12]	; (800066c <NRF24_Transmit+0x64>)
 8000660:	f001 fcf5 	bl	800204e <HAL_GPIO_WritePin>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40010800 	.word	0x40010800
 8000670:	2000066c 	.word	0x2000066c

08000674 <NRF24L01_Send>:

//----------------------------------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint8_t status=0x00, regval=0x00;
 800067c:	2300      	movs	r3, #0
 800067e:	73fb      	strb	r3, [r7, #15]
 8000680:	2300      	movs	r3, #0
 8000682:	73bb      	strb	r3, [r7, #14]
  NRF24L01_TX_Mode(pBuf);
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f7ff ffa5 	bl	80005d4 <NRF24L01_TX_Mode>
  regval = NRF24_ReadReg(CONFIG);
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff fd80 	bl	8000190 <NRF24_ReadReg>
 8000690:	4603      	mov	r3, r0
 8000692:	73bb      	strb	r3, [r7, #14]
  // If module in sleep mode, wake up it send PWR_UP and PRIM_RX bits in CONFIG
  regval |= (1<<PWR_UP);			// Set power up
 8000694:	7bbb      	ldrb	r3, [r7, #14]
 8000696:	f043 0302 	orr.w	r3, r3, #2
 800069a:	73bb      	strb	r3, [r7, #14]
  regval &= ~(1<<PRIM_RX);			// Set TX mode
 800069c:	7bbb      	ldrb	r3, [r7, #14]
 800069e:	f023 0301 	bic.w	r3, r3, #1
 80006a2:	73bb      	strb	r3, [r7, #14]
  NRF24_WriteReg(CONFIG,regval);
 80006a4:	7bbb      	ldrb	r3, [r7, #14]
 80006a6:	4619      	mov	r1, r3
 80006a8:	2000      	movs	r0, #0
 80006aa:	f7ff fda5 	bl	80001f8 <NRF24_WriteReg>
  DelayMicro(150); 					// Delay more then 130 us
 80006ae:	2096      	movs	r0, #150	; 0x96
 80006b0:	f7ff fd4c 	bl	800014c <DelayMicro>
  NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);	// Send data
 80006b4:	220a      	movs	r2, #10
 80006b6:	6879      	ldr	r1, [r7, #4]
 80006b8:	20a0      	movs	r0, #160	; 0xa0
 80006ba:	f7ff ffa5 	bl	8000608 <NRF24_Transmit>

  CE_SET;
 80006be:	2201      	movs	r2, #1
 80006c0:	2108      	movs	r1, #8
 80006c2:	481c      	ldr	r0, [pc, #112]	; (8000734 <NRF24L01_Send+0xc0>)
 80006c4:	f001 fcc3 	bl	800204e <HAL_GPIO_WritePin>
  DelayMicro(15); 					//minimum 10us high pulse (Page 21)
 80006c8:	200f      	movs	r0, #15
 80006ca:	f7ff fd3f 	bl	800014c <DelayMicro>
  CE_RESET;
 80006ce:	2200      	movs	r2, #0
 80006d0:	2108      	movs	r1, #8
 80006d2:	4818      	ldr	r0, [pc, #96]	; (8000734 <NRF24L01_Send+0xc0>)
 80006d4:	f001 fcbb 	bl	800204e <HAL_GPIO_WritePin>

  // Waiting interrupt signal from IRQ
  while((GPIO_PinState)IRQ == GPIO_PIN_SET){}
 80006d8:	bf00      	nop
 80006da:	2104      	movs	r1, #4
 80006dc:	4815      	ldr	r0, [pc, #84]	; (8000734 <NRF24L01_Send+0xc0>)
 80006de:	f001 fc9f 	bl	8002020 <HAL_GPIO_ReadPin>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d0f8      	beq.n	80006da <NRF24L01_Send+0x66>

  status = NRF24_ReadReg(STATUS_NRF);		// Read status sent data to RX
 80006e8:	2007      	movs	r0, #7
 80006ea:	f7ff fd51 	bl	8000190 <NRF24_ReadReg>
 80006ee:	4603      	mov	r3, r0
 80006f0:	73fb      	strb	r3, [r7, #15]
  if(status & TX_DS) 	     //TX_DS == 0x20   // When transmitted data was receive, and we take back ACK answer
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	f003 0320 	and.w	r3, r3, #32
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d004      	beq.n	8000706 <NRF24L01_Send+0x92>
  {
      NRF24_WriteReg(STATUS_NRF, 0x20);
 80006fc:	2120      	movs	r1, #32
 80006fe:	2007      	movs	r0, #7
 8000700:	f7ff fd7a 	bl	80001f8 <NRF24_WriteReg>
 8000704:	e00a      	b.n	800071c <NRF24L01_Send+0xa8>
  }
  else if(status & MAX_RT)   //MAX_RT == 0x10  // Retransmeet data flag
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	f003 0310 	and.w	r3, r3, #16
 800070c:	2b00      	cmp	r3, #0
 800070e:	d005      	beq.n	800071c <NRF24L01_Send+0xa8>
  {
    NRF24_WriteReg(STATUS_NRF, 0x10);
 8000710:	2110      	movs	r1, #16
 8000712:	2007      	movs	r0, #7
 8000714:	f7ff fd70 	bl	80001f8 <NRF24_WriteReg>
    NRF24_FlushTX();
 8000718:	f7ff fe44 	bl	80003a4 <NRF24_FlushTX>
  }

  regval = NRF24_ReadReg(OBSERVE_TX);   // Return Count lost packets and count transmitted packets
 800071c:	2008      	movs	r0, #8
 800071e:	f7ff fd37 	bl	8000190 <NRF24_ReadReg>
 8000722:	4603      	mov	r3, r0
 8000724:	73bb      	strb	r3, [r7, #14]

  // Switch on RX mode
  NRF24L01_RX_Mode();
 8000726:	f7ff fe5f 	bl	80003e8 <NRF24L01_RX_Mode>

  return regval;
 800072a:	7bbb      	ldrb	r3, [r7, #14]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40010800 	.word	0x40010800

08000738 <nrf_tx_test>:
//----------------------------------------------------------------------------------------
void nrf_tx_test(void)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b091      	sub	sp, #68	; 0x44
 800073c:	af00      	add	r7, sp, #0
	NRF24_ini_tx_mode();
 800073e:	f7ff fef7 	bl	8000530 <NRF24_ini_tx_mode>

	char ctr[5] = {0};
 8000742:	2300      	movs	r3, #0
 8000744:	637b      	str	r3, [r7, #52]	; 0x34
 8000746:	2300      	movs	r3, #0
 8000748:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	char ctr_buf[5] = {0};
 800074c:	2300      	movs	r3, #0
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000750:	2300      	movs	r3, #0
 8000752:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uint8_t retr_cnt, dt = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	int test_data = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c

	while(1)
	{
		// Test transmit data
		sprintf(buf2, "%d", test_data);
 8000760:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000762:	4972      	ldr	r1, [pc, #456]	; (800092c <nrf_tx_test+0x1f4>)
 8000764:	4872      	ldr	r0, [pc, #456]	; (8000930 <nrf_tx_test+0x1f8>)
 8000766:	f004 fc39 	bl	8004fdc <siprintf>

		// Print transmit data
		uint8_t test[25] = {0};
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]
 800077e:	751a      	strb	r2, [r3, #20]
		uint8_t test_i[10] = {0};
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	809a      	strh	r2, [r3, #4]

		ssd1306_SetCursor(0, 16);
 800078e:	2110      	movs	r1, #16
 8000790:	2000      	movs	r0, #0
 8000792:	f000 fac5 	bl	8000d20 <ssd1306_SetCursor>
		strcpy(test, "Data:");
 8000796:	f107 0310 	add.w	r3, r7, #16
 800079a:	4a66      	ldr	r2, [pc, #408]	; (8000934 <nrf_tx_test+0x1fc>)
 800079c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007a0:	6018      	str	r0, [r3, #0]
 80007a2:	3304      	adds	r3, #4
 80007a4:	8019      	strh	r1, [r3, #0]
		strcat(test, buf2);
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	4961      	ldr	r1, [pc, #388]	; (8000930 <nrf_tx_test+0x1f8>)
 80007ac:	4618      	mov	r0, r3
 80007ae:	f004 fc35 	bl	800501c <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 80007b2:	4a61      	ldr	r2, [pc, #388]	; (8000938 <nrf_tx_test+0x200>)
 80007b4:	f107 0010 	add.w	r0, r7, #16
 80007b8:	2301      	movs	r3, #1
 80007ba:	ca06      	ldmia	r2, {r1, r2}
 80007bc:	f000 fa8a 	bl	8000cd4 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80007c0:	f000 f978 	bl	8000ab4 <ssd1306_UpdateScreen>

		dt = NRF24L01_Send(buf2);						// Transmit data  <<<<<<<<<<<<<<<
 80007c4:	485a      	ldr	r0, [pc, #360]	; (8000930 <nrf_tx_test+0x1f8>)
 80007c6:	f7ff ff55 	bl	8000674 <NRF24L01_Send>
 80007ca:	4603      	mov	r3, r0
 80007cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		retr_cnt = dt & 0xF;
 80007d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80007d4:	f003 030f 	and.w	r3, r3, #15
 80007d8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		retr_cnt_full += retr_cnt;
 80007dc:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80007e0:	4b56      	ldr	r3, [pc, #344]	; (800093c <nrf_tx_test+0x204>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4413      	add	r3, r2
 80007e6:	4a55      	ldr	r2, [pc, #340]	; (800093c <nrf_tx_test+0x204>)
 80007e8:	6013      	str	r3, [r2, #0]

		// Print transmit counter
		memset(test, 0, sizeof(test));
 80007ea:	f107 0310 	add.w	r3, r7, #16
 80007ee:	2219      	movs	r2, #25
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f004 fb34 	bl	8004e60 <memset>
		memset(test_i, 0, sizeof(test_i));
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	220a      	movs	r2, #10
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f004 fb2e 	bl	8004e60 <memset>

		ssd1306_SetCursor(0, 26);
 8000804:	211a      	movs	r1, #26
 8000806:	2000      	movs	r0, #0
 8000808:	f000 fa8a 	bl	8000d20 <ssd1306_SetCursor>
		strcpy(test, "Conut trans:");
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	4a4b      	ldr	r2, [pc, #300]	; (8000940 <nrf_tx_test+0x208>)
 8000812:	461c      	mov	r4, r3
 8000814:	4613      	mov	r3, r2
 8000816:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000818:	c407      	stmia	r4!, {r0, r1, r2}
 800081a:	7023      	strb	r3, [r4, #0]
		// number in string
		itoa(i, test_i, 10);
 800081c:	4b49      	ldr	r3, [pc, #292]	; (8000944 <nrf_tx_test+0x20c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	1d39      	adds	r1, r7, #4
 8000822:	220a      	movs	r2, #10
 8000824:	4618      	mov	r0, r3
 8000826:	f004 fb0b 	bl	8004e40 <itoa>
		strcat(test, test_i);
 800082a:	1d3a      	adds	r2, r7, #4
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	4611      	mov	r1, r2
 8000832:	4618      	mov	r0, r3
 8000834:	f004 fbf2 	bl	800501c <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 8000838:	4a3f      	ldr	r2, [pc, #252]	; (8000938 <nrf_tx_test+0x200>)
 800083a:	f107 0010 	add.w	r0, r7, #16
 800083e:	2301      	movs	r3, #1
 8000840:	ca06      	ldmia	r2, {r1, r2}
 8000842:	f000 fa47 	bl	8000cd4 <ssd1306_WriteString>

		// Print retransmeet counter
		memset(test, 0, sizeof(test));
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	2219      	movs	r2, #25
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f004 fb06 	bl	8004e60 <memset>
		memset(test_i, 0, sizeof(test_i));
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	220a      	movs	r2, #10
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f004 fb00 	bl	8004e60 <memset>

		ssd1306_SetCursor(0, 36);
 8000860:	2124      	movs	r1, #36	; 0x24
 8000862:	2000      	movs	r0, #0
 8000864:	f000 fa5c 	bl	8000d20 <ssd1306_SetCursor>
		strcpy(test, "Retransm:");
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	4a36      	ldr	r2, [pc, #216]	; (8000948 <nrf_tx_test+0x210>)
 800086e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000870:	c303      	stmia	r3!, {r0, r1}
 8000872:	801a      	strh	r2, [r3, #0]
		itoa(retr_cnt_full, test_i, 10);
 8000874:	4b31      	ldr	r3, [pc, #196]	; (800093c <nrf_tx_test+0x204>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	1d39      	adds	r1, r7, #4
 800087a:	220a      	movs	r2, #10
 800087c:	4618      	mov	r0, r3
 800087e:	f004 fadf 	bl	8004e40 <itoa>
		strcat(test, test_i);
 8000882:	1d3a      	adds	r2, r7, #4
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	4611      	mov	r1, r2
 800088a:	4618      	mov	r0, r3
 800088c:	f004 fbc6 	bl	800501c <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 8000890:	4a29      	ldr	r2, [pc, #164]	; (8000938 <nrf_tx_test+0x200>)
 8000892:	f107 0010 	add.w	r0, r7, #16
 8000896:	2301      	movs	r3, #1
 8000898:	ca06      	ldmia	r2, {r1, r2}
 800089a:	f000 fa1b 	bl	8000cd4 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800089e:	f000 f909 	bl	8000ab4 <ssd1306_UpdateScreen>

		// Print lost pacets
		memset(test, 0, sizeof(test));
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	2219      	movs	r2, #25
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f004 fad8 	bl	8004e60 <memset>
		memset(test_i, 0, sizeof(test_i));
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	220a      	movs	r2, #10
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f004 fad2 	bl	8004e60 <memset>

		cnt_lost = dt >> 4;
 80008bc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80008c0:	091b      	lsrs	r3, r3, #4
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <nrf_tx_test+0x214>)
 80008c8:	601a      	str	r2, [r3, #0]

		ssd1306_SetCursor(0, 46);
 80008ca:	212e      	movs	r1, #46	; 0x2e
 80008cc:	2000      	movs	r0, #0
 80008ce:	f000 fa27 	bl	8000d20 <ssd1306_SetCursor>
		strcpy(test, "Lost:");
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	4a1e      	ldr	r2, [pc, #120]	; (8000950 <nrf_tx_test+0x218>)
 80008d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008dc:	6018      	str	r0, [r3, #0]
 80008de:	3304      	adds	r3, #4
 80008e0:	8019      	strh	r1, [r3, #0]
		itoa(cnt_lost, test_i, 10);
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <nrf_tx_test+0x214>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	1d39      	adds	r1, r7, #4
 80008e8:	220a      	movs	r2, #10
 80008ea:	4618      	mov	r0, r3
 80008ec:	f004 faa8 	bl	8004e40 <itoa>
		strcat(test, test_i);
 80008f0:	1d3a      	adds	r2, r7, #4
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	4611      	mov	r1, r2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f004 fb8f 	bl	800501c <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <nrf_tx_test+0x200>)
 8000900:	f107 0010 	add.w	r0, r7, #16
 8000904:	2301      	movs	r3, #1
 8000906:	ca06      	ldmia	r2, {r1, r2}
 8000908:	f000 f9e4 	bl	8000cd4 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800090c:	f000 f8d2 	bl	8000ab4 <ssd1306_UpdateScreen>

		test_data++;
 8000910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000912:	3301      	adds	r3, #1
 8000914:	63fb      	str	r3, [r7, #60]	; 0x3c
		i++;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <nrf_tx_test+0x20c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	4a09      	ldr	r2, [pc, #36]	; (8000944 <nrf_tx_test+0x20c>)
 800091e:	6013      	str	r3, [r2, #0]

		HAL_Delay(500);
 8000920:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000924:	f001 f816 	bl	8001954 <HAL_Delay>
	{
 8000928:	e71a      	b.n	8000760 <nrf_tx_test+0x28>
 800092a:	bf00      	nop
 800092c:	080057a8 	.word	0x080057a8
 8000930:	200000d4 	.word	0x200000d4
 8000934:	080057ac 	.word	0x080057ac
 8000938:	20000008 	.word	0x20000008
 800093c:	200000ec 	.word	0x200000ec
 8000940:	080057b4 	.word	0x080057b4
 8000944:	20000004 	.word	0x20000004
 8000948:	080057c4 	.word	0x080057c4
 800094c:	200000f0 	.word	0x200000f0
 8000950:	080057d0 	.word	0x080057d0

08000954 <clearn_oled>:
	  ssd1306_Fill(Black);
	  ssd1306_UpdateScreen();
}
//----------------------------------------------------------------------------------------
void clearn_oled(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	 ssd1306_Fill(Black);
 8000958:	2000      	movs	r0, #0
 800095a:	f000 f889 	bl	8000a70 <ssd1306_Fill>
	 ssd1306_UpdateScreen();
 800095e:	f000 f8a9 	bl	8000ab4 <ssd1306_UpdateScreen>
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af04      	add	r7, sp, #16
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8000972:	230a      	movs	r3, #10
 8000974:	9302      	str	r3, [sp, #8]
 8000976:	2301      	movs	r3, #1
 8000978:	9301      	str	r3, [sp, #4]
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2301      	movs	r3, #1
 8000980:	2200      	movs	r2, #0
 8000982:	2178      	movs	r1, #120	; 0x78
 8000984:	4803      	ldr	r0, [pc, #12]	; (8000994 <ssd1306_WriteCommand+0x2c>)
 8000986:	f001 fcef 	bl	8002368 <HAL_I2C_Mem_Write>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000058c 	.word	0x2000058c

08000998 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 800099c:	2064      	movs	r0, #100	; 0x64
 800099e:	f000 ffd9 	bl	8001954 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 80009a2:	20ae      	movs	r0, #174	; 0xae
 80009a4:	f7ff ffe0 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80009a8:	2020      	movs	r0, #32
 80009aa:	f7ff ffdd 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80009ae:	2010      	movs	r0, #16
 80009b0:	f7ff ffda 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80009b4:	20b0      	movs	r0, #176	; 0xb0
 80009b6:	f7ff ffd7 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80009ba:	20c8      	movs	r0, #200	; 0xc8
 80009bc:	f7ff ffd4 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80009c0:	2000      	movs	r0, #0
 80009c2:	f7ff ffd1 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80009c6:	2010      	movs	r0, #16
 80009c8:	f7ff ffce 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 80009cc:	2040      	movs	r0, #64	; 0x40
 80009ce:	f7ff ffcb 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80009d2:	2081      	movs	r0, #129	; 0x81
 80009d4:	f7ff ffc8 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80009d8:	20ff      	movs	r0, #255	; 0xff
 80009da:	f7ff ffc5 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80009de:	20a1      	movs	r0, #161	; 0xa1
 80009e0:	f7ff ffc2 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80009e4:	20a6      	movs	r0, #166	; 0xa6
 80009e6:	f7ff ffbf 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80009ea:	20a8      	movs	r0, #168	; 0xa8
 80009ec:	f7ff ffbc 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80009f0:	203f      	movs	r0, #63	; 0x3f
 80009f2:	f7ff ffb9 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80009f6:	20a4      	movs	r0, #164	; 0xa4
 80009f8:	f7ff ffb6 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80009fc:	20d3      	movs	r0, #211	; 0xd3
 80009fe:	f7ff ffb3 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8000a02:	2000      	movs	r0, #0
 8000a04:	f7ff ffb0 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000a08:	20d5      	movs	r0, #213	; 0xd5
 8000a0a:	f7ff ffad 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000a0e:	20f0      	movs	r0, #240	; 0xf0
 8000a10:	f7ff ffaa 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000a14:	20d9      	movs	r0, #217	; 0xd9
 8000a16:	f7ff ffa7 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8000a1a:	2022      	movs	r0, #34	; 0x22
 8000a1c:	f7ff ffa4 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8000a20:	20da      	movs	r0, #218	; 0xda
 8000a22:	f7ff ffa1 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8000a26:	2012      	movs	r0, #18
 8000a28:	f7ff ff9e 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8000a2c:	20db      	movs	r0, #219	; 0xdb
 8000a2e:	f7ff ff9b 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000a32:	2020      	movs	r0, #32
 8000a34:	f7ff ff98 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000a38:	208d      	movs	r0, #141	; 0x8d
 8000a3a:	f7ff ff95 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8000a3e:	2014      	movs	r0, #20
 8000a40:	f7ff ff92 	bl	8000968 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000a44:	20af      	movs	r0, #175	; 0xaf
 8000a46:	f7ff ff8f 	bl	8000968 <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f000 f810 	bl	8000a70 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8000a50:	f000 f830 	bl	8000ab4 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <ssd1306_Init+0xd4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <ssd1306_Init+0xd4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8000a60:	4b02      	ldr	r3, [pc, #8]	; (8000a6c <ssd1306_Init+0xd4>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	715a      	strb	r2, [r3, #5]

	return 1;
 8000a66:	2301      	movs	r3, #1
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200004f4 	.word	0x200004f4

08000a70 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	e00d      	b.n	8000a9c <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d101      	bne.n	8000a8a <ssd1306_Fill+0x1a>
 8000a86:	2100      	movs	r1, #0
 8000a88:	e000      	b.n	8000a8c <ssd1306_Fill+0x1c>
 8000a8a:	21ff      	movs	r1, #255	; 0xff
 8000a8c:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <ssd1306_Fill+0x40>)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	4413      	add	r3, r2
 8000a92:	460a      	mov	r2, r1
 8000a94:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000aa2:	d3ed      	bcc.n	8000a80 <ssd1306_Fill+0x10>
	}
}
 8000aa4:	bf00      	nop
 8000aa6:	bf00      	nop
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	200000f4 	.word	0x200000f4

08000ab4 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8000aba:	2300      	movs	r3, #0
 8000abc:	71fb      	strb	r3, [r7, #7]
 8000abe:	e01d      	b.n	8000afc <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	3b50      	subs	r3, #80	; 0x50
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff ff4e 	bl	8000968 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff ff4b 	bl	8000968 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8000ad2:	2010      	movs	r0, #16
 8000ad4:	f7ff ff48 	bl	8000968 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	01db      	lsls	r3, r3, #7
 8000adc:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <ssd1306_UpdateScreen+0x58>)
 8000ade:	4413      	add	r3, r2
 8000ae0:	2264      	movs	r2, #100	; 0x64
 8000ae2:	9202      	str	r2, [sp, #8]
 8000ae4:	2280      	movs	r2, #128	; 0x80
 8000ae6:	9201      	str	r2, [sp, #4]
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	2301      	movs	r3, #1
 8000aec:	2240      	movs	r2, #64	; 0x40
 8000aee:	2178      	movs	r1, #120	; 0x78
 8000af0:	4807      	ldr	r0, [pc, #28]	; (8000b10 <ssd1306_UpdateScreen+0x5c>)
 8000af2:	f001 fc39 	bl	8002368 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	3301      	adds	r3, #1
 8000afa:	71fb      	strb	r3, [r7, #7]
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	2b07      	cmp	r3, #7
 8000b00:	d9de      	bls.n	8000ac0 <ssd1306_UpdateScreen+0xc>
	}
}
 8000b02:	bf00      	nop
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200000f4 	.word	0x200000f4
 8000b10:	2000058c 	.word	0x2000058c

08000b14 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	71bb      	strb	r3, [r7, #6]
 8000b22:	4613      	mov	r3, r2
 8000b24:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	db48      	blt.n	8000bc0 <ssd1306_DrawPixel+0xac>
 8000b2e:	79bb      	ldrb	r3, [r7, #6]
 8000b30:	2b3f      	cmp	r3, #63	; 0x3f
 8000b32:	d845      	bhi.n	8000bc0 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8000b34:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <ssd1306_DrawPixel+0xb8>)
 8000b36:	791b      	ldrb	r3, [r3, #4]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d006      	beq.n	8000b4a <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8000b3c:	797b      	ldrb	r3, [r7, #5]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	bf0c      	ite	eq
 8000b42:	2301      	moveq	r3, #1
 8000b44:	2300      	movne	r3, #0
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 8000b4a:	797b      	ldrb	r3, [r7, #5]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d11a      	bne.n	8000b86 <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b50:	79fa      	ldrb	r2, [r7, #7]
 8000b52:	79bb      	ldrb	r3, [r7, #6]
 8000b54:	08db      	lsrs	r3, r3, #3
 8000b56:	b2d8      	uxtb	r0, r3
 8000b58:	4603      	mov	r3, r0
 8000b5a:	01db      	lsls	r3, r3, #7
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a1c      	ldr	r2, [pc, #112]	; (8000bd0 <ssd1306_DrawPixel+0xbc>)
 8000b60:	5cd3      	ldrb	r3, [r2, r3]
 8000b62:	b25a      	sxtb	r2, r3
 8000b64:	79bb      	ldrb	r3, [r7, #6]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b70:	b25b      	sxtb	r3, r3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	b259      	sxtb	r1, r3
 8000b76:	79fa      	ldrb	r2, [r7, #7]
 8000b78:	4603      	mov	r3, r0
 8000b7a:	01db      	lsls	r3, r3, #7
 8000b7c:	4413      	add	r3, r2
 8000b7e:	b2c9      	uxtb	r1, r1
 8000b80:	4a13      	ldr	r2, [pc, #76]	; (8000bd0 <ssd1306_DrawPixel+0xbc>)
 8000b82:	54d1      	strb	r1, [r2, r3]
 8000b84:	e01d      	b.n	8000bc2 <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b86:	79fa      	ldrb	r2, [r7, #7]
 8000b88:	79bb      	ldrb	r3, [r7, #6]
 8000b8a:	08db      	lsrs	r3, r3, #3
 8000b8c:	b2d8      	uxtb	r0, r3
 8000b8e:	4603      	mov	r3, r0
 8000b90:	01db      	lsls	r3, r3, #7
 8000b92:	4413      	add	r3, r2
 8000b94:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <ssd1306_DrawPixel+0xbc>)
 8000b96:	5cd3      	ldrb	r3, [r2, r3]
 8000b98:	b25a      	sxtb	r2, r3
 8000b9a:	79bb      	ldrb	r3, [r7, #6]
 8000b9c:	f003 0307 	and.w	r3, r3, #7
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	4013      	ands	r3, r2
 8000bae:	b259      	sxtb	r1, r3
 8000bb0:	79fa      	ldrb	r2, [r7, #7]
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	01db      	lsls	r3, r3, #7
 8000bb6:	4413      	add	r3, r2
 8000bb8:	b2c9      	uxtb	r1, r1
 8000bba:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <ssd1306_DrawPixel+0xbc>)
 8000bbc:	54d1      	strb	r1, [r2, r3]
 8000bbe:	e000      	b.n	8000bc2 <ssd1306_DrawPixel+0xae>
		return;
 8000bc0:	bf00      	nop
	}
}
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	200004f4 	.word	0x200004f4
 8000bd0:	200000f4 	.word	0x200000f4

08000bd4 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4604      	mov	r4, r0
 8000bdc:	1d38      	adds	r0, r7, #4
 8000bde:	e880 0006 	stmia.w	r0, {r1, r2}
 8000be2:	461a      	mov	r2, r3
 8000be4:	4623      	mov	r3, r4
 8000be6:	73fb      	strb	r3, [r7, #15]
 8000be8:	4613      	mov	r3, r2
 8000bea:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000bec:	4b38      	ldr	r3, [pc, #224]	; (8000cd0 <ssd1306_WriteChar+0xfc>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	793b      	ldrb	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8000bf8:	dc06      	bgt.n	8000c08 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000bfa:	4b35      	ldr	r3, [pc, #212]	; (8000cd0 <ssd1306_WriteChar+0xfc>)
 8000bfc:	885b      	ldrh	r3, [r3, #2]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	797b      	ldrb	r3, [r7, #5]
 8000c02:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000c04:	2b3f      	cmp	r3, #63	; 0x3f
 8000c06:	dd01      	ble.n	8000c0c <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e05d      	b.n	8000cc8 <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
 8000c10:	e04c      	b.n	8000cac <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	3b20      	subs	r3, #32
 8000c18:	7979      	ldrb	r1, [r7, #5]
 8000c1a:	fb01 f303 	mul.w	r3, r1, r3
 8000c1e:	4619      	mov	r1, r3
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	440b      	add	r3, r1
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	4413      	add	r3, r2
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
 8000c30:	e034      	b.n	8000c9c <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 8000c32:	697a      	ldr	r2, [r7, #20]
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d012      	beq.n	8000c68 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000c42:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <ssd1306_WriteChar+0xfc>)
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	4413      	add	r3, r2
 8000c4e:	b2d8      	uxtb	r0, r3
 8000c50:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <ssd1306_WriteChar+0xfc>)
 8000c52:	885b      	ldrh	r3, [r3, #2]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	7bba      	ldrb	r2, [r7, #14]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f7ff ff57 	bl	8000b14 <ssd1306_DrawPixel>
 8000c66:	e016      	b.n	8000c96 <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <ssd1306_WriteChar+0xfc>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	4413      	add	r3, r2
 8000c74:	b2d8      	uxtb	r0, r3
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <ssd1306_WriteChar+0xfc>)
 8000c78:	885b      	ldrh	r3, [r3, #2]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	4413      	add	r3, r2
 8000c82:	b2d9      	uxtb	r1, r3
 8000c84:	7bbb      	ldrb	r3, [r7, #14]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	bf0c      	ite	eq
 8000c8a:	2301      	moveq	r3, #1
 8000c8c:	2300      	movne	r3, #0
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	461a      	mov	r2, r3
 8000c92:	f7ff ff3f 	bl	8000b14 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	61bb      	str	r3, [r7, #24]
 8000c9c:	793b      	ldrb	r3, [r7, #4]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d3c5      	bcc.n	8000c32 <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	61fb      	str	r3, [r7, #28]
 8000cac:	797b      	ldrb	r3, [r7, #5]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d3ad      	bcc.n	8000c12 <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <ssd1306_WriteChar+0xfc>)
 8000cb8:	881a      	ldrh	r2, [r3, #0]
 8000cba:	793b      	ldrb	r3, [r7, #4]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <ssd1306_WriteChar+0xfc>)
 8000cc4:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3724      	adds	r7, #36	; 0x24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd90      	pop	{r4, r7, pc}
 8000cd0:	200004f4 	.word	0x200004f4

08000cd4 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	1d38      	adds	r0, r7, #4
 8000cde:	e880 0006 	stmia.w	r0, {r1, r2}
 8000ce2:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 8000ce4:	e012      	b.n	8000d0c <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	7818      	ldrb	r0, [r3, #0]
 8000cea:	78fb      	ldrb	r3, [r7, #3]
 8000cec:	1d3a      	adds	r2, r7, #4
 8000cee:	ca06      	ldmia	r2, {r1, r2}
 8000cf0:	f7ff ff70 	bl	8000bd4 <ssd1306_WriteChar>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d002      	beq.n	8000d06 <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	e008      	b.n	8000d18 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1e8      	bne.n	8000ce6 <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	781b      	ldrb	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	460a      	mov	r2, r1
 8000d2a:	71fb      	strb	r3, [r7, #7]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <ssd1306_SetCursor+0x2c>)
 8000d36:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000d38:	79bb      	ldrb	r3, [r7, #6]
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <ssd1306_SetCursor+0x2c>)
 8000d3e:	805a      	strh	r2, [r3, #2]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	200004f4 	.word	0x200004f4

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d54:	f000 fd9c 	bl	8001890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d58:	f000 f826 	bl	8000da8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5c:	f000 f972 	bl	8001044 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d60:	f000 f868 	bl	8000e34 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d64:	f000 f894 	bl	8000e90 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000d68:	f000 f918 	bl	8000f9c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000d6c:	f000 f8c6 	bl	8000efc <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000d70:	f000 f93e 	bl	8000ff0 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7a:	480a      	ldr	r0, [pc, #40]	; (8000da4 <main+0x54>)
 8000d7c:	f001 f967 	bl	800204e <HAL_GPIO_WritePin>

  // Init interrupt (For LoRa)
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2100      	movs	r1, #0
 8000d84:	2025      	movs	r0, #37	; 0x25
 8000d86:	f000 fee0 	bl	8001b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d8a:	2025      	movs	r0, #37	; 0x25
 8000d8c:	f000 fef9 	bl	8001b82 <HAL_NVIC_EnableIRQ>

  // OLED init
  ssd1306_Init();
 8000d90:	f7ff fe02 	bl	8000998 <ssd1306_Init>
  ssd1306_Fill(Black);
 8000d94:	2000      	movs	r0, #0
 8000d96:	f7ff fe6b 	bl	8000a70 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8000d9a:	f7ff fe8b 	bl	8000ab4 <ssd1306_UpdateScreen>
	//menu();

	  // RX NRF TEST
	  // nrf_rx_mode();

	  nrf_tx_mode();
 8000d9e:	f000 fd49 	bl	8001834 <nrf_tx_mode>
  {
 8000da2:	e7fc      	b.n	8000d9e <main+0x4e>
 8000da4:	40011000 	.word	0x40011000

08000da8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b090      	sub	sp, #64	; 0x40
 8000dac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dae:	f107 0318 	add.w	r3, r7, #24
 8000db2:	2228      	movs	r2, #40	; 0x28
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f004 f852 	bl	8004e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000de6:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dec:	f107 0318 	add.w	r3, r7, #24
 8000df0:	4618      	mov	r0, r3
 8000df2:	f001 fdcf 	bl	8002994 <HAL_RCC_OscConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000dfc:	f000 fa40 	bl	8001280 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e00:	230f      	movs	r3, #15
 8000e02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e04:	2302      	movs	r3, #2
 8000e06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2102      	movs	r1, #2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f002 f83a 	bl	8002e94 <HAL_RCC_ClockConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e26:	f000 fa2b 	bl	8001280 <Error_Handler>
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	3740      	adds	r7, #64	; 0x40
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e3a:	4a13      	ldr	r2, [pc, #76]	; (8000e88 <MX_I2C1_Init+0x54>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e40:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <MX_I2C1_Init+0x58>)
 8000e42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e72:	f001 f935 	bl	80020e0 <HAL_I2C_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e7c:	f000 fa00 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000058c 	.word	0x2000058c
 8000e88:	40005400 	.word	0x40005400
 8000e8c:	00061a80 	.word	0x00061a80

08000e90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000e96:	4a18      	ldr	r2, [pc, #96]	; (8000ef8 <MX_SPI1_Init+0x68>)
 8000e98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e9a:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000e9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ea0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000ec4:	2220      	movs	r2, #32
 8000ec6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000edc:	220a      	movs	r2, #10
 8000ede:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ee0:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <MX_SPI1_Init+0x64>)
 8000ee2:	f002 f971 	bl	80031c8 <HAL_SPI_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000eec:	f000 f9c8 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000066c 	.word	0x2000066c
 8000ef8:	40013000 	.word	0x40013000

08000efc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f02:	f107 0308 	add.w	r3, r7, #8
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f10:	463b      	mov	r3, r7
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <MX_TIM1_Init+0x98>)
 8000f1a:	4a1f      	ldr	r2, [pc, #124]	; (8000f98 <MX_TIM1_Init+0x9c>)
 8000f1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <MX_TIM1_Init+0x98>)
 8000f20:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8000f24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f26:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <MX_TIM1_Init+0x98>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <MX_TIM1_Init+0x98>)
 8000f2e:	2264      	movs	r2, #100	; 0x64
 8000f30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <MX_TIM1_Init+0x98>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f38:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <MX_TIM1_Init+0x98>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_TIM1_Init+0x98>)
 8000f40:	2280      	movs	r2, #128	; 0x80
 8000f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f44:	4813      	ldr	r0, [pc, #76]	; (8000f94 <MX_TIM1_Init+0x98>)
 8000f46:	f002 feab 	bl	8003ca0 <HAL_TIM_Base_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000f50:	f000 f996 	bl	8001280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <MX_TIM1_Init+0x98>)
 8000f62:	f003 f875 	bl	8004050 <HAL_TIM_ConfigClockSource>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000f6c:	f000 f988 	bl	8001280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000f70:	2310      	movs	r3, #16
 8000f72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_TIM1_Init+0x98>)
 8000f7e:	f003 fa51 	bl	8004424 <HAL_TIMEx_MasterConfigSynchronization>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f88:	f000 f97a 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000624 	.word	0x20000624
 8000f98:	40012c00 	.word	0x40012c00

08000f9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <MX_USART1_UART_Init+0x50>)
 8000fa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fa8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fd4:	f003 fa96 	bl	8004504 <HAL_UART_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fde:	f000 f94f 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200005e0 	.word	0x200005e0
 8000fec:	40013800 	.word	0x40013800

08000ff0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_USART3_UART_Init+0x4c>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <MX_USART3_UART_Init+0x50>)
 8000ff8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <MX_USART3_UART_Init+0x4c>)
 8000ffc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001000:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_USART3_UART_Init+0x4c>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_USART3_UART_Init+0x4c>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_USART3_UART_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_USART3_UART_Init+0x4c>)
 8001016:	220c      	movs	r2, #12
 8001018:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_USART3_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_USART3_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_USART3_UART_Init+0x4c>)
 8001028:	f003 fa6c 	bl	8004504 <HAL_UART_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001032:	f000 f925 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000548 	.word	0x20000548
 8001040:	40004800 	.word	0x40004800

08001044 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001058:	4b5f      	ldr	r3, [pc, #380]	; (80011d8 <MX_GPIO_Init+0x194>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a5e      	ldr	r2, [pc, #376]	; (80011d8 <MX_GPIO_Init+0x194>)
 800105e:	f043 0310 	orr.w	r3, r3, #16
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b5c      	ldr	r3, [pc, #368]	; (80011d8 <MX_GPIO_Init+0x194>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0310 	and.w	r3, r3, #16
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001070:	4b59      	ldr	r3, [pc, #356]	; (80011d8 <MX_GPIO_Init+0x194>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a58      	ldr	r2, [pc, #352]	; (80011d8 <MX_GPIO_Init+0x194>)
 8001076:	f043 0320 	orr.w	r3, r3, #32
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b56      	ldr	r3, [pc, #344]	; (80011d8 <MX_GPIO_Init+0x194>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0320 	and.w	r3, r3, #32
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b53      	ldr	r3, [pc, #332]	; (80011d8 <MX_GPIO_Init+0x194>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a52      	ldr	r2, [pc, #328]	; (80011d8 <MX_GPIO_Init+0x194>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b50      	ldr	r3, [pc, #320]	; (80011d8 <MX_GPIO_Init+0x194>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a0:	4b4d      	ldr	r3, [pc, #308]	; (80011d8 <MX_GPIO_Init+0x194>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a4c      	ldr	r2, [pc, #304]	; (80011d8 <MX_GPIO_Init+0x194>)
 80010a6:	f043 0308 	orr.w	r3, r3, #8
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b4a      	ldr	r3, [pc, #296]	; (80011d8 <MX_GPIO_Init+0x194>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010be:	4847      	ldr	r0, [pc, #284]	; (80011dc <MX_GPIO_Init+0x198>)
 80010c0:	f000 ffc5 	bl	800204e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2108      	movs	r1, #8
 80010c8:	4845      	ldr	r0, [pc, #276]	; (80011e0 <MX_GPIO_Init+0x19c>)
 80010ca:	f000 ffc0 	bl	800204e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80010ce:	2201      	movs	r2, #1
 80010d0:	2110      	movs	r1, #16
 80010d2:	4843      	ldr	r0, [pc, #268]	; (80011e0 <MX_GPIO_Init+0x19c>)
 80010d4:	f000 ffbb 	bl	800204e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	f242 0101 	movw	r1, #8193	; 0x2001
 80010de:	4841      	ldr	r0, [pc, #260]	; (80011e4 <MX_GPIO_Init+0x1a0>)
 80010e0:	f000 ffb5 	bl	800204e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	4619      	mov	r1, r3
 80010fc:	4837      	ldr	r0, [pc, #220]	; (80011dc <MX_GPIO_Init+0x198>)
 80010fe:	f000 fe0b 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001102:	2304      	movs	r3, #4
 8001104:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001106:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <MX_GPIO_Init+0x1a4>)
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	4619      	mov	r1, r3
 8001114:	4832      	ldr	r0, [pc, #200]	; (80011e0 <MX_GPIO_Init+0x19c>)
 8001116:	f000 fdff 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800111a:	2318      	movs	r3, #24
 800111c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4619      	mov	r1, r3
 8001130:	482b      	ldr	r0, [pc, #172]	; (80011e0 <MX_GPIO_Init+0x19c>)
 8001132:	f000 fdf1 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 8001136:	f242 0301 	movw	r3, #8193	; 0x2001
 800113a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2302      	movs	r3, #2
 8001146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	4619      	mov	r1, r3
 800114e:	4825      	ldr	r0, [pc, #148]	; (80011e4 <MX_GPIO_Init+0x1a0>)
 8001150:	f000 fde2 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 8001154:	2302      	movs	r3, #2
 8001156:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4619      	mov	r1, r3
 8001166:	481f      	ldr	r0, [pc, #124]	; (80011e4 <MX_GPIO_Init+0x1a0>)
 8001168:	f000 fdd6 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800116c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001170:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001172:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_GPIO_Init+0x1a4>)
 8001174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001176:	2301      	movs	r3, #1
 8001178:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f107 0310 	add.w	r3, r7, #16
 800117e:	4619      	mov	r1, r3
 8001180:	4818      	ldr	r0, [pc, #96]	; (80011e4 <MX_GPIO_Init+0x1a0>)
 8001182:	f000 fdc9 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800118a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_GPIO_Init+0x1a4>)
 800118e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001190:	2301      	movs	r3, #1
 8001192:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	4619      	mov	r1, r3
 800119a:	4811      	ldr	r0, [pc, #68]	; (80011e0 <MX_GPIO_Init+0x19c>)
 800119c:	f000 fdbc 	bl	8001d18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2100      	movs	r1, #0
 80011a4:	2008      	movs	r0, #8
 80011a6:	f000 fcd0 	bl	8001b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011aa:	2008      	movs	r0, #8
 80011ac:	f000 fce9 	bl	8001b82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	2017      	movs	r0, #23
 80011b6:	f000 fcc8 	bl	8001b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011ba:	2017      	movs	r0, #23
 80011bc:	f000 fce1 	bl	8001b82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	2028      	movs	r0, #40	; 0x28
 80011c6:	f000 fcc0 	bl	8001b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011ca:	2028      	movs	r0, #40	; 0x28
 80011cc:	f000 fcd9 	bl	8001b82 <HAL_NVIC_EnableIRQ>

}
 80011d0:	bf00      	nop
 80011d2:	3720      	adds	r7, #32
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40011000 	.word	0x40011000
 80011e0:	40010800 	.word	0x40010800
 80011e4:	40010c00 	.word	0x40010c00
 80011e8:	10210000 	.word	0x10210000

080011ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//----------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_2)			// If detect External interrupt from PA2
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d102      	bne.n	8001202 <HAL_GPIO_EXTI_Callback+0x16>
  {
    IRQ_Callback();					// Call Callback
 80011fc:	f7ff f95e 	bl	80004bc <IRQ_Callback>
  }
  else
  {
    __NOP();
  }
}
 8001200:	e000      	b.n	8001204 <HAL_GPIO_EXTI_Callback+0x18>
    __NOP();
 8001202:	bf00      	nop
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_UART_RxCpltCallback>:
//----------------------------------------------------------------------------------------
// Receive data from LoRa module
// If data received (Received 1 bytes)        Define in: HAL_UART_Receive_IT(&huart1, str, 1);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)											// Which uart generate Callback function
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a15      	ldr	r2, [pc, #84]	; (800126c <HAL_UART_RxCpltCallback+0x60>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d123      	bne.n	8001264 <HAL_UART_RxCpltCallback+0x58>
	{
		if((str[0] == '\0') || (rx_data_counter >= sizeof(uart_rx_data)))   		// Detect '\0' Null or  data too long
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <HAL_UART_RxCpltCallback+0x64>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_UART_RxCpltCallback+0x20>
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HAL_UART_RxCpltCallback+0x68>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b31      	cmp	r3, #49	; 0x31
 800122a:	d906      	bls.n	800123a <HAL_UART_RxCpltCallback+0x2e>
		{
			flag_command_received = true;                          // Data is ready
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_UART_RxCpltCallback+0x6c>)
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
			rx_data_counter = 0;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <HAL_UART_RxCpltCallback+0x68>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
			rx_data_counter ++;
		}
	}
}
 8001238:	e014      	b.n	8001264 <HAL_UART_RxCpltCallback+0x58>
			flag_command_received = false;							// Receive data
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <HAL_UART_RxCpltCallback+0x6c>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_UART_RxCpltCallback+0x68>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_UART_RxCpltCallback+0x64>)
 8001248:	7819      	ldrb	r1, [r3, #0]
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_UART_RxCpltCallback+0x70>)
 800124c:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
 800124e:	2201      	movs	r2, #1
 8001250:	4907      	ldr	r1, [pc, #28]	; (8001270 <HAL_UART_RxCpltCallback+0x64>)
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <HAL_UART_RxCpltCallback+0x60>)
 8001254:	f003 f9a3 	bl	800459e <HAL_UART_Receive_IT>
			rx_data_counter ++;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_UART_RxCpltCallback+0x68>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <HAL_UART_RxCpltCallback+0x68>)
 8001262:	701a      	strb	r2, [r3, #0]
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200005e0 	.word	0x200005e0
 8001270:	20000530 	.word	0x20000530
 8001274:	20000532 	.word	0x20000532
 8001278:	20000531 	.word	0x20000531
 800127c:	200004fc 	.word	0x200004fc

08001280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
}
 8001286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001288:	e7fe      	b.n	8001288 <Error_Handler+0x8>
	...

0800128c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_MspInit+0x5c>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <HAL_MspInit+0x5c>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6193      	str	r3, [r2, #24]
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_MspInit+0x5c>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_MspInit+0x5c>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <HAL_MspInit+0x5c>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b4:	61d3      	str	r3, [r2, #28]
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <HAL_MspInit+0x5c>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_MspInit+0x60>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_MspInit+0x60>)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40010000 	.word	0x40010000

080012f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0310 	add.w	r3, r7, #16
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a15      	ldr	r2, [pc, #84]	; (8001360 <HAL_I2C_MspInit+0x70>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d123      	bne.n	8001358 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <HAL_I2C_MspInit+0x74>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a13      	ldr	r2, [pc, #76]	; (8001364 <HAL_I2C_MspInit+0x74>)
 8001316:	f043 0308 	orr.w	r3, r3, #8
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <HAL_I2C_MspInit+0x74>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001328:	23c0      	movs	r3, #192	; 0xc0
 800132a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800132c:	2312      	movs	r3, #18
 800132e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	4619      	mov	r1, r3
 800133a:	480b      	ldr	r0, [pc, #44]	; (8001368 <HAL_I2C_MspInit+0x78>)
 800133c:	f000 fcec 	bl	8001d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_I2C_MspInit+0x74>)
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <HAL_I2C_MspInit+0x74>)
 8001346:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800134a:	61d3      	str	r3, [r2, #28]
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <HAL_I2C_MspInit+0x74>)
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001358:	bf00      	nop
 800135a:	3720      	adds	r7, #32
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40005400 	.word	0x40005400
 8001364:	40021000 	.word	0x40021000
 8001368:	40010c00 	.word	0x40010c00

0800136c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a1b      	ldr	r2, [pc, #108]	; (80013f4 <HAL_SPI_MspInit+0x88>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d12f      	bne.n	80013ec <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <HAL_SPI_MspInit+0x8c>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a19      	ldr	r2, [pc, #100]	; (80013f8 <HAL_SPI_MspInit+0x8c>)
 8001392:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_SPI_MspInit+0x8c>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <HAL_SPI_MspInit+0x8c>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4a13      	ldr	r2, [pc, #76]	; (80013f8 <HAL_SPI_MspInit+0x8c>)
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_SPI_MspInit+0x8c>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013bc:	23a0      	movs	r3, #160	; 0xa0
 80013be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	4619      	mov	r1, r3
 80013ce:	480b      	ldr	r0, [pc, #44]	; (80013fc <HAL_SPI_MspInit+0x90>)
 80013d0:	f000 fca2 	bl	8001d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013d4:	2340      	movs	r3, #64	; 0x40
 80013d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	4619      	mov	r1, r3
 80013e6:	4805      	ldr	r0, [pc, #20]	; (80013fc <HAL_SPI_MspInit+0x90>)
 80013e8:	f000 fc96 	bl	8001d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013ec:	bf00      	nop
 80013ee:	3720      	adds	r7, #32
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40013000 	.word	0x40013000
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010800 	.word	0x40010800

08001400 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <HAL_TIM_Base_MspInit+0x44>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d113      	bne.n	800143a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <HAL_TIM_Base_MspInit+0x48>)
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	4a0c      	ldr	r2, [pc, #48]	; (8001448 <HAL_TIM_Base_MspInit+0x48>)
 8001418:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800141c:	6193      	str	r3, [r2, #24]
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_TIM_Base_MspInit+0x48>)
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	2019      	movs	r0, #25
 8001430:	f000 fb8b 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001434:	2019      	movs	r0, #25
 8001436:	f000 fba4 	bl	8001b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40012c00 	.word	0x40012c00
 8001448:	40021000 	.word	0x40021000

0800144c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0318 	add.w	r3, r7, #24
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a3c      	ldr	r2, [pc, #240]	; (8001558 <HAL_UART_MspInit+0x10c>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d13a      	bne.n	80014e2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800146c:	4b3b      	ldr	r3, [pc, #236]	; (800155c <HAL_UART_MspInit+0x110>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	4a3a      	ldr	r2, [pc, #232]	; (800155c <HAL_UART_MspInit+0x110>)
 8001472:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001476:	6193      	str	r3, [r2, #24]
 8001478:	4b38      	ldr	r3, [pc, #224]	; (800155c <HAL_UART_MspInit+0x110>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001484:	4b35      	ldr	r3, [pc, #212]	; (800155c <HAL_UART_MspInit+0x110>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a34      	ldr	r2, [pc, #208]	; (800155c <HAL_UART_MspInit+0x110>)
 800148a:	f043 0304 	orr.w	r3, r3, #4
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b32      	ldr	r3, [pc, #200]	; (800155c <HAL_UART_MspInit+0x110>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800149c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014aa:	f107 0318 	add.w	r3, r7, #24
 80014ae:	4619      	mov	r1, r3
 80014b0:	482b      	ldr	r0, [pc, #172]	; (8001560 <HAL_UART_MspInit+0x114>)
 80014b2:	f000 fc31 	bl	8001d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 0318 	add.w	r3, r7, #24
 80014c8:	4619      	mov	r1, r3
 80014ca:	4825      	ldr	r0, [pc, #148]	; (8001560 <HAL_UART_MspInit+0x114>)
 80014cc:	f000 fc24 	bl	8001d18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2101      	movs	r1, #1
 80014d4:	2025      	movs	r0, #37	; 0x25
 80014d6:	f000 fb38 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014da:	2025      	movs	r0, #37	; 0x25
 80014dc:	f000 fb51 	bl	8001b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014e0:	e036      	b.n	8001550 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a1f      	ldr	r2, [pc, #124]	; (8001564 <HAL_UART_MspInit+0x118>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d131      	bne.n	8001550 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_UART_MspInit+0x110>)
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	4a1a      	ldr	r2, [pc, #104]	; (800155c <HAL_UART_MspInit+0x110>)
 80014f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f6:	61d3      	str	r3, [r2, #28]
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <HAL_UART_MspInit+0x110>)
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <HAL_UART_MspInit+0x110>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a14      	ldr	r2, [pc, #80]	; (800155c <HAL_UART_MspInit+0x110>)
 800150a:	f043 0308 	orr.w	r3, r3, #8
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_UART_MspInit+0x110>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800151c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152a:	f107 0318 	add.w	r3, r7, #24
 800152e:	4619      	mov	r1, r3
 8001530:	480d      	ldr	r0, [pc, #52]	; (8001568 <HAL_UART_MspInit+0x11c>)
 8001532:	f000 fbf1 	bl	8001d18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001536:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800153a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	f107 0318 	add.w	r3, r7, #24
 8001548:	4619      	mov	r1, r3
 800154a:	4807      	ldr	r0, [pc, #28]	; (8001568 <HAL_UART_MspInit+0x11c>)
 800154c:	f000 fbe4 	bl	8001d18 <HAL_GPIO_Init>
}
 8001550:	bf00      	nop
 8001552:	3728      	adds	r7, #40	; 0x28
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40013800 	.word	0x40013800
 800155c:	40021000 	.word	0x40021000
 8001560:	40010800 	.word	0x40010800
 8001564:	40004800 	.word	0x40004800
 8001568:	40010c00 	.word	0x40010c00

0800156c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <NMI_Handler+0x4>

08001572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <HardFault_Handler+0x4>

08001578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <MemManage_Handler+0x4>

0800157e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <BusFault_Handler+0x4>

08001584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <UsageFault_Handler+0x4>

0800158a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr

080015a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b2:	f000 f9b3 	bl	800191c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}

080015ba <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80015be:	2004      	movs	r0, #4
 80015c0:	f000 fd76 	bl	80020b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Detect "DOWN" button
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <EXTI9_5_IRQHandler+0x44>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	f083 0301 	eor.w	r3, r3, #1
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d012      	beq.n	8001600 <EXTI9_5_IRQHandler+0x38>
	{
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8))						// If interrupt from GPIOA PIN_8
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <EXTI9_5_IRQHandler+0x48>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00c      	beq.n	8001600 <EXTI9_5_IRQHandler+0x38>
			{
				if(button_processed_status == doesent_detected)
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <EXTI9_5_IRQHandler+0x4c>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <EXTI9_5_IRQHandler+0x50>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d105      	bne.n	8001600 <EXTI9_5_IRQHandler+0x38>
				{
					HAL_TIM_Base_Start_IT(&htim1);							// Turn on Timer 1
 80015f4:	4809      	ldr	r0, [pc, #36]	; (800161c <EXTI9_5_IRQHandler+0x54>)
 80015f6:	f002 fba3 	bl	8003d40 <HAL_TIM_Base_Start_IT>
					button_processed_status = detected;						// For interrupt work only one time
 80015fa:	4b07      	ldr	r3, [pc, #28]	; (8001618 <EXTI9_5_IRQHandler+0x50>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
				}
			}
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001600:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001604:	f000 fd54 	bl	80020b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2000053c 	.word	0x2000053c
 8001610:	40010400 	.word	0x40010400
 8001614:	20000010 	.word	0x20000010
 8001618:	20000014 	.word	0x20000014
 800161c:	20000624 	.word	0x20000624

08001620 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	 * EXTI9_5_IRQHandler and EXTI15_10_IRQHandler
	 */

//	static int delay_time = 0;										//	Counter

	if(button_processed_status == detected)							// If pressed button was detected by external interrupts
 8001624:	4b37      	ldr	r3, [pc, #220]	; (8001704 <TIM1_UP_IRQHandler+0xe4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d165      	bne.n	80016f8 <TIM1_UP_IRQHandler+0xd8>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)    			// If "UP" button was pressed
 800162c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001630:	4835      	ldr	r0, [pc, #212]	; (8001708 <TIM1_UP_IRQHandler+0xe8>)
 8001632:	f000 fcf5 	bl	8002020 <HAL_GPIO_ReadPin>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d118      	bne.n	800166e <TIM1_UP_IRQHandler+0x4e>
		{
			/*
			 * If every time when timer interrupt, delay_time will increment
			 * for avoid bounce button
			 */
			delay_time++;
 800163c:	4b33      	ldr	r3, [pc, #204]	; (800170c <TIM1_UP_IRQHandler+0xec>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	4a32      	ldr	r2, [pc, #200]	; (800170c <TIM1_UP_IRQHandler+0xec>)
 8001644:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8001646:	4b32      	ldr	r3, [pc, #200]	; (8001710 <TIM1_UP_IRQHandler+0xf0>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	4b2f      	ldr	r3, [pc, #188]	; (800170c <TIM1_UP_IRQHandler+0xec>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	dc51      	bgt.n	80016f8 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 8001654:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <TIM1_UP_IRQHandler+0xe4>)
 8001656:	2201      	movs	r2, #1
 8001658:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 800165a:	482e      	ldr	r0, [pc, #184]	; (8001714 <TIM1_UP_IRQHandler+0xf4>)
 800165c:	f002 fbc2 	bl	8003de4 <HAL_TIM_Base_Stop_IT>

				button_status = BOTTON_UP;
 8001660:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <TIM1_UP_IRQHandler+0xf8>)
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 8001666:	4b29      	ldr	r3, [pc, #164]	; (800170c <TIM1_UP_IRQHandler+0xec>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	e044      	b.n	80016f8 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0)   			 	// If "DOWN" button was pressed
 800166e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001672:	482a      	ldr	r0, [pc, #168]	; (800171c <TIM1_UP_IRQHandler+0xfc>)
 8001674:	f000 fcd4 	bl	8002020 <HAL_GPIO_ReadPin>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d118      	bne.n	80016b0 <TIM1_UP_IRQHandler+0x90>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 800167e:	4b23      	ldr	r3, [pc, #140]	; (800170c <TIM1_UP_IRQHandler+0xec>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	4a21      	ldr	r2, [pc, #132]	; (800170c <TIM1_UP_IRQHandler+0xec>)
 8001686:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8001688:	4b21      	ldr	r3, [pc, #132]	; (8001710 <TIM1_UP_IRQHandler+0xf0>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b1f      	ldr	r3, [pc, #124]	; (800170c <TIM1_UP_IRQHandler+0xec>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	dc30      	bgt.n	80016f8 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 8001696:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <TIM1_UP_IRQHandler+0xe4>)
 8001698:	2201      	movs	r2, #1
 800169a:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 800169c:	481d      	ldr	r0, [pc, #116]	; (8001714 <TIM1_UP_IRQHandler+0xf4>)
 800169e:	f002 fba1 	bl	8003de4 <HAL_TIM_Base_Stop_IT>

				button_status = BUTTON_DOWN;
 80016a2:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <TIM1_UP_IRQHandler+0xf8>)
 80016a4:	2203      	movs	r2, #3
 80016a6:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 80016a8:	4b18      	ldr	r3, [pc, #96]	; (800170c <TIM1_UP_IRQHandler+0xec>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e023      	b.n	80016f8 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0)   			// If "ENTER" button was pressed
 80016b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016b4:	4814      	ldr	r0, [pc, #80]	; (8001708 <TIM1_UP_IRQHandler+0xe8>)
 80016b6:	f000 fcb3 	bl	8002020 <HAL_GPIO_ReadPin>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d118      	bne.n	80016f2 <TIM1_UP_IRQHandler+0xd2>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <TIM1_UP_IRQHandler+0xec>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3301      	adds	r3, #1
 80016c6:	4a11      	ldr	r2, [pc, #68]	; (800170c <TIM1_UP_IRQHandler+0xec>)
 80016c8:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <TIM1_UP_IRQHandler+0xf0>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b0e      	ldr	r3, [pc, #56]	; (800170c <TIM1_UP_IRQHandler+0xec>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	dc0f      	bgt.n	80016f8 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <TIM1_UP_IRQHandler+0xe4>)
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]
				button_status = BUTTON_ENTER;
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <TIM1_UP_IRQHandler+0xf8>)
 80016e0:	2202      	movs	r2, #2
 80016e2:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <TIM1_UP_IRQHandler+0xec>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 80016ea:	480a      	ldr	r0, [pc, #40]	; (8001714 <TIM1_UP_IRQHandler+0xf4>)
 80016ec:	f002 fb7a 	bl	8003de4 <HAL_TIM_Base_Stop_IT>
 80016f0:	e002      	b.n	80016f8 <TIM1_UP_IRQHandler+0xd8>
			}
		}
		else
		{
			delay_time = 0;
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <TIM1_UP_IRQHandler+0xec>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
		}

	}

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016f8:	4806      	ldr	r0, [pc, #24]	; (8001714 <TIM1_UP_IRQHandler+0xf4>)
 80016fa:	f002 fba1 	bl	8003e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000014 	.word	0x20000014
 8001708:	40010c00 	.word	0x40010c00
 800170c:	20000534 	.word	0x20000534
 8001710:	20000011 	.word	0x20000011
 8001714:	20000624 	.word	0x20000624
 8001718:	2000053d 	.word	0x2000053d
 800171c:	40010800 	.word	0x40010800

08001720 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <USART1_IRQHandler+0x10>)
 8001726:	f002 ff6b 	bl	8004600 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200005e0 	.word	0x200005e0

08001734 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 8001738:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <EXTI15_10_IRQHandler+0x74>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	f083 0301 	eor.w	r3, r3, #1
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d012      	beq.n	800176c <EXTI15_10_IRQHandler+0x38>
	{
		// Detect "UP" button
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))	// If interrupt from GPIOB PIN_14
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <EXTI15_10_IRQHandler+0x78>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00c      	beq.n	800176c <EXTI15_10_IRQHandler+0x38>
		{
			if(button_processed_status == doesent_detected)
 8001752:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <EXTI15_10_IRQHandler+0x7c>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <EXTI15_10_IRQHandler+0x80>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d105      	bne.n	800176c <EXTI15_10_IRQHandler+0x38>
			{
				HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8001760:	4815      	ldr	r0, [pc, #84]	; (80017b8 <EXTI15_10_IRQHandler+0x84>)
 8001762:	f002 faed 	bl	8003d40 <HAL_TIM_Base_Start_IT>
				button_processed_status = detected;						// For interrupt work only one time
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <EXTI15_10_IRQHandler+0x80>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
			}
		}
	}

	// Detect "ENTER" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15))	// If interrupt from GPIOB PIN_15
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <EXTI15_10_IRQHandler+0x78>)
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00c      	beq.n	8001792 <EXTI15_10_IRQHandler+0x5e>
	{
		if(button_processed_status == doesent_detected)
 8001778:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <EXTI15_10_IRQHandler+0x7c>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <EXTI15_10_IRQHandler+0x80>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d105      	bne.n	8001792 <EXTI15_10_IRQHandler+0x5e>
		{
			HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8001786:	480c      	ldr	r0, [pc, #48]	; (80017b8 <EXTI15_10_IRQHandler+0x84>)
 8001788:	f002 fada 	bl	8003d40 <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <EXTI15_10_IRQHandler+0x80>)
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
		}
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001792:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001796:	f000 fc8b 	bl	80020b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800179a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800179e:	f000 fc87 	bl	80020b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	2000053c 	.word	0x2000053c
 80017ac:	40010400 	.word	0x40010400
 80017b0:	20000010 	.word	0x20000010
 80017b4:	20000014 	.word	0x20000014
 80017b8:	20000624 	.word	0x20000624

080017bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c4:	4a14      	ldr	r2, [pc, #80]	; (8001818 <_sbrk+0x5c>)
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <_sbrk+0x60>)
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <_sbrk+0x64>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <_sbrk+0x64>)
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <_sbrk+0x68>)
 80017dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d207      	bcs.n	80017fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ec:	f003 fae6 	bl	8004dbc <__errno>
 80017f0:	4603      	mov	r3, r0
 80017f2:	220c      	movs	r2, #12
 80017f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017fa:	e009      	b.n	8001810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <_sbrk+0x64>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001802:	4b07      	ldr	r3, [pc, #28]	; (8001820 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <_sbrk+0x64>)
 800180c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180e:	68fb      	ldr	r3, [r7, #12]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20005000 	.word	0x20005000
 800181c:	00000400 	.word	0x00000400
 8001820:	20000538 	.word	0x20000538
 8001824:	200006d8 	.word	0x200006d8

08001828 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <nrf_tx_mode>:
		NRF24L01_Receive();
	}
}
// ----------------------------------------------------------------------------------------
void nrf_tx_mode(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	clearn_oled();
 8001838:	f7ff f88c 	bl	8000954 <clearn_oled>
	nrf_tx_test();
 800183c:	f7fe ff7c 	bl	8000738 <nrf_tx_test>
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}

08001844 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001844:	480c      	ldr	r0, [pc, #48]	; (8001878 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001846:	490d      	ldr	r1, [pc, #52]	; (800187c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001848:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800185c:	4c0a      	ldr	r4, [pc, #40]	; (8001888 <LoopFillZerobss+0x22>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800186a:	f7ff ffdd 	bl	8001828 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800186e:	f003 faab 	bl	8004dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001872:	f7ff fa6d 	bl	8000d50 <main>
  bx lr
 8001876:	4770      	bx	lr
  ldr r0, =_sdata
 8001878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800187c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001880:	08005fcc 	.word	0x08005fcc
  ldr r2, =_sbss
 8001884:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001888:	200006d8 	.word	0x200006d8

0800188c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC1_2_IRQHandler>
	...

08001890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_Init+0x28>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <HAL_Init+0x28>)
 800189a:	f043 0310 	orr.w	r3, r3, #16
 800189e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a0:	2003      	movs	r0, #3
 80018a2:	f000 f947 	bl	8001b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a6:	2000      	movs	r0, #0
 80018a8:	f000 f808 	bl	80018bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ac:	f7ff fcee 	bl	800128c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40022000 	.word	0x40022000

080018bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_InitTick+0x54>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_InitTick+0x58>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4619      	mov	r1, r3
 80018ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 f95f 	bl	8001b9e <HAL_SYSTICK_Config>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00e      	b.n	8001908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b0f      	cmp	r3, #15
 80018ee:	d80a      	bhi.n	8001906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f0:	2200      	movs	r2, #0
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018f8:	f000 f927 	bl	8001b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018fc:	4a06      	ldr	r2, [pc, #24]	; (8001918 <HAL_InitTick+0x5c>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	e000      	b.n	8001908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000018 	.word	0x20000018
 8001914:	20000020 	.word	0x20000020
 8001918:	2000001c 	.word	0x2000001c

0800191c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_IncTick+0x1c>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_IncTick+0x20>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4413      	add	r3, r2
 800192c:	4a03      	ldr	r2, [pc, #12]	; (800193c <HAL_IncTick+0x20>)
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	20000020 	.word	0x20000020
 800193c:	200006c4 	.word	0x200006c4

08001940 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return uwTick;
 8001944:	4b02      	ldr	r3, [pc, #8]	; (8001950 <HAL_GetTick+0x10>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	200006c4 	.word	0x200006c4

08001954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800195c:	f7ff fff0 	bl	8001940 <HAL_GetTick>
 8001960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800196c:	d005      	beq.n	800197a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_Delay+0x44>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4413      	add	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800197a:	bf00      	nop
 800197c:	f7ff ffe0 	bl	8001940 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	429a      	cmp	r2, r3
 800198a:	d8f7      	bhi.n	800197c <HAL_Delay+0x28>
  {
  }
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000020 	.word	0x20000020

0800199c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b8:	4013      	ands	r3, r2
 80019ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ce:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	60d3      	str	r3, [r2, #12]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <__NVIC_GetPriorityGrouping+0x18>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	0a1b      	lsrs	r3, r3, #8
 80019ee:	f003 0307 	and.w	r3, r3, #7
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	db0b      	blt.n	8001a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	f003 021f 	and.w	r2, r3, #31
 8001a18:	4906      	ldr	r1, [pc, #24]	; (8001a34 <__NVIC_EnableIRQ+0x34>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	2001      	movs	r0, #1
 8001a22:	fa00 f202 	lsl.w	r2, r0, r2
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	e000e100 	.word	0xe000e100

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0a      	blt.n	8001a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	490c      	ldr	r1, [pc, #48]	; (8001a84 <__NVIC_SetPriority+0x4c>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a60:	e00a      	b.n	8001a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4908      	ldr	r1, [pc, #32]	; (8001a88 <__NVIC_SetPriority+0x50>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	761a      	strb	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_EncodePriority+0x30>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_EncodePriority+0x32>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	4313      	orrs	r3, r2
         );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	; 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b00:	d301      	bcc.n	8001b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00f      	b.n	8001b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b06:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <SysTick_Config+0x40>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0e:	210f      	movs	r1, #15
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b14:	f7ff ff90 	bl	8001a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <SysTick_Config+0x40>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1e:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <SysTick_Config+0x40>)
 8001b20:	2207      	movs	r2, #7
 8001b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	e000e010 	.word	0xe000e010

08001b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ff2d 	bl	800199c <__NVIC_SetPriorityGrouping>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	4603      	mov	r3, r0
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b5c:	f7ff ff42 	bl	80019e4 <__NVIC_GetPriorityGrouping>
 8001b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	6978      	ldr	r0, [r7, #20]
 8001b68:	f7ff ff90 	bl	8001a8c <NVIC_EncodePriority>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff5f 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b7a:	bf00      	nop
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff35 	bl	8001a00 <__NVIC_EnableIRQ>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ffa2 	bl	8001af0 <SysTick_Config>
 8001bac:	4603      	mov	r3, r0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b085      	sub	sp, #20
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d008      	beq.n	8001bde <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2204      	movs	r2, #4
 8001bd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e020      	b.n	8001c20 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 020e 	bic.w	r2, r2, #14
 8001bec:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 0201 	bic.w	r2, r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c06:	2101      	movs	r1, #1
 8001c08:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d005      	beq.n	8001c4e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2204      	movs	r2, #4
 8001c46:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
 8001c4c:	e051      	b.n	8001cf2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 020e 	bic.w	r2, r2, #14
 8001c5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0201 	bic.w	r2, r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a22      	ldr	r2, [pc, #136]	; (8001cfc <HAL_DMA_Abort_IT+0xd0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d029      	beq.n	8001ccc <HAL_DMA_Abort_IT+0xa0>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a20      	ldr	r2, [pc, #128]	; (8001d00 <HAL_DMA_Abort_IT+0xd4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d022      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x9c>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1f      	ldr	r2, [pc, #124]	; (8001d04 <HAL_DMA_Abort_IT+0xd8>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d01a      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0x96>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1d      	ldr	r2, [pc, #116]	; (8001d08 <HAL_DMA_Abort_IT+0xdc>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d012      	beq.n	8001cbc <HAL_DMA_Abort_IT+0x90>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1c      	ldr	r2, [pc, #112]	; (8001d0c <HAL_DMA_Abort_IT+0xe0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d00a      	beq.n	8001cb6 <HAL_DMA_Abort_IT+0x8a>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1a      	ldr	r2, [pc, #104]	; (8001d10 <HAL_DMA_Abort_IT+0xe4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d102      	bne.n	8001cb0 <HAL_DMA_Abort_IT+0x84>
 8001caa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cae:	e00e      	b.n	8001cce <HAL_DMA_Abort_IT+0xa2>
 8001cb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cb4:	e00b      	b.n	8001cce <HAL_DMA_Abort_IT+0xa2>
 8001cb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cba:	e008      	b.n	8001cce <HAL_DMA_Abort_IT+0xa2>
 8001cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc0:	e005      	b.n	8001cce <HAL_DMA_Abort_IT+0xa2>
 8001cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc6:	e002      	b.n	8001cce <HAL_DMA_Abort_IT+0xa2>
 8001cc8:	2310      	movs	r3, #16
 8001cca:	e000      	b.n	8001cce <HAL_DMA_Abort_IT+0xa2>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <HAL_DMA_Abort_IT+0xe8>)
 8001cd0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	4798      	blx	r3
    } 
  }
  return status;
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40020008 	.word	0x40020008
 8001d00:	4002001c 	.word	0x4002001c
 8001d04:	40020030 	.word	0x40020030
 8001d08:	40020044 	.word	0x40020044
 8001d0c:	40020058 	.word	0x40020058
 8001d10:	4002006c 	.word	0x4002006c
 8001d14:	40020000 	.word	0x40020000

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b08b      	sub	sp, #44	; 0x2c
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2a:	e169      	b.n	8002000 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	f040 8158 	bne.w	8001ffa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4a9a      	ldr	r2, [pc, #616]	; (8001fb8 <HAL_GPIO_Init+0x2a0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d05e      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d54:	4a98      	ldr	r2, [pc, #608]	; (8001fb8 <HAL_GPIO_Init+0x2a0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d875      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d5a:	4a98      	ldr	r2, [pc, #608]	; (8001fbc <HAL_GPIO_Init+0x2a4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d058      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d60:	4a96      	ldr	r2, [pc, #600]	; (8001fbc <HAL_GPIO_Init+0x2a4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d86f      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d66:	4a96      	ldr	r2, [pc, #600]	; (8001fc0 <HAL_GPIO_Init+0x2a8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d052      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d6c:	4a94      	ldr	r2, [pc, #592]	; (8001fc0 <HAL_GPIO_Init+0x2a8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d869      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d72:	4a94      	ldr	r2, [pc, #592]	; (8001fc4 <HAL_GPIO_Init+0x2ac>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d04c      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d78:	4a92      	ldr	r2, [pc, #584]	; (8001fc4 <HAL_GPIO_Init+0x2ac>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d863      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d7e:	4a92      	ldr	r2, [pc, #584]	; (8001fc8 <HAL_GPIO_Init+0x2b0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d046      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
 8001d84:	4a90      	ldr	r2, [pc, #576]	; (8001fc8 <HAL_GPIO_Init+0x2b0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d85d      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d8a:	2b12      	cmp	r3, #18
 8001d8c:	d82a      	bhi.n	8001de4 <HAL_GPIO_Init+0xcc>
 8001d8e:	2b12      	cmp	r3, #18
 8001d90:	d859      	bhi.n	8001e46 <HAL_GPIO_Init+0x12e>
 8001d92:	a201      	add	r2, pc, #4	; (adr r2, 8001d98 <HAL_GPIO_Init+0x80>)
 8001d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d98:	08001e13 	.word	0x08001e13
 8001d9c:	08001ded 	.word	0x08001ded
 8001da0:	08001dff 	.word	0x08001dff
 8001da4:	08001e41 	.word	0x08001e41
 8001da8:	08001e47 	.word	0x08001e47
 8001dac:	08001e47 	.word	0x08001e47
 8001db0:	08001e47 	.word	0x08001e47
 8001db4:	08001e47 	.word	0x08001e47
 8001db8:	08001e47 	.word	0x08001e47
 8001dbc:	08001e47 	.word	0x08001e47
 8001dc0:	08001e47 	.word	0x08001e47
 8001dc4:	08001e47 	.word	0x08001e47
 8001dc8:	08001e47 	.word	0x08001e47
 8001dcc:	08001e47 	.word	0x08001e47
 8001dd0:	08001e47 	.word	0x08001e47
 8001dd4:	08001e47 	.word	0x08001e47
 8001dd8:	08001e47 	.word	0x08001e47
 8001ddc:	08001df5 	.word	0x08001df5
 8001de0:	08001e09 	.word	0x08001e09
 8001de4:	4a79      	ldr	r2, [pc, #484]	; (8001fcc <HAL_GPIO_Init+0x2b4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dea:	e02c      	b.n	8001e46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	623b      	str	r3, [r7, #32]
          break;
 8001df2:	e029      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	623b      	str	r3, [r7, #32]
          break;
 8001dfc:	e024      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	3308      	adds	r3, #8
 8001e04:	623b      	str	r3, [r7, #32]
          break;
 8001e06:	e01f      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	330c      	adds	r3, #12
 8001e0e:	623b      	str	r3, [r7, #32]
          break;
 8001e10:	e01a      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d102      	bne.n	8001e20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	623b      	str	r3, [r7, #32]
          break;
 8001e1e:	e013      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d105      	bne.n	8001e34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e28:	2308      	movs	r3, #8
 8001e2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	611a      	str	r2, [r3, #16]
          break;
 8001e32:	e009      	b.n	8001e48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e34:	2308      	movs	r3, #8
 8001e36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	615a      	str	r2, [r3, #20]
          break;
 8001e3e:	e003      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
          break;
 8001e44:	e000      	b.n	8001e48 <HAL_GPIO_Init+0x130>
          break;
 8001e46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2bff      	cmp	r3, #255	; 0xff
 8001e4c:	d801      	bhi.n	8001e52 <HAL_GPIO_Init+0x13a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	e001      	b.n	8001e56 <HAL_GPIO_Init+0x13e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3304      	adds	r3, #4
 8001e56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2bff      	cmp	r3, #255	; 0xff
 8001e5c:	d802      	bhi.n	8001e64 <HAL_GPIO_Init+0x14c>
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	e002      	b.n	8001e6a <HAL_GPIO_Init+0x152>
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	3b08      	subs	r3, #8
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	210f      	movs	r1, #15
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	6a39      	ldr	r1, [r7, #32]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	431a      	orrs	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 80b1 	beq.w	8001ffa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e98:	4b4d      	ldr	r3, [pc, #308]	; (8001fd0 <HAL_GPIO_Init+0x2b8>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	4a4c      	ldr	r2, [pc, #304]	; (8001fd0 <HAL_GPIO_Init+0x2b8>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6193      	str	r3, [r2, #24]
 8001ea4:	4b4a      	ldr	r3, [pc, #296]	; (8001fd0 <HAL_GPIO_Init+0x2b8>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eb0:	4a48      	ldr	r2, [pc, #288]	; (8001fd4 <HAL_GPIO_Init+0x2bc>)
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a40      	ldr	r2, [pc, #256]	; (8001fd8 <HAL_GPIO_Init+0x2c0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d013      	beq.n	8001f04 <HAL_GPIO_Init+0x1ec>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3f      	ldr	r2, [pc, #252]	; (8001fdc <HAL_GPIO_Init+0x2c4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d00d      	beq.n	8001f00 <HAL_GPIO_Init+0x1e8>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a3e      	ldr	r2, [pc, #248]	; (8001fe0 <HAL_GPIO_Init+0x2c8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d007      	beq.n	8001efc <HAL_GPIO_Init+0x1e4>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a3d      	ldr	r2, [pc, #244]	; (8001fe4 <HAL_GPIO_Init+0x2cc>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d101      	bne.n	8001ef8 <HAL_GPIO_Init+0x1e0>
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e006      	b.n	8001f06 <HAL_GPIO_Init+0x1ee>
 8001ef8:	2304      	movs	r3, #4
 8001efa:	e004      	b.n	8001f06 <HAL_GPIO_Init+0x1ee>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e002      	b.n	8001f06 <HAL_GPIO_Init+0x1ee>
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <HAL_GPIO_Init+0x1ee>
 8001f04:	2300      	movs	r3, #0
 8001f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f08:	f002 0203 	and.w	r2, r2, #3
 8001f0c:	0092      	lsls	r2, r2, #2
 8001f0e:	4093      	lsls	r3, r2
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f16:	492f      	ldr	r1, [pc, #188]	; (8001fd4 <HAL_GPIO_Init+0x2bc>)
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d006      	beq.n	8001f3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f30:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	492c      	ldr	r1, [pc, #176]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	600b      	str	r3, [r1, #0]
 8001f3c:	e006      	b.n	8001f4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f3e:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	4928      	ldr	r1, [pc, #160]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d006      	beq.n	8001f66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f58:	4b23      	ldr	r3, [pc, #140]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	4922      	ldr	r1, [pc, #136]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
 8001f64:	e006      	b.n	8001f74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f66:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	491e      	ldr	r1, [pc, #120]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d006      	beq.n	8001f8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	4918      	ldr	r1, [pc, #96]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]
 8001f8c:	e006      	b.n	8001f9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f8e:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	4914      	ldr	r1, [pc, #80]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d021      	beq.n	8001fec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	490e      	ldr	r1, [pc, #56]	; (8001fe8 <HAL_GPIO_Init+0x2d0>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60cb      	str	r3, [r1, #12]
 8001fb4:	e021      	b.n	8001ffa <HAL_GPIO_Init+0x2e2>
 8001fb6:	bf00      	nop
 8001fb8:	10320000 	.word	0x10320000
 8001fbc:	10310000 	.word	0x10310000
 8001fc0:	10220000 	.word	0x10220000
 8001fc4:	10210000 	.word	0x10210000
 8001fc8:	10120000 	.word	0x10120000
 8001fcc:	10110000 	.word	0x10110000
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	40010800 	.word	0x40010800
 8001fdc:	40010c00 	.word	0x40010c00
 8001fe0:	40011000 	.word	0x40011000
 8001fe4:	40011400 	.word	0x40011400
 8001fe8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_GPIO_Init+0x304>)
 8001fee:	68da      	ldr	r2, [r3, #12]
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	4909      	ldr	r1, [pc, #36]	; (800201c <HAL_GPIO_Init+0x304>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	fa22 f303 	lsr.w	r3, r2, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	f47f ae8e 	bne.w	8001d2c <HAL_GPIO_Init+0x14>
  }
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	372c      	adds	r7, #44	; 0x2c
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	40010400 	.word	0x40010400

08002020 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	887b      	ldrh	r3, [r7, #2]
 8002032:	4013      	ands	r3, r2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
 800203c:	e001      	b.n	8002042 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr

0800204e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	807b      	strh	r3, [r7, #2]
 800205a:	4613      	mov	r3, r2
 800205c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800205e:	787b      	ldrb	r3, [r7, #1]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002064:	887a      	ldrh	r2, [r7, #2]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800206a:	e003      	b.n	8002074 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800206c:	887b      	ldrh	r3, [r7, #2]
 800206e:	041a      	lsls	r2, r3, #16
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	611a      	str	r2, [r3, #16]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr

0800207e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800207e:	b480      	push	{r7}
 8002080:	b085      	sub	sp, #20
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	460b      	mov	r3, r1
 8002088:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002090:	887a      	ldrh	r2, [r7, #2]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4013      	ands	r3, r2
 8002096:	041a      	lsls	r2, r3, #16
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	43d9      	mvns	r1, r3
 800209c:	887b      	ldrh	r3, [r7, #2]
 800209e:	400b      	ands	r3, r1
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	611a      	str	r2, [r3, #16]
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020ba:	4b08      	ldr	r3, [pc, #32]	; (80020dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d006      	beq.n	80020d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020c6:	4a05      	ldr	r2, [pc, #20]	; (80020dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020c8:	88fb      	ldrh	r3, [r7, #6]
 80020ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020cc:	88fb      	ldrh	r3, [r7, #6]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff f88c 	bl	80011ec <HAL_GPIO_EXTI_Callback>
  }
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40010400 	.word	0x40010400

080020e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e12b      	b.n	800234a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d106      	bne.n	800210c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff f8f2 	bl	80012f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2224      	movs	r2, #36	; 0x24
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0201 	bic.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002132:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002142:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002144:	f000 fffa 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8002148:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4a81      	ldr	r2, [pc, #516]	; (8002354 <HAL_I2C_Init+0x274>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d807      	bhi.n	8002164 <HAL_I2C_Init+0x84>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4a80      	ldr	r2, [pc, #512]	; (8002358 <HAL_I2C_Init+0x278>)
 8002158:	4293      	cmp	r3, r2
 800215a:	bf94      	ite	ls
 800215c:	2301      	movls	r3, #1
 800215e:	2300      	movhi	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	e006      	b.n	8002172 <HAL_I2C_Init+0x92>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4a7d      	ldr	r2, [pc, #500]	; (800235c <HAL_I2C_Init+0x27c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	bf94      	ite	ls
 800216c:	2301      	movls	r3, #1
 800216e:	2300      	movhi	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e0e7      	b.n	800234a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4a78      	ldr	r2, [pc, #480]	; (8002360 <HAL_I2C_Init+0x280>)
 800217e:	fba2 2303 	umull	r2, r3, r2, r3
 8002182:	0c9b      	lsrs	r3, r3, #18
 8002184:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	430a      	orrs	r2, r1
 8002198:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4a6a      	ldr	r2, [pc, #424]	; (8002354 <HAL_I2C_Init+0x274>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d802      	bhi.n	80021b4 <HAL_I2C_Init+0xd4>
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	3301      	adds	r3, #1
 80021b2:	e009      	b.n	80021c8 <HAL_I2C_Init+0xe8>
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021ba:	fb02 f303 	mul.w	r3, r2, r3
 80021be:	4a69      	ldr	r2, [pc, #420]	; (8002364 <HAL_I2C_Init+0x284>)
 80021c0:	fba2 2303 	umull	r2, r3, r2, r3
 80021c4:	099b      	lsrs	r3, r3, #6
 80021c6:	3301      	adds	r3, #1
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	430b      	orrs	r3, r1
 80021ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	495c      	ldr	r1, [pc, #368]	; (8002354 <HAL_I2C_Init+0x274>)
 80021e4:	428b      	cmp	r3, r1
 80021e6:	d819      	bhi.n	800221c <HAL_I2C_Init+0x13c>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1e59      	subs	r1, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80021f6:	1c59      	adds	r1, r3, #1
 80021f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021fc:	400b      	ands	r3, r1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <HAL_I2C_Init+0x138>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1e59      	subs	r1, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002210:	3301      	adds	r3, #1
 8002212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002216:	e051      	b.n	80022bc <HAL_I2C_Init+0x1dc>
 8002218:	2304      	movs	r3, #4
 800221a:	e04f      	b.n	80022bc <HAL_I2C_Init+0x1dc>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d111      	bne.n	8002248 <HAL_I2C_Init+0x168>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1e58      	subs	r0, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	440b      	add	r3, r1
 8002232:	fbb0 f3f3 	udiv	r3, r0, r3
 8002236:	3301      	adds	r3, #1
 8002238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800223c:	2b00      	cmp	r3, #0
 800223e:	bf0c      	ite	eq
 8002240:	2301      	moveq	r3, #1
 8002242:	2300      	movne	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	e012      	b.n	800226e <HAL_I2C_Init+0x18e>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1e58      	subs	r0, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	0099      	lsls	r1, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	fbb0 f3f3 	udiv	r3, r0, r3
 800225e:	3301      	adds	r3, #1
 8002260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf0c      	ite	eq
 8002268:	2301      	moveq	r3, #1
 800226a:	2300      	movne	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_I2C_Init+0x196>
 8002272:	2301      	movs	r3, #1
 8002274:	e022      	b.n	80022bc <HAL_I2C_Init+0x1dc>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10e      	bne.n	800229c <HAL_I2C_Init+0x1bc>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1e58      	subs	r0, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6859      	ldr	r1, [r3, #4]
 8002286:	460b      	mov	r3, r1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	440b      	add	r3, r1
 800228c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002290:	3301      	adds	r3, #1
 8002292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800229a:	e00f      	b.n	80022bc <HAL_I2C_Init+0x1dc>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1e58      	subs	r0, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	0099      	lsls	r1, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b2:	3301      	adds	r3, #1
 80022b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	6809      	ldr	r1, [r1, #0]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69da      	ldr	r2, [r3, #28]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6911      	ldr	r1, [r2, #16]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68d2      	ldr	r2, [r2, #12]
 80022f6:	4311      	orrs	r1, r2
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	430b      	orrs	r3, r1
 80022fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0201 	orr.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	000186a0 	.word	0x000186a0
 8002358:	001e847f 	.word	0x001e847f
 800235c:	003d08ff 	.word	0x003d08ff
 8002360:	431bde83 	.word	0x431bde83
 8002364:	10624dd3 	.word	0x10624dd3

08002368 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af02      	add	r7, sp, #8
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	4608      	mov	r0, r1
 8002372:	4611      	mov	r1, r2
 8002374:	461a      	mov	r2, r3
 8002376:	4603      	mov	r3, r0
 8002378:	817b      	strh	r3, [r7, #10]
 800237a:	460b      	mov	r3, r1
 800237c:	813b      	strh	r3, [r7, #8]
 800237e:	4613      	mov	r3, r2
 8002380:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002382:	f7ff fadd 	bl	8001940 <HAL_GetTick>
 8002386:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b20      	cmp	r3, #32
 8002392:	f040 80d9 	bne.w	8002548 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	2319      	movs	r3, #25
 800239c:	2201      	movs	r2, #1
 800239e:	496d      	ldr	r1, [pc, #436]	; (8002554 <HAL_I2C_Mem_Write+0x1ec>)
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 f971 	bl	8002688 <I2C_WaitOnFlagUntilTimeout>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80023ac:	2302      	movs	r3, #2
 80023ae:	e0cc      	b.n	800254a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_I2C_Mem_Write+0x56>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e0c5      	b.n	800254a <HAL_I2C_Mem_Write+0x1e2>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d007      	beq.n	80023e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2221      	movs	r2, #33	; 0x21
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2240      	movs	r2, #64	; 0x40
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a3a      	ldr	r2, [r7, #32]
 800240e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002414:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4a4d      	ldr	r2, [pc, #308]	; (8002558 <HAL_I2C_Mem_Write+0x1f0>)
 8002424:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002426:	88f8      	ldrh	r0, [r7, #6]
 8002428:	893a      	ldrh	r2, [r7, #8]
 800242a:	8979      	ldrh	r1, [r7, #10]
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	9301      	str	r3, [sp, #4]
 8002430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	4603      	mov	r3, r0
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 f890 	bl	800255c <I2C_RequestMemoryWrite>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d052      	beq.n	80024e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e081      	b.n	800254a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 f9f2 	bl	8002834 <I2C_WaitOnTXEFlagUntilTimeout>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00d      	beq.n	8002472 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	2b04      	cmp	r3, #4
 800245c:	d107      	bne.n	800246e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e06b      	b.n	800254a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	781a      	ldrb	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002498:	b29b      	uxth	r3, r3
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d11b      	bne.n	80024e8 <HAL_I2C_Mem_Write+0x180>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d017      	beq.n	80024e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	781a      	ldrb	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024de:	b29b      	uxth	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1aa      	bne.n	8002446 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 f9de 	bl	80028b6 <I2C_WaitOnBTFFlagUntilTimeout>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00d      	beq.n	800251c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	2b04      	cmp	r3, #4
 8002506:	d107      	bne.n	8002518 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002516:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e016      	b.n	800254a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	e000      	b.n	800254a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002548:	2302      	movs	r3, #2
  }
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	00100002 	.word	0x00100002
 8002558:	ffff0000 	.word	0xffff0000

0800255c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af02      	add	r7, sp, #8
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	4608      	mov	r0, r1
 8002566:	4611      	mov	r1, r2
 8002568:	461a      	mov	r2, r3
 800256a:	4603      	mov	r3, r0
 800256c:	817b      	strh	r3, [r7, #10]
 800256e:	460b      	mov	r3, r1
 8002570:	813b      	strh	r3, [r7, #8]
 8002572:	4613      	mov	r3, r2
 8002574:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002584:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	2200      	movs	r2, #0
 800258e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f878 	bl	8002688 <I2C_WaitOnFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00d      	beq.n	80025ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ac:	d103      	bne.n	80025b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e05f      	b.n	800267a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025ba:	897b      	ldrh	r3, [r7, #10]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	461a      	mov	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	6a3a      	ldr	r2, [r7, #32]
 80025ce:	492d      	ldr	r1, [pc, #180]	; (8002684 <I2C_RequestMemoryWrite+0x128>)
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f8b0 	bl	8002736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e04c      	b.n	800267a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f8:	6a39      	ldr	r1, [r7, #32]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f91a 	bl	8002834 <I2C_WaitOnTXEFlagUntilTimeout>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00d      	beq.n	8002622 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	2b04      	cmp	r3, #4
 800260c:	d107      	bne.n	800261e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800261c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e02b      	b.n	800267a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d105      	bne.n	8002634 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002628:	893b      	ldrh	r3, [r7, #8]
 800262a:	b2da      	uxtb	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	611a      	str	r2, [r3, #16]
 8002632:	e021      	b.n	8002678 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002634:	893b      	ldrh	r3, [r7, #8]
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	b29b      	uxth	r3, r3
 800263a:	b2da      	uxtb	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002644:	6a39      	ldr	r1, [r7, #32]
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 f8f4 	bl	8002834 <I2C_WaitOnTXEFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00d      	beq.n	800266e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	2b04      	cmp	r3, #4
 8002658:	d107      	bne.n	800266a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002668:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e005      	b.n	800267a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800266e:	893b      	ldrh	r3, [r7, #8]
 8002670:	b2da      	uxtb	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	00010002 	.word	0x00010002

08002688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	4613      	mov	r3, r2
 8002696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002698:	e025      	b.n	80026e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026a0:	d021      	beq.n	80026e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a2:	f7ff f94d 	bl	8001940 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d302      	bcc.n	80026b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d116      	bne.n	80026e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f043 0220 	orr.w	r2, r3, #32
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e023      	b.n	800272e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	0c1b      	lsrs	r3, r3, #16
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d10d      	bne.n	800270c <I2C_WaitOnFlagUntilTimeout+0x84>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	43da      	mvns	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	4013      	ands	r3, r2
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	bf0c      	ite	eq
 8002702:	2301      	moveq	r3, #1
 8002704:	2300      	movne	r3, #0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	e00c      	b.n	8002726 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	43da      	mvns	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4013      	ands	r3, r2
 8002718:	b29b      	uxth	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf0c      	ite	eq
 800271e:	2301      	moveq	r3, #1
 8002720:	2300      	movne	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	461a      	mov	r2, r3
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	429a      	cmp	r2, r3
 800272a:	d0b6      	beq.n	800269a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002744:	e051      	b.n	80027ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002754:	d123      	bne.n	800279e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002764:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800276e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2220      	movs	r2, #32
 800277a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f043 0204 	orr.w	r2, r3, #4
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e046      	b.n	800282c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027a4:	d021      	beq.n	80027ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a6:	f7ff f8cb 	bl	8001940 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d302      	bcc.n	80027bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d116      	bne.n	80027ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f043 0220 	orr.w	r2, r3, #32
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e020      	b.n	800282c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	0c1b      	lsrs	r3, r3, #16
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d10c      	bne.n	800280e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	43da      	mvns	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	4013      	ands	r3, r2
 8002800:	b29b      	uxth	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	bf14      	ite	ne
 8002806:	2301      	movne	r3, #1
 8002808:	2300      	moveq	r3, #0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	e00b      	b.n	8002826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	43da      	mvns	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	4013      	ands	r3, r2
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	bf14      	ite	ne
 8002820:	2301      	movne	r3, #1
 8002822:	2300      	moveq	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d18d      	bne.n	8002746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002840:	e02d      	b.n	800289e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f878 	bl	8002938 <I2C_IsAcknowledgeFailed>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e02d      	b.n	80028ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002858:	d021      	beq.n	800289e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285a:	f7ff f871 	bl	8001940 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	429a      	cmp	r2, r3
 8002868:	d302      	bcc.n	8002870 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d116      	bne.n	800289e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f043 0220 	orr.w	r2, r3, #32
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e007      	b.n	80028ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a8:	2b80      	cmp	r3, #128	; 0x80
 80028aa:	d1ca      	bne.n	8002842 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b084      	sub	sp, #16
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028c2:	e02d      	b.n	8002920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f837 	bl	8002938 <I2C_IsAcknowledgeFailed>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e02d      	b.n	8002930 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028da:	d021      	beq.n	8002920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028dc:	f7ff f830 	bl	8001940 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d302      	bcc.n	80028f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d116      	bne.n	8002920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f043 0220 	orr.w	r2, r3, #32
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e007      	b.n	8002930 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b04      	cmp	r3, #4
 800292c:	d1ca      	bne.n	80028c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800294e:	d11b      	bne.n	8002988 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002958:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f043 0204 	orr.w	r2, r3, #4
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e26c      	b.n	8002e80 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8087 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b4:	4b92      	ldr	r3, [pc, #584]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d00c      	beq.n	80029da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029c0:	4b8f      	ldr	r3, [pc, #572]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d112      	bne.n	80029f2 <HAL_RCC_OscConfig+0x5e>
 80029cc:	4b8c      	ldr	r3, [pc, #560]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d8:	d10b      	bne.n	80029f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029da:	4b89      	ldr	r3, [pc, #548]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d06c      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x12c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d168      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e246      	b.n	8002e80 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fa:	d106      	bne.n	8002a0a <HAL_RCC_OscConfig+0x76>
 80029fc:	4b80      	ldr	r3, [pc, #512]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a7f      	ldr	r2, [pc, #508]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	e02e      	b.n	8002a68 <HAL_RCC_OscConfig+0xd4>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x98>
 8002a12:	4b7b      	ldr	r3, [pc, #492]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a7a      	ldr	r2, [pc, #488]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	4b78      	ldr	r3, [pc, #480]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a77      	ldr	r2, [pc, #476]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e01d      	b.n	8002a68 <HAL_RCC_OscConfig+0xd4>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0xbc>
 8002a36:	4b72      	ldr	r3, [pc, #456]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a71      	ldr	r2, [pc, #452]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	4b6f      	ldr	r3, [pc, #444]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a6e      	ldr	r2, [pc, #440]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCC_OscConfig+0xd4>
 8002a50:	4b6b      	ldr	r3, [pc, #428]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a6a      	ldr	r2, [pc, #424]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	4b68      	ldr	r3, [pc, #416]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a67      	ldr	r2, [pc, #412]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d013      	beq.n	8002a98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7fe ff66 	bl	8001940 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a78:	f7fe ff62 	bl	8001940 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	; 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e1fa      	b.n	8002e80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	4b5d      	ldr	r3, [pc, #372]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0xe4>
 8002a96:	e014      	b.n	8002ac2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7fe ff52 	bl	8001940 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa0:	f7fe ff4e 	bl	8001940 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	; 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e1e6      	b.n	8002e80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab2:	4b53      	ldr	r3, [pc, #332]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x10c>
 8002abe:	e000      	b.n	8002ac2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d063      	beq.n	8002b96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ace:	4b4c      	ldr	r3, [pc, #304]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ada:	4b49      	ldr	r3, [pc, #292]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d11c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x18c>
 8002ae6:	4b46      	ldr	r3, [pc, #280]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d116      	bne.n	8002b20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	4b43      	ldr	r3, [pc, #268]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_RCC_OscConfig+0x176>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e1ba      	b.n	8002e80 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0a:	4b3d      	ldr	r3, [pc, #244]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4939      	ldr	r1, [pc, #228]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1e:	e03a      	b.n	8002b96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b28:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <HAL_RCC_OscConfig+0x270>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2e:	f7fe ff07 	bl	8001940 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b36:	f7fe ff03 	bl	8001940 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e19b      	b.n	8002e80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	4b2d      	ldr	r3, [pc, #180]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b54:	4b2a      	ldr	r3, [pc, #168]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4927      	ldr	r1, [pc, #156]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]
 8002b68:	e015      	b.n	8002b96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6a:	4b26      	ldr	r3, [pc, #152]	; (8002c04 <HAL_RCC_OscConfig+0x270>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe fee6 	bl	8001940 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b78:	f7fe fee2 	bl	8001940 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e17a      	b.n	8002e80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d03a      	beq.n	8002c18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d019      	beq.n	8002bde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002baa:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb0:	f7fe fec6 	bl	8001940 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb8:	f7fe fec2 	bl	8001940 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e15a      	b.n	8002e80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	f000 fad8 	bl	800318c <RCC_Delay>
 8002bdc:	e01c      	b.n	8002c18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be4:	f7fe feac 	bl	8001940 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bea:	e00f      	b.n	8002c0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bec:	f7fe fea8 	bl	8001940 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d908      	bls.n	8002c0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e140      	b.n	8002e80 <HAL_RCC_OscConfig+0x4ec>
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000
 8002c04:	42420000 	.word	0x42420000
 8002c08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c0c:	4b9e      	ldr	r3, [pc, #632]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e9      	bne.n	8002bec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80a6 	beq.w	8002d72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c26:	2300      	movs	r3, #0
 8002c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2a:	4b97      	ldr	r3, [pc, #604]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10d      	bne.n	8002c52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c36:	4b94      	ldr	r3, [pc, #592]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	4a93      	ldr	r2, [pc, #588]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c40:	61d3      	str	r3, [r2, #28]
 8002c42:	4b91      	ldr	r3, [pc, #580]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c52:	4b8e      	ldr	r3, [pc, #568]	; (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d118      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5e:	4b8b      	ldr	r3, [pc, #556]	; (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a8a      	ldr	r2, [pc, #552]	; (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6a:	f7fe fe69 	bl	8001940 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c72:	f7fe fe65 	bl	8001940 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b64      	cmp	r3, #100	; 0x64
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e0fd      	b.n	8002e80 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	4b81      	ldr	r3, [pc, #516]	; (8002e8c <HAL_RCC_OscConfig+0x4f8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x312>
 8002c98:	4b7b      	ldr	r3, [pc, #492]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4a7a      	ldr	r2, [pc, #488]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6213      	str	r3, [r2, #32]
 8002ca4:	e02d      	b.n	8002d02 <HAL_RCC_OscConfig+0x36e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x334>
 8002cae:	4b76      	ldr	r3, [pc, #472]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	4a75      	ldr	r2, [pc, #468]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	6213      	str	r3, [r2, #32]
 8002cba:	4b73      	ldr	r3, [pc, #460]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	4a72      	ldr	r2, [pc, #456]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002cc0:	f023 0304 	bic.w	r3, r3, #4
 8002cc4:	6213      	str	r3, [r2, #32]
 8002cc6:	e01c      	b.n	8002d02 <HAL_RCC_OscConfig+0x36e>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b05      	cmp	r3, #5
 8002cce:	d10c      	bne.n	8002cea <HAL_RCC_OscConfig+0x356>
 8002cd0:	4b6d      	ldr	r3, [pc, #436]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	4a6c      	ldr	r2, [pc, #432]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002cd6:	f043 0304 	orr.w	r3, r3, #4
 8002cda:	6213      	str	r3, [r2, #32]
 8002cdc:	4b6a      	ldr	r3, [pc, #424]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	4a69      	ldr	r2, [pc, #420]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6213      	str	r3, [r2, #32]
 8002ce8:	e00b      	b.n	8002d02 <HAL_RCC_OscConfig+0x36e>
 8002cea:	4b67      	ldr	r3, [pc, #412]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	4a66      	ldr	r2, [pc, #408]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002cf0:	f023 0301 	bic.w	r3, r3, #1
 8002cf4:	6213      	str	r3, [r2, #32]
 8002cf6:	4b64      	ldr	r3, [pc, #400]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	4a63      	ldr	r2, [pc, #396]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002cfc:	f023 0304 	bic.w	r3, r3, #4
 8002d00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d015      	beq.n	8002d36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0a:	f7fe fe19 	bl	8001940 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d10:	e00a      	b.n	8002d28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d12:	f7fe fe15 	bl	8001940 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e0ab      	b.n	8002e80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d28:	4b57      	ldr	r3, [pc, #348]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0ee      	beq.n	8002d12 <HAL_RCC_OscConfig+0x37e>
 8002d34:	e014      	b.n	8002d60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d36:	f7fe fe03 	bl	8001940 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3c:	e00a      	b.n	8002d54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3e:	f7fe fdff 	bl	8001940 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e095      	b.n	8002e80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d54:	4b4c      	ldr	r3, [pc, #304]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1ee      	bne.n	8002d3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d60:	7dfb      	ldrb	r3, [r7, #23]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d105      	bne.n	8002d72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d66:	4b48      	ldr	r3, [pc, #288]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	4a47      	ldr	r2, [pc, #284]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 8081 	beq.w	8002e7e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d7c:	4b42      	ldr	r3, [pc, #264]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d061      	beq.n	8002e4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d146      	bne.n	8002e1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d90:	4b3f      	ldr	r3, [pc, #252]	; (8002e90 <HAL_RCC_OscConfig+0x4fc>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d96:	f7fe fdd3 	bl	8001940 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9e:	f7fe fdcf 	bl	8001940 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e067      	b.n	8002e80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db0:	4b35      	ldr	r3, [pc, #212]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f0      	bne.n	8002d9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc4:	d108      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dc6:	4b30      	ldr	r3, [pc, #192]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	492d      	ldr	r1, [pc, #180]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dd8:	4b2b      	ldr	r3, [pc, #172]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a19      	ldr	r1, [r3, #32]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	430b      	orrs	r3, r1
 8002dea:	4927      	ldr	r1, [pc, #156]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df0:	4b27      	ldr	r3, [pc, #156]	; (8002e90 <HAL_RCC_OscConfig+0x4fc>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df6:	f7fe fda3 	bl	8001940 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7fe fd9f 	bl	8001940 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e037      	b.n	8002e80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e10:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x46a>
 8002e1c:	e02f      	b.n	8002e7e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1e:	4b1c      	ldr	r3, [pc, #112]	; (8002e90 <HAL_RCC_OscConfig+0x4fc>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fe fd8c 	bl	8001940 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe fd88 	bl	8001940 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e020      	b.n	8002e80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3e:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x498>
 8002e4a:	e018      	b.n	8002e7e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e013      	b.n	8002e80 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e58:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <HAL_RCC_OscConfig+0x4f4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d106      	bne.n	8002e7a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d001      	beq.n	8002e7e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40007000 	.word	0x40007000
 8002e90:	42420060 	.word	0x42420060

08002e94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0d0      	b.n	800304a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b6a      	ldr	r3, [pc, #424]	; (8003054 <HAL_RCC_ClockConfig+0x1c0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d910      	bls.n	8002ed8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b67      	ldr	r3, [pc, #412]	; (8003054 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 0207 	bic.w	r2, r3, #7
 8002ebe:	4965      	ldr	r1, [pc, #404]	; (8003054 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec6:	4b63      	ldr	r3, [pc, #396]	; (8003054 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d001      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0b8      	b.n	800304a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d020      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ef0:	4b59      	ldr	r3, [pc, #356]	; (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4a58      	ldr	r2, [pc, #352]	; (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002efa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f08:	4b53      	ldr	r3, [pc, #332]	; (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4a52      	ldr	r2, [pc, #328]	; (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f14:	4b50      	ldr	r3, [pc, #320]	; (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	494d      	ldr	r1, [pc, #308]	; (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d040      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d107      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3a:	4b47      	ldr	r3, [pc, #284]	; (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d115      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e07f      	b.n	800304a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f52:	4b41      	ldr	r3, [pc, #260]	; (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e073      	b.n	800304a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f62:	4b3d      	ldr	r3, [pc, #244]	; (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e06b      	b.n	800304a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f72:	4b39      	ldr	r3, [pc, #228]	; (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f023 0203 	bic.w	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4936      	ldr	r1, [pc, #216]	; (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f84:	f7fe fcdc 	bl	8001940 <HAL_GetTick>
 8002f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f8c:	f7fe fcd8 	bl	8001940 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e053      	b.n	800304a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f003 020c 	and.w	r2, r3, #12
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d1eb      	bne.n	8002f8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb4:	4b27      	ldr	r3, [pc, #156]	; (8003054 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d210      	bcs.n	8002fe4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc2:	4b24      	ldr	r3, [pc, #144]	; (8003054 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 0207 	bic.w	r2, r3, #7
 8002fca:	4922      	ldr	r1, [pc, #136]	; (8003054 <HAL_RCC_ClockConfig+0x1c0>)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd2:	4b20      	ldr	r3, [pc, #128]	; (8003054 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d001      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e032      	b.n	800304a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff0:	4b19      	ldr	r3, [pc, #100]	; (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4916      	ldr	r1, [pc, #88]	; (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800300e:	4b12      	ldr	r3, [pc, #72]	; (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	490e      	ldr	r1, [pc, #56]	; (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 800301e:	4313      	orrs	r3, r2
 8003020:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003022:	f000 f821 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 8003026:	4602      	mov	r2, r0
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_RCC_ClockConfig+0x1c4>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	490a      	ldr	r1, [pc, #40]	; (800305c <HAL_RCC_ClockConfig+0x1c8>)
 8003034:	5ccb      	ldrb	r3, [r1, r3]
 8003036:	fa22 f303 	lsr.w	r3, r2, r3
 800303a:	4a09      	ldr	r2, [pc, #36]	; (8003060 <HAL_RCC_ClockConfig+0x1cc>)
 800303c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800303e:	4b09      	ldr	r3, [pc, #36]	; (8003064 <HAL_RCC_ClockConfig+0x1d0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7fe fc3a 	bl	80018bc <HAL_InitTick>

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40022000 	.word	0x40022000
 8003058:	40021000 	.word	0x40021000
 800305c:	08005f54 	.word	0x08005f54
 8003060:	20000018 	.word	0x20000018
 8003064:	2000001c 	.word	0x2000001c

08003068 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003068:	b490      	push	{r4, r7}
 800306a:	b08a      	sub	sp, #40	; 0x28
 800306c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800306e:	4b2a      	ldr	r3, [pc, #168]	; (8003118 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003070:	1d3c      	adds	r4, r7, #4
 8003072:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003074:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003078:	f240 2301 	movw	r3, #513	; 0x201
 800307c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	2300      	movs	r3, #0
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	2300      	movs	r3, #0
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003092:	4b22      	ldr	r3, [pc, #136]	; (800311c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 030c 	and.w	r3, r3, #12
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d002      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x40>
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d003      	beq.n	80030ae <HAL_RCC_GetSysClockFreq+0x46>
 80030a6:	e02d      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030a8:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030aa:	623b      	str	r3, [r7, #32]
      break;
 80030ac:	e02d      	b.n	800310a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	0c9b      	lsrs	r3, r3, #18
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030ba:	4413      	add	r3, r2
 80030bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030c0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d013      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030cc:	4b13      	ldr	r3, [pc, #76]	; (800311c <HAL_RCC_GetSysClockFreq+0xb4>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	0c5b      	lsrs	r3, r3, #17
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030da:	4413      	add	r3, r2
 80030dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	4a0e      	ldr	r2, [pc, #56]	; (8003120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030e6:	fb02 f203 	mul.w	r2, r2, r3
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
 80030f2:	e004      	b.n	80030fe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	4a0b      	ldr	r2, [pc, #44]	; (8003124 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030f8:	fb02 f303 	mul.w	r3, r2, r3
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	623b      	str	r3, [r7, #32]
      break;
 8003102:	e002      	b.n	800310a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003106:	623b      	str	r3, [r7, #32]
      break;
 8003108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800310a:	6a3b      	ldr	r3, [r7, #32]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3728      	adds	r7, #40	; 0x28
 8003110:	46bd      	mov	sp, r7
 8003112:	bc90      	pop	{r4, r7}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	080057d8 	.word	0x080057d8
 800311c:	40021000 	.word	0x40021000
 8003120:	007a1200 	.word	0x007a1200
 8003124:	003d0900 	.word	0x003d0900

08003128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800312c:	4b02      	ldr	r3, [pc, #8]	; (8003138 <HAL_RCC_GetHCLKFreq+0x10>)
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	20000018 	.word	0x20000018

0800313c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003140:	f7ff fff2 	bl	8003128 <HAL_RCC_GetHCLKFreq>
 8003144:	4602      	mov	r2, r0
 8003146:	4b05      	ldr	r3, [pc, #20]	; (800315c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	0a1b      	lsrs	r3, r3, #8
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	4903      	ldr	r1, [pc, #12]	; (8003160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003152:	5ccb      	ldrb	r3, [r1, r3]
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000
 8003160:	08005f64 	.word	0x08005f64

08003164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003168:	f7ff ffde 	bl	8003128 <HAL_RCC_GetHCLKFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	0adb      	lsrs	r3, r3, #11
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	4903      	ldr	r1, [pc, #12]	; (8003188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800317a:	5ccb      	ldrb	r3, [r1, r3]
 800317c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003180:	4618      	mov	r0, r3
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40021000 	.word	0x40021000
 8003188:	08005f64 	.word	0x08005f64

0800318c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003194:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <RCC_Delay+0x34>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <RCC_Delay+0x38>)
 800319a:	fba2 2303 	umull	r2, r3, r2, r3
 800319e:	0a5b      	lsrs	r3, r3, #9
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	fb02 f303 	mul.w	r3, r2, r3
 80031a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031a8:	bf00      	nop
  }
  while (Delay --);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1e5a      	subs	r2, r3, #1
 80031ae:	60fa      	str	r2, [r7, #12]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f9      	bne.n	80031a8 <RCC_Delay+0x1c>
}
 80031b4:	bf00      	nop
 80031b6:	bf00      	nop
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr
 80031c0:	20000018 	.word	0x20000018
 80031c4:	10624dd3 	.word	0x10624dd3

080031c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e076      	b.n	80032c8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d108      	bne.n	80031f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ea:	d009      	beq.n	8003200 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	61da      	str	r2, [r3, #28]
 80031f2:	e005      	b.n	8003200 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fe f8a6 	bl	800136c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003236:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003284:	ea42 0103 	orr.w	r1, r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	0c1a      	lsrs	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f002 0204 	and.w	r2, r2, #4
 80032a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	69da      	ldr	r2, [r3, #28]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	4613      	mov	r3, r2
 80032de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <HAL_SPI_Transmit+0x22>
 80032ee:	2302      	movs	r3, #2
 80032f0:	e126      	b.n	8003540 <HAL_SPI_Transmit+0x270>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032fa:	f7fe fb21 	bl	8001940 <HAL_GetTick>
 80032fe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b01      	cmp	r3, #1
 800330e:	d002      	beq.n	8003316 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003310:	2302      	movs	r3, #2
 8003312:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003314:	e10b      	b.n	800352e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <HAL_SPI_Transmit+0x52>
 800331c:	88fb      	ldrh	r3, [r7, #6]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d102      	bne.n	8003328 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003326:	e102      	b.n	800352e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2203      	movs	r2, #3
 800332c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	88fa      	ldrh	r2, [r7, #6]
 8003340:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	88fa      	ldrh	r2, [r7, #6]
 8003346:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800336e:	d10f      	bne.n	8003390 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800337e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800338e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339a:	2b40      	cmp	r3, #64	; 0x40
 800339c:	d007      	beq.n	80033ae <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b6:	d14b      	bne.n	8003450 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_SPI_Transmit+0xf6>
 80033c0:	8afb      	ldrh	r3, [r7, #22]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d13e      	bne.n	8003444 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	881a      	ldrh	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	1c9a      	adds	r2, r3, #2
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033ea:	e02b      	b.n	8003444 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d112      	bne.n	8003420 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	881a      	ldrh	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	1c9a      	adds	r2, r3, #2
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	86da      	strh	r2, [r3, #54]	; 0x36
 800341e:	e011      	b.n	8003444 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003420:	f7fe fa8e 	bl	8001940 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d803      	bhi.n	8003438 <HAL_SPI_Transmit+0x168>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003436:	d102      	bne.n	800343e <HAL_SPI_Transmit+0x16e>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d102      	bne.n	8003444 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003442:	e074      	b.n	800352e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1ce      	bne.n	80033ec <HAL_SPI_Transmit+0x11c>
 800344e:	e04c      	b.n	80034ea <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <HAL_SPI_Transmit+0x18e>
 8003458:	8afb      	ldrh	r3, [r7, #22]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d140      	bne.n	80034e0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	330c      	adds	r3, #12
 8003468:	7812      	ldrb	r2, [r2, #0]
 800346a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003484:	e02c      	b.n	80034e0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b02      	cmp	r3, #2
 8003492:	d113      	bne.n	80034bc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	330c      	adds	r3, #12
 800349e:	7812      	ldrb	r2, [r2, #0]
 80034a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80034ba:	e011      	b.n	80034e0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034bc:	f7fe fa40 	bl	8001940 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d803      	bhi.n	80034d4 <HAL_SPI_Transmit+0x204>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034d2:	d102      	bne.n	80034da <HAL_SPI_Transmit+0x20a>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d102      	bne.n	80034e0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034de:	e026      	b.n	800352e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1cd      	bne.n	8003486 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	6839      	ldr	r1, [r7, #0]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 fbb8 	bl	8003c64 <SPI_EndRxTxTransaction>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2220      	movs	r2, #32
 80034fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10a      	bne.n	800351e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003508:	2300      	movs	r3, #0
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	77fb      	strb	r3, [r7, #31]
 800352a:	e000      	b.n	800352e <HAL_SPI_Transmit+0x25e>
  }

error:
 800352c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800353e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3720      	adds	r7, #32
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003564:	d112      	bne.n	800358c <HAL_SPI_Receive+0x44>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10e      	bne.n	800358c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2204      	movs	r2, #4
 8003572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003576:	88fa      	ldrh	r2, [r7, #6]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	4613      	mov	r3, r2
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f8f1 	bl	800376a <HAL_SPI_TransmitReceive>
 8003588:	4603      	mov	r3, r0
 800358a:	e0ea      	b.n	8003762 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_SPI_Receive+0x52>
 8003596:	2302      	movs	r3, #2
 8003598:	e0e3      	b.n	8003762 <HAL_SPI_Receive+0x21a>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035a2:	f7fe f9cd 	bl	8001940 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d002      	beq.n	80035ba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80035b4:	2302      	movs	r3, #2
 80035b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035b8:	e0ca      	b.n	8003750 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <HAL_SPI_Receive+0x7e>
 80035c0:	88fb      	ldrh	r3, [r7, #6]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d102      	bne.n	80035cc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035ca:	e0c1      	b.n	8003750 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2204      	movs	r2, #4
 80035d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	88fa      	ldrh	r2, [r7, #6]
 80035e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	88fa      	ldrh	r2, [r7, #6]
 80035ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003612:	d10f      	bne.n	8003634 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003622:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003632:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363e:	2b40      	cmp	r3, #64	; 0x40
 8003640:	d007      	beq.n	8003652 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003650:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d162      	bne.n	8003720 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800365a:	e02e      	b.n	80036ba <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b01      	cmp	r3, #1
 8003668:	d115      	bne.n	8003696 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f103 020c 	add.w	r2, r3, #12
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	7812      	ldrb	r2, [r2, #0]
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003694:	e011      	b.n	80036ba <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003696:	f7fe f953 	bl	8001940 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d803      	bhi.n	80036ae <HAL_SPI_Receive+0x166>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036ac:	d102      	bne.n	80036b4 <HAL_SPI_Receive+0x16c>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d102      	bne.n	80036ba <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036b8:	e04a      	b.n	8003750 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1cb      	bne.n	800365c <HAL_SPI_Receive+0x114>
 80036c4:	e031      	b.n	800372a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d113      	bne.n	80036fc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036de:	b292      	uxth	r2, r2
 80036e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e6:	1c9a      	adds	r2, r3, #2
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036fa:	e011      	b.n	8003720 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036fc:	f7fe f920 	bl	8001940 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d803      	bhi.n	8003714 <HAL_SPI_Receive+0x1cc>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003712:	d102      	bne.n	800371a <HAL_SPI_Receive+0x1d2>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d102      	bne.n	8003720 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800371e:	e017      	b.n	8003750 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1cd      	bne.n	80036c6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	6839      	ldr	r1, [r7, #0]
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 fa46 	bl	8003bc0 <SPI_EndRxTransaction>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2220      	movs	r2, #32
 800373e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	75fb      	strb	r3, [r7, #23]
 800374c:	e000      	b.n	8003750 <HAL_SPI_Receive+0x208>
  }

error :
 800374e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003760:	7dfb      	ldrb	r3, [r7, #23]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b08c      	sub	sp, #48	; 0x30
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
 8003776:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003778:	2301      	movs	r3, #1
 800377a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_SPI_TransmitReceive+0x26>
 800378c:	2302      	movs	r3, #2
 800378e:	e18a      	b.n	8003aa6 <HAL_SPI_TransmitReceive+0x33c>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003798:	f7fe f8d2 	bl	8001940 <HAL_GetTick>
 800379c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80037ae:	887b      	ldrh	r3, [r7, #2]
 80037b0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d00f      	beq.n	80037da <HAL_SPI_TransmitReceive+0x70>
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037c0:	d107      	bne.n	80037d2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d103      	bne.n	80037d2 <HAL_SPI_TransmitReceive+0x68>
 80037ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d003      	beq.n	80037da <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80037d2:	2302      	movs	r3, #2
 80037d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037d8:	e15b      	b.n	8003a92 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_SPI_TransmitReceive+0x82>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_SPI_TransmitReceive+0x82>
 80037e6:	887b      	ldrh	r3, [r7, #2]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d103      	bne.n	80037f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80037f2:	e14e      	b.n	8003a92 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d003      	beq.n	8003808 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2205      	movs	r2, #5
 8003804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	887a      	ldrh	r2, [r7, #2]
 8003818:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	887a      	ldrh	r2, [r7, #2]
 800381e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	887a      	ldrh	r2, [r7, #2]
 800382a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	887a      	ldrh	r2, [r7, #2]
 8003830:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003848:	2b40      	cmp	r3, #64	; 0x40
 800384a:	d007      	beq.n	800385c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800385a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003864:	d178      	bne.n	8003958 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <HAL_SPI_TransmitReceive+0x10a>
 800386e:	8b7b      	ldrh	r3, [r7, #26]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d166      	bne.n	8003942 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	881a      	ldrh	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	1c9a      	adds	r2, r3, #2
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003898:	e053      	b.n	8003942 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d11b      	bne.n	80038e0 <HAL_SPI_TransmitReceive+0x176>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d016      	beq.n	80038e0 <HAL_SPI_TransmitReceive+0x176>
 80038b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d113      	bne.n	80038e0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	881a      	ldrh	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	1c9a      	adds	r2, r3, #2
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d119      	bne.n	8003922 <HAL_SPI_TransmitReceive+0x1b8>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d014      	beq.n	8003922 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	b292      	uxth	r2, r2
 8003904:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	1c9a      	adds	r2, r3, #2
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800391e:	2301      	movs	r3, #1
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003922:	f7fe f80d 	bl	8001940 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800392e:	429a      	cmp	r2, r3
 8003930:	d807      	bhi.n	8003942 <HAL_SPI_TransmitReceive+0x1d8>
 8003932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003938:	d003      	beq.n	8003942 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003940:	e0a7      	b.n	8003a92 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1a6      	bne.n	800389a <HAL_SPI_TransmitReceive+0x130>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1a1      	bne.n	800389a <HAL_SPI_TransmitReceive+0x130>
 8003956:	e07c      	b.n	8003a52 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <HAL_SPI_TransmitReceive+0x1fc>
 8003960:	8b7b      	ldrh	r3, [r7, #26]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d16b      	bne.n	8003a3e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	330c      	adds	r3, #12
 8003970:	7812      	ldrb	r2, [r2, #0]
 8003972:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800398c:	e057      	b.n	8003a3e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b02      	cmp	r3, #2
 800399a:	d11c      	bne.n	80039d6 <HAL_SPI_TransmitReceive+0x26c>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d017      	beq.n	80039d6 <HAL_SPI_TransmitReceive+0x26c>
 80039a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d114      	bne.n	80039d6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	330c      	adds	r3, #12
 80039b6:	7812      	ldrb	r2, [r2, #0]
 80039b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d119      	bne.n	8003a18 <HAL_SPI_TransmitReceive+0x2ae>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d014      	beq.n	8003a18 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a14:	2301      	movs	r3, #1
 8003a16:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a18:	f7fd ff92 	bl	8001940 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d803      	bhi.n	8003a30 <HAL_SPI_TransmitReceive+0x2c6>
 8003a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a2e:	d102      	bne.n	8003a36 <HAL_SPI_TransmitReceive+0x2cc>
 8003a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d103      	bne.n	8003a3e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a3c:	e029      	b.n	8003a92 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1a2      	bne.n	800398e <HAL_SPI_TransmitReceive+0x224>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d19d      	bne.n	800398e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f904 	bl	8003c64 <SPI_EndRxTxTransaction>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d006      	beq.n	8003a70 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a6e:	e010      	b.n	8003a92 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10b      	bne.n	8003a90 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	e000      	b.n	8003a92 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003aa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3730      	adds	r7, #48	; 0x30
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b088      	sub	sp, #32
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ac0:	f7fd ff3e 	bl	8001940 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	4413      	add	r3, r2
 8003ace:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ad0:	f7fd ff36 	bl	8001940 <HAL_GetTick>
 8003ad4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ad6:	4b39      	ldr	r3, [pc, #228]	; (8003bbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	015b      	lsls	r3, r3, #5
 8003adc:	0d1b      	lsrs	r3, r3, #20
 8003ade:	69fa      	ldr	r2, [r7, #28]
 8003ae0:	fb02 f303 	mul.w	r3, r2, r3
 8003ae4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ae6:	e054      	b.n	8003b92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aee:	d050      	beq.n	8003b92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003af0:	f7fd ff26 	bl	8001940 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d902      	bls.n	8003b06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d13d      	bne.n	8003b82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b1e:	d111      	bne.n	8003b44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b28:	d004      	beq.n	8003b34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b32:	d107      	bne.n	8003b44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b4c:	d10f      	bne.n	8003b6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e017      	b.n	8003bb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	bf0c      	ite	eq
 8003ba2:	2301      	moveq	r3, #1
 8003ba4:	2300      	movne	r3, #0
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	79fb      	ldrb	r3, [r7, #7]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d19b      	bne.n	8003ae8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3720      	adds	r7, #32
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20000018 	.word	0x20000018

08003bc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bd4:	d111      	bne.n	8003bfa <SPI_EndRxTransaction+0x3a>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bde:	d004      	beq.n	8003bea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be8:	d107      	bne.n	8003bfa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c02:	d117      	bne.n	8003c34 <SPI_EndRxTransaction+0x74>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0c:	d112      	bne.n	8003c34 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2200      	movs	r2, #0
 8003c16:	2101      	movs	r1, #1
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7ff ff49 	bl	8003ab0 <SPI_WaitFlagStateUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d01a      	beq.n	8003c5a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c28:	f043 0220 	orr.w	r2, r3, #32
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e013      	b.n	8003c5c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	2180      	movs	r1, #128	; 0x80
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f7ff ff36 	bl	8003ab0 <SPI_WaitFlagStateUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4e:	f043 0220 	orr.w	r2, r3, #32
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e000      	b.n	8003c5c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af02      	add	r7, sp, #8
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2200      	movs	r2, #0
 8003c78:	2180      	movs	r1, #128	; 0x80
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f7ff ff18 	bl	8003ab0 <SPI_WaitFlagStateUntilTimeout>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8a:	f043 0220 	orr.w	r2, r3, #32
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e000      	b.n	8003c98 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e041      	b.n	8003d36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7fd fb9a 	bl	8001400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4610      	mov	r0, r2
 8003ce0:	f000 faa8 	bl	8004234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
	...

08003d40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d001      	beq.n	8003d58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e03a      	b.n	8003dce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0201 	orr.w	r2, r2, #1
 8003d6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a18      	ldr	r2, [pc, #96]	; (8003dd8 <HAL_TIM_Base_Start_IT+0x98>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00e      	beq.n	8003d98 <HAL_TIM_Base_Start_IT+0x58>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d82:	d009      	beq.n	8003d98 <HAL_TIM_Base_Start_IT+0x58>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a14      	ldr	r2, [pc, #80]	; (8003ddc <HAL_TIM_Base_Start_IT+0x9c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d004      	beq.n	8003d98 <HAL_TIM_Base_Start_IT+0x58>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a13      	ldr	r2, [pc, #76]	; (8003de0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d111      	bne.n	8003dbc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b06      	cmp	r3, #6
 8003da8:	d010      	beq.n	8003dcc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0201 	orr.w	r2, r2, #1
 8003db8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dba:	e007      	b.n	8003dcc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr
 8003dd8:	40012c00 	.word	0x40012c00
 8003ddc:	40000400 	.word	0x40000400
 8003de0:	40000800 	.word	0x40000800

08003de4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6a1a      	ldr	r2, [r3, #32]
 8003e02:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10f      	bne.n	8003e2c <HAL_TIM_Base_Stop_IT+0x48>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6a1a      	ldr	r2, [r3, #32]
 8003e12:	f240 4344 	movw	r3, #1092	; 0x444
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d107      	bne.n	8003e2c <HAL_TIM_Base_Stop_IT+0x48>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0201 	bic.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr

08003e40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d122      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d11b      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0202 	mvn.w	r2, #2
 8003e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f9ba 	bl	80041fc <HAL_TIM_IC_CaptureCallback>
 8003e88:	e005      	b.n	8003e96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f9ad 	bl	80041ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f9bc 	bl	800420e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d122      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d11b      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0204 	mvn.w	r2, #4
 8003ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f990 	bl	80041fc <HAL_TIM_IC_CaptureCallback>
 8003edc:	e005      	b.n	8003eea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f983 	bl	80041ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f992 	bl	800420e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d122      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d11b      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f06f 0208 	mvn.w	r2, #8
 8003f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2204      	movs	r2, #4
 8003f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f966 	bl	80041fc <HAL_TIM_IC_CaptureCallback>
 8003f30:	e005      	b.n	8003f3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f959 	bl	80041ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f968 	bl	800420e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b10      	cmp	r3, #16
 8003f50:	d122      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d11b      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0210 	mvn.w	r2, #16
 8003f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2208      	movs	r2, #8
 8003f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f93c 	bl	80041fc <HAL_TIM_IC_CaptureCallback>
 8003f84:	e005      	b.n	8003f92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f92f 	bl	80041ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f93e 	bl	800420e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d10e      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d107      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0201 	mvn.w	r2, #1
 8003fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f90a 	bl	80041d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fce:	2b80      	cmp	r3, #128	; 0x80
 8003fd0:	d10e      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fdc:	2b80      	cmp	r3, #128	; 0x80
 8003fde:	d107      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fa81 	bl	80044f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffa:	2b40      	cmp	r3, #64	; 0x40
 8003ffc:	d10e      	bne.n	800401c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	2b40      	cmp	r3, #64	; 0x40
 800400a:	d107      	bne.n	800401c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f902 	bl	8004220 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0320 	and.w	r3, r3, #32
 8004026:	2b20      	cmp	r3, #32
 8004028:	d10e      	bne.n	8004048 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b20      	cmp	r3, #32
 8004036:	d107      	bne.n	8004048 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0220 	mvn.w	r2, #32
 8004040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fa4c 	bl	80044e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004048:	bf00      	nop
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_TIM_ConfigClockSource+0x18>
 8004064:	2302      	movs	r3, #2
 8004066:	e0b3      	b.n	80041d0 <HAL_TIM_ConfigClockSource+0x180>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004086:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800408e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a0:	d03e      	beq.n	8004120 <HAL_TIM_ConfigClockSource+0xd0>
 80040a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a6:	f200 8087 	bhi.w	80041b8 <HAL_TIM_ConfigClockSource+0x168>
 80040aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ae:	f000 8085 	beq.w	80041bc <HAL_TIM_ConfigClockSource+0x16c>
 80040b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b6:	d87f      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x168>
 80040b8:	2b70      	cmp	r3, #112	; 0x70
 80040ba:	d01a      	beq.n	80040f2 <HAL_TIM_ConfigClockSource+0xa2>
 80040bc:	2b70      	cmp	r3, #112	; 0x70
 80040be:	d87b      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x168>
 80040c0:	2b60      	cmp	r3, #96	; 0x60
 80040c2:	d050      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0x116>
 80040c4:	2b60      	cmp	r3, #96	; 0x60
 80040c6:	d877      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x168>
 80040c8:	2b50      	cmp	r3, #80	; 0x50
 80040ca:	d03c      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0xf6>
 80040cc:	2b50      	cmp	r3, #80	; 0x50
 80040ce:	d873      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x168>
 80040d0:	2b40      	cmp	r3, #64	; 0x40
 80040d2:	d058      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0x136>
 80040d4:	2b40      	cmp	r3, #64	; 0x40
 80040d6:	d86f      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x168>
 80040d8:	2b30      	cmp	r3, #48	; 0x30
 80040da:	d064      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x156>
 80040dc:	2b30      	cmp	r3, #48	; 0x30
 80040de:	d86b      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x168>
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	d060      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x156>
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d867      	bhi.n	80041b8 <HAL_TIM_ConfigClockSource+0x168>
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d05c      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x156>
 80040ec:	2b10      	cmp	r3, #16
 80040ee:	d05a      	beq.n	80041a6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80040f0:	e062      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	6899      	ldr	r1, [r3, #8]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f000 f970 	bl	80043e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004114:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	609a      	str	r2, [r3, #8]
      break;
 800411e:	e04e      	b.n	80041be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	6899      	ldr	r1, [r3, #8]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f000 f959 	bl	80043e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004142:	609a      	str	r2, [r3, #8]
      break;
 8004144:	e03b      	b.n	80041be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6859      	ldr	r1, [r3, #4]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	461a      	mov	r2, r3
 8004154:	f000 f8d0 	bl	80042f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2150      	movs	r1, #80	; 0x50
 800415e:	4618      	mov	r0, r3
 8004160:	f000 f927 	bl	80043b2 <TIM_ITRx_SetConfig>
      break;
 8004164:	e02b      	b.n	80041be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6859      	ldr	r1, [r3, #4]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	461a      	mov	r2, r3
 8004174:	f000 f8ee 	bl	8004354 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2160      	movs	r1, #96	; 0x60
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f917 	bl	80043b2 <TIM_ITRx_SetConfig>
      break;
 8004184:	e01b      	b.n	80041be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	6859      	ldr	r1, [r3, #4]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	461a      	mov	r2, r3
 8004194:	f000 f8b0 	bl	80042f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2140      	movs	r1, #64	; 0x40
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 f907 	bl	80043b2 <TIM_ITRx_SetConfig>
      break;
 80041a4:	e00b      	b.n	80041be <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4619      	mov	r1, r3
 80041b0:	4610      	mov	r0, r2
 80041b2:	f000 f8fe 	bl	80043b2 <TIM_ITRx_SetConfig>
        break;
 80041b6:	e002      	b.n	80041be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80041b8:	bf00      	nop
 80041ba:	e000      	b.n	80041be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80041bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr

080041ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bc80      	pop	{r7}
 80041fa:	4770      	bx	lr

080041fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr

0800420e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr

08004220 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr
	...

08004234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a29      	ldr	r2, [pc, #164]	; (80042ec <TIM_Base_SetConfig+0xb8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00b      	beq.n	8004264 <TIM_Base_SetConfig+0x30>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004252:	d007      	beq.n	8004264 <TIM_Base_SetConfig+0x30>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a26      	ldr	r2, [pc, #152]	; (80042f0 <TIM_Base_SetConfig+0xbc>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d003      	beq.n	8004264 <TIM_Base_SetConfig+0x30>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a25      	ldr	r2, [pc, #148]	; (80042f4 <TIM_Base_SetConfig+0xc0>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d108      	bne.n	8004276 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a1c      	ldr	r2, [pc, #112]	; (80042ec <TIM_Base_SetConfig+0xb8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00b      	beq.n	8004296 <TIM_Base_SetConfig+0x62>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004284:	d007      	beq.n	8004296 <TIM_Base_SetConfig+0x62>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a19      	ldr	r2, [pc, #100]	; (80042f0 <TIM_Base_SetConfig+0xbc>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d003      	beq.n	8004296 <TIM_Base_SetConfig+0x62>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a18      	ldr	r2, [pc, #96]	; (80042f4 <TIM_Base_SetConfig+0xc0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d108      	bne.n	80042a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800429c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a07      	ldr	r2, [pc, #28]	; (80042ec <TIM_Base_SetConfig+0xb8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d103      	bne.n	80042dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	615a      	str	r2, [r3, #20]
}
 80042e2:	bf00      	nop
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr
 80042ec:	40012c00 	.word	0x40012c00
 80042f0:	40000400 	.word	0x40000400
 80042f4:	40000800 	.word	0x40000800

080042f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f023 0201 	bic.w	r2, r3, #1
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f023 030a 	bic.w	r3, r3, #10
 8004334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	4313      	orrs	r3, r2
 800433c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	621a      	str	r2, [r3, #32]
}
 800434a:	bf00      	nop
 800434c:	371c      	adds	r7, #28
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	f023 0210 	bic.w	r2, r3, #16
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800437e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	031b      	lsls	r3, r3, #12
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004390:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	4313      	orrs	r3, r2
 800439a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	621a      	str	r2, [r3, #32]
}
 80043a8:	bf00      	nop
 80043aa:	371c      	adds	r7, #28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc80      	pop	{r7}
 80043b0:	4770      	bx	lr

080043b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b085      	sub	sp, #20
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f043 0307 	orr.w	r3, r3, #7
 80043d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	609a      	str	r2, [r3, #8]
}
 80043dc:	bf00      	nop
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr

080043e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b087      	sub	sp, #28
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	607a      	str	r2, [r7, #4]
 80043f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004400:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	021a      	lsls	r2, r3, #8
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	431a      	orrs	r2, r3
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	4313      	orrs	r3, r2
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	609a      	str	r2, [r3, #8]
}
 800441a:	bf00      	nop
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr

08004424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004438:	2302      	movs	r3, #2
 800443a:	e046      	b.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a16      	ldr	r2, [pc, #88]	; (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00e      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004488:	d009      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a12      	ldr	r2, [pc, #72]	; (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d004      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a10      	ldr	r2, [pc, #64]	; (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d10c      	bne.n	80044b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr
 80044d4:	40012c00 	.word	0x40012c00
 80044d8:	40000400 	.word	0x40000400
 80044dc:	40000800 	.word	0x40000800

080044e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bc80      	pop	{r7}
 80044f0:	4770      	bx	lr

080044f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr

08004504 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e03f      	b.n	8004596 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fc ff8e 	bl	800144c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2224      	movs	r2, #36	; 0x24
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004546:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 fba9 	bl	8004ca0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800455c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695a      	ldr	r2, [r3, #20]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800456c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800457c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b084      	sub	sp, #16
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	4613      	mov	r3, r2
 80045aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d11d      	bne.n	80045f4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <HAL_UART_Receive_IT+0x26>
 80045be:	88fb      	ldrh	r3, [r7, #6]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e016      	b.n	80045f6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d101      	bne.n	80045d6 <HAL_UART_Receive_IT+0x38>
 80045d2:	2302      	movs	r3, #2
 80045d4:	e00f      	b.n	80045f6 <HAL_UART_Receive_IT+0x58>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80045e4:	88fb      	ldrh	r3, [r7, #6]
 80045e6:	461a      	mov	r2, r3
 80045e8:	68b9      	ldr	r1, [r7, #8]
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 f9cf 	bl	800498e <UART_Start_Receive_IT>
 80045f0:	4603      	mov	r3, r0
 80045f2:	e000      	b.n	80045f6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80045f4:	2302      	movs	r3, #2
  }
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08a      	sub	sp, #40	; 0x28
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004620:	2300      	movs	r3, #0
 8004622:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004624:	2300      	movs	r3, #0
 8004626:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10d      	bne.n	8004652 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b00      	cmp	r3, #0
 800463e:	d008      	beq.n	8004652 <HAL_UART_IRQHandler+0x52>
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fa7f 	bl	8004b4e <UART_Receive_IT>
      return;
 8004650:	e17b      	b.n	800494a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80b1 	beq.w	80047bc <HAL_UART_IRQHandler+0x1bc>
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d105      	bne.n	8004670 <HAL_UART_IRQHandler+0x70>
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 80a6 	beq.w	80047bc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_UART_IRQHandler+0x90>
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	f043 0201 	orr.w	r2, r3, #1
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <HAL_UART_IRQHandler+0xb0>
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d005      	beq.n	80046b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	f043 0202 	orr.w	r2, r3, #2
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <HAL_UART_IRQHandler+0xd0>
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d005      	beq.n	80046d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	f043 0204 	orr.w	r2, r3, #4
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00f      	beq.n	80046fa <HAL_UART_IRQHandler+0xfa>
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d104      	bne.n	80046ee <HAL_UART_IRQHandler+0xee>
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d005      	beq.n	80046fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f043 0208 	orr.w	r2, r3, #8
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 811e 	beq.w	8004940 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	2b00      	cmp	r3, #0
 800470c:	d007      	beq.n	800471e <HAL_UART_IRQHandler+0x11e>
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	f003 0320 	and.w	r3, r3, #32
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 fa18 	bl	8004b4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	bf14      	ite	ne
 800472c:	2301      	movne	r3, #1
 800472e:	2300      	moveq	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	2b00      	cmp	r3, #0
 800473e:	d102      	bne.n	8004746 <HAL_UART_IRQHandler+0x146>
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d031      	beq.n	80047aa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f95a 	bl	8004a00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004756:	2b00      	cmp	r3, #0
 8004758:	d023      	beq.n	80047a2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695a      	ldr	r2, [r3, #20]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004768:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	2b00      	cmp	r3, #0
 8004770:	d013      	beq.n	800479a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	4a76      	ldr	r2, [pc, #472]	; (8004950 <HAL_UART_IRQHandler+0x350>)
 8004778:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477e:	4618      	mov	r0, r3
 8004780:	f7fd fa54 	bl	8001c2c <HAL_DMA_Abort_IT>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d016      	beq.n	80047b8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004794:	4610      	mov	r0, r2
 8004796:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004798:	e00e      	b.n	80047b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f8e3 	bl	8004966 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a0:	e00a      	b.n	80047b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f8df 	bl	8004966 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a8:	e006      	b.n	80047b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f8db 	bl	8004966 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80047b6:	e0c3      	b.n	8004940 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b8:	bf00      	nop
    return;
 80047ba:	e0c1      	b.n	8004940 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	f040 80a1 	bne.w	8004908 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	f003 0310 	and.w	r3, r3, #16
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 809b 	beq.w	8004908 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 8095 	beq.w	8004908 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d04e      	beq.n	80048a0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800480c:	8a3b      	ldrh	r3, [r7, #16]
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 8098 	beq.w	8004944 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004818:	8a3a      	ldrh	r2, [r7, #16]
 800481a:	429a      	cmp	r2, r3
 800481c:	f080 8092 	bcs.w	8004944 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	8a3a      	ldrh	r2, [r7, #16]
 8004824:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	2b20      	cmp	r3, #32
 800482e:	d02b      	beq.n	8004888 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800483e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695a      	ldr	r2, [r3, #20]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0201 	bic.w	r2, r2, #1
 800484e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695a      	ldr	r2, [r3, #20]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800485e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0210 	bic.w	r2, r2, #16
 800487c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	4618      	mov	r0, r3
 8004884:	f7fd f997 	bl	8001bb6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004890:	b29b      	uxth	r3, r3
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	b29b      	uxth	r3, r3
 8004896:	4619      	mov	r1, r3
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f86d 	bl	8004978 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800489e:	e051      	b.n	8004944 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d047      	beq.n	8004948 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80048b8:	8a7b      	ldrh	r3, [r7, #18]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d044      	beq.n	8004948 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048cc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695a      	ldr	r2, [r3, #20]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0201 	bic.w	r2, r2, #1
 80048dc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0210 	bic.w	r2, r2, #16
 80048fa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048fc:	8a7b      	ldrh	r3, [r7, #18]
 80048fe:	4619      	mov	r1, r3
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f839 	bl	8004978 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004906:	e01f      	b.n	8004948 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490e:	2b00      	cmp	r3, #0
 8004910:	d008      	beq.n	8004924 <HAL_UART_IRQHandler+0x324>
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f8af 	bl	8004a80 <UART_Transmit_IT>
    return;
 8004922:	e012      	b.n	800494a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00d      	beq.n	800494a <HAL_UART_IRQHandler+0x34a>
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f8f0 	bl	8004b1e <UART_EndTransmit_IT>
    return;
 800493e:	e004      	b.n	800494a <HAL_UART_IRQHandler+0x34a>
    return;
 8004940:	bf00      	nop
 8004942:	e002      	b.n	800494a <HAL_UART_IRQHandler+0x34a>
      return;
 8004944:	bf00      	nop
 8004946:	e000      	b.n	800494a <HAL_UART_IRQHandler+0x34a>
      return;
 8004948:	bf00      	nop
  }
}
 800494a:	3728      	adds	r7, #40	; 0x28
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	08004a59 	.word	0x08004a59

08004954 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	bc80      	pop	{r7}
 8004964:	4770      	bx	lr

08004966 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr

08004978 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr

0800498e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800498e:	b480      	push	{r7}
 8004990:	b085      	sub	sp, #20
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	4613      	mov	r3, r2
 800499a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	88fa      	ldrh	r2, [r7, #6]
 80049a6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	88fa      	ldrh	r2, [r7, #6]
 80049ac:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2222      	movs	r2, #34	; 0x22
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049d2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695a      	ldr	r2, [r3, #20]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0220 	orr.w	r2, r2, #32
 80049f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bc80      	pop	{r7}
 80049fe:	4770      	bx	lr

08004a00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a16:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695a      	ldr	r2, [r3, #20]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0201 	bic.w	r2, r2, #1
 8004a26:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d107      	bne.n	8004a40 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0210 	bic.w	r2, r2, #16
 8004a3e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bc80      	pop	{r7}
 8004a56:	4770      	bx	lr

08004a58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f7ff ff77 	bl	8004966 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b21      	cmp	r3, #33	; 0x21
 8004a92:	d13e      	bne.n	8004b12 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a9c:	d114      	bne.n	8004ac8 <UART_Transmit_IT+0x48>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d110      	bne.n	8004ac8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	1c9a      	adds	r2, r3, #2
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	621a      	str	r2, [r3, #32]
 8004ac6:	e008      	b.n	8004ada <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	1c59      	adds	r1, r3, #1
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6211      	str	r1, [r2, #32]
 8004ad2:	781a      	ldrb	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10f      	bne.n	8004b0e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004afc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e000      	b.n	8004b14 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b12:	2302      	movs	r3, #2
  }
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	4770      	bx	lr

08004b1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff ff08 	bl	8004954 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b086      	sub	sp, #24
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b22      	cmp	r3, #34	; 0x22
 8004b60:	f040 8099 	bne.w	8004c96 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6c:	d117      	bne.n	8004b9e <UART_Receive_IT+0x50>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d113      	bne.n	8004b9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	1c9a      	adds	r2, r3, #2
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	629a      	str	r2, [r3, #40]	; 0x28
 8004b9c:	e026      	b.n	8004bec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb0:	d007      	beq.n	8004bc2 <UART_Receive_IT+0x74>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10a      	bne.n	8004bd0 <UART_Receive_IT+0x82>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d106      	bne.n	8004bd0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	701a      	strb	r2, [r3, #0]
 8004bce:	e008      	b.n	8004be2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d148      	bne.n	8004c92 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0220 	bic.w	r2, r2, #32
 8004c0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695a      	ldr	r2, [r3, #20]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0201 	bic.w	r2, r2, #1
 8004c2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d123      	bne.n	8004c88 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68da      	ldr	r2, [r3, #12]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0210 	bic.w	r2, r2, #16
 8004c54:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0310 	and.w	r3, r3, #16
 8004c60:	2b10      	cmp	r3, #16
 8004c62:	d10a      	bne.n	8004c7a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c64:	2300      	movs	r3, #0
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c7e:	4619      	mov	r1, r3
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7ff fe79 	bl	8004978 <HAL_UARTEx_RxEventCallback>
 8004c86:	e002      	b.n	8004c8e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7fc fabf 	bl	800120c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	e002      	b.n	8004c98 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	e000      	b.n	8004c98 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004c96:	2302      	movs	r3, #2
  }
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004cda:	f023 030c 	bic.w	r3, r3, #12
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6812      	ldr	r2, [r2, #0]
 8004ce2:	68b9      	ldr	r1, [r7, #8]
 8004ce4:	430b      	orrs	r3, r1
 8004ce6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699a      	ldr	r2, [r3, #24]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a2c      	ldr	r2, [pc, #176]	; (8004db4 <UART_SetConfig+0x114>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d103      	bne.n	8004d10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d08:	f7fe fa2c 	bl	8003164 <HAL_RCC_GetPCLK2Freq>
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	e002      	b.n	8004d16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d10:	f7fe fa14 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8004d14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009a      	lsls	r2, r3, #2
 8004d20:	441a      	add	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2c:	4a22      	ldr	r2, [pc, #136]	; (8004db8 <UART_SetConfig+0x118>)
 8004d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	0119      	lsls	r1, r3, #4
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009a      	lsls	r2, r3, #2
 8004d40:	441a      	add	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d4c:	4b1a      	ldr	r3, [pc, #104]	; (8004db8 <UART_SetConfig+0x118>)
 8004d4e:	fba3 0302 	umull	r0, r3, r3, r2
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	2064      	movs	r0, #100	; 0x64
 8004d56:	fb00 f303 	mul.w	r3, r0, r3
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	3332      	adds	r3, #50	; 0x32
 8004d60:	4a15      	ldr	r2, [pc, #84]	; (8004db8 <UART_SetConfig+0x118>)
 8004d62:	fba2 2303 	umull	r2, r3, r2, r3
 8004d66:	095b      	lsrs	r3, r3, #5
 8004d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d6c:	4419      	add	r1, r3
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	009a      	lsls	r2, r3, #2
 8004d78:	441a      	add	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d84:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <UART_SetConfig+0x118>)
 8004d86:	fba3 0302 	umull	r0, r3, r3, r2
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	2064      	movs	r0, #100	; 0x64
 8004d8e:	fb00 f303 	mul.w	r3, r0, r3
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	3332      	adds	r3, #50	; 0x32
 8004d98:	4a07      	ldr	r2, [pc, #28]	; (8004db8 <UART_SetConfig+0x118>)
 8004d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	f003 020f 	and.w	r2, r3, #15
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	440a      	add	r2, r1
 8004daa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004dac:	bf00      	nop
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	40013800 	.word	0x40013800
 8004db8:	51eb851f 	.word	0x51eb851f

08004dbc <__errno>:
 8004dbc:	4b01      	ldr	r3, [pc, #4]	; (8004dc4 <__errno+0x8>)
 8004dbe:	6818      	ldr	r0, [r3, #0]
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	20000024 	.word	0x20000024

08004dc8 <__libc_init_array>:
 8004dc8:	b570      	push	{r4, r5, r6, lr}
 8004dca:	2600      	movs	r6, #0
 8004dcc:	4d0c      	ldr	r5, [pc, #48]	; (8004e00 <__libc_init_array+0x38>)
 8004dce:	4c0d      	ldr	r4, [pc, #52]	; (8004e04 <__libc_init_array+0x3c>)
 8004dd0:	1b64      	subs	r4, r4, r5
 8004dd2:	10a4      	asrs	r4, r4, #2
 8004dd4:	42a6      	cmp	r6, r4
 8004dd6:	d109      	bne.n	8004dec <__libc_init_array+0x24>
 8004dd8:	f000 fcc8 	bl	800576c <_init>
 8004ddc:	2600      	movs	r6, #0
 8004dde:	4d0a      	ldr	r5, [pc, #40]	; (8004e08 <__libc_init_array+0x40>)
 8004de0:	4c0a      	ldr	r4, [pc, #40]	; (8004e0c <__libc_init_array+0x44>)
 8004de2:	1b64      	subs	r4, r4, r5
 8004de4:	10a4      	asrs	r4, r4, #2
 8004de6:	42a6      	cmp	r6, r4
 8004de8:	d105      	bne.n	8004df6 <__libc_init_array+0x2e>
 8004dea:	bd70      	pop	{r4, r5, r6, pc}
 8004dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df0:	4798      	blx	r3
 8004df2:	3601      	adds	r6, #1
 8004df4:	e7ee      	b.n	8004dd4 <__libc_init_array+0xc>
 8004df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dfa:	4798      	blx	r3
 8004dfc:	3601      	adds	r6, #1
 8004dfe:	e7f2      	b.n	8004de6 <__libc_init_array+0x1e>
 8004e00:	08005fc4 	.word	0x08005fc4
 8004e04:	08005fc4 	.word	0x08005fc4
 8004e08:	08005fc4 	.word	0x08005fc4
 8004e0c:	08005fc8 	.word	0x08005fc8

08004e10 <__itoa>:
 8004e10:	1e93      	subs	r3, r2, #2
 8004e12:	2b22      	cmp	r3, #34	; 0x22
 8004e14:	b510      	push	{r4, lr}
 8004e16:	460c      	mov	r4, r1
 8004e18:	d904      	bls.n	8004e24 <__itoa+0x14>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	461c      	mov	r4, r3
 8004e1e:	700b      	strb	r3, [r1, #0]
 8004e20:	4620      	mov	r0, r4
 8004e22:	bd10      	pop	{r4, pc}
 8004e24:	2a0a      	cmp	r2, #10
 8004e26:	d109      	bne.n	8004e3c <__itoa+0x2c>
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	da07      	bge.n	8004e3c <__itoa+0x2c>
 8004e2c:	232d      	movs	r3, #45	; 0x2d
 8004e2e:	700b      	strb	r3, [r1, #0]
 8004e30:	2101      	movs	r1, #1
 8004e32:	4240      	negs	r0, r0
 8004e34:	4421      	add	r1, r4
 8004e36:	f000 f901 	bl	800503c <__utoa>
 8004e3a:	e7f1      	b.n	8004e20 <__itoa+0x10>
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	e7f9      	b.n	8004e34 <__itoa+0x24>

08004e40 <itoa>:
 8004e40:	f7ff bfe6 	b.w	8004e10 <__itoa>

08004e44 <memcpy>:
 8004e44:	440a      	add	r2, r1
 8004e46:	4291      	cmp	r1, r2
 8004e48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004e4c:	d100      	bne.n	8004e50 <memcpy+0xc>
 8004e4e:	4770      	bx	lr
 8004e50:	b510      	push	{r4, lr}
 8004e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e56:	4291      	cmp	r1, r2
 8004e58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e5c:	d1f9      	bne.n	8004e52 <memcpy+0xe>
 8004e5e:	bd10      	pop	{r4, pc}

08004e60 <memset>:
 8004e60:	4603      	mov	r3, r0
 8004e62:	4402      	add	r2, r0
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d100      	bne.n	8004e6a <memset+0xa>
 8004e68:	4770      	bx	lr
 8004e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e6e:	e7f9      	b.n	8004e64 <memset+0x4>

08004e70 <_free_r>:
 8004e70:	b538      	push	{r3, r4, r5, lr}
 8004e72:	4605      	mov	r5, r0
 8004e74:	2900      	cmp	r1, #0
 8004e76:	d043      	beq.n	8004f00 <_free_r+0x90>
 8004e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e7c:	1f0c      	subs	r4, r1, #4
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	bfb8      	it	lt
 8004e82:	18e4      	addlt	r4, r4, r3
 8004e84:	f000 f91c 	bl	80050c0 <__malloc_lock>
 8004e88:	4a1e      	ldr	r2, [pc, #120]	; (8004f04 <_free_r+0x94>)
 8004e8a:	6813      	ldr	r3, [r2, #0]
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	b933      	cbnz	r3, 8004e9e <_free_r+0x2e>
 8004e90:	6063      	str	r3, [r4, #4]
 8004e92:	6014      	str	r4, [r2, #0]
 8004e94:	4628      	mov	r0, r5
 8004e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e9a:	f000 b917 	b.w	80050cc <__malloc_unlock>
 8004e9e:	42a3      	cmp	r3, r4
 8004ea0:	d90a      	bls.n	8004eb8 <_free_r+0x48>
 8004ea2:	6821      	ldr	r1, [r4, #0]
 8004ea4:	1862      	adds	r2, r4, r1
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	bf01      	itttt	eq
 8004eaa:	681a      	ldreq	r2, [r3, #0]
 8004eac:	685b      	ldreq	r3, [r3, #4]
 8004eae:	1852      	addeq	r2, r2, r1
 8004eb0:	6022      	streq	r2, [r4, #0]
 8004eb2:	6063      	str	r3, [r4, #4]
 8004eb4:	6004      	str	r4, [r0, #0]
 8004eb6:	e7ed      	b.n	8004e94 <_free_r+0x24>
 8004eb8:	461a      	mov	r2, r3
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	b10b      	cbz	r3, 8004ec2 <_free_r+0x52>
 8004ebe:	42a3      	cmp	r3, r4
 8004ec0:	d9fa      	bls.n	8004eb8 <_free_r+0x48>
 8004ec2:	6811      	ldr	r1, [r2, #0]
 8004ec4:	1850      	adds	r0, r2, r1
 8004ec6:	42a0      	cmp	r0, r4
 8004ec8:	d10b      	bne.n	8004ee2 <_free_r+0x72>
 8004eca:	6820      	ldr	r0, [r4, #0]
 8004ecc:	4401      	add	r1, r0
 8004ece:	1850      	adds	r0, r2, r1
 8004ed0:	4283      	cmp	r3, r0
 8004ed2:	6011      	str	r1, [r2, #0]
 8004ed4:	d1de      	bne.n	8004e94 <_free_r+0x24>
 8004ed6:	6818      	ldr	r0, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	4401      	add	r1, r0
 8004edc:	6011      	str	r1, [r2, #0]
 8004ede:	6053      	str	r3, [r2, #4]
 8004ee0:	e7d8      	b.n	8004e94 <_free_r+0x24>
 8004ee2:	d902      	bls.n	8004eea <_free_r+0x7a>
 8004ee4:	230c      	movs	r3, #12
 8004ee6:	602b      	str	r3, [r5, #0]
 8004ee8:	e7d4      	b.n	8004e94 <_free_r+0x24>
 8004eea:	6820      	ldr	r0, [r4, #0]
 8004eec:	1821      	adds	r1, r4, r0
 8004eee:	428b      	cmp	r3, r1
 8004ef0:	bf01      	itttt	eq
 8004ef2:	6819      	ldreq	r1, [r3, #0]
 8004ef4:	685b      	ldreq	r3, [r3, #4]
 8004ef6:	1809      	addeq	r1, r1, r0
 8004ef8:	6021      	streq	r1, [r4, #0]
 8004efa:	6063      	str	r3, [r4, #4]
 8004efc:	6054      	str	r4, [r2, #4]
 8004efe:	e7c9      	b.n	8004e94 <_free_r+0x24>
 8004f00:	bd38      	pop	{r3, r4, r5, pc}
 8004f02:	bf00      	nop
 8004f04:	20000540 	.word	0x20000540

08004f08 <_malloc_r>:
 8004f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0a:	1ccd      	adds	r5, r1, #3
 8004f0c:	f025 0503 	bic.w	r5, r5, #3
 8004f10:	3508      	adds	r5, #8
 8004f12:	2d0c      	cmp	r5, #12
 8004f14:	bf38      	it	cc
 8004f16:	250c      	movcc	r5, #12
 8004f18:	2d00      	cmp	r5, #0
 8004f1a:	4606      	mov	r6, r0
 8004f1c:	db01      	blt.n	8004f22 <_malloc_r+0x1a>
 8004f1e:	42a9      	cmp	r1, r5
 8004f20:	d903      	bls.n	8004f2a <_malloc_r+0x22>
 8004f22:	230c      	movs	r3, #12
 8004f24:	6033      	str	r3, [r6, #0]
 8004f26:	2000      	movs	r0, #0
 8004f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f2a:	f000 f8c9 	bl	80050c0 <__malloc_lock>
 8004f2e:	4921      	ldr	r1, [pc, #132]	; (8004fb4 <_malloc_r+0xac>)
 8004f30:	680a      	ldr	r2, [r1, #0]
 8004f32:	4614      	mov	r4, r2
 8004f34:	b99c      	cbnz	r4, 8004f5e <_malloc_r+0x56>
 8004f36:	4f20      	ldr	r7, [pc, #128]	; (8004fb8 <_malloc_r+0xb0>)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	b923      	cbnz	r3, 8004f46 <_malloc_r+0x3e>
 8004f3c:	4621      	mov	r1, r4
 8004f3e:	4630      	mov	r0, r6
 8004f40:	f000 f83c 	bl	8004fbc <_sbrk_r>
 8004f44:	6038      	str	r0, [r7, #0]
 8004f46:	4629      	mov	r1, r5
 8004f48:	4630      	mov	r0, r6
 8004f4a:	f000 f837 	bl	8004fbc <_sbrk_r>
 8004f4e:	1c43      	adds	r3, r0, #1
 8004f50:	d123      	bne.n	8004f9a <_malloc_r+0x92>
 8004f52:	230c      	movs	r3, #12
 8004f54:	4630      	mov	r0, r6
 8004f56:	6033      	str	r3, [r6, #0]
 8004f58:	f000 f8b8 	bl	80050cc <__malloc_unlock>
 8004f5c:	e7e3      	b.n	8004f26 <_malloc_r+0x1e>
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	1b5b      	subs	r3, r3, r5
 8004f62:	d417      	bmi.n	8004f94 <_malloc_r+0x8c>
 8004f64:	2b0b      	cmp	r3, #11
 8004f66:	d903      	bls.n	8004f70 <_malloc_r+0x68>
 8004f68:	6023      	str	r3, [r4, #0]
 8004f6a:	441c      	add	r4, r3
 8004f6c:	6025      	str	r5, [r4, #0]
 8004f6e:	e004      	b.n	8004f7a <_malloc_r+0x72>
 8004f70:	6863      	ldr	r3, [r4, #4]
 8004f72:	42a2      	cmp	r2, r4
 8004f74:	bf0c      	ite	eq
 8004f76:	600b      	streq	r3, [r1, #0]
 8004f78:	6053      	strne	r3, [r2, #4]
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	f000 f8a6 	bl	80050cc <__malloc_unlock>
 8004f80:	f104 000b 	add.w	r0, r4, #11
 8004f84:	1d23      	adds	r3, r4, #4
 8004f86:	f020 0007 	bic.w	r0, r0, #7
 8004f8a:	1ac2      	subs	r2, r0, r3
 8004f8c:	d0cc      	beq.n	8004f28 <_malloc_r+0x20>
 8004f8e:	1a1b      	subs	r3, r3, r0
 8004f90:	50a3      	str	r3, [r4, r2]
 8004f92:	e7c9      	b.n	8004f28 <_malloc_r+0x20>
 8004f94:	4622      	mov	r2, r4
 8004f96:	6864      	ldr	r4, [r4, #4]
 8004f98:	e7cc      	b.n	8004f34 <_malloc_r+0x2c>
 8004f9a:	1cc4      	adds	r4, r0, #3
 8004f9c:	f024 0403 	bic.w	r4, r4, #3
 8004fa0:	42a0      	cmp	r0, r4
 8004fa2:	d0e3      	beq.n	8004f6c <_malloc_r+0x64>
 8004fa4:	1a21      	subs	r1, r4, r0
 8004fa6:	4630      	mov	r0, r6
 8004fa8:	f000 f808 	bl	8004fbc <_sbrk_r>
 8004fac:	3001      	adds	r0, #1
 8004fae:	d1dd      	bne.n	8004f6c <_malloc_r+0x64>
 8004fb0:	e7cf      	b.n	8004f52 <_malloc_r+0x4a>
 8004fb2:	bf00      	nop
 8004fb4:	20000540 	.word	0x20000540
 8004fb8:	20000544 	.word	0x20000544

08004fbc <_sbrk_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	4d05      	ldr	r5, [pc, #20]	; (8004fd8 <_sbrk_r+0x1c>)
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	4608      	mov	r0, r1
 8004fc6:	602b      	str	r3, [r5, #0]
 8004fc8:	f7fc fbf8 	bl	80017bc <_sbrk>
 8004fcc:	1c43      	adds	r3, r0, #1
 8004fce:	d102      	bne.n	8004fd6 <_sbrk_r+0x1a>
 8004fd0:	682b      	ldr	r3, [r5, #0]
 8004fd2:	b103      	cbz	r3, 8004fd6 <_sbrk_r+0x1a>
 8004fd4:	6023      	str	r3, [r4, #0]
 8004fd6:	bd38      	pop	{r3, r4, r5, pc}
 8004fd8:	200006c8 	.word	0x200006c8

08004fdc <siprintf>:
 8004fdc:	b40e      	push	{r1, r2, r3}
 8004fde:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fe2:	b500      	push	{lr}
 8004fe4:	b09c      	sub	sp, #112	; 0x70
 8004fe6:	ab1d      	add	r3, sp, #116	; 0x74
 8004fe8:	9002      	str	r0, [sp, #8]
 8004fea:	9006      	str	r0, [sp, #24]
 8004fec:	9107      	str	r1, [sp, #28]
 8004fee:	9104      	str	r1, [sp, #16]
 8004ff0:	4808      	ldr	r0, [pc, #32]	; (8005014 <siprintf+0x38>)
 8004ff2:	4909      	ldr	r1, [pc, #36]	; (8005018 <siprintf+0x3c>)
 8004ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ff8:	9105      	str	r1, [sp, #20]
 8004ffa:	6800      	ldr	r0, [r0, #0]
 8004ffc:	a902      	add	r1, sp, #8
 8004ffe:	9301      	str	r3, [sp, #4]
 8005000:	f000 f8c6 	bl	8005190 <_svfiprintf_r>
 8005004:	2200      	movs	r2, #0
 8005006:	9b02      	ldr	r3, [sp, #8]
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	b01c      	add	sp, #112	; 0x70
 800500c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005010:	b003      	add	sp, #12
 8005012:	4770      	bx	lr
 8005014:	20000024 	.word	0x20000024
 8005018:	ffff0208 	.word	0xffff0208

0800501c <strcat>:
 800501c:	4602      	mov	r2, r0
 800501e:	b510      	push	{r4, lr}
 8005020:	7814      	ldrb	r4, [r2, #0]
 8005022:	4613      	mov	r3, r2
 8005024:	3201      	adds	r2, #1
 8005026:	2c00      	cmp	r4, #0
 8005028:	d1fa      	bne.n	8005020 <strcat+0x4>
 800502a:	3b01      	subs	r3, #1
 800502c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005030:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005034:	2a00      	cmp	r2, #0
 8005036:	d1f9      	bne.n	800502c <strcat+0x10>
 8005038:	bd10      	pop	{r4, pc}
	...

0800503c <__utoa>:
 800503c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800503e:	b08b      	sub	sp, #44	; 0x2c
 8005040:	4605      	mov	r5, r0
 8005042:	460b      	mov	r3, r1
 8005044:	466e      	mov	r6, sp
 8005046:	4c1d      	ldr	r4, [pc, #116]	; (80050bc <__utoa+0x80>)
 8005048:	f104 0c20 	add.w	ip, r4, #32
 800504c:	4637      	mov	r7, r6
 800504e:	6820      	ldr	r0, [r4, #0]
 8005050:	6861      	ldr	r1, [r4, #4]
 8005052:	3408      	adds	r4, #8
 8005054:	c703      	stmia	r7!, {r0, r1}
 8005056:	4564      	cmp	r4, ip
 8005058:	463e      	mov	r6, r7
 800505a:	d1f7      	bne.n	800504c <__utoa+0x10>
 800505c:	7921      	ldrb	r1, [r4, #4]
 800505e:	6820      	ldr	r0, [r4, #0]
 8005060:	7139      	strb	r1, [r7, #4]
 8005062:	1e91      	subs	r1, r2, #2
 8005064:	2922      	cmp	r1, #34	; 0x22
 8005066:	6038      	str	r0, [r7, #0]
 8005068:	f04f 0100 	mov.w	r1, #0
 800506c:	d904      	bls.n	8005078 <__utoa+0x3c>
 800506e:	7019      	strb	r1, [r3, #0]
 8005070:	460b      	mov	r3, r1
 8005072:	4618      	mov	r0, r3
 8005074:	b00b      	add	sp, #44	; 0x2c
 8005076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005078:	1e58      	subs	r0, r3, #1
 800507a:	4684      	mov	ip, r0
 800507c:	fbb5 f7f2 	udiv	r7, r5, r2
 8005080:	fb02 5617 	mls	r6, r2, r7, r5
 8005084:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8005088:	4476      	add	r6, lr
 800508a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800508e:	460c      	mov	r4, r1
 8005090:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005094:	462e      	mov	r6, r5
 8005096:	42b2      	cmp	r2, r6
 8005098:	463d      	mov	r5, r7
 800509a:	f101 0101 	add.w	r1, r1, #1
 800509e:	d9ed      	bls.n	800507c <__utoa+0x40>
 80050a0:	2200      	movs	r2, #0
 80050a2:	545a      	strb	r2, [r3, r1]
 80050a4:	1919      	adds	r1, r3, r4
 80050a6:	1aa5      	subs	r5, r4, r2
 80050a8:	42aa      	cmp	r2, r5
 80050aa:	dae2      	bge.n	8005072 <__utoa+0x36>
 80050ac:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80050b0:	780e      	ldrb	r6, [r1, #0]
 80050b2:	3201      	adds	r2, #1
 80050b4:	7006      	strb	r6, [r0, #0]
 80050b6:	f801 5901 	strb.w	r5, [r1], #-1
 80050ba:	e7f4      	b.n	80050a6 <__utoa+0x6a>
 80050bc:	08005f6c 	.word	0x08005f6c

080050c0 <__malloc_lock>:
 80050c0:	4801      	ldr	r0, [pc, #4]	; (80050c8 <__malloc_lock+0x8>)
 80050c2:	f000 bafb 	b.w	80056bc <__retarget_lock_acquire_recursive>
 80050c6:	bf00      	nop
 80050c8:	200006d0 	.word	0x200006d0

080050cc <__malloc_unlock>:
 80050cc:	4801      	ldr	r0, [pc, #4]	; (80050d4 <__malloc_unlock+0x8>)
 80050ce:	f000 baf6 	b.w	80056be <__retarget_lock_release_recursive>
 80050d2:	bf00      	nop
 80050d4:	200006d0 	.word	0x200006d0

080050d8 <__ssputs_r>:
 80050d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050dc:	688e      	ldr	r6, [r1, #8]
 80050de:	4682      	mov	sl, r0
 80050e0:	429e      	cmp	r6, r3
 80050e2:	460c      	mov	r4, r1
 80050e4:	4690      	mov	r8, r2
 80050e6:	461f      	mov	r7, r3
 80050e8:	d838      	bhi.n	800515c <__ssputs_r+0x84>
 80050ea:	898a      	ldrh	r2, [r1, #12]
 80050ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050f0:	d032      	beq.n	8005158 <__ssputs_r+0x80>
 80050f2:	6825      	ldr	r5, [r4, #0]
 80050f4:	6909      	ldr	r1, [r1, #16]
 80050f6:	3301      	adds	r3, #1
 80050f8:	eba5 0901 	sub.w	r9, r5, r1
 80050fc:	6965      	ldr	r5, [r4, #20]
 80050fe:	444b      	add	r3, r9
 8005100:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005104:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005108:	106d      	asrs	r5, r5, #1
 800510a:	429d      	cmp	r5, r3
 800510c:	bf38      	it	cc
 800510e:	461d      	movcc	r5, r3
 8005110:	0553      	lsls	r3, r2, #21
 8005112:	d531      	bpl.n	8005178 <__ssputs_r+0xa0>
 8005114:	4629      	mov	r1, r5
 8005116:	f7ff fef7 	bl	8004f08 <_malloc_r>
 800511a:	4606      	mov	r6, r0
 800511c:	b950      	cbnz	r0, 8005134 <__ssputs_r+0x5c>
 800511e:	230c      	movs	r3, #12
 8005120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005124:	f8ca 3000 	str.w	r3, [sl]
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800512e:	81a3      	strh	r3, [r4, #12]
 8005130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005134:	464a      	mov	r2, r9
 8005136:	6921      	ldr	r1, [r4, #16]
 8005138:	f7ff fe84 	bl	8004e44 <memcpy>
 800513c:	89a3      	ldrh	r3, [r4, #12]
 800513e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005146:	81a3      	strh	r3, [r4, #12]
 8005148:	6126      	str	r6, [r4, #16]
 800514a:	444e      	add	r6, r9
 800514c:	6026      	str	r6, [r4, #0]
 800514e:	463e      	mov	r6, r7
 8005150:	6165      	str	r5, [r4, #20]
 8005152:	eba5 0509 	sub.w	r5, r5, r9
 8005156:	60a5      	str	r5, [r4, #8]
 8005158:	42be      	cmp	r6, r7
 800515a:	d900      	bls.n	800515e <__ssputs_r+0x86>
 800515c:	463e      	mov	r6, r7
 800515e:	4632      	mov	r2, r6
 8005160:	4641      	mov	r1, r8
 8005162:	6820      	ldr	r0, [r4, #0]
 8005164:	f000 faba 	bl	80056dc <memmove>
 8005168:	68a3      	ldr	r3, [r4, #8]
 800516a:	6822      	ldr	r2, [r4, #0]
 800516c:	1b9b      	subs	r3, r3, r6
 800516e:	4432      	add	r2, r6
 8005170:	2000      	movs	r0, #0
 8005172:	60a3      	str	r3, [r4, #8]
 8005174:	6022      	str	r2, [r4, #0]
 8005176:	e7db      	b.n	8005130 <__ssputs_r+0x58>
 8005178:	462a      	mov	r2, r5
 800517a:	f000 fac9 	bl	8005710 <_realloc_r>
 800517e:	4606      	mov	r6, r0
 8005180:	2800      	cmp	r0, #0
 8005182:	d1e1      	bne.n	8005148 <__ssputs_r+0x70>
 8005184:	4650      	mov	r0, sl
 8005186:	6921      	ldr	r1, [r4, #16]
 8005188:	f7ff fe72 	bl	8004e70 <_free_r>
 800518c:	e7c7      	b.n	800511e <__ssputs_r+0x46>
	...

08005190 <_svfiprintf_r>:
 8005190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005194:	4698      	mov	r8, r3
 8005196:	898b      	ldrh	r3, [r1, #12]
 8005198:	4607      	mov	r7, r0
 800519a:	061b      	lsls	r3, r3, #24
 800519c:	460d      	mov	r5, r1
 800519e:	4614      	mov	r4, r2
 80051a0:	b09d      	sub	sp, #116	; 0x74
 80051a2:	d50e      	bpl.n	80051c2 <_svfiprintf_r+0x32>
 80051a4:	690b      	ldr	r3, [r1, #16]
 80051a6:	b963      	cbnz	r3, 80051c2 <_svfiprintf_r+0x32>
 80051a8:	2140      	movs	r1, #64	; 0x40
 80051aa:	f7ff fead 	bl	8004f08 <_malloc_r>
 80051ae:	6028      	str	r0, [r5, #0]
 80051b0:	6128      	str	r0, [r5, #16]
 80051b2:	b920      	cbnz	r0, 80051be <_svfiprintf_r+0x2e>
 80051b4:	230c      	movs	r3, #12
 80051b6:	603b      	str	r3, [r7, #0]
 80051b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051bc:	e0d1      	b.n	8005362 <_svfiprintf_r+0x1d2>
 80051be:	2340      	movs	r3, #64	; 0x40
 80051c0:	616b      	str	r3, [r5, #20]
 80051c2:	2300      	movs	r3, #0
 80051c4:	9309      	str	r3, [sp, #36]	; 0x24
 80051c6:	2320      	movs	r3, #32
 80051c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051cc:	2330      	movs	r3, #48	; 0x30
 80051ce:	f04f 0901 	mov.w	r9, #1
 80051d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80051d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800537c <_svfiprintf_r+0x1ec>
 80051da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051de:	4623      	mov	r3, r4
 80051e0:	469a      	mov	sl, r3
 80051e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051e6:	b10a      	cbz	r2, 80051ec <_svfiprintf_r+0x5c>
 80051e8:	2a25      	cmp	r2, #37	; 0x25
 80051ea:	d1f9      	bne.n	80051e0 <_svfiprintf_r+0x50>
 80051ec:	ebba 0b04 	subs.w	fp, sl, r4
 80051f0:	d00b      	beq.n	800520a <_svfiprintf_r+0x7a>
 80051f2:	465b      	mov	r3, fp
 80051f4:	4622      	mov	r2, r4
 80051f6:	4629      	mov	r1, r5
 80051f8:	4638      	mov	r0, r7
 80051fa:	f7ff ff6d 	bl	80050d8 <__ssputs_r>
 80051fe:	3001      	adds	r0, #1
 8005200:	f000 80aa 	beq.w	8005358 <_svfiprintf_r+0x1c8>
 8005204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005206:	445a      	add	r2, fp
 8005208:	9209      	str	r2, [sp, #36]	; 0x24
 800520a:	f89a 3000 	ldrb.w	r3, [sl]
 800520e:	2b00      	cmp	r3, #0
 8005210:	f000 80a2 	beq.w	8005358 <_svfiprintf_r+0x1c8>
 8005214:	2300      	movs	r3, #0
 8005216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800521a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800521e:	f10a 0a01 	add.w	sl, sl, #1
 8005222:	9304      	str	r3, [sp, #16]
 8005224:	9307      	str	r3, [sp, #28]
 8005226:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800522a:	931a      	str	r3, [sp, #104]	; 0x68
 800522c:	4654      	mov	r4, sl
 800522e:	2205      	movs	r2, #5
 8005230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005234:	4851      	ldr	r0, [pc, #324]	; (800537c <_svfiprintf_r+0x1ec>)
 8005236:	f000 fa43 	bl	80056c0 <memchr>
 800523a:	9a04      	ldr	r2, [sp, #16]
 800523c:	b9d8      	cbnz	r0, 8005276 <_svfiprintf_r+0xe6>
 800523e:	06d0      	lsls	r0, r2, #27
 8005240:	bf44      	itt	mi
 8005242:	2320      	movmi	r3, #32
 8005244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005248:	0711      	lsls	r1, r2, #28
 800524a:	bf44      	itt	mi
 800524c:	232b      	movmi	r3, #43	; 0x2b
 800524e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005252:	f89a 3000 	ldrb.w	r3, [sl]
 8005256:	2b2a      	cmp	r3, #42	; 0x2a
 8005258:	d015      	beq.n	8005286 <_svfiprintf_r+0xf6>
 800525a:	4654      	mov	r4, sl
 800525c:	2000      	movs	r0, #0
 800525e:	f04f 0c0a 	mov.w	ip, #10
 8005262:	9a07      	ldr	r2, [sp, #28]
 8005264:	4621      	mov	r1, r4
 8005266:	f811 3b01 	ldrb.w	r3, [r1], #1
 800526a:	3b30      	subs	r3, #48	; 0x30
 800526c:	2b09      	cmp	r3, #9
 800526e:	d94e      	bls.n	800530e <_svfiprintf_r+0x17e>
 8005270:	b1b0      	cbz	r0, 80052a0 <_svfiprintf_r+0x110>
 8005272:	9207      	str	r2, [sp, #28]
 8005274:	e014      	b.n	80052a0 <_svfiprintf_r+0x110>
 8005276:	eba0 0308 	sub.w	r3, r0, r8
 800527a:	fa09 f303 	lsl.w	r3, r9, r3
 800527e:	4313      	orrs	r3, r2
 8005280:	46a2      	mov	sl, r4
 8005282:	9304      	str	r3, [sp, #16]
 8005284:	e7d2      	b.n	800522c <_svfiprintf_r+0x9c>
 8005286:	9b03      	ldr	r3, [sp, #12]
 8005288:	1d19      	adds	r1, r3, #4
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	9103      	str	r1, [sp, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	bfbb      	ittet	lt
 8005292:	425b      	neglt	r3, r3
 8005294:	f042 0202 	orrlt.w	r2, r2, #2
 8005298:	9307      	strge	r3, [sp, #28]
 800529a:	9307      	strlt	r3, [sp, #28]
 800529c:	bfb8      	it	lt
 800529e:	9204      	strlt	r2, [sp, #16]
 80052a0:	7823      	ldrb	r3, [r4, #0]
 80052a2:	2b2e      	cmp	r3, #46	; 0x2e
 80052a4:	d10c      	bne.n	80052c0 <_svfiprintf_r+0x130>
 80052a6:	7863      	ldrb	r3, [r4, #1]
 80052a8:	2b2a      	cmp	r3, #42	; 0x2a
 80052aa:	d135      	bne.n	8005318 <_svfiprintf_r+0x188>
 80052ac:	9b03      	ldr	r3, [sp, #12]
 80052ae:	3402      	adds	r4, #2
 80052b0:	1d1a      	adds	r2, r3, #4
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	9203      	str	r2, [sp, #12]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	bfb8      	it	lt
 80052ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80052be:	9305      	str	r3, [sp, #20]
 80052c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800538c <_svfiprintf_r+0x1fc>
 80052c4:	2203      	movs	r2, #3
 80052c6:	4650      	mov	r0, sl
 80052c8:	7821      	ldrb	r1, [r4, #0]
 80052ca:	f000 f9f9 	bl	80056c0 <memchr>
 80052ce:	b140      	cbz	r0, 80052e2 <_svfiprintf_r+0x152>
 80052d0:	2340      	movs	r3, #64	; 0x40
 80052d2:	eba0 000a 	sub.w	r0, r0, sl
 80052d6:	fa03 f000 	lsl.w	r0, r3, r0
 80052da:	9b04      	ldr	r3, [sp, #16]
 80052dc:	3401      	adds	r4, #1
 80052de:	4303      	orrs	r3, r0
 80052e0:	9304      	str	r3, [sp, #16]
 80052e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e6:	2206      	movs	r2, #6
 80052e8:	4825      	ldr	r0, [pc, #148]	; (8005380 <_svfiprintf_r+0x1f0>)
 80052ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052ee:	f000 f9e7 	bl	80056c0 <memchr>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d038      	beq.n	8005368 <_svfiprintf_r+0x1d8>
 80052f6:	4b23      	ldr	r3, [pc, #140]	; (8005384 <_svfiprintf_r+0x1f4>)
 80052f8:	bb1b      	cbnz	r3, 8005342 <_svfiprintf_r+0x1b2>
 80052fa:	9b03      	ldr	r3, [sp, #12]
 80052fc:	3307      	adds	r3, #7
 80052fe:	f023 0307 	bic.w	r3, r3, #7
 8005302:	3308      	adds	r3, #8
 8005304:	9303      	str	r3, [sp, #12]
 8005306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005308:	4433      	add	r3, r6
 800530a:	9309      	str	r3, [sp, #36]	; 0x24
 800530c:	e767      	b.n	80051de <_svfiprintf_r+0x4e>
 800530e:	460c      	mov	r4, r1
 8005310:	2001      	movs	r0, #1
 8005312:	fb0c 3202 	mla	r2, ip, r2, r3
 8005316:	e7a5      	b.n	8005264 <_svfiprintf_r+0xd4>
 8005318:	2300      	movs	r3, #0
 800531a:	f04f 0c0a 	mov.w	ip, #10
 800531e:	4619      	mov	r1, r3
 8005320:	3401      	adds	r4, #1
 8005322:	9305      	str	r3, [sp, #20]
 8005324:	4620      	mov	r0, r4
 8005326:	f810 2b01 	ldrb.w	r2, [r0], #1
 800532a:	3a30      	subs	r2, #48	; 0x30
 800532c:	2a09      	cmp	r2, #9
 800532e:	d903      	bls.n	8005338 <_svfiprintf_r+0x1a8>
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0c5      	beq.n	80052c0 <_svfiprintf_r+0x130>
 8005334:	9105      	str	r1, [sp, #20]
 8005336:	e7c3      	b.n	80052c0 <_svfiprintf_r+0x130>
 8005338:	4604      	mov	r4, r0
 800533a:	2301      	movs	r3, #1
 800533c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005340:	e7f0      	b.n	8005324 <_svfiprintf_r+0x194>
 8005342:	ab03      	add	r3, sp, #12
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	462a      	mov	r2, r5
 8005348:	4638      	mov	r0, r7
 800534a:	4b0f      	ldr	r3, [pc, #60]	; (8005388 <_svfiprintf_r+0x1f8>)
 800534c:	a904      	add	r1, sp, #16
 800534e:	f3af 8000 	nop.w
 8005352:	1c42      	adds	r2, r0, #1
 8005354:	4606      	mov	r6, r0
 8005356:	d1d6      	bne.n	8005306 <_svfiprintf_r+0x176>
 8005358:	89ab      	ldrh	r3, [r5, #12]
 800535a:	065b      	lsls	r3, r3, #25
 800535c:	f53f af2c 	bmi.w	80051b8 <_svfiprintf_r+0x28>
 8005360:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005362:	b01d      	add	sp, #116	; 0x74
 8005364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005368:	ab03      	add	r3, sp, #12
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	462a      	mov	r2, r5
 800536e:	4638      	mov	r0, r7
 8005370:	4b05      	ldr	r3, [pc, #20]	; (8005388 <_svfiprintf_r+0x1f8>)
 8005372:	a904      	add	r1, sp, #16
 8005374:	f000 f87c 	bl	8005470 <_printf_i>
 8005378:	e7eb      	b.n	8005352 <_svfiprintf_r+0x1c2>
 800537a:	bf00      	nop
 800537c:	08005f91 	.word	0x08005f91
 8005380:	08005f9b 	.word	0x08005f9b
 8005384:	00000000 	.word	0x00000000
 8005388:	080050d9 	.word	0x080050d9
 800538c:	08005f97 	.word	0x08005f97

08005390 <_printf_common>:
 8005390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005394:	4616      	mov	r6, r2
 8005396:	4699      	mov	r9, r3
 8005398:	688a      	ldr	r2, [r1, #8]
 800539a:	690b      	ldr	r3, [r1, #16]
 800539c:	4607      	mov	r7, r0
 800539e:	4293      	cmp	r3, r2
 80053a0:	bfb8      	it	lt
 80053a2:	4613      	movlt	r3, r2
 80053a4:	6033      	str	r3, [r6, #0]
 80053a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053aa:	460c      	mov	r4, r1
 80053ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053b0:	b10a      	cbz	r2, 80053b6 <_printf_common+0x26>
 80053b2:	3301      	adds	r3, #1
 80053b4:	6033      	str	r3, [r6, #0]
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	0699      	lsls	r1, r3, #26
 80053ba:	bf42      	ittt	mi
 80053bc:	6833      	ldrmi	r3, [r6, #0]
 80053be:	3302      	addmi	r3, #2
 80053c0:	6033      	strmi	r3, [r6, #0]
 80053c2:	6825      	ldr	r5, [r4, #0]
 80053c4:	f015 0506 	ands.w	r5, r5, #6
 80053c8:	d106      	bne.n	80053d8 <_printf_common+0x48>
 80053ca:	f104 0a19 	add.w	sl, r4, #25
 80053ce:	68e3      	ldr	r3, [r4, #12]
 80053d0:	6832      	ldr	r2, [r6, #0]
 80053d2:	1a9b      	subs	r3, r3, r2
 80053d4:	42ab      	cmp	r3, r5
 80053d6:	dc28      	bgt.n	800542a <_printf_common+0x9a>
 80053d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053dc:	1e13      	subs	r3, r2, #0
 80053de:	6822      	ldr	r2, [r4, #0]
 80053e0:	bf18      	it	ne
 80053e2:	2301      	movne	r3, #1
 80053e4:	0692      	lsls	r2, r2, #26
 80053e6:	d42d      	bmi.n	8005444 <_printf_common+0xb4>
 80053e8:	4649      	mov	r1, r9
 80053ea:	4638      	mov	r0, r7
 80053ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053f0:	47c0      	blx	r8
 80053f2:	3001      	adds	r0, #1
 80053f4:	d020      	beq.n	8005438 <_printf_common+0xa8>
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	68e5      	ldr	r5, [r4, #12]
 80053fa:	f003 0306 	and.w	r3, r3, #6
 80053fe:	2b04      	cmp	r3, #4
 8005400:	bf18      	it	ne
 8005402:	2500      	movne	r5, #0
 8005404:	6832      	ldr	r2, [r6, #0]
 8005406:	f04f 0600 	mov.w	r6, #0
 800540a:	68a3      	ldr	r3, [r4, #8]
 800540c:	bf08      	it	eq
 800540e:	1aad      	subeq	r5, r5, r2
 8005410:	6922      	ldr	r2, [r4, #16]
 8005412:	bf08      	it	eq
 8005414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005418:	4293      	cmp	r3, r2
 800541a:	bfc4      	itt	gt
 800541c:	1a9b      	subgt	r3, r3, r2
 800541e:	18ed      	addgt	r5, r5, r3
 8005420:	341a      	adds	r4, #26
 8005422:	42b5      	cmp	r5, r6
 8005424:	d11a      	bne.n	800545c <_printf_common+0xcc>
 8005426:	2000      	movs	r0, #0
 8005428:	e008      	b.n	800543c <_printf_common+0xac>
 800542a:	2301      	movs	r3, #1
 800542c:	4652      	mov	r2, sl
 800542e:	4649      	mov	r1, r9
 8005430:	4638      	mov	r0, r7
 8005432:	47c0      	blx	r8
 8005434:	3001      	adds	r0, #1
 8005436:	d103      	bne.n	8005440 <_printf_common+0xb0>
 8005438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800543c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005440:	3501      	adds	r5, #1
 8005442:	e7c4      	b.n	80053ce <_printf_common+0x3e>
 8005444:	2030      	movs	r0, #48	; 0x30
 8005446:	18e1      	adds	r1, r4, r3
 8005448:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005452:	4422      	add	r2, r4
 8005454:	3302      	adds	r3, #2
 8005456:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800545a:	e7c5      	b.n	80053e8 <_printf_common+0x58>
 800545c:	2301      	movs	r3, #1
 800545e:	4622      	mov	r2, r4
 8005460:	4649      	mov	r1, r9
 8005462:	4638      	mov	r0, r7
 8005464:	47c0      	blx	r8
 8005466:	3001      	adds	r0, #1
 8005468:	d0e6      	beq.n	8005438 <_printf_common+0xa8>
 800546a:	3601      	adds	r6, #1
 800546c:	e7d9      	b.n	8005422 <_printf_common+0x92>
	...

08005470 <_printf_i>:
 8005470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005474:	460c      	mov	r4, r1
 8005476:	7e27      	ldrb	r7, [r4, #24]
 8005478:	4691      	mov	r9, r2
 800547a:	2f78      	cmp	r7, #120	; 0x78
 800547c:	4680      	mov	r8, r0
 800547e:	469a      	mov	sl, r3
 8005480:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005482:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005486:	d807      	bhi.n	8005498 <_printf_i+0x28>
 8005488:	2f62      	cmp	r7, #98	; 0x62
 800548a:	d80a      	bhi.n	80054a2 <_printf_i+0x32>
 800548c:	2f00      	cmp	r7, #0
 800548e:	f000 80d9 	beq.w	8005644 <_printf_i+0x1d4>
 8005492:	2f58      	cmp	r7, #88	; 0x58
 8005494:	f000 80a4 	beq.w	80055e0 <_printf_i+0x170>
 8005498:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800549c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054a0:	e03a      	b.n	8005518 <_printf_i+0xa8>
 80054a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054a6:	2b15      	cmp	r3, #21
 80054a8:	d8f6      	bhi.n	8005498 <_printf_i+0x28>
 80054aa:	a001      	add	r0, pc, #4	; (adr r0, 80054b0 <_printf_i+0x40>)
 80054ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80054b0:	08005509 	.word	0x08005509
 80054b4:	0800551d 	.word	0x0800551d
 80054b8:	08005499 	.word	0x08005499
 80054bc:	08005499 	.word	0x08005499
 80054c0:	08005499 	.word	0x08005499
 80054c4:	08005499 	.word	0x08005499
 80054c8:	0800551d 	.word	0x0800551d
 80054cc:	08005499 	.word	0x08005499
 80054d0:	08005499 	.word	0x08005499
 80054d4:	08005499 	.word	0x08005499
 80054d8:	08005499 	.word	0x08005499
 80054dc:	0800562b 	.word	0x0800562b
 80054e0:	0800554d 	.word	0x0800554d
 80054e4:	0800560d 	.word	0x0800560d
 80054e8:	08005499 	.word	0x08005499
 80054ec:	08005499 	.word	0x08005499
 80054f0:	0800564d 	.word	0x0800564d
 80054f4:	08005499 	.word	0x08005499
 80054f8:	0800554d 	.word	0x0800554d
 80054fc:	08005499 	.word	0x08005499
 8005500:	08005499 	.word	0x08005499
 8005504:	08005615 	.word	0x08005615
 8005508:	680b      	ldr	r3, [r1, #0]
 800550a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800550e:	1d1a      	adds	r2, r3, #4
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	600a      	str	r2, [r1, #0]
 8005514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005518:	2301      	movs	r3, #1
 800551a:	e0a4      	b.n	8005666 <_printf_i+0x1f6>
 800551c:	6825      	ldr	r5, [r4, #0]
 800551e:	6808      	ldr	r0, [r1, #0]
 8005520:	062e      	lsls	r6, r5, #24
 8005522:	f100 0304 	add.w	r3, r0, #4
 8005526:	d50a      	bpl.n	800553e <_printf_i+0xce>
 8005528:	6805      	ldr	r5, [r0, #0]
 800552a:	600b      	str	r3, [r1, #0]
 800552c:	2d00      	cmp	r5, #0
 800552e:	da03      	bge.n	8005538 <_printf_i+0xc8>
 8005530:	232d      	movs	r3, #45	; 0x2d
 8005532:	426d      	negs	r5, r5
 8005534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005538:	230a      	movs	r3, #10
 800553a:	485e      	ldr	r0, [pc, #376]	; (80056b4 <_printf_i+0x244>)
 800553c:	e019      	b.n	8005572 <_printf_i+0x102>
 800553e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005542:	6805      	ldr	r5, [r0, #0]
 8005544:	600b      	str	r3, [r1, #0]
 8005546:	bf18      	it	ne
 8005548:	b22d      	sxthne	r5, r5
 800554a:	e7ef      	b.n	800552c <_printf_i+0xbc>
 800554c:	680b      	ldr	r3, [r1, #0]
 800554e:	6825      	ldr	r5, [r4, #0]
 8005550:	1d18      	adds	r0, r3, #4
 8005552:	6008      	str	r0, [r1, #0]
 8005554:	0628      	lsls	r0, r5, #24
 8005556:	d501      	bpl.n	800555c <_printf_i+0xec>
 8005558:	681d      	ldr	r5, [r3, #0]
 800555a:	e002      	b.n	8005562 <_printf_i+0xf2>
 800555c:	0669      	lsls	r1, r5, #25
 800555e:	d5fb      	bpl.n	8005558 <_printf_i+0xe8>
 8005560:	881d      	ldrh	r5, [r3, #0]
 8005562:	2f6f      	cmp	r7, #111	; 0x6f
 8005564:	bf0c      	ite	eq
 8005566:	2308      	moveq	r3, #8
 8005568:	230a      	movne	r3, #10
 800556a:	4852      	ldr	r0, [pc, #328]	; (80056b4 <_printf_i+0x244>)
 800556c:	2100      	movs	r1, #0
 800556e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005572:	6866      	ldr	r6, [r4, #4]
 8005574:	2e00      	cmp	r6, #0
 8005576:	bfa8      	it	ge
 8005578:	6821      	ldrge	r1, [r4, #0]
 800557a:	60a6      	str	r6, [r4, #8]
 800557c:	bfa4      	itt	ge
 800557e:	f021 0104 	bicge.w	r1, r1, #4
 8005582:	6021      	strge	r1, [r4, #0]
 8005584:	b90d      	cbnz	r5, 800558a <_printf_i+0x11a>
 8005586:	2e00      	cmp	r6, #0
 8005588:	d04d      	beq.n	8005626 <_printf_i+0x1b6>
 800558a:	4616      	mov	r6, r2
 800558c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005590:	fb03 5711 	mls	r7, r3, r1, r5
 8005594:	5dc7      	ldrb	r7, [r0, r7]
 8005596:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800559a:	462f      	mov	r7, r5
 800559c:	42bb      	cmp	r3, r7
 800559e:	460d      	mov	r5, r1
 80055a0:	d9f4      	bls.n	800558c <_printf_i+0x11c>
 80055a2:	2b08      	cmp	r3, #8
 80055a4:	d10b      	bne.n	80055be <_printf_i+0x14e>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	07df      	lsls	r7, r3, #31
 80055aa:	d508      	bpl.n	80055be <_printf_i+0x14e>
 80055ac:	6923      	ldr	r3, [r4, #16]
 80055ae:	6861      	ldr	r1, [r4, #4]
 80055b0:	4299      	cmp	r1, r3
 80055b2:	bfde      	ittt	le
 80055b4:	2330      	movle	r3, #48	; 0x30
 80055b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055ba:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80055be:	1b92      	subs	r2, r2, r6
 80055c0:	6122      	str	r2, [r4, #16]
 80055c2:	464b      	mov	r3, r9
 80055c4:	4621      	mov	r1, r4
 80055c6:	4640      	mov	r0, r8
 80055c8:	f8cd a000 	str.w	sl, [sp]
 80055cc:	aa03      	add	r2, sp, #12
 80055ce:	f7ff fedf 	bl	8005390 <_printf_common>
 80055d2:	3001      	adds	r0, #1
 80055d4:	d14c      	bne.n	8005670 <_printf_i+0x200>
 80055d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055da:	b004      	add	sp, #16
 80055dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e0:	4834      	ldr	r0, [pc, #208]	; (80056b4 <_printf_i+0x244>)
 80055e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055e6:	680e      	ldr	r6, [r1, #0]
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80055ee:	061f      	lsls	r7, r3, #24
 80055f0:	600e      	str	r6, [r1, #0]
 80055f2:	d514      	bpl.n	800561e <_printf_i+0x1ae>
 80055f4:	07d9      	lsls	r1, r3, #31
 80055f6:	bf44      	itt	mi
 80055f8:	f043 0320 	orrmi.w	r3, r3, #32
 80055fc:	6023      	strmi	r3, [r4, #0]
 80055fe:	b91d      	cbnz	r5, 8005608 <_printf_i+0x198>
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	f023 0320 	bic.w	r3, r3, #32
 8005606:	6023      	str	r3, [r4, #0]
 8005608:	2310      	movs	r3, #16
 800560a:	e7af      	b.n	800556c <_printf_i+0xfc>
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	f043 0320 	orr.w	r3, r3, #32
 8005612:	6023      	str	r3, [r4, #0]
 8005614:	2378      	movs	r3, #120	; 0x78
 8005616:	4828      	ldr	r0, [pc, #160]	; (80056b8 <_printf_i+0x248>)
 8005618:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800561c:	e7e3      	b.n	80055e6 <_printf_i+0x176>
 800561e:	065e      	lsls	r6, r3, #25
 8005620:	bf48      	it	mi
 8005622:	b2ad      	uxthmi	r5, r5
 8005624:	e7e6      	b.n	80055f4 <_printf_i+0x184>
 8005626:	4616      	mov	r6, r2
 8005628:	e7bb      	b.n	80055a2 <_printf_i+0x132>
 800562a:	680b      	ldr	r3, [r1, #0]
 800562c:	6826      	ldr	r6, [r4, #0]
 800562e:	1d1d      	adds	r5, r3, #4
 8005630:	6960      	ldr	r0, [r4, #20]
 8005632:	600d      	str	r5, [r1, #0]
 8005634:	0635      	lsls	r5, r6, #24
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	d501      	bpl.n	800563e <_printf_i+0x1ce>
 800563a:	6018      	str	r0, [r3, #0]
 800563c:	e002      	b.n	8005644 <_printf_i+0x1d4>
 800563e:	0671      	lsls	r1, r6, #25
 8005640:	d5fb      	bpl.n	800563a <_printf_i+0x1ca>
 8005642:	8018      	strh	r0, [r3, #0]
 8005644:	2300      	movs	r3, #0
 8005646:	4616      	mov	r6, r2
 8005648:	6123      	str	r3, [r4, #16]
 800564a:	e7ba      	b.n	80055c2 <_printf_i+0x152>
 800564c:	680b      	ldr	r3, [r1, #0]
 800564e:	1d1a      	adds	r2, r3, #4
 8005650:	600a      	str	r2, [r1, #0]
 8005652:	681e      	ldr	r6, [r3, #0]
 8005654:	2100      	movs	r1, #0
 8005656:	4630      	mov	r0, r6
 8005658:	6862      	ldr	r2, [r4, #4]
 800565a:	f000 f831 	bl	80056c0 <memchr>
 800565e:	b108      	cbz	r0, 8005664 <_printf_i+0x1f4>
 8005660:	1b80      	subs	r0, r0, r6
 8005662:	6060      	str	r0, [r4, #4]
 8005664:	6863      	ldr	r3, [r4, #4]
 8005666:	6123      	str	r3, [r4, #16]
 8005668:	2300      	movs	r3, #0
 800566a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800566e:	e7a8      	b.n	80055c2 <_printf_i+0x152>
 8005670:	4632      	mov	r2, r6
 8005672:	4649      	mov	r1, r9
 8005674:	4640      	mov	r0, r8
 8005676:	6923      	ldr	r3, [r4, #16]
 8005678:	47d0      	blx	sl
 800567a:	3001      	adds	r0, #1
 800567c:	d0ab      	beq.n	80055d6 <_printf_i+0x166>
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	079b      	lsls	r3, r3, #30
 8005682:	d413      	bmi.n	80056ac <_printf_i+0x23c>
 8005684:	68e0      	ldr	r0, [r4, #12]
 8005686:	9b03      	ldr	r3, [sp, #12]
 8005688:	4298      	cmp	r0, r3
 800568a:	bfb8      	it	lt
 800568c:	4618      	movlt	r0, r3
 800568e:	e7a4      	b.n	80055da <_printf_i+0x16a>
 8005690:	2301      	movs	r3, #1
 8005692:	4632      	mov	r2, r6
 8005694:	4649      	mov	r1, r9
 8005696:	4640      	mov	r0, r8
 8005698:	47d0      	blx	sl
 800569a:	3001      	adds	r0, #1
 800569c:	d09b      	beq.n	80055d6 <_printf_i+0x166>
 800569e:	3501      	adds	r5, #1
 80056a0:	68e3      	ldr	r3, [r4, #12]
 80056a2:	9903      	ldr	r1, [sp, #12]
 80056a4:	1a5b      	subs	r3, r3, r1
 80056a6:	42ab      	cmp	r3, r5
 80056a8:	dcf2      	bgt.n	8005690 <_printf_i+0x220>
 80056aa:	e7eb      	b.n	8005684 <_printf_i+0x214>
 80056ac:	2500      	movs	r5, #0
 80056ae:	f104 0619 	add.w	r6, r4, #25
 80056b2:	e7f5      	b.n	80056a0 <_printf_i+0x230>
 80056b4:	08005fa2 	.word	0x08005fa2
 80056b8:	08005fb3 	.word	0x08005fb3

080056bc <__retarget_lock_acquire_recursive>:
 80056bc:	4770      	bx	lr

080056be <__retarget_lock_release_recursive>:
 80056be:	4770      	bx	lr

080056c0 <memchr>:
 80056c0:	4603      	mov	r3, r0
 80056c2:	b510      	push	{r4, lr}
 80056c4:	b2c9      	uxtb	r1, r1
 80056c6:	4402      	add	r2, r0
 80056c8:	4293      	cmp	r3, r2
 80056ca:	4618      	mov	r0, r3
 80056cc:	d101      	bne.n	80056d2 <memchr+0x12>
 80056ce:	2000      	movs	r0, #0
 80056d0:	e003      	b.n	80056da <memchr+0x1a>
 80056d2:	7804      	ldrb	r4, [r0, #0]
 80056d4:	3301      	adds	r3, #1
 80056d6:	428c      	cmp	r4, r1
 80056d8:	d1f6      	bne.n	80056c8 <memchr+0x8>
 80056da:	bd10      	pop	{r4, pc}

080056dc <memmove>:
 80056dc:	4288      	cmp	r0, r1
 80056de:	b510      	push	{r4, lr}
 80056e0:	eb01 0402 	add.w	r4, r1, r2
 80056e4:	d902      	bls.n	80056ec <memmove+0x10>
 80056e6:	4284      	cmp	r4, r0
 80056e8:	4623      	mov	r3, r4
 80056ea:	d807      	bhi.n	80056fc <memmove+0x20>
 80056ec:	1e43      	subs	r3, r0, #1
 80056ee:	42a1      	cmp	r1, r4
 80056f0:	d008      	beq.n	8005704 <memmove+0x28>
 80056f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056fa:	e7f8      	b.n	80056ee <memmove+0x12>
 80056fc:	4601      	mov	r1, r0
 80056fe:	4402      	add	r2, r0
 8005700:	428a      	cmp	r2, r1
 8005702:	d100      	bne.n	8005706 <memmove+0x2a>
 8005704:	bd10      	pop	{r4, pc}
 8005706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800570a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800570e:	e7f7      	b.n	8005700 <memmove+0x24>

08005710 <_realloc_r>:
 8005710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005712:	4607      	mov	r7, r0
 8005714:	4614      	mov	r4, r2
 8005716:	460e      	mov	r6, r1
 8005718:	b921      	cbnz	r1, 8005724 <_realloc_r+0x14>
 800571a:	4611      	mov	r1, r2
 800571c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005720:	f7ff bbf2 	b.w	8004f08 <_malloc_r>
 8005724:	b922      	cbnz	r2, 8005730 <_realloc_r+0x20>
 8005726:	f7ff fba3 	bl	8004e70 <_free_r>
 800572a:	4625      	mov	r5, r4
 800572c:	4628      	mov	r0, r5
 800572e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005730:	f000 f814 	bl	800575c <_malloc_usable_size_r>
 8005734:	42a0      	cmp	r0, r4
 8005736:	d20f      	bcs.n	8005758 <_realloc_r+0x48>
 8005738:	4621      	mov	r1, r4
 800573a:	4638      	mov	r0, r7
 800573c:	f7ff fbe4 	bl	8004f08 <_malloc_r>
 8005740:	4605      	mov	r5, r0
 8005742:	2800      	cmp	r0, #0
 8005744:	d0f2      	beq.n	800572c <_realloc_r+0x1c>
 8005746:	4631      	mov	r1, r6
 8005748:	4622      	mov	r2, r4
 800574a:	f7ff fb7b 	bl	8004e44 <memcpy>
 800574e:	4631      	mov	r1, r6
 8005750:	4638      	mov	r0, r7
 8005752:	f7ff fb8d 	bl	8004e70 <_free_r>
 8005756:	e7e9      	b.n	800572c <_realloc_r+0x1c>
 8005758:	4635      	mov	r5, r6
 800575a:	e7e7      	b.n	800572c <_realloc_r+0x1c>

0800575c <_malloc_usable_size_r>:
 800575c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005760:	1f18      	subs	r0, r3, #4
 8005762:	2b00      	cmp	r3, #0
 8005764:	bfbc      	itt	lt
 8005766:	580b      	ldrlt	r3, [r1, r0]
 8005768:	18c0      	addlt	r0, r0, r3
 800576a:	4770      	bx	lr

0800576c <_init>:
 800576c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576e:	bf00      	nop
 8005770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005772:	bc08      	pop	{r3}
 8005774:	469e      	mov	lr, r3
 8005776:	4770      	bx	lr

08005778 <_fini>:
 8005778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577a:	bf00      	nop
 800577c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800577e:	bc08      	pop	{r3}
 8005780:	469e      	mov	lr, r3
 8005782:	4770      	bx	lr
