
NRF_and_LoRa_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ab0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08003bbc  08003bbc  00013bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bf8  08003bf8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003bf8  08003bf8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bf8  08003bf8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bf8  08003bf8  00013bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bfc  08003bfc  00013bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  20000014  08003c14  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  08003c14  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000daaa  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002125  00000000  00000000  0002dae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  0002fc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  00030840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001d52  00000000  00000000  000313d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f714  00000000  00000000  00033122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085d20  00000000  00000000  00042836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c8556  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f0  00000000  00000000  000c85ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ba4 	.word	0x08003ba4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08003ba4 	.word	0x08003ba4

0800014c <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000154:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <DelayMicro+0x3c>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <DelayMicro+0x3c>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4a0b      	ldr	r2, [pc, #44]	; (800018c <DelayMicro+0x40>)
 8000160:	fba2 2303 	umull	r2, r3, r2, r3
 8000164:	0ddb      	lsrs	r3, r3, #23
 8000166:	687a      	ldr	r2, [r7, #4]
 8000168:	fb02 f303 	mul.w	r3, r2, r3
 800016c:	607b      	str	r3, [r7, #4]
	while (micros--);
 800016e:	bf00      	nop
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	1e5a      	subs	r2, r3, #1
 8000174:	607a      	str	r2, [r7, #4]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d1fa      	bne.n	8000170 <DelayMicro+0x24>
}
 800017a:	bf00      	nop
 800017c:	bf00      	nop
 800017e:	3714      	adds	r7, #20
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	20000008 	.word	0x20000008
 800018c:	ffa71ee7 	.word	0xffa71ee7

08000190 <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b086      	sub	sp, #24
 8000194:	af02      	add	r7, sp, #8
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 800019a:	2300      	movs	r3, #0
 800019c:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 800019e:	2200      	movs	r2, #0
 80001a0:	2110      	movs	r1, #16
 80001a2:	4813      	ldr	r0, [pc, #76]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001a4:	f001 f9fe 	bl	80015a4 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 80001a8:	f107 020f 	add.w	r2, r7, #15
 80001ac:	1df9      	adds	r1, r7, #7
 80001ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b2:	9300      	str	r3, [sp, #0]
 80001b4:	2301      	movs	r3, #1
 80001b6:	480f      	ldr	r0, [pc, #60]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001b8:	f002 fd83 	bl	8002cc2 <HAL_SPI_TransmitReceive>
  if (addr!=STATUS_NRF)
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	2b07      	cmp	r3, #7
 80001c0:	d00c      	beq.n	80001dc <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 80001c2:	23ff      	movs	r3, #255	; 0xff
 80001c4:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 80001c6:	f107 020f 	add.w	r2, r7, #15
 80001ca:	f107 010e 	add.w	r1, r7, #14
 80001ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d2:	9300      	str	r3, [sp, #0]
 80001d4:	2301      	movs	r3, #1
 80001d6:	4807      	ldr	r0, [pc, #28]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001d8:	f002 fd73 	bl	8002cc2 <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 80001dc:	2201      	movs	r2, #1
 80001de:	2110      	movs	r1, #16
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001e2:	f001 f9df 	bl	80015a4 <HAL_GPIO_WritePin>
  return dt;
 80001e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3710      	adds	r7, #16
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40010800 	.word	0x40010800
 80001f4:	20000504 	.word	0x20000504

080001f8 <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	460a      	mov	r2, r1
 8000202:	71fb      	strb	r3, [r7, #7]
 8000204:	4613      	mov	r3, r2
 8000206:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	f043 0320 	orr.w	r3, r3, #32
 800020e:	b2db      	uxtb	r3, r3
 8000210:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	480d      	ldr	r0, [pc, #52]	; (800024c <NRF24_WriteReg+0x54>)
 8000218:	f001 f9c4 	bl	80015a4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800021c:	1df9      	adds	r1, r7, #7
 800021e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000222:	2201      	movs	r2, #1
 8000224:	480a      	ldr	r0, [pc, #40]	; (8000250 <NRF24_WriteReg+0x58>)
 8000226:	f002 faff 	bl	8002828 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 800022a:	1db9      	adds	r1, r7, #6
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	2201      	movs	r2, #1
 8000232:	4807      	ldr	r0, [pc, #28]	; (8000250 <NRF24_WriteReg+0x58>)
 8000234:	f002 faf8 	bl	8002828 <HAL_SPI_Transmit>
  CS_OFF;
 8000238:	2201      	movs	r2, #1
 800023a:	2110      	movs	r1, #16
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <NRF24_WriteReg+0x54>)
 800023e:	f001 f9b1 	bl	80015a4 <HAL_GPIO_WritePin>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40010800 	.word	0x40010800
 8000250:	20000504 	.word	0x20000504

08000254 <NRF24_ToggleFeatures>:
//----------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 800025a:	2350      	movs	r3, #80	; 0x50
 800025c:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800025e:	2200      	movs	r2, #0
 8000260:	2110      	movs	r1, #16
 8000262:	480f      	ldr	r0, [pc, #60]	; (80002a0 <NRF24_ToggleFeatures+0x4c>)
 8000264:	f001 f99e 	bl	80015a4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000268:	1d39      	adds	r1, r7, #4
 800026a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800026e:	2201      	movs	r2, #1
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <NRF24_ToggleFeatures+0x50>)
 8000272:	f002 fad9 	bl	8002828 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000276:	2001      	movs	r0, #1
 8000278:	f7ff ff68 	bl	800014c <DelayMicro>
  dt[0] = 0x73;
 800027c:	2373      	movs	r3, #115	; 0x73
 800027e:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000280:	1d39      	adds	r1, r7, #4
 8000282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000286:	2201      	movs	r2, #1
 8000288:	4806      	ldr	r0, [pc, #24]	; (80002a4 <NRF24_ToggleFeatures+0x50>)
 800028a:	f002 facd 	bl	8002828 <HAL_SPI_Transmit>
  CS_OFF;
 800028e:	2201      	movs	r2, #1
 8000290:	2110      	movs	r1, #16
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <NRF24_ToggleFeatures+0x4c>)
 8000294:	f001 f986 	bl	80015a4 <HAL_GPIO_WritePin>
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40010800 	.word	0x40010800
 80002a4:	20000504 	.word	0x20000504

080002a8 <NRF24_Read_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	6039      	str	r1, [r7, #0]
 80002b2:	71fb      	strb	r3, [r7, #7]
 80002b4:	4613      	mov	r3, r2
 80002b6:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 80002b8:	2200      	movs	r2, #0
 80002ba:	2110      	movs	r1, #16
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <NRF24_Read_Buf+0x4c>)
 80002be:	f001 f971 	bl	80015a4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 80002c2:	1df9      	adds	r1, r7, #7
 80002c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c8:	2201      	movs	r2, #1
 80002ca:	480b      	ldr	r0, [pc, #44]	; (80002f8 <NRF24_Read_Buf+0x50>)
 80002cc:	f002 faac 	bl	8002828 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 80002d0:	79bb      	ldrb	r3, [r7, #6]
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d8:	6839      	ldr	r1, [r7, #0]
 80002da:	4807      	ldr	r0, [pc, #28]	; (80002f8 <NRF24_Read_Buf+0x50>)
 80002dc:	f002 fbe0 	bl	8002aa0 <HAL_SPI_Receive>
  CS_OFF;
 80002e0:	2201      	movs	r2, #1
 80002e2:	2110      	movs	r1, #16
 80002e4:	4803      	ldr	r0, [pc, #12]	; (80002f4 <NRF24_Read_Buf+0x4c>)
 80002e6:	f001 f95d 	bl	80015a4 <HAL_GPIO_WritePin>
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40010800 	.word	0x40010800
 80002f8:	20000504 	.word	0x20000504

080002fc <NRF24_Write_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]
 8000308:	4613      	mov	r3, r2
 800030a:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								//Add write bit
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	f043 0320 	orr.w	r3, r3, #32
 8000312:	b2db      	uxtb	r3, r3
 8000314:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000316:	2200      	movs	r2, #0
 8000318:	2110      	movs	r1, #16
 800031a:	480f      	ldr	r0, [pc, #60]	; (8000358 <NRF24_Write_Buf+0x5c>)
 800031c:	f001 f942 	bl	80015a4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000320:	1df9      	adds	r1, r7, #7
 8000322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000326:	2201      	movs	r2, #1
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <NRF24_Write_Buf+0x60>)
 800032a:	f002 fa7d 	bl	8002828 <HAL_SPI_Transmit>
  DelayMicro(1);
 800032e:	2001      	movs	r0, #1
 8000330:	f7ff ff0c 	bl	800014c <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000);			// Send data in buffer
 8000334:	79bb      	ldrb	r3, [r7, #6]
 8000336:	b29a      	uxth	r2, r3
 8000338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033c:	6839      	ldr	r1, [r7, #0]
 800033e:	4807      	ldr	r0, [pc, #28]	; (800035c <NRF24_Write_Buf+0x60>)
 8000340:	f002 fa72 	bl	8002828 <HAL_SPI_Transmit>
  CS_OFF;
 8000344:	2201      	movs	r2, #1
 8000346:	2110      	movs	r1, #16
 8000348:	4803      	ldr	r0, [pc, #12]	; (8000358 <NRF24_Write_Buf+0x5c>)
 800034a:	f001 f92b 	bl	80015a4 <HAL_GPIO_WritePin>
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010800 	.word	0x40010800
 800035c:	20000504 	.word	0x20000504

08000360 <NRF24_FlushRX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushRX(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 8000366:	23e2      	movs	r3, #226	; 0xe2
 8000368:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800036a:	2200      	movs	r2, #0
 800036c:	2110      	movs	r1, #16
 800036e:	480b      	ldr	r0, [pc, #44]	; (800039c <NRF24_FlushRX+0x3c>)
 8000370:	f001 f918 	bl	80015a4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000374:	1d39      	adds	r1, r7, #4
 8000376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800037a:	2201      	movs	r2, #1
 800037c:	4808      	ldr	r0, [pc, #32]	; (80003a0 <NRF24_FlushRX+0x40>)
 800037e:	f002 fa53 	bl	8002828 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000382:	2001      	movs	r0, #1
 8000384:	f7ff fee2 	bl	800014c <DelayMicro>
  CS_OFF;
 8000388:	2201      	movs	r2, #1
 800038a:	2110      	movs	r1, #16
 800038c:	4803      	ldr	r0, [pc, #12]	; (800039c <NRF24_FlushRX+0x3c>)
 800038e:	f001 f909 	bl	80015a4 <HAL_GPIO_WritePin>
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40010800 	.word	0x40010800
 80003a0:	20000504 	.word	0x20000504

080003a4 <NRF24_FlushTX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushTX(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 80003aa:	23e1      	movs	r3, #225	; 0xe1
 80003ac:	713b      	strb	r3, [r7, #4]
  CS_ON;
 80003ae:	2200      	movs	r2, #0
 80003b0:	2110      	movs	r1, #16
 80003b2:	480b      	ldr	r0, [pc, #44]	; (80003e0 <NRF24_FlushTX+0x3c>)
 80003b4:	f001 f8f6 	bl	80015a4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 80003b8:	1d39      	adds	r1, r7, #4
 80003ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003be:	2201      	movs	r2, #1
 80003c0:	4808      	ldr	r0, [pc, #32]	; (80003e4 <NRF24_FlushTX+0x40>)
 80003c2:	f002 fa31 	bl	8002828 <HAL_SPI_Transmit>
  DelayMicro(1);
 80003c6:	2001      	movs	r0, #1
 80003c8:	f7ff fec0 	bl	800014c <DelayMicro>
  CS_OFF;
 80003cc:	2201      	movs	r2, #1
 80003ce:	2110      	movs	r1, #16
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <NRF24_FlushTX+0x3c>)
 80003d2:	f001 f8e7 	bl	80015a4 <HAL_GPIO_WritePin>
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40010800 	.word	0x40010800
 80003e4:	20000504 	.word	0x20000504

080003e8 <NRF24L01_RX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 80003ee:	2300      	movs	r3, #0
 80003f0:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 80003f2:	2000      	movs	r0, #0
 80003f4:	f7ff fecc 	bl	8000190 <NRF24_ReadReg>
 80003f8:	4603      	mov	r3, r0
 80003fa:	71fb      	strb	r3, [r7, #7]

  regval |= (1<<PWR_UP) | (1<<PRIM_RX);    	// Power up module. Write PWR_UP and PRIM_RX bits
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	f043 0303 	orr.w	r3, r3, #3
 8000402:	71fb      	strb	r3, [r7, #7]

  NRF24_WriteReg(CONFIG,regval);
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	4619      	mov	r1, r3
 8000408:	2000      	movs	r0, #0
 800040a:	f7ff fef5 	bl	80001f8 <NRF24_WriteReg>

  NRF24_WriteReg(CONFIG, 0x33);     		//  IRQ WORK  ~ 130 us
 800040e:	2133      	movs	r1, #51	; 0x33
 8000410:	2000      	movs	r0, #0
 8000412:	f7ff fef1 	bl	80001f8 <NRF24_WriteReg>

  CE_SET;
 8000416:	2201      	movs	r2, #1
 8000418:	2108      	movs	r1, #8
 800041a:	4807      	ldr	r0, [pc, #28]	; (8000438 <NRF24L01_RX_Mode+0x50>)
 800041c:	f001 f8c2 	bl	80015a4 <HAL_GPIO_WritePin>
  DelayMicro(150); // Delay 130 us
 8000420:	2096      	movs	r0, #150	; 0x96
 8000422:	f7ff fe93 	bl	800014c <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 8000426:	f7ff ff9b 	bl	8000360 <NRF24_FlushRX>
  NRF24_FlushTX();
 800042a:	f7ff ffbb 	bl	80003a4 <NRF24_FlushTX>
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40010800 	.word	0x40010800

0800043c <NRF24_ini>:
		rx_flag = 0;
	}
}
//----------------------------------------------------------------------------------------
void NRF24_ini(void)                  // RECEIVE
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	CE_RESET;
 8000440:	2200      	movs	r2, #0
 8000442:	2108      	movs	r1, #8
 8000444:	4827      	ldr	r0, [pc, #156]	; (80004e4 <NRF24_ini+0xa8>)
 8000446:	f001 f8ad 	bl	80015a4 <HAL_GPIO_WritePin>
	DelayMicro(5000);
 800044a:	f241 3088 	movw	r0, #5000	; 0x1388
 800044e:	f7ff fe7d 	bl	800014c <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter) 0b 0000 1010
 8000452:	210a      	movs	r1, #10
 8000454:	2000      	movs	r0, #0
 8000456:	f7ff fecf 	bl	80001f8 <NRF24_WriteReg>

	DelayMicro(5000);
 800045a:	f241 3088 	movw	r0, #5000	; 0x1388
 800045e:	f7ff fe75 	bl	800014c <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x03); 			// Enable Pipe0 and Pipe1
 8000462:	2103      	movs	r1, #3
 8000464:	2001      	movs	r0, #1
 8000466:	f7ff fec7 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x03); 		// Enable Pipe0 and Pipe1
 800046a:	2103      	movs	r1, #3
 800046c:	2002      	movs	r0, #2
 800046e:	f7ff fec3 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 8000472:	2101      	movs	r1, #1
 8000474:	2003      	movs	r0, #3
 8000476:	f7ff febf 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 800047a:	215f      	movs	r1, #95	; 0x5f
 800047c:	2004      	movs	r0, #4
 800047e:	f7ff febb 	bl	80001f8 <NRF24_WriteReg>
	NRF24_ToggleFeatures();					// Send activated command
 8000482:	f7ff fee7 	bl	8000254 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);				// Turn off all FEATURE register
 8000486:	2100      	movs	r1, #0
 8000488:	201d      	movs	r0, #29
 800048a:	f7ff feb5 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0); 				// Turn off all payload length data pipe
 800048e:	2100      	movs	r1, #0
 8000490:	201c      	movs	r0, #28
 8000492:	f7ff feb1 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 8000496:	2170      	movs	r1, #112	; 0x70
 8000498:	2007      	movs	r0, #7
 800049a:	f7ff fead 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz  // was 76
 800049e:	214c      	movs	r1, #76	; 0x4c
 80004a0:	2005      	movs	r0, #5
 80004a2:	f7ff fea9 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26); 	    // TX_PWR:0dBm, Datarate:250kbps
 80004a6:	2126      	movs	r1, #38	; 0x26
 80004a8:	2006      	movs	r0, #6
 80004aa:	f7ff fea5 	bl	80001f8 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_0, TX_ADR_WIDTH);		//	set up Transmit address. Used for a PTX device only.
 80004ae:	2203      	movs	r2, #3
 80004b0:	490d      	ldr	r1, [pc, #52]	; (80004e8 <NRF24_ini+0xac>)
 80004b2:	2010      	movs	r0, #16
 80004b4:	f7ff ff22 	bl	80002fc <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_0, TX_ADR_WIDTH);    // Set up pipe 0 address
 80004b8:	2203      	movs	r2, #3
 80004ba:	490b      	ldr	r1, [pc, #44]	; (80004e8 <NRF24_ini+0xac>)
 80004bc:	200a      	movs	r0, #10
 80004be:	f7ff ff1d 	bl	80002fc <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS_1, TX_ADR_WIDTH);    // Set up pipe 1 address
 80004c2:	2203      	movs	r2, #3
 80004c4:	4909      	ldr	r1, [pc, #36]	; (80004ec <NRF24_ini+0xb0>)
 80004c6:	200b      	movs	r0, #11
 80004c8:	f7ff ff18 	bl	80002fc <NRF24_Write_Buf>

	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 //Number of bytes in RX pipe 0
 80004cc:	210a      	movs	r1, #10
 80004ce:	2011      	movs	r0, #17
 80004d0:	f7ff fe92 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(RX_PW_P1, TX_PLOAD_WIDTH);				 //Number of bytes in RX pipe 1
 80004d4:	210a      	movs	r1, #10
 80004d6:	2012      	movs	r0, #18
 80004d8:	f7ff fe8e 	bl	80001f8 <NRF24_WriteReg>

	NRF24L01_RX_Mode();
 80004dc:	f7ff ff84 	bl	80003e8 <NRF24L01_RX_Mode>
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40010800 	.word	0x40010800
 80004e8:	20000000 	.word	0x20000000
 80004ec:	20000004 	.word	0x20000004

080004f0 <read_config_registers>:
//----------------------------------------------------------------------------------------
// Read config data from nrf registers
void read_config_registers(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80004f4:	2064      	movs	r0, #100	; 0x64
 80004f6:	f000 fcef 	bl	8000ed8 <HAL_Delay>

	config_array[0] = NRF24_ReadReg(CONFIG);			// 0x0B
 80004fa:	2000      	movs	r0, #0
 80004fc:	f7ff fe48 	bl	8000190 <NRF24_ReadReg>
 8000500:	4603      	mov	r3, r0
 8000502:	461a      	mov	r2, r3
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <read_config_registers+0x68>)
 8000506:	701a      	strb	r2, [r3, #0]
	config_array[1] = NRF24_ReadReg(EN_AA);			    // 0x01
 8000508:	2001      	movs	r0, #1
 800050a:	f7ff fe41 	bl	8000190 <NRF24_ReadReg>
 800050e:	4603      	mov	r3, r0
 8000510:	461a      	mov	r2, r3
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <read_config_registers+0x68>)
 8000514:	705a      	strb	r2, [r3, #1]
	config_array[2] = NRF24_ReadReg(EN_RXADDR); 		// 0x01
 8000516:	2002      	movs	r0, #2
 8000518:	f7ff fe3a 	bl	8000190 <NRF24_ReadReg>
 800051c:	4603      	mov	r3, r0
 800051e:	461a      	mov	r2, r3
 8000520:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <read_config_registers+0x68>)
 8000522:	709a      	strb	r2, [r3, #2]
	config_array[3] = NRF24_ReadReg(STATUS_NRF);		// 0x0E
 8000524:	2007      	movs	r0, #7
 8000526:	f7ff fe33 	bl	8000190 <NRF24_ReadReg>
 800052a:	4603      	mov	r3, r0
 800052c:	461a      	mov	r2, r3
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <read_config_registers+0x68>)
 8000530:	70da      	strb	r2, [r3, #3]
	config_array[4] = NRF24_ReadReg(RF_SETUP);		    // 0x06
 8000532:	2006      	movs	r0, #6
 8000534:	f7ff fe2c 	bl	8000190 <NRF24_ReadReg>
 8000538:	4603      	mov	r3, r0
 800053a:	461a      	mov	r2, r3
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <read_config_registers+0x68>)
 800053e:	711a      	strb	r2, [r3, #4]

	NRF24_Read_Buf(TX_ADDR,buf1,3);
 8000540:	2203      	movs	r2, #3
 8000542:	4906      	ldr	r1, [pc, #24]	; (800055c <read_config_registers+0x6c>)
 8000544:	2010      	movs	r0, #16
 8000546:	f7ff feaf 	bl	80002a8 <NRF24_Read_Buf>
	NRF24_Read_Buf(RX_ADDR_P0,buf1,3);
 800054a:	2203      	movs	r2, #3
 800054c:	4903      	ldr	r1, [pc, #12]	; (800055c <read_config_registers+0x6c>)
 800054e:	200a      	movs	r0, #10
 8000550:	f7ff feaa 	bl	80002a8 <NRF24_Read_Buf>
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	2000003c 	.word	0x2000003c
 800055c:	2000004c 	.word	0x2000004c

08000560 <IRQ_Callback>:
{
	NRF24L01_Receive();
}
//----------------------------------------------------------------------------------------
void IRQ_Callback(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 8000566:	2301      	movs	r3, #1
 8000568:	71fb      	strb	r3, [r7, #7]
	uint16_t dt=0;
 800056a:	2300      	movs	r3, #0
 800056c:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800056e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000572:	4814      	ldr	r0, [pc, #80]	; (80005c4 <IRQ_Callback+0x64>)
 8000574:	f001 f82e 	bl	80015d4 <HAL_GPIO_TogglePin>

	DelayMicro(10);
 8000578:	200a      	movs	r0, #10
 800057a:	f7ff fde7 	bl	800014c <DelayMicro>

	status = NRF24_ReadReg(STATUS_NRF);
 800057e:	2007      	movs	r0, #7
 8000580:	f7ff fe06 	bl	8000190 <NRF24_ReadReg>
 8000584:	4603      	mov	r3, r0
 8000586:	71fb      	strb	r3, [r7, #7]
	if(status & 0x40)									    //	Flag: Data ready in FIFO  (Check RX_DR flag)
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800058e:	2b00      	cmp	r3, #0
 8000590:	d013      	beq.n	80005ba <IRQ_Callback+0x5a>
	{
		pipe = (status>>1) & 0x07;
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	085b      	lsrs	r3, r3, #1
 8000596:	b2db      	uxtb	r3, r3
 8000598:	f003 0307 	and.w	r3, r3, #7
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <IRQ_Callback+0x68>)
 80005a0:	701a      	strb	r2, [r3, #0]
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 80005a2:	220a      	movs	r2, #10
 80005a4:	4909      	ldr	r1, [pc, #36]	; (80005cc <IRQ_Callback+0x6c>)
 80005a6:	2061      	movs	r0, #97	; 0x61
 80005a8:	f7ff fe7e 	bl	80002a8 <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS_NRF, 0x40);					// For turn down interrupt in nrf module
 80005ac:	2140      	movs	r1, #64	; 0x40
 80005ae:	2007      	movs	r0, #7
 80005b0:	f7ff fe22 	bl	80001f8 <NRF24_WriteReg>
		rx_flag = 1;
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <IRQ_Callback+0x70>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	701a      	strb	r2, [r3, #0]
	}
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40011000 	.word	0x40011000
 80005c8:	20000060 	.word	0x20000060
 80005cc:	20000030 	.word	0x20000030
 80005d0:	2000003a 	.word	0x2000003a

080005d4 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af04      	add	r7, sp, #16
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80005de:	230a      	movs	r3, #10
 80005e0:	9302      	str	r3, [sp, #8]
 80005e2:	2301      	movs	r3, #1
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	1dfb      	adds	r3, r7, #7
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	2200      	movs	r2, #0
 80005ee:	2178      	movs	r1, #120	; 0x78
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <ssd1306_WriteCommand+0x2c>)
 80005f2:	f001 f965 	bl	80018c0 <HAL_I2C_Mem_Write>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	2000046c 	.word	0x2000046c

08000604 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8000608:	2064      	movs	r0, #100	; 0x64
 800060a:	f000 fc65 	bl	8000ed8 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 800060e:	20ae      	movs	r0, #174	; 0xae
 8000610:	f7ff ffe0 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000614:	2020      	movs	r0, #32
 8000616:	f7ff ffdd 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800061a:	2010      	movs	r0, #16
 800061c:	f7ff ffda 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000620:	20b0      	movs	r0, #176	; 0xb0
 8000622:	f7ff ffd7 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000626:	20c8      	movs	r0, #200	; 0xc8
 8000628:	f7ff ffd4 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff ffd1 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8000632:	2010      	movs	r0, #16
 8000634:	f7ff ffce 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8000638:	2040      	movs	r0, #64	; 0x40
 800063a:	f7ff ffcb 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 800063e:	2081      	movs	r0, #129	; 0x81
 8000640:	f7ff ffc8 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8000644:	20ff      	movs	r0, #255	; 0xff
 8000646:	f7ff ffc5 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 800064a:	20a1      	movs	r0, #161	; 0xa1
 800064c:	f7ff ffc2 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8000650:	20a6      	movs	r0, #166	; 0xa6
 8000652:	f7ff ffbf 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8000656:	20a8      	movs	r0, #168	; 0xa8
 8000658:	f7ff ffbc 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 800065c:	203f      	movs	r0, #63	; 0x3f
 800065e:	f7ff ffb9 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000662:	20a4      	movs	r0, #164	; 0xa4
 8000664:	f7ff ffb6 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8000668:	20d3      	movs	r0, #211	; 0xd3
 800066a:	f7ff ffb3 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 800066e:	2000      	movs	r0, #0
 8000670:	f7ff ffb0 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000674:	20d5      	movs	r0, #213	; 0xd5
 8000676:	f7ff ffad 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 800067a:	20f0      	movs	r0, #240	; 0xf0
 800067c:	f7ff ffaa 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000680:	20d9      	movs	r0, #217	; 0xd9
 8000682:	f7ff ffa7 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8000686:	2022      	movs	r0, #34	; 0x22
 8000688:	f7ff ffa4 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 800068c:	20da      	movs	r0, #218	; 0xda
 800068e:	f7ff ffa1 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8000692:	2012      	movs	r0, #18
 8000694:	f7ff ff9e 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8000698:	20db      	movs	r0, #219	; 0xdb
 800069a:	f7ff ff9b 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800069e:	2020      	movs	r0, #32
 80006a0:	f7ff ff98 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80006a4:	208d      	movs	r0, #141	; 0x8d
 80006a6:	f7ff ff95 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 80006aa:	2014      	movs	r0, #20
 80006ac:	f7ff ff92 	bl	80005d4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80006b0:	20af      	movs	r0, #175	; 0xaf
 80006b2:	f7ff ff8f 	bl	80005d4 <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 80006b6:	2000      	movs	r0, #0
 80006b8:	f000 f810 	bl	80006dc <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 80006bc:	f000 f830 	bl	8000720 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <ssd1306_Init+0xd4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80006c6:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <ssd1306_Init+0xd4>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 80006cc:	4b02      	ldr	r3, [pc, #8]	; (80006d8 <ssd1306_Init+0xd4>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	715a      	strb	r2, [r3, #5]

	return 1;
 80006d2:	2301      	movs	r3, #1
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000464 	.word	0x20000464

080006dc <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	e00d      	b.n	8000708 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d101      	bne.n	80006f6 <ssd1306_Fill+0x1a>
 80006f2:	2100      	movs	r1, #0
 80006f4:	e000      	b.n	80006f8 <ssd1306_Fill+0x1c>
 80006f6:	21ff      	movs	r1, #255	; 0xff
 80006f8:	4a08      	ldr	r2, [pc, #32]	; (800071c <ssd1306_Fill+0x40>)
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	4413      	add	r3, r2
 80006fe:	460a      	mov	r2, r1
 8000700:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	3301      	adds	r3, #1
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800070e:	d3ed      	bcc.n	80006ec <ssd1306_Fill+0x10>
	}
}
 8000710:	bf00      	nop
 8000712:	bf00      	nop
 8000714:	3714      	adds	r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	20000064 	.word	0x20000064

08000720 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8000726:	2300      	movs	r3, #0
 8000728:	71fb      	strb	r3, [r7, #7]
 800072a:	e01d      	b.n	8000768 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	3b50      	subs	r3, #80	; 0x50
 8000730:	b2db      	uxtb	r3, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff4e 	bl	80005d4 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff ff4b 	bl	80005d4 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 800073e:	2010      	movs	r0, #16
 8000740:	f7ff ff48 	bl	80005d4 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	01db      	lsls	r3, r3, #7
 8000748:	4a0b      	ldr	r2, [pc, #44]	; (8000778 <ssd1306_UpdateScreen+0x58>)
 800074a:	4413      	add	r3, r2
 800074c:	2264      	movs	r2, #100	; 0x64
 800074e:	9202      	str	r2, [sp, #8]
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	9201      	str	r2, [sp, #4]
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2301      	movs	r3, #1
 8000758:	2240      	movs	r2, #64	; 0x40
 800075a:	2178      	movs	r1, #120	; 0x78
 800075c:	4807      	ldr	r0, [pc, #28]	; (800077c <ssd1306_UpdateScreen+0x5c>)
 800075e:	f001 f8af 	bl	80018c0 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	3301      	adds	r3, #1
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	2b07      	cmp	r3, #7
 800076c:	d9de      	bls.n	800072c <ssd1306_UpdateScreen+0xc>
	}
}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000064 	.word	0x20000064
 800077c:	2000046c 	.word	0x2000046c

08000780 <test_uart>:
void simple_test_transmit_uart(void);
void simple_test_receive_uart(void);

//----------------------------------------------------------------------------------------
void test_uart()
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	//simple_test_transmit_uart();
	simple_test_receive_uart();
 8000784:	f000 f802 	bl	800078c <simple_test_receive_uart>

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}

0800078c <simple_test_receive_uart>:
		//HAL_Delay(100);
	}
}
//----------------------------------------------------------------------------------------
void simple_test_receive_uart(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
	char str[3] = {};
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <simple_test_receive_uart+0x3c>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	713b      	strb	r3, [r7, #4]
 8000798:	1d7b      	adds	r3, r7, #5
 800079a:	2200      	movs	r2, #0
 800079c:	801a      	strh	r2, [r3, #0]
	while(1)
	{
		if(HAL_UART_Receive_IT(&huart1, str, 1) != HAL_BUSY )
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2201      	movs	r2, #1
 80007a2:	4619      	mov	r1, r3
 80007a4:	4809      	ldr	r0, [pc, #36]	; (80007cc <simple_test_receive_uart+0x40>)
 80007a6:	f002 fdb8 	bl	800331a <HAL_UART_Receive_IT>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b02      	cmp	r3, #2
 80007ae:	d0f6      	beq.n	800079e <simple_test_receive_uart+0x12>
		{
			while( HAL_UART_Transmit_IT(&huart1, str, 1) == HAL_BUSY );
 80007b0:	bf00      	nop
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2201      	movs	r2, #1
 80007b6:	4619      	mov	r1, r3
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <simple_test_receive_uart+0x40>)
 80007ba:	f002 fd6a 	bl	8003292 <HAL_UART_Transmit_IT>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d0f6      	beq.n	80007b2 <simple_test_receive_uart+0x26>
		if(HAL_UART_Receive_IT(&huart1, str, 1) != HAL_BUSY )
 80007c4:	e7eb      	b.n	800079e <simple_test_receive_uart+0x12>
 80007c6:	bf00      	nop
 80007c8:	08003bcc 	.word	0x08003bcc
 80007cc:	200004c0 	.word	0x200004c0

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d4:	f000 fb1e 	bl	8000e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d8:	f000 f816 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007dc:	f000 f8e8 	bl	80009b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007e0:	f000 f858 	bl	8000894 <MX_I2C1_Init>
  MX_SPI1_Init();
 80007e4:	f000 f884 	bl	80008f0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80007e8:	f000 f8b8 	bl	800095c <MX_USART1_UART_Init>

//  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(USART1_IRQn);


  ssd1306_Init();
 80007ec:	f7ff ff0a 	bl	8000604 <ssd1306_Init>
  ssd1306_Fill(Black);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f7ff ff73 	bl	80006dc <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80007f6:	f7ff ff93 	bl	8000720 <ssd1306_UpdateScreen>
  strcpy(test_main, "LoRa");
  ssd1306_WriteString(test_main,  Font_7x10, White);
  ssd1306_UpdateScreen();
#endif

  NRF24_ini();
 80007fa:	f7ff fe1f 	bl	800043c <NRF24_ini>
  read_config_registers();
 80007fe:	f7ff fe77 	bl	80004f0 <read_config_registers>

	#if lora
	  lora_test_module();
	#endif

	test_uart();
 8000802:	f7ff ffbd 	bl	8000780 <test_uart>
  {
 8000806:	e7fc      	b.n	8000802 <main+0x32>

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b090      	sub	sp, #64	; 0x40
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0318 	add.w	r3, r7, #24
 8000812:	2228      	movs	r2, #40	; 0x28
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f003 f9bc 	bl	8003b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800082a:	2301      	movs	r3, #1
 800082c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800082e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000832:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000838:	2301      	movs	r3, #1
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083c:	2302      	movs	r3, #2
 800083e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000844:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000846:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800084a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084c:	f107 0318 	add.w	r3, r7, #24
 8000850:	4618      	mov	r0, r3
 8000852:	f001 fb4b 	bl	8001eec <HAL_RCC_OscConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800085c:	f000 f962 	bl	8000b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000860:	230f      	movs	r3, #15
 8000862:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000864:	2302      	movs	r3, #2
 8000866:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800086c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000870:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2102      	movs	r1, #2
 800087a:	4618      	mov	r0, r3
 800087c:	f001 fdb6 	bl	80023ec <HAL_RCC_ClockConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000886:	f000 f94d 	bl	8000b24 <Error_Handler>
  }
}
 800088a:	bf00      	nop
 800088c:	3740      	adds	r7, #64	; 0x40
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_I2C1_Init+0x50>)
 800089a:	4a13      	ldr	r2, [pc, #76]	; (80008e8 <MX_I2C1_Init+0x54>)
 800089c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008a0:	4a12      	ldr	r2, [pc, #72]	; (80008ec <MX_I2C1_Init+0x58>)
 80008a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008d2:	f000 feb1 	bl	8001638 <HAL_I2C_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008dc:	f000 f922 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000046c 	.word	0x2000046c
 80008e8:	40005400 	.word	0x40005400
 80008ec:	000186a0 	.word	0x000186a0

080008f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_SPI1_Init+0x64>)
 80008f6:	4a18      	ldr	r2, [pc, #96]	; (8000958 <MX_SPI1_Init+0x68>)
 80008f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_SPI1_Init+0x64>)
 80008fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000900:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_SPI1_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_SPI1_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_SPI1_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_SPI1_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_SPI1_Init+0x64>)
 800091c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000920:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_SPI1_Init+0x64>)
 8000924:	2220      	movs	r2, #32
 8000926:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_SPI1_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_SPI1_Init+0x64>)
 8000930:	2200      	movs	r2, #0
 8000932:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_SPI1_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_SPI1_Init+0x64>)
 800093c:	220a      	movs	r2, #10
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_SPI1_Init+0x64>)
 8000942:	f001 feed 	bl	8002720 <HAL_SPI_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800094c:	f000 f8ea 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000504 	.word	0x20000504
 8000958:	40013000 	.word	0x40013000

0800095c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <MX_USART1_UART_Init+0x50>)
 8000964:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000968:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800096c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USART1_UART_Init+0x4c>)
 8000994:	f002 fc30 	bl	80031f8 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800099e:	f000 f8c1 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200004c0 	.word	0x200004c0
 80009ac:	40013800 	.word	0x40013800

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 0310 	add.w	r3, r7, #16
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c4:	4b4a      	ldr	r3, [pc, #296]	; (8000af0 <MX_GPIO_Init+0x140>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a49      	ldr	r2, [pc, #292]	; (8000af0 <MX_GPIO_Init+0x140>)
 80009ca:	f043 0310 	orr.w	r3, r3, #16
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b47      	ldr	r3, [pc, #284]	; (8000af0 <MX_GPIO_Init+0x140>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f003 0310 	and.w	r3, r3, #16
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009dc:	4b44      	ldr	r3, [pc, #272]	; (8000af0 <MX_GPIO_Init+0x140>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a43      	ldr	r2, [pc, #268]	; (8000af0 <MX_GPIO_Init+0x140>)
 80009e2:	f043 0320 	orr.w	r3, r3, #32
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b41      	ldr	r3, [pc, #260]	; (8000af0 <MX_GPIO_Init+0x140>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0320 	and.w	r3, r3, #32
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	4b3e      	ldr	r3, [pc, #248]	; (8000af0 <MX_GPIO_Init+0x140>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a3d      	ldr	r2, [pc, #244]	; (8000af0 <MX_GPIO_Init+0x140>)
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b3b      	ldr	r3, [pc, #236]	; (8000af0 <MX_GPIO_Init+0x140>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0c:	4b38      	ldr	r3, [pc, #224]	; (8000af0 <MX_GPIO_Init+0x140>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a37      	ldr	r2, [pc, #220]	; (8000af0 <MX_GPIO_Init+0x140>)
 8000a12:	f043 0308 	orr.w	r3, r3, #8
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b35      	ldr	r3, [pc, #212]	; (8000af0 <MX_GPIO_Init+0x140>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0308 	and.w	r3, r3, #8
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2a:	4832      	ldr	r0, [pc, #200]	; (8000af4 <MX_GPIO_Init+0x144>)
 8000a2c:	f000 fdba 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2108      	movs	r1, #8
 8000a34:	4830      	ldr	r0, [pc, #192]	; (8000af8 <MX_GPIO_Init+0x148>)
 8000a36:	f000 fdb5 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2110      	movs	r1, #16
 8000a3e:	482e      	ldr	r0, [pc, #184]	; (8000af8 <MX_GPIO_Init+0x148>)
 8000a40:	f000 fdb0 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f242 0101 	movw	r1, #8193	; 0x2001
 8000a4a:	482c      	ldr	r0, [pc, #176]	; (8000afc <MX_GPIO_Init+0x14c>)
 8000a4c:	f000 fdaa 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a62:	f107 0310 	add.w	r3, r7, #16
 8000a66:	4619      	mov	r1, r3
 8000a68:	4822      	ldr	r0, [pc, #136]	; (8000af4 <MX_GPIO_Init+0x144>)
 8000a6a:	f000 fc17 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a72:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <MX_GPIO_Init+0x150>)
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	4619      	mov	r1, r3
 8000a80:	481d      	ldr	r0, [pc, #116]	; (8000af8 <MX_GPIO_Init+0x148>)
 8000a82:	f000 fc0b 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000a86:	2318      	movs	r3, #24
 8000a88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 0310 	add.w	r3, r7, #16
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4816      	ldr	r0, [pc, #88]	; (8000af8 <MX_GPIO_Init+0x148>)
 8000a9e:	f000 fbfd 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 8000aa2:	f242 0301 	movw	r3, #8193	; 0x2001
 8000aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4810      	ldr	r0, [pc, #64]	; (8000afc <MX_GPIO_Init+0x14c>)
 8000abc:	f000 fbee 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480a      	ldr	r0, [pc, #40]	; (8000afc <MX_GPIO_Init+0x14c>)
 8000ad4:	f000 fbe2 	bl	800129c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	2008      	movs	r0, #8
 8000ade:	f000 faf6 	bl	80010ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ae2:	2008      	movs	r0, #8
 8000ae4:	f000 fb0f 	bl	8001106 <HAL_NVIC_EnableIRQ>

}
 8000ae8:	bf00      	nop
 8000aea:	3720      	adds	r7, #32
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40021000 	.word	0x40021000
 8000af4:	40011000 	.word	0x40011000
 8000af8:	40010800 	.word	0x40010800
 8000afc:	40010c00 	.word	0x40010c00
 8000b00:	10210000 	.word	0x10210000

08000b04 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */

//----------------------------------------------------------------------------------------

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_2)			// If detect External interrupt from PA2
 8000b0e:	88fb      	ldrh	r3, [r7, #6]
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	d102      	bne.n	8000b1a <HAL_GPIO_EXTI_Callback+0x16>
  {
    IRQ_Callback();					// Call Callback
 8000b14:	f7ff fd24 	bl	8000560 <IRQ_Callback>
  }
  else
  {
    __NOP();
  }
}
 8000b18:	e000      	b.n	8000b1c <HAL_GPIO_EXTI_Callback+0x18>
    __NOP();
 8000b1a:	bf00      	nop
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <Error_Handler+0x8>
	...

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_MspInit+0x5c>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <HAL_MspInit+0x5c>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6193      	str	r3, [r2, #24]
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_MspInit+0x5c>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_MspInit+0x5c>)
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <HAL_MspInit+0x5c>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b58:	61d3      	str	r3, [r2, #28]
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_MspInit+0x5c>)
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <HAL_MspInit+0x60>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_MspInit+0x60>)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40010000 	.word	0x40010000

08000b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a15      	ldr	r2, [pc, #84]	; (8000c04 <HAL_I2C_MspInit+0x70>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d123      	bne.n	8000bfc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_I2C_MspInit+0x74>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a13      	ldr	r2, [pc, #76]	; (8000c08 <HAL_I2C_MspInit+0x74>)
 8000bba:	f043 0308 	orr.w	r3, r3, #8
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_I2C_MspInit+0x74>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0308 	and.w	r3, r3, #8
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bcc:	23c0      	movs	r3, #192	; 0xc0
 8000bce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd0:	2312      	movs	r3, #18
 8000bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	4619      	mov	r1, r3
 8000bde:	480b      	ldr	r0, [pc, #44]	; (8000c0c <HAL_I2C_MspInit+0x78>)
 8000be0:	f000 fb5c 	bl	800129c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_I2C_MspInit+0x74>)
 8000be6:	69db      	ldr	r3, [r3, #28]
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_I2C_MspInit+0x74>)
 8000bea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bee:	61d3      	str	r3, [r2, #28]
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <HAL_I2C_MspInit+0x74>)
 8000bf2:	69db      	ldr	r3, [r3, #28]
 8000bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bfc:	bf00      	nop
 8000bfe:	3720      	adds	r7, #32
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40005400 	.word	0x40005400
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40010c00 	.word	0x40010c00

08000c10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a1b      	ldr	r2, [pc, #108]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d12f      	bne.n	8000c90 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <HAL_SPI_MspInit+0x8c>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4a19      	ldr	r2, [pc, #100]	; (8000c9c <HAL_SPI_MspInit+0x8c>)
 8000c36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c3a:	6193      	str	r3, [r2, #24]
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <HAL_SPI_MspInit+0x8c>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <HAL_SPI_MspInit+0x8c>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a13      	ldr	r2, [pc, #76]	; (8000c9c <HAL_SPI_MspInit+0x8c>)
 8000c4e:	f043 0304 	orr.w	r3, r3, #4
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <HAL_SPI_MspInit+0x8c>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c60:	23a0      	movs	r3, #160	; 0xa0
 8000c62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	4619      	mov	r1, r3
 8000c72:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <HAL_SPI_MspInit+0x90>)
 8000c74:	f000 fb12 	bl	800129c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c78:	2340      	movs	r3, #64	; 0x40
 8000c7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <HAL_SPI_MspInit+0x90>)
 8000c8c:	f000 fb06 	bl	800129c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c90:	bf00      	nop
 8000c92:	3720      	adds	r7, #32
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40013000 	.word	0x40013000
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010800 	.word	0x40010800

08000ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a20      	ldr	r2, [pc, #128]	; (8000d40 <HAL_UART_MspInit+0x9c>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d139      	bne.n	8000d38 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <HAL_UART_MspInit+0xa0>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a1e      	ldr	r2, [pc, #120]	; (8000d44 <HAL_UART_MspInit+0xa0>)
 8000cca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <HAL_UART_MspInit+0xa0>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <HAL_UART_MspInit+0xa0>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a18      	ldr	r2, [pc, #96]	; (8000d44 <HAL_UART_MspInit+0xa0>)
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <HAL_UART_MspInit+0xa0>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	4619      	mov	r1, r3
 8000d08:	480f      	ldr	r0, [pc, #60]	; (8000d48 <HAL_UART_MspInit+0xa4>)
 8000d0a:	f000 fac7 	bl	800129c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	4619      	mov	r1, r3
 8000d22:	4809      	ldr	r0, [pc, #36]	; (8000d48 <HAL_UART_MspInit+0xa4>)
 8000d24:	f000 faba 	bl	800129c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2025      	movs	r0, #37	; 0x25
 8000d2e:	f000 f9ce 	bl	80010ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d32:	2025      	movs	r0, #37	; 0x25
 8000d34:	f000 f9e7 	bl	8001106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d38:	bf00      	nop
 8000d3a:	3720      	adds	r7, #32
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40013800 	.word	0x40013800
 8000d44:	40021000 	.word	0x40021000
 8000d48:	40010800 	.word	0x40010800

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <NMI_Handler+0x4>

08000d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <HardFault_Handler+0x4>

08000d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <MemManage_Handler+0x4>

08000d5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <BusFault_Handler+0x4>

08000d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <UsageFault_Handler+0x4>

08000d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr

08000d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr

08000d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr

08000d8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d92:	f000 f885 	bl	8000ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000d9e:	2004      	movs	r0, #4
 8000da0:	f000 fc32 	bl	8001608 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <USART1_IRQHandler+0x10>)
 8000dae:	f002 fae5 	bl	800337c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200004c0 	.word	0x200004c0

08000dbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc8:	480c      	ldr	r0, [pc, #48]	; (8000dfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dca:	490d      	ldr	r1, [pc, #52]	; (8000e00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000de0:	4c0a      	ldr	r4, [pc, #40]	; (8000e0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dee:	f7ff ffe5 	bl	8000dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df2:	f002 feab 	bl	8003b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000df6:	f7ff fceb 	bl	80007d0 <main>
  bx lr
 8000dfa:	4770      	bx	lr
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e04:	08003c00 	.word	0x08003c00
  ldr r2, =_sbss
 8000e08:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e0c:	20000560 	.word	0x20000560

08000e10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC1_2_IRQHandler>
	...

08000e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_Init+0x28>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_Init+0x28>)
 8000e1e:	f043 0310 	orr.w	r3, r3, #16
 8000e22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 f947 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 f808 	bl	8000e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff fe7e 	bl	8000b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40022000 	.word	0x40022000

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_InitTick+0x54>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x58>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f95f 	bl	8001122 <HAL_SYSTICK_Config>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00e      	b.n	8000e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b0f      	cmp	r3, #15
 8000e72:	d80a      	bhi.n	8000e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e74:	2200      	movs	r2, #0
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e7c:	f000 f927 	bl	80010ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e80:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <HAL_InitTick+0x5c>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	e000      	b.n	8000e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000010 	.word	0x20000010
 8000e9c:	2000000c 	.word	0x2000000c

08000ea0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <HAL_IncTick+0x1c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_IncTick+0x20>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a03      	ldr	r2, [pc, #12]	; (8000ec0 <HAL_IncTick+0x20>)
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	20000010 	.word	0x20000010
 8000ec0:	2000055c 	.word	0x2000055c

08000ec4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b02      	ldr	r3, [pc, #8]	; (8000ed4 <HAL_GetTick+0x10>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	2000055c 	.word	0x2000055c

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff fff0 	bl	8000ec4 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_Delay+0x44>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffe0 	bl	8000ec4 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000010 	.word	0x20000010

08000f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	db0b      	blt.n	8000fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f003 021f 	and.w	r2, r3, #31
 8000f9c:	4906      	ldr	r1, [pc, #24]	; (8000fb8 <__NVIC_EnableIRQ+0x34>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	095b      	lsrs	r3, r3, #5
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db0a      	blt.n	8000fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	490c      	ldr	r1, [pc, #48]	; (8001008 <__NVIC_SetPriority+0x4c>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe4:	e00a      	b.n	8000ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4908      	ldr	r1, [pc, #32]	; (800100c <__NVIC_SetPriority+0x50>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	761a      	strb	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43da      	mvns	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001058:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43d9      	mvns	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	4313      	orrs	r3, r2
         );
}
 800106a:	4618      	mov	r0, r3
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001098:	f7ff ff90 	bl	8000fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff2d 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e0:	f7ff ff42 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 80010e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f7ff ff90 	bl	8001010 <NVIC_EncodePriority>
 80010f0:	4602      	mov	r2, r0
 80010f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff5f 	bl	8000fbc <__NVIC_SetPriority>
}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff35 	bl	8000f84 <__NVIC_EnableIRQ>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffa2 	bl	8001074 <SysTick_Config>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800113a:	b480      	push	{r7}
 800113c:	b085      	sub	sp, #20
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800114c:	2b02      	cmp	r3, #2
 800114e:	d008      	beq.n	8001162 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2204      	movs	r2, #4
 8001154:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e020      	b.n	80011a4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 020e 	bic.w	r2, r2, #14
 8001170:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 0201 	bic.w	r2, r2, #1
 8001180:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800118a:	2101      	movs	r1, #1
 800118c:	fa01 f202 	lsl.w	r2, r1, r2
 8001190:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
	...

080011b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d005      	beq.n	80011d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2204      	movs	r2, #4
 80011ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
 80011d0:	e051      	b.n	8001276 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 020e 	bic.w	r2, r2, #14
 80011e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f022 0201 	bic.w	r2, r2, #1
 80011f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a22      	ldr	r2, [pc, #136]	; (8001280 <HAL_DMA_Abort_IT+0xd0>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d029      	beq.n	8001250 <HAL_DMA_Abort_IT+0xa0>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a20      	ldr	r2, [pc, #128]	; (8001284 <HAL_DMA_Abort_IT+0xd4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d022      	beq.n	800124c <HAL_DMA_Abort_IT+0x9c>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a1f      	ldr	r2, [pc, #124]	; (8001288 <HAL_DMA_Abort_IT+0xd8>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d01a      	beq.n	8001246 <HAL_DMA_Abort_IT+0x96>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a1d      	ldr	r2, [pc, #116]	; (800128c <HAL_DMA_Abort_IT+0xdc>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d012      	beq.n	8001240 <HAL_DMA_Abort_IT+0x90>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <HAL_DMA_Abort_IT+0xe0>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d00a      	beq.n	800123a <HAL_DMA_Abort_IT+0x8a>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a1a      	ldr	r2, [pc, #104]	; (8001294 <HAL_DMA_Abort_IT+0xe4>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d102      	bne.n	8001234 <HAL_DMA_Abort_IT+0x84>
 800122e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001232:	e00e      	b.n	8001252 <HAL_DMA_Abort_IT+0xa2>
 8001234:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001238:	e00b      	b.n	8001252 <HAL_DMA_Abort_IT+0xa2>
 800123a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800123e:	e008      	b.n	8001252 <HAL_DMA_Abort_IT+0xa2>
 8001240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001244:	e005      	b.n	8001252 <HAL_DMA_Abort_IT+0xa2>
 8001246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800124a:	e002      	b.n	8001252 <HAL_DMA_Abort_IT+0xa2>
 800124c:	2310      	movs	r3, #16
 800124e:	e000      	b.n	8001252 <HAL_DMA_Abort_IT+0xa2>
 8001250:	2301      	movs	r3, #1
 8001252:	4a11      	ldr	r2, [pc, #68]	; (8001298 <HAL_DMA_Abort_IT+0xe8>)
 8001254:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	4798      	blx	r3
    } 
  }
  return status;
 8001276:	7bfb      	ldrb	r3, [r7, #15]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40020008 	.word	0x40020008
 8001284:	4002001c 	.word	0x4002001c
 8001288:	40020030 	.word	0x40020030
 800128c:	40020044 	.word	0x40020044
 8001290:	40020058 	.word	0x40020058
 8001294:	4002006c 	.word	0x4002006c
 8001298:	40020000 	.word	0x40020000

0800129c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800129c:	b480      	push	{r7}
 800129e:	b08b      	sub	sp, #44	; 0x2c
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012aa:	2300      	movs	r3, #0
 80012ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ae:	e169      	b.n	8001584 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012b0:	2201      	movs	r2, #1
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	69fa      	ldr	r2, [r7, #28]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	f040 8158 	bne.w	800157e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	4a9a      	ldr	r2, [pc, #616]	; (800153c <HAL_GPIO_Init+0x2a0>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d05e      	beq.n	8001396 <HAL_GPIO_Init+0xfa>
 80012d8:	4a98      	ldr	r2, [pc, #608]	; (800153c <HAL_GPIO_Init+0x2a0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d875      	bhi.n	80013ca <HAL_GPIO_Init+0x12e>
 80012de:	4a98      	ldr	r2, [pc, #608]	; (8001540 <HAL_GPIO_Init+0x2a4>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d058      	beq.n	8001396 <HAL_GPIO_Init+0xfa>
 80012e4:	4a96      	ldr	r2, [pc, #600]	; (8001540 <HAL_GPIO_Init+0x2a4>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d86f      	bhi.n	80013ca <HAL_GPIO_Init+0x12e>
 80012ea:	4a96      	ldr	r2, [pc, #600]	; (8001544 <HAL_GPIO_Init+0x2a8>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d052      	beq.n	8001396 <HAL_GPIO_Init+0xfa>
 80012f0:	4a94      	ldr	r2, [pc, #592]	; (8001544 <HAL_GPIO_Init+0x2a8>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d869      	bhi.n	80013ca <HAL_GPIO_Init+0x12e>
 80012f6:	4a94      	ldr	r2, [pc, #592]	; (8001548 <HAL_GPIO_Init+0x2ac>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d04c      	beq.n	8001396 <HAL_GPIO_Init+0xfa>
 80012fc:	4a92      	ldr	r2, [pc, #584]	; (8001548 <HAL_GPIO_Init+0x2ac>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d863      	bhi.n	80013ca <HAL_GPIO_Init+0x12e>
 8001302:	4a92      	ldr	r2, [pc, #584]	; (800154c <HAL_GPIO_Init+0x2b0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d046      	beq.n	8001396 <HAL_GPIO_Init+0xfa>
 8001308:	4a90      	ldr	r2, [pc, #576]	; (800154c <HAL_GPIO_Init+0x2b0>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d85d      	bhi.n	80013ca <HAL_GPIO_Init+0x12e>
 800130e:	2b12      	cmp	r3, #18
 8001310:	d82a      	bhi.n	8001368 <HAL_GPIO_Init+0xcc>
 8001312:	2b12      	cmp	r3, #18
 8001314:	d859      	bhi.n	80013ca <HAL_GPIO_Init+0x12e>
 8001316:	a201      	add	r2, pc, #4	; (adr r2, 800131c <HAL_GPIO_Init+0x80>)
 8001318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131c:	08001397 	.word	0x08001397
 8001320:	08001371 	.word	0x08001371
 8001324:	08001383 	.word	0x08001383
 8001328:	080013c5 	.word	0x080013c5
 800132c:	080013cb 	.word	0x080013cb
 8001330:	080013cb 	.word	0x080013cb
 8001334:	080013cb 	.word	0x080013cb
 8001338:	080013cb 	.word	0x080013cb
 800133c:	080013cb 	.word	0x080013cb
 8001340:	080013cb 	.word	0x080013cb
 8001344:	080013cb 	.word	0x080013cb
 8001348:	080013cb 	.word	0x080013cb
 800134c:	080013cb 	.word	0x080013cb
 8001350:	080013cb 	.word	0x080013cb
 8001354:	080013cb 	.word	0x080013cb
 8001358:	080013cb 	.word	0x080013cb
 800135c:	080013cb 	.word	0x080013cb
 8001360:	08001379 	.word	0x08001379
 8001364:	0800138d 	.word	0x0800138d
 8001368:	4a79      	ldr	r2, [pc, #484]	; (8001550 <HAL_GPIO_Init+0x2b4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d013      	beq.n	8001396 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800136e:	e02c      	b.n	80013ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	623b      	str	r3, [r7, #32]
          break;
 8001376:	e029      	b.n	80013cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	3304      	adds	r3, #4
 800137e:	623b      	str	r3, [r7, #32]
          break;
 8001380:	e024      	b.n	80013cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	3308      	adds	r3, #8
 8001388:	623b      	str	r3, [r7, #32]
          break;
 800138a:	e01f      	b.n	80013cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	330c      	adds	r3, #12
 8001392:	623b      	str	r3, [r7, #32]
          break;
 8001394:	e01a      	b.n	80013cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d102      	bne.n	80013a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800139e:	2304      	movs	r3, #4
 80013a0:	623b      	str	r3, [r7, #32]
          break;
 80013a2:	e013      	b.n	80013cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d105      	bne.n	80013b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013ac:	2308      	movs	r3, #8
 80013ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	69fa      	ldr	r2, [r7, #28]
 80013b4:	611a      	str	r2, [r3, #16]
          break;
 80013b6:	e009      	b.n	80013cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013b8:	2308      	movs	r3, #8
 80013ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	615a      	str	r2, [r3, #20]
          break;
 80013c2:	e003      	b.n	80013cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
          break;
 80013c8:	e000      	b.n	80013cc <HAL_GPIO_Init+0x130>
          break;
 80013ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	2bff      	cmp	r3, #255	; 0xff
 80013d0:	d801      	bhi.n	80013d6 <HAL_GPIO_Init+0x13a>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	e001      	b.n	80013da <HAL_GPIO_Init+0x13e>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3304      	adds	r3, #4
 80013da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	2bff      	cmp	r3, #255	; 0xff
 80013e0:	d802      	bhi.n	80013e8 <HAL_GPIO_Init+0x14c>
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	e002      	b.n	80013ee <HAL_GPIO_Init+0x152>
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	3b08      	subs	r3, #8
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	210f      	movs	r1, #15
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	fa01 f303 	lsl.w	r3, r1, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	401a      	ands	r2, r3
 8001400:	6a39      	ldr	r1, [r7, #32]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	fa01 f303 	lsl.w	r3, r1, r3
 8001408:	431a      	orrs	r2, r3
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 80b1 	beq.w	800157e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800141c:	4b4d      	ldr	r3, [pc, #308]	; (8001554 <HAL_GPIO_Init+0x2b8>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a4c      	ldr	r2, [pc, #304]	; (8001554 <HAL_GPIO_Init+0x2b8>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b4a      	ldr	r3, [pc, #296]	; (8001554 <HAL_GPIO_Init+0x2b8>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001434:	4a48      	ldr	r2, [pc, #288]	; (8001558 <HAL_GPIO_Init+0x2bc>)
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	089b      	lsrs	r3, r3, #2
 800143a:	3302      	adds	r3, #2
 800143c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001440:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	220f      	movs	r2, #15
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4013      	ands	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a40      	ldr	r2, [pc, #256]	; (800155c <HAL_GPIO_Init+0x2c0>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d013      	beq.n	8001488 <HAL_GPIO_Init+0x1ec>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a3f      	ldr	r2, [pc, #252]	; (8001560 <HAL_GPIO_Init+0x2c4>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d00d      	beq.n	8001484 <HAL_GPIO_Init+0x1e8>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a3e      	ldr	r2, [pc, #248]	; (8001564 <HAL_GPIO_Init+0x2c8>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d007      	beq.n	8001480 <HAL_GPIO_Init+0x1e4>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a3d      	ldr	r2, [pc, #244]	; (8001568 <HAL_GPIO_Init+0x2cc>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d101      	bne.n	800147c <HAL_GPIO_Init+0x1e0>
 8001478:	2303      	movs	r3, #3
 800147a:	e006      	b.n	800148a <HAL_GPIO_Init+0x1ee>
 800147c:	2304      	movs	r3, #4
 800147e:	e004      	b.n	800148a <HAL_GPIO_Init+0x1ee>
 8001480:	2302      	movs	r3, #2
 8001482:	e002      	b.n	800148a <HAL_GPIO_Init+0x1ee>
 8001484:	2301      	movs	r3, #1
 8001486:	e000      	b.n	800148a <HAL_GPIO_Init+0x1ee>
 8001488:	2300      	movs	r3, #0
 800148a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800148c:	f002 0203 	and.w	r2, r2, #3
 8001490:	0092      	lsls	r2, r2, #2
 8001492:	4093      	lsls	r3, r2
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	4313      	orrs	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800149a:	492f      	ldr	r1, [pc, #188]	; (8001558 <HAL_GPIO_Init+0x2bc>)
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	3302      	adds	r3, #2
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d006      	beq.n	80014c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014b4:	4b2d      	ldr	r3, [pc, #180]	; (800156c <HAL_GPIO_Init+0x2d0>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	492c      	ldr	r1, [pc, #176]	; (800156c <HAL_GPIO_Init+0x2d0>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]
 80014c0:	e006      	b.n	80014d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014c2:	4b2a      	ldr	r3, [pc, #168]	; (800156c <HAL_GPIO_Init+0x2d0>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	4928      	ldr	r1, [pc, #160]	; (800156c <HAL_GPIO_Init+0x2d0>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d006      	beq.n	80014ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014dc:	4b23      	ldr	r3, [pc, #140]	; (800156c <HAL_GPIO_Init+0x2d0>)
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	4922      	ldr	r1, [pc, #136]	; (800156c <HAL_GPIO_Init+0x2d0>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	604b      	str	r3, [r1, #4]
 80014e8:	e006      	b.n	80014f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014ea:	4b20      	ldr	r3, [pc, #128]	; (800156c <HAL_GPIO_Init+0x2d0>)
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	491e      	ldr	r1, [pc, #120]	; (800156c <HAL_GPIO_Init+0x2d0>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d006      	beq.n	8001512 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <HAL_GPIO_Init+0x2d0>)
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	4918      	ldr	r1, [pc, #96]	; (800156c <HAL_GPIO_Init+0x2d0>)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	4313      	orrs	r3, r2
 800150e:	608b      	str	r3, [r1, #8]
 8001510:	e006      	b.n	8001520 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <HAL_GPIO_Init+0x2d0>)
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	43db      	mvns	r3, r3
 800151a:	4914      	ldr	r1, [pc, #80]	; (800156c <HAL_GPIO_Init+0x2d0>)
 800151c:	4013      	ands	r3, r2
 800151e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d021      	beq.n	8001570 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_GPIO_Init+0x2d0>)
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	490e      	ldr	r1, [pc, #56]	; (800156c <HAL_GPIO_Init+0x2d0>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	60cb      	str	r3, [r1, #12]
 8001538:	e021      	b.n	800157e <HAL_GPIO_Init+0x2e2>
 800153a:	bf00      	nop
 800153c:	10320000 	.word	0x10320000
 8001540:	10310000 	.word	0x10310000
 8001544:	10220000 	.word	0x10220000
 8001548:	10210000 	.word	0x10210000
 800154c:	10120000 	.word	0x10120000
 8001550:	10110000 	.word	0x10110000
 8001554:	40021000 	.word	0x40021000
 8001558:	40010000 	.word	0x40010000
 800155c:	40010800 	.word	0x40010800
 8001560:	40010c00 	.word	0x40010c00
 8001564:	40011000 	.word	0x40011000
 8001568:	40011400 	.word	0x40011400
 800156c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_GPIO_Init+0x304>)
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	43db      	mvns	r3, r3
 8001578:	4909      	ldr	r1, [pc, #36]	; (80015a0 <HAL_GPIO_Init+0x304>)
 800157a:	4013      	ands	r3, r2
 800157c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	3301      	adds	r3, #1
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	fa22 f303 	lsr.w	r3, r2, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	f47f ae8e 	bne.w	80012b0 <HAL_GPIO_Init+0x14>
  }
}
 8001594:	bf00      	nop
 8001596:	bf00      	nop
 8001598:	372c      	adds	r7, #44	; 0x2c
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	40010400 	.word	0x40010400

080015a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
 80015b0:	4613      	mov	r3, r2
 80015b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015b4:	787b      	ldrb	r3, [r7, #1]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015c0:	e003      	b.n	80015ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015c2:	887b      	ldrh	r3, [r7, #2]
 80015c4:	041a      	lsls	r2, r3, #16
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	611a      	str	r2, [r3, #16]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015e6:	887a      	ldrh	r2, [r7, #2]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4013      	ands	r3, r2
 80015ec:	041a      	lsls	r2, r3, #16
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	43d9      	mvns	r1, r3
 80015f2:	887b      	ldrh	r3, [r7, #2]
 80015f4:	400b      	ands	r3, r1
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	611a      	str	r2, [r3, #16]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
	...

08001608 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001614:	695a      	ldr	r2, [r3, #20]
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	4013      	ands	r3, r2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d006      	beq.n	800162c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fa6c 	bl	8000b04 <HAL_GPIO_EXTI_Callback>
  }
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40010400 	.word	0x40010400

08001638 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e12b      	b.n	80018a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d106      	bne.n	8001664 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff fa98 	bl	8000b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2224      	movs	r2, #36	; 0x24
 8001668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0201 	bic.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800168a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800169a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800169c:	f000 fffa 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 80016a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4a81      	ldr	r2, [pc, #516]	; (80018ac <HAL_I2C_Init+0x274>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d807      	bhi.n	80016bc <HAL_I2C_Init+0x84>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4a80      	ldr	r2, [pc, #512]	; (80018b0 <HAL_I2C_Init+0x278>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	bf94      	ite	ls
 80016b4:	2301      	movls	r3, #1
 80016b6:	2300      	movhi	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	e006      	b.n	80016ca <HAL_I2C_Init+0x92>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4a7d      	ldr	r2, [pc, #500]	; (80018b4 <HAL_I2C_Init+0x27c>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	bf94      	ite	ls
 80016c4:	2301      	movls	r3, #1
 80016c6:	2300      	movhi	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e0e7      	b.n	80018a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4a78      	ldr	r2, [pc, #480]	; (80018b8 <HAL_I2C_Init+0x280>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	0c9b      	lsrs	r3, r3, #18
 80016dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	4a6a      	ldr	r2, [pc, #424]	; (80018ac <HAL_I2C_Init+0x274>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d802      	bhi.n	800170c <HAL_I2C_Init+0xd4>
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	3301      	adds	r3, #1
 800170a:	e009      	b.n	8001720 <HAL_I2C_Init+0xe8>
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001712:	fb02 f303 	mul.w	r3, r2, r3
 8001716:	4a69      	ldr	r2, [pc, #420]	; (80018bc <HAL_I2C_Init+0x284>)
 8001718:	fba2 2303 	umull	r2, r3, r2, r3
 800171c:	099b      	lsrs	r3, r3, #6
 800171e:	3301      	adds	r3, #1
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	430b      	orrs	r3, r1
 8001726:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001732:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	495c      	ldr	r1, [pc, #368]	; (80018ac <HAL_I2C_Init+0x274>)
 800173c:	428b      	cmp	r3, r1
 800173e:	d819      	bhi.n	8001774 <HAL_I2C_Init+0x13c>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1e59      	subs	r1, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	fbb1 f3f3 	udiv	r3, r1, r3
 800174e:	1c59      	adds	r1, r3, #1
 8001750:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001754:	400b      	ands	r3, r1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00a      	beq.n	8001770 <HAL_I2C_Init+0x138>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1e59      	subs	r1, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fbb1 f3f3 	udiv	r3, r1, r3
 8001768:	3301      	adds	r3, #1
 800176a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800176e:	e051      	b.n	8001814 <HAL_I2C_Init+0x1dc>
 8001770:	2304      	movs	r3, #4
 8001772:	e04f      	b.n	8001814 <HAL_I2C_Init+0x1dc>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d111      	bne.n	80017a0 <HAL_I2C_Init+0x168>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	1e58      	subs	r0, r3, #1
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	440b      	add	r3, r1
 800178a:	fbb0 f3f3 	udiv	r3, r0, r3
 800178e:	3301      	adds	r3, #1
 8001790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001794:	2b00      	cmp	r3, #0
 8001796:	bf0c      	ite	eq
 8001798:	2301      	moveq	r3, #1
 800179a:	2300      	movne	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	e012      	b.n	80017c6 <HAL_I2C_Init+0x18e>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	1e58      	subs	r0, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6859      	ldr	r1, [r3, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	0099      	lsls	r1, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b6:	3301      	adds	r3, #1
 80017b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017bc:	2b00      	cmp	r3, #0
 80017be:	bf0c      	ite	eq
 80017c0:	2301      	moveq	r3, #1
 80017c2:	2300      	movne	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_I2C_Init+0x196>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e022      	b.n	8001814 <HAL_I2C_Init+0x1dc>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10e      	bne.n	80017f4 <HAL_I2C_Init+0x1bc>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1e58      	subs	r0, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6859      	ldr	r1, [r3, #4]
 80017de:	460b      	mov	r3, r1
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	440b      	add	r3, r1
 80017e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e8:	3301      	adds	r3, #1
 80017ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f2:	e00f      	b.n	8001814 <HAL_I2C_Init+0x1dc>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1e58      	subs	r0, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6859      	ldr	r1, [r3, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	0099      	lsls	r1, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	fbb0 f3f3 	udiv	r3, r0, r3
 800180a:	3301      	adds	r3, #1
 800180c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001810:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	6809      	ldr	r1, [r1, #0]
 8001818:	4313      	orrs	r3, r2
 800181a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69da      	ldr	r2, [r3, #28]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001842:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6911      	ldr	r1, [r2, #16]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68d2      	ldr	r2, [r2, #12]
 800184e:	4311      	orrs	r1, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	430b      	orrs	r3, r1
 8001856:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	695a      	ldr	r2, [r3, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2220      	movs	r2, #32
 800188e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	000186a0 	.word	0x000186a0
 80018b0:	001e847f 	.word	0x001e847f
 80018b4:	003d08ff 	.word	0x003d08ff
 80018b8:	431bde83 	.word	0x431bde83
 80018bc:	10624dd3 	.word	0x10624dd3

080018c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	4608      	mov	r0, r1
 80018ca:	4611      	mov	r1, r2
 80018cc:	461a      	mov	r2, r3
 80018ce:	4603      	mov	r3, r0
 80018d0:	817b      	strh	r3, [r7, #10]
 80018d2:	460b      	mov	r3, r1
 80018d4:	813b      	strh	r3, [r7, #8]
 80018d6:	4613      	mov	r3, r2
 80018d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018da:	f7ff faf3 	bl	8000ec4 <HAL_GetTick>
 80018de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b20      	cmp	r3, #32
 80018ea:	f040 80d9 	bne.w	8001aa0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	2319      	movs	r3, #25
 80018f4:	2201      	movs	r2, #1
 80018f6:	496d      	ldr	r1, [pc, #436]	; (8001aac <HAL_I2C_Mem_Write+0x1ec>)
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 f971 	bl	8001be0 <I2C_WaitOnFlagUntilTimeout>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001904:	2302      	movs	r3, #2
 8001906:	e0cc      	b.n	8001aa2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800190e:	2b01      	cmp	r3, #1
 8001910:	d101      	bne.n	8001916 <HAL_I2C_Mem_Write+0x56>
 8001912:	2302      	movs	r3, #2
 8001914:	e0c5      	b.n	8001aa2 <HAL_I2C_Mem_Write+0x1e2>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b01      	cmp	r3, #1
 800192a:	d007      	beq.n	800193c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0201 	orr.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800194a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2221      	movs	r2, #33	; 0x21
 8001950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2240      	movs	r2, #64	; 0x40
 8001958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6a3a      	ldr	r2, [r7, #32]
 8001966:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800196c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001972:	b29a      	uxth	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4a4d      	ldr	r2, [pc, #308]	; (8001ab0 <HAL_I2C_Mem_Write+0x1f0>)
 800197c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800197e:	88f8      	ldrh	r0, [r7, #6]
 8001980:	893a      	ldrh	r2, [r7, #8]
 8001982:	8979      	ldrh	r1, [r7, #10]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	4603      	mov	r3, r0
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 f890 	bl	8001ab4 <I2C_RequestMemoryWrite>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d052      	beq.n	8001a40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e081      	b.n	8001aa2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 f9f2 	bl	8001d8c <I2C_WaitOnTXEFlagUntilTimeout>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00d      	beq.n	80019ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	2b04      	cmp	r3, #4
 80019b4:	d107      	bne.n	80019c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e06b      	b.n	8001aa2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e4:	3b01      	subs	r3, #1
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d11b      	bne.n	8001a40 <HAL_I2C_Mem_Write+0x180>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d017      	beq.n	8001a40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	781a      	ldrb	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1aa      	bne.n	800199e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 f9de 	bl	8001e0e <I2C_WaitOnBTFFlagUntilTimeout>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00d      	beq.n	8001a74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d107      	bne.n	8001a70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e016      	b.n	8001aa2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2220      	movs	r2, #32
 8001a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e000      	b.n	8001aa2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001aa0:	2302      	movs	r3, #2
  }
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	00100002 	.word	0x00100002
 8001ab0:	ffff0000 	.word	0xffff0000

08001ab4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	4608      	mov	r0, r1
 8001abe:	4611      	mov	r1, r2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	817b      	strh	r3, [r7, #10]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	813b      	strh	r3, [r7, #8]
 8001aca:	4613      	mov	r3, r2
 8001acc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001adc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 f878 	bl	8001be0 <I2C_WaitOnFlagUntilTimeout>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00d      	beq.n	8001b12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b04:	d103      	bne.n	8001b0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e05f      	b.n	8001bd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b12:	897b      	ldrh	r3, [r7, #10]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	461a      	mov	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	6a3a      	ldr	r2, [r7, #32]
 8001b26:	492d      	ldr	r1, [pc, #180]	; (8001bdc <I2C_RequestMemoryWrite+0x128>)
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 f8b0 	bl	8001c8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e04c      	b.n	8001bd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b50:	6a39      	ldr	r1, [r7, #32]
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 f91a 	bl	8001d8c <I2C_WaitOnTXEFlagUntilTimeout>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00d      	beq.n	8001b7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d107      	bne.n	8001b76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e02b      	b.n	8001bd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d105      	bne.n	8001b8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b80:	893b      	ldrh	r3, [r7, #8]
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	611a      	str	r2, [r3, #16]
 8001b8a:	e021      	b.n	8001bd0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b8c:	893b      	ldrh	r3, [r7, #8]
 8001b8e:	0a1b      	lsrs	r3, r3, #8
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9c:	6a39      	ldr	r1, [r7, #32]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 f8f4 	bl	8001d8c <I2C_WaitOnTXEFlagUntilTimeout>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00d      	beq.n	8001bc6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d107      	bne.n	8001bc2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e005      	b.n	8001bd2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bc6:	893b      	ldrh	r3, [r7, #8]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	00010002 	.word	0x00010002

08001be0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	4613      	mov	r3, r2
 8001bee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bf0:	e025      	b.n	8001c3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bf8:	d021      	beq.n	8001c3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bfa:	f7ff f963 	bl	8000ec4 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d302      	bcc.n	8001c10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d116      	bne.n	8001c3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2220      	movs	r2, #32
 8001c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f043 0220 	orr.w	r2, r3, #32
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e023      	b.n	8001c86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	0c1b      	lsrs	r3, r3, #16
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d10d      	bne.n	8001c64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	4013      	ands	r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	bf0c      	ite	eq
 8001c5a:	2301      	moveq	r3, #1
 8001c5c:	2300      	movne	r3, #0
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	461a      	mov	r2, r3
 8001c62:	e00c      	b.n	8001c7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	bf0c      	ite	eq
 8001c76:	2301      	moveq	r3, #1
 8001c78:	2300      	movne	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d0b6      	beq.n	8001bf2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c9c:	e051      	b.n	8001d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cac:	d123      	bne.n	8001cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cbc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f043 0204 	orr.w	r2, r3, #4
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e046      	b.n	8001d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cfc:	d021      	beq.n	8001d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cfe:	f7ff f8e1 	bl	8000ec4 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d302      	bcc.n	8001d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d116      	bne.n	8001d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f043 0220 	orr.w	r2, r3, #32
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e020      	b.n	8001d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	0c1b      	lsrs	r3, r3, #16
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d10c      	bne.n	8001d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	43da      	mvns	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	4013      	ands	r3, r2
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	bf14      	ite	ne
 8001d5e:	2301      	movne	r3, #1
 8001d60:	2300      	moveq	r3, #0
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	e00b      	b.n	8001d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	43da      	mvns	r2, r3
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	4013      	ands	r3, r2
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bf14      	ite	ne
 8001d78:	2301      	movne	r3, #1
 8001d7a:	2300      	moveq	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d18d      	bne.n	8001c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d98:	e02d      	b.n	8001df6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f878 	bl	8001e90 <I2C_IsAcknowledgeFailed>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e02d      	b.n	8001e06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001db0:	d021      	beq.n	8001df6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001db2:	f7ff f887 	bl	8000ec4 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d302      	bcc.n	8001dc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d116      	bne.n	8001df6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f043 0220 	orr.w	r2, r3, #32
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e007      	b.n	8001e06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e00:	2b80      	cmp	r3, #128	; 0x80
 8001e02:	d1ca      	bne.n	8001d9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e1a:	e02d      	b.n	8001e78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 f837 	bl	8001e90 <I2C_IsAcknowledgeFailed>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e02d      	b.n	8001e88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e32:	d021      	beq.n	8001e78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e34:	f7ff f846 	bl	8000ec4 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d302      	bcc.n	8001e4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d116      	bne.n	8001e78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2220      	movs	r2, #32
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	f043 0220 	orr.w	r2, r3, #32
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e007      	b.n	8001e88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d1ca      	bne.n	8001e1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea6:	d11b      	bne.n	8001ee0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001eb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	f043 0204 	orr.w	r2, r3, #4
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e26c      	b.n	80023d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 8087 	beq.w	800201a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f0c:	4b92      	ldr	r3, [pc, #584]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d00c      	beq.n	8001f32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f18:	4b8f      	ldr	r3, [pc, #572]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 030c 	and.w	r3, r3, #12
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d112      	bne.n	8001f4a <HAL_RCC_OscConfig+0x5e>
 8001f24:	4b8c      	ldr	r3, [pc, #560]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f30:	d10b      	bne.n	8001f4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f32:	4b89      	ldr	r3, [pc, #548]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d06c      	beq.n	8002018 <HAL_RCC_OscConfig+0x12c>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d168      	bne.n	8002018 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e246      	b.n	80023d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f52:	d106      	bne.n	8001f62 <HAL_RCC_OscConfig+0x76>
 8001f54:	4b80      	ldr	r3, [pc, #512]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a7f      	ldr	r2, [pc, #508]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	e02e      	b.n	8001fc0 <HAL_RCC_OscConfig+0xd4>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x98>
 8001f6a:	4b7b      	ldr	r3, [pc, #492]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a7a      	ldr	r2, [pc, #488]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	4b78      	ldr	r3, [pc, #480]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a77      	ldr	r2, [pc, #476]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	e01d      	b.n	8001fc0 <HAL_RCC_OscConfig+0xd4>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0xbc>
 8001f8e:	4b72      	ldr	r3, [pc, #456]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a71      	ldr	r2, [pc, #452]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	4b6f      	ldr	r3, [pc, #444]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a6e      	ldr	r2, [pc, #440]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	e00b      	b.n	8001fc0 <HAL_RCC_OscConfig+0xd4>
 8001fa8:	4b6b      	ldr	r3, [pc, #428]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a6a      	ldr	r2, [pc, #424]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	4b68      	ldr	r3, [pc, #416]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a67      	ldr	r2, [pc, #412]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d013      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7fe ff7c 	bl	8000ec4 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd0:	f7fe ff78 	bl	8000ec4 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	; 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e1fa      	b.n	80023d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe2:	4b5d      	ldr	r3, [pc, #372]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0xe4>
 8001fee:	e014      	b.n	800201a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7fe ff68 	bl	8000ec4 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff8:	f7fe ff64 	bl	8000ec4 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	; 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e1e6      	b.n	80023d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200a:	4b53      	ldr	r3, [pc, #332]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x10c>
 8002016:	e000      	b.n	800201a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d063      	beq.n	80020ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002026:	4b4c      	ldr	r3, [pc, #304]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00b      	beq.n	800204a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002032:	4b49      	ldr	r3, [pc, #292]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b08      	cmp	r3, #8
 800203c:	d11c      	bne.n	8002078 <HAL_RCC_OscConfig+0x18c>
 800203e:	4b46      	ldr	r3, [pc, #280]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d116      	bne.n	8002078 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204a:	4b43      	ldr	r3, [pc, #268]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d005      	beq.n	8002062 <HAL_RCC_OscConfig+0x176>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d001      	beq.n	8002062 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e1ba      	b.n	80023d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002062:	4b3d      	ldr	r3, [pc, #244]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4939      	ldr	r1, [pc, #228]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002076:	e03a      	b.n	80020ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d020      	beq.n	80020c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002080:	4b36      	ldr	r3, [pc, #216]	; (800215c <HAL_RCC_OscConfig+0x270>)
 8002082:	2201      	movs	r2, #1
 8002084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002086:	f7fe ff1d 	bl	8000ec4 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208e:	f7fe ff19 	bl	8000ec4 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e19b      	b.n	80023d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a0:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ac:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4927      	ldr	r1, [pc, #156]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	600b      	str	r3, [r1, #0]
 80020c0:	e015      	b.n	80020ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c2:	4b26      	ldr	r3, [pc, #152]	; (800215c <HAL_RCC_OscConfig+0x270>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7fe fefc 	bl	8000ec4 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d0:	f7fe fef8 	bl	8000ec4 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e17a      	b.n	80023d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e2:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d03a      	beq.n	8002170 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d019      	beq.n	8002136 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002102:	4b17      	ldr	r3, [pc, #92]	; (8002160 <HAL_RCC_OscConfig+0x274>)
 8002104:	2201      	movs	r2, #1
 8002106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002108:	f7fe fedc 	bl	8000ec4 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002110:	f7fe fed8 	bl	8000ec4 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e15a      	b.n	80023d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_RCC_OscConfig+0x26c>)
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800212e:	2001      	movs	r0, #1
 8002130:	f000 fad8 	bl	80026e4 <RCC_Delay>
 8002134:	e01c      	b.n	8002170 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002136:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <HAL_RCC_OscConfig+0x274>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213c:	f7fe fec2 	bl	8000ec4 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002142:	e00f      	b.n	8002164 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002144:	f7fe febe 	bl	8000ec4 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d908      	bls.n	8002164 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e140      	b.n	80023d8 <HAL_RCC_OscConfig+0x4ec>
 8002156:	bf00      	nop
 8002158:	40021000 	.word	0x40021000
 800215c:	42420000 	.word	0x42420000
 8002160:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002164:	4b9e      	ldr	r3, [pc, #632]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1e9      	bne.n	8002144 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 80a6 	beq.w	80022ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800217e:	2300      	movs	r3, #0
 8002180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002182:	4b97      	ldr	r3, [pc, #604]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10d      	bne.n	80021aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218e:	4b94      	ldr	r3, [pc, #592]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	4a93      	ldr	r2, [pc, #588]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 8002194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002198:	61d3      	str	r3, [r2, #28]
 800219a:	4b91      	ldr	r3, [pc, #580]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a6:	2301      	movs	r3, #1
 80021a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021aa:	4b8e      	ldr	r3, [pc, #568]	; (80023e4 <HAL_RCC_OscConfig+0x4f8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d118      	bne.n	80021e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021b6:	4b8b      	ldr	r3, [pc, #556]	; (80023e4 <HAL_RCC_OscConfig+0x4f8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a8a      	ldr	r2, [pc, #552]	; (80023e4 <HAL_RCC_OscConfig+0x4f8>)
 80021bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021c2:	f7fe fe7f 	bl	8000ec4 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ca:	f7fe fe7b 	bl	8000ec4 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b64      	cmp	r3, #100	; 0x64
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e0fd      	b.n	80023d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021dc:	4b81      	ldr	r3, [pc, #516]	; (80023e4 <HAL_RCC_OscConfig+0x4f8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d106      	bne.n	80021fe <HAL_RCC_OscConfig+0x312>
 80021f0:	4b7b      	ldr	r3, [pc, #492]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	4a7a      	ldr	r2, [pc, #488]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6213      	str	r3, [r2, #32]
 80021fc:	e02d      	b.n	800225a <HAL_RCC_OscConfig+0x36e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10c      	bne.n	8002220 <HAL_RCC_OscConfig+0x334>
 8002206:	4b76      	ldr	r3, [pc, #472]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	4a75      	ldr	r2, [pc, #468]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 800220c:	f023 0301 	bic.w	r3, r3, #1
 8002210:	6213      	str	r3, [r2, #32]
 8002212:	4b73      	ldr	r3, [pc, #460]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	4a72      	ldr	r2, [pc, #456]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 8002218:	f023 0304 	bic.w	r3, r3, #4
 800221c:	6213      	str	r3, [r2, #32]
 800221e:	e01c      	b.n	800225a <HAL_RCC_OscConfig+0x36e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2b05      	cmp	r3, #5
 8002226:	d10c      	bne.n	8002242 <HAL_RCC_OscConfig+0x356>
 8002228:	4b6d      	ldr	r3, [pc, #436]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4a6c      	ldr	r2, [pc, #432]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 800222e:	f043 0304 	orr.w	r3, r3, #4
 8002232:	6213      	str	r3, [r2, #32]
 8002234:	4b6a      	ldr	r3, [pc, #424]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4a69      	ldr	r2, [pc, #420]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6213      	str	r3, [r2, #32]
 8002240:	e00b      	b.n	800225a <HAL_RCC_OscConfig+0x36e>
 8002242:	4b67      	ldr	r3, [pc, #412]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	4a66      	ldr	r2, [pc, #408]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	6213      	str	r3, [r2, #32]
 800224e:	4b64      	ldr	r3, [pc, #400]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	4a63      	ldr	r2, [pc, #396]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 8002254:	f023 0304 	bic.w	r3, r3, #4
 8002258:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d015      	beq.n	800228e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002262:	f7fe fe2f 	bl	8000ec4 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002268:	e00a      	b.n	8002280 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226a:	f7fe fe2b 	bl	8000ec4 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f241 3288 	movw	r2, #5000	; 0x1388
 8002278:	4293      	cmp	r3, r2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e0ab      	b.n	80023d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002280:	4b57      	ldr	r3, [pc, #348]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0ee      	beq.n	800226a <HAL_RCC_OscConfig+0x37e>
 800228c:	e014      	b.n	80022b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228e:	f7fe fe19 	bl	8000ec4 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002294:	e00a      	b.n	80022ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002296:	f7fe fe15 	bl	8000ec4 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e095      	b.n	80023d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ac:	4b4c      	ldr	r3, [pc, #304]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1ee      	bne.n	8002296 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022b8:	7dfb      	ldrb	r3, [r7, #23]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d105      	bne.n	80022ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022be:	4b48      	ldr	r3, [pc, #288]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	4a47      	ldr	r2, [pc, #284]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 80022c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 8081 	beq.w	80023d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022d4:	4b42      	ldr	r3, [pc, #264]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 030c 	and.w	r3, r3, #12
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d061      	beq.n	80023a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d146      	bne.n	8002376 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e8:	4b3f      	ldr	r3, [pc, #252]	; (80023e8 <HAL_RCC_OscConfig+0x4fc>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ee:	f7fe fde9 	bl	8000ec4 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f6:	f7fe fde5 	bl	8000ec4 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e067      	b.n	80023d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002308:	4b35      	ldr	r3, [pc, #212]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f0      	bne.n	80022f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800231c:	d108      	bne.n	8002330 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800231e:	4b30      	ldr	r3, [pc, #192]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	492d      	ldr	r1, [pc, #180]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 800232c:	4313      	orrs	r3, r2
 800232e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002330:	4b2b      	ldr	r3, [pc, #172]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a19      	ldr	r1, [r3, #32]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	430b      	orrs	r3, r1
 8002342:	4927      	ldr	r1, [pc, #156]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 8002344:	4313      	orrs	r3, r2
 8002346:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002348:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <HAL_RCC_OscConfig+0x4fc>)
 800234a:	2201      	movs	r2, #1
 800234c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234e:	f7fe fdb9 	bl	8000ec4 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002356:	f7fe fdb5 	bl	8000ec4 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e037      	b.n	80023d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002368:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x46a>
 8002374:	e02f      	b.n	80023d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002376:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <HAL_RCC_OscConfig+0x4fc>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7fe fda2 	bl	8000ec4 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002384:	f7fe fd9e 	bl	8000ec4 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e020      	b.n	80023d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002396:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x498>
 80023a2:	e018      	b.n	80023d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e013      	b.n	80023d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_OscConfig+0x4f4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d001      	beq.n	80023d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40007000 	.word	0x40007000
 80023e8:	42420060 	.word	0x42420060

080023ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0d0      	b.n	80025a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002400:	4b6a      	ldr	r3, [pc, #424]	; (80025ac <HAL_RCC_ClockConfig+0x1c0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d910      	bls.n	8002430 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b67      	ldr	r3, [pc, #412]	; (80025ac <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 0207 	bic.w	r2, r3, #7
 8002416:	4965      	ldr	r1, [pc, #404]	; (80025ac <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	4313      	orrs	r3, r2
 800241c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	4b63      	ldr	r3, [pc, #396]	; (80025ac <HAL_RCC_ClockConfig+0x1c0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0b8      	b.n	80025a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d020      	beq.n	800247e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002448:	4b59      	ldr	r3, [pc, #356]	; (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	4a58      	ldr	r2, [pc, #352]	; (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002452:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002460:	4b53      	ldr	r3, [pc, #332]	; (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4a52      	ldr	r2, [pc, #328]	; (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800246a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800246c:	4b50      	ldr	r3, [pc, #320]	; (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	494d      	ldr	r1, [pc, #308]	; (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	4313      	orrs	r3, r2
 800247c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d040      	beq.n	800250c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d107      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002492:	4b47      	ldr	r3, [pc, #284]	; (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d115      	bne.n	80024ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e07f      	b.n	80025a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d107      	bne.n	80024ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024aa:	4b41      	ldr	r3, [pc, #260]	; (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d109      	bne.n	80024ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e073      	b.n	80025a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ba:	4b3d      	ldr	r3, [pc, #244]	; (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e06b      	b.n	80025a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ca:	4b39      	ldr	r3, [pc, #228]	; (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f023 0203 	bic.w	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4936      	ldr	r1, [pc, #216]	; (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024dc:	f7fe fcf2 	bl	8000ec4 <HAL_GetTick>
 80024e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e2:	e00a      	b.n	80024fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e4:	f7fe fcee 	bl	8000ec4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e053      	b.n	80025a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fa:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 020c 	and.w	r2, r3, #12
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	429a      	cmp	r2, r3
 800250a:	d1eb      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800250c:	4b27      	ldr	r3, [pc, #156]	; (80025ac <HAL_RCC_ClockConfig+0x1c0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d210      	bcs.n	800253c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251a:	4b24      	ldr	r3, [pc, #144]	; (80025ac <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 0207 	bic.w	r2, r3, #7
 8002522:	4922      	ldr	r1, [pc, #136]	; (80025ac <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	4313      	orrs	r3, r2
 8002528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800252a:	4b20      	ldr	r3, [pc, #128]	; (80025ac <HAL_RCC_ClockConfig+0x1c0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	429a      	cmp	r2, r3
 8002536:	d001      	beq.n	800253c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e032      	b.n	80025a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002548:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	4916      	ldr	r1, [pc, #88]	; (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	4313      	orrs	r3, r2
 8002558:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d009      	beq.n	800257a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	490e      	ldr	r1, [pc, #56]	; (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	4313      	orrs	r3, r2
 8002578:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800257a:	f000 f821 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 800257e:	4602      	mov	r2, r0
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	091b      	lsrs	r3, r3, #4
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	490a      	ldr	r1, [pc, #40]	; (80025b4 <HAL_RCC_ClockConfig+0x1c8>)
 800258c:	5ccb      	ldrb	r3, [r1, r3]
 800258e:	fa22 f303 	lsr.w	r3, r2, r3
 8002592:	4a09      	ldr	r2, [pc, #36]	; (80025b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002596:	4b09      	ldr	r3, [pc, #36]	; (80025bc <HAL_RCC_ClockConfig+0x1d0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7fe fc50 	bl	8000e40 <HAL_InitTick>

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40022000 	.word	0x40022000
 80025b0:	40021000 	.word	0x40021000
 80025b4:	08003be0 	.word	0x08003be0
 80025b8:	20000008 	.word	0x20000008
 80025bc:	2000000c 	.word	0x2000000c

080025c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c0:	b490      	push	{r4, r7}
 80025c2:	b08a      	sub	sp, #40	; 0x28
 80025c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025c6:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025c8:	1d3c      	adds	r4, r7, #4
 80025ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025d0:	f240 2301 	movw	r3, #513	; 0x201
 80025d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	2300      	movs	r3, #0
 80025dc:	61bb      	str	r3, [r7, #24]
 80025de:	2300      	movs	r3, #0
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025ea:	4b22      	ldr	r3, [pc, #136]	; (8002674 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d002      	beq.n	8002600 <HAL_RCC_GetSysClockFreq+0x40>
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d003      	beq.n	8002606 <HAL_RCC_GetSysClockFreq+0x46>
 80025fe:	e02d      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002600:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002602:	623b      	str	r3, [r7, #32]
      break;
 8002604:	e02d      	b.n	8002662 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	0c9b      	lsrs	r3, r3, #18
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002612:	4413      	add	r3, r2
 8002614:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002618:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d013      	beq.n	800264c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002624:	4b13      	ldr	r3, [pc, #76]	; (8002674 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	0c5b      	lsrs	r3, r3, #17
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002632:	4413      	add	r3, r2
 8002634:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002638:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	4a0e      	ldr	r2, [pc, #56]	; (8002678 <HAL_RCC_GetSysClockFreq+0xb8>)
 800263e:	fb02 f203 	mul.w	r2, r2, r3
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	fbb2 f3f3 	udiv	r3, r2, r3
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
 800264a:	e004      	b.n	8002656 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	4a0b      	ldr	r2, [pc, #44]	; (800267c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002650:	fb02 f303 	mul.w	r3, r2, r3
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	623b      	str	r3, [r7, #32]
      break;
 800265a:	e002      	b.n	8002662 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_RCC_GetSysClockFreq+0xb8>)
 800265e:	623b      	str	r3, [r7, #32]
      break;
 8002660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002662:	6a3b      	ldr	r3, [r7, #32]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3728      	adds	r7, #40	; 0x28
 8002668:	46bd      	mov	sp, r7
 800266a:	bc90      	pop	{r4, r7}
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	08003bd0 	.word	0x08003bd0
 8002674:	40021000 	.word	0x40021000
 8002678:	007a1200 	.word	0x007a1200
 800267c:	003d0900 	.word	0x003d0900

08002680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002684:	4b02      	ldr	r3, [pc, #8]	; (8002690 <HAL_RCC_GetHCLKFreq+0x10>)
 8002686:	681b      	ldr	r3, [r3, #0]
}
 8002688:	4618      	mov	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	20000008 	.word	0x20000008

08002694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002698:	f7ff fff2 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	0a1b      	lsrs	r3, r3, #8
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	4903      	ldr	r1, [pc, #12]	; (80026b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40021000 	.word	0x40021000
 80026b8:	08003bf0 	.word	0x08003bf0

080026bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026c0:	f7ff ffde 	bl	8002680 <HAL_RCC_GetHCLKFreq>
 80026c4:	4602      	mov	r2, r0
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	0adb      	lsrs	r3, r3, #11
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	4903      	ldr	r1, [pc, #12]	; (80026e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026d2:	5ccb      	ldrb	r3, [r1, r3]
 80026d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d8:	4618      	mov	r0, r3
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40021000 	.word	0x40021000
 80026e0:	08003bf0 	.word	0x08003bf0

080026e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <RCC_Delay+0x34>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a0a      	ldr	r2, [pc, #40]	; (800271c <RCC_Delay+0x38>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0a5b      	lsrs	r3, r3, #9
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	fb02 f303 	mul.w	r3, r2, r3
 80026fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002700:	bf00      	nop
  }
  while (Delay --);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1e5a      	subs	r2, r3, #1
 8002706:	60fa      	str	r2, [r7, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f9      	bne.n	8002700 <RCC_Delay+0x1c>
}
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	20000008 	.word	0x20000008
 800271c:	10624dd3 	.word	0x10624dd3

08002720 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e076      	b.n	8002820 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	2b00      	cmp	r3, #0
 8002738:	d108      	bne.n	800274c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002742:	d009      	beq.n	8002758 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	61da      	str	r2, [r3, #28]
 800274a:	e005      	b.n	8002758 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7fe fa4c 	bl	8000c10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800278e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027dc:	ea42 0103 	orr.w	r1, r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	0c1a      	lsrs	r2, r3, #16
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f002 0204 	and.w	r2, r2, #4
 80027fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	69da      	ldr	r2, [r3, #28]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800280e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	4613      	mov	r3, r2
 8002836:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_SPI_Transmit+0x22>
 8002846:	2302      	movs	r3, #2
 8002848:	e126      	b.n	8002a98 <HAL_SPI_Transmit+0x270>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002852:	f7fe fb37 	bl	8000ec4 <HAL_GetTick>
 8002856:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b01      	cmp	r3, #1
 8002866:	d002      	beq.n	800286e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002868:	2302      	movs	r3, #2
 800286a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800286c:	e10b      	b.n	8002a86 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <HAL_SPI_Transmit+0x52>
 8002874:	88fb      	ldrh	r3, [r7, #6]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d102      	bne.n	8002880 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800287e:	e102      	b.n	8002a86 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2203      	movs	r2, #3
 8002884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	88fa      	ldrh	r2, [r7, #6]
 8002898:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	88fa      	ldrh	r2, [r7, #6]
 800289e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028c6:	d10f      	bne.n	80028e8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f2:	2b40      	cmp	r3, #64	; 0x40
 80028f4:	d007      	beq.n	8002906 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002904:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800290e:	d14b      	bne.n	80029a8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <HAL_SPI_Transmit+0xf6>
 8002918:	8afb      	ldrh	r3, [r7, #22]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d13e      	bne.n	800299c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	881a      	ldrh	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	1c9a      	adds	r2, r3, #2
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002942:	e02b      	b.n	800299c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b02      	cmp	r3, #2
 8002950:	d112      	bne.n	8002978 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	881a      	ldrh	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	1c9a      	adds	r2, r3, #2
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800296c:	b29b      	uxth	r3, r3
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	86da      	strh	r2, [r3, #54]	; 0x36
 8002976:	e011      	b.n	800299c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002978:	f7fe faa4 	bl	8000ec4 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d803      	bhi.n	8002990 <HAL_SPI_Transmit+0x168>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800298e:	d102      	bne.n	8002996 <HAL_SPI_Transmit+0x16e>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d102      	bne.n	800299c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	77fb      	strb	r3, [r7, #31]
          goto error;
 800299a:	e074      	b.n	8002a86 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1ce      	bne.n	8002944 <HAL_SPI_Transmit+0x11c>
 80029a6:	e04c      	b.n	8002a42 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <HAL_SPI_Transmit+0x18e>
 80029b0:	8afb      	ldrh	r3, [r7, #22]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d140      	bne.n	8002a38 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	330c      	adds	r3, #12
 80029c0:	7812      	ldrb	r2, [r2, #0]
 80029c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80029dc:	e02c      	b.n	8002a38 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d113      	bne.n	8002a14 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	330c      	adds	r3, #12
 80029f6:	7812      	ldrb	r2, [r2, #0]
 80029f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a12:	e011      	b.n	8002a38 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a14:	f7fe fa56 	bl	8000ec4 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d803      	bhi.n	8002a2c <HAL_SPI_Transmit+0x204>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a2a:	d102      	bne.n	8002a32 <HAL_SPI_Transmit+0x20a>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d102      	bne.n	8002a38 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a36:	e026      	b.n	8002a86 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1cd      	bne.n	80029de <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	6839      	ldr	r1, [r7, #0]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 fbb8 	bl	80031bc <SPI_EndRxTxTransaction>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2220      	movs	r2, #32
 8002a56:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10a      	bne.n	8002a76 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a60:	2300      	movs	r3, #0
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	77fb      	strb	r3, [r7, #31]
 8002a82:	e000      	b.n	8002a86 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002a84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a96:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3720      	adds	r7, #32
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	4613      	mov	r3, r2
 8002aae:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002abc:	d112      	bne.n	8002ae4 <HAL_SPI_Receive+0x44>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2204      	movs	r2, #4
 8002aca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ace:	88fa      	ldrh	r2, [r7, #6]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	68b9      	ldr	r1, [r7, #8]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f8f1 	bl	8002cc2 <HAL_SPI_TransmitReceive>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	e0ea      	b.n	8002cba <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_SPI_Receive+0x52>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e0e3      	b.n	8002cba <HAL_SPI_Receive+0x21a>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002afa:	f7fe f9e3 	bl	8000ec4 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d002      	beq.n	8002b12 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b10:	e0ca      	b.n	8002ca8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <HAL_SPI_Receive+0x7e>
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d102      	bne.n	8002b24 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b22:	e0c1      	b.n	8002ca8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2204      	movs	r2, #4
 8002b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	88fa      	ldrh	r2, [r7, #6]
 8002b3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	88fa      	ldrh	r2, [r7, #6]
 8002b42:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b6a:	d10f      	bne.n	8002b8c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b8a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b96:	2b40      	cmp	r3, #64	; 0x40
 8002b98:	d007      	beq.n	8002baa <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ba8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d162      	bne.n	8002c78 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002bb2:	e02e      	b.n	8002c12 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d115      	bne.n	8002bee <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f103 020c 	add.w	r2, r3, #12
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	7812      	ldrb	r2, [r2, #0]
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bec:	e011      	b.n	8002c12 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bee:	f7fe f969 	bl	8000ec4 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d803      	bhi.n	8002c06 <HAL_SPI_Receive+0x166>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c04:	d102      	bne.n	8002c0c <HAL_SPI_Receive+0x16c>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d102      	bne.n	8002c12 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c10:	e04a      	b.n	8002ca8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1cb      	bne.n	8002bb4 <HAL_SPI_Receive+0x114>
 8002c1c:	e031      	b.n	8002c82 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d113      	bne.n	8002c54 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c36:	b292      	uxth	r2, r2
 8002c38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	1c9a      	adds	r2, r3, #2
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c52:	e011      	b.n	8002c78 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c54:	f7fe f936 	bl	8000ec4 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d803      	bhi.n	8002c6c <HAL_SPI_Receive+0x1cc>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c6a:	d102      	bne.n	8002c72 <HAL_SPI_Receive+0x1d2>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d102      	bne.n	8002c78 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c76:	e017      	b.n	8002ca8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1cd      	bne.n	8002c1e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	6839      	ldr	r1, [r7, #0]
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 fa46 	bl	8003118 <SPI_EndRxTransaction>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2220      	movs	r2, #32
 8002c96:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	75fb      	strb	r3, [r7, #23]
 8002ca4:	e000      	b.n	8002ca8 <HAL_SPI_Receive+0x208>
  }

error :
 8002ca6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b08c      	sub	sp, #48	; 0x30
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_SPI_TransmitReceive+0x26>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e18a      	b.n	8002ffe <HAL_SPI_TransmitReceive+0x33c>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cf0:	f7fe f8e8 	bl	8000ec4 <HAL_GetTick>
 8002cf4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002d06:	887b      	ldrh	r3, [r7, #2]
 8002d08:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d00f      	beq.n	8002d32 <HAL_SPI_TransmitReceive+0x70>
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d18:	d107      	bne.n	8002d2a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d103      	bne.n	8002d2a <HAL_SPI_TransmitReceive+0x68>
 8002d22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d003      	beq.n	8002d32 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d30:	e15b      	b.n	8002fea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_SPI_TransmitReceive+0x82>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_SPI_TransmitReceive+0x82>
 8002d3e:	887b      	ldrh	r3, [r7, #2]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d103      	bne.n	8002d4c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002d4a:	e14e      	b.n	8002fea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d003      	beq.n	8002d60 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2205      	movs	r2, #5
 8002d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	887a      	ldrh	r2, [r7, #2]
 8002d76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	887a      	ldrh	r2, [r7, #2]
 8002d82:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	887a      	ldrh	r2, [r7, #2]
 8002d88:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da0:	2b40      	cmp	r3, #64	; 0x40
 8002da2:	d007      	beq.n	8002db4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002db2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dbc:	d178      	bne.n	8002eb0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <HAL_SPI_TransmitReceive+0x10a>
 8002dc6:	8b7b      	ldrh	r3, [r7, #26]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d166      	bne.n	8002e9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	881a      	ldrh	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	1c9a      	adds	r2, r3, #2
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002df0:	e053      	b.n	8002e9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d11b      	bne.n	8002e38 <HAL_SPI_TransmitReceive+0x176>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d016      	beq.n	8002e38 <HAL_SPI_TransmitReceive+0x176>
 8002e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d113      	bne.n	8002e38 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	881a      	ldrh	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	1c9a      	adds	r2, r3, #2
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d119      	bne.n	8002e7a <HAL_SPI_TransmitReceive+0x1b8>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d014      	beq.n	8002e7a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	b292      	uxth	r2, r2
 8002e5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e62:	1c9a      	adds	r2, r3, #2
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e76:	2301      	movs	r3, #1
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e7a:	f7fe f823 	bl	8000ec4 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d807      	bhi.n	8002e9a <HAL_SPI_TransmitReceive+0x1d8>
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e90:	d003      	beq.n	8002e9a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e98:	e0a7      	b.n	8002fea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1a6      	bne.n	8002df2 <HAL_SPI_TransmitReceive+0x130>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1a1      	bne.n	8002df2 <HAL_SPI_TransmitReceive+0x130>
 8002eae:	e07c      	b.n	8002faa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_SPI_TransmitReceive+0x1fc>
 8002eb8:	8b7b      	ldrh	r3, [r7, #26]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d16b      	bne.n	8002f96 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	330c      	adds	r3, #12
 8002ec8:	7812      	ldrb	r2, [r2, #0]
 8002eca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ee4:	e057      	b.n	8002f96 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d11c      	bne.n	8002f2e <HAL_SPI_TransmitReceive+0x26c>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d017      	beq.n	8002f2e <HAL_SPI_TransmitReceive+0x26c>
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d114      	bne.n	8002f2e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	330c      	adds	r3, #12
 8002f0e:	7812      	ldrb	r2, [r2, #0]
 8002f10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d119      	bne.n	8002f70 <HAL_SPI_TransmitReceive+0x2ae>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d014      	beq.n	8002f70 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f70:	f7fd ffa8 	bl	8000ec4 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d803      	bhi.n	8002f88 <HAL_SPI_TransmitReceive+0x2c6>
 8002f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f86:	d102      	bne.n	8002f8e <HAL_SPI_TransmitReceive+0x2cc>
 8002f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d103      	bne.n	8002f96 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f94:	e029      	b.n	8002fea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1a2      	bne.n	8002ee6 <HAL_SPI_TransmitReceive+0x224>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d19d      	bne.n	8002ee6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f904 	bl	80031bc <SPI_EndRxTxTransaction>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d006      	beq.n	8002fc8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002fc6:	e010      	b.n	8002fea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10b      	bne.n	8002fe8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	e000      	b.n	8002fea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002fe8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ffa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3730      	adds	r7, #48	; 0x30
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	4613      	mov	r3, r2
 8003016:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003018:	f7fd ff54 	bl	8000ec4 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	4413      	add	r3, r2
 8003026:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003028:	f7fd ff4c 	bl	8000ec4 <HAL_GetTick>
 800302c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800302e:	4b39      	ldr	r3, [pc, #228]	; (8003114 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	015b      	lsls	r3, r3, #5
 8003034:	0d1b      	lsrs	r3, r3, #20
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	fb02 f303 	mul.w	r3, r2, r3
 800303c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800303e:	e054      	b.n	80030ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003046:	d050      	beq.n	80030ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003048:	f7fd ff3c 	bl	8000ec4 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	429a      	cmp	r2, r3
 8003056:	d902      	bls.n	800305e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d13d      	bne.n	80030da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800306c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003076:	d111      	bne.n	800309c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003080:	d004      	beq.n	800308c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308a:	d107      	bne.n	800309c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800309a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a4:	d10f      	bne.n	80030c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e017      	b.n	800310a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4013      	ands	r3, r2
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	bf0c      	ite	eq
 80030fa:	2301      	moveq	r3, #1
 80030fc:	2300      	movne	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	429a      	cmp	r2, r3
 8003106:	d19b      	bne.n	8003040 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3720      	adds	r7, #32
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000008 	.word	0x20000008

08003118 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af02      	add	r7, sp, #8
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800312c:	d111      	bne.n	8003152 <SPI_EndRxTransaction+0x3a>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003136:	d004      	beq.n	8003142 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003140:	d107      	bne.n	8003152 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003150:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800315a:	d117      	bne.n	800318c <SPI_EndRxTransaction+0x74>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003164:	d112      	bne.n	800318c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2200      	movs	r2, #0
 800316e:	2101      	movs	r1, #1
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f7ff ff49 	bl	8003008 <SPI_WaitFlagStateUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d01a      	beq.n	80031b2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003180:	f043 0220 	orr.w	r2, r3, #32
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e013      	b.n	80031b4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2200      	movs	r2, #0
 8003194:	2180      	movs	r1, #128	; 0x80
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f7ff ff36 	bl	8003008 <SPI_WaitFlagStateUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d007      	beq.n	80031b2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a6:	f043 0220 	orr.w	r2, r3, #32
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e000      	b.n	80031b4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2200      	movs	r2, #0
 80031d0:	2180      	movs	r1, #128	; 0x80
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f7ff ff18 	bl	8003008 <SPI_WaitFlagStateUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d007      	beq.n	80031ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e2:	f043 0220 	orr.w	r2, r3, #32
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e000      	b.n	80031f0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e03f      	b.n	800328a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fd fd40 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2224      	movs	r2, #36	; 0x24
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800323a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fbf7 	bl	8003a30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003250:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003260:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003270:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003292:	b480      	push	{r7}
 8003294:	b085      	sub	sp, #20
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	4613      	mov	r3, r2
 800329e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d130      	bne.n	800330e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <HAL_UART_Transmit_IT+0x26>
 80032b2:	88fb      	ldrh	r3, [r7, #6]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e029      	b.n	8003310 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_UART_Transmit_IT+0x38>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e022      	b.n	8003310 <HAL_UART_Transmit_IT+0x7e>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	88fa      	ldrh	r2, [r7, #6]
 80032dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	88fa      	ldrh	r2, [r7, #6]
 80032e2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2221      	movs	r2, #33	; 0x21
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003308:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	e000      	b.n	8003310 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800330e:	2302      	movs	r3, #2
  }
}
 8003310:	4618      	mov	r0, r3
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr

0800331a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b084      	sub	sp, #16
 800331e:	af00      	add	r7, sp, #0
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	4613      	mov	r3, r2
 8003326:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b20      	cmp	r3, #32
 8003332:	d11d      	bne.n	8003370 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d002      	beq.n	8003340 <HAL_UART_Receive_IT+0x26>
 800333a:	88fb      	ldrh	r3, [r7, #6]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e016      	b.n	8003372 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <HAL_UART_Receive_IT+0x38>
 800334e:	2302      	movs	r3, #2
 8003350:	e00f      	b.n	8003372 <HAL_UART_Receive_IT+0x58>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	461a      	mov	r2, r3
 8003364:	68b9      	ldr	r1, [r7, #8]
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f9d8 	bl	800371c <UART_Start_Receive_IT>
 800336c:	4603      	mov	r3, r0
 800336e:	e000      	b.n	8003372 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003370:	2302      	movs	r3, #2
  }
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08a      	sub	sp, #40	; 0x28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800339c:	2300      	movs	r3, #0
 800339e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10d      	bne.n	80033ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_UART_IRQHandler+0x52>
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 fa88 	bl	80038dc <UART_Receive_IT>
      return;
 80033cc:	e17b      	b.n	80036c6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80b1 	beq.w	8003538 <HAL_UART_IRQHandler+0x1bc>
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d105      	bne.n	80033ec <HAL_UART_IRQHandler+0x70>
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 80a6 	beq.w	8003538 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HAL_UART_IRQHandler+0x90>
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	f043 0201 	orr.w	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_UART_IRQHandler+0xb0>
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	f043 0202 	orr.w	r2, r3, #2
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HAL_UART_IRQHandler+0xd0>
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	f043 0204 	orr.w	r2, r3, #4
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00f      	beq.n	8003476 <HAL_UART_IRQHandler+0xfa>
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d104      	bne.n	800346a <HAL_UART_IRQHandler+0xee>
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f043 0208 	orr.w	r2, r3, #8
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 811e 	beq.w	80036bc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b00      	cmp	r3, #0
 8003488:	d007      	beq.n	800349a <HAL_UART_IRQHandler+0x11e>
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	f003 0320 	and.w	r3, r3, #32
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 fa21 	bl	80038dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	bf14      	ite	ne
 80034a8:	2301      	movne	r3, #1
 80034aa:	2300      	moveq	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d102      	bne.n	80034c2 <HAL_UART_IRQHandler+0x146>
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d031      	beq.n	8003526 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f963 	bl	800378e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d023      	beq.n	800351e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695a      	ldr	r2, [r3, #20]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d013      	beq.n	8003516 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	4a76      	ldr	r2, [pc, #472]	; (80036cc <HAL_UART_IRQHandler+0x350>)
 80034f4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fd fe58 	bl	80011b0 <HAL_DMA_Abort_IT>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d016      	beq.n	8003534 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003510:	4610      	mov	r0, r2
 8003512:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003514:	e00e      	b.n	8003534 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f8ec 	bl	80036f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800351c:	e00a      	b.n	8003534 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f8e8 	bl	80036f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003524:	e006      	b.n	8003534 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f8e4 	bl	80036f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003532:	e0c3      	b.n	80036bc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003534:	bf00      	nop
    return;
 8003536:	e0c1      	b.n	80036bc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353c:	2b01      	cmp	r3, #1
 800353e:	f040 80a1 	bne.w	8003684 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 809b 	beq.w	8003684 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 8095 	beq.w	8003684 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357a:	2b00      	cmp	r3, #0
 800357c:	d04e      	beq.n	800361c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003588:	8a3b      	ldrh	r3, [r7, #16]
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 8098 	beq.w	80036c0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003594:	8a3a      	ldrh	r2, [r7, #16]
 8003596:	429a      	cmp	r2, r3
 8003598:	f080 8092 	bcs.w	80036c0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	8a3a      	ldrh	r2, [r7, #16]
 80035a0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b20      	cmp	r3, #32
 80035aa:	d02b      	beq.n	8003604 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035ba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695a      	ldr	r2, [r3, #20]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035da:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0210 	bic.w	r2, r2, #16
 80035f8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fd fd9b 	bl	800113a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800360c:	b29b      	uxth	r3, r3
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	b29b      	uxth	r3, r3
 8003612:	4619      	mov	r1, r3
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f876 	bl	8003706 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800361a:	e051      	b.n	80036c0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003624:	b29b      	uxth	r3, r3
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d047      	beq.n	80036c4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003634:	8a7b      	ldrh	r3, [r7, #18]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d044      	beq.n	80036c4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003648:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695a      	ldr	r2, [r3, #20]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0201 	bic.w	r2, r2, #1
 8003658:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0210 	bic.w	r2, r2, #16
 8003676:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003678:	8a7b      	ldrh	r3, [r7, #18]
 800367a:	4619      	mov	r1, r3
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f842 	bl	8003706 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003682:	e01f      	b.n	80036c4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368a:	2b00      	cmp	r3, #0
 800368c:	d008      	beq.n	80036a0 <HAL_UART_IRQHandler+0x324>
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f8b8 	bl	800380e <UART_Transmit_IT>
    return;
 800369e:	e012      	b.n	80036c6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00d      	beq.n	80036c6 <HAL_UART_IRQHandler+0x34a>
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f8f9 	bl	80038ac <UART_EndTransmit_IT>
    return;
 80036ba:	e004      	b.n	80036c6 <HAL_UART_IRQHandler+0x34a>
    return;
 80036bc:	bf00      	nop
 80036be:	e002      	b.n	80036c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80036c0:	bf00      	nop
 80036c2:	e000      	b.n	80036c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80036c4:	bf00      	nop
  }
}
 80036c6:	3728      	adds	r7, #40	; 0x28
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	080037e7 	.word	0x080037e7

080036d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr

080036f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr

08003706 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	460b      	mov	r3, r1
 8003710:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr

0800371c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	4613      	mov	r3, r2
 8003728:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	88fa      	ldrh	r2, [r7, #6]
 8003734:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	88fa      	ldrh	r2, [r7, #6]
 800373a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2222      	movs	r2, #34	; 0x22
 8003746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003760:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695a      	ldr	r2, [r3, #20]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0201 	orr.w	r2, r2, #1
 8003770:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0220 	orr.w	r2, r2, #32
 8003780:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr

0800378e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037a4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695a      	ldr	r2, [r3, #20]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0201 	bic.w	r2, r2, #1
 80037b4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d107      	bne.n	80037ce <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0210 	bic.w	r2, r2, #16
 80037cc:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	631a      	str	r2, [r3, #48]	; 0x30
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr

080037e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f7ff ff77 	bl	80036f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003806:	bf00      	nop
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800380e:	b480      	push	{r7}
 8003810:	b085      	sub	sp, #20
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b21      	cmp	r3, #33	; 0x21
 8003820:	d13e      	bne.n	80038a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382a:	d114      	bne.n	8003856 <UART_Transmit_IT+0x48>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d110      	bne.n	8003856 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003848:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	1c9a      	adds	r2, r3, #2
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	621a      	str	r2, [r3, #32]
 8003854:	e008      	b.n	8003868 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	1c59      	adds	r1, r3, #1
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6211      	str	r1, [r2, #32]
 8003860:	781a      	ldrb	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29b      	uxth	r3, r3
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	4619      	mov	r1, r3
 8003876:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10f      	bne.n	800389c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800388a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800389a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800389c:	2300      	movs	r3, #0
 800389e:	e000      	b.n	80038a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038a0:	2302      	movs	r3, #2
  }
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr

080038ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff feff 	bl	80036d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b22      	cmp	r3, #34	; 0x22
 80038ee:	f040 8099 	bne.w	8003a24 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fa:	d117      	bne.n	800392c <UART_Receive_IT+0x50>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d113      	bne.n	800392c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003904:	2300      	movs	r3, #0
 8003906:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	b29b      	uxth	r3, r3
 8003916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800391a:	b29a      	uxth	r2, r3
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	1c9a      	adds	r2, r3, #2
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	629a      	str	r2, [r3, #40]	; 0x28
 800392a:	e026      	b.n	800397a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003932:	2300      	movs	r3, #0
 8003934:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800393e:	d007      	beq.n	8003950 <UART_Receive_IT+0x74>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10a      	bne.n	800395e <UART_Receive_IT+0x82>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d106      	bne.n	800395e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	b2da      	uxtb	r2, r3
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	701a      	strb	r2, [r3, #0]
 800395c:	e008      	b.n	8003970 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800396a:	b2da      	uxtb	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29b      	uxth	r3, r3
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	4619      	mov	r1, r3
 8003988:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800398a:	2b00      	cmp	r3, #0
 800398c:	d148      	bne.n	8003a20 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0220 	bic.w	r2, r2, #32
 800399c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695a      	ldr	r2, [r3, #20]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0201 	bic.w	r2, r2, #1
 80039bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d123      	bne.n	8003a16 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0210 	bic.w	r2, r2, #16
 80039e2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0310 	and.w	r3, r3, #16
 80039ee:	2b10      	cmp	r3, #16
 80039f0:	d10a      	bne.n	8003a08 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7ff fe79 	bl	8003706 <HAL_UARTEx_RxEventCallback>
 8003a14:	e002      	b.n	8003a1c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff fe63 	bl	80036e2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e002      	b.n	8003a26 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	e000      	b.n	8003a26 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003a24:	2302      	movs	r3, #2
  }
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a6a:	f023 030c 	bic.w	r3, r3, #12
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6812      	ldr	r2, [r2, #0]
 8003a72:	68b9      	ldr	r1, [r7, #8]
 8003a74:	430b      	orrs	r3, r1
 8003a76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a2c      	ldr	r2, [pc, #176]	; (8003b44 <UART_SetConfig+0x114>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d103      	bne.n	8003aa0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a98:	f7fe fe10 	bl	80026bc <HAL_RCC_GetPCLK2Freq>
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	e002      	b.n	8003aa6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003aa0:	f7fe fdf8 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 8003aa4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	009a      	lsls	r2, r3, #2
 8003ab0:	441a      	add	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abc:	4a22      	ldr	r2, [pc, #136]	; (8003b48 <UART_SetConfig+0x118>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	0119      	lsls	r1, r3, #4
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	009a      	lsls	r2, r3, #2
 8003ad0:	441a      	add	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003adc:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <UART_SetConfig+0x118>)
 8003ade:	fba3 0302 	umull	r0, r3, r3, r2
 8003ae2:	095b      	lsrs	r3, r3, #5
 8003ae4:	2064      	movs	r0, #100	; 0x64
 8003ae6:	fb00 f303 	mul.w	r3, r0, r3
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	3332      	adds	r3, #50	; 0x32
 8003af0:	4a15      	ldr	r2, [pc, #84]	; (8003b48 <UART_SetConfig+0x118>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003afc:	4419      	add	r1, r3
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	009a      	lsls	r2, r3, #2
 8003b08:	441a      	add	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <UART_SetConfig+0x118>)
 8003b16:	fba3 0302 	umull	r0, r3, r3, r2
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	2064      	movs	r0, #100	; 0x64
 8003b1e:	fb00 f303 	mul.w	r3, r0, r3
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	3332      	adds	r3, #50	; 0x32
 8003b28:	4a07      	ldr	r2, [pc, #28]	; (8003b48 <UART_SetConfig+0x118>)
 8003b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	f003 020f 	and.w	r2, r3, #15
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	440a      	add	r2, r1
 8003b3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b3c:	bf00      	nop
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40013800 	.word	0x40013800
 8003b48:	51eb851f 	.word	0x51eb851f

08003b4c <__libc_init_array>:
 8003b4c:	b570      	push	{r4, r5, r6, lr}
 8003b4e:	2600      	movs	r6, #0
 8003b50:	4d0c      	ldr	r5, [pc, #48]	; (8003b84 <__libc_init_array+0x38>)
 8003b52:	4c0d      	ldr	r4, [pc, #52]	; (8003b88 <__libc_init_array+0x3c>)
 8003b54:	1b64      	subs	r4, r4, r5
 8003b56:	10a4      	asrs	r4, r4, #2
 8003b58:	42a6      	cmp	r6, r4
 8003b5a:	d109      	bne.n	8003b70 <__libc_init_array+0x24>
 8003b5c:	f000 f822 	bl	8003ba4 <_init>
 8003b60:	2600      	movs	r6, #0
 8003b62:	4d0a      	ldr	r5, [pc, #40]	; (8003b8c <__libc_init_array+0x40>)
 8003b64:	4c0a      	ldr	r4, [pc, #40]	; (8003b90 <__libc_init_array+0x44>)
 8003b66:	1b64      	subs	r4, r4, r5
 8003b68:	10a4      	asrs	r4, r4, #2
 8003b6a:	42a6      	cmp	r6, r4
 8003b6c:	d105      	bne.n	8003b7a <__libc_init_array+0x2e>
 8003b6e:	bd70      	pop	{r4, r5, r6, pc}
 8003b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b74:	4798      	blx	r3
 8003b76:	3601      	adds	r6, #1
 8003b78:	e7ee      	b.n	8003b58 <__libc_init_array+0xc>
 8003b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b7e:	4798      	blx	r3
 8003b80:	3601      	adds	r6, #1
 8003b82:	e7f2      	b.n	8003b6a <__libc_init_array+0x1e>
 8003b84:	08003bf8 	.word	0x08003bf8
 8003b88:	08003bf8 	.word	0x08003bf8
 8003b8c:	08003bf8 	.word	0x08003bf8
 8003b90:	08003bfc 	.word	0x08003bfc

08003b94 <memset>:
 8003b94:	4603      	mov	r3, r0
 8003b96:	4402      	add	r2, r0
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d100      	bne.n	8003b9e <memset+0xa>
 8003b9c:	4770      	bx	lr
 8003b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003ba2:	e7f9      	b.n	8003b98 <memset+0x4>

08003ba4 <_init>:
 8003ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba6:	bf00      	nop
 8003ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003baa:	bc08      	pop	{r3}
 8003bac:	469e      	mov	lr, r3
 8003bae:	4770      	bx	lr

08003bb0 <_fini>:
 8003bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb2:	bf00      	nop
 8003bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bb6:	bc08      	pop	{r3}
 8003bb8:	469e      	mov	lr, r3
 8003bba:	4770      	bx	lr
