
NRF_and_LoRa_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  08003e3c  08003e3c  00013e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045f8  080045f8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080045f8  080045f8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045f8  080045f8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045f8  080045f8  000145f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045fc  080045fc  000145fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  20000014  08004614  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  08004614  00020588  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e771  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000231d  00000000  00000000  0002e7ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00030ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  00031728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017eb4  00000000  00000000  000322c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101bf  00000000  00000000  0004a17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086d61  00000000  00000000  0005a33b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e109c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003248  00000000  00000000  000e10f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e24 	.word	0x08003e24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08003e24 	.word	0x08003e24

0800014c <init_lora>:
void init_lora(void);
void test_uart(void);

//----------------------------------------------------------------------------------------
void init_lora(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	static uint8_t data[10] = {0};
	set_config_deep_sleep_mode();
 8000150:	f000 f862 	bl	8000218 <set_config_deep_sleep_mode>
	HAL_Delay(100);
 8000154:	2064      	movs	r0, #100	; 0x64
 8000156:	f000 ffeb 	bl	8001130 <HAL_Delay>

	data[0] = 0xC0;
 800015a:	4b1e      	ldr	r3, [pc, #120]	; (80001d4 <init_lora+0x88>)
 800015c:	22c0      	movs	r2, #192	; 0xc0
 800015e:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;		// Starting address
 8000160:	4b1c      	ldr	r3, [pc, #112]	; (80001d4 <init_lora+0x88>)
 8000162:	2200      	movs	r2, #0
 8000164:	705a      	strb	r2, [r3, #1]
	data[2] = 0x03;		// Length
 8000166:	4b1b      	ldr	r3, [pc, #108]	; (80001d4 <init_lora+0x88>)
 8000168:	2203      	movs	r2, #3
 800016a:	709a      	strb	r2, [r3, #2]
	data[3] = 0x12;		// 00H ADD H
 800016c:	4b19      	ldr	r3, [pc, #100]	; (80001d4 <init_lora+0x88>)
 800016e:	2212      	movs	r2, #18
 8000170:	70da      	strb	r2, [r3, #3]
	data[4] = 0x34;		// 01H ADD L
 8000172:	4b18      	ldr	r3, [pc, #96]	; (80001d4 <init_lora+0x88>)
 8000174:	2234      	movs	r2, #52	; 0x34
 8000176:	711a      	strb	r2, [r3, #4]
	data[5] = 0x62;		// 02H register ()
 8000178:	4b16      	ldr	r3, [pc, #88]	; (80001d4 <init_lora+0x88>)
 800017a:	2262      	movs	r2, #98	; 0x62
 800017c:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit_IT(&huart1, data, 6);
 800017e:	2206      	movs	r2, #6
 8000180:	4914      	ldr	r1, [pc, #80]	; (80001d4 <init_lora+0x88>)
 8000182:	4815      	ldr	r0, [pc, #84]	; (80001d8 <init_lora+0x8c>)
 8000184:	f003 f9c7 	bl	8003516 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 8000188:	2064      	movs	r0, #100	; 0x64
 800018a:	f000 ffd1 	bl	8001130 <HAL_Delay>

	memset(data, 0, sizeof(data));
 800018e:	220a      	movs	r2, #10
 8000190:	2100      	movs	r1, #0
 8000192:	4810      	ldr	r0, [pc, #64]	; (80001d4 <init_lora+0x88>)
 8000194:	f003 fe36 	bl	8003e04 <memset>
	// Set WOR Cycle
	data[0] = 0xC0;		// 0xC0 - Set register command
 8000198:	4b0e      	ldr	r3, [pc, #56]	; (80001d4 <init_lora+0x88>)
 800019a:	22c0      	movs	r2, #192	; 0xc0
 800019c:	701a      	strb	r2, [r3, #0]
	data[1] = 0x05;		// Starting address
 800019e:	4b0d      	ldr	r3, [pc, #52]	; (80001d4 <init_lora+0x88>)
 80001a0:	2205      	movs	r2, #5
 80001a2:	705a      	strb	r2, [r3, #1]
	data[2] = 0x01;		// Length
 80001a4:	4b0b      	ldr	r3, [pc, #44]	; (80001d4 <init_lora+0x88>)
 80001a6:	2201      	movs	r2, #1
 80001a8:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;		// set WOR Cycle 500ms
 80001aa:	4b0a      	ldr	r3, [pc, #40]	; (80001d4 <init_lora+0x88>)
 80001ac:	2200      	movs	r2, #0
 80001ae:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart1, data, 4);
 80001b0:	2204      	movs	r2, #4
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <init_lora+0x88>)
 80001b4:	4808      	ldr	r0, [pc, #32]	; (80001d8 <init_lora+0x8c>)
 80001b6:	f003 f9ae 	bl	8003516 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 80001ba:	2064      	movs	r0, #100	; 0x64
 80001bc:	f000 ffb8 	bl	8001130 <HAL_Delay>


	read_settings_from_module();
 80001c0:	f000 f80c 	bl	80001dc <read_settings_from_module>

	set_WOR_RX_mode();
 80001c4:	f000 f83a 	bl	800023c <set_WOR_RX_mode>

	HAL_Delay(100);
 80001c8:	2064      	movs	r0, #100	; 0x64
 80001ca:	f000 ffb1 	bl	8001130 <HAL_Delay>
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	20000030 	.word	0x20000030
 80001d8:	200004e8 	.word	0x200004e8

080001dc <read_settings_from_module>:
//-------------------------------------------------------------------------------------------------
void read_settings_from_module(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	// Turn on configuration mode
	set_config_deep_sleep_mode();
 80001e0:	f000 f81a 	bl	8000218 <set_config_deep_sleep_mode>
	HAL_Delay(10);
 80001e4:	200a      	movs	r0, #10
 80001e6:	f000 ffa3 	bl	8001130 <HAL_Delay>

	static uint8_t data[10] = {0};
	// Read module address, serial port, and airspeed COMMAND
	data[0] = 0xC1;
 80001ea:	4b09      	ldr	r3, [pc, #36]	; (8000210 <read_settings_from_module+0x34>)
 80001ec:	22c1      	movs	r2, #193	; 0xc1
 80001ee:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <read_settings_from_module+0x34>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	705a      	strb	r2, [r3, #1]
	data[2] = 0x08;
 80001f6:	4b06      	ldr	r3, [pc, #24]	; (8000210 <read_settings_from_module+0x34>)
 80001f8:	2208      	movs	r2, #8
 80001fa:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_IT(&huart1, data, 3);
 80001fc:	2203      	movs	r2, #3
 80001fe:	4904      	ldr	r1, [pc, #16]	; (8000210 <read_settings_from_module+0x34>)
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <read_settings_from_module+0x38>)
 8000202:	f003 f988 	bl	8003516 <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 8000206:	2064      	movs	r0, #100	; 0x64
 8000208:	f000 ff92 	bl	8001130 <HAL_Delay>

	// Return:
	// 0xC1 0x00 0x03 0x12 0x34 0x62
	// 0x12 0x34 - Adders 1234
	// 0x62 - 9600, 8n1 and 2,4 k air data rate
}
 800020c:	bf00      	nop
 800020e:	bd80      	pop	{r7, pc}
 8000210:	2000003c 	.word	0x2000003c
 8000214:	200004e8 	.word	0x200004e8

08000218 <set_config_deep_sleep_mode>:
//-------------------------------------------------------------------------------------------------
void set_config_deep_sleep_mode (void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	// Function use for go to deep sleep and configuration mode
	// Set M0 and M1 PINs
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_SET);
 800021c:	2201      	movs	r2, #1
 800021e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000222:	4805      	ldr	r0, [pc, #20]	; (8000238 <set_config_deep_sleep_mode+0x20>)
 8000224:	f001 fb01 	bl	800182a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 8000228:	2201      	movs	r2, #1
 800022a:	2101      	movs	r1, #1
 800022c:	4802      	ldr	r0, [pc, #8]	; (8000238 <set_config_deep_sleep_mode+0x20>)
 800022e:	f001 fafc 	bl	800182a <HAL_GPIO_WritePin>
}
 8000232:	bf00      	nop
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40010c00 	.word	0x40010c00

0800023c <set_WOR_RX_mode>:
//-------------------------------------------------------------------------------------------------
void set_WOR_RX_mode (void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	// Set M0 and M1 PINs in WOR Receiving mode
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_RESET);
 8000240:	2200      	movs	r2, #0
 8000242:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000246:	4805      	ldr	r0, [pc, #20]	; (800025c <set_WOR_RX_mode+0x20>)
 8000248:	f001 faef 	bl	800182a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 800024c:	2201      	movs	r2, #1
 800024e:	2101      	movs	r1, #1
 8000250:	4802      	ldr	r0, [pc, #8]	; (800025c <set_WOR_RX_mode+0x20>)
 8000252:	f001 faea 	bl	800182a <HAL_GPIO_WritePin>
}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40010c00 	.word	0x40010c00

08000260 <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000268:	4b0c      	ldr	r3, [pc, #48]	; (800029c <DelayMicro+0x3c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 800026e:	4b0b      	ldr	r3, [pc, #44]	; (800029c <DelayMicro+0x3c>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a0b      	ldr	r2, [pc, #44]	; (80002a0 <DelayMicro+0x40>)
 8000274:	fba2 2303 	umull	r2, r3, r2, r3
 8000278:	0ddb      	lsrs	r3, r3, #23
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	fb02 f303 	mul.w	r3, r2, r3
 8000280:	607b      	str	r3, [r7, #4]
	while (micros--);
 8000282:	bf00      	nop
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	1e5a      	subs	r2, r3, #1
 8000288:	607a      	str	r2, [r7, #4]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d1fa      	bne.n	8000284 <DelayMicro+0x24>
}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	3714      	adds	r7, #20
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000008 	.word	0x20000008
 80002a0:	ffa71ee7 	.word	0xffa71ee7

080002a4 <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b086      	sub	sp, #24
 80002a8:	af02      	add	r7, sp, #8
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 80002ae:	2300      	movs	r3, #0
 80002b0:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 80002b2:	2200      	movs	r2, #0
 80002b4:	2110      	movs	r1, #16
 80002b6:	4813      	ldr	r0, [pc, #76]	; (8000304 <NRF24_ReadReg+0x60>)
 80002b8:	f001 fab7 	bl	800182a <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 80002bc:	f107 020f 	add.w	r2, r7, #15
 80002c0:	1df9      	adds	r1, r7, #7
 80002c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	2301      	movs	r3, #1
 80002ca:	480f      	ldr	r0, [pc, #60]	; (8000308 <NRF24_ReadReg+0x64>)
 80002cc:	f002 fe3b 	bl	8002f46 <HAL_SPI_TransmitReceive>
  if (addr!=STATUS_NRF)
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	2b07      	cmp	r3, #7
 80002d4:	d00c      	beq.n	80002f0 <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 80002d6:	23ff      	movs	r3, #255	; 0xff
 80002d8:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 80002da:	f107 020f 	add.w	r2, r7, #15
 80002de:	f107 010e 	add.w	r1, r7, #14
 80002e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	2301      	movs	r3, #1
 80002ea:	4807      	ldr	r0, [pc, #28]	; (8000308 <NRF24_ReadReg+0x64>)
 80002ec:	f002 fe2b 	bl	8002f46 <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 80002f0:	2201      	movs	r2, #1
 80002f2:	2110      	movs	r1, #16
 80002f4:	4803      	ldr	r0, [pc, #12]	; (8000304 <NRF24_ReadReg+0x60>)
 80002f6:	f001 fa98 	bl	800182a <HAL_GPIO_WritePin>
  return dt;
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	40010800 	.word	0x40010800
 8000308:	2000052c 	.word	0x2000052c

0800030c <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	460a      	mov	r2, r1
 8000316:	71fb      	strb	r3, [r7, #7]
 8000318:	4613      	mov	r3, r2
 800031a:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	f043 0320 	orr.w	r3, r3, #32
 8000322:	b2db      	uxtb	r3, r3
 8000324:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000326:	2200      	movs	r2, #0
 8000328:	2110      	movs	r1, #16
 800032a:	480d      	ldr	r0, [pc, #52]	; (8000360 <NRF24_WriteReg+0x54>)
 800032c:	f001 fa7d 	bl	800182a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000330:	1df9      	adds	r1, r7, #7
 8000332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000336:	2201      	movs	r2, #1
 8000338:	480a      	ldr	r0, [pc, #40]	; (8000364 <NRF24_WriteReg+0x58>)
 800033a:	f002 fbb7 	bl	8002aac <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 800033e:	1db9      	adds	r1, r7, #6
 8000340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000344:	2201      	movs	r2, #1
 8000346:	4807      	ldr	r0, [pc, #28]	; (8000364 <NRF24_WriteReg+0x58>)
 8000348:	f002 fbb0 	bl	8002aac <HAL_SPI_Transmit>
  CS_OFF;
 800034c:	2201      	movs	r2, #1
 800034e:	2110      	movs	r1, #16
 8000350:	4803      	ldr	r0, [pc, #12]	; (8000360 <NRF24_WriteReg+0x54>)
 8000352:	f001 fa6a 	bl	800182a <HAL_GPIO_WritePin>
}
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40010800 	.word	0x40010800
 8000364:	2000052c 	.word	0x2000052c

08000368 <NRF24_Read_Buf>:
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
  CS_OFF;
}
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	6039      	str	r1, [r7, #0]
 8000372:	71fb      	strb	r3, [r7, #7]
 8000374:	4613      	mov	r3, r2
 8000376:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 8000378:	2200      	movs	r2, #0
 800037a:	2110      	movs	r1, #16
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <NRF24_Read_Buf+0x4c>)
 800037e:	f001 fa54 	bl	800182a <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000382:	1df9      	adds	r1, r7, #7
 8000384:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000388:	2201      	movs	r2, #1
 800038a:	480b      	ldr	r0, [pc, #44]	; (80003b8 <NRF24_Read_Buf+0x50>)
 800038c:	f002 fb8e 	bl	8002aac <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 8000390:	79bb      	ldrb	r3, [r7, #6]
 8000392:	b29a      	uxth	r2, r3
 8000394:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000398:	6839      	ldr	r1, [r7, #0]
 800039a:	4807      	ldr	r0, [pc, #28]	; (80003b8 <NRF24_Read_Buf+0x50>)
 800039c:	f002 fcc2 	bl	8002d24 <HAL_SPI_Receive>
  CS_OFF;
 80003a0:	2201      	movs	r2, #1
 80003a2:	2110      	movs	r1, #16
 80003a4:	4803      	ldr	r0, [pc, #12]	; (80003b4 <NRF24_Read_Buf+0x4c>)
 80003a6:	f001 fa40 	bl	800182a <HAL_GPIO_WritePin>
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	40010800 	.word	0x40010800
 80003b8:	2000052c 	.word	0x2000052c

080003bc <IRQ_Callback>:
{
	NRF24L01_Receive();
}
//----------------------------------------------------------------------------------------
void IRQ_Callback(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 80003c2:	2301      	movs	r3, #1
 80003c4:	71fb      	strb	r3, [r7, #7]
	uint16_t dt=0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80003ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ce:	4814      	ldr	r0, [pc, #80]	; (8000420 <IRQ_Callback+0x64>)
 80003d0:	f001 fa43 	bl	800185a <HAL_GPIO_TogglePin>

	DelayMicro(10);
 80003d4:	200a      	movs	r0, #10
 80003d6:	f7ff ff43 	bl	8000260 <DelayMicro>

	status = NRF24_ReadReg(STATUS_NRF);
 80003da:	2007      	movs	r0, #7
 80003dc:	f7ff ff62 	bl	80002a4 <NRF24_ReadReg>
 80003e0:	4603      	mov	r3, r0
 80003e2:	71fb      	strb	r3, [r7, #7]
	if(status & 0x40)									    //	Flag: Data ready in FIFO  (Check RX_DR flag)
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d013      	beq.n	8000416 <IRQ_Callback+0x5a>
	{
		pipe = (status>>1) & 0x07;
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	085b      	lsrs	r3, r3, #1
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	f003 0307 	and.w	r3, r3, #7
 80003f8:	b2da      	uxtb	r2, r3
 80003fa:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <IRQ_Callback+0x68>)
 80003fc:	701a      	strb	r2, [r3, #0]
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 80003fe:	220a      	movs	r2, #10
 8000400:	4909      	ldr	r1, [pc, #36]	; (8000428 <IRQ_Callback+0x6c>)
 8000402:	2061      	movs	r0, #97	; 0x61
 8000404:	f7ff ffb0 	bl	8000368 <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS_NRF, 0x40);					// For turn down interrupt in nrf module
 8000408:	2140      	movs	r1, #64	; 0x40
 800040a:	2007      	movs	r0, #7
 800040c:	f7ff ff7e 	bl	800030c <NRF24_WriteReg>
		rx_flag = 1;
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <IRQ_Callback+0x70>)
 8000412:	2201      	movs	r2, #1
 8000414:	701a      	strb	r2, [r3, #0]
	}
}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40011000 	.word	0x40011000
 8000424:	20000053 	.word	0x20000053
 8000428:	20000048 	.word	0x20000048
 800042c:	20000052 	.word	0x20000052

08000430 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af04      	add	r7, sp, #16
 8000436:	4603      	mov	r3, r0
 8000438:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800043a:	230a      	movs	r3, #10
 800043c:	9302      	str	r3, [sp, #8]
 800043e:	2301      	movs	r3, #1
 8000440:	9301      	str	r3, [sp, #4]
 8000442:	1dfb      	adds	r3, r7, #7
 8000444:	9300      	str	r3, [sp, #0]
 8000446:	2301      	movs	r3, #1
 8000448:	2200      	movs	r2, #0
 800044a:	2178      	movs	r1, #120	; 0x78
 800044c:	4803      	ldr	r0, [pc, #12]	; (800045c <ssd1306_WriteCommand+0x2c>)
 800044e:	f001 fb79 	bl	8001b44 <HAL_I2C_Mem_Write>
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	20000494 	.word	0x20000494

08000460 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8000464:	2064      	movs	r0, #100	; 0x64
 8000466:	f000 fe63 	bl	8001130 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 800046a:	20ae      	movs	r0, #174	; 0xae
 800046c:	f7ff ffe0 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000470:	2020      	movs	r0, #32
 8000472:	f7ff ffdd 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000476:	2010      	movs	r0, #16
 8000478:	f7ff ffda 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800047c:	20b0      	movs	r0, #176	; 0xb0
 800047e:	f7ff ffd7 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000482:	20c8      	movs	r0, #200	; 0xc8
 8000484:	f7ff ffd4 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8000488:	2000      	movs	r0, #0
 800048a:	f7ff ffd1 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800048e:	2010      	movs	r0, #16
 8000490:	f7ff ffce 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8000494:	2040      	movs	r0, #64	; 0x40
 8000496:	f7ff ffcb 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 800049a:	2081      	movs	r0, #129	; 0x81
 800049c:	f7ff ffc8 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80004a0:	20ff      	movs	r0, #255	; 0xff
 80004a2:	f7ff ffc5 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80004a6:	20a1      	movs	r0, #161	; 0xa1
 80004a8:	f7ff ffc2 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80004ac:	20a6      	movs	r0, #166	; 0xa6
 80004ae:	f7ff ffbf 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80004b2:	20a8      	movs	r0, #168	; 0xa8
 80004b4:	f7ff ffbc 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80004b8:	203f      	movs	r0, #63	; 0x3f
 80004ba:	f7ff ffb9 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80004be:	20a4      	movs	r0, #164	; 0xa4
 80004c0:	f7ff ffb6 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80004c4:	20d3      	movs	r0, #211	; 0xd3
 80004c6:	f7ff ffb3 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80004ca:	2000      	movs	r0, #0
 80004cc:	f7ff ffb0 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80004d0:	20d5      	movs	r0, #213	; 0xd5
 80004d2:	f7ff ffad 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80004d6:	20f0      	movs	r0, #240	; 0xf0
 80004d8:	f7ff ffaa 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80004dc:	20d9      	movs	r0, #217	; 0xd9
 80004de:	f7ff ffa7 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80004e2:	2022      	movs	r0, #34	; 0x22
 80004e4:	f7ff ffa4 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 80004e8:	20da      	movs	r0, #218	; 0xda
 80004ea:	f7ff ffa1 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 80004ee:	2012      	movs	r0, #18
 80004f0:	f7ff ff9e 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 80004f4:	20db      	movs	r0, #219	; 0xdb
 80004f6:	f7ff ff9b 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80004fa:	2020      	movs	r0, #32
 80004fc:	f7ff ff98 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000500:	208d      	movs	r0, #141	; 0x8d
 8000502:	f7ff ff95 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8000506:	2014      	movs	r0, #20
 8000508:	f7ff ff92 	bl	8000430 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800050c:	20af      	movs	r0, #175	; 0xaf
 800050e:	f7ff ff8f 	bl	8000430 <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 8000512:	2000      	movs	r0, #0
 8000514:	f000 f810 	bl	8000538 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8000518:	f000 f830 	bl	800057c <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <ssd1306_Init+0xd4>)
 800051e:	2200      	movs	r2, #0
 8000520:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000522:	4b04      	ldr	r3, [pc, #16]	; (8000534 <ssd1306_Init+0xd4>)
 8000524:	2200      	movs	r2, #0
 8000526:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8000528:	4b02      	ldr	r3, [pc, #8]	; (8000534 <ssd1306_Init+0xd4>)
 800052a:	2201      	movs	r2, #1
 800052c:	715a      	strb	r2, [r3, #5]

	return 1;
 800052e:	2301      	movs	r3, #1
}
 8000530:	4618      	mov	r0, r3
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000454 	.word	0x20000454

08000538 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	e00d      	b.n	8000564 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d101      	bne.n	8000552 <ssd1306_Fill+0x1a>
 800054e:	2100      	movs	r1, #0
 8000550:	e000      	b.n	8000554 <ssd1306_Fill+0x1c>
 8000552:	21ff      	movs	r1, #255	; 0xff
 8000554:	4a08      	ldr	r2, [pc, #32]	; (8000578 <ssd1306_Fill+0x40>)
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	4413      	add	r3, r2
 800055a:	460a      	mov	r2, r1
 800055c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	3301      	adds	r3, #1
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800056a:	d3ed      	bcc.n	8000548 <ssd1306_Fill+0x10>
	}
}
 800056c:	bf00      	nop
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	20000054 	.word	0x20000054

0800057c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8000582:	2300      	movs	r3, #0
 8000584:	71fb      	strb	r3, [r7, #7]
 8000586:	e01d      	b.n	80005c4 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	3b50      	subs	r3, #80	; 0x50
 800058c:	b2db      	uxtb	r3, r3
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ff4e 	bl	8000430 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff ff4b 	bl	8000430 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 800059a:	2010      	movs	r0, #16
 800059c:	f7ff ff48 	bl	8000430 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	01db      	lsls	r3, r3, #7
 80005a4:	4a0b      	ldr	r2, [pc, #44]	; (80005d4 <ssd1306_UpdateScreen+0x58>)
 80005a6:	4413      	add	r3, r2
 80005a8:	2264      	movs	r2, #100	; 0x64
 80005aa:	9202      	str	r2, [sp, #8]
 80005ac:	2280      	movs	r2, #128	; 0x80
 80005ae:	9201      	str	r2, [sp, #4]
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2301      	movs	r3, #1
 80005b4:	2240      	movs	r2, #64	; 0x40
 80005b6:	2178      	movs	r1, #120	; 0x78
 80005b8:	4807      	ldr	r0, [pc, #28]	; (80005d8 <ssd1306_UpdateScreen+0x5c>)
 80005ba:	f001 fac3 	bl	8001b44 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	3301      	adds	r3, #1
 80005c2:	71fb      	strb	r3, [r7, #7]
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	2b07      	cmp	r3, #7
 80005c8:	d9de      	bls.n	8000588 <ssd1306_UpdateScreen+0xc>
	}
}
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000054 	.word	0x20000054
 80005d8:	20000494 	.word	0x20000494

080005dc <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	460b      	mov	r3, r1
 80005e8:	71bb      	strb	r3, [r7, #6]
 80005ea:	4613      	mov	r3, r2
 80005ec:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80005ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	db48      	blt.n	8000688 <ssd1306_DrawPixel+0xac>
 80005f6:	79bb      	ldrb	r3, [r7, #6]
 80005f8:	2b3f      	cmp	r3, #63	; 0x3f
 80005fa:	d845      	bhi.n	8000688 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 80005fc:	4b25      	ldr	r3, [pc, #148]	; (8000694 <ssd1306_DrawPixel+0xb8>)
 80005fe:	791b      	ldrb	r3, [r3, #4]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d006      	beq.n	8000612 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8000604:	797b      	ldrb	r3, [r7, #5]
 8000606:	2b00      	cmp	r3, #0
 8000608:	bf0c      	ite	eq
 800060a:	2301      	moveq	r3, #1
 800060c:	2300      	movne	r3, #0
 800060e:	b2db      	uxtb	r3, r3
 8000610:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 8000612:	797b      	ldrb	r3, [r7, #5]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d11a      	bne.n	800064e <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000618:	79fa      	ldrb	r2, [r7, #7]
 800061a:	79bb      	ldrb	r3, [r7, #6]
 800061c:	08db      	lsrs	r3, r3, #3
 800061e:	b2d8      	uxtb	r0, r3
 8000620:	4603      	mov	r3, r0
 8000622:	01db      	lsls	r3, r3, #7
 8000624:	4413      	add	r3, r2
 8000626:	4a1c      	ldr	r2, [pc, #112]	; (8000698 <ssd1306_DrawPixel+0xbc>)
 8000628:	5cd3      	ldrb	r3, [r2, r3]
 800062a:	b25a      	sxtb	r2, r3
 800062c:	79bb      	ldrb	r3, [r7, #6]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	2101      	movs	r1, #1
 8000634:	fa01 f303 	lsl.w	r3, r1, r3
 8000638:	b25b      	sxtb	r3, r3
 800063a:	4313      	orrs	r3, r2
 800063c:	b259      	sxtb	r1, r3
 800063e:	79fa      	ldrb	r2, [r7, #7]
 8000640:	4603      	mov	r3, r0
 8000642:	01db      	lsls	r3, r3, #7
 8000644:	4413      	add	r3, r2
 8000646:	b2c9      	uxtb	r1, r1
 8000648:	4a13      	ldr	r2, [pc, #76]	; (8000698 <ssd1306_DrawPixel+0xbc>)
 800064a:	54d1      	strb	r1, [r2, r3]
 800064c:	e01d      	b.n	800068a <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800064e:	79fa      	ldrb	r2, [r7, #7]
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	08db      	lsrs	r3, r3, #3
 8000654:	b2d8      	uxtb	r0, r3
 8000656:	4603      	mov	r3, r0
 8000658:	01db      	lsls	r3, r3, #7
 800065a:	4413      	add	r3, r2
 800065c:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <ssd1306_DrawPixel+0xbc>)
 800065e:	5cd3      	ldrb	r3, [r2, r3]
 8000660:	b25a      	sxtb	r2, r3
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	f003 0307 	and.w	r3, r3, #7
 8000668:	2101      	movs	r1, #1
 800066a:	fa01 f303 	lsl.w	r3, r1, r3
 800066e:	b25b      	sxtb	r3, r3
 8000670:	43db      	mvns	r3, r3
 8000672:	b25b      	sxtb	r3, r3
 8000674:	4013      	ands	r3, r2
 8000676:	b259      	sxtb	r1, r3
 8000678:	79fa      	ldrb	r2, [r7, #7]
 800067a:	4603      	mov	r3, r0
 800067c:	01db      	lsls	r3, r3, #7
 800067e:	4413      	add	r3, r2
 8000680:	b2c9      	uxtb	r1, r1
 8000682:	4a05      	ldr	r2, [pc, #20]	; (8000698 <ssd1306_DrawPixel+0xbc>)
 8000684:	54d1      	strb	r1, [r2, r3]
 8000686:	e000      	b.n	800068a <ssd1306_DrawPixel+0xae>
		return;
 8000688:	bf00      	nop
	}
}
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	20000454 	.word	0x20000454
 8000698:	20000054 	.word	0x20000054

0800069c <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b089      	sub	sp, #36	; 0x24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4604      	mov	r4, r0
 80006a4:	1d38      	adds	r0, r7, #4
 80006a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80006aa:	461a      	mov	r2, r3
 80006ac:	4623      	mov	r3, r4
 80006ae:	73fb      	strb	r3, [r7, #15]
 80006b0:	4613      	mov	r3, r2
 80006b2:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80006b4:	4b38      	ldr	r3, [pc, #224]	; (8000798 <ssd1306_WriteChar+0xfc>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	793b      	ldrb	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	2b7f      	cmp	r3, #127	; 0x7f
 80006c0:	dc06      	bgt.n	80006d0 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80006c2:	4b35      	ldr	r3, [pc, #212]	; (8000798 <ssd1306_WriteChar+0xfc>)
 80006c4:	885b      	ldrh	r3, [r3, #2]
 80006c6:	461a      	mov	r2, r3
 80006c8:	797b      	ldrb	r3, [r7, #5]
 80006ca:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80006cc:	2b3f      	cmp	r3, #63	; 0x3f
 80006ce:	dd01      	ble.n	80006d4 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	e05d      	b.n	8000790 <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]
 80006d8:	e04c      	b.n	8000774 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	3b20      	subs	r3, #32
 80006e0:	7979      	ldrb	r1, [r7, #5]
 80006e2:	fb01 f303 	mul.w	r3, r1, r3
 80006e6:	4619      	mov	r1, r3
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	440b      	add	r3, r1
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	4413      	add	r3, r2
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]
 80006f8:	e034      	b.n	8000764 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 80006fa:	697a      	ldr	r2, [r7, #20]
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000706:	2b00      	cmp	r3, #0
 8000708:	d012      	beq.n	8000730 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <ssd1306_WriteChar+0xfc>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	4413      	add	r3, r2
 8000716:	b2d8      	uxtb	r0, r3
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <ssd1306_WriteChar+0xfc>)
 800071a:	885b      	ldrh	r3, [r3, #2]
 800071c:	b2da      	uxtb	r2, r3
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	b2db      	uxtb	r3, r3
 8000722:	4413      	add	r3, r2
 8000724:	b2db      	uxtb	r3, r3
 8000726:	7bba      	ldrb	r2, [r7, #14]
 8000728:	4619      	mov	r1, r3
 800072a:	f7ff ff57 	bl	80005dc <ssd1306_DrawPixel>
 800072e:	e016      	b.n	800075e <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000730:	4b19      	ldr	r3, [pc, #100]	; (8000798 <ssd1306_WriteChar+0xfc>)
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	b2da      	uxtb	r2, r3
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	4413      	add	r3, r2
 800073c:	b2d8      	uxtb	r0, r3
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <ssd1306_WriteChar+0xfc>)
 8000740:	885b      	ldrh	r3, [r3, #2]
 8000742:	b2da      	uxtb	r2, r3
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	4413      	add	r3, r2
 800074a:	b2d9      	uxtb	r1, r3
 800074c:	7bbb      	ldrb	r3, [r7, #14]
 800074e:	2b00      	cmp	r3, #0
 8000750:	bf0c      	ite	eq
 8000752:	2301      	moveq	r3, #1
 8000754:	2300      	movne	r3, #0
 8000756:	b2db      	uxtb	r3, r3
 8000758:	461a      	mov	r2, r3
 800075a:	f7ff ff3f 	bl	80005dc <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	3301      	adds	r3, #1
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	793b      	ldrb	r3, [r7, #4]
 8000766:	461a      	mov	r2, r3
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	4293      	cmp	r3, r2
 800076c:	d3c5      	bcc.n	80006fa <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3301      	adds	r3, #1
 8000772:	61fb      	str	r3, [r7, #28]
 8000774:	797b      	ldrb	r3, [r7, #5]
 8000776:	461a      	mov	r2, r3
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	4293      	cmp	r3, r2
 800077c:	d3ad      	bcc.n	80006da <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <ssd1306_WriteChar+0xfc>)
 8000780:	881a      	ldrh	r2, [r3, #0]
 8000782:	793b      	ldrb	r3, [r7, #4]
 8000784:	b29b      	uxth	r3, r3
 8000786:	4413      	add	r3, r2
 8000788:	b29a      	uxth	r2, r3
 800078a:	4b03      	ldr	r3, [pc, #12]	; (8000798 <ssd1306_WriteChar+0xfc>)
 800078c:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3724      	adds	r7, #36	; 0x24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd90      	pop	{r4, r7, pc}
 8000798:	20000454 	.word	0x20000454

0800079c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	1d38      	adds	r0, r7, #4
 80007a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80007aa:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 80007ac:	e012      	b.n	80007d4 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	7818      	ldrb	r0, [r3, #0]
 80007b2:	78fb      	ldrb	r3, [r7, #3]
 80007b4:	1d3a      	adds	r2, r7, #4
 80007b6:	ca06      	ldmia	r2, {r1, r2}
 80007b8:	f7ff ff70 	bl	800069c <ssd1306_WriteChar>
 80007bc:	4603      	mov	r3, r0
 80007be:	461a      	mov	r2, r3
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d002      	beq.n	80007ce <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	e008      	b.n	80007e0 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	3301      	adds	r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
	while (*str)
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d1e8      	bne.n	80007ae <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	781b      	ldrb	r3, [r3, #0]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	460a      	mov	r2, r1
 80007f2:	71fb      	strb	r3, [r7, #7]
 80007f4:	4613      	mov	r3, r2
 80007f6:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <ssd1306_SetCursor+0x2c>)
 80007fe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000800:	79bb      	ldrb	r3, [r7, #6]
 8000802:	b29a      	uxth	r2, r3
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <ssd1306_SetCursor+0x2c>)
 8000806:	805a      	strh	r2, [r3, #2]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000454 	.word	0x20000454

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b094      	sub	sp, #80	; 0x50
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081e:	f000 fc25 	bl	800106c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000822:	f000 f8d5 	bl	80009d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 f9a7 	bl	8000b78 <MX_GPIO_Init>
  MX_I2C1_Init();
 800082a:	f000 f917 	bl	8000a5c <MX_I2C1_Init>
  MX_SPI1_Init();
 800082e:	f000 f943 	bl	8000ab8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000832:	f000 f977 	bl	8000b24 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Init interrupp
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	2025      	movs	r0, #37	; 0x25
 800083c:	f000 fd73 	bl	8001326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000840:	2025      	movs	r0, #37	; 0x25
 8000842:	f000 fd8c 	bl	800135e <HAL_NVIC_EnableIRQ>

  // OLED init
  ssd1306_Init();
 8000846:	f7ff fe0b 	bl	8000460 <ssd1306_Init>
  ssd1306_Fill(Black);
 800084a:	2000      	movs	r0, #0
 800084c:	f7ff fe74 	bl	8000538 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8000850:	f7ff fe94 	bl	800057c <ssd1306_UpdateScreen>
  NRF24_ini();
  read_config_registers();
#endif

#if lora
  ssd1306_SetCursor(0, 0);
 8000854:	2100      	movs	r1, #0
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff ffc6 	bl	80007e8 <ssd1306_SetCursor>
  char test_main[50] = {0};
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	222e      	movs	r2, #46	; 0x2e
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f003 facb 	bl	8003e04 <memset>
  strcpy(test_main, "LoRa RX");
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	4a4c      	ldr	r2, [pc, #304]	; (80009a4 <main+0x18c>)
 8000874:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000878:	e883 0003 	stmia.w	r3, {r0, r1}
  ssd1306_WriteString(test_main,  Font_7x10, White);
 800087c:	4a4a      	ldr	r2, [pc, #296]	; (80009a8 <main+0x190>)
 800087e:	f107 0010 	add.w	r0, r7, #16
 8000882:	2301      	movs	r3, #1
 8000884:	ca06      	ldmia	r2, {r1, r2}
 8000886:	f7ff ff89 	bl	800079c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800088a:	f7ff fe77 	bl	800057c <ssd1306_UpdateScreen>

  HAL_Delay(1000);
 800088e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000892:	f000 fc4d 	bl	8001130 <HAL_Delay>
  init_lora();
 8000896:	f7ff fc59 	bl	800014c <init_lora>

  ssd1306_SetCursor(65, 0);
 800089a:	2100      	movs	r1, #0
 800089c:	2041      	movs	r0, #65	; 0x41
 800089e:	f7ff ffa3 	bl	80007e8 <ssd1306_SetCursor>
  strcpy(test_main, "Ready");
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	4a41      	ldr	r2, [pc, #260]	; (80009ac <main+0x194>)
 80008a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008ac:	6018      	str	r0, [r3, #0]
 80008ae:	3304      	adds	r3, #4
 80008b0:	8019      	strh	r1, [r3, #0]
  ssd1306_WriteString(test_main,  Font_7x10, White);
 80008b2:	4a3d      	ldr	r2, [pc, #244]	; (80009a8 <main+0x190>)
 80008b4:	f107 0010 	add.w	r0, r7, #16
 80008b8:	2301      	movs	r3, #1
 80008ba:	ca06      	ldmia	r2, {r1, r2}
 80008bc:	f7ff ff6e 	bl	800079c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80008c0:	f7ff fe5c 	bl	800057c <ssd1306_UpdateScreen>

  ssd1306_SetCursor(0, 16);
 80008c4:	2110      	movs	r1, #16
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff ff8e 	bl	80007e8 <ssd1306_SetCursor>
  strcpy(test_main, "RX data: ");
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	4a37      	ldr	r2, [pc, #220]	; (80009b0 <main+0x198>)
 80008d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80008d4:	c303      	stmia	r3!, {r0, r1}
 80008d6:	801a      	strh	r2, [r3, #0]
  ssd1306_WriteString(test_main,  Font_7x10, White);
 80008d8:	4a33      	ldr	r2, [pc, #204]	; (80009a8 <main+0x190>)
 80008da:	f107 0010 	add.w	r0, r7, #16
 80008de:	2301      	movs	r3, #1
 80008e0:	ca06      	ldmia	r2, {r1, r2}
 80008e2:	f7ff ff5b 	bl	800079c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80008e6:	f7ff fe49 	bl	800057c <ssd1306_UpdateScreen>

  HAL_UART_Receive_IT(&huart1, str, 1);
 80008ea:	2201      	movs	r2, #1
 80008ec:	4931      	ldr	r1, [pc, #196]	; (80009b4 <main+0x19c>)
 80008ee:	4832      	ldr	r0, [pc, #200]	; (80009b8 <main+0x1a0>)
 80008f0:	f002 fe55 	bl	800359e <HAL_UART_Receive_IT>
	  nrf_communication_test();      // Main function LORA
	#endif

	#if lora

	  if(flag_command_received == true)			// If data is ready
 80008f4:	4b31      	ldr	r3, [pc, #196]	; (80009bc <main+0x1a4>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d033      	beq.n	8000964 <main+0x14c>
	  {
		// Data received

		//   Print on OLED
		char clearn_array[10] = "         ";
 80008fc:	4a30      	ldr	r2, [pc, #192]	; (80009c0 <main+0x1a8>)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	ca07      	ldmia	r2, {r0, r1, r2}
 8000902:	c303      	stmia	r3!, {r0, r1}
 8000904:	801a      	strh	r2, [r3, #0]
		ssd1306_SetCursor(60, 16);
 8000906:	2110      	movs	r1, #16
 8000908:	203c      	movs	r0, #60	; 0x3c
 800090a:	f7ff ff6d 	bl	80007e8 <ssd1306_SetCursor>

		ssd1306_WriteString(clearn_array,  Font_7x10, White);
 800090e:	4a26      	ldr	r2, [pc, #152]	; (80009a8 <main+0x190>)
 8000910:	1d38      	adds	r0, r7, #4
 8000912:	2301      	movs	r3, #1
 8000914:	ca06      	ldmia	r2, {r1, r2}
 8000916:	f7ff ff41 	bl	800079c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800091a:	f7ff fe2f 	bl	800057c <ssd1306_UpdateScreen>

		ssd1306_SetCursor(60, 16);
 800091e:	2110      	movs	r1, #16
 8000920:	203c      	movs	r0, #60	; 0x3c
 8000922:	f7ff ff61 	bl	80007e8 <ssd1306_SetCursor>
		strcpy(test_main, uart_rx_data);
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	4926      	ldr	r1, [pc, #152]	; (80009c4 <main+0x1ac>)
 800092c:	4618      	mov	r0, r3
 800092e:	f003 fa71 	bl	8003e14 <strcpy>

		ssd1306_WriteString(test_main,  Font_7x10, White);
 8000932:	4a1d      	ldr	r2, [pc, #116]	; (80009a8 <main+0x190>)
 8000934:	f107 0010 	add.w	r0, r7, #16
 8000938:	2301      	movs	r3, #1
 800093a:	ca06      	ldmia	r2, {r1, r2}
 800093c:	f7ff ff2e 	bl	800079c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000940:	f7ff fe1c 	bl	800057c <ssd1306_UpdateScreen>

		HAL_Delay(100);
 8000944:	2064      	movs	r0, #100	; 0x64
 8000946:	f000 fbf3 	bl	8001130 <HAL_Delay>
		memset(uart_rx_data, 0, sizeof(uart_rx_data));
 800094a:	2232      	movs	r2, #50	; 0x32
 800094c:	2100      	movs	r1, #0
 800094e:	481d      	ldr	r0, [pc, #116]	; (80009c4 <main+0x1ac>)
 8000950:	f003 fa58 	bl	8003e04 <memset>
		flag_command_received = false;
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <main+0x1a4>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]

		HAL_UART_Receive_IT(&huart1, str, 1);		// Start interrupt again
 800095a:	2201      	movs	r2, #1
 800095c:	4915      	ldr	r1, [pc, #84]	; (80009b4 <main+0x19c>)
 800095e:	4816      	ldr	r0, [pc, #88]	; (80009b8 <main+0x1a0>)
 8000960:	f002 fe1d 	bl	800359e <HAL_UART_Receive_IT>
	  }


	  // Buttons test	 /////////////////////////////
	  if(HAL_GPIO_ReadPin(GPIOB, SW1_Pin) == 0)		// if button pressed
 8000964:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000968:	4817      	ldr	r0, [pc, #92]	; (80009c8 <main+0x1b0>)
 800096a:	f000 ff47 	bl	80017fc <HAL_GPIO_ReadPin>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d101      	bne.n	8000978 <main+0x160>
	  {
	      int g = 99;
 8000974:	2363      	movs	r3, #99	; 0x63
 8000976:	64fb      	str	r3, [r7, #76]	; 0x4c
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, SW2_Pin) == 0)		// if button pressed
 8000978:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800097c:	4812      	ldr	r0, [pc, #72]	; (80009c8 <main+0x1b0>)
 800097e:	f000 ff3d 	bl	80017fc <HAL_GPIO_ReadPin>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d101      	bne.n	800098c <main+0x174>
	  {
	      int h = 99;
 8000988:	2363      	movs	r3, #99	; 0x63
 800098a:	64bb      	str	r3, [r7, #72]	; 0x48
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, SW3_Pin) == 0)		// if button pressed
 800098c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000990:	480e      	ldr	r0, [pc, #56]	; (80009cc <main+0x1b4>)
 8000992:	f000 ff33 	bl	80017fc <HAL_GPIO_ReadPin>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d1ab      	bne.n	80008f4 <main+0xdc>
	  {
		  int j = 99;
 800099c:	2363      	movs	r3, #99	; 0x63
 800099e:	647b      	str	r3, [r7, #68]	; 0x44
	  if(flag_command_received == true)			// If data is ready
 80009a0:	e7a8      	b.n	80008f4 <main+0xdc>
 80009a2:	bf00      	nop
 80009a4:	08003e3c 	.word	0x08003e3c
 80009a8:	20000000 	.word	0x20000000
 80009ac:	08003e44 	.word	0x08003e44
 80009b0:	08003e4c 	.word	0x08003e4c
 80009b4:	20000490 	.word	0x20000490
 80009b8:	200004e8 	.word	0x200004e8
 80009bc:	20000491 	.word	0x20000491
 80009c0:	08003e58 	.word	0x08003e58
 80009c4:	2000045c 	.word	0x2000045c
 80009c8:	40010c00 	.word	0x40010c00
 80009cc:	40010800 	.word	0x40010800

080009d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b090      	sub	sp, #64	; 0x40
 80009d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d6:	f107 0318 	add.w	r3, r7, #24
 80009da:	2228      	movs	r2, #40	; 0x28
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f003 fa10 	bl	8003e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a00:	2301      	movs	r3, #1
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a04:	2302      	movs	r3, #2
 8000a06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000a0e:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a14:	f107 0318 	add.w	r3, r7, #24
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 fba9 	bl	8002170 <HAL_RCC_OscConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a24:	f000 f9aa 	bl	8000d7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a28:	230f      	movs	r3, #15
 8000a2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2102      	movs	r1, #2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f001 fe14 	bl	8002670 <HAL_RCC_ClockConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a4e:	f000 f995 	bl	8000d7c <Error_Handler>
  }
}
 8000a52:	bf00      	nop
 8000a54:	3740      	adds	r7, #64	; 0x40
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a62:	4a13      	ldr	r2, [pc, #76]	; (8000ab0 <MX_I2C1_Init+0x54>)
 8000a64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a68:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <MX_I2C1_Init+0x58>)
 8000a6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_I2C1_Init+0x50>)
 8000a9a:	f000 ff0f 	bl	80018bc <HAL_I2C_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aa4:	f000 f96a 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000494 	.word	0x20000494
 8000ab0:	40005400 	.word	0x40005400
 8000ab4:	000186a0 	.word	0x000186a0

08000ab8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000abe:	4a18      	ldr	r2, [pc, #96]	; (8000b20 <MX_SPI1_Init+0x68>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000ac4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ac8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000aec:	2220      	movs	r2, #32
 8000aee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000b04:	220a      	movs	r2, #10
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000b0a:	f001 ff4b 	bl	80029a4 <HAL_SPI_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b14:	f000 f932 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	2000052c 	.word	0x2000052c
 8000b20:	40013000 	.word	0x40013000

08000b24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_USART1_UART_Init+0x4c>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <MX_USART1_UART_Init+0x50>)
 8000b2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <MX_USART1_UART_Init+0x4c>)
 8000b30:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_USART1_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_USART1_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <MX_USART1_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_USART1_UART_Init+0x4c>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <MX_USART1_UART_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_USART1_UART_Init+0x4c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_USART1_UART_Init+0x4c>)
 8000b5c:	f002 fc8e 	bl	800347c <HAL_UART_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b66:	f000 f909 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200004e8 	.word	0x200004e8
 8000b74:	40013800 	.word	0x40013800

08000b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 0310 	add.w	r3, r7, #16
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8c:	4b51      	ldr	r3, [pc, #324]	; (8000cd4 <MX_GPIO_Init+0x15c>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a50      	ldr	r2, [pc, #320]	; (8000cd4 <MX_GPIO_Init+0x15c>)
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b4e      	ldr	r3, [pc, #312]	; (8000cd4 <MX_GPIO_Init+0x15c>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0310 	and.w	r3, r3, #16
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba4:	4b4b      	ldr	r3, [pc, #300]	; (8000cd4 <MX_GPIO_Init+0x15c>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a4a      	ldr	r2, [pc, #296]	; (8000cd4 <MX_GPIO_Init+0x15c>)
 8000baa:	f043 0320 	orr.w	r3, r3, #32
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b48      	ldr	r3, [pc, #288]	; (8000cd4 <MX_GPIO_Init+0x15c>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0320 	and.w	r3, r3, #32
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	4b45      	ldr	r3, [pc, #276]	; (8000cd4 <MX_GPIO_Init+0x15c>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a44      	ldr	r2, [pc, #272]	; (8000cd4 <MX_GPIO_Init+0x15c>)
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b42      	ldr	r3, [pc, #264]	; (8000cd4 <MX_GPIO_Init+0x15c>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd4:	4b3f      	ldr	r3, [pc, #252]	; (8000cd4 <MX_GPIO_Init+0x15c>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a3e      	ldr	r2, [pc, #248]	; (8000cd4 <MX_GPIO_Init+0x15c>)
 8000bda:	f043 0308 	orr.w	r3, r3, #8
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b3c      	ldr	r3, [pc, #240]	; (8000cd4 <MX_GPIO_Init+0x15c>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0308 	and.w	r3, r3, #8
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf2:	4839      	ldr	r0, [pc, #228]	; (8000cd8 <MX_GPIO_Init+0x160>)
 8000bf4:	f000 fe19 	bl	800182a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2108      	movs	r1, #8
 8000bfc:	4837      	ldr	r0, [pc, #220]	; (8000cdc <MX_GPIO_Init+0x164>)
 8000bfe:	f000 fe14 	bl	800182a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	2110      	movs	r1, #16
 8000c06:	4835      	ldr	r0, [pc, #212]	; (8000cdc <MX_GPIO_Init+0x164>)
 8000c08:	f000 fe0f 	bl	800182a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f242 0101 	movw	r1, #8193	; 0x2001
 8000c12:	4833      	ldr	r0, [pc, #204]	; (8000ce0 <MX_GPIO_Init+0x168>)
 8000c14:	f000 fe09 	bl	800182a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2302      	movs	r3, #2
 8000c28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2a:	f107 0310 	add.w	r3, r7, #16
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4829      	ldr	r0, [pc, #164]	; (8000cd8 <MX_GPIO_Init+0x160>)
 8000c32:	f000 fc5f 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c36:	2304      	movs	r3, #4
 8000c38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <MX_GPIO_Init+0x16c>)
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4619      	mov	r1, r3
 8000c48:	4824      	ldr	r0, [pc, #144]	; (8000cdc <MX_GPIO_Init+0x164>)
 8000c4a:	f000 fc53 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000c4e:	2318      	movs	r3, #24
 8000c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	4619      	mov	r1, r3
 8000c64:	481d      	ldr	r0, [pc, #116]	; (8000cdc <MX_GPIO_Init+0x164>)
 8000c66:	f000 fc45 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 8000c6a:	f242 0301 	movw	r3, #8193	; 0x2001
 8000c6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7c:	f107 0310 	add.w	r3, r7, #16
 8000c80:	4619      	mov	r1, r3
 8000c82:	4817      	ldr	r0, [pc, #92]	; (8000ce0 <MX_GPIO_Init+0x168>)
 8000c84:	f000 fc36 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AUX_Pin SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = AUX_Pin|SW1_Pin|SW2_Pin;
 8000c88:	f24c 0302 	movw	r3, #49154	; 0xc002
 8000c8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 0310 	add.w	r3, r7, #16
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <MX_GPIO_Init+0x168>)
 8000c9e:	f000 fc29 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW3_Pin */
  GPIO_InitStruct.Pin = SW3_Pin;
 8000ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4809      	ldr	r0, [pc, #36]	; (8000cdc <MX_GPIO_Init+0x164>)
 8000cb8:	f000 fc1c 	bl	80014f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2008      	movs	r0, #8
 8000cc2:	f000 fb30 	bl	8001326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000cc6:	2008      	movs	r0, #8
 8000cc8:	f000 fb49 	bl	800135e <HAL_NVIC_EnableIRQ>

}
 8000ccc:	bf00      	nop
 8000cce:	3720      	adds	r7, #32
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40011000 	.word	0x40011000
 8000cdc:	40010800 	.word	0x40010800
 8000ce0:	40010c00 	.word	0x40010c00
 8000ce4:	10210000 	.word	0x10210000

08000ce8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//----------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_2)			// If detect External interrupt from PA2
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	2b04      	cmp	r3, #4
 8000cf6:	d102      	bne.n	8000cfe <HAL_GPIO_EXTI_Callback+0x16>
  {
    IRQ_Callback();					// Call Callback
 8000cf8:	f7ff fb60 	bl	80003bc <IRQ_Callback>
  }
  else
  {
    __NOP();
  }
}
 8000cfc:	e000      	b.n	8000d00 <HAL_GPIO_EXTI_Callback+0x18>
    __NOP();
 8000cfe:	bf00      	nop
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <HAL_UART_RxCpltCallback>:
//----------------------------------------------------------------------------------------
// If data received (Received 1 bytes)        Define in: HAL_UART_Receive_IT(&huart1, str, 1);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)											// Which uart generate Callback function
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a15      	ldr	r2, [pc, #84]	; (8000d68 <HAL_UART_RxCpltCallback+0x60>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d123      	bne.n	8000d60 <HAL_UART_RxCpltCallback+0x58>
	{
		if((str[0] == '\0') || (rx_data_counter >= sizeof(uart_rx_data)))   		// Detect '\0' Null or  data too long
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <HAL_UART_RxCpltCallback+0x64>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d003      	beq.n	8000d28 <HAL_UART_RxCpltCallback+0x20>
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_UART_RxCpltCallback+0x68>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b31      	cmp	r3, #49	; 0x31
 8000d26:	d906      	bls.n	8000d36 <HAL_UART_RxCpltCallback+0x2e>
		{
			flag_command_received = true;                          // Data is ready
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_UART_RxCpltCallback+0x6c>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
			rx_data_counter = 0;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <HAL_UART_RxCpltCallback+0x68>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
			rx_data_counter ++;
		}
	}
}
 8000d34:	e014      	b.n	8000d60 <HAL_UART_RxCpltCallback+0x58>
			flag_command_received = false;							// Receive data
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <HAL_UART_RxCpltCallback+0x6c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <HAL_UART_RxCpltCallback+0x68>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_UART_RxCpltCallback+0x64>)
 8000d44:	7819      	ldrb	r1, [r3, #0]
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <HAL_UART_RxCpltCallback+0x70>)
 8000d48:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4907      	ldr	r1, [pc, #28]	; (8000d6c <HAL_UART_RxCpltCallback+0x64>)
 8000d4e:	4806      	ldr	r0, [pc, #24]	; (8000d68 <HAL_UART_RxCpltCallback+0x60>)
 8000d50:	f002 fc25 	bl	800359e <HAL_UART_Receive_IT>
			rx_data_counter ++;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_UART_RxCpltCallback+0x68>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <HAL_UART_RxCpltCallback+0x68>)
 8000d5e:	701a      	strb	r2, [r3, #0]
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200004e8 	.word	0x200004e8
 8000d6c:	20000490 	.word	0x20000490
 8000d70:	20000492 	.word	0x20000492
 8000d74:	20000491 	.word	0x20000491
 8000d78:	2000045c 	.word	0x2000045c

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <Error_Handler+0x8>
	...

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_MspInit+0x5c>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <HAL_MspInit+0x5c>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6193      	str	r3, [r2, #24]
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_MspInit+0x5c>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <HAL_MspInit+0x5c>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <HAL_MspInit+0x5c>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db0:	61d3      	str	r3, [r2, #28]
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <HAL_MspInit+0x5c>)
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_MspInit+0x60>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <HAL_MspInit+0x60>)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010000 	.word	0x40010000

08000dec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a15      	ldr	r2, [pc, #84]	; (8000e5c <HAL_I2C_MspInit+0x70>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d123      	bne.n	8000e54 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <HAL_I2C_MspInit+0x74>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a13      	ldr	r2, [pc, #76]	; (8000e60 <HAL_I2C_MspInit+0x74>)
 8000e12:	f043 0308 	orr.w	r3, r3, #8
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <HAL_I2C_MspInit+0x74>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0308 	and.w	r3, r3, #8
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e24:	23c0      	movs	r3, #192	; 0xc0
 8000e26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e28:	2312      	movs	r3, #18
 8000e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	4619      	mov	r1, r3
 8000e36:	480b      	ldr	r0, [pc, #44]	; (8000e64 <HAL_I2C_MspInit+0x78>)
 8000e38:	f000 fb5c 	bl	80014f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_I2C_MspInit+0x74>)
 8000e3e:	69db      	ldr	r3, [r3, #28]
 8000e40:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <HAL_I2C_MspInit+0x74>)
 8000e42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e46:	61d3      	str	r3, [r2, #28]
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <HAL_I2C_MspInit+0x74>)
 8000e4a:	69db      	ldr	r3, [r3, #28]
 8000e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e54:	bf00      	nop
 8000e56:	3720      	adds	r7, #32
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010c00 	.word	0x40010c00

08000e68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a1b      	ldr	r2, [pc, #108]	; (8000ef0 <HAL_SPI_MspInit+0x88>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d12f      	bne.n	8000ee8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <HAL_SPI_MspInit+0x8c>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a19      	ldr	r2, [pc, #100]	; (8000ef4 <HAL_SPI_MspInit+0x8c>)
 8000e8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_SPI_MspInit+0x8c>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_SPI_MspInit+0x8c>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <HAL_SPI_MspInit+0x8c>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	6193      	str	r3, [r2, #24]
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_SPI_MspInit+0x8c>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000eb8:	23a0      	movs	r3, #160	; 0xa0
 8000eba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <HAL_SPI_MspInit+0x90>)
 8000ecc:	f000 fb12 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ed0:	2340      	movs	r3, #64	; 0x40
 8000ed2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <HAL_SPI_MspInit+0x90>)
 8000ee4:	f000 fb06 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ee8:	bf00      	nop
 8000eea:	3720      	adds	r7, #32
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40013000 	.word	0x40013000
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010800 	.word	0x40010800

08000efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a20      	ldr	r2, [pc, #128]	; (8000f98 <HAL_UART_MspInit+0x9c>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d139      	bne.n	8000f90 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <HAL_UART_MspInit+0xa0>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a1e      	ldr	r2, [pc, #120]	; (8000f9c <HAL_UART_MspInit+0xa0>)
 8000f22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <HAL_UART_MspInit+0xa0>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <HAL_UART_MspInit+0xa0>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a18      	ldr	r2, [pc, #96]	; (8000f9c <HAL_UART_MspInit+0xa0>)
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <HAL_UART_MspInit+0xa0>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480f      	ldr	r0, [pc, #60]	; (8000fa0 <HAL_UART_MspInit+0xa4>)
 8000f62:	f000 fac7 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4809      	ldr	r0, [pc, #36]	; (8000fa0 <HAL_UART_MspInit+0xa4>)
 8000f7c:	f000 faba 	bl	80014f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2101      	movs	r1, #1
 8000f84:	2025      	movs	r0, #37	; 0x25
 8000f86:	f000 f9ce 	bl	8001326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f8a:	2025      	movs	r0, #37	; 0x25
 8000f8c:	f000 f9e7 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40013800 	.word	0x40013800
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010800 	.word	0x40010800

08000fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <NMI_Handler+0x4>

08000faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <HardFault_Handler+0x4>

08000fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <MemManage_Handler+0x4>

08000fb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr

08000fce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr

08000fe6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fea:	f000 f885 	bl	80010f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000ff6:	2004      	movs	r0, #4
 8000ff8:	f000 fc48 	bl	800188c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <USART1_IRQHandler+0x10>)
 8001006:	f002 fafb 	bl	8003600 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200004e8 	.word	0x200004e8

08001014 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001022:	490d      	ldr	r1, [pc, #52]	; (8001058 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001024:	4a0d      	ldr	r2, [pc, #52]	; (800105c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001038:	4c0a      	ldr	r4, [pc, #40]	; (8001064 <LoopFillZerobss+0x22>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001046:	f7ff ffe5 	bl	8001014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104a:	f002 feb7 	bl	8003dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800104e:	f7ff fbe3 	bl	8000818 <main>
  bx lr
 8001052:	4770      	bx	lr
  ldr r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001058:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800105c:	08004600 	.word	0x08004600
  ldr r2, =_sbss
 8001060:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001064:	20000588 	.word	0x20000588

08001068 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC1_2_IRQHandler>
	...

0800106c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_Init+0x28>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_Init+0x28>)
 8001076:	f043 0310 	orr.w	r3, r3, #16
 800107a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107c:	2003      	movs	r0, #3
 800107e:	f000 f947 	bl	8001310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001082:	2000      	movs	r0, #0
 8001084:	f000 f808 	bl	8001098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001088:	f7ff fe7e 	bl	8000d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40022000 	.word	0x40022000

08001098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x54>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_InitTick+0x58>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f95f 	bl	800137a <HAL_SYSTICK_Config>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00e      	b.n	80010e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	d80a      	bhi.n	80010e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010cc:	2200      	movs	r2, #0
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010d4:	f000 f927 	bl	8001326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <HAL_InitTick+0x5c>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	e000      	b.n	80010e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000010 	.word	0x20000010
 80010f4:	2000000c 	.word	0x2000000c

080010f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_IncTick+0x1c>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <HAL_IncTick+0x20>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a03      	ldr	r2, [pc, #12]	; (8001118 <HAL_IncTick+0x20>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	20000010 	.word	0x20000010
 8001118:	20000584 	.word	0x20000584

0800111c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b02      	ldr	r3, [pc, #8]	; (800112c <HAL_GetTick+0x10>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	20000584 	.word	0x20000584

08001130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff fff0 	bl	800111c <HAL_GetTick>
 800113c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001148:	d005      	beq.n	8001156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_Delay+0x44>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001156:	bf00      	nop
 8001158:	f7ff ffe0 	bl	800111c <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	429a      	cmp	r2, r3
 8001166:	d8f7      	bhi.n	8001158 <HAL_Delay+0x28>
  {
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000010 	.word	0x20000010

08001178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011aa:	4a04      	ldr	r2, [pc, #16]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	60d3      	str	r3, [r2, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	db0b      	blt.n	8001206 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	f003 021f 	and.w	r2, r3, #31
 80011f4:	4906      	ldr	r1, [pc, #24]	; (8001210 <__NVIC_EnableIRQ+0x34>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	095b      	lsrs	r3, r3, #5
 80011fc:	2001      	movs	r0, #1
 80011fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100

08001214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	db0a      	blt.n	800123e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	490c      	ldr	r1, [pc, #48]	; (8001260 <__NVIC_SetPriority+0x4c>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	0112      	lsls	r2, r2, #4
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	440b      	add	r3, r1
 8001238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800123c:	e00a      	b.n	8001254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4908      	ldr	r1, [pc, #32]	; (8001264 <__NVIC_SetPriority+0x50>)
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	3b04      	subs	r3, #4
 800124c:	0112      	lsls	r2, r2, #4
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	440b      	add	r3, r1
 8001252:	761a      	strb	r2, [r3, #24]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000e100 	.word	0xe000e100
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f1c3 0307 	rsb	r3, r3, #7
 8001282:	2b04      	cmp	r3, #4
 8001284:	bf28      	it	cs
 8001286:	2304      	movcs	r3, #4
 8001288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3304      	adds	r3, #4
 800128e:	2b06      	cmp	r3, #6
 8001290:	d902      	bls.n	8001298 <NVIC_EncodePriority+0x30>
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3b03      	subs	r3, #3
 8001296:	e000      	b.n	800129a <NVIC_EncodePriority+0x32>
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	401a      	ands	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	43d9      	mvns	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	4313      	orrs	r3, r2
         );
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3724      	adds	r7, #36	; 0x24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012dc:	d301      	bcc.n	80012e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012de:	2301      	movs	r3, #1
 80012e0:	e00f      	b.n	8001302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <SysTick_Config+0x40>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ea:	210f      	movs	r1, #15
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012f0:	f7ff ff90 	bl	8001214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <SysTick_Config+0x40>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <SysTick_Config+0x40>)
 80012fc:	2207      	movs	r2, #7
 80012fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	e000e010 	.word	0xe000e010

08001310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff2d 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001326:	b580      	push	{r7, lr}
 8001328:	b086      	sub	sp, #24
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001338:	f7ff ff42 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 800133c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68b9      	ldr	r1, [r7, #8]
 8001342:	6978      	ldr	r0, [r7, #20]
 8001344:	f7ff ff90 	bl	8001268 <NVIC_EncodePriority>
 8001348:	4602      	mov	r2, r0
 800134a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff5f 	bl	8001214 <__NVIC_SetPriority>
}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff35 	bl	80011dc <__NVIC_EnableIRQ>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffa2 	bl	80012cc <SysTick_Config>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001392:	b480      	push	{r7}
 8001394:	b085      	sub	sp, #20
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d008      	beq.n	80013ba <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2204      	movs	r2, #4
 80013ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e020      	b.n	80013fc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 020e 	bic.w	r2, r2, #14
 80013c8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0201 	bic.w	r2, r2, #1
 80013d8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e2:	2101      	movs	r1, #1
 80013e4:	fa01 f202 	lsl.w	r2, r1, r2
 80013e8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
	...

08001408 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800141a:	2b02      	cmp	r3, #2
 800141c:	d005      	beq.n	800142a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2204      	movs	r2, #4
 8001422:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	73fb      	strb	r3, [r7, #15]
 8001428:	e051      	b.n	80014ce <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 020e 	bic.w	r2, r2, #14
 8001438:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0201 	bic.w	r2, r2, #1
 8001448:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a22      	ldr	r2, [pc, #136]	; (80014d8 <HAL_DMA_Abort_IT+0xd0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d029      	beq.n	80014a8 <HAL_DMA_Abort_IT+0xa0>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a20      	ldr	r2, [pc, #128]	; (80014dc <HAL_DMA_Abort_IT+0xd4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d022      	beq.n	80014a4 <HAL_DMA_Abort_IT+0x9c>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a1f      	ldr	r2, [pc, #124]	; (80014e0 <HAL_DMA_Abort_IT+0xd8>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d01a      	beq.n	800149e <HAL_DMA_Abort_IT+0x96>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <HAL_DMA_Abort_IT+0xdc>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d012      	beq.n	8001498 <HAL_DMA_Abort_IT+0x90>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a1c      	ldr	r2, [pc, #112]	; (80014e8 <HAL_DMA_Abort_IT+0xe0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d00a      	beq.n	8001492 <HAL_DMA_Abort_IT+0x8a>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a1a      	ldr	r2, [pc, #104]	; (80014ec <HAL_DMA_Abort_IT+0xe4>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d102      	bne.n	800148c <HAL_DMA_Abort_IT+0x84>
 8001486:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800148a:	e00e      	b.n	80014aa <HAL_DMA_Abort_IT+0xa2>
 800148c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001490:	e00b      	b.n	80014aa <HAL_DMA_Abort_IT+0xa2>
 8001492:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001496:	e008      	b.n	80014aa <HAL_DMA_Abort_IT+0xa2>
 8001498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149c:	e005      	b.n	80014aa <HAL_DMA_Abort_IT+0xa2>
 800149e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a2:	e002      	b.n	80014aa <HAL_DMA_Abort_IT+0xa2>
 80014a4:	2310      	movs	r3, #16
 80014a6:	e000      	b.n	80014aa <HAL_DMA_Abort_IT+0xa2>
 80014a8:	2301      	movs	r3, #1
 80014aa:	4a11      	ldr	r2, [pc, #68]	; (80014f0 <HAL_DMA_Abort_IT+0xe8>)
 80014ac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	4798      	blx	r3
    } 
  }
  return status;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40020008 	.word	0x40020008
 80014dc:	4002001c 	.word	0x4002001c
 80014e0:	40020030 	.word	0x40020030
 80014e4:	40020044 	.word	0x40020044
 80014e8:	40020058 	.word	0x40020058
 80014ec:	4002006c 	.word	0x4002006c
 80014f0:	40020000 	.word	0x40020000

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b08b      	sub	sp, #44	; 0x2c
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001506:	e169      	b.n	80017dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001508:	2201      	movs	r2, #1
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	429a      	cmp	r2, r3
 8001522:	f040 8158 	bne.w	80017d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4a9a      	ldr	r2, [pc, #616]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d05e      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
 8001530:	4a98      	ldr	r2, [pc, #608]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d875      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 8001536:	4a98      	ldr	r2, [pc, #608]	; (8001798 <HAL_GPIO_Init+0x2a4>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d058      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
 800153c:	4a96      	ldr	r2, [pc, #600]	; (8001798 <HAL_GPIO_Init+0x2a4>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d86f      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 8001542:	4a96      	ldr	r2, [pc, #600]	; (800179c <HAL_GPIO_Init+0x2a8>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d052      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
 8001548:	4a94      	ldr	r2, [pc, #592]	; (800179c <HAL_GPIO_Init+0x2a8>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d869      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 800154e:	4a94      	ldr	r2, [pc, #592]	; (80017a0 <HAL_GPIO_Init+0x2ac>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d04c      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
 8001554:	4a92      	ldr	r2, [pc, #584]	; (80017a0 <HAL_GPIO_Init+0x2ac>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d863      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 800155a:	4a92      	ldr	r2, [pc, #584]	; (80017a4 <HAL_GPIO_Init+0x2b0>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d046      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
 8001560:	4a90      	ldr	r2, [pc, #576]	; (80017a4 <HAL_GPIO_Init+0x2b0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d85d      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 8001566:	2b12      	cmp	r3, #18
 8001568:	d82a      	bhi.n	80015c0 <HAL_GPIO_Init+0xcc>
 800156a:	2b12      	cmp	r3, #18
 800156c:	d859      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 800156e:	a201      	add	r2, pc, #4	; (adr r2, 8001574 <HAL_GPIO_Init+0x80>)
 8001570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001574:	080015ef 	.word	0x080015ef
 8001578:	080015c9 	.word	0x080015c9
 800157c:	080015db 	.word	0x080015db
 8001580:	0800161d 	.word	0x0800161d
 8001584:	08001623 	.word	0x08001623
 8001588:	08001623 	.word	0x08001623
 800158c:	08001623 	.word	0x08001623
 8001590:	08001623 	.word	0x08001623
 8001594:	08001623 	.word	0x08001623
 8001598:	08001623 	.word	0x08001623
 800159c:	08001623 	.word	0x08001623
 80015a0:	08001623 	.word	0x08001623
 80015a4:	08001623 	.word	0x08001623
 80015a8:	08001623 	.word	0x08001623
 80015ac:	08001623 	.word	0x08001623
 80015b0:	08001623 	.word	0x08001623
 80015b4:	08001623 	.word	0x08001623
 80015b8:	080015d1 	.word	0x080015d1
 80015bc:	080015e5 	.word	0x080015e5
 80015c0:	4a79      	ldr	r2, [pc, #484]	; (80017a8 <HAL_GPIO_Init+0x2b4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d013      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015c6:	e02c      	b.n	8001622 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	623b      	str	r3, [r7, #32]
          break;
 80015ce:	e029      	b.n	8001624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	3304      	adds	r3, #4
 80015d6:	623b      	str	r3, [r7, #32]
          break;
 80015d8:	e024      	b.n	8001624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	3308      	adds	r3, #8
 80015e0:	623b      	str	r3, [r7, #32]
          break;
 80015e2:	e01f      	b.n	8001624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	330c      	adds	r3, #12
 80015ea:	623b      	str	r3, [r7, #32]
          break;
 80015ec:	e01a      	b.n	8001624 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015f6:	2304      	movs	r3, #4
 80015f8:	623b      	str	r3, [r7, #32]
          break;
 80015fa:	e013      	b.n	8001624 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d105      	bne.n	8001610 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001604:	2308      	movs	r3, #8
 8001606:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	611a      	str	r2, [r3, #16]
          break;
 800160e:	e009      	b.n	8001624 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001610:	2308      	movs	r3, #8
 8001612:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69fa      	ldr	r2, [r7, #28]
 8001618:	615a      	str	r2, [r3, #20]
          break;
 800161a:	e003      	b.n	8001624 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
          break;
 8001620:	e000      	b.n	8001624 <HAL_GPIO_Init+0x130>
          break;
 8001622:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	2bff      	cmp	r3, #255	; 0xff
 8001628:	d801      	bhi.n	800162e <HAL_GPIO_Init+0x13a>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	e001      	b.n	8001632 <HAL_GPIO_Init+0x13e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3304      	adds	r3, #4
 8001632:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2bff      	cmp	r3, #255	; 0xff
 8001638:	d802      	bhi.n	8001640 <HAL_GPIO_Init+0x14c>
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	e002      	b.n	8001646 <HAL_GPIO_Init+0x152>
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	3b08      	subs	r3, #8
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	210f      	movs	r1, #15
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	401a      	ands	r2, r3
 8001658:	6a39      	ldr	r1, [r7, #32]
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	fa01 f303 	lsl.w	r3, r1, r3
 8001660:	431a      	orrs	r2, r3
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 80b1 	beq.w	80017d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001674:	4b4d      	ldr	r3, [pc, #308]	; (80017ac <HAL_GPIO_Init+0x2b8>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a4c      	ldr	r2, [pc, #304]	; (80017ac <HAL_GPIO_Init+0x2b8>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b4a      	ldr	r3, [pc, #296]	; (80017ac <HAL_GPIO_Init+0x2b8>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800168c:	4a48      	ldr	r2, [pc, #288]	; (80017b0 <HAL_GPIO_Init+0x2bc>)
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	089b      	lsrs	r3, r3, #2
 8001692:	3302      	adds	r3, #2
 8001694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001698:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	220f      	movs	r2, #15
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	4013      	ands	r3, r2
 80016ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a40      	ldr	r2, [pc, #256]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d013      	beq.n	80016e0 <HAL_GPIO_Init+0x1ec>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a3f      	ldr	r2, [pc, #252]	; (80017b8 <HAL_GPIO_Init+0x2c4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d00d      	beq.n	80016dc <HAL_GPIO_Init+0x1e8>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a3e      	ldr	r2, [pc, #248]	; (80017bc <HAL_GPIO_Init+0x2c8>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d007      	beq.n	80016d8 <HAL_GPIO_Init+0x1e4>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a3d      	ldr	r2, [pc, #244]	; (80017c0 <HAL_GPIO_Init+0x2cc>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d101      	bne.n	80016d4 <HAL_GPIO_Init+0x1e0>
 80016d0:	2303      	movs	r3, #3
 80016d2:	e006      	b.n	80016e2 <HAL_GPIO_Init+0x1ee>
 80016d4:	2304      	movs	r3, #4
 80016d6:	e004      	b.n	80016e2 <HAL_GPIO_Init+0x1ee>
 80016d8:	2302      	movs	r3, #2
 80016da:	e002      	b.n	80016e2 <HAL_GPIO_Init+0x1ee>
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <HAL_GPIO_Init+0x1ee>
 80016e0:	2300      	movs	r3, #0
 80016e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e4:	f002 0203 	and.w	r2, r2, #3
 80016e8:	0092      	lsls	r2, r2, #2
 80016ea:	4093      	lsls	r3, r2
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016f2:	492f      	ldr	r1, [pc, #188]	; (80017b0 <HAL_GPIO_Init+0x2bc>)
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	089b      	lsrs	r3, r3, #2
 80016f8:	3302      	adds	r3, #2
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d006      	beq.n	800171a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800170c:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <HAL_GPIO_Init+0x2d0>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	492c      	ldr	r1, [pc, #176]	; (80017c4 <HAL_GPIO_Init+0x2d0>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	600b      	str	r3, [r1, #0]
 8001718:	e006      	b.n	8001728 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800171a:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <HAL_GPIO_Init+0x2d0>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	43db      	mvns	r3, r3
 8001722:	4928      	ldr	r1, [pc, #160]	; (80017c4 <HAL_GPIO_Init+0x2d0>)
 8001724:	4013      	ands	r3, r2
 8001726:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d006      	beq.n	8001742 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001734:	4b23      	ldr	r3, [pc, #140]	; (80017c4 <HAL_GPIO_Init+0x2d0>)
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	4922      	ldr	r1, [pc, #136]	; (80017c4 <HAL_GPIO_Init+0x2d0>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
 8001740:	e006      	b.n	8001750 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001742:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <HAL_GPIO_Init+0x2d0>)
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	43db      	mvns	r3, r3
 800174a:	491e      	ldr	r1, [pc, #120]	; (80017c4 <HAL_GPIO_Init+0x2d0>)
 800174c:	4013      	ands	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d006      	beq.n	800176a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_GPIO_Init+0x2d0>)
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	4918      	ldr	r1, [pc, #96]	; (80017c4 <HAL_GPIO_Init+0x2d0>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	608b      	str	r3, [r1, #8]
 8001768:	e006      	b.n	8001778 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <HAL_GPIO_Init+0x2d0>)
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	43db      	mvns	r3, r3
 8001772:	4914      	ldr	r1, [pc, #80]	; (80017c4 <HAL_GPIO_Init+0x2d0>)
 8001774:	4013      	ands	r3, r2
 8001776:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d021      	beq.n	80017c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <HAL_GPIO_Init+0x2d0>)
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	490e      	ldr	r1, [pc, #56]	; (80017c4 <HAL_GPIO_Init+0x2d0>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	60cb      	str	r3, [r1, #12]
 8001790:	e021      	b.n	80017d6 <HAL_GPIO_Init+0x2e2>
 8001792:	bf00      	nop
 8001794:	10320000 	.word	0x10320000
 8001798:	10310000 	.word	0x10310000
 800179c:	10220000 	.word	0x10220000
 80017a0:	10210000 	.word	0x10210000
 80017a4:	10120000 	.word	0x10120000
 80017a8:	10110000 	.word	0x10110000
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010000 	.word	0x40010000
 80017b4:	40010800 	.word	0x40010800
 80017b8:	40010c00 	.word	0x40010c00
 80017bc:	40011000 	.word	0x40011000
 80017c0:	40011400 	.word	0x40011400
 80017c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <HAL_GPIO_Init+0x304>)
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	4909      	ldr	r1, [pc, #36]	; (80017f8 <HAL_GPIO_Init+0x304>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	3301      	adds	r3, #1
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	fa22 f303 	lsr.w	r3, r2, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f47f ae8e 	bne.w	8001508 <HAL_GPIO_Init+0x14>
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	372c      	adds	r7, #44	; 0x2c
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	40010400 	.word	0x40010400

080017fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	887b      	ldrh	r3, [r7, #2]
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d002      	beq.n	800181a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001814:	2301      	movs	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
 8001818:	e001      	b.n	800181e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	460b      	mov	r3, r1
 8001834:	807b      	strh	r3, [r7, #2]
 8001836:	4613      	mov	r3, r2
 8001838:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800183a:	787b      	ldrb	r3, [r7, #1]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001840:	887a      	ldrh	r2, [r7, #2]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001846:	e003      	b.n	8001850 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001848:	887b      	ldrh	r3, [r7, #2]
 800184a:	041a      	lsls	r2, r3, #16
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	611a      	str	r2, [r3, #16]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr

0800185a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800185a:	b480      	push	{r7}
 800185c:	b085      	sub	sp, #20
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800186c:	887a      	ldrh	r2, [r7, #2]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4013      	ands	r3, r2
 8001872:	041a      	lsls	r2, r3, #16
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	43d9      	mvns	r1, r3
 8001878:	887b      	ldrh	r3, [r7, #2]
 800187a:	400b      	ands	r3, r1
 800187c:	431a      	orrs	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	611a      	str	r2, [r3, #16]
}
 8001882:	bf00      	nop
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	4013      	ands	r3, r2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d006      	beq.n	80018b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018a2:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018a4:	88fb      	ldrh	r3, [r7, #6]
 80018a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fa1c 	bl	8000ce8 <HAL_GPIO_EXTI_Callback>
  }
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40010400 	.word	0x40010400

080018bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e12b      	b.n	8001b26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d106      	bne.n	80018e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff fa82 	bl	8000dec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2224      	movs	r2, #36	; 0x24
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0201 	bic.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800190e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800191e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001920:	f000 fffa 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 8001924:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4a81      	ldr	r2, [pc, #516]	; (8001b30 <HAL_I2C_Init+0x274>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d807      	bhi.n	8001940 <HAL_I2C_Init+0x84>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4a80      	ldr	r2, [pc, #512]	; (8001b34 <HAL_I2C_Init+0x278>)
 8001934:	4293      	cmp	r3, r2
 8001936:	bf94      	ite	ls
 8001938:	2301      	movls	r3, #1
 800193a:	2300      	movhi	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	e006      	b.n	800194e <HAL_I2C_Init+0x92>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4a7d      	ldr	r2, [pc, #500]	; (8001b38 <HAL_I2C_Init+0x27c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	bf94      	ite	ls
 8001948:	2301      	movls	r3, #1
 800194a:	2300      	movhi	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e0e7      	b.n	8001b26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4a78      	ldr	r2, [pc, #480]	; (8001b3c <HAL_I2C_Init+0x280>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	0c9b      	lsrs	r3, r3, #18
 8001960:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	430a      	orrs	r2, r1
 8001974:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	4a6a      	ldr	r2, [pc, #424]	; (8001b30 <HAL_I2C_Init+0x274>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d802      	bhi.n	8001990 <HAL_I2C_Init+0xd4>
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	3301      	adds	r3, #1
 800198e:	e009      	b.n	80019a4 <HAL_I2C_Init+0xe8>
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001996:	fb02 f303 	mul.w	r3, r2, r3
 800199a:	4a69      	ldr	r2, [pc, #420]	; (8001b40 <HAL_I2C_Init+0x284>)
 800199c:	fba2 2303 	umull	r2, r3, r2, r3
 80019a0:	099b      	lsrs	r3, r3, #6
 80019a2:	3301      	adds	r3, #1
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	430b      	orrs	r3, r1
 80019aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	495c      	ldr	r1, [pc, #368]	; (8001b30 <HAL_I2C_Init+0x274>)
 80019c0:	428b      	cmp	r3, r1
 80019c2:	d819      	bhi.n	80019f8 <HAL_I2C_Init+0x13c>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	1e59      	subs	r1, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80019d2:	1c59      	adds	r1, r3, #1
 80019d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019d8:	400b      	ands	r3, r1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00a      	beq.n	80019f4 <HAL_I2C_Init+0x138>
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1e59      	subs	r1, r3, #1
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ec:	3301      	adds	r3, #1
 80019ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f2:	e051      	b.n	8001a98 <HAL_I2C_Init+0x1dc>
 80019f4:	2304      	movs	r3, #4
 80019f6:	e04f      	b.n	8001a98 <HAL_I2C_Init+0x1dc>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d111      	bne.n	8001a24 <HAL_I2C_Init+0x168>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1e58      	subs	r0, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6859      	ldr	r1, [r3, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	440b      	add	r3, r1
 8001a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a12:	3301      	adds	r3, #1
 8001a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bf0c      	ite	eq
 8001a1c:	2301      	moveq	r3, #1
 8001a1e:	2300      	movne	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	e012      	b.n	8001a4a <HAL_I2C_Init+0x18e>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	1e58      	subs	r0, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6859      	ldr	r1, [r3, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	0099      	lsls	r1, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	bf0c      	ite	eq
 8001a44:	2301      	moveq	r3, #1
 8001a46:	2300      	movne	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_I2C_Init+0x196>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e022      	b.n	8001a98 <HAL_I2C_Init+0x1dc>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10e      	bne.n	8001a78 <HAL_I2C_Init+0x1bc>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1e58      	subs	r0, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6859      	ldr	r1, [r3, #4]
 8001a62:	460b      	mov	r3, r1
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	440b      	add	r3, r1
 8001a68:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a76:	e00f      	b.n	8001a98 <HAL_I2C_Init+0x1dc>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	1e58      	subs	r0, r3, #1
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6859      	ldr	r1, [r3, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	0099      	lsls	r1, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	6809      	ldr	r1, [r1, #0]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69da      	ldr	r2, [r3, #28]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ac6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6911      	ldr	r1, [r2, #16]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68d2      	ldr	r2, [r2, #12]
 8001ad2:	4311      	orrs	r1, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695a      	ldr	r2, [r3, #20]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0201 	orr.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2220      	movs	r2, #32
 8001b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	000186a0 	.word	0x000186a0
 8001b34:	001e847f 	.word	0x001e847f
 8001b38:	003d08ff 	.word	0x003d08ff
 8001b3c:	431bde83 	.word	0x431bde83
 8001b40:	10624dd3 	.word	0x10624dd3

08001b44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	4608      	mov	r0, r1
 8001b4e:	4611      	mov	r1, r2
 8001b50:	461a      	mov	r2, r3
 8001b52:	4603      	mov	r3, r0
 8001b54:	817b      	strh	r3, [r7, #10]
 8001b56:	460b      	mov	r3, r1
 8001b58:	813b      	strh	r3, [r7, #8]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b5e:	f7ff fadd 	bl	800111c <HAL_GetTick>
 8001b62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b20      	cmp	r3, #32
 8001b6e:	f040 80d9 	bne.w	8001d24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2319      	movs	r3, #25
 8001b78:	2201      	movs	r2, #1
 8001b7a:	496d      	ldr	r1, [pc, #436]	; (8001d30 <HAL_I2C_Mem_Write+0x1ec>)
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f000 f971 	bl	8001e64 <I2C_WaitOnFlagUntilTimeout>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e0cc      	b.n	8001d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_I2C_Mem_Write+0x56>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e0c5      	b.n	8001d26 <HAL_I2C_Mem_Write+0x1e2>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d007      	beq.n	8001bc0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2221      	movs	r2, #33	; 0x21
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2240      	movs	r2, #64	; 0x40
 8001bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a3a      	ldr	r2, [r7, #32]
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4a4d      	ldr	r2, [pc, #308]	; (8001d34 <HAL_I2C_Mem_Write+0x1f0>)
 8001c00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c02:	88f8      	ldrh	r0, [r7, #6]
 8001c04:	893a      	ldrh	r2, [r7, #8]
 8001c06:	8979      	ldrh	r1, [r7, #10]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	9301      	str	r3, [sp, #4]
 8001c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	4603      	mov	r3, r0
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f890 	bl	8001d38 <I2C_RequestMemoryWrite>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d052      	beq.n	8001cc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e081      	b.n	8001d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 f9f2 	bl	8002010 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00d      	beq.n	8001c4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d107      	bne.n	8001c4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e06b      	b.n	8001d26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	781a      	ldrb	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	d11b      	bne.n	8001cc4 <HAL_I2C_Mem_Write+0x180>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d017      	beq.n	8001cc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	781a      	ldrb	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1aa      	bne.n	8001c22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 f9de 	bl	8002092 <I2C_WaitOnBTFFlagUntilTimeout>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00d      	beq.n	8001cf8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d107      	bne.n	8001cf4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cf2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e016      	b.n	8001d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	e000      	b.n	8001d26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001d24:	2302      	movs	r3, #2
  }
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	00100002 	.word	0x00100002
 8001d34:	ffff0000 	.word	0xffff0000

08001d38 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	4608      	mov	r0, r1
 8001d42:	4611      	mov	r1, r2
 8001d44:	461a      	mov	r2, r3
 8001d46:	4603      	mov	r3, r0
 8001d48:	817b      	strh	r3, [r7, #10]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	813b      	strh	r3, [r7, #8]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 f878 	bl	8001e64 <I2C_WaitOnFlagUntilTimeout>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00d      	beq.n	8001d96 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d88:	d103      	bne.n	8001d92 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e05f      	b.n	8001e56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d96:	897b      	ldrh	r3, [r7, #10]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001da4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	6a3a      	ldr	r2, [r7, #32]
 8001daa:	492d      	ldr	r1, [pc, #180]	; (8001e60 <I2C_RequestMemoryWrite+0x128>)
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 f8b0 	bl	8001f12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e04c      	b.n	8001e56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd4:	6a39      	ldr	r1, [r7, #32]
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 f91a 	bl	8002010 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00d      	beq.n	8001dfe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d107      	bne.n	8001dfa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001df8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e02b      	b.n	8001e56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d105      	bne.n	8001e10 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e04:	893b      	ldrh	r3, [r7, #8]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	611a      	str	r2, [r3, #16]
 8001e0e:	e021      	b.n	8001e54 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e10:	893b      	ldrh	r3, [r7, #8]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e20:	6a39      	ldr	r1, [r7, #32]
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 f8f4 	bl	8002010 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00d      	beq.n	8001e4a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d107      	bne.n	8001e46 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e005      	b.n	8001e56 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e4a:	893b      	ldrh	r3, [r7, #8]
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	00010002 	.word	0x00010002

08001e64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	4613      	mov	r3, r2
 8001e72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e74:	e025      	b.n	8001ec2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e7c:	d021      	beq.n	8001ec2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e7e:	f7ff f94d 	bl	800111c <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d302      	bcc.n	8001e94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d116      	bne.n	8001ec2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f043 0220 	orr.w	r2, r3, #32
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e023      	b.n	8001f0a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	0c1b      	lsrs	r3, r3, #16
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d10d      	bne.n	8001ee8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	bf0c      	ite	eq
 8001ede:	2301      	moveq	r3, #1
 8001ee0:	2300      	movne	r3, #0
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	e00c      	b.n	8001f02 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	bf0c      	ite	eq
 8001efa:	2301      	moveq	r3, #1
 8001efc:	2300      	movne	r3, #0
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d0b6      	beq.n	8001e76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b084      	sub	sp, #16
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f20:	e051      	b.n	8001fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f30:	d123      	bne.n	8001f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f40:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f4a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2220      	movs	r2, #32
 8001f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f043 0204 	orr.w	r2, r3, #4
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e046      	b.n	8002008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f80:	d021      	beq.n	8001fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f82:	f7ff f8cb 	bl	800111c <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d302      	bcc.n	8001f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d116      	bne.n	8001fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f043 0220 	orr.w	r2, r3, #32
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e020      	b.n	8002008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	0c1b      	lsrs	r3, r3, #16
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d10c      	bne.n	8001fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	bf14      	ite	ne
 8001fe2:	2301      	movne	r3, #1
 8001fe4:	2300      	moveq	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	e00b      	b.n	8002002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	43da      	mvns	r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	bf14      	ite	ne
 8001ffc:	2301      	movne	r3, #1
 8001ffe:	2300      	moveq	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d18d      	bne.n	8001f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800201c:	e02d      	b.n	800207a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f878 	bl	8002114 <I2C_IsAcknowledgeFailed>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e02d      	b.n	800208a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002034:	d021      	beq.n	800207a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002036:	f7ff f871 	bl	800111c <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	429a      	cmp	r2, r3
 8002044:	d302      	bcc.n	800204c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d116      	bne.n	800207a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2220      	movs	r2, #32
 8002056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f043 0220 	orr.w	r2, r3, #32
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e007      	b.n	800208a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002084:	2b80      	cmp	r3, #128	; 0x80
 8002086:	d1ca      	bne.n	800201e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800209e:	e02d      	b.n	80020fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 f837 	bl	8002114 <I2C_IsAcknowledgeFailed>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e02d      	b.n	800210c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020b6:	d021      	beq.n	80020fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020b8:	f7ff f830 	bl	800111c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d302      	bcc.n	80020ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d116      	bne.n	80020fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	f043 0220 	orr.w	r2, r3, #32
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e007      	b.n	800210c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	2b04      	cmp	r3, #4
 8002108:	d1ca      	bne.n	80020a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800212a:	d11b      	bne.n	8002164 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002134:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f043 0204 	orr.w	r2, r3, #4
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e26c      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 8087 	beq.w	800229e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002190:	4b92      	ldr	r3, [pc, #584]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 030c 	and.w	r3, r3, #12
 8002198:	2b04      	cmp	r3, #4
 800219a:	d00c      	beq.n	80021b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800219c:	4b8f      	ldr	r3, [pc, #572]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d112      	bne.n	80021ce <HAL_RCC_OscConfig+0x5e>
 80021a8:	4b8c      	ldr	r3, [pc, #560]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021b4:	d10b      	bne.n	80021ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b6:	4b89      	ldr	r3, [pc, #548]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d06c      	beq.n	800229c <HAL_RCC_OscConfig+0x12c>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d168      	bne.n	800229c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e246      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d6:	d106      	bne.n	80021e6 <HAL_RCC_OscConfig+0x76>
 80021d8:	4b80      	ldr	r3, [pc, #512]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a7f      	ldr	r2, [pc, #508]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	e02e      	b.n	8002244 <HAL_RCC_OscConfig+0xd4>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0x98>
 80021ee:	4b7b      	ldr	r3, [pc, #492]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a7a      	ldr	r2, [pc, #488]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b78      	ldr	r3, [pc, #480]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a77      	ldr	r2, [pc, #476]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002200:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e01d      	b.n	8002244 <HAL_RCC_OscConfig+0xd4>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0xbc>
 8002212:	4b72      	ldr	r3, [pc, #456]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a71      	ldr	r2, [pc, #452]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	4b6f      	ldr	r3, [pc, #444]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a6e      	ldr	r2, [pc, #440]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e00b      	b.n	8002244 <HAL_RCC_OscConfig+0xd4>
 800222c:	4b6b      	ldr	r3, [pc, #428]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a6a      	ldr	r2, [pc, #424]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	4b68      	ldr	r3, [pc, #416]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a67      	ldr	r2, [pc, #412]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 800223e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002242:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d013      	beq.n	8002274 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7fe ff66 	bl	800111c <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002254:	f7fe ff62 	bl	800111c <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	; 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e1fa      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	4b5d      	ldr	r3, [pc, #372]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0xe4>
 8002272:	e014      	b.n	800229e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7fe ff52 	bl	800111c <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800227c:	f7fe ff4e 	bl	800111c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	; 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e1e6      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	4b53      	ldr	r3, [pc, #332]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x10c>
 800229a:	e000      	b.n	800229e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d063      	beq.n	8002372 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022aa:	4b4c      	ldr	r3, [pc, #304]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00b      	beq.n	80022ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022b6:	4b49      	ldr	r3, [pc, #292]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d11c      	bne.n	80022fc <HAL_RCC_OscConfig+0x18c>
 80022c2:	4b46      	ldr	r3, [pc, #280]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d116      	bne.n	80022fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ce:	4b43      	ldr	r3, [pc, #268]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d005      	beq.n	80022e6 <HAL_RCC_OscConfig+0x176>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d001      	beq.n	80022e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e1ba      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e6:	4b3d      	ldr	r3, [pc, #244]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4939      	ldr	r1, [pc, #228]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fa:	e03a      	b.n	8002372 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d020      	beq.n	8002346 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002304:	4b36      	ldr	r3, [pc, #216]	; (80023e0 <HAL_RCC_OscConfig+0x270>)
 8002306:	2201      	movs	r2, #1
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7fe ff07 	bl	800111c <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002312:	f7fe ff03 	bl	800111c <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e19b      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002324:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002330:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4927      	ldr	r1, [pc, #156]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002340:	4313      	orrs	r3, r2
 8002342:	600b      	str	r3, [r1, #0]
 8002344:	e015      	b.n	8002372 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002346:	4b26      	ldr	r3, [pc, #152]	; (80023e0 <HAL_RCC_OscConfig+0x270>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7fe fee6 	bl	800111c <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002354:	f7fe fee2 	bl	800111c <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e17a      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002366:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d03a      	beq.n	80023f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d019      	beq.n	80023ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002386:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <HAL_RCC_OscConfig+0x274>)
 8002388:	2201      	movs	r2, #1
 800238a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238c:	f7fe fec6 	bl	800111c <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002394:	f7fe fec2 	bl	800111c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e15a      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a6:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <HAL_RCC_OscConfig+0x26c>)
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023b2:	2001      	movs	r0, #1
 80023b4:	f000 fad8 	bl	8002968 <RCC_Delay>
 80023b8:	e01c      	b.n	80023f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ba:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <HAL_RCC_OscConfig+0x274>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c0:	f7fe feac 	bl	800111c <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c6:	e00f      	b.n	80023e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c8:	f7fe fea8 	bl	800111c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d908      	bls.n	80023e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e140      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000
 80023e0:	42420000 	.word	0x42420000
 80023e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e8:	4b9e      	ldr	r3, [pc, #632]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1e9      	bne.n	80023c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 80a6 	beq.w	800254e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002402:	2300      	movs	r3, #0
 8002404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002406:	4b97      	ldr	r3, [pc, #604]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10d      	bne.n	800242e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	4b94      	ldr	r3, [pc, #592]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	4a93      	ldr	r2, [pc, #588]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241c:	61d3      	str	r3, [r2, #28]
 800241e:	4b91      	ldr	r3, [pc, #580]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	60bb      	str	r3, [r7, #8]
 8002428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800242a:	2301      	movs	r3, #1
 800242c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242e:	4b8e      	ldr	r3, [pc, #568]	; (8002668 <HAL_RCC_OscConfig+0x4f8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d118      	bne.n	800246c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800243a:	4b8b      	ldr	r3, [pc, #556]	; (8002668 <HAL_RCC_OscConfig+0x4f8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a8a      	ldr	r2, [pc, #552]	; (8002668 <HAL_RCC_OscConfig+0x4f8>)
 8002440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002446:	f7fe fe69 	bl	800111c <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244e:	f7fe fe65 	bl	800111c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b64      	cmp	r3, #100	; 0x64
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e0fd      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002460:	4b81      	ldr	r3, [pc, #516]	; (8002668 <HAL_RCC_OscConfig+0x4f8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d106      	bne.n	8002482 <HAL_RCC_OscConfig+0x312>
 8002474:	4b7b      	ldr	r3, [pc, #492]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4a7a      	ldr	r2, [pc, #488]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6213      	str	r3, [r2, #32]
 8002480:	e02d      	b.n	80024de <HAL_RCC_OscConfig+0x36e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x334>
 800248a:	4b76      	ldr	r3, [pc, #472]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4a75      	ldr	r2, [pc, #468]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	6213      	str	r3, [r2, #32]
 8002496:	4b73      	ldr	r3, [pc, #460]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	4a72      	ldr	r2, [pc, #456]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 800249c:	f023 0304 	bic.w	r3, r3, #4
 80024a0:	6213      	str	r3, [r2, #32]
 80024a2:	e01c      	b.n	80024de <HAL_RCC_OscConfig+0x36e>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	2b05      	cmp	r3, #5
 80024aa:	d10c      	bne.n	80024c6 <HAL_RCC_OscConfig+0x356>
 80024ac:	4b6d      	ldr	r3, [pc, #436]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	4a6c      	ldr	r2, [pc, #432]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024b2:	f043 0304 	orr.w	r3, r3, #4
 80024b6:	6213      	str	r3, [r2, #32]
 80024b8:	4b6a      	ldr	r3, [pc, #424]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4a69      	ldr	r2, [pc, #420]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6213      	str	r3, [r2, #32]
 80024c4:	e00b      	b.n	80024de <HAL_RCC_OscConfig+0x36e>
 80024c6:	4b67      	ldr	r3, [pc, #412]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4a66      	ldr	r2, [pc, #408]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	6213      	str	r3, [r2, #32]
 80024d2:	4b64      	ldr	r3, [pc, #400]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4a63      	ldr	r2, [pc, #396]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	f023 0304 	bic.w	r3, r3, #4
 80024dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d015      	beq.n	8002512 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e6:	f7fe fe19 	bl	800111c <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ec:	e00a      	b.n	8002504 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ee:	f7fe fe15 	bl	800111c <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e0ab      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002504:	4b57      	ldr	r3, [pc, #348]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0ee      	beq.n	80024ee <HAL_RCC_OscConfig+0x37e>
 8002510:	e014      	b.n	800253c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002512:	f7fe fe03 	bl	800111c <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7fe fdff 	bl	800111c <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	; 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e095      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002530:	4b4c      	ldr	r3, [pc, #304]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1ee      	bne.n	800251a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800253c:	7dfb      	ldrb	r3, [r7, #23]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d105      	bne.n	800254e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002542:	4b48      	ldr	r3, [pc, #288]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	4a47      	ldr	r2, [pc, #284]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800254c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 8081 	beq.w	800265a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002558:	4b42      	ldr	r3, [pc, #264]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 030c 	and.w	r3, r3, #12
 8002560:	2b08      	cmp	r3, #8
 8002562:	d061      	beq.n	8002628 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b02      	cmp	r3, #2
 800256a:	d146      	bne.n	80025fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256c:	4b3f      	ldr	r3, [pc, #252]	; (800266c <HAL_RCC_OscConfig+0x4fc>)
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002572:	f7fe fdd3 	bl	800111c <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257a:	f7fe fdcf 	bl	800111c <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e067      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258c:	4b35      	ldr	r3, [pc, #212]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f0      	bne.n	800257a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a0:	d108      	bne.n	80025b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025a2:	4b30      	ldr	r3, [pc, #192]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	492d      	ldr	r1, [pc, #180]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b4:	4b2b      	ldr	r3, [pc, #172]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a19      	ldr	r1, [r3, #32]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	430b      	orrs	r3, r1
 80025c6:	4927      	ldr	r1, [pc, #156]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025cc:	4b27      	ldr	r3, [pc, #156]	; (800266c <HAL_RCC_OscConfig+0x4fc>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d2:	f7fe fda3 	bl	800111c <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025da:	f7fe fd9f 	bl	800111c <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e037      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ec:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x46a>
 80025f8:	e02f      	b.n	800265a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fa:	4b1c      	ldr	r3, [pc, #112]	; (800266c <HAL_RCC_OscConfig+0x4fc>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe fd8c 	bl	800111c <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002608:	f7fe fd88 	bl	800111c <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e020      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261a:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x498>
 8002626:	e018      	b.n	800265a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e013      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_RCC_OscConfig+0x4f4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	429a      	cmp	r2, r3
 8002646:	d106      	bne.n	8002656 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d001      	beq.n	800265a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000
 8002668:	40007000 	.word	0x40007000
 800266c:	42420060 	.word	0x42420060

08002670 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0d0      	b.n	8002826 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002684:	4b6a      	ldr	r3, [pc, #424]	; (8002830 <HAL_RCC_ClockConfig+0x1c0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d910      	bls.n	80026b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002692:	4b67      	ldr	r3, [pc, #412]	; (8002830 <HAL_RCC_ClockConfig+0x1c0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 0207 	bic.w	r2, r3, #7
 800269a:	4965      	ldr	r1, [pc, #404]	; (8002830 <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b63      	ldr	r3, [pc, #396]	; (8002830 <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0b8      	b.n	8002826 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d020      	beq.n	8002702 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026cc:	4b59      	ldr	r3, [pc, #356]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4a58      	ldr	r2, [pc, #352]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e4:	4b53      	ldr	r3, [pc, #332]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4a52      	ldr	r2, [pc, #328]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f0:	4b50      	ldr	r3, [pc, #320]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	494d      	ldr	r1, [pc, #308]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d040      	beq.n	8002790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d107      	bne.n	8002726 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002716:	4b47      	ldr	r3, [pc, #284]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d115      	bne.n	800274e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e07f      	b.n	8002826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272e:	4b41      	ldr	r3, [pc, #260]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d109      	bne.n	800274e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e073      	b.n	8002826 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273e:	4b3d      	ldr	r3, [pc, #244]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e06b      	b.n	8002826 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800274e:	4b39      	ldr	r3, [pc, #228]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f023 0203 	bic.w	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4936      	ldr	r1, [pc, #216]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	4313      	orrs	r3, r2
 800275e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002760:	f7fe fcdc 	bl	800111c <HAL_GetTick>
 8002764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002766:	e00a      	b.n	800277e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002768:	f7fe fcd8 	bl	800111c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	; 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e053      	b.n	8002826 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	4b2d      	ldr	r3, [pc, #180]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 020c 	and.w	r2, r3, #12
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	429a      	cmp	r2, r3
 800278e:	d1eb      	bne.n	8002768 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002790:	4b27      	ldr	r3, [pc, #156]	; (8002830 <HAL_RCC_ClockConfig+0x1c0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d210      	bcs.n	80027c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279e:	4b24      	ldr	r3, [pc, #144]	; (8002830 <HAL_RCC_ClockConfig+0x1c0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 0207 	bic.w	r2, r3, #7
 80027a6:	4922      	ldr	r1, [pc, #136]	; (8002830 <HAL_RCC_ClockConfig+0x1c0>)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	4b20      	ldr	r3, [pc, #128]	; (8002830 <HAL_RCC_ClockConfig+0x1c0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e032      	b.n	8002826 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027cc:	4b19      	ldr	r3, [pc, #100]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4916      	ldr	r1, [pc, #88]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d009      	beq.n	80027fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ea:	4b12      	ldr	r3, [pc, #72]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	490e      	ldr	r1, [pc, #56]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027fe:	f000 f821 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 8002802:	4602      	mov	r2, r0
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	490a      	ldr	r1, [pc, #40]	; (8002838 <HAL_RCC_ClockConfig+0x1c8>)
 8002810:	5ccb      	ldrb	r3, [r1, r3]
 8002812:	fa22 f303 	lsr.w	r3, r2, r3
 8002816:	4a09      	ldr	r2, [pc, #36]	; (800283c <HAL_RCC_ClockConfig+0x1cc>)
 8002818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_RCC_ClockConfig+0x1d0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fc3a 	bl	8001098 <HAL_InitTick>

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40022000 	.word	0x40022000
 8002834:	40021000 	.word	0x40021000
 8002838:	080045e0 	.word	0x080045e0
 800283c:	20000008 	.word	0x20000008
 8002840:	2000000c 	.word	0x2000000c

08002844 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002844:	b490      	push	{r4, r7}
 8002846:	b08a      	sub	sp, #40	; 0x28
 8002848:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800284a:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800284c:	1d3c      	adds	r4, r7, #4
 800284e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002850:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002854:	f240 2301 	movw	r3, #513	; 0x201
 8002858:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	2300      	movs	r3, #0
 8002860:	61bb      	str	r3, [r7, #24]
 8002862:	2300      	movs	r3, #0
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800286e:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b04      	cmp	r3, #4
 800287c:	d002      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0x40>
 800287e:	2b08      	cmp	r3, #8
 8002880:	d003      	beq.n	800288a <HAL_RCC_GetSysClockFreq+0x46>
 8002882:	e02d      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002884:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002886:	623b      	str	r3, [r7, #32]
      break;
 8002888:	e02d      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	0c9b      	lsrs	r3, r3, #18
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002896:	4413      	add	r3, r2
 8002898:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800289c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d013      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028a8:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	0c5b      	lsrs	r3, r3, #17
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028b6:	4413      	add	r3, r2
 80028b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	4a0e      	ldr	r2, [pc, #56]	; (80028fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c2:	fb02 f203 	mul.w	r2, r2, r3
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
 80028ce:	e004      	b.n	80028da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	4a0b      	ldr	r2, [pc, #44]	; (8002900 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028d4:	fb02 f303 	mul.w	r3, r2, r3
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	623b      	str	r3, [r7, #32]
      break;
 80028de:	e002      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80028e2:	623b      	str	r3, [r7, #32]
      break;
 80028e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028e6:	6a3b      	ldr	r3, [r7, #32]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3728      	adds	r7, #40	; 0x28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc90      	pop	{r4, r7}
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	08003e64 	.word	0x08003e64
 80028f8:	40021000 	.word	0x40021000
 80028fc:	007a1200 	.word	0x007a1200
 8002900:	003d0900 	.word	0x003d0900

08002904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002908:	4b02      	ldr	r3, [pc, #8]	; (8002914 <HAL_RCC_GetHCLKFreq+0x10>)
 800290a:	681b      	ldr	r3, [r3, #0]
}
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	20000008 	.word	0x20000008

08002918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800291c:	f7ff fff2 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8002920:	4602      	mov	r2, r0
 8002922:	4b05      	ldr	r3, [pc, #20]	; (8002938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	4903      	ldr	r1, [pc, #12]	; (800293c <HAL_RCC_GetPCLK1Freq+0x24>)
 800292e:	5ccb      	ldrb	r3, [r1, r3]
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002934:	4618      	mov	r0, r3
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000
 800293c:	080045f0 	.word	0x080045f0

08002940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002944:	f7ff ffde 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8002948:	4602      	mov	r2, r0
 800294a:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	0adb      	lsrs	r3, r3, #11
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	4903      	ldr	r1, [pc, #12]	; (8002964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002956:	5ccb      	ldrb	r3, [r1, r3]
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40021000 	.word	0x40021000
 8002964:	080045f0 	.word	0x080045f0

08002968 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <RCC_Delay+0x34>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <RCC_Delay+0x38>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	0a5b      	lsrs	r3, r3, #9
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002984:	bf00      	nop
  }
  while (Delay --);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1e5a      	subs	r2, r3, #1
 800298a:	60fa      	str	r2, [r7, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1f9      	bne.n	8002984 <RCC_Delay+0x1c>
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	20000008 	.word	0x20000008
 80029a0:	10624dd3 	.word	0x10624dd3

080029a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e076      	b.n	8002aa4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d108      	bne.n	80029d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029c6:	d009      	beq.n	80029dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	61da      	str	r2, [r3, #28]
 80029ce:	e005      	b.n	80029dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fe fa36 	bl	8000e68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a60:	ea42 0103 	orr.w	r1, r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	0c1a      	lsrs	r2, r3, #16
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f002 0204 	and.w	r2, r2, #4
 8002a82:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	69da      	ldr	r2, [r3, #28]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_SPI_Transmit+0x22>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e126      	b.n	8002d1c <HAL_SPI_Transmit+0x270>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ad6:	f7fe fb21 	bl	800111c <HAL_GetTick>
 8002ada:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d002      	beq.n	8002af2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002aec:	2302      	movs	r3, #2
 8002aee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002af0:	e10b      	b.n	8002d0a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <HAL_SPI_Transmit+0x52>
 8002af8:	88fb      	ldrh	r3, [r7, #6]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d102      	bne.n	8002b04 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b02:	e102      	b.n	8002d0a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2203      	movs	r2, #3
 8002b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	88fa      	ldrh	r2, [r7, #6]
 8002b1c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	88fa      	ldrh	r2, [r7, #6]
 8002b22:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b4a:	d10f      	bne.n	8002b6c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b76:	2b40      	cmp	r3, #64	; 0x40
 8002b78:	d007      	beq.n	8002b8a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b92:	d14b      	bne.n	8002c2c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <HAL_SPI_Transmit+0xf6>
 8002b9c:	8afb      	ldrh	r3, [r7, #22]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d13e      	bne.n	8002c20 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	881a      	ldrh	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	1c9a      	adds	r2, r3, #2
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bc6:	e02b      	b.n	8002c20 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d112      	bne.n	8002bfc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	881a      	ldrh	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	1c9a      	adds	r2, r3, #2
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002bfa:	e011      	b.n	8002c20 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bfc:	f7fe fa8e 	bl	800111c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d803      	bhi.n	8002c14 <HAL_SPI_Transmit+0x168>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c12:	d102      	bne.n	8002c1a <HAL_SPI_Transmit+0x16e>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d102      	bne.n	8002c20 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c1e:	e074      	b.n	8002d0a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1ce      	bne.n	8002bc8 <HAL_SPI_Transmit+0x11c>
 8002c2a:	e04c      	b.n	8002cc6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <HAL_SPI_Transmit+0x18e>
 8002c34:	8afb      	ldrh	r3, [r7, #22]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d140      	bne.n	8002cbc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	330c      	adds	r3, #12
 8002c44:	7812      	ldrb	r2, [r2, #0]
 8002c46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c60:	e02c      	b.n	8002cbc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d113      	bne.n	8002c98 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	330c      	adds	r3, #12
 8002c7a:	7812      	ldrb	r2, [r2, #0]
 8002c7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c96:	e011      	b.n	8002cbc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c98:	f7fe fa40 	bl	800111c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d803      	bhi.n	8002cb0 <HAL_SPI_Transmit+0x204>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cae:	d102      	bne.n	8002cb6 <HAL_SPI_Transmit+0x20a>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d102      	bne.n	8002cbc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002cba:	e026      	b.n	8002d0a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1cd      	bne.n	8002c62 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	6839      	ldr	r1, [r7, #0]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 fbb8 	bl	8003440 <SPI_EndRxTxTransaction>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10a      	bne.n	8002cfa <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	77fb      	strb	r3, [r7, #31]
 8002d06:	e000      	b.n	8002d0a <HAL_SPI_Transmit+0x25e>
  }

error:
 8002d08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3720      	adds	r7, #32
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	4613      	mov	r3, r2
 8002d32:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d40:	d112      	bne.n	8002d68 <HAL_SPI_Receive+0x44>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10e      	bne.n	8002d68 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002d52:	88fa      	ldrh	r2, [r7, #6]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f8f1 	bl	8002f46 <HAL_SPI_TransmitReceive>
 8002d64:	4603      	mov	r3, r0
 8002d66:	e0ea      	b.n	8002f3e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_SPI_Receive+0x52>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e0e3      	b.n	8002f3e <HAL_SPI_Receive+0x21a>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d7e:	f7fe f9cd 	bl	800111c <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d002      	beq.n	8002d96 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002d90:	2302      	movs	r3, #2
 8002d92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d94:	e0ca      	b.n	8002f2c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_SPI_Receive+0x7e>
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d102      	bne.n	8002da8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002da6:	e0c1      	b.n	8002f2c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2204      	movs	r2, #4
 8002dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	88fa      	ldrh	r2, [r7, #6]
 8002dc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	88fa      	ldrh	r2, [r7, #6]
 8002dc6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dee:	d10f      	bne.n	8002e10 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dfe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e0e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b40      	cmp	r3, #64	; 0x40
 8002e1c:	d007      	beq.n	8002e2e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e2c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d162      	bne.n	8002efc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e36:	e02e      	b.n	8002e96 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d115      	bne.n	8002e72 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f103 020c 	add.w	r2, r3, #12
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	7812      	ldrb	r2, [r2, #0]
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e70:	e011      	b.n	8002e96 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e72:	f7fe f953 	bl	800111c <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d803      	bhi.n	8002e8a <HAL_SPI_Receive+0x166>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e88:	d102      	bne.n	8002e90 <HAL_SPI_Receive+0x16c>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d102      	bne.n	8002e96 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002e94:	e04a      	b.n	8002f2c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1cb      	bne.n	8002e38 <HAL_SPI_Receive+0x114>
 8002ea0:	e031      	b.n	8002f06 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d113      	bne.n	8002ed8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eba:	b292      	uxth	r2, r2
 8002ebc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec2:	1c9a      	adds	r2, r3, #2
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ed6:	e011      	b.n	8002efc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ed8:	f7fe f920 	bl	800111c <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d803      	bhi.n	8002ef0 <HAL_SPI_Receive+0x1cc>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eee:	d102      	bne.n	8002ef6 <HAL_SPI_Receive+0x1d2>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d102      	bne.n	8002efc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002efa:	e017      	b.n	8002f2c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1cd      	bne.n	8002ea2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	6839      	ldr	r1, [r7, #0]
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 fa46 	bl	800339c <SPI_EndRxTransaction>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	75fb      	strb	r3, [r7, #23]
 8002f28:	e000      	b.n	8002f2c <HAL_SPI_Receive+0x208>
  }

error :
 8002f2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b08c      	sub	sp, #48	; 0x30
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]
 8002f52:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f54:	2301      	movs	r3, #1
 8002f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_SPI_TransmitReceive+0x26>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e18a      	b.n	8003282 <HAL_SPI_TransmitReceive+0x33c>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f74:	f7fe f8d2 	bl	800111c <HAL_GetTick>
 8002f78:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002f8a:	887b      	ldrh	r3, [r7, #2]
 8002f8c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d00f      	beq.n	8002fb6 <HAL_SPI_TransmitReceive+0x70>
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f9c:	d107      	bne.n	8002fae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d103      	bne.n	8002fae <HAL_SPI_TransmitReceive+0x68>
 8002fa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d003      	beq.n	8002fb6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002fb4:	e15b      	b.n	800326e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_SPI_TransmitReceive+0x82>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HAL_SPI_TransmitReceive+0x82>
 8002fc2:	887b      	ldrh	r3, [r7, #2]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d103      	bne.n	8002fd0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002fce:	e14e      	b.n	800326e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d003      	beq.n	8002fe4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2205      	movs	r2, #5
 8002fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	887a      	ldrh	r2, [r7, #2]
 8002ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	887a      	ldrh	r2, [r7, #2]
 8002ffa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	887a      	ldrh	r2, [r7, #2]
 8003006:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	887a      	ldrh	r2, [r7, #2]
 800300c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	d007      	beq.n	8003038 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003036:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003040:	d178      	bne.n	8003134 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <HAL_SPI_TransmitReceive+0x10a>
 800304a:	8b7b      	ldrh	r3, [r7, #26]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d166      	bne.n	800311e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	881a      	ldrh	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003060:	1c9a      	adds	r2, r3, #2
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003074:	e053      	b.n	800311e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b02      	cmp	r3, #2
 8003082:	d11b      	bne.n	80030bc <HAL_SPI_TransmitReceive+0x176>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d016      	beq.n	80030bc <HAL_SPI_TransmitReceive+0x176>
 800308e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003090:	2b01      	cmp	r3, #1
 8003092:	d113      	bne.n	80030bc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	881a      	ldrh	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	1c9a      	adds	r2, r3, #2
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d119      	bne.n	80030fe <HAL_SPI_TransmitReceive+0x1b8>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d014      	beq.n	80030fe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030de:	b292      	uxth	r2, r2
 80030e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	1c9a      	adds	r2, r3, #2
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030fa:	2301      	movs	r3, #1
 80030fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030fe:	f7fe f80d 	bl	800111c <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800310a:	429a      	cmp	r2, r3
 800310c:	d807      	bhi.n	800311e <HAL_SPI_TransmitReceive+0x1d8>
 800310e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003114:	d003      	beq.n	800311e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800311c:	e0a7      	b.n	800326e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003122:	b29b      	uxth	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1a6      	bne.n	8003076 <HAL_SPI_TransmitReceive+0x130>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1a1      	bne.n	8003076 <HAL_SPI_TransmitReceive+0x130>
 8003132:	e07c      	b.n	800322e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <HAL_SPI_TransmitReceive+0x1fc>
 800313c:	8b7b      	ldrh	r3, [r7, #26]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d16b      	bne.n	800321a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	330c      	adds	r3, #12
 800314c:	7812      	ldrb	r2, [r2, #0]
 800314e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003168:	e057      	b.n	800321a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b02      	cmp	r3, #2
 8003176:	d11c      	bne.n	80031b2 <HAL_SPI_TransmitReceive+0x26c>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d017      	beq.n	80031b2 <HAL_SPI_TransmitReceive+0x26c>
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	2b01      	cmp	r3, #1
 8003186:	d114      	bne.n	80031b2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	330c      	adds	r3, #12
 8003192:	7812      	ldrb	r2, [r2, #0]
 8003194:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d119      	bne.n	80031f4 <HAL_SPI_TransmitReceive+0x2ae>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d014      	beq.n	80031f4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031f0:	2301      	movs	r3, #1
 80031f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031f4:	f7fd ff92 	bl	800111c <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003200:	429a      	cmp	r2, r3
 8003202:	d803      	bhi.n	800320c <HAL_SPI_TransmitReceive+0x2c6>
 8003204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800320a:	d102      	bne.n	8003212 <HAL_SPI_TransmitReceive+0x2cc>
 800320c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320e:	2b00      	cmp	r3, #0
 8003210:	d103      	bne.n	800321a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003218:	e029      	b.n	800326e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1a2      	bne.n	800316a <HAL_SPI_TransmitReceive+0x224>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d19d      	bne.n	800316a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800322e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003230:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f904 	bl	8003440 <SPI_EndRxTxTransaction>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d006      	beq.n	800324c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800324a:	e010      	b.n	800326e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10b      	bne.n	800326c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	e000      	b.n	800326e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800326c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800327e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003282:	4618      	mov	r0, r3
 8003284:	3730      	adds	r7, #48	; 0x30
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	4613      	mov	r3, r2
 800329a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800329c:	f7fd ff3e 	bl	800111c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	4413      	add	r3, r2
 80032aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032ac:	f7fd ff36 	bl	800111c <HAL_GetTick>
 80032b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032b2:	4b39      	ldr	r3, [pc, #228]	; (8003398 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	015b      	lsls	r3, r3, #5
 80032b8:	0d1b      	lsrs	r3, r3, #20
 80032ba:	69fa      	ldr	r2, [r7, #28]
 80032bc:	fb02 f303 	mul.w	r3, r2, r3
 80032c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032c2:	e054      	b.n	800336e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032ca:	d050      	beq.n	800336e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032cc:	f7fd ff26 	bl	800111c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d902      	bls.n	80032e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d13d      	bne.n	800335e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032fa:	d111      	bne.n	8003320 <SPI_WaitFlagStateUntilTimeout+0x94>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003304:	d004      	beq.n	8003310 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330e:	d107      	bne.n	8003320 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800331e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003328:	d10f      	bne.n	800334a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003348:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e017      	b.n	800338e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	3b01      	subs	r3, #1
 800336c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4013      	ands	r3, r2
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	429a      	cmp	r2, r3
 800337c:	bf0c      	ite	eq
 800337e:	2301      	moveq	r3, #1
 8003380:	2300      	movne	r3, #0
 8003382:	b2db      	uxtb	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	429a      	cmp	r2, r3
 800338a:	d19b      	bne.n	80032c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000008 	.word	0x20000008

0800339c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033b0:	d111      	bne.n	80033d6 <SPI_EndRxTransaction+0x3a>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ba:	d004      	beq.n	80033c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c4:	d107      	bne.n	80033d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033d4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033de:	d117      	bne.n	8003410 <SPI_EndRxTransaction+0x74>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e8:	d112      	bne.n	8003410 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2200      	movs	r2, #0
 80033f2:	2101      	movs	r1, #1
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f7ff ff49 	bl	800328c <SPI_WaitFlagStateUntilTimeout>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01a      	beq.n	8003436 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003404:	f043 0220 	orr.w	r2, r3, #32
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e013      	b.n	8003438 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2200      	movs	r2, #0
 8003418:	2180      	movs	r1, #128	; 0x80
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f7ff ff36 	bl	800328c <SPI_WaitFlagStateUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d007      	beq.n	8003436 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342a:	f043 0220 	orr.w	r2, r3, #32
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e000      	b.n	8003438 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af02      	add	r7, sp, #8
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2200      	movs	r2, #0
 8003454:	2180      	movs	r1, #128	; 0x80
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7ff ff18 	bl	800328c <SPI_WaitFlagStateUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003466:	f043 0220 	orr.w	r2, r3, #32
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e000      	b.n	8003474 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e03f      	b.n	800350e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fd fd2a 	bl	8000efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2224      	movs	r2, #36	; 0x24
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fbed 	bl	8003ca0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695a      	ldr	r2, [r3, #20]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003516:	b480      	push	{r7}
 8003518:	b085      	sub	sp, #20
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	4613      	mov	r3, r2
 8003522:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b20      	cmp	r3, #32
 800352e:	d130      	bne.n	8003592 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <HAL_UART_Transmit_IT+0x26>
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e029      	b.n	8003594 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_UART_Transmit_IT+0x38>
 800354a:	2302      	movs	r3, #2
 800354c:	e022      	b.n	8003594 <HAL_UART_Transmit_IT+0x7e>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	88fa      	ldrh	r2, [r7, #6]
 8003560:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	88fa      	ldrh	r2, [r7, #6]
 8003566:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2221      	movs	r2, #33	; 0x21
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800358c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	e000      	b.n	8003594 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003592:	2302      	movs	r3, #2
  }
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	4770      	bx	lr

0800359e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	4613      	mov	r3, r2
 80035aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d11d      	bne.n	80035f4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_UART_Receive_IT+0x26>
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e016      	b.n	80035f6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_UART_Receive_IT+0x38>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e00f      	b.n	80035f6 <HAL_UART_Receive_IT+0x58>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	461a      	mov	r2, r3
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f9cf 	bl	800398e <UART_Start_Receive_IT>
 80035f0:	4603      	mov	r3, r0
 80035f2:	e000      	b.n	80035f6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80035f4:	2302      	movs	r3, #2
  }
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08a      	sub	sp, #40	; 0x28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003620:	2300      	movs	r3, #0
 8003622:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10d      	bne.n	8003652 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_UART_IRQHandler+0x52>
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fa7f 	bl	8003b4e <UART_Receive_IT>
      return;
 8003650:	e17b      	b.n	800394a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80b1 	beq.w	80037bc <HAL_UART_IRQHandler+0x1bc>
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d105      	bne.n	8003670 <HAL_UART_IRQHandler+0x70>
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 80a6 	beq.w	80037bc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <HAL_UART_IRQHandler+0x90>
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f043 0201 	orr.w	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_UART_IRQHandler+0xb0>
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	f043 0202 	orr.w	r2, r3, #2
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <HAL_UART_IRQHandler+0xd0>
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	f043 0204 	orr.w	r2, r3, #4
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00f      	beq.n	80036fa <HAL_UART_IRQHandler+0xfa>
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d104      	bne.n	80036ee <HAL_UART_IRQHandler+0xee>
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f043 0208 	orr.w	r2, r3, #8
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 811e 	beq.w	8003940 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d007      	beq.n	800371e <HAL_UART_IRQHandler+0x11e>
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	f003 0320 	and.w	r3, r3, #32
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 fa18 	bl	8003b4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf14      	ite	ne
 800372c:	2301      	movne	r3, #1
 800372e:	2300      	moveq	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b00      	cmp	r3, #0
 800373e:	d102      	bne.n	8003746 <HAL_UART_IRQHandler+0x146>
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d031      	beq.n	80037aa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f95a 	bl	8003a00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	d023      	beq.n	80037a2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695a      	ldr	r2, [r3, #20]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003768:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	2b00      	cmp	r3, #0
 8003770:	d013      	beq.n	800379a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	4a76      	ldr	r2, [pc, #472]	; (8003950 <HAL_UART_IRQHandler+0x350>)
 8003778:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377e:	4618      	mov	r0, r3
 8003780:	f7fd fe42 	bl	8001408 <HAL_DMA_Abort_IT>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d016      	beq.n	80037b8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003794:	4610      	mov	r0, r2
 8003796:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003798:	e00e      	b.n	80037b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f8e3 	bl	8003966 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a0:	e00a      	b.n	80037b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f8df 	bl	8003966 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a8:	e006      	b.n	80037b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f8db 	bl	8003966 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80037b6:	e0c3      	b.n	8003940 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b8:	bf00      	nop
    return;
 80037ba:	e0c1      	b.n	8003940 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	f040 80a1 	bne.w	8003908 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 809b 	beq.w	8003908 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	f003 0310 	and.w	r3, r3, #16
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 8095 	beq.w	8003908 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d04e      	beq.n	80038a0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800380c:	8a3b      	ldrh	r3, [r7, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 8098 	beq.w	8003944 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003818:	8a3a      	ldrh	r2, [r7, #16]
 800381a:	429a      	cmp	r2, r3
 800381c:	f080 8092 	bcs.w	8003944 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	8a3a      	ldrh	r2, [r7, #16]
 8003824:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	2b20      	cmp	r3, #32
 800382e:	d02b      	beq.n	8003888 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800383e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695a      	ldr	r2, [r3, #20]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0201 	bic.w	r2, r2, #1
 800384e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695a      	ldr	r2, [r3, #20]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800385e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0210 	bic.w	r2, r2, #16
 800387c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	4618      	mov	r0, r3
 8003884:	f7fd fd85 	bl	8001392 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003890:	b29b      	uxth	r3, r3
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	b29b      	uxth	r3, r3
 8003896:	4619      	mov	r1, r3
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f86d 	bl	8003978 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800389e:	e051      	b.n	8003944 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d047      	beq.n	8003948 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80038b8:	8a7b      	ldrh	r3, [r7, #18]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d044      	beq.n	8003948 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038cc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695a      	ldr	r2, [r3, #20]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0210 	bic.w	r2, r2, #16
 80038fa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038fc:	8a7b      	ldrh	r3, [r7, #18]
 80038fe:	4619      	mov	r1, r3
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f839 	bl	8003978 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003906:	e01f      	b.n	8003948 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390e:	2b00      	cmp	r3, #0
 8003910:	d008      	beq.n	8003924 <HAL_UART_IRQHandler+0x324>
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f8af 	bl	8003a80 <UART_Transmit_IT>
    return;
 8003922:	e012      	b.n	800394a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00d      	beq.n	800394a <HAL_UART_IRQHandler+0x34a>
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f8f0 	bl	8003b1e <UART_EndTransmit_IT>
    return;
 800393e:	e004      	b.n	800394a <HAL_UART_IRQHandler+0x34a>
    return;
 8003940:	bf00      	nop
 8003942:	e002      	b.n	800394a <HAL_UART_IRQHandler+0x34a>
      return;
 8003944:	bf00      	nop
 8003946:	e000      	b.n	800394a <HAL_UART_IRQHandler+0x34a>
      return;
 8003948:	bf00      	nop
  }
}
 800394a:	3728      	adds	r7, #40	; 0x28
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	08003a59 	.word	0x08003a59

08003954 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr

08003966 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr

08003978 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr

0800398e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800398e:	b480      	push	{r7}
 8003990:	b085      	sub	sp, #20
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	4613      	mov	r3, r2
 800399a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	88fa      	ldrh	r2, [r7, #6]
 80039a6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	88fa      	ldrh	r2, [r7, #6]
 80039ac:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2222      	movs	r2, #34	; 0x22
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039d2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695a      	ldr	r2, [r3, #20]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0220 	orr.w	r2, r2, #32
 80039f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr

08003a00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a16:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695a      	ldr	r2, [r3, #20]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0201 	bic.w	r2, r2, #1
 8003a26:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d107      	bne.n	8003a40 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0210 	bic.w	r2, r2, #16
 8003a3e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f7ff ff77 	bl	8003966 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b21      	cmp	r3, #33	; 0x21
 8003a92:	d13e      	bne.n	8003b12 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9c:	d114      	bne.n	8003ac8 <UART_Transmit_IT+0x48>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d110      	bne.n	8003ac8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	881b      	ldrh	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	1c9a      	adds	r2, r3, #2
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	621a      	str	r2, [r3, #32]
 8003ac6:	e008      	b.n	8003ada <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	1c59      	adds	r1, r3, #1
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6211      	str	r1, [r2, #32]
 8003ad2:	781a      	ldrb	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10f      	bne.n	8003b0e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003afc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e000      	b.n	8003b14 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b12:	2302      	movs	r3, #2
  }
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr

08003b1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b082      	sub	sp, #8
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff ff08 	bl	8003954 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b086      	sub	sp, #24
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b22      	cmp	r3, #34	; 0x22
 8003b60:	f040 8099 	bne.w	8003c96 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6c:	d117      	bne.n	8003b9e <UART_Receive_IT+0x50>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d113      	bne.n	8003b9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	1c9a      	adds	r2, r3, #2
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	629a      	str	r2, [r3, #40]	; 0x28
 8003b9c:	e026      	b.n	8003bec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb0:	d007      	beq.n	8003bc2 <UART_Receive_IT+0x74>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <UART_Receive_IT+0x82>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	e008      	b.n	8003be2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d148      	bne.n	8003c92 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0220 	bic.w	r2, r2, #32
 8003c0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695a      	ldr	r2, [r3, #20]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0201 	bic.w	r2, r2, #1
 8003c2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d123      	bne.n	8003c88 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0210 	bic.w	r2, r2, #16
 8003c54:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	2b10      	cmp	r3, #16
 8003c62:	d10a      	bne.n	8003c7a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c64:	2300      	movs	r3, #0
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c7e:	4619      	mov	r1, r3
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff fe79 	bl	8003978 <HAL_UARTEx_RxEventCallback>
 8003c86:	e002      	b.n	8003c8e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7fd f83d 	bl	8000d08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	e002      	b.n	8003c98 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	e000      	b.n	8003c98 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003c96:	2302      	movs	r3, #2
  }
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003cda:	f023 030c 	bic.w	r3, r3, #12
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	68b9      	ldr	r1, [r7, #8]
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a2c      	ldr	r2, [pc, #176]	; (8003db4 <UART_SetConfig+0x114>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d103      	bne.n	8003d10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d08:	f7fe fe1a 	bl	8002940 <HAL_RCC_GetPCLK2Freq>
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	e002      	b.n	8003d16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d10:	f7fe fe02 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 8003d14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009a      	lsls	r2, r3, #2
 8003d20:	441a      	add	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2c:	4a22      	ldr	r2, [pc, #136]	; (8003db8 <UART_SetConfig+0x118>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	0119      	lsls	r1, r3, #4
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009a      	lsls	r2, r3, #2
 8003d40:	441a      	add	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d4c:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <UART_SetConfig+0x118>)
 8003d4e:	fba3 0302 	umull	r0, r3, r3, r2
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	2064      	movs	r0, #100	; 0x64
 8003d56:	fb00 f303 	mul.w	r3, r0, r3
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	3332      	adds	r3, #50	; 0x32
 8003d60:	4a15      	ldr	r2, [pc, #84]	; (8003db8 <UART_SetConfig+0x118>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d6c:	4419      	add	r1, r3
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	009a      	lsls	r2, r3, #2
 8003d78:	441a      	add	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <UART_SetConfig+0x118>)
 8003d86:	fba3 0302 	umull	r0, r3, r3, r2
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	2064      	movs	r0, #100	; 0x64
 8003d8e:	fb00 f303 	mul.w	r3, r0, r3
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	3332      	adds	r3, #50	; 0x32
 8003d98:	4a07      	ldr	r2, [pc, #28]	; (8003db8 <UART_SetConfig+0x118>)
 8003d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	f003 020f 	and.w	r2, r3, #15
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	440a      	add	r2, r1
 8003daa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003dac:	bf00      	nop
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40013800 	.word	0x40013800
 8003db8:	51eb851f 	.word	0x51eb851f

08003dbc <__libc_init_array>:
 8003dbc:	b570      	push	{r4, r5, r6, lr}
 8003dbe:	2600      	movs	r6, #0
 8003dc0:	4d0c      	ldr	r5, [pc, #48]	; (8003df4 <__libc_init_array+0x38>)
 8003dc2:	4c0d      	ldr	r4, [pc, #52]	; (8003df8 <__libc_init_array+0x3c>)
 8003dc4:	1b64      	subs	r4, r4, r5
 8003dc6:	10a4      	asrs	r4, r4, #2
 8003dc8:	42a6      	cmp	r6, r4
 8003dca:	d109      	bne.n	8003de0 <__libc_init_array+0x24>
 8003dcc:	f000 f82a 	bl	8003e24 <_init>
 8003dd0:	2600      	movs	r6, #0
 8003dd2:	4d0a      	ldr	r5, [pc, #40]	; (8003dfc <__libc_init_array+0x40>)
 8003dd4:	4c0a      	ldr	r4, [pc, #40]	; (8003e00 <__libc_init_array+0x44>)
 8003dd6:	1b64      	subs	r4, r4, r5
 8003dd8:	10a4      	asrs	r4, r4, #2
 8003dda:	42a6      	cmp	r6, r4
 8003ddc:	d105      	bne.n	8003dea <__libc_init_array+0x2e>
 8003dde:	bd70      	pop	{r4, r5, r6, pc}
 8003de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de4:	4798      	blx	r3
 8003de6:	3601      	adds	r6, #1
 8003de8:	e7ee      	b.n	8003dc8 <__libc_init_array+0xc>
 8003dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dee:	4798      	blx	r3
 8003df0:	3601      	adds	r6, #1
 8003df2:	e7f2      	b.n	8003dda <__libc_init_array+0x1e>
 8003df4:	080045f8 	.word	0x080045f8
 8003df8:	080045f8 	.word	0x080045f8
 8003dfc:	080045f8 	.word	0x080045f8
 8003e00:	080045fc 	.word	0x080045fc

08003e04 <memset>:
 8003e04:	4603      	mov	r3, r0
 8003e06:	4402      	add	r2, r0
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d100      	bne.n	8003e0e <memset+0xa>
 8003e0c:	4770      	bx	lr
 8003e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e12:	e7f9      	b.n	8003e08 <memset+0x4>

08003e14 <strcpy>:
 8003e14:	4603      	mov	r3, r0
 8003e16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e1a:	f803 2b01 	strb.w	r2, [r3], #1
 8003e1e:	2a00      	cmp	r2, #0
 8003e20:	d1f9      	bne.n	8003e16 <strcpy+0x2>
 8003e22:	4770      	bx	lr

08003e24 <_init>:
 8003e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e26:	bf00      	nop
 8003e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2a:	bc08      	pop	{r3}
 8003e2c:	469e      	mov	lr, r3
 8003e2e:	4770      	bx	lr

08003e30 <_fini>:
 8003e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e32:	bf00      	nop
 8003e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e36:	bc08      	pop	{r3}
 8003e38:	469e      	mov	lr, r3
 8003e3a:	4770      	bx	lr
