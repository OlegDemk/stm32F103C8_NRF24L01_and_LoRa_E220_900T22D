
NRF_and_LoRa_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e34  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e4  08008f40  08008f40  00018f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009924  08009924  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  08009924  08009924  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009924  08009924  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009924  08009924  00019924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009928  08009928  00019928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800992c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000998  200000b4  080099e0  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a4c  080099e0  00020a4c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001883f  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000330d  00000000  00000000  0003891c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0003bc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c0  00000000  00000000  0003d008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bed  00000000  00000000  0003e2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e35  00000000  00000000  00057eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009069f  00000000  00000000  00070cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00101389  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000592c  00000000  00000000  001013dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b4 	.word	0x200000b4
 8000128:	00000000 	.word	0x00000000
 800012c:	08008f28 	.word	0x08008f28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b8 	.word	0x200000b8
 8000148:	08008f28 	.word	0x08008f28

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_d2f>:
 80004d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004dc:	bf24      	itt	cs
 80004de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80004e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80004e6:	d90d      	bls.n	8000504 <__aeabi_d2f+0x30>
 80004e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80004f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004fc:	bf08      	it	eq
 80004fe:	f020 0001 	biceq.w	r0, r0, #1
 8000502:	4770      	bx	lr
 8000504:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000508:	d121      	bne.n	800054e <__aeabi_d2f+0x7a>
 800050a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800050e:	bfbc      	itt	lt
 8000510:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000514:	4770      	bxlt	lr
 8000516:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800051a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800051e:	f1c2 0218 	rsb	r2, r2, #24
 8000522:	f1c2 0c20 	rsb	ip, r2, #32
 8000526:	fa10 f30c 	lsls.w	r3, r0, ip
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	bf18      	it	ne
 8000530:	f040 0001 	orrne.w	r0, r0, #1
 8000534:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000538:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800053c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000540:	ea40 000c 	orr.w	r0, r0, ip
 8000544:	fa23 f302 	lsr.w	r3, r3, r2
 8000548:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800054c:	e7cc      	b.n	80004e8 <__aeabi_d2f+0x14>
 800054e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000552:	d107      	bne.n	8000564 <__aeabi_d2f+0x90>
 8000554:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000558:	bf1e      	ittt	ne
 800055a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800055e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000562:	4770      	bxne	lr
 8000564:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000568:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800056c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__aeabi_frsub>:
 8000574:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000578:	e002      	b.n	8000580 <__addsf3>
 800057a:	bf00      	nop

0800057c <__aeabi_fsub>:
 800057c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000580 <__addsf3>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	bf1f      	itttt	ne
 8000584:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000588:	ea92 0f03 	teqne	r2, r3
 800058c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000590:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000594:	d06a      	beq.n	800066c <__addsf3+0xec>
 8000596:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800059a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800059e:	bfc1      	itttt	gt
 80005a0:	18d2      	addgt	r2, r2, r3
 80005a2:	4041      	eorgt	r1, r0
 80005a4:	4048      	eorgt	r0, r1
 80005a6:	4041      	eorgt	r1, r0
 80005a8:	bfb8      	it	lt
 80005aa:	425b      	neglt	r3, r3
 80005ac:	2b19      	cmp	r3, #25
 80005ae:	bf88      	it	hi
 80005b0:	4770      	bxhi	lr
 80005b2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80005be:	bf18      	it	ne
 80005c0:	4240      	negne	r0, r0
 80005c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005c6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005ca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005ce:	bf18      	it	ne
 80005d0:	4249      	negne	r1, r1
 80005d2:	ea92 0f03 	teq	r2, r3
 80005d6:	d03f      	beq.n	8000658 <__addsf3+0xd8>
 80005d8:	f1a2 0201 	sub.w	r2, r2, #1
 80005dc:	fa41 fc03 	asr.w	ip, r1, r3
 80005e0:	eb10 000c 	adds.w	r0, r0, ip
 80005e4:	f1c3 0320 	rsb	r3, r3, #32
 80005e8:	fa01 f103 	lsl.w	r1, r1, r3
 80005ec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005f0:	d502      	bpl.n	80005f8 <__addsf3+0x78>
 80005f2:	4249      	negs	r1, r1
 80005f4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80005fc:	d313      	bcc.n	8000626 <__addsf3+0xa6>
 80005fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000602:	d306      	bcc.n	8000612 <__addsf3+0x92>
 8000604:	0840      	lsrs	r0, r0, #1
 8000606:	ea4f 0131 	mov.w	r1, r1, rrx
 800060a:	f102 0201 	add.w	r2, r2, #1
 800060e:	2afe      	cmp	r2, #254	; 0xfe
 8000610:	d251      	bcs.n	80006b6 <__addsf3+0x136>
 8000612:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000616:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800061a:	bf08      	it	eq
 800061c:	f020 0001 	biceq.w	r0, r0, #1
 8000620:	ea40 0003 	orr.w	r0, r0, r3
 8000624:	4770      	bx	lr
 8000626:	0049      	lsls	r1, r1, #1
 8000628:	eb40 0000 	adc.w	r0, r0, r0
 800062c:	3a01      	subs	r2, #1
 800062e:	bf28      	it	cs
 8000630:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000634:	d2ed      	bcs.n	8000612 <__addsf3+0x92>
 8000636:	fab0 fc80 	clz	ip, r0
 800063a:	f1ac 0c08 	sub.w	ip, ip, #8
 800063e:	ebb2 020c 	subs.w	r2, r2, ip
 8000642:	fa00 f00c 	lsl.w	r0, r0, ip
 8000646:	bfaa      	itet	ge
 8000648:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800064c:	4252      	neglt	r2, r2
 800064e:	4318      	orrge	r0, r3
 8000650:	bfbc      	itt	lt
 8000652:	40d0      	lsrlt	r0, r2
 8000654:	4318      	orrlt	r0, r3
 8000656:	4770      	bx	lr
 8000658:	f092 0f00 	teq	r2, #0
 800065c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000660:	bf06      	itte	eq
 8000662:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000666:	3201      	addeq	r2, #1
 8000668:	3b01      	subne	r3, #1
 800066a:	e7b5      	b.n	80005d8 <__addsf3+0x58>
 800066c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000670:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000674:	bf18      	it	ne
 8000676:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800067a:	d021      	beq.n	80006c0 <__addsf3+0x140>
 800067c:	ea92 0f03 	teq	r2, r3
 8000680:	d004      	beq.n	800068c <__addsf3+0x10c>
 8000682:	f092 0f00 	teq	r2, #0
 8000686:	bf08      	it	eq
 8000688:	4608      	moveq	r0, r1
 800068a:	4770      	bx	lr
 800068c:	ea90 0f01 	teq	r0, r1
 8000690:	bf1c      	itt	ne
 8000692:	2000      	movne	r0, #0
 8000694:	4770      	bxne	lr
 8000696:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800069a:	d104      	bne.n	80006a6 <__addsf3+0x126>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	bf28      	it	cs
 80006a0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80006a4:	4770      	bx	lr
 80006a6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80006aa:	bf3c      	itt	cc
 80006ac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80006b0:	4770      	bxcc	lr
 80006b2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006b6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80006ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006be:	4770      	bx	lr
 80006c0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006c4:	bf16      	itet	ne
 80006c6:	4608      	movne	r0, r1
 80006c8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006cc:	4601      	movne	r1, r0
 80006ce:	0242      	lsls	r2, r0, #9
 80006d0:	bf06      	itte	eq
 80006d2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006d6:	ea90 0f01 	teqeq	r0, r1
 80006da:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006de:	4770      	bx	lr

080006e0 <__aeabi_ui2f>:
 80006e0:	f04f 0300 	mov.w	r3, #0
 80006e4:	e004      	b.n	80006f0 <__aeabi_i2f+0x8>
 80006e6:	bf00      	nop

080006e8 <__aeabi_i2f>:
 80006e8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80006ec:	bf48      	it	mi
 80006ee:	4240      	negmi	r0, r0
 80006f0:	ea5f 0c00 	movs.w	ip, r0
 80006f4:	bf08      	it	eq
 80006f6:	4770      	bxeq	lr
 80006f8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80006fc:	4601      	mov	r1, r0
 80006fe:	f04f 0000 	mov.w	r0, #0
 8000702:	e01c      	b.n	800073e <__aeabi_l2f+0x2a>

08000704 <__aeabi_ul2f>:
 8000704:	ea50 0201 	orrs.w	r2, r0, r1
 8000708:	bf08      	it	eq
 800070a:	4770      	bxeq	lr
 800070c:	f04f 0300 	mov.w	r3, #0
 8000710:	e00a      	b.n	8000728 <__aeabi_l2f+0x14>
 8000712:	bf00      	nop

08000714 <__aeabi_l2f>:
 8000714:	ea50 0201 	orrs.w	r2, r0, r1
 8000718:	bf08      	it	eq
 800071a:	4770      	bxeq	lr
 800071c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000720:	d502      	bpl.n	8000728 <__aeabi_l2f+0x14>
 8000722:	4240      	negs	r0, r0
 8000724:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000728:	ea5f 0c01 	movs.w	ip, r1
 800072c:	bf02      	ittt	eq
 800072e:	4684      	moveq	ip, r0
 8000730:	4601      	moveq	r1, r0
 8000732:	2000      	moveq	r0, #0
 8000734:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000738:	bf08      	it	eq
 800073a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800073e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000742:	fabc f28c 	clz	r2, ip
 8000746:	3a08      	subs	r2, #8
 8000748:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800074c:	db10      	blt.n	8000770 <__aeabi_l2f+0x5c>
 800074e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000752:	4463      	add	r3, ip
 8000754:	fa00 fc02 	lsl.w	ip, r0, r2
 8000758:	f1c2 0220 	rsb	r2, r2, #32
 800075c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000760:	fa20 f202 	lsr.w	r2, r0, r2
 8000764:	eb43 0002 	adc.w	r0, r3, r2
 8000768:	bf08      	it	eq
 800076a:	f020 0001 	biceq.w	r0, r0, #1
 800076e:	4770      	bx	lr
 8000770:	f102 0220 	add.w	r2, r2, #32
 8000774:	fa01 fc02 	lsl.w	ip, r1, r2
 8000778:	f1c2 0220 	rsb	r2, r2, #32
 800077c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000780:	fa21 f202 	lsr.w	r2, r1, r2
 8000784:	eb43 0002 	adc.w	r0, r3, r2
 8000788:	bf08      	it	eq
 800078a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800078e:	4770      	bx	lr

08000790 <__aeabi_fmul>:
 8000790:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000794:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000798:	bf1e      	ittt	ne
 800079a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800079e:	ea92 0f0c 	teqne	r2, ip
 80007a2:	ea93 0f0c 	teqne	r3, ip
 80007a6:	d06f      	beq.n	8000888 <__aeabi_fmul+0xf8>
 80007a8:	441a      	add	r2, r3
 80007aa:	ea80 0c01 	eor.w	ip, r0, r1
 80007ae:	0240      	lsls	r0, r0, #9
 80007b0:	bf18      	it	ne
 80007b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007b6:	d01e      	beq.n	80007f6 <__aeabi_fmul+0x66>
 80007b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007c4:	fba0 3101 	umull	r3, r1, r0, r1
 80007c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007d0:	bf3e      	ittt	cc
 80007d2:	0049      	lslcc	r1, r1, #1
 80007d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007d8:	005b      	lslcc	r3, r3, #1
 80007da:	ea40 0001 	orr.w	r0, r0, r1
 80007de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007e2:	2afd      	cmp	r2, #253	; 0xfd
 80007e4:	d81d      	bhi.n	8000822 <__aeabi_fmul+0x92>
 80007e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ee:	bf08      	it	eq
 80007f0:	f020 0001 	biceq.w	r0, r0, #1
 80007f4:	4770      	bx	lr
 80007f6:	f090 0f00 	teq	r0, #0
 80007fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007fe:	bf08      	it	eq
 8000800:	0249      	lsleq	r1, r1, #9
 8000802:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000806:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800080a:	3a7f      	subs	r2, #127	; 0x7f
 800080c:	bfc2      	ittt	gt
 800080e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000812:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000816:	4770      	bxgt	lr
 8000818:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800081c:	f04f 0300 	mov.w	r3, #0
 8000820:	3a01      	subs	r2, #1
 8000822:	dc5d      	bgt.n	80008e0 <__aeabi_fmul+0x150>
 8000824:	f112 0f19 	cmn.w	r2, #25
 8000828:	bfdc      	itt	le
 800082a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800082e:	4770      	bxle	lr
 8000830:	f1c2 0200 	rsb	r2, r2, #0
 8000834:	0041      	lsls	r1, r0, #1
 8000836:	fa21 f102 	lsr.w	r1, r1, r2
 800083a:	f1c2 0220 	rsb	r2, r2, #32
 800083e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000842:	ea5f 0031 	movs.w	r0, r1, rrx
 8000846:	f140 0000 	adc.w	r0, r0, #0
 800084a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800084e:	bf08      	it	eq
 8000850:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000854:	4770      	bx	lr
 8000856:	f092 0f00 	teq	r2, #0
 800085a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800085e:	bf02      	ittt	eq
 8000860:	0040      	lsleq	r0, r0, #1
 8000862:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000866:	3a01      	subeq	r2, #1
 8000868:	d0f9      	beq.n	800085e <__aeabi_fmul+0xce>
 800086a:	ea40 000c 	orr.w	r0, r0, ip
 800086e:	f093 0f00 	teq	r3, #0
 8000872:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000876:	bf02      	ittt	eq
 8000878:	0049      	lsleq	r1, r1, #1
 800087a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800087e:	3b01      	subeq	r3, #1
 8000880:	d0f9      	beq.n	8000876 <__aeabi_fmul+0xe6>
 8000882:	ea41 010c 	orr.w	r1, r1, ip
 8000886:	e78f      	b.n	80007a8 <__aeabi_fmul+0x18>
 8000888:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800088c:	ea92 0f0c 	teq	r2, ip
 8000890:	bf18      	it	ne
 8000892:	ea93 0f0c 	teqne	r3, ip
 8000896:	d00a      	beq.n	80008ae <__aeabi_fmul+0x11e>
 8000898:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800089c:	bf18      	it	ne
 800089e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80008a2:	d1d8      	bne.n	8000856 <__aeabi_fmul+0xc6>
 80008a4:	ea80 0001 	eor.w	r0, r0, r1
 80008a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008ac:	4770      	bx	lr
 80008ae:	f090 0f00 	teq	r0, #0
 80008b2:	bf17      	itett	ne
 80008b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80008b8:	4608      	moveq	r0, r1
 80008ba:	f091 0f00 	teqne	r1, #0
 80008be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008c2:	d014      	beq.n	80008ee <__aeabi_fmul+0x15e>
 80008c4:	ea92 0f0c 	teq	r2, ip
 80008c8:	d101      	bne.n	80008ce <__aeabi_fmul+0x13e>
 80008ca:	0242      	lsls	r2, r0, #9
 80008cc:	d10f      	bne.n	80008ee <__aeabi_fmul+0x15e>
 80008ce:	ea93 0f0c 	teq	r3, ip
 80008d2:	d103      	bne.n	80008dc <__aeabi_fmul+0x14c>
 80008d4:	024b      	lsls	r3, r1, #9
 80008d6:	bf18      	it	ne
 80008d8:	4608      	movne	r0, r1
 80008da:	d108      	bne.n	80008ee <__aeabi_fmul+0x15e>
 80008dc:	ea80 0001 	eor.w	r0, r0, r1
 80008e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008ec:	4770      	bx	lr
 80008ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80008f6:	4770      	bx	lr

080008f8 <__aeabi_fdiv>:
 80008f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000900:	bf1e      	ittt	ne
 8000902:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000906:	ea92 0f0c 	teqne	r2, ip
 800090a:	ea93 0f0c 	teqne	r3, ip
 800090e:	d069      	beq.n	80009e4 <__aeabi_fdiv+0xec>
 8000910:	eba2 0203 	sub.w	r2, r2, r3
 8000914:	ea80 0c01 	eor.w	ip, r0, r1
 8000918:	0249      	lsls	r1, r1, #9
 800091a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800091e:	d037      	beq.n	8000990 <__aeabi_fdiv+0x98>
 8000920:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000924:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000928:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800092c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000930:	428b      	cmp	r3, r1
 8000932:	bf38      	it	cc
 8000934:	005b      	lslcc	r3, r3, #1
 8000936:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800093a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800093e:	428b      	cmp	r3, r1
 8000940:	bf24      	itt	cs
 8000942:	1a5b      	subcs	r3, r3, r1
 8000944:	ea40 000c 	orrcs.w	r0, r0, ip
 8000948:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800094c:	bf24      	itt	cs
 800094e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000952:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000956:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800095a:	bf24      	itt	cs
 800095c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000960:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000964:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000968:	bf24      	itt	cs
 800096a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800096e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000972:	011b      	lsls	r3, r3, #4
 8000974:	bf18      	it	ne
 8000976:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800097a:	d1e0      	bne.n	800093e <__aeabi_fdiv+0x46>
 800097c:	2afd      	cmp	r2, #253	; 0xfd
 800097e:	f63f af50 	bhi.w	8000822 <__aeabi_fmul+0x92>
 8000982:	428b      	cmp	r3, r1
 8000984:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000988:	bf08      	it	eq
 800098a:	f020 0001 	biceq.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000994:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000998:	327f      	adds	r2, #127	; 0x7f
 800099a:	bfc2      	ittt	gt
 800099c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009a0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009a4:	4770      	bxgt	lr
 80009a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009aa:	f04f 0300 	mov.w	r3, #0
 80009ae:	3a01      	subs	r2, #1
 80009b0:	e737      	b.n	8000822 <__aeabi_fmul+0x92>
 80009b2:	f092 0f00 	teq	r2, #0
 80009b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009ba:	bf02      	ittt	eq
 80009bc:	0040      	lsleq	r0, r0, #1
 80009be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009c2:	3a01      	subeq	r2, #1
 80009c4:	d0f9      	beq.n	80009ba <__aeabi_fdiv+0xc2>
 80009c6:	ea40 000c 	orr.w	r0, r0, ip
 80009ca:	f093 0f00 	teq	r3, #0
 80009ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d2:	bf02      	ittt	eq
 80009d4:	0049      	lsleq	r1, r1, #1
 80009d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009da:	3b01      	subeq	r3, #1
 80009dc:	d0f9      	beq.n	80009d2 <__aeabi_fdiv+0xda>
 80009de:	ea41 010c 	orr.w	r1, r1, ip
 80009e2:	e795      	b.n	8000910 <__aeabi_fdiv+0x18>
 80009e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009e8:	ea92 0f0c 	teq	r2, ip
 80009ec:	d108      	bne.n	8000a00 <__aeabi_fdiv+0x108>
 80009ee:	0242      	lsls	r2, r0, #9
 80009f0:	f47f af7d 	bne.w	80008ee <__aeabi_fmul+0x15e>
 80009f4:	ea93 0f0c 	teq	r3, ip
 80009f8:	f47f af70 	bne.w	80008dc <__aeabi_fmul+0x14c>
 80009fc:	4608      	mov	r0, r1
 80009fe:	e776      	b.n	80008ee <__aeabi_fmul+0x15e>
 8000a00:	ea93 0f0c 	teq	r3, ip
 8000a04:	d104      	bne.n	8000a10 <__aeabi_fdiv+0x118>
 8000a06:	024b      	lsls	r3, r1, #9
 8000a08:	f43f af4c 	beq.w	80008a4 <__aeabi_fmul+0x114>
 8000a0c:	4608      	mov	r0, r1
 8000a0e:	e76e      	b.n	80008ee <__aeabi_fmul+0x15e>
 8000a10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a14:	bf18      	it	ne
 8000a16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a1a:	d1ca      	bne.n	80009b2 <__aeabi_fdiv+0xba>
 8000a1c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a20:	f47f af5c 	bne.w	80008dc <__aeabi_fmul+0x14c>
 8000a24:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a28:	f47f af3c 	bne.w	80008a4 <__aeabi_fmul+0x114>
 8000a2c:	e75f      	b.n	80008ee <__aeabi_fmul+0x15e>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_f2iz>:
 8000a30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a38:	d30f      	bcc.n	8000a5a <__aeabi_f2iz+0x2a>
 8000a3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a42:	d90d      	bls.n	8000a60 <__aeabi_f2iz+0x30>
 8000a44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a50:	fa23 f002 	lsr.w	r0, r3, r2
 8000a54:	bf18      	it	ne
 8000a56:	4240      	negne	r0, r0
 8000a58:	4770      	bx	lr
 8000a5a:	f04f 0000 	mov.w	r0, #0
 8000a5e:	4770      	bx	lr
 8000a60:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a64:	d101      	bne.n	8000a6a <__aeabi_f2iz+0x3a>
 8000a66:	0242      	lsls	r2, r0, #9
 8000a68:	d105      	bne.n	8000a76 <__aeabi_f2iz+0x46>
 8000a6a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000a6e:	bf08      	it	eq
 8000a70:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <LoRa_RX>:

//----------------------------------------------------------------------------------------
// for receiving data from LoRa module using one function
// "flag" needed for start or stop this function
void LoRa_RX(bool flag)
{
 8000a7c:	b5b0      	push	{r4, r5, r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
	static bool flag_first_time = true;								// Trigger variable
	char str_1[25] = {0};
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
 8000a9a:	751a      	strb	r2, [r3, #20]

	if((flag_first_time == true) && (flag == true))					// Do it only first time (init LoRa RX )
 8000a9c:	4b4f      	ldr	r3, [pc, #316]	; (8000bdc <LoRa_RX+0x160>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d02f      	beq.n	8000b04 <LoRa_RX+0x88>
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d02c      	beq.n	8000b04 <LoRa_RX+0x88>
	{
		HAL_Delay(100);
 8000aaa:	2064      	movs	r0, #100	; 0x64
 8000aac:	f004 fa1e 	bl	8004eec <HAL_Delay>
		init_lora_RX();
 8000ab0:	f000 fbf6 	bl	80012a0 <init_lora_RX>
		HAL_Delay(500);
 8000ab4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab8:	f004 fa18 	bl	8004eec <HAL_Delay>

		ssd1306_SetCursor(0, 16);
 8000abc:	2110      	movs	r1, #16
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f001 fd24 	bl	800250c <ssd1306_SetCursor>
		strcpy(str_1, "Receiving data:");
 8000ac4:	f107 0308 	add.w	r3, r7, #8
 8000ac8:	4a45      	ldr	r2, [pc, #276]	; (8000be0 <LoRa_RX+0x164>)
 8000aca:	461c      	mov	r4, r3
 8000acc:	4613      	mov	r3, r2
 8000ace:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ad0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000ad4:	4a43      	ldr	r2, [pc, #268]	; (8000be4 <LoRa_RX+0x168>)
 8000ad6:	f107 0008 	add.w	r0, r7, #8
 8000ada:	2301      	movs	r3, #1
 8000adc:	ca06      	ldmia	r2, {r1, r2}
 8000ade:	f001 fcef 	bl	80024c0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000ae2:	f001 fbdd 	bl	80022a0 <ssd1306_UpdateScreen>

		HAL_UART_Receive_IT(&huart1, str, 1);						// Refresh interrupt
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	493f      	ldr	r1, [pc, #252]	; (8000be8 <LoRa_RX+0x16c>)
 8000aea:	4840      	ldr	r0, [pc, #256]	; (8000bec <LoRa_RX+0x170>)
 8000aec:	f007 f923 	bl	8007d36 <HAL_UART_Receive_IT>
		memset(str_1, 0, sizeof(str_1));
 8000af0:	f107 0308 	add.w	r3, r7, #8
 8000af4:	2219      	movs	r2, #25
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f007 fd7d 	bl	80085f8 <memset>
		flag_first_time = false;
 8000afe:	4b37      	ldr	r3, [pc, #220]	; (8000bdc <LoRa_RX+0x160>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
	}
	if((flag_first_time == false) && (flag == true))				// Do it when data was received
 8000b04:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <LoRa_RX+0x160>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	f083 0301 	eor.w	r3, r3, #1
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d057      	beq.n	8000bc2 <LoRa_RX+0x146>
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d054      	beq.n	8000bc2 <LoRa_RX+0x146>
	{
		if(flag_command_received == true)							// If data is ready
 8000b18:	4b35      	ldr	r3, [pc, #212]	; (8000bf0 <LoRa_RX+0x174>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d050      	beq.n	8000bc2 <LoRa_RX+0x146>
		{
			// Clean data place on OLED
			strcpy(str_1, "                       ");
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	4a33      	ldr	r2, [pc, #204]	; (8000bf4 <LoRa_RX+0x178>)
 8000b26:	461c      	mov	r4, r3
 8000b28:	4615      	mov	r5, r2
 8000b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b32:	e884 0003 	stmia.w	r4, {r0, r1}
			ssd1306_SetCursor(0, 28);
 8000b36:	211c      	movs	r1, #28
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f001 fce7 	bl	800250c <ssd1306_SetCursor>
			ssd1306_WriteString(str_1,  Font_7x10, White);
 8000b3e:	4a29      	ldr	r2, [pc, #164]	; (8000be4 <LoRa_RX+0x168>)
 8000b40:	f107 0008 	add.w	r0, r7, #8
 8000b44:	2301      	movs	r3, #1
 8000b46:	ca06      	ldmia	r2, {r1, r2}
 8000b48:	f001 fcba 	bl	80024c0 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000b4c:	f001 fba8 	bl	80022a0 <ssd1306_UpdateScreen>

			// Print received data
			// Delete first element of array (because sometimes first element of array can be '\0' it will break down ssd1306_WriteString function)
			ssd1306_SetCursor(0, 28);
 8000b50:	211c      	movs	r1, #28
 8000b52:	2000      	movs	r0, #0
 8000b54:	f001 fcda 	bl	800250c <ssd1306_SetCursor>
			int i = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
			for(i = 0; i <= sizeof(str_1); i++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b60:	e013      	b.n	8000b8a <LoRa_RX+0x10e>
			{
				if(i == 0)								// Delay first element of array
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <LoRa_RX+0xf2>
				{
					i++;
 8000b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
				}
				str_1[i-1] = uart_rx_data[i];
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	3b01      	subs	r3, #1
 8000b72:	4921      	ldr	r1, [pc, #132]	; (8000bf8 <LoRa_RX+0x17c>)
 8000b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b76:	440a      	add	r2, r1
 8000b78:	7812      	ldrb	r2, [r2, #0]
 8000b7a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b7e:	440b      	add	r3, r1
 8000b80:	f803 2c20 	strb.w	r2, [r3, #-32]
			for(i = 0; i <= sizeof(str_1); i++)
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	3301      	adds	r3, #1
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8c:	2b19      	cmp	r3, #25
 8000b8e:	d9e8      	bls.n	8000b62 <LoRa_RX+0xe6>
			}
			ssd1306_WriteString(str_1,  Font_7x10, White);
 8000b90:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <LoRa_RX+0x168>)
 8000b92:	f107 0008 	add.w	r0, r7, #8
 8000b96:	2301      	movs	r3, #1
 8000b98:	ca06      	ldmia	r2, {r1, r2}
 8000b9a:	f001 fc91 	bl	80024c0 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000b9e:	f001 fb7f 	bl	80022a0 <ssd1306_UpdateScreen>

			HAL_Delay(100);
 8000ba2:	2064      	movs	r0, #100	; 0x64
 8000ba4:	f004 f9a2 	bl	8004eec <HAL_Delay>
			flag_command_received = false;							// Set flag. Set show? that data was printed
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <LoRa_RX+0x174>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
			memset(uart_rx_data, 0, sizeof(uart_rx_data));			// Cleaning buffer where was received data (From HAL_UART_RxCpltCallback)
 8000bae:	2232      	movs	r2, #50	; 0x32
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4811      	ldr	r0, [pc, #68]	; (8000bf8 <LoRa_RX+0x17c>)
 8000bb4:	f007 fd20 	bl	80085f8 <memset>
			HAL_UART_Receive_IT(&huart1, str, 1);					// Start interrupt again
 8000bb8:	2201      	movs	r2, #1
 8000bba:	490b      	ldr	r1, [pc, #44]	; (8000be8 <LoRa_RX+0x16c>)
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <LoRa_RX+0x170>)
 8000bbe:	f007 f8ba 	bl	8007d36 <HAL_UART_Receive_IT>
		}
	}
	if(flag == false)												// Stop function
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f083 0301 	eor.w	r3, r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d002      	beq.n	8000bd4 <LoRa_RX+0x158>
	{
		flag_first_time = true;
 8000bce:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <LoRa_RX+0x160>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	701a      	strb	r2, [r3, #0]
	}
}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	; 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bdb0      	pop	{r4, r5, r7, pc}
 8000bdc:	20000004 	.word	0x20000004
 8000be0:	08008f40 	.word	0x08008f40
 8000be4:	2000001c 	.word	0x2000001c
 8000be8:	20000588 	.word	0x20000588
 8000bec:	20000660 	.word	0x20000660
 8000bf0:	20000589 	.word	0x20000589
 8000bf4:	08008f50 	.word	0x08008f50
 8000bf8:	20000554 	.word	0x20000554

08000bfc <LoRa_TX_send_test_number>:
// -------------------------------------------------------------------------------
// Sent test one test number and increment it every time. tx_lora_data
void LoRa_TX_send_test_number(bool flag)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
	static bool flag_first_time = true;								// Trigger variable
	char str_1[20] = {0};
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]

	if((flag_first_time == true) && (flag == true))					// Do it only first time (init)
 8000c18:	4b59      	ldr	r3, [pc, #356]	; (8000d80 <LoRa_TX_send_test_number+0x184>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d047      	beq.n	8000cb0 <LoRa_TX_send_test_number+0xb4>
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d044      	beq.n	8000cb0 <LoRa_TX_send_test_number+0xb4>
	{
		memset(uart_rx_data, 0, sizeof(uart_rx_data)); 				// Clean buf
 8000c26:	2232      	movs	r2, #50	; 0x32
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4856      	ldr	r0, [pc, #344]	; (8000d84 <LoRa_TX_send_test_number+0x188>)
 8000c2c:	f007 fce4 	bl	80085f8 <memset>

		HAL_Delay(100);
 8000c30:	2064      	movs	r0, #100	; 0x64
 8000c32:	f004 f95b 	bl	8004eec <HAL_Delay>
		init_lora_TX();
 8000c36:	f000 faeb 	bl	8001210 <init_lora_TX>
		HAL_Delay(500);
 8000c3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c3e:	f004 f955 	bl	8004eec <HAL_Delay>

		ssd1306_SetCursor(0, 16);
 8000c42:	2110      	movs	r1, #16
 8000c44:	2000      	movs	r0, #0
 8000c46:	f001 fc61 	bl	800250c <ssd1306_SetCursor>
		strcpy(str_1, "TX count:");
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	4a4e      	ldr	r2, [pc, #312]	; (8000d88 <LoRa_TX_send_test_number+0x18c>)
 8000c50:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c52:	c303      	stmia	r3!, {r0, r1}
 8000c54:	801a      	strh	r2, [r3, #0]
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000c56:	4a4d      	ldr	r2, [pc, #308]	; (8000d8c <LoRa_TX_send_test_number+0x190>)
 8000c58:	f107 000c 	add.w	r0, r7, #12
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	ca06      	ldmia	r2, {r1, r2}
 8000c60:	f001 fc2e 	bl	80024c0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000c64:	f001 fb1c 	bl	80022a0 <ssd1306_UpdateScreen>

		memset(str_1, 0, sizeof(str_1));
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	2214      	movs	r2, #20
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f007 fcc1 	bl	80085f8 <memset>
		ssd1306_SetCursor(0, 28);
 8000c76:	211c      	movs	r1, #28
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f001 fc47 	bl	800250c <ssd1306_SetCursor>
		strcpy(str_1, "Data:");
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	4a43      	ldr	r2, [pc, #268]	; (8000d90 <LoRa_TX_send_test_number+0x194>)
 8000c84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c88:	6018      	str	r0, [r3, #0]
 8000c8a:	3304      	adds	r3, #4
 8000c8c:	8019      	strh	r1, [r3, #0]
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000c8e:	4a3f      	ldr	r2, [pc, #252]	; (8000d8c <LoRa_TX_send_test_number+0x190>)
 8000c90:	f107 000c 	add.w	r0, r7, #12
 8000c94:	2301      	movs	r3, #1
 8000c96:	ca06      	ldmia	r2, {r1, r2}
 8000c98:	f001 fc12 	bl	80024c0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000c9c:	f001 fb00 	bl	80022a0 <ssd1306_UpdateScreen>

		HAL_UART_Receive_IT(&huart1, str, 1);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	493c      	ldr	r1, [pc, #240]	; (8000d94 <LoRa_TX_send_test_number+0x198>)
 8000ca4:	483c      	ldr	r0, [pc, #240]	; (8000d98 <LoRa_TX_send_test_number+0x19c>)
 8000ca6:	f007 f846 	bl	8007d36 <HAL_UART_Receive_IT>
		flag_first_time = false;
 8000caa:	4b35      	ldr	r3, [pc, #212]	; (8000d80 <LoRa_TX_send_test_number+0x184>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
	}
	if((flag_first_time == false) && (flag == true))				// Repeat it part for transmit data
 8000cb0:	4b33      	ldr	r3, [pc, #204]	; (8000d80 <LoRa_TX_send_test_number+0x184>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	f083 0301 	eor.w	r3, r3, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d04d      	beq.n	8000d5a <LoRa_TX_send_test_number+0x15e>
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d04a      	beq.n	8000d5a <LoRa_TX_send_test_number+0x15e>
	{
		lora_transmit_data(tx_lora_data);
 8000cc4:	4b35      	ldr	r3, [pc, #212]	; (8000d9c <LoRa_TX_send_test_number+0x1a0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 f86d 	bl	8000da8 <lora_transmit_data>


		// Print transmitter counter
		memset(str_1, 0, sizeof(str_1));
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	2214      	movs	r2, #20
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f007 fc8e 	bl	80085f8 <memset>
		ssd1306_SetCursor(70, 16);
 8000cdc:	2110      	movs	r1, #16
 8000cde:	2046      	movs	r0, #70	; 0x46
 8000ce0:	f001 fc14 	bl	800250c <ssd1306_SetCursor>
		sprintf(str_1, "%d", transmit_count);
 8000ce4:	4b2e      	ldr	r3, [pc, #184]	; (8000da0 <LoRa_TX_send_test_number+0x1a4>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	492d      	ldr	r1, [pc, #180]	; (8000da4 <LoRa_TX_send_test_number+0x1a8>)
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f007 fd40 	bl	8008774 <siprintf>
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000cf4:	4a25      	ldr	r2, [pc, #148]	; (8000d8c <LoRa_TX_send_test_number+0x190>)
 8000cf6:	f107 000c 	add.w	r0, r7, #12
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	ca06      	ldmia	r2, {r1, r2}
 8000cfe:	f001 fbdf 	bl	80024c0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000d02:	f001 facd 	bl	80022a0 <ssd1306_UpdateScreen>

		// Print transmitter data
		memset(str_1, 0, sizeof(str_1));
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	2214      	movs	r2, #20
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f007 fc72 	bl	80085f8 <memset>
		ssd1306_SetCursor(35, 28);
 8000d14:	211c      	movs	r1, #28
 8000d16:	2023      	movs	r0, #35	; 0x23
 8000d18:	f001 fbf8 	bl	800250c <ssd1306_SetCursor>
		sprintf(str_1, "%d", tx_lora_data);
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <LoRa_TX_send_test_number+0x1a0>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	491f      	ldr	r1, [pc, #124]	; (8000da4 <LoRa_TX_send_test_number+0x1a8>)
 8000d26:	4618      	mov	r0, r3
 8000d28:	f007 fd24 	bl	8008774 <siprintf>
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000d2c:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <LoRa_TX_send_test_number+0x190>)
 8000d2e:	f107 000c 	add.w	r0, r7, #12
 8000d32:	2301      	movs	r3, #1
 8000d34:	ca06      	ldmia	r2, {r1, r2}
 8000d36:	f001 fbc3 	bl	80024c0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000d3a:	f001 fab1 	bl	80022a0 <ssd1306_UpdateScreen>

		tx_lora_data++;
 8000d3e:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <LoRa_TX_send_test_number+0x1a0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	4a15      	ldr	r2, [pc, #84]	; (8000d9c <LoRa_TX_send_test_number+0x1a0>)
 8000d46:	6013      	str	r3, [r2, #0]
		transmit_count++;											// Increment test data
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <LoRa_TX_send_test_number+0x1a4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <LoRa_TX_send_test_number+0x1a4>)
 8000d50:	6013      	str	r3, [r2, #0]
		HAL_Delay(2000);											// Must be more than 1.5 sec
 8000d52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d56:	f004 f8c9 	bl	8004eec <HAL_Delay>
	}
	if(flag == false)
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f083 0301 	eor.w	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d008      	beq.n	8000d78 <LoRa_TX_send_test_number+0x17c>
	{
		flag_first_time = true;
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <LoRa_TX_send_test_number+0x184>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	701a      	strb	r2, [r3, #0]
		transmit_count = 1;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <LoRa_TX_send_test_number+0x1a4>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
		tx_lora_data = 0;											// Every time count will be start from 1
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <LoRa_TX_send_test_number+0x1a0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
	}
}
 8000d78:	bf00      	nop
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000005 	.word	0x20000005
 8000d84:	20000554 	.word	0x20000554
 8000d88:	08008f68 	.word	0x08008f68
 8000d8c:	2000001c 	.word	0x2000001c
 8000d90:	08008f74 	.word	0x08008f74
 8000d94:	20000588 	.word	0x20000588
 8000d98:	20000660 	.word	0x20000660
 8000d9c:	200000d0 	.word	0x200000d0
 8000da0:	20000000 	.word	0x20000000
 8000da4:	08008f7c 	.word	0x08008f7c

08000da8 <lora_transmit_data>:
//----------------------------------------------------------------------------------------
void lora_transmit_data(int transmit_count)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	static uint8_t data[10] = {0};

	data[5] = '0' + transmit_count%10;
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	4b47      	ldr	r3, [pc, #284]	; (8000ed0 <lora_transmit_data+0x128>)
 8000db4:	fb83 1302 	smull	r1, r3, r3, r2
 8000db8:	1099      	asrs	r1, r3, #2
 8000dba:	17d3      	asrs	r3, r2, #31
 8000dbc:	1ac9      	subs	r1, r1, r3
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	1ad1      	subs	r1, r2, r3
 8000dc8:	b2cb      	uxtb	r3, r1
 8000dca:	3330      	adds	r3, #48	; 0x30
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b41      	ldr	r3, [pc, #260]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000dd0:	715a      	strb	r2, [r3, #5]
	data[4] = '0' + (transmit_count/10) % 10;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a3e      	ldr	r2, [pc, #248]	; (8000ed0 <lora_transmit_data+0x128>)
 8000dd6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dda:	1092      	asrs	r2, r2, #2
 8000ddc:	17db      	asrs	r3, r3, #31
 8000dde:	1ad2      	subs	r2, r2, r3
 8000de0:	4b3b      	ldr	r3, [pc, #236]	; (8000ed0 <lora_transmit_data+0x128>)
 8000de2:	fb83 1302 	smull	r1, r3, r3, r2
 8000de6:	1099      	asrs	r1, r3, #2
 8000de8:	17d3      	asrs	r3, r2, #31
 8000dea:	1ac9      	subs	r1, r1, r3
 8000dec:	460b      	mov	r3, r1
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	440b      	add	r3, r1
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	1ad1      	subs	r1, r2, r3
 8000df6:	b2cb      	uxtb	r3, r1
 8000df8:	3330      	adds	r3, #48	; 0x30
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b35      	ldr	r3, [pc, #212]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000dfe:	711a      	strb	r2, [r3, #4]
	data[3] = '0' + (transmit_count/100) % 10;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a35      	ldr	r2, [pc, #212]	; (8000ed8 <lora_transmit_data+0x130>)
 8000e04:	fb82 1203 	smull	r1, r2, r2, r3
 8000e08:	1152      	asrs	r2, r2, #5
 8000e0a:	17db      	asrs	r3, r3, #31
 8000e0c:	1ad2      	subs	r2, r2, r3
 8000e0e:	4b30      	ldr	r3, [pc, #192]	; (8000ed0 <lora_transmit_data+0x128>)
 8000e10:	fb83 1302 	smull	r1, r3, r3, r2
 8000e14:	1099      	asrs	r1, r3, #2
 8000e16:	17d3      	asrs	r3, r2, #31
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	440b      	add	r3, r1
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	1ad1      	subs	r1, r2, r3
 8000e24:	b2cb      	uxtb	r3, r1
 8000e26:	3330      	adds	r3, #48	; 0x30
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000e2c:	70da      	strb	r2, [r3, #3]
	data[2] = '0' + (transmit_count/1000) % 10;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a2a      	ldr	r2, [pc, #168]	; (8000edc <lora_transmit_data+0x134>)
 8000e32:	fb82 1203 	smull	r1, r2, r2, r3
 8000e36:	1192      	asrs	r2, r2, #6
 8000e38:	17db      	asrs	r3, r3, #31
 8000e3a:	1ad2      	subs	r2, r2, r3
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <lora_transmit_data+0x128>)
 8000e3e:	fb83 1302 	smull	r1, r3, r3, r2
 8000e42:	1099      	asrs	r1, r3, #2
 8000e44:	17d3      	asrs	r3, r2, #31
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	460b      	mov	r3, r1
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	1ad1      	subs	r1, r2, r3
 8000e52:	b2cb      	uxtb	r3, r1
 8000e54:	3330      	adds	r3, #48	; 0x30
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000e5a:	709a      	strb	r2, [r3, #2]
	data[1] = '0' + (transmit_count/10000) % 10;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <lora_transmit_data+0x138>)
 8000e60:	fb82 1203 	smull	r1, r2, r2, r3
 8000e64:	1312      	asrs	r2, r2, #12
 8000e66:	17db      	asrs	r3, r3, #31
 8000e68:	1ad2      	subs	r2, r2, r3
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <lora_transmit_data+0x128>)
 8000e6c:	fb83 1302 	smull	r1, r3, r3, r2
 8000e70:	1099      	asrs	r1, r3, #2
 8000e72:	17d3      	asrs	r3, r2, #31
 8000e74:	1ac9      	subs	r1, r1, r3
 8000e76:	460b      	mov	r3, r1
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	1ad1      	subs	r1, r2, r3
 8000e80:	b2cb      	uxtb	r3, r1
 8000e82:	3330      	adds	r3, #48	; 0x30
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000e88:	705a      	strb	r2, [r3, #1]
	data[0] = '0' + (transmit_count/100000) % 10;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a15      	ldr	r2, [pc, #84]	; (8000ee4 <lora_transmit_data+0x13c>)
 8000e8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e92:	1352      	asrs	r2, r2, #13
 8000e94:	17db      	asrs	r3, r3, #31
 8000e96:	1ad2      	subs	r2, r2, r3
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <lora_transmit_data+0x128>)
 8000e9a:	fb83 1302 	smull	r1, r3, r3, r2
 8000e9e:	1099      	asrs	r1, r3, #2
 8000ea0:	17d3      	asrs	r3, r2, #31
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	1ad1      	subs	r1, r2, r3
 8000eae:	b2cb      	uxtb	r3, r1
 8000eb0:	3330      	adds	r3, #48	; 0x30
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000eb6:	701a      	strb	r2, [r3, #0]
	data[6] = '\n';
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000eba:	220a      	movs	r2, #10
 8000ebc:	719a      	strb	r2, [r3, #6]

	HAL_UART_Transmit_IT(&huart1, data, 7);
 8000ebe:	2207      	movs	r2, #7
 8000ec0:	4904      	ldr	r1, [pc, #16]	; (8000ed4 <lora_transmit_data+0x12c>)
 8000ec2:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <lora_transmit_data+0x140>)
 8000ec4:	f006 fef3 	bl	8007cae <HAL_UART_Transmit_IT>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	66666667 	.word	0x66666667
 8000ed4:	200000d4 	.word	0x200000d4
 8000ed8:	51eb851f 	.word	0x51eb851f
 8000edc:	10624dd3 	.word	0x10624dd3
 8000ee0:	68db8bad 	.word	0x68db8bad
 8000ee4:	14f8b589 	.word	0x14f8b589
 8000ee8:	20000660 	.word	0x20000660

08000eec <LoRa_TX_send_T_and_H>:
// -------------------------------------------------------------------------------
void LoRa_TX_send_T_and_H(bool flag)   // Зробити пересилання стрінги !!!!
{
 8000eec:	b5b0      	push	{r4, r5, r7, lr}
 8000eee:	b094      	sub	sp, #80	; 0x50
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	static bool flag_first_time = true;								// Trigger variable
	//static int transmit_count = 0;									// Variable for transmit
	char str_1[20] = {0};
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000efa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]

	if((flag_first_time == true) && (flag == true))					// Do it only first time (init)
 8000f08:	4ba3      	ldr	r3, [pc, #652]	; (8001198 <LoRa_TX_send_T_and_H+0x2ac>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d04c      	beq.n	8000faa <LoRa_TX_send_T_and_H+0xbe>
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d049      	beq.n	8000faa <LoRa_TX_send_T_and_H+0xbe>
	{
		memset(uart_rx_data, 0, sizeof(uart_rx_data));//uart_rx_data[50]
 8000f16:	2232      	movs	r2, #50	; 0x32
 8000f18:	2100      	movs	r1, #0
 8000f1a:	48a0      	ldr	r0, [pc, #640]	; (800119c <LoRa_TX_send_T_and_H+0x2b0>)
 8000f1c:	f007 fb6c 	bl	80085f8 <memset>

		HAL_Delay(100);
 8000f20:	2064      	movs	r0, #100	; 0x64
 8000f22:	f003 ffe3 	bl	8004eec <HAL_Delay>
		init_lora_TX();
 8000f26:	f000 f973 	bl	8001210 <init_lora_TX>
		HAL_Delay(500);
 8000f2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f2e:	f003 ffdd 	bl	8004eec <HAL_Delay>

		ssd1306_SetCursor(0, 16);
 8000f32:	2110      	movs	r1, #16
 8000f34:	2000      	movs	r0, #0
 8000f36:	f001 fae9 	bl	800250c <ssd1306_SetCursor>
		strcpy(str_1, "TX count:");
 8000f3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f3e:	4a98      	ldr	r2, [pc, #608]	; (80011a0 <LoRa_TX_send_T_and_H+0x2b4>)
 8000f40:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f42:	c303      	stmia	r3!, {r0, r1}
 8000f44:	801a      	strh	r2, [r3, #0]
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000f46:	4a97      	ldr	r2, [pc, #604]	; (80011a4 <LoRa_TX_send_T_and_H+0x2b8>)
 8000f48:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	ca06      	ldmia	r2, {r1, r2}
 8000f50:	f001 fab6 	bl	80024c0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000f54:	f001 f9a4 	bl	80022a0 <ssd1306_UpdateScreen>

		memset(str_1, 0, sizeof(str_1));
 8000f58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f5c:	2214      	movs	r2, #20
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f007 fb49 	bl	80085f8 <memset>
		ssd1306_SetCursor(0, 28);
 8000f66:	211c      	movs	r1, #28
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f001 facf 	bl	800250c <ssd1306_SetCursor>
		strcpy(str_1, "Transmitting data:");
 8000f6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f72:	4a8d      	ldr	r2, [pc, #564]	; (80011a8 <LoRa_TX_send_T_and_H+0x2bc>)
 8000f74:	461c      	mov	r4, r3
 8000f76:	4615      	mov	r5, r2
 8000f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7c:	682b      	ldr	r3, [r5, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	8022      	strh	r2, [r4, #0]
 8000f82:	3402      	adds	r4, #2
 8000f84:	0c1b      	lsrs	r3, r3, #16
 8000f86:	7023      	strb	r3, [r4, #0]
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8000f88:	4a86      	ldr	r2, [pc, #536]	; (80011a4 <LoRa_TX_send_T_and_H+0x2b8>)
 8000f8a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000f8e:	2301      	movs	r3, #1
 8000f90:	ca06      	ldmia	r2, {r1, r2}
 8000f92:	f001 fa95 	bl	80024c0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000f96:	f001 f983 	bl	80022a0 <ssd1306_UpdateScreen>

		HAL_UART_Receive_IT(&huart1, str, 1);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4983      	ldr	r1, [pc, #524]	; (80011ac <LoRa_TX_send_T_and_H+0x2c0>)
 8000f9e:	4884      	ldr	r0, [pc, #528]	; (80011b0 <LoRa_TX_send_T_and_H+0x2c4>)
 8000fa0:	f006 fec9 	bl	8007d36 <HAL_UART_Receive_IT>
		flag_first_time = false;
 8000fa4:	4b7c      	ldr	r3, [pc, #496]	; (8001198 <LoRa_TX_send_T_and_H+0x2ac>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
	}
	if((flag_first_time == false) && (flag == true))				// Repeat it part for transmit data
 8000faa:	4b7b      	ldr	r3, [pc, #492]	; (8001198 <LoRa_TX_send_T_and_H+0x2ac>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	f083 0301 	eor.w	r3, r3, #1
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 80df 	beq.w	8001178 <LoRa_TX_send_T_and_H+0x28c>
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80db 	beq.w	8001178 <LoRa_TX_send_T_and_H+0x28c>
	{
		// Message look like this:
		// counter| T = 25C H = 55%'\n'
		char str_main_buf[35] = {0};
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	221f      	movs	r2, #31
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f007 fb12 	bl	80085f8 <memset>
		char str_buf[10] = {0};
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	633b      	str	r3, [r7, #48]	; 0x30
 8000fd8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	809a      	strh	r2, [r3, #4]
		// Add counter to string
		itoa(transmit_count, str_buf, 10);
 8000fe2:	4b74      	ldr	r3, [pc, #464]	; (80011b4 <LoRa_TX_send_T_and_H+0x2c8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000fea:	220a      	movs	r2, #10
 8000fec:	4618      	mov	r0, r3
 8000fee:	f007 faf3 	bl	80085d8 <itoa>
		strcat(str_main_buf, str_buf);
 8000ff2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f007 fbd9 	bl	80087b4 <strcat>
		memset(str_buf, 0, sizeof(str_buf));
 8001002:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001006:	220a      	movs	r2, #10
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f007 faf4 	bl	80085f8 <memset>
		// Add temperature to string
		strcat(str_main_buf, "| T=");
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff f899 	bl	800014c <strlen>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	4413      	add	r3, r2
 8001024:	4a64      	ldr	r2, [pc, #400]	; (80011b8 <LoRa_TX_send_T_and_H+0x2cc>)
 8001026:	6810      	ldr	r0, [r2, #0]
 8001028:	6018      	str	r0, [r3, #0]
 800102a:	7912      	ldrb	r2, [r2, #4]
 800102c:	711a      	strb	r2, [r3, #4]
		itoa(am3202_sensor.temterature, str_buf, 10);
 800102e:	4b63      	ldr	r3, [pc, #396]	; (80011bc <LoRa_TX_send_T_and_H+0x2d0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001036:	220a      	movs	r2, #10
 8001038:	4618      	mov	r0, r3
 800103a:	f007 facd 	bl	80085d8 <itoa>
		strcat(str_main_buf, str_buf);
 800103e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f007 fbb3 	bl	80087b4 <strcat>
		memset(str_buf, 0, sizeof(str_buf));
 800104e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001052:	220a      	movs	r2, #10
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f007 face 	bl	80085f8 <memset>
		strcat(str_main_buf, "C");
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff f873 	bl	800014c <strlen>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4413      	add	r3, r2
 8001070:	4953      	ldr	r1, [pc, #332]	; (80011c0 <LoRa_TX_send_T_and_H+0x2d4>)
 8001072:	461a      	mov	r2, r3
 8001074:	460b      	mov	r3, r1
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	8013      	strh	r3, [r2, #0]
		// Add humidity to string
		strcat(str_main_buf, " H=");
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff f864 	bl	800014c <strlen>
 8001084:	4603      	mov	r3, r0
 8001086:	461a      	mov	r2, r3
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	4413      	add	r3, r2
 800108e:	4a4d      	ldr	r2, [pc, #308]	; (80011c4 <LoRa_TX_send_T_and_H+0x2d8>)
 8001090:	6810      	ldr	r0, [r2, #0]
 8001092:	6018      	str	r0, [r3, #0]
		itoa(am3202_sensor.humidity, str_buf, 10);
 8001094:	4b49      	ldr	r3, [pc, #292]	; (80011bc <LoRa_TX_send_T_and_H+0x2d0>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800109c:	220a      	movs	r2, #10
 800109e:	4618      	mov	r0, r3
 80010a0:	f007 fa9a 	bl	80085d8 <itoa>
		strcat(str_main_buf, str_buf);
 80010a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4611      	mov	r1, r2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f007 fb80 	bl	80087b4 <strcat>
		memset(str_buf, 0, sizeof(str_buf));
 80010b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b8:	220a      	movs	r2, #10
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f007 fa9b 	bl	80085f8 <memset>
		strcat(str_main_buf, "%");
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff f840 	bl	800014c <strlen>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	4413      	add	r3, r2
 80010d6:	493c      	ldr	r1, [pc, #240]	; (80011c8 <LoRa_TX_send_T_and_H+0x2dc>)
 80010d8:	461a      	mov	r2, r3
 80010da:	460b      	mov	r3, r1
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	8013      	strh	r3, [r2, #0]

		// Print transmitter data
		ssd1306_SetCursor(0, 40);
 80010e0:	2128      	movs	r1, #40	; 0x28
 80010e2:	2000      	movs	r0, #0
 80010e4:	f001 fa12 	bl	800250c <ssd1306_SetCursor>
		ssd1306_WriteString(str_main_buf,  Font_7x10, White);
 80010e8:	4a2e      	ldr	r2, [pc, #184]	; (80011a4 <LoRa_TX_send_T_and_H+0x2b8>)
 80010ea:	f107 000c 	add.w	r0, r7, #12
 80010ee:	2301      	movs	r3, #1
 80010f0:	ca06      	ldmia	r2, {r1, r2}
 80010f2:	f001 f9e5 	bl	80024c0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80010f6:	f001 f8d3 	bl	80022a0 <ssd1306_UpdateScreen>

		// Add end of line to string
		strcat(str_main_buf, "\n");				// Add stop
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f824 	bl	800014c <strlen>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	4413      	add	r3, r2
 800110e:	492f      	ldr	r1, [pc, #188]	; (80011cc <LoRa_TX_send_T_and_H+0x2e0>)
 8001110:	461a      	mov	r2, r3
 8001112:	460b      	mov	r3, r1
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	8013      	strh	r3, [r2, #0]

		HAL_UART_Transmit_IT(&huart1, str_main_buf, sizeof(str_main_buf));				// Transmitting over LoRa module
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2223      	movs	r2, #35	; 0x23
 800111e:	4619      	mov	r1, r3
 8001120:	4823      	ldr	r0, [pc, #140]	; (80011b0 <LoRa_TX_send_T_and_H+0x2c4>)
 8001122:	f006 fdc4 	bl	8007cae <HAL_UART_Transmit_IT>
		HAL_Delay(2000);
 8001126:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800112a:	f003 fedf 	bl	8004eec <HAL_Delay>

		// Print transmitter counter
		memset(str_1, 0, sizeof(str_1));
 800112e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001132:	2214      	movs	r2, #20
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f007 fa5e 	bl	80085f8 <memset>
		ssd1306_SetCursor(70, 16);
 800113c:	2110      	movs	r1, #16
 800113e:	2046      	movs	r0, #70	; 0x46
 8001140:	f001 f9e4 	bl	800250c <ssd1306_SetCursor>
		sprintf(str_1, "%d", transmit_count);
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <LoRa_TX_send_T_and_H+0x2c8>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800114c:	4920      	ldr	r1, [pc, #128]	; (80011d0 <LoRa_TX_send_T_and_H+0x2e4>)
 800114e:	4618      	mov	r0, r3
 8001150:	f007 fb10 	bl	8008774 <siprintf>
		ssd1306_WriteString(str_1,  Font_7x10, White);
 8001154:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <LoRa_TX_send_T_and_H+0x2b8>)
 8001156:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800115a:	2301      	movs	r3, #1
 800115c:	ca06      	ldmia	r2, {r1, r2}
 800115e:	f001 f9af 	bl	80024c0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001162:	f001 f89d 	bl	80022a0 <ssd1306_UpdateScreen>

		transmit_count++;											// Increment test data
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <LoRa_TX_send_T_and_H+0x2c8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3301      	adds	r3, #1
 800116c:	4a11      	ldr	r2, [pc, #68]	; (80011b4 <LoRa_TX_send_T_and_H+0x2c8>)
 800116e:	6013      	str	r3, [r2, #0]
		HAL_Delay(2000);											// Must be more than 1.5 sec
 8001170:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001174:	f003 feba 	bl	8004eec <HAL_Delay>
	}
	if(flag == false)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f083 0301 	eor.w	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d005      	beq.n	8001190 <LoRa_TX_send_T_and_H+0x2a4>
	{
		flag_first_time = true;
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <LoRa_TX_send_T_and_H+0x2ac>)
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]
		transmit_count = 1;
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <LoRa_TX_send_T_and_H+0x2c8>)
 800118c:	2201      	movs	r2, #1
 800118e:	601a      	str	r2, [r3, #0]
	}
}
 8001190:	bf00      	nop
 8001192:	3750      	adds	r7, #80	; 0x50
 8001194:	46bd      	mov	sp, r7
 8001196:	bdb0      	pop	{r4, r5, r7, pc}
 8001198:	20000006 	.word	0x20000006
 800119c:	20000554 	.word	0x20000554
 80011a0:	08008f68 	.word	0x08008f68
 80011a4:	2000001c 	.word	0x2000001c
 80011a8:	08008f80 	.word	0x08008f80
 80011ac:	20000588 	.word	0x20000588
 80011b0:	20000660 	.word	0x20000660
 80011b4:	20000000 	.word	0x20000000
 80011b8:	08008f94 	.word	0x08008f94
 80011bc:	200005bc 	.word	0x200005bc
 80011c0:	08008f9c 	.word	0x08008f9c
 80011c4:	08008fa0 	.word	0x08008fa0
 80011c8:	08008fa4 	.word	0x08008fa4
 80011cc:	08008fa8 	.word	0x08008fa8
 80011d0:	08008f7c 	.word	0x08008f7c

080011d4 <read_all_settings_from_module>:
//-------------------------------------------------------------------------------------------------
void read_all_settings_from_module(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	// Turn on configuration mode
	set_config_deep_sleep_mode();
 80011d8:	f000 f8aa 	bl	8001330 <set_config_deep_sleep_mode>
	HAL_Delay(10);
 80011dc:	200a      	movs	r0, #10
 80011de:	f003 fe85 	bl	8004eec <HAL_Delay>

	static uint8_t data[10] = {0};
	// Read module address, serial port, and airspeed COMMAND
	data[0] = 0xC1;			// 0xC1 - Read register command
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <read_all_settings_from_module+0x34>)
 80011e4:	22c1      	movs	r2, #193	; 0xc1
 80011e6:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;			// Number of register for read
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <read_all_settings_from_module+0x34>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	705a      	strb	r2, [r3, #1]
	data[2] = 0x08;			// How many registers must be read
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <read_all_settings_from_module+0x34>)
 80011f0:	2208      	movs	r2, #8
 80011f2:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_IT(&huart1, data, 3);
 80011f4:	2203      	movs	r2, #3
 80011f6:	4904      	ldr	r1, [pc, #16]	; (8001208 <read_all_settings_from_module+0x34>)
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <read_all_settings_from_module+0x38>)
 80011fa:	f006 fd58 	bl	8007cae <HAL_UART_Transmit_IT>

	HAL_Delay(100);
 80011fe:	2064      	movs	r0, #100	; 0x64
 8001200:	f003 fe74 	bl	8004eec <HAL_Delay>

	// Return:
	// 0xC1 0x00 0x03 0x12 0x34 0x62
	// 0x12 0x34 - Adders 1234
	// 0x62 - 9600, 8n1 and 2,4 k air data rate
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200000e0 	.word	0x200000e0
 800120c:	20000660 	.word	0x20000660

08001210 <init_lora_TX>:
//----------------------------------------------------------------------------------------
bool init_lora_TX(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	// з зчитаними даними конфіг регістрів. Якщо співпадає повністю, тоді записати в
	// глобальну змінну що модуль ініціалізований нормально

	static uint8_t data[10] = {0};

	set_config_deep_sleep_mode();
 8001214:	f000 f88c 	bl	8001330 <set_config_deep_sleep_mode>
	HAL_Delay(100);
 8001218:	2064      	movs	r0, #100	; 0x64
 800121a:	f003 fe67 	bl	8004eec <HAL_Delay>

	// Init module
	// Descripe settings structure
	data[0] = 0xC0;		// 0xC0 - Set register command
 800121e:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <init_lora_TX+0x88>)
 8001220:	22c0      	movs	r2, #192	; 0xc0
 8001222:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;		// Starting address
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <init_lora_TX+0x88>)
 8001226:	2200      	movs	r2, #0
 8001228:	705a      	strb	r2, [r3, #1]
	data[2] = 0x03;		// Length
 800122a:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <init_lora_TX+0x88>)
 800122c:	2203      	movs	r2, #3
 800122e:	709a      	strb	r2, [r3, #2]
	data[3] = 0x12;		// 00H ADD H
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <init_lora_TX+0x88>)
 8001232:	2212      	movs	r2, #18
 8001234:	70da      	strb	r2, [r3, #3]
	data[4] = 0x34;		// 01H ADD L
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <init_lora_TX+0x88>)
 8001238:	2234      	movs	r2, #52	; 0x34
 800123a:	711a      	strb	r2, [r3, #4]
	data[5] = 0x62;		// 02H register (see in Datasheet)
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <init_lora_TX+0x88>)
 800123e:	2262      	movs	r2, #98	; 0x62
 8001240:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit_IT(&huart1, data, 6);
 8001242:	2206      	movs	r2, #6
 8001244:	4914      	ldr	r1, [pc, #80]	; (8001298 <init_lora_TX+0x88>)
 8001246:	4815      	ldr	r0, [pc, #84]	; (800129c <init_lora_TX+0x8c>)
 8001248:	f006 fd31 	bl	8007cae <HAL_UART_Transmit_IT>
	HAL_Delay(10);
 800124c:	200a      	movs	r0, #10
 800124e:	f003 fe4d 	bl	8004eec <HAL_Delay>

	memset(data, 0, sizeof(data));
 8001252:	220a      	movs	r2, #10
 8001254:	2100      	movs	r1, #0
 8001256:	4810      	ldr	r0, [pc, #64]	; (8001298 <init_lora_TX+0x88>)
 8001258:	f007 f9ce 	bl	80085f8 <memset>
	// Set WOR Cycle
	data[0] = 0xC0;		// 0xC0 - Set register command
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <init_lora_TX+0x88>)
 800125e:	22c0      	movs	r2, #192	; 0xc0
 8001260:	701a      	strb	r2, [r3, #0]
	data[1] = 0x05;		// Starting address
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <init_lora_TX+0x88>)
 8001264:	2205      	movs	r2, #5
 8001266:	705a      	strb	r2, [r3, #1]
	data[2] = 0x01;		// Length
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <init_lora_TX+0x88>)
 800126a:	2201      	movs	r2, #1
 800126c:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;		// set WOR Cycle 500ms
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <init_lora_TX+0x88>)
 8001270:	2200      	movs	r2, #0
 8001272:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart1, data, 4);
 8001274:	2204      	movs	r2, #4
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <init_lora_TX+0x88>)
 8001278:	4808      	ldr	r0, [pc, #32]	; (800129c <init_lora_TX+0x8c>)
 800127a:	f006 fd18 	bl	8007cae <HAL_UART_Transmit_IT>
	HAL_Delay(10);
 800127e:	200a      	movs	r0, #10
 8001280:	f003 fe34 	bl	8004eec <HAL_Delay>
	///////////////

	read_all_settings_from_module();
 8001284:	f7ff ffa6 	bl	80011d4 <read_all_settings_from_module>
	set_WOR_TX_mode();
 8001288:	f000 f876 	bl	8001378 <set_WOR_TX_mode>
	HAL_Delay(100);
 800128c:	2064      	movs	r0, #100	; 0x64
 800128e:	f003 fe2d 	bl	8004eec <HAL_Delay>

	return true;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200000ec 	.word	0x200000ec
 800129c:	20000660 	.word	0x20000660

080012a0 <init_lora_RX>:
//----------------------------------------------------------------------------------------
bool init_lora_RX(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	static uint8_t data[10] = {0};
	set_config_deep_sleep_mode();
 80012a4:	f000 f844 	bl	8001330 <set_config_deep_sleep_mode>
	HAL_Delay(100);
 80012a8:	2064      	movs	r0, #100	; 0x64
 80012aa:	f003 fe1f 	bl	8004eec <HAL_Delay>

	data[0] = 0xC0;
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <init_lora_RX+0x88>)
 80012b0:	22c0      	movs	r2, #192	; 0xc0
 80012b2:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;		// Starting address
 80012b4:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <init_lora_RX+0x88>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	705a      	strb	r2, [r3, #1]
	data[2] = 0x03;		// Length
 80012ba:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <init_lora_RX+0x88>)
 80012bc:	2203      	movs	r2, #3
 80012be:	709a      	strb	r2, [r3, #2]
	data[3] = 0x12;		// 00H ADD H
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <init_lora_RX+0x88>)
 80012c2:	2212      	movs	r2, #18
 80012c4:	70da      	strb	r2, [r3, #3]
	data[4] = 0x34;		// 01H ADD L
 80012c6:	4b18      	ldr	r3, [pc, #96]	; (8001328 <init_lora_RX+0x88>)
 80012c8:	2234      	movs	r2, #52	; 0x34
 80012ca:	711a      	strb	r2, [r3, #4]
	data[5] = 0x62;		// 02H register ()
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <init_lora_RX+0x88>)
 80012ce:	2262      	movs	r2, #98	; 0x62
 80012d0:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit_IT(&huart1, data, 6);
 80012d2:	2206      	movs	r2, #6
 80012d4:	4914      	ldr	r1, [pc, #80]	; (8001328 <init_lora_RX+0x88>)
 80012d6:	4815      	ldr	r0, [pc, #84]	; (800132c <init_lora_RX+0x8c>)
 80012d8:	f006 fce9 	bl	8007cae <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 80012dc:	2064      	movs	r0, #100	; 0x64
 80012de:	f003 fe05 	bl	8004eec <HAL_Delay>

	memset(data, 0, sizeof(data));
 80012e2:	220a      	movs	r2, #10
 80012e4:	2100      	movs	r1, #0
 80012e6:	4810      	ldr	r0, [pc, #64]	; (8001328 <init_lora_RX+0x88>)
 80012e8:	f007 f986 	bl	80085f8 <memset>
	// Set WOR Cycle
	data[0] = 0xC0;		// 0xC0 - Set register command
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <init_lora_RX+0x88>)
 80012ee:	22c0      	movs	r2, #192	; 0xc0
 80012f0:	701a      	strb	r2, [r3, #0]
	data[1] = 0x05;		// Starting address
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <init_lora_RX+0x88>)
 80012f4:	2205      	movs	r2, #5
 80012f6:	705a      	strb	r2, [r3, #1]
	data[2] = 0x01;		// Length
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <init_lora_RX+0x88>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;		// set WOR Cycle 500ms
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <init_lora_RX+0x88>)
 8001300:	2200      	movs	r2, #0
 8001302:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart1, data, 4);
 8001304:	2204      	movs	r2, #4
 8001306:	4908      	ldr	r1, [pc, #32]	; (8001328 <init_lora_RX+0x88>)
 8001308:	4808      	ldr	r0, [pc, #32]	; (800132c <init_lora_RX+0x8c>)
 800130a:	f006 fcd0 	bl	8007cae <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 800130e:	2064      	movs	r0, #100	; 0x64
 8001310:	f003 fdec 	bl	8004eec <HAL_Delay>

	read_all_settings_from_module();
 8001314:	f7ff ff5e 	bl	80011d4 <read_all_settings_from_module>
	set_WOR_RX_mode();
 8001318:	f000 f81c 	bl	8001354 <set_WOR_RX_mode>
	HAL_Delay(100);
 800131c:	2064      	movs	r0, #100	; 0x64
 800131e:	f003 fde5 	bl	8004eec <HAL_Delay>

	return true;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200000f8 	.word	0x200000f8
 800132c:	20000660 	.word	0x20000660

08001330 <set_config_deep_sleep_mode>:
//-------------------------------------------------------------------------------------------------
void set_config_deep_sleep_mode (void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	// Function use for go to deep sleep and configuration mode
	// Set M0 and M1 PINs
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_SET);
 8001334:	2201      	movs	r2, #1
 8001336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <set_config_deep_sleep_mode+0x20>)
 800133c:	f004 fa0f 	bl	800575e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	2101      	movs	r1, #1
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <set_config_deep_sleep_mode+0x20>)
 8001346:	f004 fa0a 	bl	800575e <HAL_GPIO_WritePin>
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40010c00 	.word	0x40010c00

08001354 <set_WOR_RX_mode>:
//-------------------------------------------------------------------------------------------------
void set_WOR_RX_mode (void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	// Set M0 and M1 PINs in WOR Receiving mode
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <set_WOR_RX_mode+0x20>)
 8001360:	f004 f9fd 	bl	800575e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 8001364:	2201      	movs	r2, #1
 8001366:	2101      	movs	r1, #1
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <set_WOR_RX_mode+0x20>)
 800136a:	f004 f9f8 	bl	800575e <HAL_GPIO_WritePin>
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40010c00 	.word	0x40010c00

08001378 <set_WOR_TX_mode>:
//-------------------------------------------------------------------------------------------------
void set_WOR_TX_mode (void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	// Set M0 and M1 PINs in WOR Transmitting mode
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <set_WOR_TX_mode+0x20>)
 8001384:	f004 f9eb 	bl	800575e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	2101      	movs	r1, #1
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <set_WOR_TX_mode+0x20>)
 800138e:	f004 f9e6 	bl	800575e <HAL_GPIO_WritePin>
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40010c00 	.word	0x40010c00

0800139c <NRF24L01_RX_Mode>:
		NRF24L01_Receive();
	}
}
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 80013a2:	2300      	movs	r3, #0
 80013a4:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 80013a6:	2000      	movs	r0, #0
 80013a8:	f000 fd02 	bl	8001db0 <NRF24_ReadReg>
 80013ac:	4603      	mov	r3, r0
 80013ae:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP) | (1<<PRIM_RX);    	// Power up module. Write PWR_UP and PRIM_RX bits
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	f043 0303 	orr.w	r3, r3, #3
 80013b6:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	4619      	mov	r1, r3
 80013bc:	2000      	movs	r0, #0
 80013be:	f000 fd2b 	bl	8001e18 <NRF24_WriteReg>
  NRF24_WriteReg(CONFIG, 0x33);     		//  IRQ WORK  ~ 130 us
 80013c2:	2133      	movs	r1, #51	; 0x33
 80013c4:	2000      	movs	r0, #0
 80013c6:	f000 fd27 	bl	8001e18 <NRF24_WriteReg>
  CE_SET;
 80013ca:	2201      	movs	r2, #1
 80013cc:	2108      	movs	r1, #8
 80013ce:	4807      	ldr	r0, [pc, #28]	; (80013ec <NRF24L01_RX_Mode+0x50>)
 80013d0:	f004 f9c5 	bl	800575e <HAL_GPIO_WritePin>
  DelayMicro(150); // Delay 130 us
 80013d4:	2096      	movs	r0, #150	; 0x96
 80013d6:	f000 fcc9 	bl	8001d6c <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 80013da:	f000 fdd1 	bl	8001f80 <NRF24_FlushRX>
  NRF24_FlushTX();
 80013de:	f000 fdf1 	bl	8001fc4 <NRF24_FlushTX>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40010800 	.word	0x40010800

080013f0 <NRF24L01_Receive>:
//----------------------------------------------------------------------------------------
// Function waite Low IRQ signal from NRF module
bool NRF24L01_Receive(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
	if(rx_flag == 1)
 80013f6:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <NRF24L01_Receive+0xb0>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d14a      	bne.n	8001496 <NRF24L01_Receive+0xa6>
	{
		// Detect what's pipes data come from
		if(pipe == 0)
 8001400:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <NRF24L01_Receive+0xb4>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d120      	bne.n	800144a <NRF24L01_Receive+0x5a>
		{
			ssd1306_SetCursor(0, 16);
 8001408:	2110      	movs	r1, #16
 800140a:	2000      	movs	r0, #0
 800140c:	f001 f87e 	bl	800250c <ssd1306_SetCursor>
			char str_rx_oled_buffer_pipe_0[16] = {0};
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
			strcpy(str_rx_oled_buffer_pipe_0, "P0: ");
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4a20      	ldr	r2, [pc, #128]	; (80014a8 <NRF24L01_Receive+0xb8>)
 8001426:	e892 0003 	ldmia.w	r2, {r0, r1}
 800142a:	6018      	str	r0, [r3, #0]
 800142c:	3304      	adds	r3, #4
 800142e:	7019      	strb	r1, [r3, #0]
			strcat(str_rx_oled_buffer_pipe_0, RX_BUF);
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	491d      	ldr	r1, [pc, #116]	; (80014ac <NRF24L01_Receive+0xbc>)
 8001436:	4618      	mov	r0, r3
 8001438:	f007 f9bc 	bl	80087b4 <strcat>
			ssd1306_WriteString(str_rx_oled_buffer_pipe_0,  Font_7x10, White);
 800143c:	4a1c      	ldr	r2, [pc, #112]	; (80014b0 <NRF24L01_Receive+0xc0>)
 800143e:	f107 0010 	add.w	r0, r7, #16
 8001442:	2301      	movs	r3, #1
 8001444:	ca06      	ldmia	r2, {r1, r2}
 8001446:	f001 f83b 	bl	80024c0 <ssd1306_WriteString>
		}
		if(pipe == 1)
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <NRF24L01_Receive+0xb4>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d11c      	bne.n	800148c <NRF24L01_Receive+0x9c>
		{
			ssd1306_SetCursor(0, 26);
 8001452:	211a      	movs	r1, #26
 8001454:	2000      	movs	r0, #0
 8001456:	f001 f859 	bl	800250c <ssd1306_SetCursor>
			char str_rx_oled_buffer_pipe_1[16] = {0};
 800145a:	2300      	movs	r3, #0
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
			strcpy(str_rx_oled_buffer_pipe_1, "P1: ");
 8001468:	463b      	mov	r3, r7
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <NRF24L01_Receive+0xc4>)
 800146c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001470:	6018      	str	r0, [r3, #0]
 8001472:	3304      	adds	r3, #4
 8001474:	7019      	strb	r1, [r3, #0]
			strcat(str_rx_oled_buffer_pipe_1, RX_BUF);
 8001476:	463b      	mov	r3, r7
 8001478:	490c      	ldr	r1, [pc, #48]	; (80014ac <NRF24L01_Receive+0xbc>)
 800147a:	4618      	mov	r0, r3
 800147c:	f007 f99a 	bl	80087b4 <strcat>
			ssd1306_WriteString(str_rx_oled_buffer_pipe_1,  Font_7x10, White);
 8001480:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <NRF24L01_Receive+0xc0>)
 8001482:	4638      	mov	r0, r7
 8001484:	2301      	movs	r3, #1
 8001486:	ca06      	ldmia	r2, {r1, r2}
 8001488:	f001 f81a 	bl	80024c0 <ssd1306_WriteString>
		}
		// Print RX data on OLED
		ssd1306_UpdateScreen();
 800148c:	f000 ff08 	bl	80022a0 <ssd1306_UpdateScreen>
		rx_flag = 0;
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <NRF24L01_Receive+0xb0>)
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
	}
}
 8001496:	bf00      	nop
 8001498:	4618      	mov	r0, r3
 800149a:	3720      	adds	r7, #32
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000113 	.word	0x20000113
 80014a4:	20000138 	.word	0x20000138
 80014a8:	08008fac 	.word	0x08008fac
 80014ac:	20000104 	.word	0x20000104
 80014b0:	2000001c 	.word	0x2000001c
 80014b4:	08008fb4 	.word	0x08008fb4

080014b8 <NRF24_init_RX_mode>:
//----------------------------------------------------------------------------------------
void NRF24_init_RX_mode(void)                  // RECEIVE
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	reset_nrf24l01();				// RESET module settings
 80014bc:	f000 fde4 	bl	8002088 <reset_nrf24l01>
	tx_or_rx_mode = rx_mode;		// For block interrupt HAL_GPIO_EXTI_Callback
 80014c0:	4b2a      	ldr	r3, [pc, #168]	; (800156c <NRF24_init_RX_mode+0xb4>)
 80014c2:	781a      	ldrb	r2, [r3, #0]
 80014c4:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <NRF24_init_RX_mode+0xb8>)
 80014c6:	701a      	strb	r2, [r3, #0]

	CE_RESET;
 80014c8:	2200      	movs	r2, #0
 80014ca:	2108      	movs	r1, #8
 80014cc:	4829      	ldr	r0, [pc, #164]	; (8001574 <NRF24_init_RX_mode+0xbc>)
 80014ce:	f004 f946 	bl	800575e <HAL_GPIO_WritePin>
	DelayMicro(5000);
 80014d2:	f241 3088 	movw	r0, #5000	; 0x1388
 80014d6:	f000 fc49 	bl	8001d6c <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); // Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter) 0b 0000 1010
 80014da:	210a      	movs	r1, #10
 80014dc:	2000      	movs	r0, #0
 80014de:	f000 fc9b 	bl	8001e18 <NRF24_WriteReg>

	DelayMicro(5000);
 80014e2:	f241 3088 	movw	r0, #5000	; 0x1388
 80014e6:	f000 fc41 	bl	8001d6c <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x03); 			// Enable Pipe0 and Pipe1
 80014ea:	2103      	movs	r1, #3
 80014ec:	2001      	movs	r0, #1
 80014ee:	f000 fc93 	bl	8001e18 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x03); 		// Enable Pipe0 and Pipe1
 80014f2:	2103      	movs	r1, #3
 80014f4:	2002      	movs	r0, #2
 80014f6:	f000 fc8f 	bl	8001e18 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 80014fa:	2101      	movs	r1, #1
 80014fc:	2003      	movs	r0, #3
 80014fe:	f000 fc8b 	bl	8001e18 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 8001502:	215f      	movs	r1, #95	; 0x5f
 8001504:	2004      	movs	r0, #4
 8001506:	f000 fc87 	bl	8001e18 <NRF24_WriteReg>
	NRF24_ToggleFeatures();					// Send activated command
 800150a:	f000 fcb3 	bl	8001e74 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);				// Turn off all FEATURE register
 800150e:	2100      	movs	r1, #0
 8001510:	201d      	movs	r0, #29
 8001512:	f000 fc81 	bl	8001e18 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0); 				// Turn off all payload length data pipe
 8001516:	2100      	movs	r1, #0
 8001518:	201c      	movs	r0, #28
 800151a:	f000 fc7d 	bl	8001e18 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 800151e:	2170      	movs	r1, #112	; 0x70
 8001520:	2007      	movs	r0, #7
 8001522:	f000 fc79 	bl	8001e18 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz  // was 76
 8001526:	214c      	movs	r1, #76	; 0x4c
 8001528:	2005      	movs	r0, #5
 800152a:	f000 fc75 	bl	8001e18 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26); 	    // TX_PWR:0dBm, Datarate:250kbps
 800152e:	2126      	movs	r1, #38	; 0x26
 8001530:	2006      	movs	r0, #6
 8001532:	f000 fc71 	bl	8001e18 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_0, TX_ADR_WIDTH);		//	set up Transmit address. Used for a PTX device only.
 8001536:	2203      	movs	r2, #3
 8001538:	490f      	ldr	r1, [pc, #60]	; (8001578 <NRF24_init_RX_mode+0xc0>)
 800153a:	2010      	movs	r0, #16
 800153c:	f000 fcee 	bl	8001f1c <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_0, TX_ADR_WIDTH);    // Set up pipe 0 address
 8001540:	2203      	movs	r2, #3
 8001542:	490d      	ldr	r1, [pc, #52]	; (8001578 <NRF24_init_RX_mode+0xc0>)
 8001544:	200a      	movs	r0, #10
 8001546:	f000 fce9 	bl	8001f1c <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P1, TX_ADDRESS_1, TX_ADR_WIDTH);    // Set up pipe 1 address
 800154a:	2203      	movs	r2, #3
 800154c:	490b      	ldr	r1, [pc, #44]	; (800157c <NRF24_init_RX_mode+0xc4>)
 800154e:	200b      	movs	r0, #11
 8001550:	f000 fce4 	bl	8001f1c <NRF24_Write_Buf>

	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 //Number of bytes in RX pipe 0
 8001554:	210f      	movs	r1, #15
 8001556:	2011      	movs	r0, #17
 8001558:	f000 fc5e 	bl	8001e18 <NRF24_WriteReg>
	NRF24_WriteReg(RX_PW_P1, TX_PLOAD_WIDTH);				 //Number of bytes in RX pipe 1
 800155c:	210f      	movs	r1, #15
 800155e:	2012      	movs	r0, #18
 8001560:	f000 fc5a 	bl	8001e18 <NRF24_WriteReg>

	NRF24L01_RX_Mode();
 8001564:	f7ff ff1a 	bl	800139c <NRF24L01_RX_Mode>
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000102 	.word	0x20000102
 8001570:	20000008 	.word	0x20000008
 8001574:	40010800 	.word	0x40010800
 8001578:	2000000c 	.word	0x2000000c
 800157c:	20000010 	.word	0x20000010

08001580 <IRQ_Callback>:

//----------------------------------------------------------------------------------------
// Callback generate when stm32 get falling  signal from IRQ pin (NRF module show that it has data in buffer)
void IRQ_Callback(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
	uint8_t status=0x01;
 8001586:	2301      	movs	r3, #1
 8001588:	71fb      	strb	r3, [r7, #7]
	uint16_t dt=0;
 800158a:	2300      	movs	r3, #0
 800158c:	80bb      	strh	r3, [r7, #4]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800158e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001592:	4814      	ldr	r0, [pc, #80]	; (80015e4 <IRQ_Callback+0x64>)
 8001594:	f004 f8fb 	bl	800578e <HAL_GPIO_TogglePin>

	DelayMicro(10);
 8001598:	200a      	movs	r0, #10
 800159a:	f000 fbe7 	bl	8001d6c <DelayMicro>

	status = NRF24_ReadReg(STATUS_NRF);
 800159e:	2007      	movs	r0, #7
 80015a0:	f000 fc06 	bl	8001db0 <NRF24_ReadReg>
 80015a4:	4603      	mov	r3, r0
 80015a6:	71fb      	strb	r3, [r7, #7]
	if(status & 0x40)									    //	Flag: Data ready in FIFO  (Check RX_DR flag)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d013      	beq.n	80015da <IRQ_Callback+0x5a>
	{
		pipe = (status>>1) & 0x07;
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	085b      	lsrs	r3, r3, #1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <IRQ_Callback+0x68>)
 80015c0:	701a      	strb	r2, [r3, #0]
		NRF24_Read_Buf(RD_RX_PLOAD,RX_BUF,TX_PLOAD_WIDTH);
 80015c2:	220f      	movs	r2, #15
 80015c4:	4909      	ldr	r1, [pc, #36]	; (80015ec <IRQ_Callback+0x6c>)
 80015c6:	2061      	movs	r0, #97	; 0x61
 80015c8:	f000 fc7e 	bl	8001ec8 <NRF24_Read_Buf>
		NRF24_WriteReg(STATUS_NRF, 0x40);					// For turn down interrupt in nrf module
 80015cc:	2140      	movs	r1, #64	; 0x40
 80015ce:	2007      	movs	r0, #7
 80015d0:	f000 fc22 	bl	8001e18 <NRF24_WriteReg>
		rx_flag = 1;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <IRQ_Callback+0x70>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
	}
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40011000 	.word	0x40011000
 80015e8:	20000138 	.word	0x20000138
 80015ec:	20000104 	.word	0x20000104
 80015f0:	20000113 	.word	0x20000113

080015f4 <NRF24L01_RX_Mode_for_TX_mode>:
		NRF24L01_Transmission_counter();
	}
}
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode_for_TX_mode(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 80015fa:	2300      	movs	r3, #0
 80015fc:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 80015fe:	2000      	movs	r0, #0
 8001600:	f000 fbd6 	bl	8001db0 <NRF24_ReadReg>
 8001604:	4603      	mov	r3, r0
 8001606:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP)|(1<<PRIM_RX);	 // Power up module. Write PWR_UP и PRIM_RX bits
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	f043 0303 	orr.w	r3, r3, #3
 800160e:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	4619      	mov	r1, r3
 8001614:	2000      	movs	r0, #0
 8001616:	f000 fbff 	bl	8001e18 <NRF24_WriteReg>
  CE_SET;
 800161a:	2201      	movs	r2, #1
 800161c:	2108      	movs	r1, #8
 800161e:	4807      	ldr	r0, [pc, #28]	; (800163c <NRF24L01_RX_Mode_for_TX_mode+0x48>)
 8001620:	f004 f89d 	bl	800575e <HAL_GPIO_WritePin>
  DelayMicro(150);						 // Delay 130 us
 8001624:	2096      	movs	r0, #150	; 0x96
 8001626:	f000 fba1 	bl	8001d6c <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 800162a:	f000 fca9 	bl	8001f80 <NRF24_FlushRX>
  NRF24_FlushTX();
 800162e:	f000 fcc9 	bl	8001fc4 <NRF24_FlushTX>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40010800 	.word	0x40010800

08001640 <NRF24_init_TX_mode>:
//----------------------------------------------------------------------------------------
void NRF24_init_TX_mode(void)    // TRANSMITTER
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	reset_nrf24l01();				// RESET module settings
 8001644:	f000 fd20 	bl	8002088 <reset_nrf24l01>
	tx_or_rx_mode = tx_mode;		// For block interrupt HAL_GPIO_EXTI_Callback
 8001648:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <NRF24_init_TX_mode+0xa8>)
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	4b27      	ldr	r3, [pc, #156]	; (80016ec <NRF24_init_TX_mode+0xac>)
 800164e:	701a      	strb	r2, [r3, #0]

	CE_RESET;
 8001650:	2200      	movs	r2, #0
 8001652:	2108      	movs	r1, #8
 8001654:	4826      	ldr	r0, [pc, #152]	; (80016f0 <NRF24_init_TX_mode+0xb0>)
 8001656:	f004 f882 	bl	800575e <HAL_GPIO_WritePin>
	DelayMicro(5000);
 800165a:	f241 3088 	movw	r0, #5000	; 0x1388
 800165e:	f000 fb85 	bl	8001d6c <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 8001662:	210a      	movs	r1, #10
 8001664:	2000      	movs	r0, #0
 8001666:	f000 fbd7 	bl	8001e18 <NRF24_WriteReg>

	DelayMicro(5000);
 800166a:	f241 3088 	movw	r0, #5000	; 0x1388
 800166e:	f000 fb7d 	bl	8001d6c <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable Pipe0
 8001672:	2101      	movs	r1, #1
 8001674:	2001      	movs	r0, #1
 8001676:	f000 fbcf 	bl	8001e18 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe0
 800167a:	2101      	movs	r1, #1
 800167c:	2002      	movs	r0, #2
 800167e:	f000 fbcb 	bl	8001e18 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 8001682:	2101      	movs	r1, #1
 8001684:	2003      	movs	r0, #3
 8001686:	f000 fbc7 	bl	8001e18 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 800168a:	215f      	movs	r1, #95	; 0x5f
 800168c:	2004      	movs	r0, #4
 800168e:	f000 fbc3 	bl	8001e18 <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 8001692:	f000 fbef 	bl	8001e74 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 8001696:	2100      	movs	r1, #0
 8001698:	201d      	movs	r0, #29
 800169a:	f000 fbbd 	bl	8001e18 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 800169e:	2100      	movs	r1, #0
 80016a0:	201c      	movs	r0, #28
 80016a2:	f000 fbb9 	bl	8001e18 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 80016a6:	2170      	movs	r1, #112	; 0x70
 80016a8:	2007      	movs	r0, #7
 80016aa:	f000 fbb5 	bl	8001e18 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 80016ae:	214c      	movs	r1, #76	; 0x4c
 80016b0:	2005      	movs	r0, #5
 80016b2:	f000 fbb1 	bl	8001e18 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate:250kbps
 80016b6:	2126      	movs	r1, #38	; 0x26
 80016b8:	2006      	movs	r0, #6
 80016ba:	f000 fbad 	bl	8001e18 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);			// Write TX address
 80016be:	2203      	movs	r2, #3
 80016c0:	490c      	ldr	r1, [pc, #48]	; (80016f4 <NRF24_init_TX_mode+0xb4>)
 80016c2:	2010      	movs	r0, #16
 80016c4:	f000 fc2a 	bl	8001f1c <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);		// Set up pipe 0 address
 80016c8:	2203      	movs	r2, #3
 80016ca:	490a      	ldr	r1, [pc, #40]	; (80016f4 <NRF24_init_TX_mode+0xb4>)
 80016cc:	200a      	movs	r0, #10
 80016ce:	f000 fc25 	bl	8001f1c <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 	// Number of bytes in TX buffer
 80016d2:	210f      	movs	r1, #15
 80016d4:	2011      	movs	r0, #17
 80016d6:	f000 fb9f 	bl	8001e18 <NRF24_WriteReg>

	NRF24L01_RX_Mode_for_TX_mode();
 80016da:	f7ff ff8b 	bl	80015f4 <NRF24L01_RX_Mode_for_TX_mode>

	read_config_registers();	// For debug
 80016de:	f000 fc93 	bl	8002008 <read_config_registers>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000007 	.word	0x20000007
 80016ec:	20000008 	.word	0x20000008
 80016f0:	40010800 	.word	0x40010800
 80016f4:	20000014 	.word	0x20000014

080016f8 <NRF24L01_TX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 8001700:	2203      	movs	r2, #3
 8001702:	4908      	ldr	r1, [pc, #32]	; (8001724 <NRF24L01_TX_Mode+0x2c>)
 8001704:	2010      	movs	r0, #16
 8001706:	f000 fc09 	bl	8001f1c <NRF24_Write_Buf>
  CE_RESET;
 800170a:	2200      	movs	r2, #0
 800170c:	2108      	movs	r1, #8
 800170e:	4806      	ldr	r0, [pc, #24]	; (8001728 <NRF24L01_TX_Mode+0x30>)
 8001710:	f004 f825 	bl	800575e <HAL_GPIO_WritePin>
  // Flush buffers
  NRF24_FlushRX();
 8001714:	f000 fc34 	bl	8001f80 <NRF24_FlushRX>
  NRF24_FlushTX();
 8001718:	f000 fc54 	bl	8001fc4 <NRF24_FlushTX>
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000014 	.word	0x20000014
 8001728:	40010800 	.word	0x40010800

0800172c <NRF24_Transmit>:
//----------------------------------------------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	71fb      	strb	r3, [r7, #7]
 8001738:	4613      	mov	r3, r2
 800173a:	71bb      	strb	r3, [r7, #6]
  CE_RESET;
 800173c:	2200      	movs	r2, #0
 800173e:	2108      	movs	r1, #8
 8001740:	4813      	ldr	r0, [pc, #76]	; (8001790 <NRF24_Transmit+0x64>)
 8001742:	f004 f80c 	bl	800575e <HAL_GPIO_WritePin>
  CS_ON;
 8001746:	2200      	movs	r2, #0
 8001748:	2110      	movs	r1, #16
 800174a:	4811      	ldr	r0, [pc, #68]	; (8001790 <NRF24_Transmit+0x64>)
 800174c:	f004 f807 	bl	800575e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);	//Send address in NRF module
 8001750:	1df9      	adds	r1, r7, #7
 8001752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001756:	2201      	movs	r2, #1
 8001758:	480e      	ldr	r0, [pc, #56]	; (8001794 <NRF24_Transmit+0x68>)
 800175a:	f005 f941 	bl	80069e0 <HAL_SPI_Transmit>
  DelayMicro(1);
 800175e:	2001      	movs	r0, #1
 8001760:	f000 fb04 	bl	8001d6c <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000); //Send buff in NRF module
 8001764:	79bb      	ldrb	r3, [r7, #6]
 8001766:	b29a      	uxth	r2, r3
 8001768:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176c:	6839      	ldr	r1, [r7, #0]
 800176e:	4809      	ldr	r0, [pc, #36]	; (8001794 <NRF24_Transmit+0x68>)
 8001770:	f005 f936 	bl	80069e0 <HAL_SPI_Transmit>
  CS_OFF;
 8001774:	2201      	movs	r2, #1
 8001776:	2110      	movs	r1, #16
 8001778:	4805      	ldr	r0, [pc, #20]	; (8001790 <NRF24_Transmit+0x64>)
 800177a:	f003 fff0 	bl	800575e <HAL_GPIO_WritePin>
  CE_SET;
 800177e:	2201      	movs	r2, #1
 8001780:	2108      	movs	r1, #8
 8001782:	4803      	ldr	r0, [pc, #12]	; (8001790 <NRF24_Transmit+0x64>)
 8001784:	f003 ffeb 	bl	800575e <HAL_GPIO_WritePin>
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40010800 	.word	0x40010800
 8001794:	200006ec 	.word	0x200006ec

08001798 <NRF24L01_Send>:
//----------------------------------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint8_t status=0x00, regval=0x00;
 80017a0:	2300      	movs	r3, #0
 80017a2:	73fb      	strb	r3, [r7, #15]
 80017a4:	2300      	movs	r3, #0
 80017a6:	73bb      	strb	r3, [r7, #14]
  NRF24L01_TX_Mode(pBuf);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ffa5 	bl	80016f8 <NRF24L01_TX_Mode>

  regval = NRF24_ReadReg(CONFIG);
 80017ae:	2000      	movs	r0, #0
 80017b0:	f000 fafe 	bl	8001db0 <NRF24_ReadReg>
 80017b4:	4603      	mov	r3, r0
 80017b6:	73bb      	strb	r3, [r7, #14]

  // If module in sleep mode, wake up it send PWR_UP and PRIM_RX bits in CONFIG
  regval |= (1<<PWR_UP);			// Set power up
 80017b8:	7bbb      	ldrb	r3, [r7, #14]
 80017ba:	f043 0302 	orr.w	r3, r3, #2
 80017be:	73bb      	strb	r3, [r7, #14]
  regval &= ~(1<<PRIM_RX);			// Set TX mode
 80017c0:	7bbb      	ldrb	r3, [r7, #14]
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	73bb      	strb	r3, [r7, #14]
  NRF24_WriteReg(CONFIG,regval);
 80017c8:	7bbb      	ldrb	r3, [r7, #14]
 80017ca:	4619      	mov	r1, r3
 80017cc:	2000      	movs	r0, #0
 80017ce:	f000 fb23 	bl	8001e18 <NRF24_WriteReg>
  DelayMicro(150); 					// Delay more then 130 us
 80017d2:	2096      	movs	r0, #150	; 0x96
 80017d4:	f000 faca 	bl	8001d6c <DelayMicro>
  NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);	// Send data
 80017d8:	220f      	movs	r2, #15
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	20a0      	movs	r0, #160	; 0xa0
 80017de:	f7ff ffa5 	bl	800172c <NRF24_Transmit>

  CE_SET;
 80017e2:	2201      	movs	r2, #1
 80017e4:	2108      	movs	r1, #8
 80017e6:	481c      	ldr	r0, [pc, #112]	; (8001858 <NRF24L01_Send+0xc0>)
 80017e8:	f003 ffb9 	bl	800575e <HAL_GPIO_WritePin>
  DelayMicro(15); 					//minimum 10us high pulse (Page 21)
 80017ec:	200f      	movs	r0, #15
 80017ee:	f000 fabd 	bl	8001d6c <DelayMicro>
  CE_RESET;
 80017f2:	2200      	movs	r2, #0
 80017f4:	2108      	movs	r1, #8
 80017f6:	4818      	ldr	r0, [pc, #96]	; (8001858 <NRF24L01_Send+0xc0>)
 80017f8:	f003 ffb1 	bl	800575e <HAL_GPIO_WritePin>

  // Waiting interrupt signal from IRQ
  while((GPIO_PinState)IRQ == GPIO_PIN_SET){}
 80017fc:	bf00      	nop
 80017fe:	2104      	movs	r1, #4
 8001800:	4815      	ldr	r0, [pc, #84]	; (8001858 <NRF24L01_Send+0xc0>)
 8001802:	f003 ff95 	bl	8005730 <HAL_GPIO_ReadPin>
 8001806:	4603      	mov	r3, r0
 8001808:	2b01      	cmp	r3, #1
 800180a:	d0f8      	beq.n	80017fe <NRF24L01_Send+0x66>

  status = NRF24_ReadReg(STATUS_NRF);		// Read status sent data to RX
 800180c:	2007      	movs	r0, #7
 800180e:	f000 facf 	bl	8001db0 <NRF24_ReadReg>
 8001812:	4603      	mov	r3, r0
 8001814:	73fb      	strb	r3, [r7, #15]
  if(status & TX_DS) 	     //TX_DS == 0x20   // When transmitted data was receive, and we take back ACK answer
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	f003 0320 	and.w	r3, r3, #32
 800181c:	2b00      	cmp	r3, #0
 800181e:	d004      	beq.n	800182a <NRF24L01_Send+0x92>
  {
      NRF24_WriteReg(STATUS_NRF, 0x20);
 8001820:	2120      	movs	r1, #32
 8001822:	2007      	movs	r0, #7
 8001824:	f000 faf8 	bl	8001e18 <NRF24_WriteReg>
 8001828:	e00a      	b.n	8001840 <NRF24L01_Send+0xa8>
  }
  else if(status & MAX_RT)   //MAX_RT == 0x10  // Retransmeet data flag
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	f003 0310 	and.w	r3, r3, #16
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <NRF24L01_Send+0xa8>
  {
    NRF24_WriteReg(STATUS_NRF, 0x10);
 8001834:	2110      	movs	r1, #16
 8001836:	2007      	movs	r0, #7
 8001838:	f000 faee 	bl	8001e18 <NRF24_WriteReg>
    NRF24_FlushTX();
 800183c:	f000 fbc2 	bl	8001fc4 <NRF24_FlushTX>
  }

  regval = NRF24_ReadReg(OBSERVE_TX);   // Return Count lost packets and count transmitted packets
 8001840:	2008      	movs	r0, #8
 8001842:	f000 fab5 	bl	8001db0 <NRF24_ReadReg>
 8001846:	4603      	mov	r3, r0
 8001848:	73bb      	strb	r3, [r7, #14]

  // Switch on RX mode
  NRF24L01_RX_Mode_for_TX_mode();
 800184a:	f7ff fed3 	bl	80015f4 <NRF24L01_RX_Mode_for_TX_mode>

  return regval;
 800184e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40010800 	.word	0x40010800

0800185c <NRF24L01_Transmission_counter>:
//----------------------------------------------------------------------------------------
void NRF24L01_Transmission_counter(void)
{
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b091      	sub	sp, #68	; 0x44
 8001860:	af00      	add	r7, sp, #0
	static uint8_t retr_cnt, dt = 0;
	//static int test_data = 0;							// Init test data for transmit
	uint8_t buf2[20]={0};
 8001862:	2300      	movs	r3, #0
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001866:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
	uint8_t test_i[10] = {0};
 8001874:	2300      	movs	r3, #0
 8001876:	623b      	str	r3, [r7, #32]
 8001878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	809a      	strh	r2, [r3, #4]
	uint8_t str_nrf[25] = {0};
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]
 8001896:	751a      	strb	r2, [r3, #20]

	// Print transmit data
	ssd1306_SetCursor(0, 16);
 8001898:	2110      	movs	r1, #16
 800189a:	2000      	movs	r0, #0
 800189c:	f000 fe36 	bl	800250c <ssd1306_SetCursor>
	strcpy(str_nrf, "Data:");
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	4a6c      	ldr	r2, [pc, #432]	; (8001a54 <NRF24L01_Transmission_counter+0x1f8>)
 80018a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018a8:	6018      	str	r0, [r3, #0]
 80018aa:	3304      	adds	r3, #4
 80018ac:	8019      	strh	r1, [r3, #0]
	sprintf(buf2, "%d", test_data);
 80018ae:	4b6a      	ldr	r3, [pc, #424]	; (8001a58 <NRF24L01_Transmission_counter+0x1fc>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b6:	4969      	ldr	r1, [pc, #420]	; (8001a5c <NRF24L01_Transmission_counter+0x200>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f006 ff5b 	bl	8008774 <siprintf>
	strcat(str_nrf, buf2);
 80018be:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	4611      	mov	r1, r2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f006 ff74 	bl	80087b4 <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 80018cc:	4a64      	ldr	r2, [pc, #400]	; (8001a60 <NRF24L01_Transmission_counter+0x204>)
 80018ce:	1d38      	adds	r0, r7, #4
 80018d0:	2301      	movs	r3, #1
 80018d2:	ca06      	ldmia	r2, {r1, r2}
 80018d4:	f000 fdf4 	bl	80024c0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80018d8:	f000 fce2 	bl	80022a0 <ssd1306_UpdateScreen>
	memset(str_nrf, 0, sizeof(str_nrf));
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	2219      	movs	r2, #25
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f006 fe88 	bl	80085f8 <memset>

	dt = NRF24L01_Send(buf2);						// Transmit data
 80018e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff53 	bl	8001798 <NRF24L01_Send>
 80018f2:	4603      	mov	r3, r0
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b5b      	ldr	r3, [pc, #364]	; (8001a64 <NRF24L01_Transmission_counter+0x208>)
 80018f8:	701a      	strb	r2, [r3, #0]

	// Calculation retransmitted packets
	retr_cnt = dt & 0xF;
 80018fa:	4b5a      	ldr	r3, [pc, #360]	; (8001a64 <NRF24L01_Transmission_counter+0x208>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b58      	ldr	r3, [pc, #352]	; (8001a68 <NRF24L01_Transmission_counter+0x20c>)
 8001906:	701a      	strb	r2, [r3, #0]
	retr_cnt_full += retr_cnt;		// Counting retransmit packets
 8001908:	4b57      	ldr	r3, [pc, #348]	; (8001a68 <NRF24L01_Transmission_counter+0x20c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	4b57      	ldr	r3, [pc, #348]	; (8001a6c <NRF24L01_Transmission_counter+0x210>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4413      	add	r3, r2
 8001914:	4a55      	ldr	r2, [pc, #340]	; (8001a6c <NRF24L01_Transmission_counter+0x210>)
 8001916:	6013      	str	r3, [r2, #0]

	// Print transmit counter
	memset(test_i, 0, sizeof(test_i));
 8001918:	f107 0320 	add.w	r3, r7, #32
 800191c:	220a      	movs	r2, #10
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f006 fe69 	bl	80085f8 <memset>
	ssd1306_SetCursor(0, 26);
 8001926:	211a      	movs	r1, #26
 8001928:	2000      	movs	r0, #0
 800192a:	f000 fdef 	bl	800250c <ssd1306_SetCursor>
	strcpy(str_nrf, "Conut trans:");
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	4a4f      	ldr	r2, [pc, #316]	; (8001a70 <NRF24L01_Transmission_counter+0x214>)
 8001932:	461c      	mov	r4, r3
 8001934:	4613      	mov	r3, r2
 8001936:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001938:	c407      	stmia	r4!, {r0, r1, r2}
 800193a:	7023      	strb	r3, [r4, #0]
	itoa(i, test_i, 10);								// Convert number in string
 800193c:	4b4d      	ldr	r3, [pc, #308]	; (8001a74 <NRF24L01_Transmission_counter+0x218>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f107 0120 	add.w	r1, r7, #32
 8001944:	220a      	movs	r2, #10
 8001946:	4618      	mov	r0, r3
 8001948:	f006 fe46 	bl	80085d8 <itoa>
	strcat(str_nrf, test_i);
 800194c:	f107 0220 	add.w	r2, r7, #32
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	4611      	mov	r1, r2
 8001954:	4618      	mov	r0, r3
 8001956:	f006 ff2d 	bl	80087b4 <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 800195a:	4a41      	ldr	r2, [pc, #260]	; (8001a60 <NRF24L01_Transmission_counter+0x204>)
 800195c:	1d38      	adds	r0, r7, #4
 800195e:	2301      	movs	r3, #1
 8001960:	ca06      	ldmia	r2, {r1, r2}
 8001962:	f000 fdad 	bl	80024c0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001966:	f000 fc9b 	bl	80022a0 <ssd1306_UpdateScreen>

	// Print retransmeet counter
	memset(str_nrf, 0, sizeof(str_nrf));
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	2219      	movs	r2, #25
 800196e:	2100      	movs	r1, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f006 fe41 	bl	80085f8 <memset>
	memset(test_i, 0, sizeof(test_i));
 8001976:	f107 0320 	add.w	r3, r7, #32
 800197a:	220a      	movs	r2, #10
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f006 fe3a 	bl	80085f8 <memset>
	ssd1306_SetCursor(0, 36);
 8001984:	2124      	movs	r1, #36	; 0x24
 8001986:	2000      	movs	r0, #0
 8001988:	f000 fdc0 	bl	800250c <ssd1306_SetCursor>
	strcpy(str_nrf, "Retransm:");
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	4a3a      	ldr	r2, [pc, #232]	; (8001a78 <NRF24L01_Transmission_counter+0x21c>)
 8001990:	ca07      	ldmia	r2, {r0, r1, r2}
 8001992:	c303      	stmia	r3!, {r0, r1}
 8001994:	801a      	strh	r2, [r3, #0]
	itoa(retr_cnt_full, test_i, 10);
 8001996:	4b35      	ldr	r3, [pc, #212]	; (8001a6c <NRF24L01_Transmission_counter+0x210>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f107 0120 	add.w	r1, r7, #32
 800199e:	220a      	movs	r2, #10
 80019a0:	4618      	mov	r0, r3
 80019a2:	f006 fe19 	bl	80085d8 <itoa>
	strcat(str_nrf, test_i);
 80019a6:	f107 0220 	add.w	r2, r7, #32
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	4611      	mov	r1, r2
 80019ae:	4618      	mov	r0, r3
 80019b0:	f006 ff00 	bl	80087b4 <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 80019b4:	4a2a      	ldr	r2, [pc, #168]	; (8001a60 <NRF24L01_Transmission_counter+0x204>)
 80019b6:	1d38      	adds	r0, r7, #4
 80019b8:	2301      	movs	r3, #1
 80019ba:	ca06      	ldmia	r2, {r1, r2}
 80019bc:	f000 fd80 	bl	80024c0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80019c0:	f000 fc6e 	bl	80022a0 <ssd1306_UpdateScreen>

	// Print lost packets
	memset(str_nrf, 0, sizeof(str_nrf));
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	2219      	movs	r2, #25
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f006 fe14 	bl	80085f8 <memset>
	memset(test_i, 0, sizeof(test_i));
 80019d0:	f107 0320 	add.w	r3, r7, #32
 80019d4:	220a      	movs	r2, #10
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f006 fe0d 	bl	80085f8 <memset>

	cnt_lost = dt >> 4;
 80019de:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <NRF24L01_Transmission_counter+0x208>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	091b      	lsrs	r3, r3, #4
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <NRF24L01_Transmission_counter+0x220>)
 80019ea:	601a      	str	r2, [r3, #0]

	ssd1306_SetCursor(0, 46);
 80019ec:	212e      	movs	r1, #46	; 0x2e
 80019ee:	2000      	movs	r0, #0
 80019f0:	f000 fd8c 	bl	800250c <ssd1306_SetCursor>
	strcpy(str_nrf, "Lost:");
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <NRF24L01_Transmission_counter+0x224>)
 80019f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019fc:	6018      	str	r0, [r3, #0]
 80019fe:	3304      	adds	r3, #4
 8001a00:	8019      	strh	r1, [r3, #0]
	itoa(cnt_lost, test_i, 10);
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <NRF24L01_Transmission_counter+0x220>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f107 0120 	add.w	r1, r7, #32
 8001a0a:	220a      	movs	r2, #10
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f006 fde3 	bl	80085d8 <itoa>
	strcat(str_nrf, test_i);
 8001a12:	f107 0220 	add.w	r2, r7, #32
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f006 feca 	bl	80087b4 <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 8001a20:	4a0f      	ldr	r2, [pc, #60]	; (8001a60 <NRF24L01_Transmission_counter+0x204>)
 8001a22:	1d38      	adds	r0, r7, #4
 8001a24:	2301      	movs	r3, #1
 8001a26:	ca06      	ldmia	r2, {r1, r2}
 8001a28:	f000 fd4a 	bl	80024c0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001a2c:	f000 fc38 	bl	80022a0 <ssd1306_UpdateScreen>

	test_data++;
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <NRF24L01_Transmission_counter+0x1fc>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	4a08      	ldr	r2, [pc, #32]	; (8001a58 <NRF24L01_Transmission_counter+0x1fc>)
 8001a38:	6013      	str	r3, [r2, #0]
	i++;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <NRF24L01_Transmission_counter+0x218>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	4a0c      	ldr	r2, [pc, #48]	; (8001a74 <NRF24L01_Transmission_counter+0x218>)
 8001a42:	6013      	str	r3, [r2, #0]

	HAL_Delay(100);
 8001a44:	2064      	movs	r0, #100	; 0x64
 8001a46:	f003 fa51 	bl	8004eec <HAL_Delay>
}
 8001a4a:	bf00      	nop
 8001a4c:	3744      	adds	r7, #68	; 0x44
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd90      	pop	{r4, r7, pc}
 8001a52:	bf00      	nop
 8001a54:	08008fbc 	.word	0x08008fbc
 8001a58:	20000144 	.word	0x20000144
 8001a5c:	08008fc4 	.word	0x08008fc4
 8001a60:	2000001c 	.word	0x2000001c
 8001a64:	20000148 	.word	0x20000148
 8001a68:	20000149 	.word	0x20000149
 8001a6c:	2000013c 	.word	0x2000013c
 8001a70:	08008fc8 	.word	0x08008fc8
 8001a74:	20000018 	.word	0x20000018
 8001a78:	08008fd8 	.word	0x08008fd8
 8001a7c:	20000140 	.word	0x20000140
 8001a80:	08008fe4 	.word	0x08008fe4

08001a84 <NRF24L01_Transmission_t_and_h>:
//----------------------------------------------------------------------------------------
void NRF24L01_Transmission_t_and_h(void)
{
 8001a84:	b590      	push	{r4, r7, lr}
 8001a86:	b093      	sub	sp, #76	; 0x4c
 8001a88:	af00      	add	r7, sp, #0
	static uint8_t retr_cnt, dt = 0;
	//static int test_data = 0;							// Init test data for transmit
	uint8_t buf2[20]={0};
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
	uint8_t test_i[10] = {0};
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	809a      	strh	r2, [r3, #4]
	uint8_t str_nrf[25] = {0};
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	f107 0310 	add.w	r3, r7, #16
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]
 8001abe:	751a      	strb	r2, [r3, #20]
	char str_buf[10] = {0};
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	809a      	strh	r2, [r3, #4]
	// Print transmit data
	ssd1306_SetCursor(0, 16);
 8001acc:	2110      	movs	r1, #16
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f000 fd1c 	bl	800250c <ssd1306_SetCursor>
	strcat(str_nrf, "T=");
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fb37 	bl	800014c <strlen>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	4413      	add	r3, r2
 8001ae8:	4a91      	ldr	r2, [pc, #580]	; (8001d30 <NRF24L01_Transmission_t_and_h+0x2ac>)
 8001aea:	8811      	ldrh	r1, [r2, #0]
 8001aec:	7892      	ldrb	r2, [r2, #2]
 8001aee:	8019      	strh	r1, [r3, #0]
 8001af0:	709a      	strb	r2, [r3, #2]
	itoa(am3202_sensor.temterature, str_buf, 10);
 8001af2:	4b90      	ldr	r3, [pc, #576]	; (8001d34 <NRF24L01_Transmission_t_and_h+0x2b0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4639      	mov	r1, r7
 8001af8:	220a      	movs	r2, #10
 8001afa:	4618      	mov	r0, r3
 8001afc:	f006 fd6c 	bl	80085d8 <itoa>
	strcat(str_nrf, str_buf);
 8001b00:	463a      	mov	r2, r7
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f006 fe53 	bl	80087b4 <strcat>
	strcat(str_nrf, "C ");
 8001b0e:	f107 030c 	add.w	r3, r7, #12
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fb1a 	bl	800014c <strlen>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	4413      	add	r3, r2
 8001b22:	4a85      	ldr	r2, [pc, #532]	; (8001d38 <NRF24L01_Transmission_t_and_h+0x2b4>)
 8001b24:	8811      	ldrh	r1, [r2, #0]
 8001b26:	7892      	ldrb	r2, [r2, #2]
 8001b28:	8019      	strh	r1, [r3, #0]
 8001b2a:	709a      	strb	r2, [r3, #2]
	memset(str_buf, 0, sizeof(str_buf));
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	220a      	movs	r2, #10
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f006 fd60 	bl	80085f8 <memset>
	itoa(am3202_sensor.humidity, str_buf, 10);
 8001b38:	4b7e      	ldr	r3, [pc, #504]	; (8001d34 <NRF24L01_Transmission_t_and_h+0x2b0>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4639      	mov	r1, r7
 8001b3e:	220a      	movs	r2, #10
 8001b40:	4618      	mov	r0, r3
 8001b42:	f006 fd49 	bl	80085d8 <itoa>
	strcat(str_nrf, "H=");
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fafe 	bl	800014c <strlen>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	f107 030c 	add.w	r3, r7, #12
 8001b58:	4413      	add	r3, r2
 8001b5a:	4a78      	ldr	r2, [pc, #480]	; (8001d3c <NRF24L01_Transmission_t_and_h+0x2b8>)
 8001b5c:	8811      	ldrh	r1, [r2, #0]
 8001b5e:	7892      	ldrb	r2, [r2, #2]
 8001b60:	8019      	strh	r1, [r3, #0]
 8001b62:	709a      	strb	r2, [r3, #2]
	strcat(str_nrf, str_buf);
 8001b64:	463a      	mov	r2, r7
 8001b66:	f107 030c 	add.w	r3, r7, #12
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f006 fe21 	bl	80087b4 <strcat>
	strcat(str_nrf, "% ");
 8001b72:	f107 030c 	add.w	r3, r7, #12
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fae8 	bl	800014c <strlen>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	4413      	add	r3, r2
 8001b86:	4a6e      	ldr	r2, [pc, #440]	; (8001d40 <NRF24L01_Transmission_t_and_h+0x2bc>)
 8001b88:	8811      	ldrh	r1, [r2, #0]
 8001b8a:	7892      	ldrb	r2, [r2, #2]
 8001b8c:	8019      	strh	r1, [r3, #0]
 8001b8e:	709a      	strb	r2, [r3, #2]
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 8001b90:	4a6c      	ldr	r2, [pc, #432]	; (8001d44 <NRF24L01_Transmission_t_and_h+0x2c0>)
 8001b92:	f107 000c 	add.w	r0, r7, #12
 8001b96:	2301      	movs	r3, #1
 8001b98:	ca06      	ldmia	r2, {r1, r2}
 8001b9a:	f000 fc91 	bl	80024c0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001b9e:	f000 fb7f 	bl	80022a0 <ssd1306_UpdateScreen>
	//memset(str_nrf, 0, sizeof(str_nrf));

	dt = NRF24L01_Send(str_nrf);						// Transmit data
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fdf6 	bl	8001798 <NRF24L01_Send>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b65      	ldr	r3, [pc, #404]	; (8001d48 <NRF24L01_Transmission_t_and_h+0x2c4>)
 8001bb2:	701a      	strb	r2, [r3, #0]
	memset(str_nrf, 0, sizeof(str_nrf));
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	2219      	movs	r2, #25
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f006 fd1b 	bl	80085f8 <memset>
	// Calculation retransmitted packets
	retr_cnt = dt & 0xF;
 8001bc2:	4b61      	ldr	r3, [pc, #388]	; (8001d48 <NRF24L01_Transmission_t_and_h+0x2c4>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	4b5f      	ldr	r3, [pc, #380]	; (8001d4c <NRF24L01_Transmission_t_and_h+0x2c8>)
 8001bce:	701a      	strb	r2, [r3, #0]
	retr_cnt_full += retr_cnt;		// Counting retransmit packets
 8001bd0:	4b5e      	ldr	r3, [pc, #376]	; (8001d4c <NRF24L01_Transmission_t_and_h+0x2c8>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b5e      	ldr	r3, [pc, #376]	; (8001d50 <NRF24L01_Transmission_t_and_h+0x2cc>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a5c      	ldr	r2, [pc, #368]	; (8001d50 <NRF24L01_Transmission_t_and_h+0x2cc>)
 8001bde:	6013      	str	r3, [r2, #0]

	// Print transmit counter
	memset(test_i, 0, sizeof(test_i));
 8001be0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001be4:	220a      	movs	r2, #10
 8001be6:	2100      	movs	r1, #0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f006 fd05 	bl	80085f8 <memset>
	ssd1306_SetCursor(0, 26);
 8001bee:	211a      	movs	r1, #26
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f000 fc8b 	bl	800250c <ssd1306_SetCursor>
	strcpy(str_nrf, "Conut trans:");
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	4a56      	ldr	r2, [pc, #344]	; (8001d54 <NRF24L01_Transmission_t_and_h+0x2d0>)
 8001bfc:	461c      	mov	r4, r3
 8001bfe:	4613      	mov	r3, r2
 8001c00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c02:	c407      	stmia	r4!, {r0, r1, r2}
 8001c04:	7023      	strb	r3, [r4, #0]
	itoa(i, test_i, 10);								// Convert number in string
 8001c06:	4b54      	ldr	r3, [pc, #336]	; (8001d58 <NRF24L01_Transmission_t_and_h+0x2d4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001c0e:	220a      	movs	r2, #10
 8001c10:	4618      	mov	r0, r3
 8001c12:	f006 fce1 	bl	80085d8 <itoa>
	strcat(str_nrf, test_i);
 8001c16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f006 fdc7 	bl	80087b4 <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 8001c26:	4a47      	ldr	r2, [pc, #284]	; (8001d44 <NRF24L01_Transmission_t_and_h+0x2c0>)
 8001c28:	f107 000c 	add.w	r0, r7, #12
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	ca06      	ldmia	r2, {r1, r2}
 8001c30:	f000 fc46 	bl	80024c0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001c34:	f000 fb34 	bl	80022a0 <ssd1306_UpdateScreen>

	// Print retransmeet counter
	memset(str_nrf, 0, sizeof(str_nrf));
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	2219      	movs	r2, #25
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f006 fcd9 	bl	80085f8 <memset>
	memset(test_i, 0, sizeof(test_i));
 8001c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c4a:	220a      	movs	r2, #10
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f006 fcd2 	bl	80085f8 <memset>
	ssd1306_SetCursor(0, 36);
 8001c54:	2124      	movs	r1, #36	; 0x24
 8001c56:	2000      	movs	r0, #0
 8001c58:	f000 fc58 	bl	800250c <ssd1306_SetCursor>
	strcpy(str_nrf, "Retransm:");
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	4a3e      	ldr	r2, [pc, #248]	; (8001d5c <NRF24L01_Transmission_t_and_h+0x2d8>)
 8001c62:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c64:	c303      	stmia	r3!, {r0, r1}
 8001c66:	801a      	strh	r2, [r3, #0]
	itoa(retr_cnt_full, test_i, 10);
 8001c68:	4b39      	ldr	r3, [pc, #228]	; (8001d50 <NRF24L01_Transmission_t_and_h+0x2cc>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001c70:	220a      	movs	r2, #10
 8001c72:	4618      	mov	r0, r3
 8001c74:	f006 fcb0 	bl	80085d8 <itoa>
	strcat(str_nrf, test_i);
 8001c78:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	4611      	mov	r1, r2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f006 fd96 	bl	80087b4 <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 8001c88:	4a2e      	ldr	r2, [pc, #184]	; (8001d44 <NRF24L01_Transmission_t_and_h+0x2c0>)
 8001c8a:	f107 000c 	add.w	r0, r7, #12
 8001c8e:	2301      	movs	r3, #1
 8001c90:	ca06      	ldmia	r2, {r1, r2}
 8001c92:	f000 fc15 	bl	80024c0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001c96:	f000 fb03 	bl	80022a0 <ssd1306_UpdateScreen>

	// Print lost packets
	memset(str_nrf, 0, sizeof(str_nrf));
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	2219      	movs	r2, #25
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f006 fca8 	bl	80085f8 <memset>
	memset(test_i, 0, sizeof(test_i));
 8001ca8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cac:	220a      	movs	r2, #10
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f006 fca1 	bl	80085f8 <memset>

	cnt_lost = dt >> 4;
 8001cb6:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <NRF24L01_Transmission_t_and_h+0x2c4>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	091b      	lsrs	r3, r3, #4
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <NRF24L01_Transmission_t_and_h+0x2dc>)
 8001cc2:	601a      	str	r2, [r3, #0]

	ssd1306_SetCursor(0, 46);
 8001cc4:	212e      	movs	r1, #46	; 0x2e
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f000 fc20 	bl	800250c <ssd1306_SetCursor>
	strcpy(str_nrf, "Lost:");
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	4a24      	ldr	r2, [pc, #144]	; (8001d64 <NRF24L01_Transmission_t_and_h+0x2e0>)
 8001cd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cd6:	6018      	str	r0, [r3, #0]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	8019      	strh	r1, [r3, #0]
	itoa(cnt_lost, test_i, 10);
 8001cdc:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <NRF24L01_Transmission_t_and_h+0x2dc>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001ce4:	220a      	movs	r2, #10
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f006 fc76 	bl	80085d8 <itoa>
	strcat(str_nrf, test_i);
 8001cec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cf0:	f107 030c 	add.w	r3, r7, #12
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f006 fd5c 	bl	80087b4 <strcat>
	ssd1306_WriteString(str_nrf,  Font_7x10, White);
 8001cfc:	4a11      	ldr	r2, [pc, #68]	; (8001d44 <NRF24L01_Transmission_t_and_h+0x2c0>)
 8001cfe:	f107 000c 	add.w	r0, r7, #12
 8001d02:	2301      	movs	r3, #1
 8001d04:	ca06      	ldmia	r2, {r1, r2}
 8001d06:	f000 fbdb 	bl	80024c0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001d0a:	f000 fac9 	bl	80022a0 <ssd1306_UpdateScreen>

	test_data++;
 8001d0e:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <NRF24L01_Transmission_t_and_h+0x2e4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3301      	adds	r3, #1
 8001d14:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <NRF24L01_Transmission_t_and_h+0x2e4>)
 8001d16:	6013      	str	r3, [r2, #0]
	i++;
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <NRF24L01_Transmission_t_and_h+0x2d4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	4a0e      	ldr	r2, [pc, #56]	; (8001d58 <NRF24L01_Transmission_t_and_h+0x2d4>)
 8001d20:	6013      	str	r3, [r2, #0]

	HAL_Delay(100);
 8001d22:	2064      	movs	r0, #100	; 0x64
 8001d24:	f003 f8e2 	bl	8004eec <HAL_Delay>
}
 8001d28:	bf00      	nop
 8001d2a:	374c      	adds	r7, #76	; 0x4c
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd90      	pop	{r4, r7, pc}
 8001d30:	08008fec 	.word	0x08008fec
 8001d34:	200005bc 	.word	0x200005bc
 8001d38:	08008ff0 	.word	0x08008ff0
 8001d3c:	08008ff4 	.word	0x08008ff4
 8001d40:	08008ff8 	.word	0x08008ff8
 8001d44:	2000001c 	.word	0x2000001c
 8001d48:	2000014a 	.word	0x2000014a
 8001d4c:	2000014b 	.word	0x2000014b
 8001d50:	2000013c 	.word	0x2000013c
 8001d54:	08008fc8 	.word	0x08008fc8
 8001d58:	20000018 	.word	0x20000018
 8001d5c:	08008fd8 	.word	0x08008fd8
 8001d60:	20000140 	.word	0x20000140
 8001d64:	08008fe4 	.word	0x08008fe4
 8001d68:	20000144 	.word	0x20000144

08001d6c <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <DelayMicro+0x3c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <DelayMicro+0x3c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a0b      	ldr	r2, [pc, #44]	; (8001dac <DelayMicro+0x40>)
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	0ddb      	lsrs	r3, r3, #23
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	fb02 f303 	mul.w	r3, r2, r3
 8001d8c:	607b      	str	r3, [r7, #4]
	while (micros--);
 8001d8e:	bf00      	nop
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	1e5a      	subs	r2, r3, #1
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1fa      	bne.n	8001d90 <DelayMicro+0x24>
}
 8001d9a:	bf00      	nop
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	2000002c 	.word	0x2000002c
 8001dac:	ffa71ee7 	.word	0xffa71ee7

08001db0 <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af02      	add	r7, sp, #8
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2110      	movs	r1, #16
 8001dc2:	4813      	ldr	r0, [pc, #76]	; (8001e10 <NRF24_ReadReg+0x60>)
 8001dc4:	f003 fccb 	bl	800575e <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 8001dc8:	f107 020f 	add.w	r2, r7, #15
 8001dcc:	1df9      	adds	r1, r7, #7
 8001dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	480f      	ldr	r0, [pc, #60]	; (8001e14 <NRF24_ReadReg+0x64>)
 8001dd8:	f005 f84f 	bl	8006e7a <HAL_SPI_TransmitReceive>
  if (addr!=STATUS_NRF)
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	2b07      	cmp	r3, #7
 8001de0:	d00c      	beq.n	8001dfc <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 8001de2:	23ff      	movs	r3, #255	; 0xff
 8001de4:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 8001de6:	f107 020f 	add.w	r2, r7, #15
 8001dea:	f107 010e 	add.w	r1, r7, #14
 8001dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	2301      	movs	r3, #1
 8001df6:	4807      	ldr	r0, [pc, #28]	; (8001e14 <NRF24_ReadReg+0x64>)
 8001df8:	f005 f83f 	bl	8006e7a <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	2110      	movs	r1, #16
 8001e00:	4803      	ldr	r0, [pc, #12]	; (8001e10 <NRF24_ReadReg+0x60>)
 8001e02:	f003 fcac 	bl	800575e <HAL_GPIO_WritePin>
  return dt;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40010800 	.word	0x40010800
 8001e14:	200006ec 	.word	0x200006ec

08001e18 <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	460a      	mov	r2, r1
 8001e22:	71fb      	strb	r3, [r7, #7]
 8001e24:	4613      	mov	r3, r2
 8001e26:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	f043 0320 	orr.w	r3, r3, #32
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8001e32:	2200      	movs	r2, #0
 8001e34:	2110      	movs	r1, #16
 8001e36:	480d      	ldr	r0, [pc, #52]	; (8001e6c <NRF24_WriteReg+0x54>)
 8001e38:	f003 fc91 	bl	800575e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8001e3c:	1df9      	adds	r1, r7, #7
 8001e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e42:	2201      	movs	r2, #1
 8001e44:	480a      	ldr	r0, [pc, #40]	; (8001e70 <NRF24_WriteReg+0x58>)
 8001e46:	f004 fdcb 	bl	80069e0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 8001e4a:	1db9      	adds	r1, r7, #6
 8001e4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e50:	2201      	movs	r2, #1
 8001e52:	4807      	ldr	r0, [pc, #28]	; (8001e70 <NRF24_WriteReg+0x58>)
 8001e54:	f004 fdc4 	bl	80069e0 <HAL_SPI_Transmit>
  CS_OFF;
 8001e58:	2201      	movs	r2, #1
 8001e5a:	2110      	movs	r1, #16
 8001e5c:	4803      	ldr	r0, [pc, #12]	; (8001e6c <NRF24_WriteReg+0x54>)
 8001e5e:	f003 fc7e 	bl	800575e <HAL_GPIO_WritePin>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40010800 	.word	0x40010800
 8001e70:	200006ec 	.word	0x200006ec

08001e74 <NRF24_ToggleFeatures>:
//----------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 8001e7a:	2350      	movs	r3, #80	; 0x50
 8001e7c:	713b      	strb	r3, [r7, #4]
  CS_ON;
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2110      	movs	r1, #16
 8001e82:	480f      	ldr	r0, [pc, #60]	; (8001ec0 <NRF24_ToggleFeatures+0x4c>)
 8001e84:	f003 fc6b 	bl	800575e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8001e88:	1d39      	adds	r1, r7, #4
 8001e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8e:	2201      	movs	r2, #1
 8001e90:	480c      	ldr	r0, [pc, #48]	; (8001ec4 <NRF24_ToggleFeatures+0x50>)
 8001e92:	f004 fda5 	bl	80069e0 <HAL_SPI_Transmit>
  DelayMicro(1);
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7ff ff68 	bl	8001d6c <DelayMicro>
  dt[0] = 0x73;
 8001e9c:	2373      	movs	r3, #115	; 0x73
 8001e9e:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8001ea0:	1d39      	adds	r1, r7, #4
 8001ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4806      	ldr	r0, [pc, #24]	; (8001ec4 <NRF24_ToggleFeatures+0x50>)
 8001eaa:	f004 fd99 	bl	80069e0 <HAL_SPI_Transmit>
  CS_OFF;
 8001eae:	2201      	movs	r2, #1
 8001eb0:	2110      	movs	r1, #16
 8001eb2:	4803      	ldr	r0, [pc, #12]	; (8001ec0 <NRF24_ToggleFeatures+0x4c>)
 8001eb4:	f003 fc53 	bl	800575e <HAL_GPIO_WritePin>
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40010800 	.word	0x40010800
 8001ec4:	200006ec 	.word	0x200006ec

08001ec8 <NRF24_Read_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	71fb      	strb	r3, [r7, #7]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2110      	movs	r1, #16
 8001edc:	480d      	ldr	r0, [pc, #52]	; (8001f14 <NRF24_Read_Buf+0x4c>)
 8001ede:	f003 fc3e 	bl	800575e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8001ee2:	1df9      	adds	r1, r7, #7
 8001ee4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ee8:	2201      	movs	r2, #1
 8001eea:	480b      	ldr	r0, [pc, #44]	; (8001f18 <NRF24_Read_Buf+0x50>)
 8001eec:	f004 fd78 	bl	80069e0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 8001ef0:	79bb      	ldrb	r3, [r7, #6]
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef8:	6839      	ldr	r1, [r7, #0]
 8001efa:	4807      	ldr	r0, [pc, #28]	; (8001f18 <NRF24_Read_Buf+0x50>)
 8001efc:	f004 feac 	bl	8006c58 <HAL_SPI_Receive>
  CS_OFF;
 8001f00:	2201      	movs	r2, #1
 8001f02:	2110      	movs	r1, #16
 8001f04:	4803      	ldr	r0, [pc, #12]	; (8001f14 <NRF24_Read_Buf+0x4c>)
 8001f06:	f003 fc2a 	bl	800575e <HAL_GPIO_WritePin>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40010800 	.word	0x40010800
 8001f18:	200006ec 	.word	0x200006ec

08001f1c <NRF24_Write_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	6039      	str	r1, [r7, #0]
 8001f26:	71fb      	strb	r3, [r7, #7]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								//Add write bit
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	f043 0320 	orr.w	r3, r3, #32
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8001f36:	2200      	movs	r2, #0
 8001f38:	2110      	movs	r1, #16
 8001f3a:	480f      	ldr	r0, [pc, #60]	; (8001f78 <NRF24_Write_Buf+0x5c>)
 8001f3c:	f003 fc0f 	bl	800575e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8001f40:	1df9      	adds	r1, r7, #7
 8001f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f46:	2201      	movs	r2, #1
 8001f48:	480c      	ldr	r0, [pc, #48]	; (8001f7c <NRF24_Write_Buf+0x60>)
 8001f4a:	f004 fd49 	bl	80069e0 <HAL_SPI_Transmit>
  DelayMicro(1);
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f7ff ff0c 	bl	8001d6c <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000);			// Send data in buffer
 8001f54:	79bb      	ldrb	r3, [r7, #6]
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f5c:	6839      	ldr	r1, [r7, #0]
 8001f5e:	4807      	ldr	r0, [pc, #28]	; (8001f7c <NRF24_Write_Buf+0x60>)
 8001f60:	f004 fd3e 	bl	80069e0 <HAL_SPI_Transmit>
  CS_OFF;
 8001f64:	2201      	movs	r2, #1
 8001f66:	2110      	movs	r1, #16
 8001f68:	4803      	ldr	r0, [pc, #12]	; (8001f78 <NRF24_Write_Buf+0x5c>)
 8001f6a:	f003 fbf8 	bl	800575e <HAL_GPIO_WritePin>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40010800 	.word	0x40010800
 8001f7c:	200006ec 	.word	0x200006ec

08001f80 <NRF24_FlushRX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushRX(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 8001f86:	23e2      	movs	r3, #226	; 0xe2
 8001f88:	713b      	strb	r3, [r7, #4]
  CS_ON;
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2110      	movs	r1, #16
 8001f8e:	480b      	ldr	r0, [pc, #44]	; (8001fbc <NRF24_FlushRX+0x3c>)
 8001f90:	f003 fbe5 	bl	800575e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8001f94:	1d39      	adds	r1, r7, #4
 8001f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	4808      	ldr	r0, [pc, #32]	; (8001fc0 <NRF24_FlushRX+0x40>)
 8001f9e:	f004 fd1f 	bl	80069e0 <HAL_SPI_Transmit>
  DelayMicro(1);
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	f7ff fee2 	bl	8001d6c <DelayMicro>
  CS_OFF;
 8001fa8:	2201      	movs	r2, #1
 8001faa:	2110      	movs	r1, #16
 8001fac:	4803      	ldr	r0, [pc, #12]	; (8001fbc <NRF24_FlushRX+0x3c>)
 8001fae:	f003 fbd6 	bl	800575e <HAL_GPIO_WritePin>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40010800 	.word	0x40010800
 8001fc0:	200006ec 	.word	0x200006ec

08001fc4 <NRF24_FlushTX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushTX(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 8001fca:	23e1      	movs	r3, #225	; 0xe1
 8001fcc:	713b      	strb	r3, [r7, #4]
  CS_ON;
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2110      	movs	r1, #16
 8001fd2:	480b      	ldr	r0, [pc, #44]	; (8002000 <NRF24_FlushTX+0x3c>)
 8001fd4:	f003 fbc3 	bl	800575e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8001fd8:	1d39      	adds	r1, r7, #4
 8001fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4808      	ldr	r0, [pc, #32]	; (8002004 <NRF24_FlushTX+0x40>)
 8001fe2:	f004 fcfd 	bl	80069e0 <HAL_SPI_Transmit>
  DelayMicro(1);
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f7ff fec0 	bl	8001d6c <DelayMicro>
  CS_OFF;
 8001fec:	2201      	movs	r2, #1
 8001fee:	2110      	movs	r1, #16
 8001ff0:	4803      	ldr	r0, [pc, #12]	; (8002000 <NRF24_FlushTX+0x3c>)
 8001ff2:	f003 fbb4 	bl	800575e <HAL_GPIO_WritePin>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40010800 	.word	0x40010800
 8002004:	200006ec 	.word	0x200006ec

08002008 <read_config_registers>:
//----------------------------------------------------------------------------------------
// Read config data from nrf registers
bool read_config_registers(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 800200c:	2064      	movs	r0, #100	; 0x64
 800200e:	f002 ff6d 	bl	8004eec <HAL_Delay>

	config_array[0] = NRF24_ReadReg(CONFIG);			// 0x0B
 8002012:	2000      	movs	r0, #0
 8002014:	f7ff fecc 	bl	8001db0 <NRF24_ReadReg>
 8002018:	4603      	mov	r3, r0
 800201a:	461a      	mov	r2, r3
 800201c:	4b18      	ldr	r3, [pc, #96]	; (8002080 <read_config_registers+0x78>)
 800201e:	701a      	strb	r2, [r3, #0]
	config_array[1] = NRF24_ReadReg(EN_AA);			    // 0x01
 8002020:	2001      	movs	r0, #1
 8002022:	f7ff fec5 	bl	8001db0 <NRF24_ReadReg>
 8002026:	4603      	mov	r3, r0
 8002028:	461a      	mov	r2, r3
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <read_config_registers+0x78>)
 800202c:	705a      	strb	r2, [r3, #1]
	config_array[2] = NRF24_ReadReg(EN_RXADDR); 		// 0x01
 800202e:	2002      	movs	r0, #2
 8002030:	f7ff febe 	bl	8001db0 <NRF24_ReadReg>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <read_config_registers+0x78>)
 800203a:	709a      	strb	r2, [r3, #2]
	config_array[3] = NRF24_ReadReg(STATUS_NRF);		// 0x0E
 800203c:	2007      	movs	r0, #7
 800203e:	f7ff feb7 	bl	8001db0 <NRF24_ReadReg>
 8002042:	4603      	mov	r3, r0
 8002044:	461a      	mov	r2, r3
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <read_config_registers+0x78>)
 8002048:	70da      	strb	r2, [r3, #3]
	config_array[4] = NRF24_ReadReg(RF_SETUP);		    // 0x06
 800204a:	2006      	movs	r0, #6
 800204c:	f7ff feb0 	bl	8001db0 <NRF24_ReadReg>
 8002050:	4603      	mov	r3, r0
 8002052:	461a      	mov	r2, r3
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <read_config_registers+0x78>)
 8002056:	711a      	strb	r2, [r3, #4]

	NRF24_Read_Buf(TX_ADDR,buf1,3);
 8002058:	2203      	movs	r2, #3
 800205a:	490a      	ldr	r1, [pc, #40]	; (8002084 <read_config_registers+0x7c>)
 800205c:	2010      	movs	r0, #16
 800205e:	f7ff ff33 	bl	8001ec8 <NRF24_Read_Buf>
	NRF24_Read_Buf(RX_ADDR_P0,buf1,3);
 8002062:	2203      	movs	r2, #3
 8002064:	4907      	ldr	r1, [pc, #28]	; (8002084 <read_config_registers+0x7c>)
 8002066:	200a      	movs	r0, #10
 8002068:	f7ff ff2e 	bl	8001ec8 <NRF24_Read_Buf>

	if(config_array[0] == 0)		// Data from nrf module was read
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <read_config_registers+0x78>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <read_config_registers+0x70>
	{
		return false;
 8002074:	2300      	movs	r3, #0
 8002076:	e000      	b.n	800207a <read_config_registers+0x72>
	}
	else
	{
		return true;
 8002078:	2301      	movs	r3, #1
	}
}
 800207a:	4618      	mov	r0, r3
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000114 	.word	0x20000114
 8002084:	20000124 	.word	0x20000124

08002088 <reset_nrf24l01>:
//----------------------------------------------------------------------------------------
void reset_nrf24l01(void)   // reconfigure module
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
	CE_RESET;
 800208e:	2200      	movs	r2, #0
 8002090:	2108      	movs	r1, #8
 8002092:	4829      	ldr	r0, [pc, #164]	; (8002138 <reset_nrf24l01+0xb0>)
 8002094:	f003 fb63 	bl	800575e <HAL_GPIO_WritePin>
	DelayMicro(5000);
 8002098:	f241 3088 	movw	r0, #5000	; 0x1388
 800209c:	f7ff fe66 	bl	8001d6c <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 80020a0:	210a      	movs	r1, #10
 80020a2:	2000      	movs	r0, #0
 80020a4:	f7ff feb8 	bl	8001e18 <NRF24_WriteReg>

	DelayMicro(5000);
 80020a8:	f241 3088 	movw	r0, #5000	; 0x1388
 80020ac:	f7ff fe5e 	bl	8001d6c <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable Pipe0
 80020b0:	2101      	movs	r1, #1
 80020b2:	2001      	movs	r0, #1
 80020b4:	f7ff feb0 	bl	8001e18 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe0
 80020b8:	2101      	movs	r1, #1
 80020ba:	2002      	movs	r0, #2
 80020bc:	f7ff feac 	bl	8001e18 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 80020c0:	2101      	movs	r1, #1
 80020c2:	2003      	movs	r0, #3
 80020c4:	f7ff fea8 	bl	8001e18 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 80020c8:	215f      	movs	r1, #95	; 0x5f
 80020ca:	2004      	movs	r0, #4
 80020cc:	f7ff fea4 	bl	8001e18 <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 80020d0:	f7ff fed0 	bl	8001e74 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 80020d4:	2100      	movs	r1, #0
 80020d6:	201d      	movs	r0, #29
 80020d8:	f7ff fe9e 	bl	8001e18 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 80020dc:	2100      	movs	r1, #0
 80020de:	201c      	movs	r0, #28
 80020e0:	f7ff fe9a 	bl	8001e18 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x00); 		// Reset flags for IRQ   // WAS NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 80020e4:	2100      	movs	r1, #0
 80020e6:	2007      	movs	r0, #7
 80020e8:	f7ff fe96 	bl	8001e18 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 80020ec:	214c      	movs	r1, #76	; 0x4c
 80020ee:	2005      	movs	r0, #5
 80020f0:	f7ff fe92 	bl	8001e18 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate:250kbps
 80020f4:	2126      	movs	r1, #38	; 0x26
 80020f6:	2006      	movs	r0, #6
 80020f8:	f7ff fe8e 	bl	8001e18 <NRF24_WriteReg>

	uint8_t TX_ADDRESS_RESET[TX_ADR_WIDTH] = {0x00,0x00,0x00};   // Address for pipe 0
 80020fc:	4a0f      	ldr	r2, [pc, #60]	; (800213c <reset_nrf24l01+0xb4>)
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	4611      	mov	r1, r2
 8002104:	8019      	strh	r1, [r3, #0]
 8002106:	3302      	adds	r3, #2
 8002108:	0c12      	lsrs	r2, r2, #16
 800210a:	701a      	strb	r2, [r3, #0]
	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS_RESET, TX_ADR_WIDTH);			// Write TX address
 800210c:	1d3b      	adds	r3, r7, #4
 800210e:	2203      	movs	r2, #3
 8002110:	4619      	mov	r1, r3
 8002112:	2010      	movs	r0, #16
 8002114:	f7ff ff02 	bl	8001f1c <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS_RESET, TX_ADR_WIDTH);		// Set up pipe 0 address
 8002118:	1d3b      	adds	r3, r7, #4
 800211a:	2203      	movs	r2, #3
 800211c:	4619      	mov	r1, r3
 800211e:	200a      	movs	r0, #10
 8002120:	f7ff fefc 	bl	8001f1c <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 	// Number of bytes in TX buffer
 8002124:	210f      	movs	r1, #15
 8002126:	2011      	movs	r0, #17
 8002128:	f7ff fe76 	bl	8001e18 <NRF24_WriteReg>

	NRF24L01_RX_Mode_for_TX_mode();
 800212c:	f7ff fa62 	bl	80015f4 <NRF24L01_RX_Mode_for_TX_mode>
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40010800 	.word	0x40010800
 800213c:	08008ffc 	.word	0x08008ffc

08002140 <clearn_oled>:
	  ssd1306_Fill(Black);
	  ssd1306_UpdateScreen();
}
//----------------------------------------------------------------------------------------
void clearn_oled(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
	 ssd1306_Fill(Black);
 8002144:	2000      	movs	r0, #0
 8002146:	f000 f889 	bl	800225c <ssd1306_Fill>
	 ssd1306_UpdateScreen();
 800214a:	f000 f8a9 	bl	80022a0 <ssd1306_UpdateScreen>
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af04      	add	r7, sp, #16
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800215e:	230a      	movs	r3, #10
 8002160:	9302      	str	r3, [sp, #8]
 8002162:	2301      	movs	r3, #1
 8002164:	9301      	str	r3, [sp, #4]
 8002166:	1dfb      	adds	r3, r7, #7
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	2301      	movs	r3, #1
 800216c:	2200      	movs	r2, #0
 800216e:	2178      	movs	r1, #120	; 0x78
 8002170:	4803      	ldr	r0, [pc, #12]	; (8002180 <ssd1306_WriteCommand+0x2c>)
 8002172:	f003 fc81 	bl	8005a78 <HAL_I2C_Mem_Write>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	2000060c 	.word	0x2000060c

08002184 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8002188:	2064      	movs	r0, #100	; 0x64
 800218a:	f002 feaf 	bl	8004eec <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 800218e:	20ae      	movs	r0, #174	; 0xae
 8002190:	f7ff ffe0 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002194:	2020      	movs	r0, #32
 8002196:	f7ff ffdd 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800219a:	2010      	movs	r0, #16
 800219c:	f7ff ffda 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80021a0:	20b0      	movs	r0, #176	; 0xb0
 80021a2:	f7ff ffd7 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80021a6:	20c8      	movs	r0, #200	; 0xc8
 80021a8:	f7ff ffd4 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80021ac:	2000      	movs	r0, #0
 80021ae:	f7ff ffd1 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80021b2:	2010      	movs	r0, #16
 80021b4:	f7ff ffce 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 80021b8:	2040      	movs	r0, #64	; 0x40
 80021ba:	f7ff ffcb 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80021be:	2081      	movs	r0, #129	; 0x81
 80021c0:	f7ff ffc8 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80021c4:	20ff      	movs	r0, #255	; 0xff
 80021c6:	f7ff ffc5 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80021ca:	20a1      	movs	r0, #161	; 0xa1
 80021cc:	f7ff ffc2 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80021d0:	20a6      	movs	r0, #166	; 0xa6
 80021d2:	f7ff ffbf 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80021d6:	20a8      	movs	r0, #168	; 0xa8
 80021d8:	f7ff ffbc 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80021dc:	203f      	movs	r0, #63	; 0x3f
 80021de:	f7ff ffb9 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80021e2:	20a4      	movs	r0, #164	; 0xa4
 80021e4:	f7ff ffb6 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80021e8:	20d3      	movs	r0, #211	; 0xd3
 80021ea:	f7ff ffb3 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80021ee:	2000      	movs	r0, #0
 80021f0:	f7ff ffb0 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80021f4:	20d5      	movs	r0, #213	; 0xd5
 80021f6:	f7ff ffad 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80021fa:	20f0      	movs	r0, #240	; 0xf0
 80021fc:	f7ff ffaa 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002200:	20d9      	movs	r0, #217	; 0xd9
 8002202:	f7ff ffa7 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8002206:	2022      	movs	r0, #34	; 0x22
 8002208:	f7ff ffa4 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 800220c:	20da      	movs	r0, #218	; 0xda
 800220e:	f7ff ffa1 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8002212:	2012      	movs	r0, #18
 8002214:	f7ff ff9e 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8002218:	20db      	movs	r0, #219	; 0xdb
 800221a:	f7ff ff9b 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800221e:	2020      	movs	r0, #32
 8002220:	f7ff ff98 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002224:	208d      	movs	r0, #141	; 0x8d
 8002226:	f7ff ff95 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 800222a:	2014      	movs	r0, #20
 800222c:	f7ff ff92 	bl	8002154 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8002230:	20af      	movs	r0, #175	; 0xaf
 8002232:	f7ff ff8f 	bl	8002154 <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 8002236:	2000      	movs	r0, #0
 8002238:	f000 f810 	bl	800225c <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 800223c:	f000 f830 	bl	80022a0 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <ssd1306_Init+0xd4>)
 8002242:	2200      	movs	r2, #0
 8002244:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002246:	4b04      	ldr	r3, [pc, #16]	; (8002258 <ssd1306_Init+0xd4>)
 8002248:	2200      	movs	r2, #0
 800224a:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 800224c:	4b02      	ldr	r3, [pc, #8]	; (8002258 <ssd1306_Init+0xd4>)
 800224e:	2201      	movs	r2, #1
 8002250:	715a      	strb	r2, [r3, #5]

	return 1;
 8002252:	2301      	movs	r3, #1
}
 8002254:	4618      	mov	r0, r3
 8002256:	bd80      	pop	{r7, pc}
 8002258:	2000054c 	.word	0x2000054c

0800225c <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	e00d      	b.n	8002288 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <ssd1306_Fill+0x1a>
 8002272:	2100      	movs	r1, #0
 8002274:	e000      	b.n	8002278 <ssd1306_Fill+0x1c>
 8002276:	21ff      	movs	r1, #255	; 0xff
 8002278:	4a08      	ldr	r2, [pc, #32]	; (800229c <ssd1306_Fill+0x40>)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4413      	add	r3, r2
 800227e:	460a      	mov	r2, r1
 8002280:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3301      	adds	r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228e:	d3ed      	bcc.n	800226c <ssd1306_Fill+0x10>
	}
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr
 800229c:	2000014c 	.word	0x2000014c

080022a0 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 80022a6:	2300      	movs	r3, #0
 80022a8:	71fb      	strb	r3, [r7, #7]
 80022aa:	e01d      	b.n	80022e8 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	3b50      	subs	r3, #80	; 0x50
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ff4e 	bl	8002154 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7ff ff4b 	bl	8002154 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 80022be:	2010      	movs	r0, #16
 80022c0:	f7ff ff48 	bl	8002154 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	01db      	lsls	r3, r3, #7
 80022c8:	4a0b      	ldr	r2, [pc, #44]	; (80022f8 <ssd1306_UpdateScreen+0x58>)
 80022ca:	4413      	add	r3, r2
 80022cc:	2264      	movs	r2, #100	; 0x64
 80022ce:	9202      	str	r2, [sp, #8]
 80022d0:	2280      	movs	r2, #128	; 0x80
 80022d2:	9201      	str	r2, [sp, #4]
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2301      	movs	r3, #1
 80022d8:	2240      	movs	r2, #64	; 0x40
 80022da:	2178      	movs	r1, #120	; 0x78
 80022dc:	4807      	ldr	r0, [pc, #28]	; (80022fc <ssd1306_UpdateScreen+0x5c>)
 80022de:	f003 fbcb 	bl	8005a78 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	3301      	adds	r3, #1
 80022e6:	71fb      	strb	r3, [r7, #7]
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	2b07      	cmp	r3, #7
 80022ec:	d9de      	bls.n	80022ac <ssd1306_UpdateScreen+0xc>
	}
}
 80022ee:	bf00      	nop
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	2000014c 	.word	0x2000014c
 80022fc:	2000060c 	.word	0x2000060c

08002300 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	71fb      	strb	r3, [r7, #7]
 800230a:	460b      	mov	r3, r1
 800230c:	71bb      	strb	r3, [r7, #6]
 800230e:	4613      	mov	r3, r2
 8002310:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	2b00      	cmp	r3, #0
 8002318:	db48      	blt.n	80023ac <ssd1306_DrawPixel+0xac>
 800231a:	79bb      	ldrb	r3, [r7, #6]
 800231c:	2b3f      	cmp	r3, #63	; 0x3f
 800231e:	d845      	bhi.n	80023ac <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8002320:	4b25      	ldr	r3, [pc, #148]	; (80023b8 <ssd1306_DrawPixel+0xb8>)
 8002322:	791b      	ldrb	r3, [r3, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d006      	beq.n	8002336 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8002328:	797b      	ldrb	r3, [r7, #5]
 800232a:	2b00      	cmp	r3, #0
 800232c:	bf0c      	ite	eq
 800232e:	2301      	moveq	r3, #1
 8002330:	2300      	movne	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 8002336:	797b      	ldrb	r3, [r7, #5]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d11a      	bne.n	8002372 <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800233c:	79fa      	ldrb	r2, [r7, #7]
 800233e:	79bb      	ldrb	r3, [r7, #6]
 8002340:	08db      	lsrs	r3, r3, #3
 8002342:	b2d8      	uxtb	r0, r3
 8002344:	4603      	mov	r3, r0
 8002346:	01db      	lsls	r3, r3, #7
 8002348:	4413      	add	r3, r2
 800234a:	4a1c      	ldr	r2, [pc, #112]	; (80023bc <ssd1306_DrawPixel+0xbc>)
 800234c:	5cd3      	ldrb	r3, [r2, r3]
 800234e:	b25a      	sxtb	r2, r3
 8002350:	79bb      	ldrb	r3, [r7, #6]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	2101      	movs	r1, #1
 8002358:	fa01 f303 	lsl.w	r3, r1, r3
 800235c:	b25b      	sxtb	r3, r3
 800235e:	4313      	orrs	r3, r2
 8002360:	b259      	sxtb	r1, r3
 8002362:	79fa      	ldrb	r2, [r7, #7]
 8002364:	4603      	mov	r3, r0
 8002366:	01db      	lsls	r3, r3, #7
 8002368:	4413      	add	r3, r2
 800236a:	b2c9      	uxtb	r1, r1
 800236c:	4a13      	ldr	r2, [pc, #76]	; (80023bc <ssd1306_DrawPixel+0xbc>)
 800236e:	54d1      	strb	r1, [r2, r3]
 8002370:	e01d      	b.n	80023ae <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002372:	79fa      	ldrb	r2, [r7, #7]
 8002374:	79bb      	ldrb	r3, [r7, #6]
 8002376:	08db      	lsrs	r3, r3, #3
 8002378:	b2d8      	uxtb	r0, r3
 800237a:	4603      	mov	r3, r0
 800237c:	01db      	lsls	r3, r3, #7
 800237e:	4413      	add	r3, r2
 8002380:	4a0e      	ldr	r2, [pc, #56]	; (80023bc <ssd1306_DrawPixel+0xbc>)
 8002382:	5cd3      	ldrb	r3, [r2, r3]
 8002384:	b25a      	sxtb	r2, r3
 8002386:	79bb      	ldrb	r3, [r7, #6]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	2101      	movs	r1, #1
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	b25b      	sxtb	r3, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	b25b      	sxtb	r3, r3
 8002398:	4013      	ands	r3, r2
 800239a:	b259      	sxtb	r1, r3
 800239c:	79fa      	ldrb	r2, [r7, #7]
 800239e:	4603      	mov	r3, r0
 80023a0:	01db      	lsls	r3, r3, #7
 80023a2:	4413      	add	r3, r2
 80023a4:	b2c9      	uxtb	r1, r1
 80023a6:	4a05      	ldr	r2, [pc, #20]	; (80023bc <ssd1306_DrawPixel+0xbc>)
 80023a8:	54d1      	strb	r1, [r2, r3]
 80023aa:	e000      	b.n	80023ae <ssd1306_DrawPixel+0xae>
		return;
 80023ac:	bf00      	nop
	}
}
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	2000054c 	.word	0x2000054c
 80023bc:	2000014c 	.word	0x2000014c

080023c0 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4604      	mov	r4, r0
 80023c8:	1d38      	adds	r0, r7, #4
 80023ca:	e880 0006 	stmia.w	r0, {r1, r2}
 80023ce:	461a      	mov	r2, r3
 80023d0:	4623      	mov	r3, r4
 80023d2:	73fb      	strb	r3, [r7, #15]
 80023d4:	4613      	mov	r3, r2
 80023d6:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80023d8:	4b38      	ldr	r3, [pc, #224]	; (80024bc <ssd1306_WriteChar+0xfc>)
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	793b      	ldrb	r3, [r7, #4]
 80023e0:	4413      	add	r3, r2
 80023e2:	2b7f      	cmp	r3, #127	; 0x7f
 80023e4:	dc06      	bgt.n	80023f4 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80023e6:	4b35      	ldr	r3, [pc, #212]	; (80024bc <ssd1306_WriteChar+0xfc>)
 80023e8:	885b      	ldrh	r3, [r3, #2]
 80023ea:	461a      	mov	r2, r3
 80023ec:	797b      	ldrb	r3, [r7, #5]
 80023ee:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80023f0:	2b3f      	cmp	r3, #63	; 0x3f
 80023f2:	dd01      	ble.n	80023f8 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	e05d      	b.n	80024b4 <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
 80023fc:	e04c      	b.n	8002498 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	3b20      	subs	r3, #32
 8002404:	7979      	ldrb	r1, [r7, #5]
 8002406:	fb01 f303 	mul.w	r3, r1, r3
 800240a:	4619      	mov	r1, r3
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	440b      	add	r3, r1
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8002418:	2300      	movs	r3, #0
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	e034      	b.n	8002488 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d012      	beq.n	8002454 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800242e:	4b23      	ldr	r3, [pc, #140]	; (80024bc <ssd1306_WriteChar+0xfc>)
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	b2da      	uxtb	r2, r3
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	4413      	add	r3, r2
 800243a:	b2d8      	uxtb	r0, r3
 800243c:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <ssd1306_WriteChar+0xfc>)
 800243e:	885b      	ldrh	r3, [r3, #2]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	4413      	add	r3, r2
 8002448:	b2db      	uxtb	r3, r3
 800244a:	7bba      	ldrb	r2, [r7, #14]
 800244c:	4619      	mov	r1, r3
 800244e:	f7ff ff57 	bl	8002300 <ssd1306_DrawPixel>
 8002452:	e016      	b.n	8002482 <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002454:	4b19      	ldr	r3, [pc, #100]	; (80024bc <ssd1306_WriteChar+0xfc>)
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	4413      	add	r3, r2
 8002460:	b2d8      	uxtb	r0, r3
 8002462:	4b16      	ldr	r3, [pc, #88]	; (80024bc <ssd1306_WriteChar+0xfc>)
 8002464:	885b      	ldrh	r3, [r3, #2]
 8002466:	b2da      	uxtb	r2, r3
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	b2db      	uxtb	r3, r3
 800246c:	4413      	add	r3, r2
 800246e:	b2d9      	uxtb	r1, r3
 8002470:	7bbb      	ldrb	r3, [r7, #14]
 8002472:	2b00      	cmp	r3, #0
 8002474:	bf0c      	ite	eq
 8002476:	2301      	moveq	r3, #1
 8002478:	2300      	movne	r3, #0
 800247a:	b2db      	uxtb	r3, r3
 800247c:	461a      	mov	r2, r3
 800247e:	f7ff ff3f 	bl	8002300 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	3301      	adds	r3, #1
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	793b      	ldrb	r3, [r7, #4]
 800248a:	461a      	mov	r2, r3
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	4293      	cmp	r3, r2
 8002490:	d3c5      	bcc.n	800241e <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3301      	adds	r3, #1
 8002496:	61fb      	str	r3, [r7, #28]
 8002498:	797b      	ldrb	r3, [r7, #5]
 800249a:	461a      	mov	r2, r3
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	4293      	cmp	r3, r2
 80024a0:	d3ad      	bcc.n	80023fe <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <ssd1306_WriteChar+0xfc>)
 80024a4:	881a      	ldrh	r2, [r3, #0]
 80024a6:	793b      	ldrb	r3, [r7, #4]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	4413      	add	r3, r2
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	4b03      	ldr	r3, [pc, #12]	; (80024bc <ssd1306_WriteChar+0xfc>)
 80024b0:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3724      	adds	r7, #36	; 0x24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd90      	pop	{r4, r7, pc}
 80024bc:	2000054c 	.word	0x2000054c

080024c0 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	1d38      	adds	r0, r7, #4
 80024ca:	e880 0006 	stmia.w	r0, {r1, r2}
 80024ce:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 80024d0:	e012      	b.n	80024f8 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	7818      	ldrb	r0, [r3, #0]
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	1d3a      	adds	r2, r7, #4
 80024da:	ca06      	ldmia	r2, {r1, r2}
 80024dc:	f7ff ff70 	bl	80023c0 <ssd1306_WriteChar>
 80024e0:	4603      	mov	r3, r0
 80024e2:	461a      	mov	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d002      	beq.n	80024f2 <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	e008      	b.n	8002504 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	3301      	adds	r3, #1
 80024f6:	60fb      	str	r3, [r7, #12]
	while (*str)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1e8      	bne.n	80024d2 <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	781b      	ldrb	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	460a      	mov	r2, r1
 8002516:	71fb      	strb	r3, [r7, #7]
 8002518:	4613      	mov	r3, r2
 800251a:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	b29a      	uxth	r2, r3
 8002520:	4b05      	ldr	r3, [pc, #20]	; (8002538 <ssd1306_SetCursor+0x2c>)
 8002522:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8002524:	79bb      	ldrb	r3, [r7, #6]
 8002526:	b29a      	uxth	r2, r3
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <ssd1306_SetCursor+0x2c>)
 800252a:	805a      	strh	r2, [r3, #2]
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	2000054c 	.word	0x2000054c

0800253c <ssd1306_Line>:

void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800253c:	b590      	push	{r4, r7, lr}
 800253e:	b089      	sub	sp, #36	; 0x24
 8002540:	af00      	add	r7, sp, #0
 8002542:	4604      	mov	r4, r0
 8002544:	4608      	mov	r0, r1
 8002546:	4611      	mov	r1, r2
 8002548:	461a      	mov	r2, r3
 800254a:	4623      	mov	r3, r4
 800254c:	71fb      	strb	r3, [r7, #7]
 800254e:	4603      	mov	r3, r0
 8002550:	71bb      	strb	r3, [r7, #6]
 8002552:	460b      	mov	r3, r1
 8002554:	717b      	strb	r3, [r7, #5]
 8002556:	4613      	mov	r3, r2
 8002558:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 800255a:	797a      	ldrb	r2, [r7, #5]
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	bfb8      	it	lt
 8002564:	425b      	neglt	r3, r3
 8002566:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8002568:	793a      	ldrb	r2, [r7, #4]
 800256a:	79bb      	ldrb	r3, [r7, #6]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	bfb8      	it	lt
 8002572:	425b      	neglt	r3, r3
 8002574:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8002576:	79fa      	ldrb	r2, [r7, #7]
 8002578:	797b      	ldrb	r3, [r7, #5]
 800257a:	429a      	cmp	r2, r3
 800257c:	d201      	bcs.n	8002582 <ssd1306_Line+0x46>
 800257e:	2301      	movs	r3, #1
 8002580:	e001      	b.n	8002586 <ssd1306_Line+0x4a>
 8002582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002586:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8002588:	79ba      	ldrb	r2, [r7, #6]
 800258a:	793b      	ldrb	r3, [r7, #4]
 800258c:	429a      	cmp	r2, r3
 800258e:	d201      	bcs.n	8002594 <ssd1306_Line+0x58>
 8002590:	2301      	movs	r3, #1
 8002592:	e001      	b.n	8002598 <ssd1306_Line+0x5c>
 8002594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002598:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	61fb      	str	r3, [r7, #28]
  int32_t error2;

  ssd1306_DrawPixel(x2, y2, color);
 80025a2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80025a6:	7939      	ldrb	r1, [r7, #4]
 80025a8:	797b      	ldrb	r3, [r7, #5]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fea8 	bl	8002300 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80025b0:	e024      	b.n	80025fc <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 80025b2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80025b6:	79b9      	ldrb	r1, [r7, #6]
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fea0 	bl	8002300 <ssd1306_DrawPixel>
    error2 = error * 2;
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	425b      	negs	r3, r3
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	dd08      	ble.n	80025e2 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	4413      	add	r3, r2
 80025e0:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }

    if(error2 < deltaX)
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	da08      	bge.n	80025fc <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80025ea:	69fa      	ldr	r2, [r7, #28]
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	4413      	add	r3, r2
 80025f0:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	79bb      	ldrb	r3, [r7, #6]
 80025f8:	4413      	add	r3, r2
 80025fa:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 80025fc:	79fa      	ldrb	r2, [r7, #7]
 80025fe:	797b      	ldrb	r3, [r7, #5]
 8002600:	429a      	cmp	r2, r3
 8002602:	d1d6      	bne.n	80025b2 <ssd1306_Line+0x76>
 8002604:	79ba      	ldrb	r2, [r7, #6]
 8002606:	793b      	ldrb	r3, [r7, #4]
 8002608:	429a      	cmp	r2, r3
 800260a:	d1d2      	bne.n	80025b2 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 800260c:	bf00      	nop
}
 800260e:	3724      	adds	r7, #36	; 0x24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd90      	pop	{r4, r7, pc}

08002614 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b085      	sub	sp, #20
 8002618:	af02      	add	r7, sp, #8
 800261a:	4604      	mov	r4, r0
 800261c:	4608      	mov	r0, r1
 800261e:	4611      	mov	r1, r2
 8002620:	461a      	mov	r2, r3
 8002622:	4623      	mov	r3, r4
 8002624:	71fb      	strb	r3, [r7, #7]
 8002626:	4603      	mov	r3, r0
 8002628:	71bb      	strb	r3, [r7, #6]
 800262a:	460b      	mov	r3, r1
 800262c:	717b      	strb	r3, [r7, #5]
 800262e:	4613      	mov	r3, r2
 8002630:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 8002632:	79bc      	ldrb	r4, [r7, #6]
 8002634:	797a      	ldrb	r2, [r7, #5]
 8002636:	79b9      	ldrb	r1, [r7, #6]
 8002638:	79f8      	ldrb	r0, [r7, #7]
 800263a:	7e3b      	ldrb	r3, [r7, #24]
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	4623      	mov	r3, r4
 8002640:	f7ff ff7c 	bl	800253c <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8002644:	793c      	ldrb	r4, [r7, #4]
 8002646:	797a      	ldrb	r2, [r7, #5]
 8002648:	79b9      	ldrb	r1, [r7, #6]
 800264a:	7978      	ldrb	r0, [r7, #5]
 800264c:	7e3b      	ldrb	r3, [r7, #24]
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	4623      	mov	r3, r4
 8002652:	f7ff ff73 	bl	800253c <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8002656:	793c      	ldrb	r4, [r7, #4]
 8002658:	79fa      	ldrb	r2, [r7, #7]
 800265a:	7939      	ldrb	r1, [r7, #4]
 800265c:	7978      	ldrb	r0, [r7, #5]
 800265e:	7e3b      	ldrb	r3, [r7, #24]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	4623      	mov	r3, r4
 8002664:	f7ff ff6a 	bl	800253c <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8002668:	79bc      	ldrb	r4, [r7, #6]
 800266a:	79fa      	ldrb	r2, [r7, #7]
 800266c:	7939      	ldrb	r1, [r7, #4]
 800266e:	79f8      	ldrb	r0, [r7, #7]
 8002670:	7e3b      	ldrb	r3, [r7, #24]
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	4623      	mov	r3, r4
 8002676:	f7ff ff61 	bl	800253c <ssd1306_Line>

  return;
 800267a:	bf00      	nop
}
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	bd90      	pop	{r4, r7, pc}

08002682 <ssd1306FillRect>:
void ssd1306FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color) {
 8002682:	b590      	push	{r4, r7, lr}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	4604      	mov	r4, r0
 800268a:	4608      	mov	r0, r1
 800268c:	4611      	mov	r1, r2
 800268e:	461a      	mov	r2, r3
 8002690:	4623      	mov	r3, r4
 8002692:	71fb      	strb	r3, [r7, #7]
 8002694:	4603      	mov	r3, r0
 8002696:	71bb      	strb	r3, [r7, #6]
 8002698:	460b      	mov	r3, r1
 800269a:	717b      	strb	r3, [r7, #5]
 800269c:	4613      	mov	r3, r2
 800269e:	713b      	strb	r3, [r7, #4]
    uint8_t x0, x1, y1;

    x0 = x;
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	73fb      	strb	r3, [r7, #15]
    x1 = x + w;
 80026a4:	79fa      	ldrb	r2, [r7, #7]
 80026a6:	797b      	ldrb	r3, [r7, #5]
 80026a8:	4413      	add	r3, r2
 80026aa:	73bb      	strb	r3, [r7, #14]
    y1 = y + h;
 80026ac:	79ba      	ldrb	r2, [r7, #6]
 80026ae:	793b      	ldrb	r3, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	737b      	strb	r3, [r7, #13]
    for(; y < y1; y++)
 80026b4:	e013      	b.n	80026de <ssd1306FillRect+0x5c>
        for(x = x0; x < x1; x++)
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	71fb      	strb	r3, [r7, #7]
 80026ba:	e009      	b.n	80026d0 <ssd1306FillRect+0x4e>
        	ssd1306_DrawPixel(x, y, color);
 80026bc:	8c3b      	ldrh	r3, [r7, #32]
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	79b9      	ldrb	r1, [r7, #6]
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fe1b 	bl	8002300 <ssd1306_DrawPixel>
        for(x = x0; x < x1; x++)
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	3301      	adds	r3, #1
 80026ce:	71fb      	strb	r3, [r7, #7]
 80026d0:	79fa      	ldrb	r2, [r7, #7]
 80026d2:	7bbb      	ldrb	r3, [r7, #14]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d3f1      	bcc.n	80026bc <ssd1306FillRect+0x3a>
    for(; y < y1; y++)
 80026d8:	79bb      	ldrb	r3, [r7, #6]
 80026da:	3301      	adds	r3, #1
 80026dc:	71bb      	strb	r3, [r7, #6]
 80026de:	79ba      	ldrb	r2, [r7, #6]
 80026e0:	7b7b      	ldrb	r3, [r7, #13]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d3e7      	bcc.n	80026b6 <ssd1306FillRect+0x34>
            //ssd1306DrawPixel( x, y, color, layer);
}
 80026e6:	bf00      	nop
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd90      	pop	{r4, r7, pc}

080026f0 <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <DelayMicro+0x3c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 80026fe:	4b0b      	ldr	r3, [pc, #44]	; (800272c <DelayMicro+0x3c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a0b      	ldr	r2, [pc, #44]	; (8002730 <DelayMicro+0x40>)
 8002704:	fba2 2303 	umull	r2, r3, r2, r3
 8002708:	0ddb      	lsrs	r3, r3, #23
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	fb02 f303 	mul.w	r3, r2, r3
 8002710:	607b      	str	r3, [r7, #4]
	while (micros--);
 8002712:	bf00      	nop
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	1e5a      	subs	r2, r3, #1
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1fa      	bne.n	8002714 <DelayMicro+0x24>
}
 800271e:	bf00      	nop
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	2000002c 	.word	0x2000002c
 8002730:	ffa71ee7 	.word	0xffa71ee7

08002734 <am2302_measure>:
{
	HAL_Delay(2000); 							// First init must be 2 seconds delay
}
//----------------------------------------------------------------------------------------
void am2302_measure(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af00      	add	r7, sp, #0
 * __                ________________________
 * 	 \			    /				         \
 * 	  \____________/			              \_
 */

	bool get_data_status = false;
 800273a:	2300      	movs	r3, #0
 800273c:	76fb      	strb	r3, [r7, #27]
	int j = 0;   							// Counter bytes
 800273e:	2300      	movs	r3, #0
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;								// Counter bits
 8002742:	2300      	movs	r3, #0
 8002744:	623b      	str	r3, [r7, #32]
	uint8_t data[4] = {0};					// Buffer for incoming data from sensor
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
	float temper, hum;						// Buffer variables

	// Init GPIO like output
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 800274a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800274e:	4883      	ldr	r0, [pc, #524]	; (800295c <am2302_measure+0x228>)
 8002750:	f002 ff32 	bl	80055b8 <HAL_GPIO_DeInit>
	GPIO_InitTypeDef GPIO_InitStruct = {0};		// Make struct
 8002754:	463b      	mov	r3, r7
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	605a      	str	r2, [r3, #4]
 800275c:	609a      	str	r2, [r3, #8]
 800275e:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002764:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002766:	2301      	movs	r3, #1
 8002768:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800276a:	2302      	movs	r3, #2
 800276c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800276e:	463b      	mov	r3, r7
 8002770:	4619      	mov	r1, r3
 8002772:	487a      	ldr	r0, [pc, #488]	; (800295c <am2302_measure+0x228>)
 8002774:	f002 fd9c 	bl	80052b0 <HAL_GPIO_Init>

	// Make output pin B12
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002778:	2200      	movs	r2, #0
 800277a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800277e:	4877      	ldr	r0, [pc, #476]	; (800295c <am2302_measure+0x228>)
 8002780:	f002 ffed 	bl	800575e <HAL_GPIO_WritePin>
	DelayMicro(18000);
 8002784:	f244 6050 	movw	r0, #18000	; 0x4650
 8002788:	f7ff ffb2 	bl	80026f0 <DelayMicro>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800278c:	2201      	movs	r2, #1
 800278e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002792:	4872      	ldr	r0, [pc, #456]	; (800295c <am2302_measure+0x228>)
 8002794:	f002 ffe3 	bl	800575e <HAL_GPIO_WritePin>
	DelayMicro(39);
 8002798:	2027      	movs	r0, #39	; 0x27
 800279a:	f7ff ffa9 	bl	80026f0 <DelayMicro>

	// Make input pin B12
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 800279e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027a2:	486e      	ldr	r0, [pc, #440]	; (800295c <am2302_measure+0x228>)
 80027a4:	f002 ff08 	bl	80055b8 <HAL_GPIO_DeInit>
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80027a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ac:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027b2:	2301      	movs	r3, #1
 80027b4:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b6:	463b      	mov	r3, r7
 80027b8:	4619      	mov	r1, r3
 80027ba:	4868      	ldr	r0, [pc, #416]	; (800295c <am2302_measure+0x228>)
 80027bc:	f002 fd78 	bl	80052b0 <HAL_GPIO_Init>

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))
 80027c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027c4:	4865      	ldr	r0, [pc, #404]	; (800295c <am2302_measure+0x228>)
 80027c6:	f002 ffb3 	bl	8005730 <HAL_GPIO_ReadPin>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d004      	beq.n	80027da <am2302_measure+0xa6>
	{
		am3202_sensor.status = error_state; 					// Error. Sensor not response
 80027d0:	4b63      	ldr	r3, [pc, #396]	; (8002960 <am2302_measure+0x22c>)
 80027d2:	781a      	ldrb	r2, [r3, #0]
 80027d4:	4b63      	ldr	r3, [pc, #396]	; (8002964 <am2302_measure+0x230>)
 80027d6:	721a      	strb	r2, [r3, #8]
 80027d8:	e003      	b.n	80027e2 <am2302_measure+0xae>
	}
	else
	{
		am3202_sensor.status = ready_to_work;
 80027da:	4b63      	ldr	r3, [pc, #396]	; (8002968 <am2302_measure+0x234>)
 80027dc:	781a      	ldrb	r2, [r3, #0]
 80027de:	4b61      	ldr	r3, [pc, #388]	; (8002964 <am2302_measure+0x230>)
 80027e0:	721a      	strb	r2, [r3, #8]
	}

	DelayMicro(80);
 80027e2:	2050      	movs	r0, #80	; 0x50
 80027e4:	f7ff ff84 	bl	80026f0 <DelayMicro>
	if(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)))
 80027e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027ec:	485b      	ldr	r0, [pc, #364]	; (800295c <am2302_measure+0x228>)
 80027ee:	f002 ff9f 	bl	8005730 <HAL_GPIO_ReadPin>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d104      	bne.n	8002802 <am2302_measure+0xce>
	{
		am3202_sensor.status = error_state; 					// Error. Sensor not response
 80027f8:	4b59      	ldr	r3, [pc, #356]	; (8002960 <am2302_measure+0x22c>)
 80027fa:	781a      	ldrb	r2, [r3, #0]
 80027fc:	4b59      	ldr	r3, [pc, #356]	; (8002964 <am2302_measure+0x230>)
 80027fe:	721a      	strb	r2, [r3, #8]
 8002800:	e003      	b.n	800280a <am2302_measure+0xd6>
	}
	else
	{
		am3202_sensor.status = ready_to_work;
 8002802:	4b59      	ldr	r3, [pc, #356]	; (8002968 <am2302_measure+0x234>)
 8002804:	781a      	ldrb	r2, [r3, #0]
 8002806:	4b57      	ldr	r3, [pc, #348]	; (8002964 <am2302_measure+0x230>)
 8002808:	721a      	strb	r2, [r3, #8]
	}

	DelayMicro(80);
 800280a:	2050      	movs	r0, #80	; 0x50
 800280c:	f7ff ff70 	bl	80026f0 <DelayMicro>

	if(am3202_sensor.status == ready_to_work)
 8002810:	4b54      	ldr	r3, [pc, #336]	; (8002964 <am2302_measure+0x230>)
 8002812:	7a1a      	ldrb	r2, [r3, #8]
 8002814:	4b54      	ldr	r3, [pc, #336]	; (8002968 <am2302_measure+0x234>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	f040 8096 	bne.w	800294a <am2302_measure+0x216>
	{
		for(j = 0; j <5; j++)							// Reading 5 bytes
 800281e:	2300      	movs	r3, #0
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
 8002822:	e04f      	b.n	80028c4 <am2302_measure+0x190>
		{
			data[4-j] = 0;
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	f1c3 0304 	rsb	r3, r3, #4
 800282a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800282e:	4413      	add	r3, r2
 8002830:	2200      	movs	r2, #0
 8002832:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(i = 0; i < 8; i++)						// Reading 8 bits
 8002836:	2300      	movs	r3, #0
 8002838:	623b      	str	r3, [r7, #32]
 800283a:	e03a      	b.n	80028b2 <am2302_measure+0x17e>
			{

				while(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)));    // While signal is "0"
 800283c:	bf00      	nop
 800283e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002842:	4846      	ldr	r0, [pc, #280]	; (800295c <am2302_measure+0x228>)
 8002844:	f002 ff74 	bl	8005730 <HAL_GPIO_ReadPin>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f7      	beq.n	800283e <am2302_measure+0x10a>
				DelayMicro(30);
 800284e:	201e      	movs	r0, #30
 8002850:	f7ff ff4e 	bl	80026f0 <DelayMicro>

				if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12))   // If signal is high when wrute "1" in buffer (data[])
 8002854:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002858:	4840      	ldr	r0, [pc, #256]	; (800295c <am2302_measure+0x228>)
 800285a:	f002 ff69 	bl	8005730 <HAL_GPIO_ReadPin>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01a      	beq.n	800289a <am2302_measure+0x166>
				{
					data[4-j] |= (1 << (7 - i));        // Shift received bite
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	f1c3 0304 	rsb	r3, r3, #4
 800286a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800286e:	4413      	add	r3, r2
 8002870:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002874:	b25a      	sxtb	r2, r3
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	f1c3 0307 	rsb	r3, r3, #7
 800287c:	2101      	movs	r1, #1
 800287e:	fa01 f303 	lsl.w	r3, r1, r3
 8002882:	b25b      	sxtb	r3, r3
 8002884:	4313      	orrs	r3, r2
 8002886:	b25a      	sxtb	r2, r3
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	f1c3 0304 	rsb	r3, r3, #4
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002894:	440b      	add	r3, r1
 8002896:	f803 2c18 	strb.w	r2, [r3, #-24]
				}

				while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12));		// Wait end of "1" signal
 800289a:	bf00      	nop
 800289c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028a0:	482e      	ldr	r0, [pc, #184]	; (800295c <am2302_measure+0x228>)
 80028a2:	f002 ff45 	bl	8005730 <HAL_GPIO_ReadPin>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f7      	bne.n	800289c <am2302_measure+0x168>
			for(i = 0; i < 8; i++)						// Reading 8 bits
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	3301      	adds	r3, #1
 80028b0:	623b      	str	r3, [r7, #32]
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	2b07      	cmp	r3, #7
 80028b6:	ddc1      	ble.n	800283c <am2302_measure+0x108>
			}
			am3202_sensor.status = true;										// Data was been written okay
 80028b8:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <am2302_measure+0x230>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	721a      	strb	r2, [r3, #8]
		for(j = 0; j <5; j++)							// Reading 5 bytes
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	3301      	adds	r3, #1
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	ddac      	ble.n	8002824 <am2302_measure+0xf0>
		}

		temper = (float)((*(uint16_t*)(data+1)) & 0x3FFF) /10;
 80028ca:	f107 0310 	add.w	r3, r7, #16
 80028ce:	3301      	adds	r3, #1
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fd ff06 	bl	80006e8 <__aeabi_i2f>
 80028dc:	4603      	mov	r3, r0
 80028de:	4923      	ldr	r1, [pc, #140]	; (800296c <am2302_measure+0x238>)
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fe f809 	bl	80008f8 <__aeabi_fdiv>
 80028e6:	4603      	mov	r3, r0
 80028e8:	61fb      	str	r3, [r7, #28]
		if((*(uint16_t*)(data+1)) & 0x8000) temper  *= -1.0;
 80028ea:	f107 0310 	add.w	r3, r7, #16
 80028ee:	3301      	adds	r3, #1
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	b21b      	sxth	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	da0c      	bge.n	8002912 <am2302_measure+0x1de>
 80028f8:	69f8      	ldr	r0, [r7, #28]
 80028fa:	f7fd fd93 	bl	8000424 <__aeabi_f2d>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	f7fd fde5 	bl	80004d4 <__aeabi_d2f>
 800290a:	4603      	mov	r3, r0
 800290c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002910:	61fb      	str	r3, [r7, #28]
		am3202_sensor.temterature = temper;
 8002912:	69f8      	ldr	r0, [r7, #28]
 8002914:	f7fe f88c 	bl	8000a30 <__aeabi_f2iz>
 8002918:	4603      	mov	r3, r0
 800291a:	4a12      	ldr	r2, [pc, #72]	; (8002964 <am2302_measure+0x230>)
 800291c:	6013      	str	r3, [r2, #0]

		hum = (float)(*(int16_t*)(data+3)) / 10;
 800291e:	f107 0310 	add.w	r3, r7, #16
 8002922:	3303      	adds	r3, #3
 8002924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fedd 	bl	80006e8 <__aeabi_i2f>
 800292e:	4603      	mov	r3, r0
 8002930:	490e      	ldr	r1, [pc, #56]	; (800296c <am2302_measure+0x238>)
 8002932:	4618      	mov	r0, r3
 8002934:	f7fd ffe0 	bl	80008f8 <__aeabi_fdiv>
 8002938:	4603      	mov	r3, r0
 800293a:	617b      	str	r3, [r7, #20]
		am3202_sensor.humidity = hum;
 800293c:	6978      	ldr	r0, [r7, #20]
 800293e:	f7fe f877 	bl	8000a30 <__aeabi_f2iz>
 8002942:	4603      	mov	r3, r0
 8002944:	4a07      	ldr	r2, [pc, #28]	; (8002964 <am2302_measure+0x230>)
 8002946:	6053      	str	r3, [r2, #4]
	else
	{
		am3202_sensor.status = error_state;
		// PRINT MESSAGE ON OLLED <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}
}
 8002948:	e003      	b.n	8002952 <am2302_measure+0x21e>
		am3202_sensor.status = error_state;
 800294a:	4b05      	ldr	r3, [pc, #20]	; (8002960 <am2302_measure+0x22c>)
 800294c:	781a      	ldrb	r2, [r3, #0]
 800294e:	4b05      	ldr	r3, [pc, #20]	; (8002964 <am2302_measure+0x230>)
 8002950:	721a      	strb	r2, [r3, #8]
}
 8002952:	bf00      	nop
 8002954:	3728      	adds	r7, #40	; 0x28
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40010c00 	.word	0x40010c00
 8002960:	20000552 	.word	0x20000552
 8002964:	200005bc 	.word	0x200005bc
 8002968:	20000024 	.word	0x20000024
 800296c:	41200000 	.word	0x41200000

08002970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002974:	f002 fa58 	bl	8004e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002978:	f000 f828 	bl	80029cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800297c:	f000 f9c0 	bl	8002d00 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002980:	f000 f86a 	bl	8002a58 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002984:	f000 f896 	bl	8002ab4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002988:	f000 f966 	bl	8002c58 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800298c:	f000 f8c8 	bl	8002b20 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8002990:	f000 f98c 	bl	8002cac <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8002994:	f000 f914 	bl	8002bc0 <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002998:	2201      	movs	r2, #1
 800299a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800299e:	480a      	ldr	r0, [pc, #40]	; (80029c8 <main+0x58>)
 80029a0:	f002 fedd 	bl	800575e <HAL_GPIO_WritePin>

  // Init interrupt (For LoRa)
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80029a4:	2200      	movs	r2, #0
 80029a6:	2100      	movs	r1, #0
 80029a8:	2025      	movs	r0, #37	; 0x25
 80029aa:	f002 fb9a 	bl	80050e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029ae:	2025      	movs	r0, #37	; 0x25
 80029b0:	f002 fbb3 	bl	800511a <HAL_NVIC_EnableIRQ>

//  HAL_TIM_Base_Start_IT(&htim2);	// For sensor measure

  // OLED init
  ssd1306_Init();
 80029b4:	f7ff fbe6 	bl	8002184 <ssd1306_Init>
  ssd1306_Fill(Black);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f7ff fc4f 	bl	800225c <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80029be:	f7ff fc6f 	bl	80022a0 <ssd1306_UpdateScreen>

  while (1)
  {
	 menu();
 80029c2:	f001 f893 	bl	8003aec <menu>
 80029c6:	e7fc      	b.n	80029c2 <main+0x52>
 80029c8:	40011000 	.word	0x40011000

080029cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b090      	sub	sp, #64	; 0x40
 80029d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029d2:	f107 0318 	add.w	r3, r7, #24
 80029d6:	2228      	movs	r2, #40	; 0x28
 80029d8:	2100      	movs	r1, #0
 80029da:	4618      	mov	r0, r3
 80029dc:	f005 fe0c 	bl	80085f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029e0:	1d3b      	adds	r3, r7, #4
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	605a      	str	r2, [r3, #4]
 80029e8:	609a      	str	r2, [r3, #8]
 80029ea:	60da      	str	r2, [r3, #12]
 80029ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029ee:	2301      	movs	r3, #1
 80029f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80029f8:	2300      	movs	r3, #0
 80029fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029fc:	2301      	movs	r3, #1
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a00:	2302      	movs	r3, #2
 8002a02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8002a0a:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8002a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a10:	f107 0318 	add.w	r3, r7, #24
 8002a14:	4618      	mov	r0, r3
 8002a16:	f003 fb45 	bl	80060a4 <HAL_RCC_OscConfig>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002a20:	f000 fa96 	bl	8002f50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a24:	230f      	movs	r3, #15
 8002a26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a3a:	1d3b      	adds	r3, r7, #4
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f003 fdb0 	bl	80065a4 <HAL_RCC_ClockConfig>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002a4a:	f000 fa81 	bl	8002f50 <Error_Handler>
  }
}
 8002a4e:	bf00      	nop
 8002a50:	3740      	adds	r7, #64	; 0x40
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a5c:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <MX_I2C1_Init+0x50>)
 8002a5e:	4a13      	ldr	r2, [pc, #76]	; (8002aac <MX_I2C1_Init+0x54>)
 8002a60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002a62:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <MX_I2C1_Init+0x50>)
 8002a64:	4a12      	ldr	r2, [pc, #72]	; (8002ab0 <MX_I2C1_Init+0x58>)
 8002a66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a68:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <MX_I2C1_Init+0x50>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <MX_I2C1_Init+0x50>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a74:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <MX_I2C1_Init+0x50>)
 8002a76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <MX_I2C1_Init+0x50>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a82:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <MX_I2C1_Init+0x50>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a88:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <MX_I2C1_Init+0x50>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <MX_I2C1_Init+0x50>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a94:	4804      	ldr	r0, [pc, #16]	; (8002aa8 <MX_I2C1_Init+0x50>)
 8002a96:	f002 feab 	bl	80057f0 <HAL_I2C_Init>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002aa0:	f000 fa56 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	2000060c 	.word	0x2000060c
 8002aac:	40005400 	.word	0x40005400
 8002ab0:	00061a80 	.word	0x00061a80

08002ab4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ab8:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <MX_SPI1_Init+0x64>)
 8002aba:	4a18      	ldr	r2, [pc, #96]	; (8002b1c <MX_SPI1_Init+0x68>)
 8002abc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002abe:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <MX_SPI1_Init+0x64>)
 8002ac0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ac4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ac6:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <MX_SPI1_Init+0x64>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002acc:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <MX_SPI1_Init+0x64>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ad2:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <MX_SPI1_Init+0x64>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ad8:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <MX_SPI1_Init+0x64>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ade:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <MX_SPI1_Init+0x64>)
 8002ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ae4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <MX_SPI1_Init+0x64>)
 8002ae8:	2220      	movs	r2, #32
 8002aea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aec:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <MX_SPI1_Init+0x64>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002af2:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <MX_SPI1_Init+0x64>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002af8:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <MX_SPI1_Init+0x64>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <MX_SPI1_Init+0x64>)
 8002b00:	220a      	movs	r2, #10
 8002b02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b04:	4804      	ldr	r0, [pc, #16]	; (8002b18 <MX_SPI1_Init+0x64>)
 8002b06:	f003 fee7 	bl	80068d8 <HAL_SPI_Init>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b10:	f000 fa1e 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	200006ec 	.word	0x200006ec
 8002b1c:	40013000 	.word	0x40013000

08002b20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b26:	f107 0308 	add.w	r3, r7, #8
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	605a      	str	r2, [r3, #4]
 8002b30:	609a      	str	r2, [r3, #8]
 8002b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b34:	463b      	mov	r3, r7
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b3c:	4b1e      	ldr	r3, [pc, #120]	; (8002bb8 <MX_TIM1_Init+0x98>)
 8002b3e:	4a1f      	ldr	r2, [pc, #124]	; (8002bbc <MX_TIM1_Init+0x9c>)
 8002b40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 8002b42:	4b1d      	ldr	r3, [pc, #116]	; (8002bb8 <MX_TIM1_Init+0x98>)
 8002b44:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8002b48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b4a:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <MX_TIM1_Init+0x98>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8002b50:	4b19      	ldr	r3, [pc, #100]	; (8002bb8 <MX_TIM1_Init+0x98>)
 8002b52:	2264      	movs	r2, #100	; 0x64
 8002b54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b56:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <MX_TIM1_Init+0x98>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b5c:	4b16      	ldr	r3, [pc, #88]	; (8002bb8 <MX_TIM1_Init+0x98>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b62:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <MX_TIM1_Init+0x98>)
 8002b64:	2280      	movs	r2, #128	; 0x80
 8002b66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b68:	4813      	ldr	r0, [pc, #76]	; (8002bb8 <MX_TIM1_Init+0x98>)
 8002b6a:	f004 fc21 	bl	80073b0 <HAL_TIM_Base_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002b74:	f000 f9ec 	bl	8002f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b7e:	f107 0308 	add.w	r3, r7, #8
 8002b82:	4619      	mov	r1, r3
 8002b84:	480c      	ldr	r0, [pc, #48]	; (8002bb8 <MX_TIM1_Init+0x98>)
 8002b86:	f004 fdeb 	bl	8007760 <HAL_TIM_ConfigClockSource>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002b90:	f000 f9de 	bl	8002f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002b94:	2310      	movs	r3, #16
 8002b96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b9c:	463b      	mov	r3, r7
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4805      	ldr	r0, [pc, #20]	; (8002bb8 <MX_TIM1_Init+0x98>)
 8002ba2:	f004 ffc7 	bl	8007b34 <HAL_TIMEx_MasterConfigSynchronization>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002bac:	f000 f9d0 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002bb0:	bf00      	nop
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	200006a4 	.word	0x200006a4
 8002bbc:	40012c00 	.word	0x40012c00

08002bc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bc6:	f107 0308 	add.w	r3, r7, #8
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
 8002bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bd4:	463b      	mov	r3, r7
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bdc:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <MX_TIM2_Init+0x94>)
 8002bde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002be2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400;
 8002be4:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <MX_TIM2_Init+0x94>)
 8002be6:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8002bea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bec:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <MX_TIM2_Init+0x94>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002bf2:	4b18      	ldr	r3, [pc, #96]	; (8002c54 <MX_TIM2_Init+0x94>)
 8002bf4:	2264      	movs	r2, #100	; 0x64
 8002bf6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bf8:	4b16      	ldr	r3, [pc, #88]	; (8002c54 <MX_TIM2_Init+0x94>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bfe:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <MX_TIM2_Init+0x94>)
 8002c00:	2280      	movs	r2, #128	; 0x80
 8002c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c04:	4813      	ldr	r0, [pc, #76]	; (8002c54 <MX_TIM2_Init+0x94>)
 8002c06:	f004 fbd3 	bl	80073b0 <HAL_TIM_Base_Init>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002c10:	f000 f99e 	bl	8002f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c1a:	f107 0308 	add.w	r3, r7, #8
 8002c1e:	4619      	mov	r1, r3
 8002c20:	480c      	ldr	r0, [pc, #48]	; (8002c54 <MX_TIM2_Init+0x94>)
 8002c22:	f004 fd9d 	bl	8007760 <HAL_TIM_ConfigClockSource>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002c2c:	f000 f990 	bl	8002f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002c30:	2310      	movs	r3, #16
 8002c32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c34:	2300      	movs	r3, #0
 8002c36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c38:	463b      	mov	r3, r7
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4805      	ldr	r0, [pc, #20]	; (8002c54 <MX_TIM2_Init+0x94>)
 8002c3e:	f004 ff79 	bl	8007b34 <HAL_TIMEx_MasterConfigSynchronization>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002c48:	f000 f982 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c4c:	bf00      	nop
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20000744 	.word	0x20000744

08002c58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c5c:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <MX_USART1_UART_Init+0x4c>)
 8002c5e:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <MX_USART1_UART_Init+0x50>)
 8002c60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <MX_USART1_UART_Init+0x4c>)
 8002c64:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002c68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <MX_USART1_UART_Init+0x4c>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <MX_USART1_UART_Init+0x4c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <MX_USART1_UART_Init+0x4c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c7c:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <MX_USART1_UART_Init+0x4c>)
 8002c7e:	220c      	movs	r2, #12
 8002c80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <MX_USART1_UART_Init+0x4c>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <MX_USART1_UART_Init+0x4c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c8e:	4805      	ldr	r0, [pc, #20]	; (8002ca4 <MX_USART1_UART_Init+0x4c>)
 8002c90:	f004 ffc0 	bl	8007c14 <HAL_UART_Init>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c9a:	f000 f959 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000660 	.word	0x20000660
 8002ca8:	40013800 	.word	0x40013800

08002cac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <MX_USART3_UART_Init+0x4c>)
 8002cb2:	4a12      	ldr	r2, [pc, #72]	; (8002cfc <MX_USART3_UART_Init+0x50>)
 8002cb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <MX_USART3_UART_Init+0x4c>)
 8002cb8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002cbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <MX_USART3_UART_Init+0x4c>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <MX_USART3_UART_Init+0x4c>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002cca:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <MX_USART3_UART_Init+0x4c>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002cd0:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <MX_USART3_UART_Init+0x4c>)
 8002cd2:	220c      	movs	r2, #12
 8002cd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cd6:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <MX_USART3_UART_Init+0x4c>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <MX_USART3_UART_Init+0x4c>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ce2:	4805      	ldr	r0, [pc, #20]	; (8002cf8 <MX_USART3_UART_Init+0x4c>)
 8002ce4:	f004 ff96 	bl	8007c14 <HAL_UART_Init>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002cee:	f000 f92f 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	200005c8 	.word	0x200005c8
 8002cfc:	40004800 	.word	0x40004800

08002d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d06:	f107 0310 	add.w	r3, r7, #16
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	605a      	str	r2, [r3, #4]
 8002d10:	609a      	str	r2, [r3, #8]
 8002d12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d14:	4b5f      	ldr	r3, [pc, #380]	; (8002e94 <MX_GPIO_Init+0x194>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	4a5e      	ldr	r2, [pc, #376]	; (8002e94 <MX_GPIO_Init+0x194>)
 8002d1a:	f043 0310 	orr.w	r3, r3, #16
 8002d1e:	6193      	str	r3, [r2, #24]
 8002d20:	4b5c      	ldr	r3, [pc, #368]	; (8002e94 <MX_GPIO_Init+0x194>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d2c:	4b59      	ldr	r3, [pc, #356]	; (8002e94 <MX_GPIO_Init+0x194>)
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	4a58      	ldr	r2, [pc, #352]	; (8002e94 <MX_GPIO_Init+0x194>)
 8002d32:	f043 0320 	orr.w	r3, r3, #32
 8002d36:	6193      	str	r3, [r2, #24]
 8002d38:	4b56      	ldr	r3, [pc, #344]	; (8002e94 <MX_GPIO_Init+0x194>)
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	f003 0320 	and.w	r3, r3, #32
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d44:	4b53      	ldr	r3, [pc, #332]	; (8002e94 <MX_GPIO_Init+0x194>)
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	4a52      	ldr	r2, [pc, #328]	; (8002e94 <MX_GPIO_Init+0x194>)
 8002d4a:	f043 0304 	orr.w	r3, r3, #4
 8002d4e:	6193      	str	r3, [r2, #24]
 8002d50:	4b50      	ldr	r3, [pc, #320]	; (8002e94 <MX_GPIO_Init+0x194>)
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	607b      	str	r3, [r7, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5c:	4b4d      	ldr	r3, [pc, #308]	; (8002e94 <MX_GPIO_Init+0x194>)
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	4a4c      	ldr	r2, [pc, #304]	; (8002e94 <MX_GPIO_Init+0x194>)
 8002d62:	f043 0308 	orr.w	r3, r3, #8
 8002d66:	6193      	str	r3, [r2, #24]
 8002d68:	4b4a      	ldr	r3, [pc, #296]	; (8002e94 <MX_GPIO_Init+0x194>)
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	603b      	str	r3, [r7, #0]
 8002d72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002d74:	2200      	movs	r2, #0
 8002d76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d7a:	4847      	ldr	r0, [pc, #284]	; (8002e98 <MX_GPIO_Init+0x198>)
 8002d7c:	f002 fcef 	bl	800575e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8002d80:	2200      	movs	r2, #0
 8002d82:	2108      	movs	r1, #8
 8002d84:	4845      	ldr	r0, [pc, #276]	; (8002e9c <MX_GPIO_Init+0x19c>)
 8002d86:	f002 fcea 	bl	800575e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	2110      	movs	r1, #16
 8002d8e:	4843      	ldr	r0, [pc, #268]	; (8002e9c <MX_GPIO_Init+0x19c>)
 8002d90:	f002 fce5 	bl	800575e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 8002d94:	2200      	movs	r2, #0
 8002d96:	f242 0101 	movw	r1, #8193	; 0x2001
 8002d9a:	4841      	ldr	r0, [pc, #260]	; (8002ea0 <MX_GPIO_Init+0x1a0>)
 8002d9c:	f002 fcdf 	bl	800575e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002da0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002da4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da6:	2301      	movs	r3, #1
 8002da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dae:	2302      	movs	r3, #2
 8002db0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db2:	f107 0310 	add.w	r3, r7, #16
 8002db6:	4619      	mov	r1, r3
 8002db8:	4837      	ldr	r0, [pc, #220]	; (8002e98 <MX_GPIO_Init+0x198>)
 8002dba:	f002 fa79 	bl	80052b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002dc2:	4b38      	ldr	r3, [pc, #224]	; (8002ea4 <MX_GPIO_Init+0x1a4>)
 8002dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dca:	f107 0310 	add.w	r3, r7, #16
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4832      	ldr	r0, [pc, #200]	; (8002e9c <MX_GPIO_Init+0x19c>)
 8002dd2:	f002 fa6d 	bl	80052b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002dd6:	2318      	movs	r3, #24
 8002dd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002de2:	2303      	movs	r3, #3
 8002de4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de6:	f107 0310 	add.w	r3, r7, #16
 8002dea:	4619      	mov	r1, r3
 8002dec:	482b      	ldr	r0, [pc, #172]	; (8002e9c <MX_GPIO_Init+0x19c>)
 8002dee:	f002 fa5f 	bl	80052b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 8002df2:	f242 0301 	movw	r3, #8193	; 0x2001
 8002df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e00:	2302      	movs	r3, #2
 8002e02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e04:	f107 0310 	add.w	r3, r7, #16
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4825      	ldr	r0, [pc, #148]	; (8002ea0 <MX_GPIO_Init+0x1a0>)
 8002e0c:	f002 fa50 	bl	80052b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 8002e10:	2302      	movs	r3, #2
 8002e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 8002e1c:	f107 0310 	add.w	r3, r7, #16
 8002e20:	4619      	mov	r1, r3
 8002e22:	481f      	ldr	r0, [pc, #124]	; (8002ea0 <MX_GPIO_Init+0x1a0>)
 8002e24:	f002 fa44 	bl	80052b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002e28:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <MX_GPIO_Init+0x1a4>)
 8002e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e32:	2301      	movs	r3, #1
 8002e34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e36:	f107 0310 	add.w	r3, r7, #16
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4818      	ldr	r0, [pc, #96]	; (8002ea0 <MX_GPIO_Init+0x1a0>)
 8002e3e:	f002 fa37 	bl	80052b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e48:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <MX_GPIO_Init+0x1a4>)
 8002e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e50:	f107 0310 	add.w	r3, r7, #16
 8002e54:	4619      	mov	r1, r3
 8002e56:	4811      	ldr	r0, [pc, #68]	; (8002e9c <MX_GPIO_Init+0x19c>)
 8002e58:	f002 fa2a 	bl	80052b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2100      	movs	r1, #0
 8002e60:	2008      	movs	r0, #8
 8002e62:	f002 f93e 	bl	80050e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002e66:	2008      	movs	r0, #8
 8002e68:	f002 f957 	bl	800511a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2100      	movs	r1, #0
 8002e70:	2017      	movs	r0, #23
 8002e72:	f002 f936 	bl	80050e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e76:	2017      	movs	r0, #23
 8002e78:	f002 f94f 	bl	800511a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2100      	movs	r1, #0
 8002e80:	2028      	movs	r0, #40	; 0x28
 8002e82:	f002 f92e 	bl	80050e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e86:	2028      	movs	r0, #40	; 0x28
 8002e88:	f002 f947 	bl	800511a <HAL_NVIC_EnableIRQ>

}
 8002e8c:	bf00      	nop
 8002e8e:	3720      	adds	r7, #32
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000
 8002e98:	40011000 	.word	0x40011000
 8002e9c:	40010800 	.word	0x40010800
 8002ea0:	40010c00 	.word	0x40010c00
 8002ea4:	10210000 	.word	0x10210000

08002ea8 <HAL_GPIO_EXTI_Callback>:
	HAL_GPIO_DeInit(GPIOC, GPIO_PIN_14);

}
//----------------------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin== GPIO_PIN_2)			// If detect External interrupt from PA2   (IRQ from NRF module)
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d108      	bne.n	8002eca <HAL_GPIO_EXTI_Callback+0x22>
  {
	  if(tx_or_rx_mode == rx_mode)
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002eba:	781a      	ldrb	r2, [r3, #0]
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0x30>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d103      	bne.n	8002ecc <HAL_GPIO_EXTI_Callback+0x24>
	  {
		  IRQ_Callback();					// Call Callback
 8002ec4:	f7fe fb5c 	bl	8001580 <IRQ_Callback>
  }
  else
  {
    __NOP();
  }
}
 8002ec8:	e000      	b.n	8002ecc <HAL_GPIO_EXTI_Callback+0x24>
    __NOP();
 8002eca:	bf00      	nop
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20000008 	.word	0x20000008
 8002ed8:	20000102 	.word	0x20000102

08002edc <HAL_UART_RxCpltCallback>:
//----------------------------------------------------------------------------------------
// Receive data from LoRa module
// If data received (Received 1 bytes)        Define in: HAL_UART_Receive_IT(&huart1, str, 1);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)											// Which uart generate Callback function
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a15      	ldr	r2, [pc, #84]	; (8002f3c <HAL_UART_RxCpltCallback+0x60>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d123      	bne.n	8002f34 <HAL_UART_RxCpltCallback+0x58>
	{
		if((str[0] == '\n') || (rx_data_counter >= sizeof(uart_rx_data)))   		// Detect '\0' Null or  data too long
 8002eec:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <HAL_UART_RxCpltCallback+0x64>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b0a      	cmp	r3, #10
 8002ef2:	d003      	beq.n	8002efc <HAL_UART_RxCpltCallback+0x20>
 8002ef4:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <HAL_UART_RxCpltCallback+0x68>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b31      	cmp	r3, #49	; 0x31
 8002efa:	d906      	bls.n	8002f0a <HAL_UART_RxCpltCallback+0x2e>
		{
			flag_command_received = true;                           // Data is ready
 8002efc:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <HAL_UART_RxCpltCallback+0x6c>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	701a      	strb	r2, [r3, #0]
			rx_data_counter = 0;
 8002f02:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <HAL_UART_RxCpltCallback+0x68>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
			rx_data_counter ++;
		}
	}
}
 8002f08:	e014      	b.n	8002f34 <HAL_UART_RxCpltCallback+0x58>
			flag_command_received = false;							// Receive data
 8002f0a:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <HAL_UART_RxCpltCallback+0x6c>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
			uart_rx_data[rx_data_counter] = str[0];					// Save data in global buffer
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <HAL_UART_RxCpltCallback+0x68>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <HAL_UART_RxCpltCallback+0x64>)
 8002f18:	7819      	ldrb	r1, [r3, #0]
 8002f1a:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <HAL_UART_RxCpltCallback+0x70>)
 8002f1c:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart1, str, 1);					// Turn on "HAL_UART_Receive_IT"
 8002f1e:	2201      	movs	r2, #1
 8002f20:	4907      	ldr	r1, [pc, #28]	; (8002f40 <HAL_UART_RxCpltCallback+0x64>)
 8002f22:	4806      	ldr	r0, [pc, #24]	; (8002f3c <HAL_UART_RxCpltCallback+0x60>)
 8002f24:	f004 ff07 	bl	8007d36 <HAL_UART_Receive_IT>
			rx_data_counter ++;
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <HAL_UART_RxCpltCallback+0x68>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <HAL_UART_RxCpltCallback+0x68>)
 8002f32:	701a      	strb	r2, [r3, #0]
}
 8002f34:	bf00      	nop
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20000660 	.word	0x20000660
 8002f40:	20000588 	.word	0x20000588
 8002f44:	2000058a 	.word	0x2000058a
 8002f48:	20000589 	.word	0x20000589
 8002f4c:	20000554 	.word	0x20000554

08002f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f54:	b672      	cpsid	i
}
 8002f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f58:	e7fe      	b.n	8002f58 <Error_Handler+0x8>
	...

08002f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f62:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <HAL_MspInit+0x5c>)
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	4a14      	ldr	r2, [pc, #80]	; (8002fb8 <HAL_MspInit+0x5c>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	6193      	str	r3, [r2, #24]
 8002f6e:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <HAL_MspInit+0x5c>)
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f7a:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <HAL_MspInit+0x5c>)
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	4a0e      	ldr	r2, [pc, #56]	; (8002fb8 <HAL_MspInit+0x5c>)
 8002f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f84:	61d3      	str	r3, [r2, #28]
 8002f86:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <HAL_MspInit+0x5c>)
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8e:	607b      	str	r3, [r7, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <HAL_MspInit+0x60>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <HAL_MspInit+0x60>)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40010000 	.word	0x40010000

08002fc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 0310 	add.w	r3, r7, #16
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a15      	ldr	r2, [pc, #84]	; (8003030 <HAL_I2C_MspInit+0x70>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d123      	bne.n	8003028 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe0:	4b14      	ldr	r3, [pc, #80]	; (8003034 <HAL_I2C_MspInit+0x74>)
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	4a13      	ldr	r2, [pc, #76]	; (8003034 <HAL_I2C_MspInit+0x74>)
 8002fe6:	f043 0308 	orr.w	r3, r3, #8
 8002fea:	6193      	str	r3, [r2, #24]
 8002fec:	4b11      	ldr	r3, [pc, #68]	; (8003034 <HAL_I2C_MspInit+0x74>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ff8:	23c0      	movs	r3, #192	; 0xc0
 8002ffa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ffc:	2312      	movs	r3, #18
 8002ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003000:	2303      	movs	r3, #3
 8003002:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003004:	f107 0310 	add.w	r3, r7, #16
 8003008:	4619      	mov	r1, r3
 800300a:	480b      	ldr	r0, [pc, #44]	; (8003038 <HAL_I2C_MspInit+0x78>)
 800300c:	f002 f950 	bl	80052b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003010:	4b08      	ldr	r3, [pc, #32]	; (8003034 <HAL_I2C_MspInit+0x74>)
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	4a07      	ldr	r2, [pc, #28]	; (8003034 <HAL_I2C_MspInit+0x74>)
 8003016:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800301a:	61d3      	str	r3, [r2, #28]
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <HAL_I2C_MspInit+0x74>)
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003028:	bf00      	nop
 800302a:	3720      	adds	r7, #32
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40005400 	.word	0x40005400
 8003034:	40021000 	.word	0x40021000
 8003038:	40010c00 	.word	0x40010c00

0800303c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003044:	f107 0310 	add.w	r3, r7, #16
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1b      	ldr	r2, [pc, #108]	; (80030c4 <HAL_SPI_MspInit+0x88>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d12f      	bne.n	80030bc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800305c:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <HAL_SPI_MspInit+0x8c>)
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	4a19      	ldr	r2, [pc, #100]	; (80030c8 <HAL_SPI_MspInit+0x8c>)
 8003062:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003066:	6193      	str	r3, [r2, #24]
 8003068:	4b17      	ldr	r3, [pc, #92]	; (80030c8 <HAL_SPI_MspInit+0x8c>)
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003074:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <HAL_SPI_MspInit+0x8c>)
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	4a13      	ldr	r2, [pc, #76]	; (80030c8 <HAL_SPI_MspInit+0x8c>)
 800307a:	f043 0304 	orr.w	r3, r3, #4
 800307e:	6193      	str	r3, [r2, #24]
 8003080:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <HAL_SPI_MspInit+0x8c>)
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800308c:	23a0      	movs	r3, #160	; 0xa0
 800308e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003090:	2302      	movs	r3, #2
 8003092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003094:	2303      	movs	r3, #3
 8003096:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003098:	f107 0310 	add.w	r3, r7, #16
 800309c:	4619      	mov	r1, r3
 800309e:	480b      	ldr	r0, [pc, #44]	; (80030cc <HAL_SPI_MspInit+0x90>)
 80030a0:	f002 f906 	bl	80052b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80030a4:	2340      	movs	r3, #64	; 0x40
 80030a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b0:	f107 0310 	add.w	r3, r7, #16
 80030b4:	4619      	mov	r1, r3
 80030b6:	4805      	ldr	r0, [pc, #20]	; (80030cc <HAL_SPI_MspInit+0x90>)
 80030b8:	f002 f8fa 	bl	80052b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80030bc:	bf00      	nop
 80030be:	3720      	adds	r7, #32
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40013000 	.word	0x40013000
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40010800 	.word	0x40010800

080030d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1a      	ldr	r2, [pc, #104]	; (8003148 <HAL_TIM_Base_MspInit+0x78>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d114      	bne.n	800310c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030e2:	4b1a      	ldr	r3, [pc, #104]	; (800314c <HAL_TIM_Base_MspInit+0x7c>)
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	4a19      	ldr	r2, [pc, #100]	; (800314c <HAL_TIM_Base_MspInit+0x7c>)
 80030e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030ec:	6193      	str	r3, [r2, #24]
 80030ee:	4b17      	ldr	r3, [pc, #92]	; (800314c <HAL_TIM_Base_MspInit+0x7c>)
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80030fa:	2200      	movs	r2, #0
 80030fc:	2100      	movs	r1, #0
 80030fe:	2019      	movs	r0, #25
 8003100:	f001 ffef 	bl	80050e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003104:	2019      	movs	r0, #25
 8003106:	f002 f808 	bl	800511a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800310a:	e018      	b.n	800313e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003114:	d113      	bne.n	800313e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003116:	4b0d      	ldr	r3, [pc, #52]	; (800314c <HAL_TIM_Base_MspInit+0x7c>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	4a0c      	ldr	r2, [pc, #48]	; (800314c <HAL_TIM_Base_MspInit+0x7c>)
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	61d3      	str	r3, [r2, #28]
 8003122:	4b0a      	ldr	r3, [pc, #40]	; (800314c <HAL_TIM_Base_MspInit+0x7c>)
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800312e:	2200      	movs	r2, #0
 8003130:	2100      	movs	r1, #0
 8003132:	201c      	movs	r0, #28
 8003134:	f001 ffd5 	bl	80050e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003138:	201c      	movs	r0, #28
 800313a:	f001 ffee 	bl	800511a <HAL_NVIC_EnableIRQ>
}
 800313e:	bf00      	nop
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40012c00 	.word	0x40012c00
 800314c:	40021000 	.word	0x40021000

08003150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	; 0x28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003158:	f107 0318 	add.w	r3, r7, #24
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a3c      	ldr	r2, [pc, #240]	; (800325c <HAL_UART_MspInit+0x10c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d13a      	bne.n	80031e6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003170:	4b3b      	ldr	r3, [pc, #236]	; (8003260 <HAL_UART_MspInit+0x110>)
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	4a3a      	ldr	r2, [pc, #232]	; (8003260 <HAL_UART_MspInit+0x110>)
 8003176:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800317a:	6193      	str	r3, [r2, #24]
 800317c:	4b38      	ldr	r3, [pc, #224]	; (8003260 <HAL_UART_MspInit+0x110>)
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003188:	4b35      	ldr	r3, [pc, #212]	; (8003260 <HAL_UART_MspInit+0x110>)
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	4a34      	ldr	r2, [pc, #208]	; (8003260 <HAL_UART_MspInit+0x110>)
 800318e:	f043 0304 	orr.w	r3, r3, #4
 8003192:	6193      	str	r3, [r2, #24]
 8003194:	4b32      	ldr	r3, [pc, #200]	; (8003260 <HAL_UART_MspInit+0x110>)
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80031a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a6:	2302      	movs	r3, #2
 80031a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031aa:	2303      	movs	r3, #3
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ae:	f107 0318 	add.w	r3, r7, #24
 80031b2:	4619      	mov	r1, r3
 80031b4:	482b      	ldr	r0, [pc, #172]	; (8003264 <HAL_UART_MspInit+0x114>)
 80031b6:	f002 f87b 	bl	80052b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c8:	f107 0318 	add.w	r3, r7, #24
 80031cc:	4619      	mov	r1, r3
 80031ce:	4825      	ldr	r0, [pc, #148]	; (8003264 <HAL_UART_MspInit+0x114>)
 80031d0:	f002 f86e 	bl	80052b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80031d4:	2200      	movs	r2, #0
 80031d6:	2101      	movs	r1, #1
 80031d8:	2025      	movs	r0, #37	; 0x25
 80031da:	f001 ff82 	bl	80050e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031de:	2025      	movs	r0, #37	; 0x25
 80031e0:	f001 ff9b 	bl	800511a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80031e4:	e036      	b.n	8003254 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1f      	ldr	r2, [pc, #124]	; (8003268 <HAL_UART_MspInit+0x118>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d131      	bne.n	8003254 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031f0:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <HAL_UART_MspInit+0x110>)
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	4a1a      	ldr	r2, [pc, #104]	; (8003260 <HAL_UART_MspInit+0x110>)
 80031f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031fa:	61d3      	str	r3, [r2, #28]
 80031fc:	4b18      	ldr	r3, [pc, #96]	; (8003260 <HAL_UART_MspInit+0x110>)
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003208:	4b15      	ldr	r3, [pc, #84]	; (8003260 <HAL_UART_MspInit+0x110>)
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	4a14      	ldr	r2, [pc, #80]	; (8003260 <HAL_UART_MspInit+0x110>)
 800320e:	f043 0308 	orr.w	r3, r3, #8
 8003212:	6193      	str	r3, [r2, #24]
 8003214:	4b12      	ldr	r3, [pc, #72]	; (8003260 <HAL_UART_MspInit+0x110>)
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	2302      	movs	r3, #2
 8003228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800322a:	2303      	movs	r3, #3
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322e:	f107 0318 	add.w	r3, r7, #24
 8003232:	4619      	mov	r1, r3
 8003234:	480d      	ldr	r0, [pc, #52]	; (800326c <HAL_UART_MspInit+0x11c>)
 8003236:	f002 f83b 	bl	80052b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800323a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800323e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003240:	2300      	movs	r3, #0
 8003242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003244:	2300      	movs	r3, #0
 8003246:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003248:	f107 0318 	add.w	r3, r7, #24
 800324c:	4619      	mov	r1, r3
 800324e:	4807      	ldr	r0, [pc, #28]	; (800326c <HAL_UART_MspInit+0x11c>)
 8003250:	f002 f82e 	bl	80052b0 <HAL_GPIO_Init>
}
 8003254:	bf00      	nop
 8003256:	3728      	adds	r7, #40	; 0x28
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40013800 	.word	0x40013800
 8003260:	40021000 	.word	0x40021000
 8003264:	40010800 	.word	0x40010800
 8003268:	40004800 	.word	0x40004800
 800326c:	40010c00 	.word	0x40010c00

08003270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003274:	e7fe      	b.n	8003274 <NMI_Handler+0x4>

08003276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
	    uint32_t lr;
	    uint32_t pc;
	    uint32_t psr;
	  }*stack_ptr; //Указатель на текущее значение стека(SP)

	  asm(
 800327c:	f01e 0f04 	tst.w	lr, #4
 8003280:	bf0c      	ite	eq
 8003282:	f3ef 8308 	mrseq	r3, MSP
 8003286:	f3ef 8309 	mrsne	r3, PSP
 800328a:	607b      	str	r3, [r7, #4]
	      "ITE EQ \n"   			//Значение указателя стека имеет бит 3?
	      "MRSEQ %[ptr], MSP  \n"  //Да, сохраняем основной указатель стека
	      "MRSNE %[ptr], PSP  \n"  //Нет, сохраняем указатель стека процесса
	      : [ptr] "=r" (stack_ptr)
	      );
	  int hhh = 99;
 800328c:	2363      	movs	r3, #99	; 0x63
 800328e:	603b      	str	r3, [r7, #0]
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003290:	e7fe      	b.n	8003290 <HardFault_Handler+0x1a>

08003292 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003292:	b480      	push	{r7}
 8003294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003296:	e7fe      	b.n	8003296 <MemManage_Handler+0x4>

08003298 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800329c:	e7fe      	b.n	800329c <BusFault_Handler+0x4>

0800329e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800329e:	b480      	push	{r7}
 80032a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032a2:	e7fe      	b.n	80032a2 <UsageFault_Handler+0x4>

080032a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032a8:	bf00      	nop
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr

080032b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032c0:	bf00      	nop
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032cc:	f001 fdf2 	bl	8004eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032d0:	bf00      	nop
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80032d8:	2004      	movs	r0, #4
 80032da:	f002 fa71 	bl	80057c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80032de:	bf00      	nop
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Detect "DOWN" button
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 80032e8:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <EXTI9_5_IRQHandler+0x44>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	f083 0301 	eor.w	r3, r3, #1
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d012      	beq.n	800331c <EXTI9_5_IRQHandler+0x38>
	{
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8))						// If interrupt from GPIOA PIN_8
 80032f6:	4b0d      	ldr	r3, [pc, #52]	; (800332c <EXTI9_5_IRQHandler+0x48>)
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00c      	beq.n	800331c <EXTI9_5_IRQHandler+0x38>
			{
				if(button_processed_status == doesent_detected)
 8003302:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <EXTI9_5_IRQHandler+0x4c>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <EXTI9_5_IRQHandler+0x50>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d105      	bne.n	800331c <EXTI9_5_IRQHandler+0x38>
				{
					HAL_TIM_Base_Start_IT(&htim1);							// Turn on Timer 1
 8003310:	4809      	ldr	r0, [pc, #36]	; (8003338 <EXTI9_5_IRQHandler+0x54>)
 8003312:	f004 f89d 	bl	8007450 <HAL_TIM_Base_Start_IT>
					button_processed_status = detected;						// For interrupt work only one time
 8003316:	4b07      	ldr	r3, [pc, #28]	; (8003334 <EXTI9_5_IRQHandler+0x50>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
				}
			}
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800331c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003320:	f002 fa4e 	bl	80057c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003324:	bf00      	nop
 8003326:	bd80      	pop	{r7, pc}
 8003328:	200005a0 	.word	0x200005a0
 800332c:	40010400 	.word	0x40010400
 8003330:	20000025 	.word	0x20000025
 8003334:	20000028 	.word	0x20000028
 8003338:	200006a4 	.word	0x200006a4

0800333c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
	 * EXTI9_5_IRQHandler and EXTI15_10_IRQHandler
	 */

//	static int delay_time = 0;										//	Counter

	if(button_processed_status == detected)							// If pressed button was detected by external interrupts
 8003340:	4b37      	ldr	r3, [pc, #220]	; (8003420 <TIM1_UP_IRQHandler+0xe4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d165      	bne.n	8003414 <TIM1_UP_IRQHandler+0xd8>
	{
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)    			// If "UP" button was pressed
 8003348:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800334c:	4835      	ldr	r0, [pc, #212]	; (8003424 <TIM1_UP_IRQHandler+0xe8>)
 800334e:	f002 f9ef 	bl	8005730 <HAL_GPIO_ReadPin>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d118      	bne.n	800338a <TIM1_UP_IRQHandler+0x4e>
		{
			/*
			 * If every time when timer interrupt, delay_time will increment
			 * for avoid bounce button
			 */
			delay_time++;
 8003358:	4b33      	ldr	r3, [pc, #204]	; (8003428 <TIM1_UP_IRQHandler+0xec>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3301      	adds	r3, #1
 800335e:	4a32      	ldr	r2, [pc, #200]	; (8003428 <TIM1_UP_IRQHandler+0xec>)
 8003360:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8003362:	4b32      	ldr	r3, [pc, #200]	; (800342c <TIM1_UP_IRQHandler+0xf0>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	4b2f      	ldr	r3, [pc, #188]	; (8003428 <TIM1_UP_IRQHandler+0xec>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	dc51      	bgt.n	8003414 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 8003370:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <TIM1_UP_IRQHandler+0xe4>)
 8003372:	2201      	movs	r2, #1
 8003374:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8003376:	482e      	ldr	r0, [pc, #184]	; (8003430 <TIM1_UP_IRQHandler+0xf4>)
 8003378:	f004 f8bc 	bl	80074f4 <HAL_TIM_Base_Stop_IT>

				button_status = BOTTON_UP;
 800337c:	4b2d      	ldr	r3, [pc, #180]	; (8003434 <TIM1_UP_IRQHandler+0xf8>)
 800337e:	2201      	movs	r2, #1
 8003380:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 8003382:	4b29      	ldr	r3, [pc, #164]	; (8003428 <TIM1_UP_IRQHandler+0xec>)
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	e044      	b.n	8003414 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0)   			 	// If "DOWN" button was pressed
 800338a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800338e:	482a      	ldr	r0, [pc, #168]	; (8003438 <TIM1_UP_IRQHandler+0xfc>)
 8003390:	f002 f9ce 	bl	8005730 <HAL_GPIO_ReadPin>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d118      	bne.n	80033cc <TIM1_UP_IRQHandler+0x90>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 800339a:	4b23      	ldr	r3, [pc, #140]	; (8003428 <TIM1_UP_IRQHandler+0xec>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3301      	adds	r3, #1
 80033a0:	4a21      	ldr	r2, [pc, #132]	; (8003428 <TIM1_UP_IRQHandler+0xec>)
 80033a2:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 80033a4:	4b21      	ldr	r3, [pc, #132]	; (800342c <TIM1_UP_IRQHandler+0xf0>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	4b1f      	ldr	r3, [pc, #124]	; (8003428 <TIM1_UP_IRQHandler+0xec>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	dc30      	bgt.n	8003414 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;						// Flag for interrupts
 80033b2:	4b1b      	ldr	r3, [pc, #108]	; (8003420 <TIM1_UP_IRQHandler+0xe4>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 80033b8:	481d      	ldr	r0, [pc, #116]	; (8003430 <TIM1_UP_IRQHandler+0xf4>)
 80033ba:	f004 f89b 	bl	80074f4 <HAL_TIM_Base_Stop_IT>

				button_status = BUTTON_DOWN;
 80033be:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <TIM1_UP_IRQHandler+0xf8>)
 80033c0:	2203      	movs	r2, #3
 80033c2:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 80033c4:	4b18      	ldr	r3, [pc, #96]	; (8003428 <TIM1_UP_IRQHandler+0xec>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	e023      	b.n	8003414 <TIM1_UP_IRQHandler+0xd8>
			}
		}

		else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0)   			// If "ENTER" button was pressed
 80033cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033d0:	4814      	ldr	r0, [pc, #80]	; (8003424 <TIM1_UP_IRQHandler+0xe8>)
 80033d2:	f002 f9ad 	bl	8005730 <HAL_GPIO_ReadPin>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d118      	bne.n	800340e <TIM1_UP_IRQHandler+0xd2>
		{
			/*
			* If every time when timer interrupt, delay_time will increment
			* for avoid bounce button
			*/
			delay_time++;
 80033dc:	4b12      	ldr	r3, [pc, #72]	; (8003428 <TIM1_UP_IRQHandler+0xec>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3301      	adds	r3, #1
 80033e2:	4a11      	ldr	r2, [pc, #68]	; (8003428 <TIM1_UP_IRQHandler+0xec>)
 80033e4:	6013      	str	r3, [r2, #0]

			if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 80033e6:	4b11      	ldr	r3, [pc, #68]	; (800342c <TIM1_UP_IRQHandler+0xf0>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <TIM1_UP_IRQHandler+0xec>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	dc0f      	bgt.n	8003414 <TIM1_UP_IRQHandler+0xd8>
			{
				button_processed_status = 1;
 80033f4:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <TIM1_UP_IRQHandler+0xe4>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	601a      	str	r2, [r3, #0]
				button_status = BUTTON_ENTER;
 80033fa:	4b0e      	ldr	r3, [pc, #56]	; (8003434 <TIM1_UP_IRQHandler+0xf8>)
 80033fc:	2202      	movs	r2, #2
 80033fe:	701a      	strb	r2, [r3, #0]
				delay_time = 0;
 8003400:	4b09      	ldr	r3, [pc, #36]	; (8003428 <TIM1_UP_IRQHandler+0xec>)
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 8003406:	480a      	ldr	r0, [pc, #40]	; (8003430 <TIM1_UP_IRQHandler+0xf4>)
 8003408:	f004 f874 	bl	80074f4 <HAL_TIM_Base_Stop_IT>
 800340c:	e002      	b.n	8003414 <TIM1_UP_IRQHandler+0xd8>
			}
		}
		else
		{
			delay_time = 0;
 800340e:	4b06      	ldr	r3, [pc, #24]	; (8003428 <TIM1_UP_IRQHandler+0xec>)
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
		}

	}

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003414:	4806      	ldr	r0, [pc, #24]	; (8003430 <TIM1_UP_IRQHandler+0xf4>)
 8003416:	f004 f89b 	bl	8007550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000028 	.word	0x20000028
 8003424:	40010c00 	.word	0x40010c00
 8003428:	2000058c 	.word	0x2000058c
 800342c:	20000026 	.word	0x20000026
 8003430:	200006a4 	.word	0x200006a4
 8003434:	200005a1 	.word	0x200005a1
 8003438:	40010800 	.word	0x40010800

0800343c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	static int i = 0;
	if(i == 200)								// Do it every 2 seconds
 8003440:	4b13      	ldr	r3, [pc, #76]	; (8003490 <TIM2_IRQHandler+0x54>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2bc8      	cmp	r3, #200	; 0xc8
 8003446:	d118      	bne.n	800347a <TIM2_IRQHandler+0x3e>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003448:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800344c:	4811      	ldr	r0, [pc, #68]	; (8003494 <TIM2_IRQHandler+0x58>)
 800344e:	f002 f99e 	bl	800578e <HAL_GPIO_TogglePin>
		am2302_measure();
 8003452:	f7ff f96f 	bl	8002734 <am2302_measure>
		i = 0;
 8003456:	4b0e      	ldr	r3, [pc, #56]	; (8003490 <TIM2_IRQHandler+0x54>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
		am2302_ready = !am2302_ready;
 800345c:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <TIM2_IRQHandler+0x5c>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf14      	ite	ne
 8003464:	2301      	movne	r3, #1
 8003466:	2300      	moveq	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f083 0301 	eor.w	r3, r3, #1
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	b2da      	uxtb	r2, r3
 8003476:	4b08      	ldr	r3, [pc, #32]	; (8003498 <TIM2_IRQHandler+0x5c>)
 8003478:	701a      	strb	r2, [r3, #0]
	}
	i++;
 800347a:	4b05      	ldr	r3, [pc, #20]	; (8003490 <TIM2_IRQHandler+0x54>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3301      	adds	r3, #1
 8003480:	4a03      	ldr	r2, [pc, #12]	; (8003490 <TIM2_IRQHandler+0x54>)
 8003482:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003484:	4805      	ldr	r0, [pc, #20]	; (800349c <TIM2_IRQHandler+0x60>)
 8003486:	f004 f863 	bl	8007550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000594 	.word	0x20000594
 8003494:	40011000 	.word	0x40011000
 8003498:	20000590 	.word	0x20000590
 800349c:	20000744 	.word	0x20000744

080034a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034a4:	4802      	ldr	r0, [pc, #8]	; (80034b0 <USART1_IRQHandler+0x10>)
 80034a6:	f004 fc77 	bl	8007d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80034aa:	bf00      	nop
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	20000660 	.word	0x20000660

080034b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 80034b8:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <EXTI15_10_IRQHandler+0x74>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	f083 0301 	eor.w	r3, r3, #1
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d012      	beq.n	80034ec <EXTI15_10_IRQHandler+0x38>
	{
		// Detect "UP" button
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))	// If interrupt from GPIOB PIN_14
 80034c6:	4b19      	ldr	r3, [pc, #100]	; (800352c <EXTI15_10_IRQHandler+0x78>)
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00c      	beq.n	80034ec <EXTI15_10_IRQHandler+0x38>
		{
			if(button_processed_status == doesent_detected)
 80034d2:	4b17      	ldr	r3, [pc, #92]	; (8003530 <EXTI15_10_IRQHandler+0x7c>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	4b16      	ldr	r3, [pc, #88]	; (8003534 <EXTI15_10_IRQHandler+0x80>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d105      	bne.n	80034ec <EXTI15_10_IRQHandler+0x38>
			{
				HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 80034e0:	4815      	ldr	r0, [pc, #84]	; (8003538 <EXTI15_10_IRQHandler+0x84>)
 80034e2:	f003 ffb5 	bl	8007450 <HAL_TIM_Base_Start_IT>
				button_processed_status = detected;						// For interrupt work only one time
 80034e6:	4b13      	ldr	r3, [pc, #76]	; (8003534 <EXTI15_10_IRQHandler+0x80>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
			}
		}
	}

	// Detect "ENTER" button
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15))	// If interrupt from GPIOB PIN_15
 80034ec:	4b0f      	ldr	r3, [pc, #60]	; (800352c <EXTI15_10_IRQHandler+0x78>)
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00c      	beq.n	8003512 <EXTI15_10_IRQHandler+0x5e>
	{
		if(button_processed_status == doesent_detected)
 80034f8:	4b0d      	ldr	r3, [pc, #52]	; (8003530 <EXTI15_10_IRQHandler+0x7c>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	461a      	mov	r2, r3
 80034fe:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <EXTI15_10_IRQHandler+0x80>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d105      	bne.n	8003512 <EXTI15_10_IRQHandler+0x5e>
		{
			HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8003506:	480c      	ldr	r0, [pc, #48]	; (8003538 <EXTI15_10_IRQHandler+0x84>)
 8003508:	f003 ffa2 	bl	8007450 <HAL_TIM_Base_Start_IT>
			button_processed_status = detected;						// For interrupt work only one time
 800350c:	4b09      	ldr	r3, [pc, #36]	; (8003534 <EXTI15_10_IRQHandler+0x80>)
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
		}
	}


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003512:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003516:	f002 f953 	bl	80057c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800351a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800351e:	f002 f94f 	bl	80057c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	200005a0 	.word	0x200005a0
 800352c:	40010400 	.word	0x40010400
 8003530:	20000025 	.word	0x20000025
 8003534:	20000028 	.word	0x20000028
 8003538:	200006a4 	.word	0x200006a4

0800353c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003544:	4a14      	ldr	r2, [pc, #80]	; (8003598 <_sbrk+0x5c>)
 8003546:	4b15      	ldr	r3, [pc, #84]	; (800359c <_sbrk+0x60>)
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003550:	4b13      	ldr	r3, [pc, #76]	; (80035a0 <_sbrk+0x64>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d102      	bne.n	800355e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003558:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <_sbrk+0x64>)
 800355a:	4a12      	ldr	r2, [pc, #72]	; (80035a4 <_sbrk+0x68>)
 800355c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800355e:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <_sbrk+0x64>)
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	429a      	cmp	r2, r3
 800356a:	d207      	bcs.n	800357c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800356c:	f004 fff2 	bl	8008554 <__errno>
 8003570:	4603      	mov	r3, r0
 8003572:	220c      	movs	r2, #12
 8003574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800357a:	e009      	b.n	8003590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800357c:	4b08      	ldr	r3, [pc, #32]	; (80035a0 <_sbrk+0x64>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003582:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <_sbrk+0x64>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4413      	add	r3, r2
 800358a:	4a05      	ldr	r2, [pc, #20]	; (80035a0 <_sbrk+0x64>)
 800358c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800358e:	68fb      	ldr	r3, [r7, #12]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	20005000 	.word	0x20005000
 800359c:	00000400 	.word	0x00000400
 80035a0:	20000598 	.word	0x20000598
 80035a4:	20000a50 	.word	0x20000a50

080035a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035ac:	bf00      	nop
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr

080035b4 <Menu_Init>:
void periodic_measurement_am2302_on(void);		// On Measure T and H using TIMER2 (Use it for TX data by NRF or LoRa)
void periodic_measurement_am2302_off(void);		// OFF Measure T and H using TIMER2

// ----------------------------------------------------------------------------------------
void Menu_Init (void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b08d      	sub	sp, #52	; 0x34
 80035b8:	af00      	add	r7, sp, #0
	// Make pointers on funsctions
	// Main functions
	void (*p_print_rows_on_oled_if_up) (void);
	p_print_rows_on_oled_if_up = print_rows_on_oled_if_up;
 80035ba:	4b8a      	ldr	r3, [pc, #552]	; (80037e4 <Menu_Init+0x230>)
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	void (*p_print_rows_on_oled_if_down) (void);					// Create pointer on function
	p_print_rows_on_oled_if_down = print_rows_on_oled_if_down;		// Save function print on pointer print_p
 80035be:	4b8a      	ldr	r3, [pc, #552]	; (80037e8 <Menu_Init+0x234>)
 80035c0:	62bb      	str	r3, [r7, #40]	; 0x28
	void (*p_return_from_menu)(void);
	p_return_from_menu = return_from_menu;
 80035c2:	4b8a      	ldr	r3, [pc, #552]	; (80037ec <Menu_Init+0x238>)
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
	// ------------------------------------------------------

	// LoRa  menu functions
	void (*p_lora_rx_mode) (void);						// Function "Do it". Works when select it
	p_lora_rx_mode = lora_rx_mode;
 80035c6:	4b8a      	ldr	r3, [pc, #552]	; (80037f0 <Menu_Init+0x23c>)
 80035c8:	623b      	str	r3, [r7, #32]
	void (*p_lora_tx_mode) (void);						// Function "Do it". Works when select it
	p_lora_tx_mode = lora_tx_mode;
 80035ca:	4b8a      	ldr	r3, [pc, #552]	; (80037f4 <Menu_Init+0x240>)
 80035cc:	61fb      	str	r3, [r7, #28]
	void (*p_lora_tx_mode_send_T_and_H) (void);
	p_lora_tx_mode_send_T_and_H = lora_tx_mode_send_T_and_H;
 80035ce:	4b8a      	ldr	r3, [pc, #552]	; (80037f8 <Menu_Init+0x244>)
 80035d0:	61bb      	str	r3, [r7, #24]


	// ------------------------------------------------------
	// NRF menu functions
	void (*p_nrf_tx_mode_send_test_number) (void);						// Function "Do it". Works when select it
	p_nrf_tx_mode_send_test_number = nrf_tx_mode_send_test_number;
 80035d2:	4b8a      	ldr	r3, [pc, #552]	; (80037fc <Menu_Init+0x248>)
 80035d4:	617b      	str	r3, [r7, #20]
	void (*p_nrf_tx_mode_send_T_and_H) (void);
	p_nrf_tx_mode_send_T_and_H = nrf_tx_mode_send_T_and_H;
 80035d6:	4b8a      	ldr	r3, [pc, #552]	; (8003800 <Menu_Init+0x24c>)
 80035d8:	613b      	str	r3, [r7, #16]
	void (*p_nrf_rx_mode) (void);						// Function "Do it". Works when select it
	p_nrf_rx_mode = nrf_rx_mode;
 80035da:	4b8a      	ldr	r3, [pc, #552]	; (8003804 <Menu_Init+0x250>)
 80035dc:	60fb      	str	r3, [r7, #12]

	// ------------------------------------------------------
	// NRF menu functions
	void (*p_am2302_measure) (void);
	p_am2302_measure = am2302;
 80035de:	4b8a      	ldr	r3, [pc, #552]	; (8003808 <Menu_Init+0x254>)
 80035e0:	60bb      	str	r3, [r7, #8]
	// ------------------------------------------------------
	void (*p_periodic_measurement_am2302_on) (void);
	p_periodic_measurement_am2302_on = periodic_measurement_am2302_on;
 80035e2:	4b8a      	ldr	r3, [pc, #552]	; (800380c <Menu_Init+0x258>)
 80035e4:	607b      	str	r3, [r7, #4]
	// ------------------------------------------------------
	void (*p_periodic_measurement_am2302_off) (void);
	p_periodic_measurement_am2302_off = periodic_measurement_am2302_off;
 80035e6:	4b8a      	ldr	r3, [pc, #552]	; (8003810 <Menu_Init+0x25c>)
 80035e8:	603b      	str	r3, [r7, #0]
	//Баг, коли виходити з NFR RX меню, якщо передавалися дані T і H    <<<<<<<<<<<>

	// Fill in elements(nodes) of list (7 items)
	// Main menu items
	/////////////////////////////////////////////////////////////////
	items[0].up = 0;
 80035ea:	4b8a      	ldr	r3, [pc, #552]	; (8003814 <Menu_Init+0x260>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
	items[0].down = &items[1];
 80035f0:	4b88      	ldr	r3, [pc, #544]	; (8003814 <Menu_Init+0x260>)
 80035f2:	4a89      	ldr	r2, [pc, #548]	; (8003818 <Menu_Init+0x264>)
 80035f4:	605a      	str	r2, [r3, #4]
	items[0].child = &items_menu_1[0];
 80035f6:	4b87      	ldr	r3, [pc, #540]	; (8003814 <Menu_Init+0x260>)
 80035f8:	4a88      	ldr	r2, [pc, #544]	; (800381c <Menu_Init+0x268>)
 80035fa:	609a      	str	r2, [r3, #8]
	items[0].parent = 0;
 80035fc:	4b85      	ldr	r3, [pc, #532]	; (8003814 <Menu_Init+0x260>)
 80035fe:	2200      	movs	r2, #0
 8003600:	60da      	str	r2, [r3, #12]
	items[0].id = 1;
 8003602:	4b84      	ldr	r3, [pc, #528]	; (8003814 <Menu_Init+0x260>)
 8003604:	2201      	movs	r2, #1
 8003606:	741a      	strb	r2, [r3, #16]
	items[0].name = "LoRa E220";
 8003608:	4b82      	ldr	r3, [pc, #520]	; (8003814 <Menu_Init+0x260>)
 800360a:	4a85      	ldr	r2, [pc, #532]	; (8003820 <Menu_Init+0x26c>)
 800360c:	615a      	str	r2, [r3, #20]
	items[0].updateScreen_up = p_print_rows_on_oled_if_up;
 800360e:	4a81      	ldr	r2, [pc, #516]	; (8003814 <Menu_Init+0x260>)
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003612:	6193      	str	r3, [r2, #24]
	items[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8003614:	4a7f      	ldr	r2, [pc, #508]	; (8003814 <Menu_Init+0x260>)
 8003616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003618:	61d3      	str	r3, [r2, #28]
	items[0].makeAction = 0;
 800361a:	4b7e      	ldr	r3, [pc, #504]	; (8003814 <Menu_Init+0x260>)
 800361c:	2200      	movs	r2, #0
 800361e:	621a      	str	r2, [r3, #32]

	items[1].up = &items[0];
 8003620:	4b7c      	ldr	r3, [pc, #496]	; (8003814 <Menu_Init+0x260>)
 8003622:	4a7c      	ldr	r2, [pc, #496]	; (8003814 <Menu_Init+0x260>)
 8003624:	625a      	str	r2, [r3, #36]	; 0x24
	items[1].down = &items[2];
 8003626:	4b7b      	ldr	r3, [pc, #492]	; (8003814 <Menu_Init+0x260>)
 8003628:	4a7e      	ldr	r2, [pc, #504]	; (8003824 <Menu_Init+0x270>)
 800362a:	629a      	str	r2, [r3, #40]	; 0x28
	items[1].child = &items_menu_2[0];
 800362c:	4b79      	ldr	r3, [pc, #484]	; (8003814 <Menu_Init+0x260>)
 800362e:	4a7e      	ldr	r2, [pc, #504]	; (8003828 <Menu_Init+0x274>)
 8003630:	62da      	str	r2, [r3, #44]	; 0x2c
	items[1].parent = 0;
 8003632:	4b78      	ldr	r3, [pc, #480]	; (8003814 <Menu_Init+0x260>)
 8003634:	2200      	movs	r2, #0
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
	items[1].id = 2;
 8003638:	4b76      	ldr	r3, [pc, #472]	; (8003814 <Menu_Init+0x260>)
 800363a:	2202      	movs	r2, #2
 800363c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items[1].name = "NRF24L01";
 8003640:	4b74      	ldr	r3, [pc, #464]	; (8003814 <Menu_Init+0x260>)
 8003642:	4a7a      	ldr	r2, [pc, #488]	; (800382c <Menu_Init+0x278>)
 8003644:	639a      	str	r2, [r3, #56]	; 0x38
	items[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8003646:	4a73      	ldr	r2, [pc, #460]	; (8003814 <Menu_Init+0x260>)
 8003648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364a:	63d3      	str	r3, [r2, #60]	; 0x3c
	items[1].updateScreen_down = p_print_rows_on_oled_if_down;
 800364c:	4a71      	ldr	r2, [pc, #452]	; (8003814 <Menu_Init+0x260>)
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	6413      	str	r3, [r2, #64]	; 0x40
	items[1].makeAction = 0;
 8003652:	4b70      	ldr	r3, [pc, #448]	; (8003814 <Menu_Init+0x260>)
 8003654:	2200      	movs	r2, #0
 8003656:	645a      	str	r2, [r3, #68]	; 0x44

	items[2].up = &items[1];
 8003658:	4b6e      	ldr	r3, [pc, #440]	; (8003814 <Menu_Init+0x260>)
 800365a:	4a6f      	ldr	r2, [pc, #444]	; (8003818 <Menu_Init+0x264>)
 800365c:	649a      	str	r2, [r3, #72]	; 0x48
	items[2].down = 0;
 800365e:	4b6d      	ldr	r3, [pc, #436]	; (8003814 <Menu_Init+0x260>)
 8003660:	2200      	movs	r2, #0
 8003662:	64da      	str	r2, [r3, #76]	; 0x4c
	items[2].child = &items_menu_3[0];
 8003664:	4b6b      	ldr	r3, [pc, #428]	; (8003814 <Menu_Init+0x260>)
 8003666:	4a72      	ldr	r2, [pc, #456]	; (8003830 <Menu_Init+0x27c>)
 8003668:	651a      	str	r2, [r3, #80]	; 0x50
	items[2].parent = 0;
 800366a:	4b6a      	ldr	r3, [pc, #424]	; (8003814 <Menu_Init+0x260>)
 800366c:	2200      	movs	r2, #0
 800366e:	655a      	str	r2, [r3, #84]	; 0x54
	items[2].id = 3;
 8003670:	4b68      	ldr	r3, [pc, #416]	; (8003814 <Menu_Init+0x260>)
 8003672:	2203      	movs	r2, #3
 8003674:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items[2].name = "AM2302 sensor";
 8003678:	4b66      	ldr	r3, [pc, #408]	; (8003814 <Menu_Init+0x260>)
 800367a:	4a6e      	ldr	r2, [pc, #440]	; (8003834 <Menu_Init+0x280>)
 800367c:	65da      	str	r2, [r3, #92]	; 0x5c
	items[2].updateScreen_up = p_print_rows_on_oled_if_up;
 800367e:	4a65      	ldr	r2, [pc, #404]	; (8003814 <Menu_Init+0x260>)
 8003680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003682:	6613      	str	r3, [r2, #96]	; 0x60
	items[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8003684:	4a63      	ldr	r2, [pc, #396]	; (8003814 <Menu_Init+0x260>)
 8003686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003688:	6653      	str	r3, [r2, #100]	; 0x64
	items[2].makeAction = 0;
 800368a:	4b62      	ldr	r3, [pc, #392]	; (8003814 <Menu_Init+0x260>)
 800368c:	2200      	movs	r2, #0
 800368e:	669a      	str	r2, [r3, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating LoRa menu
	items_menu_1[0].up = 0;
 8003690:	4b62      	ldr	r3, [pc, #392]	; (800381c <Menu_Init+0x268>)
 8003692:	2200      	movs	r2, #0
 8003694:	601a      	str	r2, [r3, #0]
	items_menu_1[0].down = &items_menu_1[1];
 8003696:	4b61      	ldr	r3, [pc, #388]	; (800381c <Menu_Init+0x268>)
 8003698:	4a67      	ldr	r2, [pc, #412]	; (8003838 <Menu_Init+0x284>)
 800369a:	605a      	str	r2, [r3, #4]
	items_menu_1[0].id = 1;
 800369c:	4b5f      	ldr	r3, [pc, #380]	; (800381c <Menu_Init+0x268>)
 800369e:	2201      	movs	r2, #1
 80036a0:	741a      	strb	r2, [r3, #16]
	items_menu_1[0].child = 0;
 80036a2:	4b5e      	ldr	r3, [pc, #376]	; (800381c <Menu_Init+0x268>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	609a      	str	r2, [r3, #8]
	items_menu_1[0].parent = &items[0];
 80036a8:	4b5c      	ldr	r3, [pc, #368]	; (800381c <Menu_Init+0x268>)
 80036aa:	4a5a      	ldr	r2, [pc, #360]	; (8003814 <Menu_Init+0x260>)
 80036ac:	60da      	str	r2, [r3, #12]
	items_menu_1[0].name = "LoRa RX";
 80036ae:	4b5b      	ldr	r3, [pc, #364]	; (800381c <Menu_Init+0x268>)
 80036b0:	4a62      	ldr	r2, [pc, #392]	; (800383c <Menu_Init+0x288>)
 80036b2:	615a      	str	r2, [r3, #20]
	items_menu_1[0].updateScreen_up = p_print_rows_on_oled_if_up;
 80036b4:	4a59      	ldr	r2, [pc, #356]	; (800381c <Menu_Init+0x268>)
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	6193      	str	r3, [r2, #24]
	items_menu_1[0].updateScreen_down = p_print_rows_on_oled_if_down;
 80036ba:	4a58      	ldr	r2, [pc, #352]	; (800381c <Menu_Init+0x268>)
 80036bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036be:	61d3      	str	r3, [r2, #28]
	items_menu_1[0].makeAction = p_lora_rx_mode;
 80036c0:	4a56      	ldr	r2, [pc, #344]	; (800381c <Menu_Init+0x268>)
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	6213      	str	r3, [r2, #32]

	items_menu_1[1].up = &items_menu_1[0];
 80036c6:	4b55      	ldr	r3, [pc, #340]	; (800381c <Menu_Init+0x268>)
 80036c8:	4a54      	ldr	r2, [pc, #336]	; (800381c <Menu_Init+0x268>)
 80036ca:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_1[1].down = &items_menu_1[2];
 80036cc:	4b53      	ldr	r3, [pc, #332]	; (800381c <Menu_Init+0x268>)
 80036ce:	4a5c      	ldr	r2, [pc, #368]	; (8003840 <Menu_Init+0x28c>)
 80036d0:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_1[1].child = &items_menu_1_1[0];
 80036d2:	4b52      	ldr	r3, [pc, #328]	; (800381c <Menu_Init+0x268>)
 80036d4:	4a5b      	ldr	r2, [pc, #364]	; (8003844 <Menu_Init+0x290>)
 80036d6:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_1[1].parent = &items[0];
 80036d8:	4b50      	ldr	r3, [pc, #320]	; (800381c <Menu_Init+0x268>)
 80036da:	4a4e      	ldr	r2, [pc, #312]	; (8003814 <Menu_Init+0x260>)
 80036dc:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_1[1].id = 2;
 80036de:	4b4f      	ldr	r3, [pc, #316]	; (800381c <Menu_Init+0x268>)
 80036e0:	2202      	movs	r2, #2
 80036e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_1[1].name = "LoRa TX";
 80036e6:	4b4d      	ldr	r3, [pc, #308]	; (800381c <Menu_Init+0x268>)
 80036e8:	4a57      	ldr	r2, [pc, #348]	; (8003848 <Menu_Init+0x294>)
 80036ea:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_1[1].updateScreen_up = p_print_rows_on_oled_if_up;
 80036ec:	4a4b      	ldr	r2, [pc, #300]	; (800381c <Menu_Init+0x268>)
 80036ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f0:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_1[1].updateScreen_down = p_print_rows_on_oled_if_down;
 80036f2:	4a4a      	ldr	r2, [pc, #296]	; (800381c <Menu_Init+0x268>)
 80036f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f6:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_1[1].makeAction = 0;
 80036f8:	4b48      	ldr	r3, [pc, #288]	; (800381c <Menu_Init+0x268>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	645a      	str	r2, [r3, #68]	; 0x44

	items_menu_1[2].up = &items_menu_1[1];
 80036fe:	4b47      	ldr	r3, [pc, #284]	; (800381c <Menu_Init+0x268>)
 8003700:	4a4d      	ldr	r2, [pc, #308]	; (8003838 <Menu_Init+0x284>)
 8003702:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_1[2].down = 0;
 8003704:	4b45      	ldr	r3, [pc, #276]	; (800381c <Menu_Init+0x268>)
 8003706:	2200      	movs	r2, #0
 8003708:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_1[2].child = 0;
 800370a:	4b44      	ldr	r3, [pc, #272]	; (800381c <Menu_Init+0x268>)
 800370c:	2200      	movs	r2, #0
 800370e:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_1[2].parent = &items[0];
 8003710:	4b42      	ldr	r3, [pc, #264]	; (800381c <Menu_Init+0x268>)
 8003712:	4a40      	ldr	r2, [pc, #256]	; (8003814 <Menu_Init+0x260>)
 8003714:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_1[2].id = 3;
 8003716:	4b41      	ldr	r3, [pc, #260]	; (800381c <Menu_Init+0x268>)
 8003718:	2203      	movs	r2, #3
 800371a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_1[2].name = "EXIT";						// Name of item
 800371e:	4b3f      	ldr	r3, [pc, #252]	; (800381c <Menu_Init+0x268>)
 8003720:	4a4a      	ldr	r2, [pc, #296]	; (800384c <Menu_Init+0x298>)
 8003722:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_1[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8003724:	4a3d      	ldr	r2, [pc, #244]	; (800381c <Menu_Init+0x268>)
 8003726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003728:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_1[2].updateScreen_down = p_print_rows_on_oled_if_down;
 800372a:	4a3c      	ldr	r2, [pc, #240]	; (800381c <Menu_Init+0x268>)
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_1[2].makeAction = p_return_from_menu;
 8003730:	4a3a      	ldr	r2, [pc, #232]	; (800381c <Menu_Init+0x268>)
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	6693      	str	r3, [r2, #104]	; 0x68


	// LoRa TX menu
	items_menu_1_1[0].up = 0;
 8003736:	4b43      	ldr	r3, [pc, #268]	; (8003844 <Menu_Init+0x290>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
	items_menu_1_1[0].down = &items_menu_1_1[1];
 800373c:	4b41      	ldr	r3, [pc, #260]	; (8003844 <Menu_Init+0x290>)
 800373e:	4a44      	ldr	r2, [pc, #272]	; (8003850 <Menu_Init+0x29c>)
 8003740:	605a      	str	r2, [r3, #4]
	items_menu_1_1[0].child = 0;
 8003742:	4b40      	ldr	r3, [pc, #256]	; (8003844 <Menu_Init+0x290>)
 8003744:	2200      	movs	r2, #0
 8003746:	609a      	str	r2, [r3, #8]
	items_menu_1_1[0].parent = &items_menu_1[0];
 8003748:	4b3e      	ldr	r3, [pc, #248]	; (8003844 <Menu_Init+0x290>)
 800374a:	4a34      	ldr	r2, [pc, #208]	; (800381c <Menu_Init+0x268>)
 800374c:	60da      	str	r2, [r3, #12]
	items_menu_1_1[0].id = 1;
 800374e:	4b3d      	ldr	r3, [pc, #244]	; (8003844 <Menu_Init+0x290>)
 8003750:	2201      	movs	r2, #1
 8003752:	741a      	strb	r2, [r3, #16]
	items_menu_1_1[0].name = "TX Test data";
 8003754:	4b3b      	ldr	r3, [pc, #236]	; (8003844 <Menu_Init+0x290>)
 8003756:	4a3f      	ldr	r2, [pc, #252]	; (8003854 <Menu_Init+0x2a0>)
 8003758:	615a      	str	r2, [r3, #20]
	items_menu_1_1[0].updateScreen_up = p_print_rows_on_oled_if_up;
 800375a:	4a3a      	ldr	r2, [pc, #232]	; (8003844 <Menu_Init+0x290>)
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375e:	6193      	str	r3, [r2, #24]
	items_menu_1_1[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8003760:	4a38      	ldr	r2, [pc, #224]	; (8003844 <Menu_Init+0x290>)
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	61d3      	str	r3, [r2, #28]
	items_menu_1_1[0].makeAction = p_lora_tx_mode;
 8003766:	4a37      	ldr	r2, [pc, #220]	; (8003844 <Menu_Init+0x290>)
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	6213      	str	r3, [r2, #32]

	items_menu_1_1[1].up = &items_menu_1_1[0];
 800376c:	4b35      	ldr	r3, [pc, #212]	; (8003844 <Menu_Init+0x290>)
 800376e:	4a35      	ldr	r2, [pc, #212]	; (8003844 <Menu_Init+0x290>)
 8003770:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_1_1[1].down = &items_menu_1_1[2];
 8003772:	4b34      	ldr	r3, [pc, #208]	; (8003844 <Menu_Init+0x290>)
 8003774:	4a38      	ldr	r2, [pc, #224]	; (8003858 <Menu_Init+0x2a4>)
 8003776:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_1_1[1].child = 0;
 8003778:	4b32      	ldr	r3, [pc, #200]	; (8003844 <Menu_Init+0x290>)
 800377a:	2200      	movs	r2, #0
 800377c:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_1_1[1].parent = &items_menu_1[0];
 800377e:	4b31      	ldr	r3, [pc, #196]	; (8003844 <Menu_Init+0x290>)
 8003780:	4a26      	ldr	r2, [pc, #152]	; (800381c <Menu_Init+0x268>)
 8003782:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_1_1[1].id = 2;
 8003784:	4b2f      	ldr	r3, [pc, #188]	; (8003844 <Menu_Init+0x290>)
 8003786:	2202      	movs	r2, #2
 8003788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_1_1[1].name = "TX T & H";
 800378c:	4b2d      	ldr	r3, [pc, #180]	; (8003844 <Menu_Init+0x290>)
 800378e:	4a33      	ldr	r2, [pc, #204]	; (800385c <Menu_Init+0x2a8>)
 8003790:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_1_1[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8003792:	4a2c      	ldr	r2, [pc, #176]	; (8003844 <Menu_Init+0x290>)
 8003794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003796:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_1_1[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8003798:	4a2a      	ldr	r2, [pc, #168]	; (8003844 <Menu_Init+0x290>)
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_1_1[1].makeAction = p_lora_tx_mode_send_T_and_H;
 800379e:	4a29      	ldr	r2, [pc, #164]	; (8003844 <Menu_Init+0x290>)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_1_1[2].up = &items_menu_1_1[1];
 80037a4:	4b27      	ldr	r3, [pc, #156]	; (8003844 <Menu_Init+0x290>)
 80037a6:	4a2a      	ldr	r2, [pc, #168]	; (8003850 <Menu_Init+0x29c>)
 80037a8:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_1_1[2].down = 0;
 80037aa:	4b26      	ldr	r3, [pc, #152]	; (8003844 <Menu_Init+0x290>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_1_1[2].child = 0;
 80037b0:	4b24      	ldr	r3, [pc, #144]	; (8003844 <Menu_Init+0x290>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_1_1[2].parent = &items_menu_1[0];
 80037b6:	4b23      	ldr	r3, [pc, #140]	; (8003844 <Menu_Init+0x290>)
 80037b8:	4a18      	ldr	r2, [pc, #96]	; (800381c <Menu_Init+0x268>)
 80037ba:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_1_1[2].id = 3;
 80037bc:	4b21      	ldr	r3, [pc, #132]	; (8003844 <Menu_Init+0x290>)
 80037be:	2203      	movs	r2, #3
 80037c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_1_1[2].name = "EXIT";
 80037c4:	4b1f      	ldr	r3, [pc, #124]	; (8003844 <Menu_Init+0x290>)
 80037c6:	4a21      	ldr	r2, [pc, #132]	; (800384c <Menu_Init+0x298>)
 80037c8:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_1_1[2].updateScreen_up = p_print_rows_on_oled_if_up;
 80037ca:	4a1e      	ldr	r2, [pc, #120]	; (8003844 <Menu_Init+0x290>)
 80037cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ce:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_1_1[2].updateScreen_down = p_print_rows_on_oled_if_down;
 80037d0:	4a1c      	ldr	r2, [pc, #112]	; (8003844 <Menu_Init+0x290>)
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_1_1[2].makeAction = p_return_from_menu;
 80037d6:	4a1b      	ldr	r2, [pc, #108]	; (8003844 <Menu_Init+0x290>)
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	6693      	str	r3, [r2, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating NRF menu
	items_menu_2[0].up = 0;
 80037dc:	4b12      	ldr	r3, [pc, #72]	; (8003828 <Menu_Init+0x274>)
 80037de:	2200      	movs	r2, #0
 80037e0:	e03e      	b.n	8003860 <Menu_Init+0x2ac>
 80037e2:	bf00      	nop
 80037e4:	08003de5 	.word	0x08003de5
 80037e8:	08003edd 	.word	0x08003edd
 80037ec:	08004249 	.word	0x08004249
 80037f0:	0800429d 	.word	0x0800429d
 80037f4:	08004339 	.word	0x08004339
 80037f8:	080043d5 	.word	0x080043d5
 80037fc:	08004511 	.word	0x08004511
 8003800:	080045e9 	.word	0x080045e9
 8003804:	08004471 	.word	0x08004471
 8003808:	080046c1 	.word	0x080046c1
 800380c:	080049cd 	.word	0x080049cd
 8003810:	08004cb5 	.word	0x08004cb5
 8003814:	20000960 	.word	0x20000960
 8003818:	20000984 	.word	0x20000984
 800381c:	20000864 	.word	0x20000864
 8003820:	08009000 	.word	0x08009000
 8003824:	200009a8 	.word	0x200009a8
 8003828:	200007f8 	.word	0x200007f8
 800382c:	0800900c 	.word	0x0800900c
 8003830:	200008d0 	.word	0x200008d0
 8003834:	08009018 	.word	0x08009018
 8003838:	20000888 	.word	0x20000888
 800383c:	08009028 	.word	0x08009028
 8003840:	200008ac 	.word	0x200008ac
 8003844:	200009cc 	.word	0x200009cc
 8003848:	08009030 	.word	0x08009030
 800384c:	08009038 	.word	0x08009038
 8003850:	200009f0 	.word	0x200009f0
 8003854:	08009040 	.word	0x08009040
 8003858:	20000a14 	.word	0x20000a14
 800385c:	08009050 	.word	0x08009050
 8003860:	601a      	str	r2, [r3, #0]
	items_menu_2[0].down = &items_menu_2[1];
 8003862:	4b8c      	ldr	r3, [pc, #560]	; (8003a94 <Menu_Init+0x4e0>)
 8003864:	4a8c      	ldr	r2, [pc, #560]	; (8003a98 <Menu_Init+0x4e4>)
 8003866:	605a      	str	r2, [r3, #4]
	items_menu_2[0].child = 0;
 8003868:	4b8a      	ldr	r3, [pc, #552]	; (8003a94 <Menu_Init+0x4e0>)
 800386a:	2200      	movs	r2, #0
 800386c:	609a      	str	r2, [r3, #8]
	items_menu_2[0].parent = &items[0]; 	//&items[0];    // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 800386e:	4b89      	ldr	r3, [pc, #548]	; (8003a94 <Menu_Init+0x4e0>)
 8003870:	4a8a      	ldr	r2, [pc, #552]	; (8003a9c <Menu_Init+0x4e8>)
 8003872:	60da      	str	r2, [r3, #12]
	items_menu_2[0].id = 1;
 8003874:	4b87      	ldr	r3, [pc, #540]	; (8003a94 <Menu_Init+0x4e0>)
 8003876:	2201      	movs	r2, #1
 8003878:	741a      	strb	r2, [r3, #16]
	items_menu_2[0].name = "NRF RX";						// Name of item
 800387a:	4b86      	ldr	r3, [pc, #536]	; (8003a94 <Menu_Init+0x4e0>)
 800387c:	4a88      	ldr	r2, [pc, #544]	; (8003aa0 <Menu_Init+0x4ec>)
 800387e:	615a      	str	r2, [r3, #20]
	items_menu_2[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8003880:	4a84      	ldr	r2, [pc, #528]	; (8003a94 <Menu_Init+0x4e0>)
 8003882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003884:	6193      	str	r3, [r2, #24]
	items_menu_2[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8003886:	4a83      	ldr	r2, [pc, #524]	; (8003a94 <Menu_Init+0x4e0>)
 8003888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388a:	61d3      	str	r3, [r2, #28]
	items_menu_2[0].makeAction = p_nrf_rx_mode;
 800388c:	4a81      	ldr	r2, [pc, #516]	; (8003a94 <Menu_Init+0x4e0>)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6213      	str	r3, [r2, #32]

	items_menu_2[1].up = &items_menu_2[0];
 8003892:	4b80      	ldr	r3, [pc, #512]	; (8003a94 <Menu_Init+0x4e0>)
 8003894:	4a7f      	ldr	r2, [pc, #508]	; (8003a94 <Menu_Init+0x4e0>)
 8003896:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_2[1].down = &items_menu_2[2];
 8003898:	4b7e      	ldr	r3, [pc, #504]	; (8003a94 <Menu_Init+0x4e0>)
 800389a:	4a82      	ldr	r2, [pc, #520]	; (8003aa4 <Menu_Init+0x4f0>)
 800389c:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_2[1].child = &items_menu_2_1[0];
 800389e:	4b7d      	ldr	r3, [pc, #500]	; (8003a94 <Menu_Init+0x4e0>)
 80038a0:	4a81      	ldr	r2, [pc, #516]	; (8003aa8 <Menu_Init+0x4f4>)
 80038a2:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_2[1].parent = &items[0];
 80038a4:	4b7b      	ldr	r3, [pc, #492]	; (8003a94 <Menu_Init+0x4e0>)
 80038a6:	4a7d      	ldr	r2, [pc, #500]	; (8003a9c <Menu_Init+0x4e8>)
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_2[1].id = 2;
 80038aa:	4b7a      	ldr	r3, [pc, #488]	; (8003a94 <Menu_Init+0x4e0>)
 80038ac:	2202      	movs	r2, #2
 80038ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_2[1].name = "NRF TX";						// Name of item
 80038b2:	4b78      	ldr	r3, [pc, #480]	; (8003a94 <Menu_Init+0x4e0>)
 80038b4:	4a7d      	ldr	r2, [pc, #500]	; (8003aac <Menu_Init+0x4f8>)
 80038b6:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_2[1].updateScreen_up = p_print_rows_on_oled_if_up;
 80038b8:	4a76      	ldr	r2, [pc, #472]	; (8003a94 <Menu_Init+0x4e0>)
 80038ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038bc:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_2[1].updateScreen_down = p_print_rows_on_oled_if_down;
 80038be:	4a75      	ldr	r2, [pc, #468]	; (8003a94 <Menu_Init+0x4e0>)
 80038c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c2:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_2[1].makeAction = 0;
 80038c4:	4b73      	ldr	r3, [pc, #460]	; (8003a94 <Menu_Init+0x4e0>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	645a      	str	r2, [r3, #68]	; 0x44

	items_menu_2[2].up = &items_menu_2[1];
 80038ca:	4b72      	ldr	r3, [pc, #456]	; (8003a94 <Menu_Init+0x4e0>)
 80038cc:	4a72      	ldr	r2, [pc, #456]	; (8003a98 <Menu_Init+0x4e4>)
 80038ce:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_2[2].down = 0;
 80038d0:	4b70      	ldr	r3, [pc, #448]	; (8003a94 <Menu_Init+0x4e0>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_2[2].child = 0;
 80038d6:	4b6f      	ldr	r3, [pc, #444]	; (8003a94 <Menu_Init+0x4e0>)
 80038d8:	2200      	movs	r2, #0
 80038da:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_2[2].parent = &items[0];
 80038dc:	4b6d      	ldr	r3, [pc, #436]	; (8003a94 <Menu_Init+0x4e0>)
 80038de:	4a6f      	ldr	r2, [pc, #444]	; (8003a9c <Menu_Init+0x4e8>)
 80038e0:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_2[2].id = 3;
 80038e2:	4b6c      	ldr	r3, [pc, #432]	; (8003a94 <Menu_Init+0x4e0>)
 80038e4:	2203      	movs	r2, #3
 80038e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_2[2].name = "EXIT";						// Name of item
 80038ea:	4b6a      	ldr	r3, [pc, #424]	; (8003a94 <Menu_Init+0x4e0>)
 80038ec:	4a70      	ldr	r2, [pc, #448]	; (8003ab0 <Menu_Init+0x4fc>)
 80038ee:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_2[2].updateScreen_up = p_print_rows_on_oled_if_up;
 80038f0:	4a68      	ldr	r2, [pc, #416]	; (8003a94 <Menu_Init+0x4e0>)
 80038f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f4:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_2[2].updateScreen_down = p_print_rows_on_oled_if_down;
 80038f6:	4a67      	ldr	r2, [pc, #412]	; (8003a94 <Menu_Init+0x4e0>)
 80038f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fa:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_2[2].makeAction = p_return_from_menu;
 80038fc:	4a65      	ldr	r2, [pc, #404]	; (8003a94 <Menu_Init+0x4e0>)
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	6693      	str	r3, [r2, #104]	; 0x68

	// NRF TX menu
	items_menu_2_1[0].up = 0;
 8003902:	4b69      	ldr	r3, [pc, #420]	; (8003aa8 <Menu_Init+0x4f4>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
	items_menu_2_1[0].down = &items_menu_2_1[1];
 8003908:	4b67      	ldr	r3, [pc, #412]	; (8003aa8 <Menu_Init+0x4f4>)
 800390a:	4a6a      	ldr	r2, [pc, #424]	; (8003ab4 <Menu_Init+0x500>)
 800390c:	605a      	str	r2, [r3, #4]
	items_menu_2_1[0].child = 0;
 800390e:	4b66      	ldr	r3, [pc, #408]	; (8003aa8 <Menu_Init+0x4f4>)
 8003910:	2200      	movs	r2, #0
 8003912:	609a      	str	r2, [r3, #8]
	items_menu_2_1[0].parent = &items_menu_2[0];
 8003914:	4b64      	ldr	r3, [pc, #400]	; (8003aa8 <Menu_Init+0x4f4>)
 8003916:	4a5f      	ldr	r2, [pc, #380]	; (8003a94 <Menu_Init+0x4e0>)
 8003918:	60da      	str	r2, [r3, #12]
	items_menu_2_1[0].id = 1;
 800391a:	4b63      	ldr	r3, [pc, #396]	; (8003aa8 <Menu_Init+0x4f4>)
 800391c:	2201      	movs	r2, #1
 800391e:	741a      	strb	r2, [r3, #16]
	items_menu_2_1[0].name = "TX Test data";
 8003920:	4b61      	ldr	r3, [pc, #388]	; (8003aa8 <Menu_Init+0x4f4>)
 8003922:	4a65      	ldr	r2, [pc, #404]	; (8003ab8 <Menu_Init+0x504>)
 8003924:	615a      	str	r2, [r3, #20]
	items_menu_2_1[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8003926:	4a60      	ldr	r2, [pc, #384]	; (8003aa8 <Menu_Init+0x4f4>)
 8003928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392a:	6193      	str	r3, [r2, #24]
	items_menu_2_1[0].updateScreen_down = p_print_rows_on_oled_if_down;
 800392c:	4a5e      	ldr	r2, [pc, #376]	; (8003aa8 <Menu_Init+0x4f4>)
 800392e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003930:	61d3      	str	r3, [r2, #28]
	items_menu_2_1[0].makeAction = p_nrf_tx_mode_send_test_number;
 8003932:	4a5d      	ldr	r2, [pc, #372]	; (8003aa8 <Menu_Init+0x4f4>)
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	6213      	str	r3, [r2, #32]

	items_menu_2_1[1].up = &items_menu_2_1[0];
 8003938:	4b5b      	ldr	r3, [pc, #364]	; (8003aa8 <Menu_Init+0x4f4>)
 800393a:	4a5b      	ldr	r2, [pc, #364]	; (8003aa8 <Menu_Init+0x4f4>)
 800393c:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_2_1[1].down = &items_menu_2_1[2];
 800393e:	4b5a      	ldr	r3, [pc, #360]	; (8003aa8 <Menu_Init+0x4f4>)
 8003940:	4a5e      	ldr	r2, [pc, #376]	; (8003abc <Menu_Init+0x508>)
 8003942:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_2_1[1].child = 0;
 8003944:	4b58      	ldr	r3, [pc, #352]	; (8003aa8 <Menu_Init+0x4f4>)
 8003946:	2200      	movs	r2, #0
 8003948:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_2_1[1].parent = &items_menu_2[0];
 800394a:	4b57      	ldr	r3, [pc, #348]	; (8003aa8 <Menu_Init+0x4f4>)
 800394c:	4a51      	ldr	r2, [pc, #324]	; (8003a94 <Menu_Init+0x4e0>)
 800394e:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_2_1[1].id = 2;
 8003950:	4b55      	ldr	r3, [pc, #340]	; (8003aa8 <Menu_Init+0x4f4>)
 8003952:	2202      	movs	r2, #2
 8003954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_2_1[1].name = "TX T & H";
 8003958:	4b53      	ldr	r3, [pc, #332]	; (8003aa8 <Menu_Init+0x4f4>)
 800395a:	4a59      	ldr	r2, [pc, #356]	; (8003ac0 <Menu_Init+0x50c>)
 800395c:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_2_1[1].updateScreen_up = p_print_rows_on_oled_if_up;
 800395e:	4a52      	ldr	r2, [pc, #328]	; (8003aa8 <Menu_Init+0x4f4>)
 8003960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003962:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_2_1[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8003964:	4a50      	ldr	r2, [pc, #320]	; (8003aa8 <Menu_Init+0x4f4>)
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_2_1[1].makeAction = p_nrf_tx_mode_send_T_and_H;
 800396a:	4a4f      	ldr	r2, [pc, #316]	; (8003aa8 <Menu_Init+0x4f4>)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_2_1[2].up = &items_menu_2_1[1];
 8003970:	4b4d      	ldr	r3, [pc, #308]	; (8003aa8 <Menu_Init+0x4f4>)
 8003972:	4a50      	ldr	r2, [pc, #320]	; (8003ab4 <Menu_Init+0x500>)
 8003974:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_2_1[2].down = 0;
 8003976:	4b4c      	ldr	r3, [pc, #304]	; (8003aa8 <Menu_Init+0x4f4>)
 8003978:	2200      	movs	r2, #0
 800397a:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_2_1[2].child = 0;
 800397c:	4b4a      	ldr	r3, [pc, #296]	; (8003aa8 <Menu_Init+0x4f4>)
 800397e:	2200      	movs	r2, #0
 8003980:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_2_1[2].parent = &items_menu_2[0];
 8003982:	4b49      	ldr	r3, [pc, #292]	; (8003aa8 <Menu_Init+0x4f4>)
 8003984:	4a43      	ldr	r2, [pc, #268]	; (8003a94 <Menu_Init+0x4e0>)
 8003986:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_2_1[2].id = 3;
 8003988:	4b47      	ldr	r3, [pc, #284]	; (8003aa8 <Menu_Init+0x4f4>)
 800398a:	2203      	movs	r2, #3
 800398c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_2_1[2].name = "EXIT";
 8003990:	4b45      	ldr	r3, [pc, #276]	; (8003aa8 <Menu_Init+0x4f4>)
 8003992:	4a47      	ldr	r2, [pc, #284]	; (8003ab0 <Menu_Init+0x4fc>)
 8003994:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_2_1[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8003996:	4a44      	ldr	r2, [pc, #272]	; (8003aa8 <Menu_Init+0x4f4>)
 8003998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399a:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_2_1[2].updateScreen_down = p_print_rows_on_oled_if_down;
 800399c:	4a42      	ldr	r2, [pc, #264]	; (8003aa8 <Menu_Init+0x4f4>)
 800399e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a0:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_2_1[2].makeAction = p_return_from_menu;
 80039a2:	4a41      	ldr	r2, [pc, #260]	; (8003aa8 <Menu_Init+0x4f4>)
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	6693      	str	r3, [r2, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating sensor menu
	items_menu_3[0].up = 0;
 80039a8:	4b46      	ldr	r3, [pc, #280]	; (8003ac4 <Menu_Init+0x510>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
	items_menu_3[0].down = &items_menu_3[1];
 80039ae:	4b45      	ldr	r3, [pc, #276]	; (8003ac4 <Menu_Init+0x510>)
 80039b0:	4a45      	ldr	r2, [pc, #276]	; (8003ac8 <Menu_Init+0x514>)
 80039b2:	605a      	str	r2, [r3, #4]
	items_menu_3[0].child = 0;
 80039b4:	4b43      	ldr	r3, [pc, #268]	; (8003ac4 <Menu_Init+0x510>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	609a      	str	r2, [r3, #8]
	items_menu_3[0].parent = &items[2];
 80039ba:	4b42      	ldr	r3, [pc, #264]	; (8003ac4 <Menu_Init+0x510>)
 80039bc:	4a43      	ldr	r2, [pc, #268]	; (8003acc <Menu_Init+0x518>)
 80039be:	60da      	str	r2, [r3, #12]
	items_menu_3[0].id = 1;
 80039c0:	4b40      	ldr	r3, [pc, #256]	; (8003ac4 <Menu_Init+0x510>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	741a      	strb	r2, [r3, #16]
	items_menu_3[0].name = "Measure T & H";						// Name of item
 80039c6:	4b3f      	ldr	r3, [pc, #252]	; (8003ac4 <Menu_Init+0x510>)
 80039c8:	4a41      	ldr	r2, [pc, #260]	; (8003ad0 <Menu_Init+0x51c>)
 80039ca:	615a      	str	r2, [r3, #20]
	items_menu_3[0].updateScreen_up = p_print_rows_on_oled_if_up;
 80039cc:	4a3d      	ldr	r2, [pc, #244]	; (8003ac4 <Menu_Init+0x510>)
 80039ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d0:	6193      	str	r3, [r2, #24]
	items_menu_3[0].updateScreen_down = p_print_rows_on_oled_if_down;
 80039d2:	4a3c      	ldr	r2, [pc, #240]	; (8003ac4 <Menu_Init+0x510>)
 80039d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d6:	61d3      	str	r3, [r2, #28]
	items_menu_3[0].makeAction = p_am2302_measure;
 80039d8:	4a3a      	ldr	r2, [pc, #232]	; (8003ac4 <Menu_Init+0x510>)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	6213      	str	r3, [r2, #32]

	items_menu_3[1].up = &items_menu_3[0];
 80039de:	4b39      	ldr	r3, [pc, #228]	; (8003ac4 <Menu_Init+0x510>)
 80039e0:	4a38      	ldr	r2, [pc, #224]	; (8003ac4 <Menu_Init+0x510>)
 80039e2:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_3[1].down = &items_menu_3[2];
 80039e4:	4b37      	ldr	r3, [pc, #220]	; (8003ac4 <Menu_Init+0x510>)
 80039e6:	4a3b      	ldr	r2, [pc, #236]	; (8003ad4 <Menu_Init+0x520>)
 80039e8:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_3[1].child = 0;
 80039ea:	4b36      	ldr	r3, [pc, #216]	; (8003ac4 <Menu_Init+0x510>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_3[1].parent = &items[2];
 80039f0:	4b34      	ldr	r3, [pc, #208]	; (8003ac4 <Menu_Init+0x510>)
 80039f2:	4a36      	ldr	r2, [pc, #216]	; (8003acc <Menu_Init+0x518>)
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_3[1].id = 2;
 80039f6:	4b33      	ldr	r3, [pc, #204]	; (8003ac4 <Menu_Init+0x510>)
 80039f8:	2202      	movs	r2, #2
 80039fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_3[1].name = "Per Meas: ON";						// Name of item
 80039fe:	4b31      	ldr	r3, [pc, #196]	; (8003ac4 <Menu_Init+0x510>)
 8003a00:	4a35      	ldr	r2, [pc, #212]	; (8003ad8 <Menu_Init+0x524>)
 8003a02:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_3[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8003a04:	4a2f      	ldr	r2, [pc, #188]	; (8003ac4 <Menu_Init+0x510>)
 8003a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a08:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_3[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8003a0a:	4a2e      	ldr	r2, [pc, #184]	; (8003ac4 <Menu_Init+0x510>)
 8003a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0e:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_3[1].makeAction = p_periodic_measurement_am2302_on;
 8003a10:	4a2c      	ldr	r2, [pc, #176]	; (8003ac4 <Menu_Init+0x510>)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_3[2].up = &items_menu_3[1];
 8003a16:	4b2b      	ldr	r3, [pc, #172]	; (8003ac4 <Menu_Init+0x510>)
 8003a18:	4a2b      	ldr	r2, [pc, #172]	; (8003ac8 <Menu_Init+0x514>)
 8003a1a:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_3[2].down = &items_menu_3[3];
 8003a1c:	4b29      	ldr	r3, [pc, #164]	; (8003ac4 <Menu_Init+0x510>)
 8003a1e:	4a2f      	ldr	r2, [pc, #188]	; (8003adc <Menu_Init+0x528>)
 8003a20:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_3[2].child = 0;
 8003a22:	4b28      	ldr	r3, [pc, #160]	; (8003ac4 <Menu_Init+0x510>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_3[2].parent = &items[2];
 8003a28:	4b26      	ldr	r3, [pc, #152]	; (8003ac4 <Menu_Init+0x510>)
 8003a2a:	4a28      	ldr	r2, [pc, #160]	; (8003acc <Menu_Init+0x518>)
 8003a2c:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_3[2].id = 3;
 8003a2e:	4b25      	ldr	r3, [pc, #148]	; (8003ac4 <Menu_Init+0x510>)
 8003a30:	2203      	movs	r2, #3
 8003a32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_3[2].name = "Per Meas: OFF";						// Name of item
 8003a36:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <Menu_Init+0x510>)
 8003a38:	4a29      	ldr	r2, [pc, #164]	; (8003ae0 <Menu_Init+0x52c>)
 8003a3a:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_3[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8003a3c:	4a21      	ldr	r2, [pc, #132]	; (8003ac4 <Menu_Init+0x510>)
 8003a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a40:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_3[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8003a42:	4a20      	ldr	r2, [pc, #128]	; (8003ac4 <Menu_Init+0x510>)
 8003a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a46:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_3[2].makeAction = p_periodic_measurement_am2302_off;
 8003a48:	4a1e      	ldr	r2, [pc, #120]	; (8003ac4 <Menu_Init+0x510>)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6693      	str	r3, [r2, #104]	; 0x68

	items_menu_3[3].up = &items_menu_3[2];
 8003a4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <Menu_Init+0x510>)
 8003a50:	4a20      	ldr	r2, [pc, #128]	; (8003ad4 <Menu_Init+0x520>)
 8003a52:	66da      	str	r2, [r3, #108]	; 0x6c
	items_menu_3[3].down = 0;
 8003a54:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <Menu_Init+0x510>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	671a      	str	r2, [r3, #112]	; 0x70
	items_menu_3[3].child = 0;
 8003a5a:	4b1a      	ldr	r3, [pc, #104]	; (8003ac4 <Menu_Init+0x510>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	675a      	str	r2, [r3, #116]	; 0x74
	items_menu_3[3].parent = &items[2];
 8003a60:	4b18      	ldr	r3, [pc, #96]	; (8003ac4 <Menu_Init+0x510>)
 8003a62:	4a1a      	ldr	r2, [pc, #104]	; (8003acc <Menu_Init+0x518>)
 8003a64:	679a      	str	r2, [r3, #120]	; 0x78
	items_menu_3[3].id = 4;
 8003a66:	4b17      	ldr	r3, [pc, #92]	; (8003ac4 <Menu_Init+0x510>)
 8003a68:	2204      	movs	r2, #4
 8003a6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	items_menu_3[3].name = "EXIT";						// Name of item
 8003a6e:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <Menu_Init+0x510>)
 8003a70:	4a0f      	ldr	r2, [pc, #60]	; (8003ab0 <Menu_Init+0x4fc>)
 8003a72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	items_menu_3[3].updateScreen_up = p_print_rows_on_oled_if_up;
 8003a76:	4a13      	ldr	r2, [pc, #76]	; (8003ac4 <Menu_Init+0x510>)
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	items_menu_3[3].updateScreen_down = p_print_rows_on_oled_if_down;
 8003a7e:	4a11      	ldr	r2, [pc, #68]	; (8003ac4 <Menu_Init+0x510>)
 8003a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a82:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	items_menu_3[3].makeAction = p_return_from_menu;
 8003a86:	4a0f      	ldr	r2, [pc, #60]	; (8003ac4 <Menu_Init+0x510>)
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8003a8e:	bf00      	nop
 8003a90:	3734      	adds	r7, #52	; 0x34
 8003a92:	e027      	b.n	8003ae4 <Menu_Init+0x530>
 8003a94:	200007f8 	.word	0x200007f8
 8003a98:	2000081c 	.word	0x2000081c
 8003a9c:	20000960 	.word	0x20000960
 8003aa0:	0800905c 	.word	0x0800905c
 8003aa4:	20000840 	.word	0x20000840
 8003aa8:	2000078c 	.word	0x2000078c
 8003aac:	08009064 	.word	0x08009064
 8003ab0:	08009038 	.word	0x08009038
 8003ab4:	200007b0 	.word	0x200007b0
 8003ab8:	08009040 	.word	0x08009040
 8003abc:	200007d4 	.word	0x200007d4
 8003ac0:	08009050 	.word	0x08009050
 8003ac4:	200008d0 	.word	0x200008d0
 8003ac8:	200008f4 	.word	0x200008f4
 8003acc:	200009a8 	.word	0x200009a8
 8003ad0:	0800906c 	.word	0x0800906c
 8003ad4:	20000918 	.word	0x20000918
 8003ad8:	0800907c 	.word	0x0800907c
 8003adc:	2000093c 	.word	0x2000093c
 8003ae0:	0800908c 	.word	0x0800908c
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop

08003aec <menu>:

// ----------------------------------------------------------------------------------------
void menu(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
	Menu_Init();									// Init all structures
 8003af0:	f7ff fd60 	bl	80035b4 <Menu_Init>
	print_menu_init();								// Print start menu and scrolingbar
 8003af4:	f000 fa74 	bl	8003fe0 <print_menu_init>
	HAL_Delay(10);
 8003af8:	200a      	movs	r0, #10
 8003afa:	f001 f9f7 	bl	8004eec <HAL_Delay>

	while(1)
	{
		if(button_processed_status == 1)			// If buttons was pressed
 8003afe:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <menu+0x50>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d1fb      	bne.n	8003afe <menu+0x12>
		{

			button_processed_status = 1;
 8003b06:	4b0d      	ldr	r3, [pc, #52]	; (8003b3c <menu+0x50>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]
			switch (button_status)
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <menu+0x54>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d00c      	beq.n	8003b2e <menu+0x42>
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	dc0d      	bgt.n	8003b34 <menu+0x48>
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d002      	beq.n	8003b22 <menu+0x36>
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d003      	beq.n	8003b28 <menu+0x3c>
 8003b20:	e008      	b.n	8003b34 <menu+0x48>
			{
				case BOTTON_UP:
					up();
 8003b22:	f000 f80f 	bl	8003b44 <up>
					break;
 8003b26:	e005      	b.n	8003b34 <menu+0x48>
				case BUTTON_ENTER:
					enter();
 8003b28:	f000 f840 	bl	8003bac <enter>
					break;
 8003b2c:	e002      	b.n	8003b34 <menu+0x48>
				case BUTTON_DOWN:
					down();
 8003b2e:	f000 f823 	bl	8003b78 <down>
					break;
 8003b32:	bf00      	nop
			}
			button_status = BOTTON_DOESENT_PRESS;
 8003b34:	4b02      	ldr	r3, [pc, #8]	; (8003b40 <menu+0x54>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	701a      	strb	r2, [r3, #0]
		if(button_processed_status == 1)			// If buttons was pressed
 8003b3a:	e7e0      	b.n	8003afe <menu+0x12>
 8003b3c:	20000028 	.word	0x20000028
 8003b40:	200005a1 	.word	0x200005a1

08003b44 <up>:
		}
	}
}
// ----------------------------------------------------------------------------------------
void up(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
	if (currentItem->up)
 8003b48:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <up+0x30>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00d      	beq.n	8003b6e <up+0x2a>
	{
	    currentItem = currentItem->up;
 8003b52:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <up+0x30>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a06      	ldr	r2, [pc, #24]	; (8003b74 <up+0x30>)
 8003b5a:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_up )
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <up+0x30>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <up+0x2a>
	    {
	        currentItem->updateScreen_up();
 8003b66:	4b03      	ldr	r3, [pc, #12]	; (8003b74 <up+0x30>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	4798      	blx	r3
	    }
	}
}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000030 	.word	0x20000030

08003b78 <down>:
// ----------------------------------------------------------------------------------------
void down(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
	if (currentItem->down)
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <down+0x30>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00d      	beq.n	8003ba2 <down+0x2a>
	{
	    currentItem = currentItem->down;
 8003b86:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <down+0x30>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	4a06      	ldr	r2, [pc, #24]	; (8003ba8 <down+0x30>)
 8003b8e:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_down )
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <down+0x30>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <down+0x2a>
	    {
	        currentItem->updateScreen_down();
 8003b9a:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <down+0x30>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	4798      	blx	r3
	    }
	}
}
 8003ba2:	bf00      	nop
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000030 	.word	0x20000030

08003bac <enter>:
// ----------------------------------------------------------------------------------------
void enter(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
	bool status = true;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	71fb      	strb	r3, [r7, #7]
	// Якщо є функція "makeAction" тоді виконати її
	if (currentItem->makeAction)
 8003bb6:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <enter+0x48>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <enter+0x20>
	{
		currentItem->makeAction();
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <enter+0x48>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	4798      	blx	r3
		status = false;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	71fb      	strb	r3, [r7, #7]
	}
	// Якщо є перехід на  "child" і "makeAction" не була виконана, тоді виконати перехід
	if((currentItem->child) && (status == true))
 8003bcc:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <enter+0x48>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <enter+0x3e>
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d006      	beq.n	8003bea <enter+0x3e>
	{
		currentItem = currentItem->child;
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <enter+0x48>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	4a04      	ldr	r2, [pc, #16]	; (8003bf4 <enter+0x48>)
 8003be4:	6013      	str	r3, [r2, #0]
		print_menu_items();
 8003be6:	f000 fa91 	bl	800410c <print_menu_items>
	}
}
 8003bea:	bf00      	nop
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000030 	.word	0x20000030

08003bf8 <scroll_bar>:
// ----------------------------------------------------------------------------------------
/*
This function print scrollbar on right part of OLED.
 */
void scroll_bar(void)
{
 8003bf8:	b590      	push	{r4, r7, lr}
 8003bfa:	b089      	sub	sp, #36	; 0x24
 8003bfc:	af02      	add	r7, sp, #8
	// Work size scrollbar
	uint16_t start_x_scrollbar = 124;
 8003bfe:	237c      	movs	r3, #124	; 0x7c
 8003c00:	81fb      	strh	r3, [r7, #14]
	uint16_t start_y_scrollbar = 17;
 8003c02:	2311      	movs	r3, #17
 8003c04:	81bb      	strh	r3, [r7, #12]
	uint16_t active_width = 3;
 8003c06:	2303      	movs	r3, #3
 8003c08:	817b      	strh	r3, [r7, #10]
	uint16_t lenght_all_scrollbar = 48;
 8003c0a:	2330      	movs	r3, #48	; 0x30
 8003c0c:	813b      	strh	r3, [r7, #8]

	uint8_t menu_items_counter = 1;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	75fb      	strb	r3, [r7, #23]
	// 1. Скопіювати показник на меню в буффер.
	// 2. Піднятися до першого елемента меню.
	// 3. Опускатися вниз до останнього пункту меню і інкрементувати лічильник елементів меню.
	// 4. Використати лічильник пунктів меню для вираховування довжини полоси прокрутки і її координат.

	MenuItem_t * currentItem_buff = currentItem;
 8003c12:	4b32      	ldr	r3, [pc, #200]	; (8003cdc <scroll_bar+0xe4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	613b      	str	r3, [r7, #16]

	if ((currentItem_buff -> up) != 0)							// Step up if existing up
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d006      	beq.n	8003c2e <scroll_bar+0x36>
	{
		do{
			currentItem_buff = currentItem_buff -> up;			// Step up to the top of menu
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	613b      	str	r3, [r7, #16]
		}
		while ((currentItem_buff -> up) != 0);					// If the top of item doesen't found
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f8      	bne.n	8003c20 <scroll_bar+0x28>
	}

	if ((currentItem_buff -> up) == 0)							// If found top of menu item
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d109      	bne.n	8003c4a <scroll_bar+0x52>
	{
		do{
			currentItem_buff = currentItem_buff -> down;
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	613b      	str	r3, [r7, #16]
			menu_items_counter++;								// Count how many list on menu
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	75fb      	strb	r3, [r7, #23]
		}
		while ((currentItem_buff -> down) != 0);
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f5      	bne.n	8003c36 <scroll_bar+0x3e>
	}
	 // Очистити частину керану де є скролбар
	ssd1306FillRect(start_x_scrollbar, start_y_scrollbar, active_width, lenght_all_scrollbar - 2, Black);
 8003c4a:	89fb      	ldrh	r3, [r7, #14]
 8003c4c:	b2d8      	uxtb	r0, r3
 8003c4e:	89bb      	ldrh	r3, [r7, #12]
 8003c50:	b2d9      	uxtb	r1, r3
 8003c52:	897b      	ldrh	r3, [r7, #10]
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	893b      	ldrh	r3, [r7, #8]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	3b02      	subs	r3, #2
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2400      	movs	r4, #0
 8003c60:	9400      	str	r4, [sp, #0]
 8003c62:	f7fe fd0e 	bl	8002682 <ssd1306FillRect>

	// Вивести подовгастий квадрат на край екрану
	ssd1306_DrawRectangle(start_x_scrollbar - 1, start_y_scrollbar - 1, start_x_scrollbar + active_width, 63, White);
 8003c66:	89fb      	ldrh	r3, [r7, #14]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b2d8      	uxtb	r0, r3
 8003c6e:	89bb      	ldrh	r3, [r7, #12]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b2d9      	uxtb	r1, r3
 8003c76:	89fb      	ldrh	r3, [r7, #14]
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	897b      	ldrh	r3, [r7, #10]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	2301      	movs	r3, #1
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	233f      	movs	r3, #63	; 0x3f
 8003c88:	f7fe fcc4 	bl	8002614 <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 8003c8c:	f7fe fb08 	bl	80022a0 <ssd1306_UpdateScreen>

	 // Print scroling line
	int id_for_line = currentItem -> id;				// Скопіювати порядковий номер меню (Для того щоб взнати на якому пункті меню зараз стоїмо)
 8003c90:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <scroll_bar+0xe4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	7c1b      	ldrb	r3, [r3, #16]
 8003c96:	607b      	str	r3, [r7, #4]
	// Print scroling line
	uint16_t line_lenght = (lenght_all_scrollbar/menu_items_counter + 1);					   	// Довжина лінії яка відповідає одному меню
 8003c98:	893a      	ldrh	r2, [r7, #8]
 8003c9a:	7dfb      	ldrb	r3, [r7, #23]
 8003c9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	807b      	strh	r3, [r7, #2]
	uint16_t start_lenght = 16 + ((id_for_line - 1)*line_lenght);								// Початок лінії
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	887a      	ldrh	r2, [r7, #2]
 8003cae:	fb02 f303 	mul.w	r3, r2, r3
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3310      	adds	r3, #16
 8003cb6:	803b      	strh	r3, [r7, #0]
	// Print active scrollbar part (line)
	ssd1306FillRect(start_x_scrollbar, start_lenght, active_width, line_lenght, White);
 8003cb8:	89fb      	ldrh	r3, [r7, #14]
 8003cba:	b2d8      	uxtb	r0, r3
 8003cbc:	883b      	ldrh	r3, [r7, #0]
 8003cbe:	b2d9      	uxtb	r1, r3
 8003cc0:	897b      	ldrh	r3, [r7, #10]
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	887b      	ldrh	r3, [r7, #2]
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2401      	movs	r4, #1
 8003cca:	9400      	str	r4, [sp, #0]
 8003ccc:	f7fe fcd9 	bl	8002682 <ssd1306FillRect>

	ssd1306_UpdateScreen();
 8003cd0:	f7fe fae6 	bl	80022a0 <ssd1306_UpdateScreen>
}
 8003cd4:	bf00      	nop
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd90      	pop	{r4, r7, pc}
 8003cdc:	20000030 	.word	0x20000030

08003ce0 <print_rectangle_on_head>:
// ----------------------------------------------------------------------------------------
void print_rectangle_on_head(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af02      	add	r7, sp, #8
	ssd1306_DrawRectangle(0, 0, 127 , 15, White);
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	230f      	movs	r3, #15
 8003cec:	227f      	movs	r2, #127	; 0x7f
 8003cee:	2100      	movs	r1, #0
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	f7fe fc8f 	bl	8002614 <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 8003cf6:	f7fe fad3 	bl	80022a0 <ssd1306_UpdateScreen>
}
 8003cfa:	bf00      	nop
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <clear_menu_items>:
// ----------------------------------------------------------------------------------------
// Clear some menu items.
void clear_menu_items (bool first, bool second, bool third, bool fourth)
{
 8003d00:	b590      	push	{r4, r7, lr}
 8003d02:	b089      	sub	sp, #36	; 0x24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4604      	mov	r4, r0
 8003d08:	4608      	mov	r0, r1
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4623      	mov	r3, r4
 8003d10:	71fb      	strb	r3, [r7, #7]
 8003d12:	4603      	mov	r3, r0
 8003d14:	71bb      	strb	r3, [r7, #6]
 8003d16:	460b      	mov	r3, r1
 8003d18:	717b      	strb	r3, [r7, #5]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	713b      	strb	r3, [r7, #4]
	uint8_t start_row_x = 15;
 8003d1e:	230f      	movs	r3, #15
 8003d20:	77fb      	strb	r3, [r7, #31]
	char str[16] = "               ";   						// Must be 15
 8003d22:	4b2a      	ldr	r3, [pc, #168]	; (8003dcc <clear_menu_items+0xcc>)
 8003d24:	f107 040c 	add.w	r4, r7, #12
 8003d28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if(first == true)
 8003d2e:	79fb      	ldrb	r3, [r7, #7]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00e      	beq.n	8003d52 <clear_menu_items+0x52>
	{
		ssd1306_SetCursor(start_row_x, first_menu_row);
 8003d34:	4b26      	ldr	r3, [pc, #152]	; (8003dd0 <clear_menu_items+0xd0>)
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	7ffb      	ldrb	r3, [r7, #31]
 8003d3c:	4611      	mov	r1, r2
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe fbe4 	bl	800250c <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003d44:	4a23      	ldr	r2, [pc, #140]	; (8003dd4 <clear_menu_items+0xd4>)
 8003d46:	f107 000c 	add.w	r0, r7, #12
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	ca06      	ldmia	r2, {r1, r2}
 8003d4e:	f7fe fbb7 	bl	80024c0 <ssd1306_WriteString>
	}
	if(second == true)
 8003d52:	79bb      	ldrb	r3, [r7, #6]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00e      	beq.n	8003d76 <clear_menu_items+0x76>
	{
		ssd1306_SetCursor(start_row_x, second_menu_row);
 8003d58:	4b1f      	ldr	r3, [pc, #124]	; (8003dd8 <clear_menu_items+0xd8>)
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	7ffb      	ldrb	r3, [r7, #31]
 8003d60:	4611      	mov	r1, r2
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fe fbd2 	bl	800250c <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003d68:	4a1a      	ldr	r2, [pc, #104]	; (8003dd4 <clear_menu_items+0xd4>)
 8003d6a:	f107 000c 	add.w	r0, r7, #12
 8003d6e:	2301      	movs	r3, #1
 8003d70:	ca06      	ldmia	r2, {r1, r2}
 8003d72:	f7fe fba5 	bl	80024c0 <ssd1306_WriteString>
	}
	if(first == true)
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00e      	beq.n	8003d9a <clear_menu_items+0x9a>
	{
		ssd1306_SetCursor(start_row_x, third_menu_row);
 8003d7c:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <clear_menu_items+0xdc>)
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	7ffb      	ldrb	r3, [r7, #31]
 8003d84:	4611      	mov	r1, r2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe fbc0 	bl	800250c <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003d8c:	4a11      	ldr	r2, [pc, #68]	; (8003dd4 <clear_menu_items+0xd4>)
 8003d8e:	f107 000c 	add.w	r0, r7, #12
 8003d92:	2301      	movs	r3, #1
 8003d94:	ca06      	ldmia	r2, {r1, r2}
 8003d96:	f7fe fb93 	bl	80024c0 <ssd1306_WriteString>
	}
	if(fourth == true)
 8003d9a:	793b      	ldrb	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00e      	beq.n	8003dbe <clear_menu_items+0xbe>
	{
		ssd1306_SetCursor(start_row_x, fourth_menu_row);
 8003da0:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <clear_menu_items+0xe0>)
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	7ffb      	ldrb	r3, [r7, #31]
 8003da8:	4611      	mov	r1, r2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fe fbae 	bl	800250c <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003db0:	4a08      	ldr	r2, [pc, #32]	; (8003dd4 <clear_menu_items+0xd4>)
 8003db2:	f107 000c 	add.w	r0, r7, #12
 8003db6:	2301      	movs	r3, #1
 8003db8:	ca06      	ldmia	r2, {r1, r2}
 8003dba:	f7fe fb81 	bl	80024c0 <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 8003dbe:	f7fe fa6f 	bl	80022a0 <ssd1306_UpdateScreen>
}
 8003dc2:	bf00      	nop
 8003dc4:	3724      	adds	r7, #36	; 0x24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd90      	pop	{r4, r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	0800909c 	.word	0x0800909c
 8003dd0:	20000038 	.word	0x20000038
 8003dd4:	2000001c 	.word	0x2000001c
 8003dd8:	2000003a 	.word	0x2000003a
 8003ddc:	2000003c 	.word	0x2000003c
 8003de0:	2000003e 	.word	0x2000003e

08003de4 <print_rows_on_oled_if_up>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_up(void)								// print text menu items
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
	char str[16] = {0};
 8003dea:	2300      	movs	r3, #0
 8003dec:	603b      	str	r3, [r7, #0]
 8003dee:	1d3b      	adds	r3, r7, #4
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	609a      	str	r2, [r3, #8]
	clear_menu_items (true , true , true , true );
 8003df8:	2301      	movs	r3, #1
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	2001      	movs	r0, #1
 8003e00:	f7ff ff7e 	bl	8003d00 <clear_menu_items>
	print_rectangle_on_head();
 8003e04:	f7ff ff6c 	bl	8003ce0 <print_rectangle_on_head>
	// Print pointer on first item menu
	ssd1306_SetCursor(0, first_menu_row);
 8003e08:	4b2c      	ldr	r3, [pc, #176]	; (8003ebc <print_rows_on_oled_if_up+0xd8>)
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	4619      	mov	r1, r3
 8003e10:	2000      	movs	r0, #0
 8003e12:	f7fe fb7b 	bl	800250c <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8003e16:	4a2a      	ldr	r2, [pc, #168]	; (8003ec0 <print_rows_on_oled_if_up+0xdc>)
 8003e18:	2301      	movs	r3, #1
 8003e1a:	ca06      	ldmia	r2, {r1, r2}
 8003e1c:	4829      	ldr	r0, [pc, #164]	; (8003ec4 <print_rows_on_oled_if_up+0xe0>)
 8003e1e:	f7fe fb4f 	bl	80024c0 <ssd1306_WriteString>

	MenuItem_t * currentItem_buff_up = currentItem;				// Create buffer on selected current item pointer.
 8003e22:	4b29      	ldr	r3, [pc, #164]	; (8003ec8 <print_rows_on_oled_if_up+0xe4>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	617b      	str	r3, [r7, #20]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8003e28:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <print_rows_on_oled_if_up+0xd8>)
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	74fb      	strb	r3, [r7, #19]
 8003e2e:	e035      	b.n	8003e9c <print_rows_on_oled_if_up+0xb8>
	{
		// Fill in OLED buffer
		// Print number of menu item
		itoa(currentItem_buff_up -> id, str, 10);
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	7c1b      	ldrb	r3, [r3, #16]
 8003e34:	4618      	mov	r0, r3
 8003e36:	463b      	mov	r3, r7
 8003e38:	220a      	movs	r2, #10
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	f004 fbcc 	bl	80085d8 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8003e40:	4b22      	ldr	r3, [pc, #136]	; (8003ecc <print_rows_on_oled_if_up+0xe8>)
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	7cfa      	ldrb	r2, [r7, #19]
 8003e48:	4611      	mov	r1, r2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe fb5e 	bl	800250c <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003e50:	4a1b      	ldr	r2, [pc, #108]	; (8003ec0 <print_rows_on_oled_if_up+0xdc>)
 8003e52:	4638      	mov	r0, r7
 8003e54:	2301      	movs	r3, #1
 8003e56:	ca06      	ldmia	r2, {r1, r2}
 8003e58:	f7fe fb32 	bl	80024c0 <ssd1306_WriteString>

		// Print name of menu item
		strncpy(str, currentItem_buff_up -> name, 15);
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	6959      	ldr	r1, [r3, #20]
 8003e60:	463b      	mov	r3, r7
 8003e62:	220f      	movs	r2, #15
 8003e64:	4618      	mov	r0, r3
 8003e66:	f004 fcb4 	bl	80087d2 <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 8003e6a:	4b19      	ldr	r3, [pc, #100]	; (8003ed0 <print_rows_on_oled_if_up+0xec>)
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	7cfa      	ldrb	r2, [r7, #19]
 8003e72:	4611      	mov	r1, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fe fb49 	bl	800250c <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003e7a:	4a11      	ldr	r2, [pc, #68]	; (8003ec0 <print_rows_on_oled_if_up+0xdc>)
 8003e7c:	4638      	mov	r0, r7
 8003e7e:	2301      	movs	r3, #1
 8003e80:	ca06      	ldmia	r2, {r1, r2}
 8003e82:	f7fe fb1d 	bl	80024c0 <ssd1306_WriteString>

		currentItem_buff_up = currentItem_buff_up -> down;		// Make a step down
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	617b      	str	r3, [r7, #20]

		// Print only existing items
		if(currentItem_buff_up == 0)							// If no next item
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00b      	beq.n	8003eaa <print_rows_on_oled_if_up+0xc6>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8003e92:	4b10      	ldr	r3, [pc, #64]	; (8003ed4 <print_rows_on_oled_if_up+0xf0>)
 8003e94:	781a      	ldrb	r2, [r3, #0]
 8003e96:	7cfb      	ldrb	r3, [r7, #19]
 8003e98:	4413      	add	r3, r2
 8003e9a:	74fb      	strb	r3, [r7, #19]
 8003e9c:	7cfb      	ldrb	r3, [r7, #19]
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	4b0d      	ldr	r3, [pc, #52]	; (8003ed8 <print_rows_on_oled_if_up+0xf4>)
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d9c3      	bls.n	8003e30 <print_rows_on_oled_if_up+0x4c>
 8003ea8:	e000      	b.n	8003eac <print_rows_on_oled_if_up+0xc8>
		{
			break;
 8003eaa:	bf00      	nop
		}
	}
	ssd1306_UpdateScreen();
 8003eac:	f7fe f9f8 	bl	80022a0 <ssd1306_UpdateScreen>
	scroll_bar();
 8003eb0:	f7ff fea2 	bl	8003bf8 <scroll_bar>
}
 8003eb4:	bf00      	nop
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20000038 	.word	0x20000038
 8003ec0:	2000001c 	.word	0x2000001c
 8003ec4:	20000034 	.word	0x20000034
 8003ec8:	20000030 	.word	0x20000030
 8003ecc:	20000042 	.word	0x20000042
 8003ed0:	20000044 	.word	0x20000044
 8003ed4:	20000040 	.word	0x20000040
 8003ed8:	2000003e 	.word	0x2000003e

08003edc <print_rows_on_oled_if_down>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_down(void)							// print text menu items
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
	char str[16] = {0};
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	603b      	str	r3, [r7, #0]
 8003ee6:	1d3b      	adds	r3, r7, #4
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	609a      	str	r2, [r3, #8]
	clear_menu_items (true , true , true , true );
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	2001      	movs	r0, #1
 8003ef8:	f7ff ff02 	bl	8003d00 <clear_menu_items>
	print_rectangle_on_head();
 8003efc:	f7ff fef0 	bl	8003ce0 <print_rectangle_on_head>
	// Print pointer on first item menu
	ssd1306_SetCursor(0, first_menu_row);
 8003f00:	4b2f      	ldr	r3, [pc, #188]	; (8003fc0 <print_rows_on_oled_if_down+0xe4>)
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	4619      	mov	r1, r3
 8003f08:	2000      	movs	r0, #0
 8003f0a:	f7fe faff 	bl	800250c <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8003f0e:	4a2d      	ldr	r2, [pc, #180]	; (8003fc4 <print_rows_on_oled_if_down+0xe8>)
 8003f10:	2301      	movs	r3, #1
 8003f12:	ca06      	ldmia	r2, {r1, r2}
 8003f14:	482c      	ldr	r0, [pc, #176]	; (8003fc8 <print_rows_on_oled_if_down+0xec>)
 8003f16:	f7fe fad3 	bl	80024c0 <ssd1306_WriteString>

	MenuItem_t * currentItem_buff = currentItem;				// Create buffer on selected current item pointer.
 8003f1a:	4b2c      	ldr	r3, [pc, #176]	; (8003fcc <print_rows_on_oled_if_down+0xf0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	617b      	str	r3, [r7, #20]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8003f20:	4b27      	ldr	r3, [pc, #156]	; (8003fc0 <print_rows_on_oled_if_down+0xe4>)
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	74fb      	strb	r3, [r7, #19]
 8003f26:	e03b      	b.n	8003fa0 <print_rows_on_oled_if_down+0xc4>
	{
		// Fill in OLED buffer
		// Print number of menu item
        itoa(currentItem_buff -> id, str, 10);
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	7c1b      	ldrb	r3, [r3, #16]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	463b      	mov	r3, r7
 8003f30:	220a      	movs	r2, #10
 8003f32:	4619      	mov	r1, r3
 8003f34:	f004 fb50 	bl	80085d8 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8003f38:	4b25      	ldr	r3, [pc, #148]	; (8003fd0 <print_rows_on_oled_if_down+0xf4>)
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	7cfa      	ldrb	r2, [r7, #19]
 8003f40:	4611      	mov	r1, r2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe fae2 	bl	800250c <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8003f48:	4a1e      	ldr	r2, [pc, #120]	; (8003fc4 <print_rows_on_oled_if_down+0xe8>)
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	ca06      	ldmia	r2, {r1, r2}
 8003f50:	f7fe fab6 	bl	80024c0 <ssd1306_WriteString>

		// Print name of menu item
		memset(str, 0, sizeof(str));
 8003f54:	463b      	mov	r3, r7
 8003f56:	2210      	movs	r2, #16
 8003f58:	2100      	movs	r1, #0
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f004 fb4c 	bl	80085f8 <memset>
	    strncpy(str, currentItem_buff -> name, 15);
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	6959      	ldr	r1, [r3, #20]
 8003f64:	463b      	mov	r3, r7
 8003f66:	220f      	movs	r2, #15
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f004 fc32 	bl	80087d2 <strncpy>
	    ssd1306_SetCursor(start_print_name_menu_x, row);
 8003f6e:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <print_rows_on_oled_if_down+0xf8>)
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	7cfa      	ldrb	r2, [r7, #19]
 8003f76:	4611      	mov	r1, r2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fe fac7 	bl	800250c <ssd1306_SetCursor>
	    ssd1306_WriteString(str,  Font_7x10, White);
 8003f7e:	4a11      	ldr	r2, [pc, #68]	; (8003fc4 <print_rows_on_oled_if_down+0xe8>)
 8003f80:	4638      	mov	r0, r7
 8003f82:	2301      	movs	r3, #1
 8003f84:	ca06      	ldmia	r2, {r1, r2}
 8003f86:	f7fe fa9b 	bl	80024c0 <ssd1306_WriteString>

	    currentItem_buff = currentItem_buff -> down;			// Make a step down
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	617b      	str	r3, [r7, #20]

	    // Print only existing items
	    if(currentItem_buff == 0)		 						// If no next item
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00b      	beq.n	8003fae <print_rows_on_oled_if_down+0xd2>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8003f96:	4b10      	ldr	r3, [pc, #64]	; (8003fd8 <print_rows_on_oled_if_down+0xfc>)
 8003f98:	781a      	ldrb	r2, [r3, #0]
 8003f9a:	7cfb      	ldrb	r3, [r7, #19]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	74fb      	strb	r3, [r7, #19]
 8003fa0:	7cfb      	ldrb	r3, [r7, #19]
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	4b0d      	ldr	r3, [pc, #52]	; (8003fdc <print_rows_on_oled_if_down+0x100>)
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d9bd      	bls.n	8003f28 <print_rows_on_oled_if_down+0x4c>
 8003fac:	e000      	b.n	8003fb0 <print_rows_on_oled_if_down+0xd4>
	    {
	    	break;
 8003fae:	bf00      	nop
	    }
	 }
	 ssd1306_UpdateScreen();
 8003fb0:	f7fe f976 	bl	80022a0 <ssd1306_UpdateScreen>
	 scroll_bar();
 8003fb4:	f7ff fe20 	bl	8003bf8 <scroll_bar>
}
 8003fb8:	bf00      	nop
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000038 	.word	0x20000038
 8003fc4:	2000001c 	.word	0x2000001c
 8003fc8:	20000034 	.word	0x20000034
 8003fcc:	20000030 	.word	0x20000030
 8003fd0:	20000042 	.word	0x20000042
 8003fd4:	20000044 	.word	0x20000044
 8003fd8:	20000040 	.word	0x20000040
 8003fdc:	2000003e 	.word	0x2000003e

08003fe0 <print_menu_init>:
// ----------------------------------------------------------------------------------------
// Print first 4 items of menu (only first time)
void print_menu_init(void)
{
 8003fe0:	b590      	push	{r4, r7, lr}
 8003fe2:	b089      	sub	sp, #36	; 0x24
 8003fe4:	af00      	add	r7, sp, #0
	MenuItem_t * currentItem_buff = currentItem;		// Create buffer on selected current item pointer.
 8003fe6:	4b41      	ldr	r3, [pc, #260]	; (80040ec <print_menu_init+0x10c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	61fb      	str	r3, [r7, #28]
	print_rectangle_on_head();
 8003fec:	f7ff fe78 	bl	8003ce0 <print_rectangle_on_head>

	// Print ">> MAIN MENU <<" on head of OLED
	char str[20] = ">> MAIN MENU <<";
 8003ff0:	4b3f      	ldr	r3, [pc, #252]	; (80040f0 <print_menu_init+0x110>)
 8003ff2:	1d3c      	adds	r4, r7, #4
 8003ff4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ff6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(10, 3);
 8003ffe:	2103      	movs	r1, #3
 8004000:	200a      	movs	r0, #10
 8004002:	f7fe fa83 	bl	800250c <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8004006:	4a3b      	ldr	r2, [pc, #236]	; (80040f4 <print_menu_init+0x114>)
 8004008:	1d38      	adds	r0, r7, #4
 800400a:	2301      	movs	r3, #1
 800400c:	ca06      	ldmia	r2, {r1, r2}
 800400e:	f7fe fa57 	bl	80024c0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004012:	f7fe f945 	bl	80022a0 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8004016:	1d3b      	adds	r3, r7, #4
 8004018:	2214      	movs	r2, #20
 800401a:	2100      	movs	r1, #0
 800401c:	4618      	mov	r0, r3
 800401e:	f004 faeb 	bl	80085f8 <memset>

	for(uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8004022:	4b35      	ldr	r3, [pc, #212]	; (80040f8 <print_menu_init+0x118>)
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	76fb      	strb	r3, [r7, #27]
 8004028:	e051      	b.n	80040ce <print_menu_init+0xee>
	{
		if(row == first_menu_row)
 800402a:	7efb      	ldrb	r3, [r7, #27]
 800402c:	b29a      	uxth	r2, r3
 800402e:	4b32      	ldr	r3, [pc, #200]	; (80040f8 <print_menu_init+0x118>)
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d10d      	bne.n	8004052 <print_menu_init+0x72>
		{
			// Print pointer on menu (On top)
			char str_pointer[4] = "->";
 8004036:	f643 632d 	movw	r3, #15917	; 0x3e2d
 800403a:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 800403c:	7efb      	ldrb	r3, [r7, #27]
 800403e:	4619      	mov	r1, r3
 8004040:	2000      	movs	r0, #0
 8004042:	f7fe fa63 	bl	800250c <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8004046:	4a2b      	ldr	r2, [pc, #172]	; (80040f4 <print_menu_init+0x114>)
 8004048:	4638      	mov	r0, r7
 800404a:	2301      	movs	r3, #1
 800404c:	ca06      	ldmia	r2, {r1, r2}
 800404e:	f7fe fa37 	bl	80024c0 <ssd1306_WriteString>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	7c1b      	ldrb	r3, [r3, #16]
 8004056:	4618      	mov	r0, r3
 8004058:	1d3b      	adds	r3, r7, #4
 800405a:	220a      	movs	r2, #10
 800405c:	4619      	mov	r1, r3
 800405e:	f004 fabb 	bl	80085d8 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8004062:	4b26      	ldr	r3, [pc, #152]	; (80040fc <print_menu_init+0x11c>)
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	7efa      	ldrb	r2, [r7, #27]
 800406a:	4611      	mov	r1, r2
 800406c:	4618      	mov	r0, r3
 800406e:	f7fe fa4d 	bl	800250c <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8004072:	4a20      	ldr	r2, [pc, #128]	; (80040f4 <print_menu_init+0x114>)
 8004074:	1d38      	adds	r0, r7, #4
 8004076:	2301      	movs	r3, #1
 8004078:	ca06      	ldmia	r2, {r1, r2}
 800407a:	f7fe fa21 	bl	80024c0 <ssd1306_WriteString>
		memset(str, 0, sizeof(str));
 800407e:	1d3b      	adds	r3, r7, #4
 8004080:	2214      	movs	r2, #20
 8004082:	2100      	movs	r1, #0
 8004084:	4618      	mov	r0, r3
 8004086:	f004 fab7 	bl	80085f8 <memset>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 15);
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	6959      	ldr	r1, [r3, #20]
 800408e:	1d3b      	adds	r3, r7, #4
 8004090:	220f      	movs	r2, #15
 8004092:	4618      	mov	r0, r3
 8004094:	f004 fb9d 	bl	80087d2 <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 8004098:	4b19      	ldr	r3, [pc, #100]	; (8004100 <print_menu_init+0x120>)
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	7efa      	ldrb	r2, [r7, #27]
 80040a0:	4611      	mov	r1, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fe fa32 	bl	800250c <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80040a8:	4a12      	ldr	r2, [pc, #72]	; (80040f4 <print_menu_init+0x114>)
 80040aa:	1d38      	adds	r0, r7, #4
 80040ac:	2301      	movs	r3, #1
 80040ae:	ca06      	ldmia	r2, {r1, r2}
 80040b0:	f7fe fa06 	bl	80024c0 <ssd1306_WriteString>

		ssd1306_UpdateScreen();
 80040b4:	f7fe f8f4 	bl	80022a0 <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	61fb      	str	r3, [r7, #28]
		if(currentItem_buff == 0)
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00b      	beq.n	80040dc <print_menu_init+0xfc>
	for(uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 80040c4:	4b0f      	ldr	r3, [pc, #60]	; (8004104 <print_menu_init+0x124>)
 80040c6:	781a      	ldrb	r2, [r3, #0]
 80040c8:	7efb      	ldrb	r3, [r7, #27]
 80040ca:	4413      	add	r3, r2
 80040cc:	76fb      	strb	r3, [r7, #27]
 80040ce:	7efb      	ldrb	r3, [r7, #27]
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	4b0d      	ldr	r3, [pc, #52]	; (8004108 <print_menu_init+0x128>)
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d9a7      	bls.n	800402a <print_menu_init+0x4a>
 80040da:	e000      	b.n	80040de <print_menu_init+0xfe>
		{
			break;
 80040dc:	bf00      	nop
		}
	}
	scroll_bar();
 80040de:	f7ff fd8b 	bl	8003bf8 <scroll_bar>
}
 80040e2:	bf00      	nop
 80040e4:	3724      	adds	r7, #36	; 0x24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd90      	pop	{r4, r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000030 	.word	0x20000030
 80040f0:	080090ac 	.word	0x080090ac
 80040f4:	2000001c 	.word	0x2000001c
 80040f8:	20000038 	.word	0x20000038
 80040fc:	20000042 	.word	0x20000042
 8004100:	20000044 	.word	0x20000044
 8004104:	20000040 	.word	0x20000040
 8004108:	2000003e 	.word	0x2000003e

0800410c <print_menu_items>:
// ----------------------------------------------------------------------------------------
// print pointers of menu
void print_menu_items(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af00      	add	r7, sp, #0
	char str[16] = {0};
 8004112:	2300      	movs	r3, #0
 8004114:	607b      	str	r3, [r7, #4]
 8004116:	f107 0308 	add.w	r3, r7, #8
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	605a      	str	r2, [r3, #4]
 8004120:	609a      	str	r2, [r3, #8]
	clearn_oled();
 8004122:	f7fe f80d 	bl	8002140 <clearn_oled>
	print_rectangle_on_head();
 8004126:	f7ff fddb 	bl	8003ce0 <print_rectangle_on_head>

	//Print selected name of menu on top of OLED (in rectangle)
	MenuItem_t * currentItem_buff_parent = currentItem;
 800412a:	4b40      	ldr	r3, [pc, #256]	; (800422c <print_menu_items+0x120>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	617b      	str	r3, [r7, #20]
	currentItem_buff_parent = currentItem_buff_parent -> parent;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	617b      	str	r3, [r7, #20]

	strncpy(str, currentItem_buff_parent -> name, 15);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	6959      	ldr	r1, [r3, #20]
 800413a:	1d3b      	adds	r3, r7, #4
 800413c:	220f      	movs	r2, #15
 800413e:	4618      	mov	r0, r3
 8004140:	f004 fb47 	bl	80087d2 <strncpy>
	ssd1306_SetCursor(10, 3);
 8004144:	2103      	movs	r1, #3
 8004146:	200a      	movs	r0, #10
 8004148:	f7fe f9e0 	bl	800250c <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800414c:	4a38      	ldr	r2, [pc, #224]	; (8004230 <print_menu_items+0x124>)
 800414e:	1d38      	adds	r0, r7, #4
 8004150:	2301      	movs	r3, #1
 8004152:	ca06      	ldmia	r2, {r1, r2}
 8004154:	f7fe f9b4 	bl	80024c0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004158:	f7fe f8a2 	bl	80022a0 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 800415c:	1d3b      	adds	r3, r7, #4
 800415e:	2210      	movs	r2, #16
 8004160:	2100      	movs	r1, #0
 8004162:	4618      	mov	r0, r3
 8004164:	f004 fa48 	bl	80085f8 <memset>

	MenuItem_t * currentItem_buff = currentItem;
 8004168:	4b30      	ldr	r3, [pc, #192]	; (800422c <print_menu_items+0x120>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	61fb      	str	r3, [r7, #28]

	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 800416e:	4b31      	ldr	r3, [pc, #196]	; (8004234 <print_menu_items+0x128>)
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	76fb      	strb	r3, [r7, #27]
 8004174:	e04b      	b.n	800420e <print_menu_items+0x102>
	{
		if(row == first_menu_row)
 8004176:	7efb      	ldrb	r3, [r7, #27]
 8004178:	b29a      	uxth	r2, r3
 800417a:	4b2e      	ldr	r3, [pc, #184]	; (8004234 <print_menu_items+0x128>)
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d10d      	bne.n	800419e <print_menu_items+0x92>
		{
			// Print pointer on menu
			char str_pointer[4] = "->";
 8004182:	f643 632d 	movw	r3, #15917	; 0x3e2d
 8004186:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 8004188:	7efb      	ldrb	r3, [r7, #27]
 800418a:	4619      	mov	r1, r3
 800418c:	2000      	movs	r0, #0
 800418e:	f7fe f9bd 	bl	800250c <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8004192:	4a27      	ldr	r2, [pc, #156]	; (8004230 <print_menu_items+0x124>)
 8004194:	4638      	mov	r0, r7
 8004196:	2301      	movs	r3, #1
 8004198:	ca06      	ldmia	r2, {r1, r2}
 800419a:	f7fe f991 	bl	80024c0 <ssd1306_WriteString>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	7c1b      	ldrb	r3, [r3, #16]
 80041a2:	4618      	mov	r0, r3
 80041a4:	1d3b      	adds	r3, r7, #4
 80041a6:	220a      	movs	r2, #10
 80041a8:	4619      	mov	r1, r3
 80041aa:	f004 fa15 	bl	80085d8 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 80041ae:	4b22      	ldr	r3, [pc, #136]	; (8004238 <print_menu_items+0x12c>)
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	7efa      	ldrb	r2, [r7, #27]
 80041b6:	4611      	mov	r1, r2
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fe f9a7 	bl	800250c <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80041be:	4a1c      	ldr	r2, [pc, #112]	; (8004230 <print_menu_items+0x124>)
 80041c0:	1d38      	adds	r0, r7, #4
 80041c2:	2301      	movs	r3, #1
 80041c4:	ca06      	ldmia	r2, {r1, r2}
 80041c6:	f7fe f97b 	bl	80024c0 <ssd1306_WriteString>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 15);
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	6959      	ldr	r1, [r3, #20]
 80041ce:	1d3b      	adds	r3, r7, #4
 80041d0:	220f      	movs	r2, #15
 80041d2:	4618      	mov	r0, r3
 80041d4:	f004 fafd 	bl	80087d2 <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 80041d8:	4b18      	ldr	r3, [pc, #96]	; (800423c <print_menu_items+0x130>)
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	7efa      	ldrb	r2, [r7, #27]
 80041e0:	4611      	mov	r1, r2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fe f992 	bl	800250c <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80041e8:	4a11      	ldr	r2, [pc, #68]	; (8004230 <print_menu_items+0x124>)
 80041ea:	1d38      	adds	r0, r7, #4
 80041ec:	2301      	movs	r3, #1
 80041ee:	ca06      	ldmia	r2, {r1, r2}
 80041f0:	f7fe f966 	bl	80024c0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80041f4:	f7fe f854 	bl	80022a0 <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	61fb      	str	r3, [r7, #28]
		if(currentItem_buff == 0)
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00b      	beq.n	800421c <print_menu_items+0x110>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8004204:	4b0e      	ldr	r3, [pc, #56]	; (8004240 <print_menu_items+0x134>)
 8004206:	781a      	ldrb	r2, [r3, #0]
 8004208:	7efb      	ldrb	r3, [r7, #27]
 800420a:	4413      	add	r3, r2
 800420c:	76fb      	strb	r3, [r7, #27]
 800420e:	7efb      	ldrb	r3, [r7, #27]
 8004210:	b29a      	uxth	r2, r3
 8004212:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <print_menu_items+0x138>)
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d9ad      	bls.n	8004176 <print_menu_items+0x6a>
 800421a:	e000      	b.n	800421e <print_menu_items+0x112>
		{
			break;
 800421c:	bf00      	nop
		}
	}
	scroll_bar();
 800421e:	f7ff fceb 	bl	8003bf8 <scroll_bar>
}
 8004222:	bf00      	nop
 8004224:	3720      	adds	r7, #32
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000030 	.word	0x20000030
 8004230:	2000001c 	.word	0x2000001c
 8004234:	20000038 	.word	0x20000038
 8004238:	20000042 	.word	0x20000042
 800423c:	20000044 	.word	0x20000044
 8004240:	20000040 	.word	0x20000040
 8004244:	2000003e 	.word	0x2000003e

08004248 <return_from_menu>:
// ----------------------------------------------------------------------------------------
void return_from_menu(void)
{
 8004248:	b590      	push	{r4, r7, lr}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
	currentItem = &items[0];											// Jump to main menu
 800424e:	4b0f      	ldr	r3, [pc, #60]	; (800428c <return_from_menu+0x44>)
 8004250:	4a0f      	ldr	r2, [pc, #60]	; (8004290 <return_from_menu+0x48>)
 8004252:	601a      	str	r2, [r3, #0]
	clearn_oled();
 8004254:	f7fd ff74 	bl	8002140 <clearn_oled>

	// Print "MAIN MENU:"
	char str[20] = ">> MAIN MENU <<";
 8004258:	4b0e      	ldr	r3, [pc, #56]	; (8004294 <return_from_menu+0x4c>)
 800425a:	1d3c      	adds	r4, r7, #4
 800425c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800425e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004262:	2300      	movs	r3, #0
 8004264:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(10, 3);
 8004266:	2103      	movs	r1, #3
 8004268:	200a      	movs	r0, #10
 800426a:	f7fe f94f 	bl	800250c <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800426e:	4a0a      	ldr	r2, [pc, #40]	; (8004298 <return_from_menu+0x50>)
 8004270:	1d38      	adds	r0, r7, #4
 8004272:	2301      	movs	r3, #1
 8004274:	ca06      	ldmia	r2, {r1, r2}
 8004276:	f7fe f923 	bl	80024c0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800427a:	f7fe f811 	bl	80022a0 <ssd1306_UpdateScreen>

	print_menu_init();													// Print all start menu
 800427e:	f7ff feaf 	bl	8003fe0 <print_menu_init>
}
 8004282:	bf00      	nop
 8004284:	371c      	adds	r7, #28
 8004286:	46bd      	mov	sp, r7
 8004288:	bd90      	pop	{r4, r7, pc}
 800428a:	bf00      	nop
 800428c:	20000030 	.word	0x20000030
 8004290:	20000960 	.word	0x20000960
 8004294:	080090ac 	.word	0x080090ac
 8004298:	2000001c 	.word	0x2000001c

0800429c <lora_rx_mode>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// LORA FUNCTIONS
void lora_rx_mode(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
	clearn_oled();
 80042a2:	f7fd ff4d 	bl	8002140 <clearn_oled>
	print_rectangle_on_head();
 80042a6:	f7ff fd1b 	bl	8003ce0 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 80042aa:	2300      	movs	r3, #0
 80042ac:	603b      	str	r3, [r7, #0]
 80042ae:	1d3b      	adds	r3, r7, #4
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	605a      	str	r2, [r3, #4]
 80042b6:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 80042b8:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <lora_rx_mode+0x88>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6959      	ldr	r1, [r3, #20]
 80042be:	463b      	mov	r3, r7
 80042c0:	220f      	movs	r2, #15
 80042c2:	4618      	mov	r0, r3
 80042c4:	f004 fa85 	bl	80087d2 <strncpy>
	ssd1306_SetCursor(10, 3);
 80042c8:	2103      	movs	r1, #3
 80042ca:	200a      	movs	r0, #10
 80042cc:	f7fe f91e 	bl	800250c <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80042d0:	4a15      	ldr	r2, [pc, #84]	; (8004328 <lora_rx_mode+0x8c>)
 80042d2:	4638      	mov	r0, r7
 80042d4:	2301      	movs	r3, #1
 80042d6:	ca06      	ldmia	r2, {r1, r2}
 80042d8:	f7fe f8f2 	bl	80024c0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80042dc:	f7fd ffe0 	bl	80022a0 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 80042e0:	463b      	mov	r3, r7
 80042e2:	2210      	movs	r2, #16
 80042e4:	2100      	movs	r1, #0
 80042e6:	4618      	mov	r0, r3
 80042e8:	f004 f986 	bl	80085f8 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 80042ec:	4b0f      	ldr	r3, [pc, #60]	; (800432c <lora_rx_mode+0x90>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 80042f2:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <lora_rx_mode+0x94>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		LoRa_RX(true);
 80042f8:	2001      	movs	r0, #1
 80042fa:	f7fc fbbf 	bl	8000a7c <LoRa_RX>
	}while (button_status != BUTTON_ENTER);
 80042fe:	4b0b      	ldr	r3, [pc, #44]	; (800432c <lora_rx_mode+0x90>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d1f8      	bne.n	80042f8 <lora_rx_mode+0x5c>
	LoRa_RX(false);
 8004306:	2000      	movs	r0, #0
 8004308:	f7fc fbb8 	bl	8000a7c <LoRa_RX>

	block_interrupt_form_up_and_down_buttons = false;
 800430c:	4b08      	ldr	r3, [pc, #32]	; (8004330 <lora_rx_mode+0x94>)
 800430e:	2200      	movs	r2, #0
 8004310:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8004312:	4b04      	ldr	r3, [pc, #16]	; (8004324 <lora_rx_mode+0x88>)
 8004314:	4a07      	ldr	r2, [pc, #28]	; (8004334 <lora_rx_mode+0x98>)
 8004316:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 8004318:	f7ff fef8 	bl	800410c <print_menu_items>
}
 800431c:	bf00      	nop
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	20000030 	.word	0x20000030
 8004328:	2000001c 	.word	0x2000001c
 800432c:	200005a1 	.word	0x200005a1
 8004330:	200005a0 	.word	0x200005a0
 8004334:	20000864 	.word	0x20000864

08004338 <lora_tx_mode>:
// ----------------------------------------------------------------------------------------
void lora_tx_mode(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
	clearn_oled();
 800433e:	f7fd feff 	bl	8002140 <clearn_oled>
	print_rectangle_on_head();
 8004342:	f7ff fccd 	bl	8003ce0 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8004346:	2300      	movs	r3, #0
 8004348:	603b      	str	r3, [r7, #0]
 800434a:	1d3b      	adds	r3, r7, #4
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	605a      	str	r2, [r3, #4]
 8004352:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8004354:	4b1a      	ldr	r3, [pc, #104]	; (80043c0 <lora_tx_mode+0x88>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6959      	ldr	r1, [r3, #20]
 800435a:	463b      	mov	r3, r7
 800435c:	220f      	movs	r2, #15
 800435e:	4618      	mov	r0, r3
 8004360:	f004 fa37 	bl	80087d2 <strncpy>
	ssd1306_SetCursor(10, 3);
 8004364:	2103      	movs	r1, #3
 8004366:	200a      	movs	r0, #10
 8004368:	f7fe f8d0 	bl	800250c <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800436c:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <lora_tx_mode+0x8c>)
 800436e:	4638      	mov	r0, r7
 8004370:	2301      	movs	r3, #1
 8004372:	ca06      	ldmia	r2, {r1, r2}
 8004374:	f7fe f8a4 	bl	80024c0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004378:	f7fd ff92 	bl	80022a0 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 800437c:	463b      	mov	r3, r7
 800437e:	2210      	movs	r2, #16
 8004380:	2100      	movs	r1, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f004 f938 	bl	80085f8 <memset>


	button_status = BOTTON_DOESENT_PRESS;
 8004388:	4b0f      	ldr	r3, [pc, #60]	; (80043c8 <lora_tx_mode+0x90>)
 800438a:	2200      	movs	r2, #0
 800438c:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 800438e:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <lora_tx_mode+0x94>)
 8004390:	2201      	movs	r2, #1
 8004392:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		LoRa_TX_send_test_number(true);
 8004394:	2001      	movs	r0, #1
 8004396:	f7fc fc31 	bl	8000bfc <LoRa_TX_send_test_number>

	}while (button_status != BUTTON_ENTER);
 800439a:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <lora_tx_mode+0x90>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d1f8      	bne.n	8004394 <lora_tx_mode+0x5c>
	LoRa_TX_send_test_number(false);
 80043a2:	2000      	movs	r0, #0
 80043a4:	f7fc fc2a 	bl	8000bfc <LoRa_TX_send_test_number>

	block_interrupt_form_up_and_down_buttons = false;
 80043a8:	4b08      	ldr	r3, [pc, #32]	; (80043cc <lora_tx_mode+0x94>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 80043ae:	4b04      	ldr	r3, [pc, #16]	; (80043c0 <lora_tx_mode+0x88>)
 80043b0:	4a07      	ldr	r2, [pc, #28]	; (80043d0 <lora_tx_mode+0x98>)
 80043b2:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 80043b4:	f7ff feaa 	bl	800410c <print_menu_items>
}
 80043b8:	bf00      	nop
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20000030 	.word	0x20000030
 80043c4:	2000001c 	.word	0x2000001c
 80043c8:	200005a1 	.word	0x200005a1
 80043cc:	200005a0 	.word	0x200005a0
 80043d0:	20000864 	.word	0x20000864

080043d4 <lora_tx_mode_send_T_and_H>:
// ----------------------------------------------------------------------------------------
void lora_tx_mode_send_T_and_H(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
	clearn_oled();
 80043da:	f7fd feb1 	bl	8002140 <clearn_oled>
	print_rectangle_on_head();
 80043de:	f7ff fc7f 	bl	8003ce0 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 80043e2:	2300      	movs	r3, #0
 80043e4:	603b      	str	r3, [r7, #0]
 80043e6:	1d3b      	adds	r3, r7, #4
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	605a      	str	r2, [r3, #4]
 80043ee:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 80043f0:	4b1a      	ldr	r3, [pc, #104]	; (800445c <lora_tx_mode_send_T_and_H+0x88>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6959      	ldr	r1, [r3, #20]
 80043f6:	463b      	mov	r3, r7
 80043f8:	220f      	movs	r2, #15
 80043fa:	4618      	mov	r0, r3
 80043fc:	f004 f9e9 	bl	80087d2 <strncpy>
	ssd1306_SetCursor(10, 3);
 8004400:	2103      	movs	r1, #3
 8004402:	200a      	movs	r0, #10
 8004404:	f7fe f882 	bl	800250c <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8004408:	4a15      	ldr	r2, [pc, #84]	; (8004460 <lora_tx_mode_send_T_and_H+0x8c>)
 800440a:	4638      	mov	r0, r7
 800440c:	2301      	movs	r3, #1
 800440e:	ca06      	ldmia	r2, {r1, r2}
 8004410:	f7fe f856 	bl	80024c0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004414:	f7fd ff44 	bl	80022a0 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8004418:	463b      	mov	r3, r7
 800441a:	2210      	movs	r2, #16
 800441c:	2100      	movs	r1, #0
 800441e:	4618      	mov	r0, r3
 8004420:	f004 f8ea 	bl	80085f8 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8004424:	4b0f      	ldr	r3, [pc, #60]	; (8004464 <lora_tx_mode_send_T_and_H+0x90>)
 8004426:	2200      	movs	r2, #0
 8004428:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 800442a:	4b0f      	ldr	r3, [pc, #60]	; (8004468 <lora_tx_mode_send_T_and_H+0x94>)
 800442c:	2201      	movs	r2, #1
 800442e:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		LoRa_TX_send_T_and_H(true);
 8004430:	2001      	movs	r0, #1
 8004432:	f7fc fd5b 	bl	8000eec <LoRa_TX_send_T_and_H>

	}while (button_status != BUTTON_ENTER);
 8004436:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <lora_tx_mode_send_T_and_H+0x90>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d1f8      	bne.n	8004430 <lora_tx_mode_send_T_and_H+0x5c>
	LoRa_TX_send_T_and_H(false);
 800443e:	2000      	movs	r0, #0
 8004440:	f7fc fd54 	bl	8000eec <LoRa_TX_send_T_and_H>

	block_interrupt_form_up_and_down_buttons = false;
 8004444:	4b08      	ldr	r3, [pc, #32]	; (8004468 <lora_tx_mode_send_T_and_H+0x94>)
 8004446:	2200      	movs	r2, #0
 8004448:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 800444a:	4b04      	ldr	r3, [pc, #16]	; (800445c <lora_tx_mode_send_T_and_H+0x88>)
 800444c:	4a07      	ldr	r2, [pc, #28]	; (800446c <lora_tx_mode_send_T_and_H+0x98>)
 800444e:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 8004450:	f7ff fe5c 	bl	800410c <print_menu_items>
}
 8004454:	bf00      	nop
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20000030 	.word	0x20000030
 8004460:	2000001c 	.word	0x2000001c
 8004464:	200005a1 	.word	0x200005a1
 8004468:	200005a0 	.word	0x200005a0
 800446c:	20000864 	.word	0x20000864

08004470 <nrf_rx_mode>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// NRF FUNCTIONS
void nrf_rx_mode(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
//	int debug_val = 0;			// For debug
//	uint8_t test_1 = 0;			// For debug

	clearn_oled();
 8004474:	f7fd fe64 	bl	8002140 <clearn_oled>
	NRF24_init_RX_mode();
 8004478:	f7fd f81e 	bl	80014b8 <NRF24_init_RX_mode>
	print_rectangle_on_head();
 800447c:	f7ff fc30 	bl	8003ce0 <print_rectangle_on_head>
	//------------------------------------------


	//char str_222[10] = {0};  /// Doesen't work with it

	strncpy(str_buf_1, currentItem -> name, 15);
 8004480:	4b1c      	ldr	r3, [pc, #112]	; (80044f4 <nrf_rx_mode+0x84>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	220f      	movs	r2, #15
 8004488:	4619      	mov	r1, r3
 800448a:	481b      	ldr	r0, [pc, #108]	; (80044f8 <nrf_rx_mode+0x88>)
 800448c:	f004 f9a1 	bl	80087d2 <strncpy>
	ssd1306_SetCursor(10, 3);
 8004490:	2103      	movs	r1, #3
 8004492:	200a      	movs	r0, #10
 8004494:	f7fe f83a 	bl	800250c <ssd1306_SetCursor>
	ssd1306_WriteString(str_buf_1,  Font_7x10, White);
 8004498:	4a18      	ldr	r2, [pc, #96]	; (80044fc <nrf_rx_mode+0x8c>)
 800449a:	2301      	movs	r3, #1
 800449c:	ca06      	ldmia	r2, {r1, r2}
 800449e:	4816      	ldr	r0, [pc, #88]	; (80044f8 <nrf_rx_mode+0x88>)
 80044a0:	f7fe f80e 	bl	80024c0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80044a4:	f7fd fefc 	bl	80022a0 <ssd1306_UpdateScreen>
	memset(str_buf_1, 0, sizeof(str_buf_1));
 80044a8:	2210      	movs	r2, #16
 80044aa:	2100      	movs	r1, #0
 80044ac:	4812      	ldr	r0, [pc, #72]	; (80044f8 <nrf_rx_mode+0x88>)
 80044ae:	f004 f8a3 	bl	80085f8 <memset>
	//-------------------------------------------------

	button_status = BOTTON_DOESENT_PRESS;
 80044b2:	4b13      	ldr	r3, [pc, #76]	; (8004500 <nrf_rx_mode+0x90>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 80044b8:	4b12      	ldr	r3, [pc, #72]	; (8004504 <nrf_rx_mode+0x94>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		NRF24L01_Receive();
 80044be:	f7fc ff97 	bl	80013f0 <NRF24L01_Receive>
	}while (button_status != BUTTON_ENTER);
 80044c2:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <nrf_rx_mode+0x90>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d1f9      	bne.n	80044be <nrf_rx_mode+0x4e>

	NRF24_WriteReg(CONFIG, 0x00); 										// STOP work with nrf module  (Power off)
 80044ca:	2100      	movs	r1, #0
 80044cc:	2000      	movs	r0, #0
 80044ce:	f7fd fca3 	bl	8001e18 <NRF24_WriteReg>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);				// Turn off GREEN LED
 80044d2:	2201      	movs	r2, #1
 80044d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044d8:	480b      	ldr	r0, [pc, #44]	; (8004508 <nrf_rx_mode+0x98>)
 80044da:	f001 f940 	bl	800575e <HAL_GPIO_WritePin>
	block_interrupt_form_up_and_down_buttons = false;
 80044de:	4b09      	ldr	r3, [pc, #36]	; (8004504 <nrf_rx_mode+0x94>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
	// Return to first item of current menu
	currentItem = &items_menu_2[0];										// Set global pointer on first menu
 80044e4:	4b03      	ldr	r3, [pc, #12]	; (80044f4 <nrf_rx_mode+0x84>)
 80044e6:	4a09      	ldr	r2, [pc, #36]	; (800450c <nrf_rx_mode+0x9c>)
 80044e8:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 80044ea:	f7ff fe0f 	bl	800410c <print_menu_items>
//			int_array[i][j] = 1;
//		}
//		j = 0;
//	}
//	int qqq = 9999;
}
 80044ee:	bf00      	nop
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20000030 	.word	0x20000030
 80044f8:	200005a4 	.word	0x200005a4
 80044fc:	2000001c 	.word	0x2000001c
 8004500:	200005a1 	.word	0x200005a1
 8004504:	200005a0 	.word	0x200005a0
 8004508:	40011000 	.word	0x40011000
 800450c:	200007f8 	.word	0x200007f8

08004510 <nrf_tx_mode_send_test_number>:
// ----------------------------------------------------------------------------------------
void nrf_tx_mode_send_test_number(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
	clearn_oled();
 8004516:	f7fd fe13 	bl	8002140 <clearn_oled>
	NRF24_init_TX_mode();
 800451a:	f7fd f891 	bl	8001640 <NRF24_init_TX_mode>
	print_rectangle_on_head();
 800451e:	f7ff fbdf 	bl	8003ce0 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8004522:	2300      	movs	r3, #0
 8004524:	603b      	str	r3, [r7, #0]
 8004526:	1d3b      	adds	r3, r7, #4
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8004530:	4b23      	ldr	r3, [pc, #140]	; (80045c0 <nrf_tx_mode_send_test_number+0xb0>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6959      	ldr	r1, [r3, #20]
 8004536:	463b      	mov	r3, r7
 8004538:	220f      	movs	r2, #15
 800453a:	4618      	mov	r0, r3
 800453c:	f004 f949 	bl	80087d2 <strncpy>
	ssd1306_SetCursor(10, 3);
 8004540:	2103      	movs	r1, #3
 8004542:	200a      	movs	r0, #10
 8004544:	f7fd ffe2 	bl	800250c <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8004548:	4a1e      	ldr	r2, [pc, #120]	; (80045c4 <nrf_tx_mode_send_test_number+0xb4>)
 800454a:	4638      	mov	r0, r7
 800454c:	2301      	movs	r3, #1
 800454e:	ca06      	ldmia	r2, {r1, r2}
 8004550:	f7fd ffb6 	bl	80024c0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004554:	f7fd fea4 	bl	80022a0 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8004558:	463b      	mov	r3, r7
 800455a:	2210      	movs	r2, #16
 800455c:	2100      	movs	r1, #0
 800455e:	4618      	mov	r0, r3
 8004560:	f004 f84a 	bl	80085f8 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8004564:	4b18      	ldr	r3, [pc, #96]	; (80045c8 <nrf_tx_mode_send_test_number+0xb8>)
 8004566:	2200      	movs	r2, #0
 8004568:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 800456a:	4b18      	ldr	r3, [pc, #96]	; (80045cc <nrf_tx_mode_send_test_number+0xbc>)
 800456c:	2201      	movs	r2, #1
 800456e:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		NRF24L01_Transmission_counter();
 8004570:	f7fd f974 	bl	800185c <NRF24L01_Transmission_counter>
	}while (button_status != BUTTON_ENTER);
 8004574:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <nrf_tx_mode_send_test_number+0xb8>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b02      	cmp	r3, #2
 800457a:	d1f9      	bne.n	8004570 <nrf_tx_mode_send_test_number+0x60>
	i = 1; 																// Counter transmitted data
 800457c:	4b14      	ldr	r3, [pc, #80]	; (80045d0 <nrf_tx_mode_send_test_number+0xc0>)
 800457e:	2201      	movs	r2, #1
 8004580:	601a      	str	r2, [r3, #0]
	test_data = 0;									  					// Init test data for transmit data
 8004582:	4b14      	ldr	r3, [pc, #80]	; (80045d4 <nrf_tx_mode_send_test_number+0xc4>)
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
	retr_cnt_full = 0;
 8004588:	4b13      	ldr	r3, [pc, #76]	; (80045d8 <nrf_tx_mode_send_test_number+0xc8>)
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
	cnt_lost = 0;
 800458e:	4b13      	ldr	r3, [pc, #76]	; (80045dc <nrf_tx_mode_send_test_number+0xcc>)
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]

	NRF24_WriteReg(CONFIG, 0x00); 										// STOP work with nrf module  (Power off)
 8004594:	2100      	movs	r1, #0
 8004596:	2000      	movs	r0, #0
 8004598:	f7fd fc3e 	bl	8001e18 <NRF24_WriteReg>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);				// Turn off GREEN LED
 800459c:	2201      	movs	r2, #1
 800459e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045a2:	480f      	ldr	r0, [pc, #60]	; (80045e0 <nrf_tx_mode_send_test_number+0xd0>)
 80045a4:	f001 f8db 	bl	800575e <HAL_GPIO_WritePin>
	block_interrupt_form_up_and_down_buttons = false;
 80045a8:	4b08      	ldr	r3, [pc, #32]	; (80045cc <nrf_tx_mode_send_test_number+0xbc>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	701a      	strb	r2, [r3, #0]
	// Return to first item of current menu
	currentItem = &items_menu_2[0];										// Set global pointer on first menu
 80045ae:	4b04      	ldr	r3, [pc, #16]	; (80045c0 <nrf_tx_mode_send_test_number+0xb0>)
 80045b0:	4a0c      	ldr	r2, [pc, #48]	; (80045e4 <nrf_tx_mode_send_test_number+0xd4>)
 80045b2:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 80045b4:	f7ff fdaa 	bl	800410c <print_menu_items>
}
 80045b8:	bf00      	nop
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	20000030 	.word	0x20000030
 80045c4:	2000001c 	.word	0x2000001c
 80045c8:	200005a1 	.word	0x200005a1
 80045cc:	200005a0 	.word	0x200005a0
 80045d0:	20000018 	.word	0x20000018
 80045d4:	20000144 	.word	0x20000144
 80045d8:	2000013c 	.word	0x2000013c
 80045dc:	20000140 	.word	0x20000140
 80045e0:	40011000 	.word	0x40011000
 80045e4:	200007f8 	.word	0x200007f8

080045e8 <nrf_tx_mode_send_T_and_H>:
// ----------------------------------------------------------------------------------------
void nrf_tx_mode_send_T_and_H(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
	clearn_oled();
 80045ee:	f7fd fda7 	bl	8002140 <clearn_oled>
	NRF24_init_TX_mode();
 80045f2:	f7fd f825 	bl	8001640 <NRF24_init_TX_mode>
	print_rectangle_on_head();
 80045f6:	f7ff fb73 	bl	8003ce0 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 80045fa:	2300      	movs	r3, #0
 80045fc:	603b      	str	r3, [r7, #0]
 80045fe:	1d3b      	adds	r3, r7, #4
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	605a      	str	r2, [r3, #4]
 8004606:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8004608:	4b23      	ldr	r3, [pc, #140]	; (8004698 <nrf_tx_mode_send_T_and_H+0xb0>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6959      	ldr	r1, [r3, #20]
 800460e:	463b      	mov	r3, r7
 8004610:	220f      	movs	r2, #15
 8004612:	4618      	mov	r0, r3
 8004614:	f004 f8dd 	bl	80087d2 <strncpy>
	ssd1306_SetCursor(10, 3);
 8004618:	2103      	movs	r1, #3
 800461a:	200a      	movs	r0, #10
 800461c:	f7fd ff76 	bl	800250c <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8004620:	4a1e      	ldr	r2, [pc, #120]	; (800469c <nrf_tx_mode_send_T_and_H+0xb4>)
 8004622:	4638      	mov	r0, r7
 8004624:	2301      	movs	r3, #1
 8004626:	ca06      	ldmia	r2, {r1, r2}
 8004628:	f7fd ff4a 	bl	80024c0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800462c:	f7fd fe38 	bl	80022a0 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8004630:	463b      	mov	r3, r7
 8004632:	2210      	movs	r2, #16
 8004634:	2100      	movs	r1, #0
 8004636:	4618      	mov	r0, r3
 8004638:	f003 ffde 	bl	80085f8 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 800463c:	4b18      	ldr	r3, [pc, #96]	; (80046a0 <nrf_tx_mode_send_T_and_H+0xb8>)
 800463e:	2200      	movs	r2, #0
 8004640:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8004642:	4b18      	ldr	r3, [pc, #96]	; (80046a4 <nrf_tx_mode_send_T_and_H+0xbc>)
 8004644:	2201      	movs	r2, #1
 8004646:	701a      	strb	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		NRF24L01_Transmission_t_and_h();
 8004648:	f7fd fa1c 	bl	8001a84 <NRF24L01_Transmission_t_and_h>
	}while (button_status != BUTTON_ENTER);
 800464c:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <nrf_tx_mode_send_T_and_H+0xb8>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b02      	cmp	r3, #2
 8004652:	d1f9      	bne.n	8004648 <nrf_tx_mode_send_T_and_H+0x60>
	i = 1; 																// Counter transmitted data
 8004654:	4b14      	ldr	r3, [pc, #80]	; (80046a8 <nrf_tx_mode_send_T_and_H+0xc0>)
 8004656:	2201      	movs	r2, #1
 8004658:	601a      	str	r2, [r3, #0]
	test_data = 0;									  					// Init test data for transmit data
 800465a:	4b14      	ldr	r3, [pc, #80]	; (80046ac <nrf_tx_mode_send_T_and_H+0xc4>)
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
	retr_cnt_full = 0;
 8004660:	4b13      	ldr	r3, [pc, #76]	; (80046b0 <nrf_tx_mode_send_T_and_H+0xc8>)
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
	cnt_lost = 0;
 8004666:	4b13      	ldr	r3, [pc, #76]	; (80046b4 <nrf_tx_mode_send_T_and_H+0xcc>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]

	NRF24_WriteReg(CONFIG, 0x00); 										// STOP work with nrf module  (Power off)
 800466c:	2100      	movs	r1, #0
 800466e:	2000      	movs	r0, #0
 8004670:	f7fd fbd2 	bl	8001e18 <NRF24_WriteReg>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);				// Turn off GREEN LED
 8004674:	2201      	movs	r2, #1
 8004676:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800467a:	480f      	ldr	r0, [pc, #60]	; (80046b8 <nrf_tx_mode_send_T_and_H+0xd0>)
 800467c:	f001 f86f 	bl	800575e <HAL_GPIO_WritePin>
	block_interrupt_form_up_and_down_buttons = false;
 8004680:	4b08      	ldr	r3, [pc, #32]	; (80046a4 <nrf_tx_mode_send_T_and_H+0xbc>)
 8004682:	2200      	movs	r2, #0
 8004684:	701a      	strb	r2, [r3, #0]
	// Return to first item of current menu
	currentItem = &items_menu_2[0];										// Set global pointer on first menu
 8004686:	4b04      	ldr	r3, [pc, #16]	; (8004698 <nrf_tx_mode_send_T_and_H+0xb0>)
 8004688:	4a0c      	ldr	r2, [pc, #48]	; (80046bc <nrf_tx_mode_send_T_and_H+0xd4>)
 800468a:	601a      	str	r2, [r3, #0]
	print_menu_items();													// Print items on OLED
 800468c:	f7ff fd3e 	bl	800410c <print_menu_items>
}
 8004690:	bf00      	nop
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	20000030 	.word	0x20000030
 800469c:	2000001c 	.word	0x2000001c
 80046a0:	200005a1 	.word	0x200005a1
 80046a4:	200005a0 	.word	0x200005a0
 80046a8:	20000018 	.word	0x20000018
 80046ac:	20000144 	.word	0x20000144
 80046b0:	2000013c 	.word	0x2000013c
 80046b4:	20000140 	.word	0x20000140
 80046b8:	40011000 	.word	0x40011000
 80046bc:	200007f8 	.word	0x200007f8

080046c0 <am2302>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// SENSORS FUNCTIONS
// Function uses Tim2 for periodic measuring.
void am2302(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08e      	sub	sp, #56	; 0x38
 80046c4:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);		// For sensor measure
 80046c6:	48af      	ldr	r0, [pc, #700]	; (8004984 <am2302+0x2c4>)
 80046c8:	f002 fec2 	bl	8007450 <HAL_TIM_Base_Start_IT>
	HAL_Delay(100);
 80046cc:	2064      	movs	r0, #100	; 0x64
 80046ce:	f000 fc0d 	bl	8004eec <HAL_Delay>
	clearn_oled();
 80046d2:	f7fd fd35 	bl	8002140 <clearn_oled>
	print_rectangle_on_head();
 80046d6:	f7ff fb03 	bl	8003ce0 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 80046da:	2300      	movs	r3, #0
 80046dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80046de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	605a      	str	r2, [r3, #4]
 80046e8:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 80046ea:	4ba7      	ldr	r3, [pc, #668]	; (8004988 <am2302+0x2c8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6959      	ldr	r1, [r3, #20]
 80046f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046f4:	220f      	movs	r2, #15
 80046f6:	4618      	mov	r0, r3
 80046f8:	f004 f86b 	bl	80087d2 <strncpy>
	ssd1306_SetCursor(10, 3);
 80046fc:	2103      	movs	r1, #3
 80046fe:	200a      	movs	r0, #10
 8004700:	f7fd ff04 	bl	800250c <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8004704:	4aa1      	ldr	r2, [pc, #644]	; (800498c <am2302+0x2cc>)
 8004706:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800470a:	2301      	movs	r3, #1
 800470c:	ca06      	ldmia	r2, {r1, r2}
 800470e:	f7fd fed7 	bl	80024c0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004712:	f7fd fdc5 	bl	80022a0 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8004716:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800471a:	2210      	movs	r2, #16
 800471c:	2100      	movs	r1, #0
 800471e:	4618      	mov	r0, r3
 8004720:	f003 ff6a 	bl	80085f8 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8004724:	4b9a      	ldr	r3, [pc, #616]	; (8004990 <am2302+0x2d0>)
 8004726:	2200      	movs	r2, #0
 8004728:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;	// Lock interrupt from UP and DOWN buttons
 800472a:	4b9a      	ldr	r3, [pc, #616]	; (8004994 <am2302+0x2d4>)
 800472c:	2201      	movs	r2, #1
 800472e:	701a      	strb	r2, [r3, #0]
	measure_counter = 1;
 8004730:	4b99      	ldr	r3, [pc, #612]	; (8004998 <am2302+0x2d8>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		// Print data
		if(am2302_ready == true)						// Flug from interrup tim2
 8004736:	4b99      	ldr	r3, [pc, #612]	; (800499c <am2302+0x2dc>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 8101 	beq.w	8004942 <am2302+0x282>
		{
			char str_temperature[10] = {0};
 8004740:	2300      	movs	r3, #0
 8004742:	61fb      	str	r3, [r7, #28]
 8004744:	f107 0320 	add.w	r3, r7, #32
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	809a      	strh	r2, [r3, #4]
			char str_humidity[10] = {0};
 800474e:	2300      	movs	r3, #0
 8004750:	613b      	str	r3, [r7, #16]
 8004752:	f107 0314 	add.w	r3, r7, #20
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	809a      	strh	r2, [r3, #4]
			char str_1[10] = {0};
 800475c:	2300      	movs	r3, #0
 800475e:	607b      	str	r3, [r7, #4]
 8004760:	f107 0308 	add.w	r3, r7, #8
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	809a      	strh	r2, [r3, #4]

			// Clear data place on OLED
			memset(str, ' ', sizeof(str));
 800476a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800476e:	2210      	movs	r2, #16
 8004770:	2120      	movs	r1, #32
 8004772:	4618      	mov	r0, r3
 8004774:	f003 ff40 	bl	80085f8 <memset>
			ssd1306_SetCursor(10, first_menu_row);
 8004778:	4b89      	ldr	r3, [pc, #548]	; (80049a0 <am2302+0x2e0>)
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	b2db      	uxtb	r3, r3
 800477e:	4619      	mov	r1, r3
 8004780:	200a      	movs	r0, #10
 8004782:	f7fd fec3 	bl	800250c <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 8004786:	4a81      	ldr	r2, [pc, #516]	; (800498c <am2302+0x2cc>)
 8004788:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800478c:	2301      	movs	r3, #1
 800478e:	ca06      	ldmia	r2, {r1, r2}
 8004790:	f7fd fe96 	bl	80024c0 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8004794:	f7fd fd84 	bl	80022a0 <ssd1306_UpdateScreen>
			ssd1306_SetCursor(10, second_menu_row);
 8004798:	4b82      	ldr	r3, [pc, #520]	; (80049a4 <am2302+0x2e4>)
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	4619      	mov	r1, r3
 80047a0:	200a      	movs	r0, #10
 80047a2:	f7fd feb3 	bl	800250c <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 80047a6:	4a79      	ldr	r2, [pc, #484]	; (800498c <am2302+0x2cc>)
 80047a8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80047ac:	2301      	movs	r3, #1
 80047ae:	ca06      	ldmia	r2, {r1, r2}
 80047b0:	f7fd fe86 	bl	80024c0 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80047b4:	f7fd fd74 	bl	80022a0 <ssd1306_UpdateScreen>
			memset(str, 0, sizeof(str));
 80047b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047bc:	2210      	movs	r2, #16
 80047be:	2100      	movs	r1, #0
 80047c0:	4618      	mov	r0, r3
 80047c2:	f003 ff19 	bl	80085f8 <memset>

			// Print T and H on OLED
			itoa(am3202_sensor.temterature , str, 10);
 80047c6:	4b78      	ldr	r3, [pc, #480]	; (80049a8 <am2302+0x2e8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80047ce:	220a      	movs	r2, #10
 80047d0:	4618      	mov	r0, r3
 80047d2:	f003 ff01 	bl	80085d8 <itoa>
			strcat(str_temperature, "T = ");
 80047d6:	f107 031c 	add.w	r3, r7, #28
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fb fcb6 	bl	800014c <strlen>
 80047e0:	4603      	mov	r3, r0
 80047e2:	461a      	mov	r2, r3
 80047e4:	f107 031c 	add.w	r3, r7, #28
 80047e8:	4413      	add	r3, r2
 80047ea:	4a70      	ldr	r2, [pc, #448]	; (80049ac <am2302+0x2ec>)
 80047ec:	6810      	ldr	r0, [r2, #0]
 80047ee:	6018      	str	r0, [r3, #0]
 80047f0:	7912      	ldrb	r2, [r2, #4]
 80047f2:	711a      	strb	r2, [r3, #4]
			strcat(str_temperature, str);
 80047f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80047f8:	f107 031c 	add.w	r3, r7, #28
 80047fc:	4611      	mov	r1, r2
 80047fe:	4618      	mov	r0, r3
 8004800:	f003 ffd8 	bl	80087b4 <strcat>
			strcat(str_temperature, " C");
 8004804:	f107 031c 	add.w	r3, r7, #28
 8004808:	4618      	mov	r0, r3
 800480a:	f7fb fc9f 	bl	800014c <strlen>
 800480e:	4603      	mov	r3, r0
 8004810:	461a      	mov	r2, r3
 8004812:	f107 031c 	add.w	r3, r7, #28
 8004816:	4413      	add	r3, r2
 8004818:	4a65      	ldr	r2, [pc, #404]	; (80049b0 <am2302+0x2f0>)
 800481a:	8811      	ldrh	r1, [r2, #0]
 800481c:	7892      	ldrb	r2, [r2, #2]
 800481e:	8019      	strh	r1, [r3, #0]
 8004820:	709a      	strb	r2, [r3, #2]
			ssd1306_SetCursor(10, first_menu_row);
 8004822:	4b5f      	ldr	r3, [pc, #380]	; (80049a0 <am2302+0x2e0>)
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	b2db      	uxtb	r3, r3
 8004828:	4619      	mov	r1, r3
 800482a:	200a      	movs	r0, #10
 800482c:	f7fd fe6e 	bl	800250c <ssd1306_SetCursor>
			ssd1306_WriteString(str_temperature,  Font_7x10, White);
 8004830:	4a56      	ldr	r2, [pc, #344]	; (800498c <am2302+0x2cc>)
 8004832:	f107 001c 	add.w	r0, r7, #28
 8004836:	2301      	movs	r3, #1
 8004838:	ca06      	ldmia	r2, {r1, r2}
 800483a:	f7fd fe41 	bl	80024c0 <ssd1306_WriteString>
			memset(str, 0,sizeof(str));
 800483e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004842:	2210      	movs	r2, #16
 8004844:	2100      	movs	r1, #0
 8004846:	4618      	mov	r0, r3
 8004848:	f003 fed6 	bl	80085f8 <memset>

			itoa(am3202_sensor.humidity , str, 10);
 800484c:	4b56      	ldr	r3, [pc, #344]	; (80049a8 <am2302+0x2e8>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004854:	220a      	movs	r2, #10
 8004856:	4618      	mov	r0, r3
 8004858:	f003 febe 	bl	80085d8 <itoa>
			strcat(str_humidity, "H = ");
 800485c:	f107 0310 	add.w	r3, r7, #16
 8004860:	4618      	mov	r0, r3
 8004862:	f7fb fc73 	bl	800014c <strlen>
 8004866:	4603      	mov	r3, r0
 8004868:	461a      	mov	r2, r3
 800486a:	f107 0310 	add.w	r3, r7, #16
 800486e:	4413      	add	r3, r2
 8004870:	4a50      	ldr	r2, [pc, #320]	; (80049b4 <am2302+0x2f4>)
 8004872:	6810      	ldr	r0, [r2, #0]
 8004874:	6018      	str	r0, [r3, #0]
 8004876:	7912      	ldrb	r2, [r2, #4]
 8004878:	711a      	strb	r2, [r3, #4]
			strcat(str_humidity, str);
 800487a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800487e:	f107 0310 	add.w	r3, r7, #16
 8004882:	4611      	mov	r1, r2
 8004884:	4618      	mov	r0, r3
 8004886:	f003 ff95 	bl	80087b4 <strcat>
			strcat(str_humidity, " %");
 800488a:	f107 0310 	add.w	r3, r7, #16
 800488e:	4618      	mov	r0, r3
 8004890:	f7fb fc5c 	bl	800014c <strlen>
 8004894:	4603      	mov	r3, r0
 8004896:	461a      	mov	r2, r3
 8004898:	f107 0310 	add.w	r3, r7, #16
 800489c:	4413      	add	r3, r2
 800489e:	4a46      	ldr	r2, [pc, #280]	; (80049b8 <am2302+0x2f8>)
 80048a0:	8811      	ldrh	r1, [r2, #0]
 80048a2:	7892      	ldrb	r2, [r2, #2]
 80048a4:	8019      	strh	r1, [r3, #0]
 80048a6:	709a      	strb	r2, [r3, #2]
			ssd1306_SetCursor(10, second_menu_row);
 80048a8:	4b3e      	ldr	r3, [pc, #248]	; (80049a4 <am2302+0x2e4>)
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	4619      	mov	r1, r3
 80048b0:	200a      	movs	r0, #10
 80048b2:	f7fd fe2b 	bl	800250c <ssd1306_SetCursor>
			ssd1306_WriteString(str_humidity,  Font_7x10, White);
 80048b6:	4a35      	ldr	r2, [pc, #212]	; (800498c <am2302+0x2cc>)
 80048b8:	f107 0010 	add.w	r0, r7, #16
 80048bc:	2301      	movs	r3, #1
 80048be:	ca06      	ldmia	r2, {r1, r2}
 80048c0:	f7fd fdfe 	bl	80024c0 <ssd1306_WriteString>

			// Print counter
			memset(str, 0,sizeof(str));
 80048c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048c8:	2210      	movs	r2, #16
 80048ca:	2100      	movs	r1, #0
 80048cc:	4618      	mov	r0, r3
 80048ce:	f003 fe93 	bl	80085f8 <memset>
			strcat(str, "Counter: ");
 80048d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fb fc38 	bl	800014c <strlen>
 80048dc:	4603      	mov	r3, r0
 80048de:	461a      	mov	r2, r3
 80048e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048e4:	4413      	add	r3, r2
 80048e6:	4935      	ldr	r1, [pc, #212]	; (80049bc <am2302+0x2fc>)
 80048e8:	461a      	mov	r2, r3
 80048ea:	460b      	mov	r3, r1
 80048ec:	cb03      	ldmia	r3!, {r0, r1}
 80048ee:	6010      	str	r0, [r2, #0]
 80048f0:	6051      	str	r1, [r2, #4]
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	8113      	strh	r3, [r2, #8]
			itoa(measure_counter , str_1, 10);
 80048f6:	4b28      	ldr	r3, [pc, #160]	; (8004998 <am2302+0x2d8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	1d39      	adds	r1, r7, #4
 80048fc:	220a      	movs	r2, #10
 80048fe:	4618      	mov	r0, r3
 8004900:	f003 fe6a 	bl	80085d8 <itoa>
			strcat(str, str_1);
 8004904:	1d3a      	adds	r2, r7, #4
 8004906:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800490a:	4611      	mov	r1, r2
 800490c:	4618      	mov	r0, r3
 800490e:	f003 ff51 	bl	80087b4 <strcat>
			ssd1306_SetCursor(10, third_menu_row);
 8004912:	4b2b      	ldr	r3, [pc, #172]	; (80049c0 <am2302+0x300>)
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b2db      	uxtb	r3, r3
 8004918:	4619      	mov	r1, r3
 800491a:	200a      	movs	r0, #10
 800491c:	f7fd fdf6 	bl	800250c <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 8004920:	4a1a      	ldr	r2, [pc, #104]	; (800498c <am2302+0x2cc>)
 8004922:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004926:	2301      	movs	r3, #1
 8004928:	ca06      	ldmia	r2, {r1, r2}
 800492a:	f7fd fdc9 	bl	80024c0 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 800492e:	f7fd fcb7 	bl	80022a0 <ssd1306_UpdateScreen>

			measure_counter++;
 8004932:	4b19      	ldr	r3, [pc, #100]	; (8004998 <am2302+0x2d8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3301      	adds	r3, #1
 8004938:	4a17      	ldr	r2, [pc, #92]	; (8004998 <am2302+0x2d8>)
 800493a:	6013      	str	r3, [r2, #0]
			am2302_ready = false;
 800493c:	4b17      	ldr	r3, [pc, #92]	; (800499c <am2302+0x2dc>)
 800493e:	2200      	movs	r2, #0
 8004940:	701a      	strb	r2, [r3, #0]
		}

	}while (button_status != BUTTON_ENTER);
 8004942:	4b13      	ldr	r3, [pc, #76]	; (8004990 <am2302+0x2d0>)
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b02      	cmp	r3, #2
 8004948:	f47f aef5 	bne.w	8004736 <am2302+0x76>
	HAL_TIM_Base_Stop_IT(&htim2);
 800494c:	480d      	ldr	r0, [pc, #52]	; (8004984 <am2302+0x2c4>)
 800494e:	f002 fdd1 	bl	80074f4 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Turn off LED
 8004952:	2201      	movs	r2, #1
 8004954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004958:	481a      	ldr	r0, [pc, #104]	; (80049c4 <am2302+0x304>)
 800495a:	f000 ff00 	bl	800575e <HAL_GPIO_WritePin>
	block_interrupt_form_up_and_down_buttons = false;	// Unlock  UP and DOWN buttons interrupt
 800495e:	4b0d      	ldr	r3, [pc, #52]	; (8004994 <am2302+0x2d4>)
 8004960:	2200      	movs	r2, #0
 8004962:	701a      	strb	r2, [r3, #0]

	am3202_sensor.temterature = 0;
 8004964:	4b10      	ldr	r3, [pc, #64]	; (80049a8 <am2302+0x2e8>)
 8004966:	2200      	movs	r2, #0
 8004968:	601a      	str	r2, [r3, #0]
	am3202_sensor.humidity = 0;
 800496a:	4b0f      	ldr	r3, [pc, #60]	; (80049a8 <am2302+0x2e8>)
 800496c:	2200      	movs	r2, #0
 800496e:	605a      	str	r2, [r3, #4]

	// Return to first item of current menu
	currentItem = &items_menu_3[0];										// Set global pointer on first menu
 8004970:	4b05      	ldr	r3, [pc, #20]	; (8004988 <am2302+0x2c8>)
 8004972:	4a15      	ldr	r2, [pc, #84]	; (80049c8 <am2302+0x308>)
 8004974:	601a      	str	r2, [r3, #0]
	print_menu_items();
 8004976:	f7ff fbc9 	bl	800410c <print_menu_items>
}
 800497a:	bf00      	nop
 800497c:	3738      	adds	r7, #56	; 0x38
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000744 	.word	0x20000744
 8004988:	20000030 	.word	0x20000030
 800498c:	2000001c 	.word	0x2000001c
 8004990:	200005a1 	.word	0x200005a1
 8004994:	200005a0 	.word	0x200005a0
 8004998:	2000059c 	.word	0x2000059c
 800499c:	20000590 	.word	0x20000590
 80049a0:	20000038 	.word	0x20000038
 80049a4:	2000003a 	.word	0x2000003a
 80049a8:	200005bc 	.word	0x200005bc
 80049ac:	080090c0 	.word	0x080090c0
 80049b0:	080090c8 	.word	0x080090c8
 80049b4:	080090cc 	.word	0x080090cc
 80049b8:	080090d4 	.word	0x080090d4
 80049bc:	080090d8 	.word	0x080090d8
 80049c0:	2000003c 	.word	0x2000003c
 80049c4:	40011000 	.word	0x40011000
 80049c8:	200008d0 	.word	0x200008d0

080049cc <periodic_measurement_am2302_on>:
// ----------------------------------------------------------------------------------------
// Function uses Tim2 for periodic measuring.
void periodic_measurement_am2302_on(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08e      	sub	sp, #56	; 0x38
 80049d0:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);		// For sensor measure
 80049d2:	48a7      	ldr	r0, [pc, #668]	; (8004c70 <periodic_measurement_am2302_on+0x2a4>)
 80049d4:	f002 fd3c 	bl	8007450 <HAL_TIM_Base_Start_IT>
	HAL_Delay(100);
 80049d8:	2064      	movs	r0, #100	; 0x64
 80049da:	f000 fa87 	bl	8004eec <HAL_Delay>
	clearn_oled();
 80049de:	f7fd fbaf 	bl	8002140 <clearn_oled>
	print_rectangle_on_head();
 80049e2:	f7ff f97d 	bl	8003ce0 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 80049e6:	2300      	movs	r3, #0
 80049e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	605a      	str	r2, [r3, #4]
 80049f4:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 80049f6:	4b9f      	ldr	r3, [pc, #636]	; (8004c74 <periodic_measurement_am2302_on+0x2a8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6959      	ldr	r1, [r3, #20]
 80049fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a00:	220f      	movs	r2, #15
 8004a02:	4618      	mov	r0, r3
 8004a04:	f003 fee5 	bl	80087d2 <strncpy>
	ssd1306_SetCursor(10, 3);
 8004a08:	2103      	movs	r1, #3
 8004a0a:	200a      	movs	r0, #10
 8004a0c:	f7fd fd7e 	bl	800250c <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8004a10:	4a99      	ldr	r2, [pc, #612]	; (8004c78 <periodic_measurement_am2302_on+0x2ac>)
 8004a12:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004a16:	2301      	movs	r3, #1
 8004a18:	ca06      	ldmia	r2, {r1, r2}
 8004a1a:	f7fd fd51 	bl	80024c0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004a1e:	f7fd fc3f 	bl	80022a0 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8004a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a26:	2210      	movs	r2, #16
 8004a28:	2100      	movs	r1, #0
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f003 fde4 	bl	80085f8 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8004a30:	4b92      	ldr	r3, [pc, #584]	; (8004c7c <periodic_measurement_am2302_on+0x2b0>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8004a36:	4b92      	ldr	r3, [pc, #584]	; (8004c80 <periodic_measurement_am2302_on+0x2b4>)
 8004a38:	2201      	movs	r2, #1
 8004a3a:	701a      	strb	r2, [r3, #0]
	measure_counter = 1;
 8004a3c:	4b91      	ldr	r3, [pc, #580]	; (8004c84 <periodic_measurement_am2302_on+0x2b8>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	601a      	str	r2, [r3, #0]
	// waiting for press enter(SW2) button
	do{
		// Print data
		if(am2302_ready == true)	// Flug from interrup tim2
 8004a42:	4b91      	ldr	r3, [pc, #580]	; (8004c88 <periodic_measurement_am2302_on+0x2bc>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 8101 	beq.w	8004c4e <periodic_measurement_am2302_on+0x282>
		{
			char str_temperature[10] = {0};
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	61fb      	str	r3, [r7, #28]
 8004a50:	f107 0320 	add.w	r3, r7, #32
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	809a      	strh	r2, [r3, #4]
			char str_humidity[10] = {0};
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	f107 0314 	add.w	r3, r7, #20
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	809a      	strh	r2, [r3, #4]
			char str_1[10] = {0};
 8004a68:	2300      	movs	r3, #0
 8004a6a:	607b      	str	r3, [r7, #4]
 8004a6c:	f107 0308 	add.w	r3, r7, #8
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	809a      	strh	r2, [r3, #4]

			// Clear data place on OLED
			memset(str, ' ', sizeof(str));
 8004a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a7a:	2210      	movs	r2, #16
 8004a7c:	2120      	movs	r1, #32
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f003 fdba 	bl	80085f8 <memset>
			ssd1306_SetCursor(10, first_menu_row);
 8004a84:	4b81      	ldr	r3, [pc, #516]	; (8004c8c <periodic_measurement_am2302_on+0x2c0>)
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	200a      	movs	r0, #10
 8004a8e:	f7fd fd3d 	bl	800250c <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 8004a92:	4a79      	ldr	r2, [pc, #484]	; (8004c78 <periodic_measurement_am2302_on+0x2ac>)
 8004a94:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004a98:	2301      	movs	r3, #1
 8004a9a:	ca06      	ldmia	r2, {r1, r2}
 8004a9c:	f7fd fd10 	bl	80024c0 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8004aa0:	f7fd fbfe 	bl	80022a0 <ssd1306_UpdateScreen>
			ssd1306_SetCursor(10, second_menu_row);
 8004aa4:	4b7a      	ldr	r3, [pc, #488]	; (8004c90 <periodic_measurement_am2302_on+0x2c4>)
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	4619      	mov	r1, r3
 8004aac:	200a      	movs	r0, #10
 8004aae:	f7fd fd2d 	bl	800250c <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 8004ab2:	4a71      	ldr	r2, [pc, #452]	; (8004c78 <periodic_measurement_am2302_on+0x2ac>)
 8004ab4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004ab8:	2301      	movs	r3, #1
 8004aba:	ca06      	ldmia	r2, {r1, r2}
 8004abc:	f7fd fd00 	bl	80024c0 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8004ac0:	f7fd fbee 	bl	80022a0 <ssd1306_UpdateScreen>

			memset(str, 0, sizeof(str));
 8004ac4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ac8:	2210      	movs	r2, #16
 8004aca:	2100      	movs	r1, #0
 8004acc:	4618      	mov	r0, r3
 8004ace:	f003 fd93 	bl	80085f8 <memset>
			// Print T and H on OLED

			itoa(am3202_sensor.temterature , str, 10);
 8004ad2:	4b70      	ldr	r3, [pc, #448]	; (8004c94 <periodic_measurement_am2302_on+0x2c8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004ada:	220a      	movs	r2, #10
 8004adc:	4618      	mov	r0, r3
 8004ade:	f003 fd7b 	bl	80085d8 <itoa>
			strcat(str_temperature, "T = ");
 8004ae2:	f107 031c 	add.w	r3, r7, #28
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fb fb30 	bl	800014c <strlen>
 8004aec:	4603      	mov	r3, r0
 8004aee:	461a      	mov	r2, r3
 8004af0:	f107 031c 	add.w	r3, r7, #28
 8004af4:	4413      	add	r3, r2
 8004af6:	4a68      	ldr	r2, [pc, #416]	; (8004c98 <periodic_measurement_am2302_on+0x2cc>)
 8004af8:	6810      	ldr	r0, [r2, #0]
 8004afa:	6018      	str	r0, [r3, #0]
 8004afc:	7912      	ldrb	r2, [r2, #4]
 8004afe:	711a      	strb	r2, [r3, #4]
			strcat(str_temperature, str);
 8004b00:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b04:	f107 031c 	add.w	r3, r7, #28
 8004b08:	4611      	mov	r1, r2
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f003 fe52 	bl	80087b4 <strcat>
			strcat(str_temperature, " C");
 8004b10:	f107 031c 	add.w	r3, r7, #28
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fb fb19 	bl	800014c <strlen>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	f107 031c 	add.w	r3, r7, #28
 8004b22:	4413      	add	r3, r2
 8004b24:	4a5d      	ldr	r2, [pc, #372]	; (8004c9c <periodic_measurement_am2302_on+0x2d0>)
 8004b26:	8811      	ldrh	r1, [r2, #0]
 8004b28:	7892      	ldrb	r2, [r2, #2]
 8004b2a:	8019      	strh	r1, [r3, #0]
 8004b2c:	709a      	strb	r2, [r3, #2]
			ssd1306_SetCursor(10, first_menu_row);
 8004b2e:	4b57      	ldr	r3, [pc, #348]	; (8004c8c <periodic_measurement_am2302_on+0x2c0>)
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	4619      	mov	r1, r3
 8004b36:	200a      	movs	r0, #10
 8004b38:	f7fd fce8 	bl	800250c <ssd1306_SetCursor>
			ssd1306_WriteString(str_temperature,  Font_7x10, White);
 8004b3c:	4a4e      	ldr	r2, [pc, #312]	; (8004c78 <periodic_measurement_am2302_on+0x2ac>)
 8004b3e:	f107 001c 	add.w	r0, r7, #28
 8004b42:	2301      	movs	r3, #1
 8004b44:	ca06      	ldmia	r2, {r1, r2}
 8004b46:	f7fd fcbb 	bl	80024c0 <ssd1306_WriteString>

			memset(str, 0,sizeof(str));
 8004b4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b4e:	2210      	movs	r2, #16
 8004b50:	2100      	movs	r1, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f003 fd50 	bl	80085f8 <memset>
			itoa(am3202_sensor.humidity , str, 10);
 8004b58:	4b4e      	ldr	r3, [pc, #312]	; (8004c94 <periodic_measurement_am2302_on+0x2c8>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004b60:	220a      	movs	r2, #10
 8004b62:	4618      	mov	r0, r3
 8004b64:	f003 fd38 	bl	80085d8 <itoa>
			strcat(str_humidity, "H = ");
 8004b68:	f107 0310 	add.w	r3, r7, #16
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fb faed 	bl	800014c <strlen>
 8004b72:	4603      	mov	r3, r0
 8004b74:	461a      	mov	r2, r3
 8004b76:	f107 0310 	add.w	r3, r7, #16
 8004b7a:	4413      	add	r3, r2
 8004b7c:	4a48      	ldr	r2, [pc, #288]	; (8004ca0 <periodic_measurement_am2302_on+0x2d4>)
 8004b7e:	6810      	ldr	r0, [r2, #0]
 8004b80:	6018      	str	r0, [r3, #0]
 8004b82:	7912      	ldrb	r2, [r2, #4]
 8004b84:	711a      	strb	r2, [r3, #4]
			strcat(str_humidity, str);
 8004b86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b8a:	f107 0310 	add.w	r3, r7, #16
 8004b8e:	4611      	mov	r1, r2
 8004b90:	4618      	mov	r0, r3
 8004b92:	f003 fe0f 	bl	80087b4 <strcat>
			strcat(str_humidity, " %");
 8004b96:	f107 0310 	add.w	r3, r7, #16
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fb fad6 	bl	800014c <strlen>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f107 0310 	add.w	r3, r7, #16
 8004ba8:	4413      	add	r3, r2
 8004baa:	4a3e      	ldr	r2, [pc, #248]	; (8004ca4 <periodic_measurement_am2302_on+0x2d8>)
 8004bac:	8811      	ldrh	r1, [r2, #0]
 8004bae:	7892      	ldrb	r2, [r2, #2]
 8004bb0:	8019      	strh	r1, [r3, #0]
 8004bb2:	709a      	strb	r2, [r3, #2]
			ssd1306_SetCursor(10, second_menu_row);
 8004bb4:	4b36      	ldr	r3, [pc, #216]	; (8004c90 <periodic_measurement_am2302_on+0x2c4>)
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	4619      	mov	r1, r3
 8004bbc:	200a      	movs	r0, #10
 8004bbe:	f7fd fca5 	bl	800250c <ssd1306_SetCursor>
			ssd1306_WriteString(str_humidity,  Font_7x10, White);
 8004bc2:	4a2d      	ldr	r2, [pc, #180]	; (8004c78 <periodic_measurement_am2302_on+0x2ac>)
 8004bc4:	f107 0010 	add.w	r0, r7, #16
 8004bc8:	2301      	movs	r3, #1
 8004bca:	ca06      	ldmia	r2, {r1, r2}
 8004bcc:	f7fd fc78 	bl	80024c0 <ssd1306_WriteString>

			// Print counter
			memset(str, 0,sizeof(str));
 8004bd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bd4:	2210      	movs	r2, #16
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f003 fd0d 	bl	80085f8 <memset>
			strcat(str, "Counter: ");
 8004bde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fb fab2 	bl	800014c <strlen>
 8004be8:	4603      	mov	r3, r0
 8004bea:	461a      	mov	r2, r3
 8004bec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bf0:	4413      	add	r3, r2
 8004bf2:	492d      	ldr	r1, [pc, #180]	; (8004ca8 <periodic_measurement_am2302_on+0x2dc>)
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	cb03      	ldmia	r3!, {r0, r1}
 8004bfa:	6010      	str	r0, [r2, #0]
 8004bfc:	6051      	str	r1, [r2, #4]
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	8113      	strh	r3, [r2, #8]
			itoa(measure_counter , str_1, 10);
 8004c02:	4b20      	ldr	r3, [pc, #128]	; (8004c84 <periodic_measurement_am2302_on+0x2b8>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	1d39      	adds	r1, r7, #4
 8004c08:	220a      	movs	r2, #10
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f003 fce4 	bl	80085d8 <itoa>
			strcat(str, str_1);
 8004c10:	1d3a      	adds	r2, r7, #4
 8004c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c16:	4611      	mov	r1, r2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f003 fdcb 	bl	80087b4 <strcat>
			ssd1306_SetCursor(10, third_menu_row);
 8004c1e:	4b23      	ldr	r3, [pc, #140]	; (8004cac <periodic_measurement_am2302_on+0x2e0>)
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	4619      	mov	r1, r3
 8004c26:	200a      	movs	r0, #10
 8004c28:	f7fd fc70 	bl	800250c <ssd1306_SetCursor>
			ssd1306_WriteString(str,  Font_7x10, White);
 8004c2c:	4a12      	ldr	r2, [pc, #72]	; (8004c78 <periodic_measurement_am2302_on+0x2ac>)
 8004c2e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004c32:	2301      	movs	r3, #1
 8004c34:	ca06      	ldmia	r2, {r1, r2}
 8004c36:	f7fd fc43 	bl	80024c0 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8004c3a:	f7fd fb31 	bl	80022a0 <ssd1306_UpdateScreen>

			measure_counter++;
 8004c3e:	4b11      	ldr	r3, [pc, #68]	; (8004c84 <periodic_measurement_am2302_on+0x2b8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3301      	adds	r3, #1
 8004c44:	4a0f      	ldr	r2, [pc, #60]	; (8004c84 <periodic_measurement_am2302_on+0x2b8>)
 8004c46:	6013      	str	r3, [r2, #0]
			am2302_ready = false;
 8004c48:	4b0f      	ldr	r3, [pc, #60]	; (8004c88 <periodic_measurement_am2302_on+0x2bc>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	701a      	strb	r2, [r3, #0]
		}

	}while (button_status != BUTTON_ENTER);
 8004c4e:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <periodic_measurement_am2302_on+0x2b0>)
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	f47f aef5 	bne.w	8004a42 <periodic_measurement_am2302_on+0x76>
	block_interrupt_form_up_and_down_buttons = false;	// Unlock  UP and DOWN buttons interrupt
 8004c58:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <periodic_measurement_am2302_on+0x2b4>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	701a      	strb	r2, [r3, #0]
	// Return to first item of current menu
	currentItem = &items_menu_3[0];										// Set global pointer on first menu
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <periodic_measurement_am2302_on+0x2a8>)
 8004c60:	4a13      	ldr	r2, [pc, #76]	; (8004cb0 <periodic_measurement_am2302_on+0x2e4>)
 8004c62:	601a      	str	r2, [r3, #0]
	print_menu_items();
 8004c64:	f7ff fa52 	bl	800410c <print_menu_items>
}
 8004c68:	bf00      	nop
 8004c6a:	3738      	adds	r7, #56	; 0x38
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	20000744 	.word	0x20000744
 8004c74:	20000030 	.word	0x20000030
 8004c78:	2000001c 	.word	0x2000001c
 8004c7c:	200005a1 	.word	0x200005a1
 8004c80:	200005a0 	.word	0x200005a0
 8004c84:	2000059c 	.word	0x2000059c
 8004c88:	20000590 	.word	0x20000590
 8004c8c:	20000038 	.word	0x20000038
 8004c90:	2000003a 	.word	0x2000003a
 8004c94:	200005bc 	.word	0x200005bc
 8004c98:	080090c0 	.word	0x080090c0
 8004c9c:	080090c8 	.word	0x080090c8
 8004ca0:	080090cc 	.word	0x080090cc
 8004ca4:	080090d4 	.word	0x080090d4
 8004ca8:	080090d8 	.word	0x080090d8
 8004cac:	2000003c 	.word	0x2000003c
 8004cb0:	200008d0 	.word	0x200008d0

08004cb4 <periodic_measurement_am2302_off>:
// ----------------------------------------------------------------------------------------
// Function turn off Tim2 for periodic measuring.
void periodic_measurement_am2302_off(void)
{
 8004cb4:	b590      	push	{r4, r7, lr}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);		// For sensor measure
 8004cba:	483d      	ldr	r0, [pc, #244]	; (8004db0 <periodic_measurement_am2302_off+0xfc>)
 8004cbc:	f002 fbc8 	bl	8007450 <HAL_TIM_Base_Start_IT>
	HAL_Delay(100);
 8004cc0:	2064      	movs	r0, #100	; 0x64
 8004cc2:	f000 f913 	bl	8004eec <HAL_Delay>
	clearn_oled();
 8004cc6:	f7fd fa3b 	bl	8002140 <clearn_oled>
	print_rectangle_on_head();
 8004cca:	f7ff f809 	bl	8003ce0 <print_rectangle_on_head>

	// Print selected name of menu
	char str[16] = {0};
 8004cce:	2300      	movs	r3, #0
 8004cd0:	603b      	str	r3, [r7, #0]
 8004cd2:	1d3b      	adds	r3, r7, #4
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	605a      	str	r2, [r3, #4]
 8004cda:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8004cdc:	4b35      	ldr	r3, [pc, #212]	; (8004db4 <periodic_measurement_am2302_off+0x100>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6959      	ldr	r1, [r3, #20]
 8004ce2:	463b      	mov	r3, r7
 8004ce4:	220f      	movs	r2, #15
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f003 fd73 	bl	80087d2 <strncpy>
	ssd1306_SetCursor(10, 3);
 8004cec:	2103      	movs	r1, #3
 8004cee:	200a      	movs	r0, #10
 8004cf0:	f7fd fc0c 	bl	800250c <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8004cf4:	4a30      	ldr	r2, [pc, #192]	; (8004db8 <periodic_measurement_am2302_off+0x104>)
 8004cf6:	4638      	mov	r0, r7
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	ca06      	ldmia	r2, {r1, r2}
 8004cfc:	f7fd fbe0 	bl	80024c0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004d00:	f7fd face 	bl	80022a0 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8004d04:	463b      	mov	r3, r7
 8004d06:	2210      	movs	r2, #16
 8004d08:	2100      	movs	r1, #0
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f003 fc74 	bl	80085f8 <memset>

	button_status = BOTTON_DOESENT_PRESS;
 8004d10:	4b2a      	ldr	r3, [pc, #168]	; (8004dbc <periodic_measurement_am2302_off+0x108>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8004d16:	4b2a      	ldr	r3, [pc, #168]	; (8004dc0 <periodic_measurement_am2302_off+0x10c>)
 8004d18:	2201      	movs	r2, #1
 8004d1a:	701a      	strb	r2, [r3, #0]
	measure_counter = 1;
 8004d1c:	4b29      	ldr	r3, [pc, #164]	; (8004dc4 <periodic_measurement_am2302_off+0x110>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8004d22:	4823      	ldr	r0, [pc, #140]	; (8004db0 <periodic_measurement_am2302_off+0xfc>)
 8004d24:	f002 fbe6 	bl	80074f4 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Turn off LED
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d2e:	4826      	ldr	r0, [pc, #152]	; (8004dc8 <periodic_measurement_am2302_off+0x114>)
 8004d30:	f000 fd15 	bl	800575e <HAL_GPIO_WritePin>

	ssd1306_SetCursor(10, second_menu_row);
 8004d34:	4b25      	ldr	r3, [pc, #148]	; (8004dcc <periodic_measurement_am2302_off+0x118>)
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	200a      	movs	r0, #10
 8004d3e:	f7fd fbe5 	bl	800250c <ssd1306_SetCursor>
	strcat(str, "STOP measuring");
 8004d42:	463b      	mov	r3, r7
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fb fa01 	bl	800014c <strlen>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	463b      	mov	r3, r7
 8004d50:	4413      	add	r3, r2
 8004d52:	4a1f      	ldr	r2, [pc, #124]	; (8004dd0 <periodic_measurement_am2302_off+0x11c>)
 8004d54:	461c      	mov	r4, r3
 8004d56:	4613      	mov	r3, r2
 8004d58:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004d5a:	6020      	str	r0, [r4, #0]
 8004d5c:	6061      	str	r1, [r4, #4]
 8004d5e:	60a2      	str	r2, [r4, #8]
 8004d60:	881a      	ldrh	r2, [r3, #0]
 8004d62:	789b      	ldrb	r3, [r3, #2]
 8004d64:	81a2      	strh	r2, [r4, #12]
 8004d66:	73a3      	strb	r3, [r4, #14]
	ssd1306_WriteString(str,  Font_7x10, White);
 8004d68:	4a13      	ldr	r2, [pc, #76]	; (8004db8 <periodic_measurement_am2302_off+0x104>)
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	ca06      	ldmia	r2, {r1, r2}
 8004d70:	f7fd fba6 	bl	80024c0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8004d74:	f7fd fa94 	bl	80022a0 <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8004d78:	463b      	mov	r3, r7
 8004d7a:	2210      	movs	r2, #16
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f003 fc3a 	bl	80085f8 <memset>

	am3202_sensor.temterature = 0;
 8004d84:	4b13      	ldr	r3, [pc, #76]	; (8004dd4 <periodic_measurement_am2302_off+0x120>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	601a      	str	r2, [r3, #0]
	am3202_sensor.humidity = 0;
 8004d8a:	4b12      	ldr	r3, [pc, #72]	; (8004dd4 <periodic_measurement_am2302_off+0x120>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	605a      	str	r2, [r3, #4]

	// waiting for press enter(SW2) button
	do{

	}while (button_status != BUTTON_ENTER);
 8004d90:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <periodic_measurement_am2302_off+0x108>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d1fb      	bne.n	8004d90 <periodic_measurement_am2302_off+0xdc>
	block_interrupt_form_up_and_down_buttons = false;	// Unlock  UP and DOWN buttons interrupt
 8004d98:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <periodic_measurement_am2302_off+0x10c>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_3[0];										// Set global pointer on first menu
 8004d9e:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <periodic_measurement_am2302_off+0x100>)
 8004da0:	4a0d      	ldr	r2, [pc, #52]	; (8004dd8 <periodic_measurement_am2302_off+0x124>)
 8004da2:	601a      	str	r2, [r3, #0]
	print_menu_items();
 8004da4:	f7ff f9b2 	bl	800410c <print_menu_items>

}
 8004da8:	bf00      	nop
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd90      	pop	{r4, r7, pc}
 8004db0:	20000744 	.word	0x20000744
 8004db4:	20000030 	.word	0x20000030
 8004db8:	2000001c 	.word	0x2000001c
 8004dbc:	200005a1 	.word	0x200005a1
 8004dc0:	200005a0 	.word	0x200005a0
 8004dc4:	2000059c 	.word	0x2000059c
 8004dc8:	40011000 	.word	0x40011000
 8004dcc:	2000003a 	.word	0x2000003a
 8004dd0:	080090e4 	.word	0x080090e4
 8004dd4:	200005bc 	.word	0x200005bc
 8004dd8:	200008d0 	.word	0x200008d0

08004ddc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ddc:	480c      	ldr	r0, [pc, #48]	; (8004e10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004dde:	490d      	ldr	r1, [pc, #52]	; (8004e14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004de0:	4a0d      	ldr	r2, [pc, #52]	; (8004e18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004de4:	e002      	b.n	8004dec <LoopCopyDataInit>

08004de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004dea:	3304      	adds	r3, #4

08004dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004df0:	d3f9      	bcc.n	8004de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004df2:	4a0a      	ldr	r2, [pc, #40]	; (8004e1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004df4:	4c0a      	ldr	r4, [pc, #40]	; (8004e20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004df8:	e001      	b.n	8004dfe <LoopFillZerobss>

08004dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004dfc:	3204      	adds	r2, #4

08004dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e00:	d3fb      	bcc.n	8004dfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004e02:	f7fe fbd1 	bl	80035a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e06:	f003 fbab 	bl	8008560 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004e0a:	f7fd fdb1 	bl	8002970 <main>
  bx lr
 8004e0e:	4770      	bx	lr
  ldr r0, =_sdata
 8004e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e14:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8004e18:	0800992c 	.word	0x0800992c
  ldr r2, =_sbss
 8004e1c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8004e20:	20000a4c 	.word	0x20000a4c

08004e24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004e24:	e7fe      	b.n	8004e24 <ADC1_2_IRQHandler>
	...

08004e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e2c:	4b08      	ldr	r3, [pc, #32]	; (8004e50 <HAL_Init+0x28>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a07      	ldr	r2, [pc, #28]	; (8004e50 <HAL_Init+0x28>)
 8004e32:	f043 0310 	orr.w	r3, r3, #16
 8004e36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e38:	2003      	movs	r0, #3
 8004e3a:	f000 f947 	bl	80050cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e3e:	2000      	movs	r0, #0
 8004e40:	f000 f808 	bl	8004e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e44:	f7fe f88a 	bl	8002f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40022000 	.word	0x40022000

08004e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e5c:	4b12      	ldr	r3, [pc, #72]	; (8004ea8 <HAL_InitTick+0x54>)
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	4b12      	ldr	r3, [pc, #72]	; (8004eac <HAL_InitTick+0x58>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	4619      	mov	r1, r3
 8004e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 f95f 	bl	8005136 <HAL_SYSTICK_Config>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e00e      	b.n	8004ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b0f      	cmp	r3, #15
 8004e86:	d80a      	bhi.n	8004e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e88:	2200      	movs	r2, #0
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e90:	f000 f927 	bl	80050e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e94:	4a06      	ldr	r2, [pc, #24]	; (8004eb0 <HAL_InitTick+0x5c>)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e000      	b.n	8004ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	2000002c 	.word	0x2000002c
 8004eac:	2000004c 	.word	0x2000004c
 8004eb0:	20000048 	.word	0x20000048

08004eb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004eb8:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <HAL_IncTick+0x1c>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <HAL_IncTick+0x20>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	4a03      	ldr	r2, [pc, #12]	; (8004ed4 <HAL_IncTick+0x20>)
 8004ec6:	6013      	str	r3, [r2, #0]
}
 8004ec8:	bf00      	nop
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bc80      	pop	{r7}
 8004ece:	4770      	bx	lr
 8004ed0:	2000004c 	.word	0x2000004c
 8004ed4:	20000a38 	.word	0x20000a38

08004ed8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  return uwTick;
 8004edc:	4b02      	ldr	r3, [pc, #8]	; (8004ee8 <HAL_GetTick+0x10>)
 8004ede:	681b      	ldr	r3, [r3, #0]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bc80      	pop	{r7}
 8004ee6:	4770      	bx	lr
 8004ee8:	20000a38 	.word	0x20000a38

08004eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ef4:	f7ff fff0 	bl	8004ed8 <HAL_GetTick>
 8004ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f04:	d005      	beq.n	8004f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f06:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <HAL_Delay+0x44>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4413      	add	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f12:	bf00      	nop
 8004f14:	f7ff ffe0 	bl	8004ed8 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d8f7      	bhi.n	8004f14 <HAL_Delay+0x28>
  {
  }
}
 8004f24:	bf00      	nop
 8004f26:	bf00      	nop
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	2000004c 	.word	0x2000004c

08004f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f44:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <__NVIC_SetPriorityGrouping+0x44>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f50:	4013      	ands	r3, r2
 8004f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f66:	4a04      	ldr	r2, [pc, #16]	; (8004f78 <__NVIC_SetPriorityGrouping+0x44>)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	60d3      	str	r3, [r2, #12]
}
 8004f6c:	bf00      	nop
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	e000ed00 	.word	0xe000ed00

08004f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f80:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <__NVIC_GetPriorityGrouping+0x18>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	0a1b      	lsrs	r3, r3, #8
 8004f86:	f003 0307 	and.w	r3, r3, #7
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	e000ed00 	.word	0xe000ed00

08004f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	db0b      	blt.n	8004fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004faa:	79fb      	ldrb	r3, [r7, #7]
 8004fac:	f003 021f 	and.w	r2, r3, #31
 8004fb0:	4906      	ldr	r1, [pc, #24]	; (8004fcc <__NVIC_EnableIRQ+0x34>)
 8004fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb6:	095b      	lsrs	r3, r3, #5
 8004fb8:	2001      	movs	r0, #1
 8004fba:	fa00 f202 	lsl.w	r2, r0, r2
 8004fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr
 8004fcc:	e000e100 	.word	0xe000e100

08004fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	6039      	str	r1, [r7, #0]
 8004fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	db0a      	blt.n	8004ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	490c      	ldr	r1, [pc, #48]	; (800501c <__NVIC_SetPriority+0x4c>)
 8004fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fee:	0112      	lsls	r2, r2, #4
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ff8:	e00a      	b.n	8005010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	4908      	ldr	r1, [pc, #32]	; (8005020 <__NVIC_SetPriority+0x50>)
 8005000:	79fb      	ldrb	r3, [r7, #7]
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	3b04      	subs	r3, #4
 8005008:	0112      	lsls	r2, r2, #4
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	440b      	add	r3, r1
 800500e:	761a      	strb	r2, [r3, #24]
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	bc80      	pop	{r7}
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	e000e100 	.word	0xe000e100
 8005020:	e000ed00 	.word	0xe000ed00

08005024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005024:	b480      	push	{r7}
 8005026:	b089      	sub	sp, #36	; 0x24
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	f1c3 0307 	rsb	r3, r3, #7
 800503e:	2b04      	cmp	r3, #4
 8005040:	bf28      	it	cs
 8005042:	2304      	movcs	r3, #4
 8005044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	3304      	adds	r3, #4
 800504a:	2b06      	cmp	r3, #6
 800504c:	d902      	bls.n	8005054 <NVIC_EncodePriority+0x30>
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	3b03      	subs	r3, #3
 8005052:	e000      	b.n	8005056 <NVIC_EncodePriority+0x32>
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	fa02 f303 	lsl.w	r3, r2, r3
 8005062:	43da      	mvns	r2, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	401a      	ands	r2, r3
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800506c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	fa01 f303 	lsl.w	r3, r1, r3
 8005076:	43d9      	mvns	r1, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800507c:	4313      	orrs	r3, r2
         );
}
 800507e:	4618      	mov	r0, r3
 8005080:	3724      	adds	r7, #36	; 0x24
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr

08005088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3b01      	subs	r3, #1
 8005094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005098:	d301      	bcc.n	800509e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800509a:	2301      	movs	r3, #1
 800509c:	e00f      	b.n	80050be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800509e:	4a0a      	ldr	r2, [pc, #40]	; (80050c8 <SysTick_Config+0x40>)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050a6:	210f      	movs	r1, #15
 80050a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050ac:	f7ff ff90 	bl	8004fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <SysTick_Config+0x40>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050b6:	4b04      	ldr	r3, [pc, #16]	; (80050c8 <SysTick_Config+0x40>)
 80050b8:	2207      	movs	r2, #7
 80050ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	e000e010 	.word	0xe000e010

080050cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7ff ff2d 	bl	8004f34 <__NVIC_SetPriorityGrouping>
}
 80050da:	bf00      	nop
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b086      	sub	sp, #24
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	4603      	mov	r3, r0
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	607a      	str	r2, [r7, #4]
 80050ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050f4:	f7ff ff42 	bl	8004f7c <__NVIC_GetPriorityGrouping>
 80050f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	68b9      	ldr	r1, [r7, #8]
 80050fe:	6978      	ldr	r0, [r7, #20]
 8005100:	f7ff ff90 	bl	8005024 <NVIC_EncodePriority>
 8005104:	4602      	mov	r2, r0
 8005106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800510a:	4611      	mov	r1, r2
 800510c:	4618      	mov	r0, r3
 800510e:	f7ff ff5f 	bl	8004fd0 <__NVIC_SetPriority>
}
 8005112:	bf00      	nop
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b082      	sub	sp, #8
 800511e:	af00      	add	r7, sp, #0
 8005120:	4603      	mov	r3, r0
 8005122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005128:	4618      	mov	r0, r3
 800512a:	f7ff ff35 	bl	8004f98 <__NVIC_EnableIRQ>
}
 800512e:	bf00      	nop
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b082      	sub	sp, #8
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff ffa2 	bl	8005088 <SysTick_Config>
 8005144:	4603      	mov	r3, r0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005156:	2300      	movs	r3, #0
 8005158:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005160:	2b02      	cmp	r3, #2
 8005162:	d008      	beq.n	8005176 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2204      	movs	r2, #4
 8005168:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e020      	b.n	80051b8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 020e 	bic.w	r2, r2, #14
 8005184:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0201 	bic.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519e:	2101      	movs	r1, #1
 80051a0:	fa01 f202 	lsl.w	r2, r1, r2
 80051a4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80051b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	bc80      	pop	{r7}
 80051c0:	4770      	bx	lr
	...

080051c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d005      	beq.n	80051e6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2204      	movs	r2, #4
 80051de:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
 80051e4:	e051      	b.n	800528a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 020e 	bic.w	r2, r2, #14
 80051f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 0201 	bic.w	r2, r2, #1
 8005204:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a22      	ldr	r2, [pc, #136]	; (8005294 <HAL_DMA_Abort_IT+0xd0>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d029      	beq.n	8005264 <HAL_DMA_Abort_IT+0xa0>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a20      	ldr	r2, [pc, #128]	; (8005298 <HAL_DMA_Abort_IT+0xd4>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d022      	beq.n	8005260 <HAL_DMA_Abort_IT+0x9c>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a1f      	ldr	r2, [pc, #124]	; (800529c <HAL_DMA_Abort_IT+0xd8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d01a      	beq.n	800525a <HAL_DMA_Abort_IT+0x96>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1d      	ldr	r2, [pc, #116]	; (80052a0 <HAL_DMA_Abort_IT+0xdc>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d012      	beq.n	8005254 <HAL_DMA_Abort_IT+0x90>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1c      	ldr	r2, [pc, #112]	; (80052a4 <HAL_DMA_Abort_IT+0xe0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00a      	beq.n	800524e <HAL_DMA_Abort_IT+0x8a>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1a      	ldr	r2, [pc, #104]	; (80052a8 <HAL_DMA_Abort_IT+0xe4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d102      	bne.n	8005248 <HAL_DMA_Abort_IT+0x84>
 8005242:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005246:	e00e      	b.n	8005266 <HAL_DMA_Abort_IT+0xa2>
 8005248:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800524c:	e00b      	b.n	8005266 <HAL_DMA_Abort_IT+0xa2>
 800524e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005252:	e008      	b.n	8005266 <HAL_DMA_Abort_IT+0xa2>
 8005254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005258:	e005      	b.n	8005266 <HAL_DMA_Abort_IT+0xa2>
 800525a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800525e:	e002      	b.n	8005266 <HAL_DMA_Abort_IT+0xa2>
 8005260:	2310      	movs	r3, #16
 8005262:	e000      	b.n	8005266 <HAL_DMA_Abort_IT+0xa2>
 8005264:	2301      	movs	r3, #1
 8005266:	4a11      	ldr	r2, [pc, #68]	; (80052ac <HAL_DMA_Abort_IT+0xe8>)
 8005268:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	4798      	blx	r3
    } 
  }
  return status;
 800528a:	7bfb      	ldrb	r3, [r7, #15]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40020008 	.word	0x40020008
 8005298:	4002001c 	.word	0x4002001c
 800529c:	40020030 	.word	0x40020030
 80052a0:	40020044 	.word	0x40020044
 80052a4:	40020058 	.word	0x40020058
 80052a8:	4002006c 	.word	0x4002006c
 80052ac:	40020000 	.word	0x40020000

080052b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b08b      	sub	sp, #44	; 0x2c
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80052ba:	2300      	movs	r3, #0
 80052bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80052be:	2300      	movs	r3, #0
 80052c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052c2:	e169      	b.n	8005598 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80052c4:	2201      	movs	r2, #1
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	69fa      	ldr	r2, [r7, #28]
 80052d4:	4013      	ands	r3, r2
 80052d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	429a      	cmp	r2, r3
 80052de:	f040 8158 	bne.w	8005592 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	4a9a      	ldr	r2, [pc, #616]	; (8005550 <HAL_GPIO_Init+0x2a0>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d05e      	beq.n	80053aa <HAL_GPIO_Init+0xfa>
 80052ec:	4a98      	ldr	r2, [pc, #608]	; (8005550 <HAL_GPIO_Init+0x2a0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d875      	bhi.n	80053de <HAL_GPIO_Init+0x12e>
 80052f2:	4a98      	ldr	r2, [pc, #608]	; (8005554 <HAL_GPIO_Init+0x2a4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d058      	beq.n	80053aa <HAL_GPIO_Init+0xfa>
 80052f8:	4a96      	ldr	r2, [pc, #600]	; (8005554 <HAL_GPIO_Init+0x2a4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d86f      	bhi.n	80053de <HAL_GPIO_Init+0x12e>
 80052fe:	4a96      	ldr	r2, [pc, #600]	; (8005558 <HAL_GPIO_Init+0x2a8>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d052      	beq.n	80053aa <HAL_GPIO_Init+0xfa>
 8005304:	4a94      	ldr	r2, [pc, #592]	; (8005558 <HAL_GPIO_Init+0x2a8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d869      	bhi.n	80053de <HAL_GPIO_Init+0x12e>
 800530a:	4a94      	ldr	r2, [pc, #592]	; (800555c <HAL_GPIO_Init+0x2ac>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d04c      	beq.n	80053aa <HAL_GPIO_Init+0xfa>
 8005310:	4a92      	ldr	r2, [pc, #584]	; (800555c <HAL_GPIO_Init+0x2ac>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d863      	bhi.n	80053de <HAL_GPIO_Init+0x12e>
 8005316:	4a92      	ldr	r2, [pc, #584]	; (8005560 <HAL_GPIO_Init+0x2b0>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d046      	beq.n	80053aa <HAL_GPIO_Init+0xfa>
 800531c:	4a90      	ldr	r2, [pc, #576]	; (8005560 <HAL_GPIO_Init+0x2b0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d85d      	bhi.n	80053de <HAL_GPIO_Init+0x12e>
 8005322:	2b12      	cmp	r3, #18
 8005324:	d82a      	bhi.n	800537c <HAL_GPIO_Init+0xcc>
 8005326:	2b12      	cmp	r3, #18
 8005328:	d859      	bhi.n	80053de <HAL_GPIO_Init+0x12e>
 800532a:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <HAL_GPIO_Init+0x80>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	080053ab 	.word	0x080053ab
 8005334:	08005385 	.word	0x08005385
 8005338:	08005397 	.word	0x08005397
 800533c:	080053d9 	.word	0x080053d9
 8005340:	080053df 	.word	0x080053df
 8005344:	080053df 	.word	0x080053df
 8005348:	080053df 	.word	0x080053df
 800534c:	080053df 	.word	0x080053df
 8005350:	080053df 	.word	0x080053df
 8005354:	080053df 	.word	0x080053df
 8005358:	080053df 	.word	0x080053df
 800535c:	080053df 	.word	0x080053df
 8005360:	080053df 	.word	0x080053df
 8005364:	080053df 	.word	0x080053df
 8005368:	080053df 	.word	0x080053df
 800536c:	080053df 	.word	0x080053df
 8005370:	080053df 	.word	0x080053df
 8005374:	0800538d 	.word	0x0800538d
 8005378:	080053a1 	.word	0x080053a1
 800537c:	4a79      	ldr	r2, [pc, #484]	; (8005564 <HAL_GPIO_Init+0x2b4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d013      	beq.n	80053aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005382:	e02c      	b.n	80053de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	623b      	str	r3, [r7, #32]
          break;
 800538a:	e029      	b.n	80053e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	3304      	adds	r3, #4
 8005392:	623b      	str	r3, [r7, #32]
          break;
 8005394:	e024      	b.n	80053e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	3308      	adds	r3, #8
 800539c:	623b      	str	r3, [r7, #32]
          break;
 800539e:	e01f      	b.n	80053e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	330c      	adds	r3, #12
 80053a6:	623b      	str	r3, [r7, #32]
          break;
 80053a8:	e01a      	b.n	80053e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d102      	bne.n	80053b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80053b2:	2304      	movs	r3, #4
 80053b4:	623b      	str	r3, [r7, #32]
          break;
 80053b6:	e013      	b.n	80053e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d105      	bne.n	80053cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80053c0:	2308      	movs	r3, #8
 80053c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	69fa      	ldr	r2, [r7, #28]
 80053c8:	611a      	str	r2, [r3, #16]
          break;
 80053ca:	e009      	b.n	80053e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80053cc:	2308      	movs	r3, #8
 80053ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	69fa      	ldr	r2, [r7, #28]
 80053d4:	615a      	str	r2, [r3, #20]
          break;
 80053d6:	e003      	b.n	80053e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80053d8:	2300      	movs	r3, #0
 80053da:	623b      	str	r3, [r7, #32]
          break;
 80053dc:	e000      	b.n	80053e0 <HAL_GPIO_Init+0x130>
          break;
 80053de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	2bff      	cmp	r3, #255	; 0xff
 80053e4:	d801      	bhi.n	80053ea <HAL_GPIO_Init+0x13a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	e001      	b.n	80053ee <HAL_GPIO_Init+0x13e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3304      	adds	r3, #4
 80053ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	2bff      	cmp	r3, #255	; 0xff
 80053f4:	d802      	bhi.n	80053fc <HAL_GPIO_Init+0x14c>
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	e002      	b.n	8005402 <HAL_GPIO_Init+0x152>
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	3b08      	subs	r3, #8
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	210f      	movs	r1, #15
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	fa01 f303 	lsl.w	r3, r1, r3
 8005410:	43db      	mvns	r3, r3
 8005412:	401a      	ands	r2, r3
 8005414:	6a39      	ldr	r1, [r7, #32]
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	fa01 f303 	lsl.w	r3, r1, r3
 800541c:	431a      	orrs	r2, r3
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 80b1 	beq.w	8005592 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005430:	4b4d      	ldr	r3, [pc, #308]	; (8005568 <HAL_GPIO_Init+0x2b8>)
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	4a4c      	ldr	r2, [pc, #304]	; (8005568 <HAL_GPIO_Init+0x2b8>)
 8005436:	f043 0301 	orr.w	r3, r3, #1
 800543a:	6193      	str	r3, [r2, #24]
 800543c:	4b4a      	ldr	r3, [pc, #296]	; (8005568 <HAL_GPIO_Init+0x2b8>)
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	60bb      	str	r3, [r7, #8]
 8005446:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005448:	4a48      	ldr	r2, [pc, #288]	; (800556c <HAL_GPIO_Init+0x2bc>)
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	089b      	lsrs	r3, r3, #2
 800544e:	3302      	adds	r3, #2
 8005450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005454:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	f003 0303 	and.w	r3, r3, #3
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	220f      	movs	r2, #15
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	43db      	mvns	r3, r3
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4013      	ands	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a40      	ldr	r2, [pc, #256]	; (8005570 <HAL_GPIO_Init+0x2c0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d013      	beq.n	800549c <HAL_GPIO_Init+0x1ec>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a3f      	ldr	r2, [pc, #252]	; (8005574 <HAL_GPIO_Init+0x2c4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00d      	beq.n	8005498 <HAL_GPIO_Init+0x1e8>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a3e      	ldr	r2, [pc, #248]	; (8005578 <HAL_GPIO_Init+0x2c8>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d007      	beq.n	8005494 <HAL_GPIO_Init+0x1e4>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a3d      	ldr	r2, [pc, #244]	; (800557c <HAL_GPIO_Init+0x2cc>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d101      	bne.n	8005490 <HAL_GPIO_Init+0x1e0>
 800548c:	2303      	movs	r3, #3
 800548e:	e006      	b.n	800549e <HAL_GPIO_Init+0x1ee>
 8005490:	2304      	movs	r3, #4
 8005492:	e004      	b.n	800549e <HAL_GPIO_Init+0x1ee>
 8005494:	2302      	movs	r3, #2
 8005496:	e002      	b.n	800549e <HAL_GPIO_Init+0x1ee>
 8005498:	2301      	movs	r3, #1
 800549a:	e000      	b.n	800549e <HAL_GPIO_Init+0x1ee>
 800549c:	2300      	movs	r3, #0
 800549e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a0:	f002 0203 	and.w	r2, r2, #3
 80054a4:	0092      	lsls	r2, r2, #2
 80054a6:	4093      	lsls	r3, r2
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80054ae:	492f      	ldr	r1, [pc, #188]	; (800556c <HAL_GPIO_Init+0x2bc>)
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	089b      	lsrs	r3, r3, #2
 80054b4:	3302      	adds	r3, #2
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d006      	beq.n	80054d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80054c8:	4b2d      	ldr	r3, [pc, #180]	; (8005580 <HAL_GPIO_Init+0x2d0>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	492c      	ldr	r1, [pc, #176]	; (8005580 <HAL_GPIO_Init+0x2d0>)
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	600b      	str	r3, [r1, #0]
 80054d4:	e006      	b.n	80054e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80054d6:	4b2a      	ldr	r3, [pc, #168]	; (8005580 <HAL_GPIO_Init+0x2d0>)
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	43db      	mvns	r3, r3
 80054de:	4928      	ldr	r1, [pc, #160]	; (8005580 <HAL_GPIO_Init+0x2d0>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d006      	beq.n	80054fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80054f0:	4b23      	ldr	r3, [pc, #140]	; (8005580 <HAL_GPIO_Init+0x2d0>)
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	4922      	ldr	r1, [pc, #136]	; (8005580 <HAL_GPIO_Init+0x2d0>)
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	604b      	str	r3, [r1, #4]
 80054fc:	e006      	b.n	800550c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80054fe:	4b20      	ldr	r3, [pc, #128]	; (8005580 <HAL_GPIO_Init+0x2d0>)
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	43db      	mvns	r3, r3
 8005506:	491e      	ldr	r1, [pc, #120]	; (8005580 <HAL_GPIO_Init+0x2d0>)
 8005508:	4013      	ands	r3, r2
 800550a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d006      	beq.n	8005526 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005518:	4b19      	ldr	r3, [pc, #100]	; (8005580 <HAL_GPIO_Init+0x2d0>)
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	4918      	ldr	r1, [pc, #96]	; (8005580 <HAL_GPIO_Init+0x2d0>)
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	4313      	orrs	r3, r2
 8005522:	608b      	str	r3, [r1, #8]
 8005524:	e006      	b.n	8005534 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005526:	4b16      	ldr	r3, [pc, #88]	; (8005580 <HAL_GPIO_Init+0x2d0>)
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	43db      	mvns	r3, r3
 800552e:	4914      	ldr	r1, [pc, #80]	; (8005580 <HAL_GPIO_Init+0x2d0>)
 8005530:	4013      	ands	r3, r2
 8005532:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d021      	beq.n	8005584 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005540:	4b0f      	ldr	r3, [pc, #60]	; (8005580 <HAL_GPIO_Init+0x2d0>)
 8005542:	68da      	ldr	r2, [r3, #12]
 8005544:	490e      	ldr	r1, [pc, #56]	; (8005580 <HAL_GPIO_Init+0x2d0>)
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	4313      	orrs	r3, r2
 800554a:	60cb      	str	r3, [r1, #12]
 800554c:	e021      	b.n	8005592 <HAL_GPIO_Init+0x2e2>
 800554e:	bf00      	nop
 8005550:	10320000 	.word	0x10320000
 8005554:	10310000 	.word	0x10310000
 8005558:	10220000 	.word	0x10220000
 800555c:	10210000 	.word	0x10210000
 8005560:	10120000 	.word	0x10120000
 8005564:	10110000 	.word	0x10110000
 8005568:	40021000 	.word	0x40021000
 800556c:	40010000 	.word	0x40010000
 8005570:	40010800 	.word	0x40010800
 8005574:	40010c00 	.word	0x40010c00
 8005578:	40011000 	.word	0x40011000
 800557c:	40011400 	.word	0x40011400
 8005580:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005584:	4b0b      	ldr	r3, [pc, #44]	; (80055b4 <HAL_GPIO_Init+0x304>)
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	43db      	mvns	r3, r3
 800558c:	4909      	ldr	r1, [pc, #36]	; (80055b4 <HAL_GPIO_Init+0x304>)
 800558e:	4013      	ands	r3, r2
 8005590:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	3301      	adds	r3, #1
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	fa22 f303 	lsr.w	r3, r2, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f47f ae8e 	bne.w	80052c4 <HAL_GPIO_Init+0x14>
  }
}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop
 80055ac:	372c      	adds	r7, #44	; 0x2c
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr
 80055b4:	40010400 	.word	0x40010400

080055b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b089      	sub	sp, #36	; 0x24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80055c2:	2300      	movs	r3, #0
 80055c4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80055c6:	e09a      	b.n	80056fe <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80055c8:	2201      	movs	r2, #1
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	4013      	ands	r3, r2
 80055d4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 808d 	beq.w	80056f8 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80055de:	4a4e      	ldr	r2, [pc, #312]	; (8005718 <HAL_GPIO_DeInit+0x160>)
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	089b      	lsrs	r3, r3, #2
 80055e4:	3302      	adds	r3, #2
 80055e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ea:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	220f      	movs	r2, #15
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	4013      	ands	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a46      	ldr	r2, [pc, #280]	; (800571c <HAL_GPIO_DeInit+0x164>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d013      	beq.n	8005630 <HAL_GPIO_DeInit+0x78>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a45      	ldr	r2, [pc, #276]	; (8005720 <HAL_GPIO_DeInit+0x168>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d00d      	beq.n	800562c <HAL_GPIO_DeInit+0x74>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a44      	ldr	r2, [pc, #272]	; (8005724 <HAL_GPIO_DeInit+0x16c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d007      	beq.n	8005628 <HAL_GPIO_DeInit+0x70>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a43      	ldr	r2, [pc, #268]	; (8005728 <HAL_GPIO_DeInit+0x170>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d101      	bne.n	8005624 <HAL_GPIO_DeInit+0x6c>
 8005620:	2303      	movs	r3, #3
 8005622:	e006      	b.n	8005632 <HAL_GPIO_DeInit+0x7a>
 8005624:	2304      	movs	r3, #4
 8005626:	e004      	b.n	8005632 <HAL_GPIO_DeInit+0x7a>
 8005628:	2302      	movs	r3, #2
 800562a:	e002      	b.n	8005632 <HAL_GPIO_DeInit+0x7a>
 800562c:	2301      	movs	r3, #1
 800562e:	e000      	b.n	8005632 <HAL_GPIO_DeInit+0x7a>
 8005630:	2300      	movs	r3, #0
 8005632:	69fa      	ldr	r2, [r7, #28]
 8005634:	f002 0203 	and.w	r2, r2, #3
 8005638:	0092      	lsls	r2, r2, #2
 800563a:	4093      	lsls	r3, r2
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	429a      	cmp	r2, r3
 8005640:	d132      	bne.n	80056a8 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	f003 0303 	and.w	r3, r3, #3
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	220f      	movs	r2, #15
 800564c:	fa02 f303 	lsl.w	r3, r2, r3
 8005650:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8005652:	4a31      	ldr	r2, [pc, #196]	; (8005718 <HAL_GPIO_DeInit+0x160>)
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	089b      	lsrs	r3, r3, #2
 8005658:	3302      	adds	r3, #2
 800565a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	43da      	mvns	r2, r3
 8005662:	482d      	ldr	r0, [pc, #180]	; (8005718 <HAL_GPIO_DeInit+0x160>)
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	089b      	lsrs	r3, r3, #2
 8005668:	400a      	ands	r2, r1
 800566a:	3302      	adds	r3, #2
 800566c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005670:	4b2e      	ldr	r3, [pc, #184]	; (800572c <HAL_GPIO_DeInit+0x174>)
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	43db      	mvns	r3, r3
 8005678:	492c      	ldr	r1, [pc, #176]	; (800572c <HAL_GPIO_DeInit+0x174>)
 800567a:	4013      	ands	r3, r2
 800567c:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800567e:	4b2b      	ldr	r3, [pc, #172]	; (800572c <HAL_GPIO_DeInit+0x174>)
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	43db      	mvns	r3, r3
 8005686:	4929      	ldr	r1, [pc, #164]	; (800572c <HAL_GPIO_DeInit+0x174>)
 8005688:	4013      	ands	r3, r2
 800568a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800568c:	4b27      	ldr	r3, [pc, #156]	; (800572c <HAL_GPIO_DeInit+0x174>)
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	43db      	mvns	r3, r3
 8005694:	4925      	ldr	r1, [pc, #148]	; (800572c <HAL_GPIO_DeInit+0x174>)
 8005696:	4013      	ands	r3, r2
 8005698:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800569a:	4b24      	ldr	r3, [pc, #144]	; (800572c <HAL_GPIO_DeInit+0x174>)
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	43db      	mvns	r3, r3
 80056a2:	4922      	ldr	r1, [pc, #136]	; (800572c <HAL_GPIO_DeInit+0x174>)
 80056a4:	4013      	ands	r3, r2
 80056a6:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	2bff      	cmp	r3, #255	; 0xff
 80056ac:	d801      	bhi.n	80056b2 <HAL_GPIO_DeInit+0xfa>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	e001      	b.n	80056b6 <HAL_GPIO_DeInit+0xfe>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3304      	adds	r3, #4
 80056b6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	2bff      	cmp	r3, #255	; 0xff
 80056bc:	d802      	bhi.n	80056c4 <HAL_GPIO_DeInit+0x10c>
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	e002      	b.n	80056ca <HAL_GPIO_DeInit+0x112>
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	3b08      	subs	r3, #8
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	210f      	movs	r1, #15
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	fa01 f303 	lsl.w	r3, r1, r3
 80056d8:	43db      	mvns	r3, r3
 80056da:	401a      	ands	r2, r3
 80056dc:	2104      	movs	r1, #4
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	fa01 f303 	lsl.w	r3, r1, r3
 80056e4:	431a      	orrs	r2, r3
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68da      	ldr	r2, [r3, #12]
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	43db      	mvns	r3, r3
 80056f2:	401a      	ands	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	3301      	adds	r3, #1
 80056fc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	fa22 f303 	lsr.w	r3, r2, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	f47f af5e 	bne.w	80055c8 <HAL_GPIO_DeInit+0x10>
  }
}
 800570c:	bf00      	nop
 800570e:	bf00      	nop
 8005710:	3724      	adds	r7, #36	; 0x24
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr
 8005718:	40010000 	.word	0x40010000
 800571c:	40010800 	.word	0x40010800
 8005720:	40010c00 	.word	0x40010c00
 8005724:	40011000 	.word	0x40011000
 8005728:	40011400 	.word	0x40011400
 800572c:	40010400 	.word	0x40010400

08005730 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	460b      	mov	r3, r1
 800573a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	887b      	ldrh	r3, [r7, #2]
 8005742:	4013      	ands	r3, r2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d002      	beq.n	800574e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005748:	2301      	movs	r3, #1
 800574a:	73fb      	strb	r3, [r7, #15]
 800574c:	e001      	b.n	8005752 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800574e:	2300      	movs	r3, #0
 8005750:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005752:	7bfb      	ldrb	r3, [r7, #15]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	bc80      	pop	{r7}
 800575c:	4770      	bx	lr

0800575e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	460b      	mov	r3, r1
 8005768:	807b      	strh	r3, [r7, #2]
 800576a:	4613      	mov	r3, r2
 800576c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800576e:	787b      	ldrb	r3, [r7, #1]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005774:	887a      	ldrh	r2, [r7, #2]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800577a:	e003      	b.n	8005784 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800577c:	887b      	ldrh	r3, [r7, #2]
 800577e:	041a      	lsls	r2, r3, #16
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	611a      	str	r2, [r3, #16]
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr

0800578e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800578e:	b480      	push	{r7}
 8005790:	b085      	sub	sp, #20
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	460b      	mov	r3, r1
 8005798:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057a0:	887a      	ldrh	r2, [r7, #2]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4013      	ands	r3, r2
 80057a6:	041a      	lsls	r2, r3, #16
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	43d9      	mvns	r1, r3
 80057ac:	887b      	ldrh	r3, [r7, #2]
 80057ae:	400b      	ands	r3, r1
 80057b0:	431a      	orrs	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	611a      	str	r2, [r3, #16]
}
 80057b6:	bf00      	nop
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr

080057c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	4603      	mov	r3, r0
 80057c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80057ca:	4b08      	ldr	r3, [pc, #32]	; (80057ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057cc:	695a      	ldr	r2, [r3, #20]
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	4013      	ands	r3, r2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d006      	beq.n	80057e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057d6:	4a05      	ldr	r2, [pc, #20]	; (80057ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057d8:	88fb      	ldrh	r3, [r7, #6]
 80057da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057dc:	88fb      	ldrh	r3, [r7, #6]
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fd fb62 	bl	8002ea8 <HAL_GPIO_EXTI_Callback>
  }
}
 80057e4:	bf00      	nop
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40010400 	.word	0x40010400

080057f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e12b      	b.n	8005a5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d106      	bne.n	800581c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7fd fbd2 	bl	8002fc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2224      	movs	r2, #36	; 0x24
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0201 	bic.w	r2, r2, #1
 8005832:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005842:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005852:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005854:	f000 fffa 	bl	800684c <HAL_RCC_GetPCLK1Freq>
 8005858:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	4a81      	ldr	r2, [pc, #516]	; (8005a64 <HAL_I2C_Init+0x274>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d807      	bhi.n	8005874 <HAL_I2C_Init+0x84>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4a80      	ldr	r2, [pc, #512]	; (8005a68 <HAL_I2C_Init+0x278>)
 8005868:	4293      	cmp	r3, r2
 800586a:	bf94      	ite	ls
 800586c:	2301      	movls	r3, #1
 800586e:	2300      	movhi	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	e006      	b.n	8005882 <HAL_I2C_Init+0x92>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4a7d      	ldr	r2, [pc, #500]	; (8005a6c <HAL_I2C_Init+0x27c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	bf94      	ite	ls
 800587c:	2301      	movls	r3, #1
 800587e:	2300      	movhi	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e0e7      	b.n	8005a5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4a78      	ldr	r2, [pc, #480]	; (8005a70 <HAL_I2C_Init+0x280>)
 800588e:	fba2 2303 	umull	r2, r3, r2, r3
 8005892:	0c9b      	lsrs	r3, r3, #18
 8005894:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	4a6a      	ldr	r2, [pc, #424]	; (8005a64 <HAL_I2C_Init+0x274>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d802      	bhi.n	80058c4 <HAL_I2C_Init+0xd4>
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	3301      	adds	r3, #1
 80058c2:	e009      	b.n	80058d8 <HAL_I2C_Init+0xe8>
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058ca:	fb02 f303 	mul.w	r3, r2, r3
 80058ce:	4a69      	ldr	r2, [pc, #420]	; (8005a74 <HAL_I2C_Init+0x284>)
 80058d0:	fba2 2303 	umull	r2, r3, r2, r3
 80058d4:	099b      	lsrs	r3, r3, #6
 80058d6:	3301      	adds	r3, #1
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6812      	ldr	r2, [r2, #0]
 80058dc:	430b      	orrs	r3, r1
 80058de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	495c      	ldr	r1, [pc, #368]	; (8005a64 <HAL_I2C_Init+0x274>)
 80058f4:	428b      	cmp	r3, r1
 80058f6:	d819      	bhi.n	800592c <HAL_I2C_Init+0x13c>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	1e59      	subs	r1, r3, #1
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	fbb1 f3f3 	udiv	r3, r1, r3
 8005906:	1c59      	adds	r1, r3, #1
 8005908:	f640 73fc 	movw	r3, #4092	; 0xffc
 800590c:	400b      	ands	r3, r1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <HAL_I2C_Init+0x138>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	1e59      	subs	r1, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005920:	3301      	adds	r3, #1
 8005922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005926:	e051      	b.n	80059cc <HAL_I2C_Init+0x1dc>
 8005928:	2304      	movs	r3, #4
 800592a:	e04f      	b.n	80059cc <HAL_I2C_Init+0x1dc>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d111      	bne.n	8005958 <HAL_I2C_Init+0x168>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	1e58      	subs	r0, r3, #1
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6859      	ldr	r1, [r3, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	440b      	add	r3, r1
 8005942:	fbb0 f3f3 	udiv	r3, r0, r3
 8005946:	3301      	adds	r3, #1
 8005948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800594c:	2b00      	cmp	r3, #0
 800594e:	bf0c      	ite	eq
 8005950:	2301      	moveq	r3, #1
 8005952:	2300      	movne	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	e012      	b.n	800597e <HAL_I2C_Init+0x18e>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	1e58      	subs	r0, r3, #1
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6859      	ldr	r1, [r3, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	440b      	add	r3, r1
 8005966:	0099      	lsls	r1, r3, #2
 8005968:	440b      	add	r3, r1
 800596a:	fbb0 f3f3 	udiv	r3, r0, r3
 800596e:	3301      	adds	r3, #1
 8005970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005974:	2b00      	cmp	r3, #0
 8005976:	bf0c      	ite	eq
 8005978:	2301      	moveq	r3, #1
 800597a:	2300      	movne	r3, #0
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <HAL_I2C_Init+0x196>
 8005982:	2301      	movs	r3, #1
 8005984:	e022      	b.n	80059cc <HAL_I2C_Init+0x1dc>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10e      	bne.n	80059ac <HAL_I2C_Init+0x1bc>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1e58      	subs	r0, r3, #1
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6859      	ldr	r1, [r3, #4]
 8005996:	460b      	mov	r3, r1
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	440b      	add	r3, r1
 800599c:	fbb0 f3f3 	udiv	r3, r0, r3
 80059a0:	3301      	adds	r3, #1
 80059a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059aa:	e00f      	b.n	80059cc <HAL_I2C_Init+0x1dc>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	1e58      	subs	r0, r3, #1
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6859      	ldr	r1, [r3, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	0099      	lsls	r1, r3, #2
 80059bc:	440b      	add	r3, r1
 80059be:	fbb0 f3f3 	udiv	r3, r0, r3
 80059c2:	3301      	adds	r3, #1
 80059c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059cc:	6879      	ldr	r1, [r7, #4]
 80059ce:	6809      	ldr	r1, [r1, #0]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69da      	ldr	r2, [r3, #28]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	431a      	orrs	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80059fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6911      	ldr	r1, [r2, #16]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	68d2      	ldr	r2, [r2, #12]
 8005a06:	4311      	orrs	r1, r2
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6812      	ldr	r2, [r2, #0]
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695a      	ldr	r2, [r3, #20]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0201 	orr.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	000186a0 	.word	0x000186a0
 8005a68:	001e847f 	.word	0x001e847f
 8005a6c:	003d08ff 	.word	0x003d08ff
 8005a70:	431bde83 	.word	0x431bde83
 8005a74:	10624dd3 	.word	0x10624dd3

08005a78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af02      	add	r7, sp, #8
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	4608      	mov	r0, r1
 8005a82:	4611      	mov	r1, r2
 8005a84:	461a      	mov	r2, r3
 8005a86:	4603      	mov	r3, r0
 8005a88:	817b      	strh	r3, [r7, #10]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	813b      	strh	r3, [r7, #8]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a92:	f7ff fa21 	bl	8004ed8 <HAL_GetTick>
 8005a96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b20      	cmp	r3, #32
 8005aa2:	f040 80d9 	bne.w	8005c58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	2319      	movs	r3, #25
 8005aac:	2201      	movs	r2, #1
 8005aae:	496d      	ldr	r1, [pc, #436]	; (8005c64 <HAL_I2C_Mem_Write+0x1ec>)
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f000 f971 	bl	8005d98 <I2C_WaitOnFlagUntilTimeout>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005abc:	2302      	movs	r3, #2
 8005abe:	e0cc      	b.n	8005c5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d101      	bne.n	8005ace <HAL_I2C_Mem_Write+0x56>
 8005aca:	2302      	movs	r3, #2
 8005acc:	e0c5      	b.n	8005c5a <HAL_I2C_Mem_Write+0x1e2>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d007      	beq.n	8005af4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0201 	orr.w	r2, r2, #1
 8005af2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2221      	movs	r2, #33	; 0x21
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2240      	movs	r2, #64	; 0x40
 8005b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6a3a      	ldr	r2, [r7, #32]
 8005b1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4a4d      	ldr	r2, [pc, #308]	; (8005c68 <HAL_I2C_Mem_Write+0x1f0>)
 8005b34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b36:	88f8      	ldrh	r0, [r7, #6]
 8005b38:	893a      	ldrh	r2, [r7, #8]
 8005b3a:	8979      	ldrh	r1, [r7, #10]
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	9301      	str	r3, [sp, #4]
 8005b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	4603      	mov	r3, r0
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 f890 	bl	8005c6c <I2C_RequestMemoryWrite>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d052      	beq.n	8005bf8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e081      	b.n	8005c5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f000 f9f2 	bl	8005f44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00d      	beq.n	8005b82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d107      	bne.n	8005b7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e06b      	b.n	8005c5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	781a      	ldrb	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	d11b      	bne.n	8005bf8 <HAL_I2C_Mem_Write+0x180>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d017      	beq.n	8005bf8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	781a      	ldrb	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be2:	3b01      	subs	r3, #1
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1aa      	bne.n	8005b56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 f9de 	bl	8005fc6 <I2C_WaitOnBTFFlagUntilTimeout>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00d      	beq.n	8005c2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c14:	2b04      	cmp	r3, #4
 8005c16:	d107      	bne.n	8005c28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e016      	b.n	8005c5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c54:	2300      	movs	r3, #0
 8005c56:	e000      	b.n	8005c5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005c58:	2302      	movs	r3, #2
  }
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	00100002 	.word	0x00100002
 8005c68:	ffff0000 	.word	0xffff0000

08005c6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	4608      	mov	r0, r1
 8005c76:	4611      	mov	r1, r2
 8005c78:	461a      	mov	r2, r3
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	817b      	strh	r3, [r7, #10]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	813b      	strh	r3, [r7, #8]
 8005c82:	4613      	mov	r3, r2
 8005c84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 f878 	bl	8005d98 <I2C_WaitOnFlagUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00d      	beq.n	8005cca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cbc:	d103      	bne.n	8005cc6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e05f      	b.n	8005d8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cca:	897b      	ldrh	r3, [r7, #10]
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	461a      	mov	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	6a3a      	ldr	r2, [r7, #32]
 8005cde:	492d      	ldr	r1, [pc, #180]	; (8005d94 <I2C_RequestMemoryWrite+0x128>)
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f8b0 	bl	8005e46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e04c      	b.n	8005d8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	617b      	str	r3, [r7, #20]
 8005d04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d08:	6a39      	ldr	r1, [r7, #32]
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 f91a 	bl	8005f44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00d      	beq.n	8005d32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d107      	bne.n	8005d2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e02b      	b.n	8005d8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d32:	88fb      	ldrh	r3, [r7, #6]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d105      	bne.n	8005d44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d38:	893b      	ldrh	r3, [r7, #8]
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	611a      	str	r2, [r3, #16]
 8005d42:	e021      	b.n	8005d88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d44:	893b      	ldrh	r3, [r7, #8]
 8005d46:	0a1b      	lsrs	r3, r3, #8
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d54:	6a39      	ldr	r1, [r7, #32]
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f000 f8f4 	bl	8005f44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00d      	beq.n	8005d7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d107      	bne.n	8005d7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e005      	b.n	8005d8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d7e:	893b      	ldrh	r3, [r7, #8]
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	00010002 	.word	0x00010002

08005d98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	603b      	str	r3, [r7, #0]
 8005da4:	4613      	mov	r3, r2
 8005da6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005da8:	e025      	b.n	8005df6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005db0:	d021      	beq.n	8005df6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005db2:	f7ff f891 	bl	8004ed8 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d302      	bcc.n	8005dc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d116      	bne.n	8005df6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	f043 0220 	orr.w	r2, r3, #32
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e023      	b.n	8005e3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	0c1b      	lsrs	r3, r3, #16
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d10d      	bne.n	8005e1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	43da      	mvns	r2, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	bf0c      	ite	eq
 8005e12:	2301      	moveq	r3, #1
 8005e14:	2300      	movne	r3, #0
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	461a      	mov	r2, r3
 8005e1a:	e00c      	b.n	8005e36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	43da      	mvns	r2, r3
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4013      	ands	r3, r2
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	bf0c      	ite	eq
 8005e2e:	2301      	moveq	r3, #1
 8005e30:	2300      	movne	r3, #0
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	461a      	mov	r2, r3
 8005e36:	79fb      	ldrb	r3, [r7, #7]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d0b6      	beq.n	8005daa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b084      	sub	sp, #16
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	60f8      	str	r0, [r7, #12]
 8005e4e:	60b9      	str	r1, [r7, #8]
 8005e50:	607a      	str	r2, [r7, #4]
 8005e52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e54:	e051      	b.n	8005efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e64:	d123      	bne.n	8005eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	f043 0204 	orr.w	r2, r3, #4
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e046      	b.n	8005f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eb4:	d021      	beq.n	8005efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eb6:	f7ff f80f 	bl	8004ed8 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d302      	bcc.n	8005ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d116      	bne.n	8005efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee6:	f043 0220 	orr.w	r2, r3, #32
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e020      	b.n	8005f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	0c1b      	lsrs	r3, r3, #16
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d10c      	bne.n	8005f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	43da      	mvns	r2, r3
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4013      	ands	r3, r2
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	bf14      	ite	ne
 8005f16:	2301      	movne	r3, #1
 8005f18:	2300      	moveq	r3, #0
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	e00b      	b.n	8005f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	43da      	mvns	r2, r3
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	bf14      	ite	ne
 8005f30:	2301      	movne	r3, #1
 8005f32:	2300      	moveq	r3, #0
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d18d      	bne.n	8005e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f50:	e02d      	b.n	8005fae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 f878 	bl	8006048 <I2C_IsAcknowledgeFailed>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e02d      	b.n	8005fbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f68:	d021      	beq.n	8005fae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f6a:	f7fe ffb5 	bl	8004ed8 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d302      	bcc.n	8005f80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d116      	bne.n	8005fae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	f043 0220 	orr.w	r2, r3, #32
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e007      	b.n	8005fbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb8:	2b80      	cmp	r3, #128	; 0x80
 8005fba:	d1ca      	bne.n	8005f52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fd2:	e02d      	b.n	8006030 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 f837 	bl	8006048 <I2C_IsAcknowledgeFailed>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e02d      	b.n	8006040 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fea:	d021      	beq.n	8006030 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fec:	f7fe ff74 	bl	8004ed8 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d302      	bcc.n	8006002 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d116      	bne.n	8006030 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2220      	movs	r2, #32
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	f043 0220 	orr.w	r2, r3, #32
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e007      	b.n	8006040 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b04      	cmp	r3, #4
 800603c:	d1ca      	bne.n	8005fd4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800605a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800605e:	d11b      	bne.n	8006098 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006068:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2220      	movs	r2, #32
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006084:	f043 0204 	orr.w	r2, r3, #4
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e000      	b.n	800609a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	bc80      	pop	{r7}
 80060a2:	4770      	bx	lr

080060a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e26c      	b.n	8006590 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 8087 	beq.w	80061d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80060c4:	4b92      	ldr	r3, [pc, #584]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f003 030c 	and.w	r3, r3, #12
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d00c      	beq.n	80060ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80060d0:	4b8f      	ldr	r3, [pc, #572]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f003 030c 	and.w	r3, r3, #12
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d112      	bne.n	8006102 <HAL_RCC_OscConfig+0x5e>
 80060dc:	4b8c      	ldr	r3, [pc, #560]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060e8:	d10b      	bne.n	8006102 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060ea:	4b89      	ldr	r3, [pc, #548]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d06c      	beq.n	80061d0 <HAL_RCC_OscConfig+0x12c>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d168      	bne.n	80061d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e246      	b.n	8006590 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800610a:	d106      	bne.n	800611a <HAL_RCC_OscConfig+0x76>
 800610c:	4b80      	ldr	r3, [pc, #512]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a7f      	ldr	r2, [pc, #508]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 8006112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	e02e      	b.n	8006178 <HAL_RCC_OscConfig+0xd4>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10c      	bne.n	800613c <HAL_RCC_OscConfig+0x98>
 8006122:	4b7b      	ldr	r3, [pc, #492]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a7a      	ldr	r2, [pc, #488]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 8006128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	4b78      	ldr	r3, [pc, #480]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a77      	ldr	r2, [pc, #476]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 8006134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006138:	6013      	str	r3, [r2, #0]
 800613a:	e01d      	b.n	8006178 <HAL_RCC_OscConfig+0xd4>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006144:	d10c      	bne.n	8006160 <HAL_RCC_OscConfig+0xbc>
 8006146:	4b72      	ldr	r3, [pc, #456]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a71      	ldr	r2, [pc, #452]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 800614c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006150:	6013      	str	r3, [r2, #0]
 8006152:	4b6f      	ldr	r3, [pc, #444]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a6e      	ldr	r2, [pc, #440]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 8006158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800615c:	6013      	str	r3, [r2, #0]
 800615e:	e00b      	b.n	8006178 <HAL_RCC_OscConfig+0xd4>
 8006160:	4b6b      	ldr	r3, [pc, #428]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a6a      	ldr	r2, [pc, #424]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 8006166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	4b68      	ldr	r3, [pc, #416]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a67      	ldr	r2, [pc, #412]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 8006172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006176:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d013      	beq.n	80061a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006180:	f7fe feaa 	bl	8004ed8 <HAL_GetTick>
 8006184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006188:	f7fe fea6 	bl	8004ed8 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b64      	cmp	r3, #100	; 0x64
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e1fa      	b.n	8006590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800619a:	4b5d      	ldr	r3, [pc, #372]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0f0      	beq.n	8006188 <HAL_RCC_OscConfig+0xe4>
 80061a6:	e014      	b.n	80061d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a8:	f7fe fe96 	bl	8004ed8 <HAL_GetTick>
 80061ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061ae:	e008      	b.n	80061c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061b0:	f7fe fe92 	bl	8004ed8 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b64      	cmp	r3, #100	; 0x64
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e1e6      	b.n	8006590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061c2:	4b53      	ldr	r3, [pc, #332]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1f0      	bne.n	80061b0 <HAL_RCC_OscConfig+0x10c>
 80061ce:	e000      	b.n	80061d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d063      	beq.n	80062a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061de:	4b4c      	ldr	r3, [pc, #304]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f003 030c 	and.w	r3, r3, #12
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00b      	beq.n	8006202 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80061ea:	4b49      	ldr	r3, [pc, #292]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f003 030c 	and.w	r3, r3, #12
 80061f2:	2b08      	cmp	r3, #8
 80061f4:	d11c      	bne.n	8006230 <HAL_RCC_OscConfig+0x18c>
 80061f6:	4b46      	ldr	r3, [pc, #280]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d116      	bne.n	8006230 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006202:	4b43      	ldr	r3, [pc, #268]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d005      	beq.n	800621a <HAL_RCC_OscConfig+0x176>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d001      	beq.n	800621a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e1ba      	b.n	8006590 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800621a:	4b3d      	ldr	r3, [pc, #244]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	4939      	ldr	r1, [pc, #228]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 800622a:	4313      	orrs	r3, r2
 800622c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800622e:	e03a      	b.n	80062a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d020      	beq.n	800627a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006238:	4b36      	ldr	r3, [pc, #216]	; (8006314 <HAL_RCC_OscConfig+0x270>)
 800623a:	2201      	movs	r2, #1
 800623c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800623e:	f7fe fe4b 	bl	8004ed8 <HAL_GetTick>
 8006242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006244:	e008      	b.n	8006258 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006246:	f7fe fe47 	bl	8004ed8 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d901      	bls.n	8006258 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e19b      	b.n	8006590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006258:	4b2d      	ldr	r3, [pc, #180]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0f0      	beq.n	8006246 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006264:	4b2a      	ldr	r3, [pc, #168]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	4927      	ldr	r1, [pc, #156]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 8006274:	4313      	orrs	r3, r2
 8006276:	600b      	str	r3, [r1, #0]
 8006278:	e015      	b.n	80062a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800627a:	4b26      	ldr	r3, [pc, #152]	; (8006314 <HAL_RCC_OscConfig+0x270>)
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006280:	f7fe fe2a 	bl	8004ed8 <HAL_GetTick>
 8006284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006286:	e008      	b.n	800629a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006288:	f7fe fe26 	bl	8004ed8 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b02      	cmp	r3, #2
 8006294:	d901      	bls.n	800629a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e17a      	b.n	8006590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800629a:	4b1d      	ldr	r3, [pc, #116]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1f0      	bne.n	8006288 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0308 	and.w	r3, r3, #8
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d03a      	beq.n	8006328 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d019      	beq.n	80062ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062ba:	4b17      	ldr	r3, [pc, #92]	; (8006318 <HAL_RCC_OscConfig+0x274>)
 80062bc:	2201      	movs	r2, #1
 80062be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062c0:	f7fe fe0a 	bl	8004ed8 <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062c8:	f7fe fe06 	bl	8004ed8 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e15a      	b.n	8006590 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062da:	4b0d      	ldr	r3, [pc, #52]	; (8006310 <HAL_RCC_OscConfig+0x26c>)
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0f0      	beq.n	80062c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80062e6:	2001      	movs	r0, #1
 80062e8:	f000 fad8 	bl	800689c <RCC_Delay>
 80062ec:	e01c      	b.n	8006328 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062ee:	4b0a      	ldr	r3, [pc, #40]	; (8006318 <HAL_RCC_OscConfig+0x274>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062f4:	f7fe fdf0 	bl	8004ed8 <HAL_GetTick>
 80062f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062fa:	e00f      	b.n	800631c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062fc:	f7fe fdec 	bl	8004ed8 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b02      	cmp	r3, #2
 8006308:	d908      	bls.n	800631c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e140      	b.n	8006590 <HAL_RCC_OscConfig+0x4ec>
 800630e:	bf00      	nop
 8006310:	40021000 	.word	0x40021000
 8006314:	42420000 	.word	0x42420000
 8006318:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800631c:	4b9e      	ldr	r3, [pc, #632]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e9      	bne.n	80062fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 80a6 	beq.w	8006482 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006336:	2300      	movs	r3, #0
 8006338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800633a:	4b97      	ldr	r3, [pc, #604]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10d      	bne.n	8006362 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006346:	4b94      	ldr	r3, [pc, #592]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	4a93      	ldr	r2, [pc, #588]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 800634c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006350:	61d3      	str	r3, [r2, #28]
 8006352:	4b91      	ldr	r3, [pc, #580]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800635a:	60bb      	str	r3, [r7, #8]
 800635c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800635e:	2301      	movs	r3, #1
 8006360:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006362:	4b8e      	ldr	r3, [pc, #568]	; (800659c <HAL_RCC_OscConfig+0x4f8>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636a:	2b00      	cmp	r3, #0
 800636c:	d118      	bne.n	80063a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800636e:	4b8b      	ldr	r3, [pc, #556]	; (800659c <HAL_RCC_OscConfig+0x4f8>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a8a      	ldr	r2, [pc, #552]	; (800659c <HAL_RCC_OscConfig+0x4f8>)
 8006374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800637a:	f7fe fdad 	bl	8004ed8 <HAL_GetTick>
 800637e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006380:	e008      	b.n	8006394 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006382:	f7fe fda9 	bl	8004ed8 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b64      	cmp	r3, #100	; 0x64
 800638e:	d901      	bls.n	8006394 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e0fd      	b.n	8006590 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006394:	4b81      	ldr	r3, [pc, #516]	; (800659c <HAL_RCC_OscConfig+0x4f8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639c:	2b00      	cmp	r3, #0
 800639e:	d0f0      	beq.n	8006382 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d106      	bne.n	80063b6 <HAL_RCC_OscConfig+0x312>
 80063a8:	4b7b      	ldr	r3, [pc, #492]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	4a7a      	ldr	r2, [pc, #488]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 80063ae:	f043 0301 	orr.w	r3, r3, #1
 80063b2:	6213      	str	r3, [r2, #32]
 80063b4:	e02d      	b.n	8006412 <HAL_RCC_OscConfig+0x36e>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10c      	bne.n	80063d8 <HAL_RCC_OscConfig+0x334>
 80063be:	4b76      	ldr	r3, [pc, #472]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	4a75      	ldr	r2, [pc, #468]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 80063c4:	f023 0301 	bic.w	r3, r3, #1
 80063c8:	6213      	str	r3, [r2, #32]
 80063ca:	4b73      	ldr	r3, [pc, #460]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	4a72      	ldr	r2, [pc, #456]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 80063d0:	f023 0304 	bic.w	r3, r3, #4
 80063d4:	6213      	str	r3, [r2, #32]
 80063d6:	e01c      	b.n	8006412 <HAL_RCC_OscConfig+0x36e>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	2b05      	cmp	r3, #5
 80063de:	d10c      	bne.n	80063fa <HAL_RCC_OscConfig+0x356>
 80063e0:	4b6d      	ldr	r3, [pc, #436]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	4a6c      	ldr	r2, [pc, #432]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 80063e6:	f043 0304 	orr.w	r3, r3, #4
 80063ea:	6213      	str	r3, [r2, #32]
 80063ec:	4b6a      	ldr	r3, [pc, #424]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	4a69      	ldr	r2, [pc, #420]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 80063f2:	f043 0301 	orr.w	r3, r3, #1
 80063f6:	6213      	str	r3, [r2, #32]
 80063f8:	e00b      	b.n	8006412 <HAL_RCC_OscConfig+0x36e>
 80063fa:	4b67      	ldr	r3, [pc, #412]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	4a66      	ldr	r2, [pc, #408]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 8006400:	f023 0301 	bic.w	r3, r3, #1
 8006404:	6213      	str	r3, [r2, #32]
 8006406:	4b64      	ldr	r3, [pc, #400]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	4a63      	ldr	r2, [pc, #396]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 800640c:	f023 0304 	bic.w	r3, r3, #4
 8006410:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d015      	beq.n	8006446 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800641a:	f7fe fd5d 	bl	8004ed8 <HAL_GetTick>
 800641e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006420:	e00a      	b.n	8006438 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006422:	f7fe fd59 	bl	8004ed8 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006430:	4293      	cmp	r3, r2
 8006432:	d901      	bls.n	8006438 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e0ab      	b.n	8006590 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006438:	4b57      	ldr	r3, [pc, #348]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d0ee      	beq.n	8006422 <HAL_RCC_OscConfig+0x37e>
 8006444:	e014      	b.n	8006470 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006446:	f7fe fd47 	bl	8004ed8 <HAL_GetTick>
 800644a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800644c:	e00a      	b.n	8006464 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800644e:	f7fe fd43 	bl	8004ed8 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	f241 3288 	movw	r2, #5000	; 0x1388
 800645c:	4293      	cmp	r3, r2
 800645e:	d901      	bls.n	8006464 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e095      	b.n	8006590 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006464:	4b4c      	ldr	r3, [pc, #304]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1ee      	bne.n	800644e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006470:	7dfb      	ldrb	r3, [r7, #23]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d105      	bne.n	8006482 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006476:	4b48      	ldr	r3, [pc, #288]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	4a47      	ldr	r2, [pc, #284]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 800647c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006480:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 8081 	beq.w	800658e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800648c:	4b42      	ldr	r3, [pc, #264]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f003 030c 	and.w	r3, r3, #12
 8006494:	2b08      	cmp	r3, #8
 8006496:	d061      	beq.n	800655c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	69db      	ldr	r3, [r3, #28]
 800649c:	2b02      	cmp	r3, #2
 800649e:	d146      	bne.n	800652e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064a0:	4b3f      	ldr	r3, [pc, #252]	; (80065a0 <HAL_RCC_OscConfig+0x4fc>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064a6:	f7fe fd17 	bl	8004ed8 <HAL_GetTick>
 80064aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064ac:	e008      	b.n	80064c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064ae:	f7fe fd13 	bl	8004ed8 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d901      	bls.n	80064c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e067      	b.n	8006590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064c0:	4b35      	ldr	r3, [pc, #212]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1f0      	bne.n	80064ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064d4:	d108      	bne.n	80064e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80064d6:	4b30      	ldr	r3, [pc, #192]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	492d      	ldr	r1, [pc, #180]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064e8:	4b2b      	ldr	r3, [pc, #172]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a19      	ldr	r1, [r3, #32]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	430b      	orrs	r3, r1
 80064fa:	4927      	ldr	r1, [pc, #156]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006500:	4b27      	ldr	r3, [pc, #156]	; (80065a0 <HAL_RCC_OscConfig+0x4fc>)
 8006502:	2201      	movs	r2, #1
 8006504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006506:	f7fe fce7 	bl	8004ed8 <HAL_GetTick>
 800650a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800650c:	e008      	b.n	8006520 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800650e:	f7fe fce3 	bl	8004ed8 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	2b02      	cmp	r3, #2
 800651a:	d901      	bls.n	8006520 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e037      	b.n	8006590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006520:	4b1d      	ldr	r3, [pc, #116]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d0f0      	beq.n	800650e <HAL_RCC_OscConfig+0x46a>
 800652c:	e02f      	b.n	800658e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800652e:	4b1c      	ldr	r3, [pc, #112]	; (80065a0 <HAL_RCC_OscConfig+0x4fc>)
 8006530:	2200      	movs	r2, #0
 8006532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006534:	f7fe fcd0 	bl	8004ed8 <HAL_GetTick>
 8006538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800653a:	e008      	b.n	800654e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800653c:	f7fe fccc 	bl	8004ed8 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d901      	bls.n	800654e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e020      	b.n	8006590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800654e:	4b12      	ldr	r3, [pc, #72]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1f0      	bne.n	800653c <HAL_RCC_OscConfig+0x498>
 800655a:	e018      	b.n	800658e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e013      	b.n	8006590 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006568:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <HAL_RCC_OscConfig+0x4f4>)
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	429a      	cmp	r2, r3
 800657a:	d106      	bne.n	800658a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006586:	429a      	cmp	r2, r3
 8006588:	d001      	beq.n	800658e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e000      	b.n	8006590 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3718      	adds	r7, #24
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	40021000 	.word	0x40021000
 800659c:	40007000 	.word	0x40007000
 80065a0:	42420060 	.word	0x42420060

080065a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e0d0      	b.n	800675a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065b8:	4b6a      	ldr	r3, [pc, #424]	; (8006764 <HAL_RCC_ClockConfig+0x1c0>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d910      	bls.n	80065e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065c6:	4b67      	ldr	r3, [pc, #412]	; (8006764 <HAL_RCC_ClockConfig+0x1c0>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f023 0207 	bic.w	r2, r3, #7
 80065ce:	4965      	ldr	r1, [pc, #404]	; (8006764 <HAL_RCC_ClockConfig+0x1c0>)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065d6:	4b63      	ldr	r3, [pc, #396]	; (8006764 <HAL_RCC_ClockConfig+0x1c0>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0307 	and.w	r3, r3, #7
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d001      	beq.n	80065e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e0b8      	b.n	800675a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d020      	beq.n	8006636 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d005      	beq.n	800660c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006600:	4b59      	ldr	r3, [pc, #356]	; (8006768 <HAL_RCC_ClockConfig+0x1c4>)
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	4a58      	ldr	r2, [pc, #352]	; (8006768 <HAL_RCC_ClockConfig+0x1c4>)
 8006606:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800660a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0308 	and.w	r3, r3, #8
 8006614:	2b00      	cmp	r3, #0
 8006616:	d005      	beq.n	8006624 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006618:	4b53      	ldr	r3, [pc, #332]	; (8006768 <HAL_RCC_ClockConfig+0x1c4>)
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	4a52      	ldr	r2, [pc, #328]	; (8006768 <HAL_RCC_ClockConfig+0x1c4>)
 800661e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006622:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006624:	4b50      	ldr	r3, [pc, #320]	; (8006768 <HAL_RCC_ClockConfig+0x1c4>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	494d      	ldr	r1, [pc, #308]	; (8006768 <HAL_RCC_ClockConfig+0x1c4>)
 8006632:	4313      	orrs	r3, r2
 8006634:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d040      	beq.n	80066c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d107      	bne.n	800665a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800664a:	4b47      	ldr	r3, [pc, #284]	; (8006768 <HAL_RCC_ClockConfig+0x1c4>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d115      	bne.n	8006682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e07f      	b.n	800675a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	2b02      	cmp	r3, #2
 8006660:	d107      	bne.n	8006672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006662:	4b41      	ldr	r3, [pc, #260]	; (8006768 <HAL_RCC_ClockConfig+0x1c4>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d109      	bne.n	8006682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e073      	b.n	800675a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006672:	4b3d      	ldr	r3, [pc, #244]	; (8006768 <HAL_RCC_ClockConfig+0x1c4>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e06b      	b.n	800675a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006682:	4b39      	ldr	r3, [pc, #228]	; (8006768 <HAL_RCC_ClockConfig+0x1c4>)
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f023 0203 	bic.w	r2, r3, #3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	4936      	ldr	r1, [pc, #216]	; (8006768 <HAL_RCC_ClockConfig+0x1c4>)
 8006690:	4313      	orrs	r3, r2
 8006692:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006694:	f7fe fc20 	bl	8004ed8 <HAL_GetTick>
 8006698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800669a:	e00a      	b.n	80066b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800669c:	f7fe fc1c 	bl	8004ed8 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e053      	b.n	800675a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066b2:	4b2d      	ldr	r3, [pc, #180]	; (8006768 <HAL_RCC_ClockConfig+0x1c4>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f003 020c 	and.w	r2, r3, #12
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d1eb      	bne.n	800669c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066c4:	4b27      	ldr	r3, [pc, #156]	; (8006764 <HAL_RCC_ClockConfig+0x1c0>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0307 	and.w	r3, r3, #7
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d210      	bcs.n	80066f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066d2:	4b24      	ldr	r3, [pc, #144]	; (8006764 <HAL_RCC_ClockConfig+0x1c0>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f023 0207 	bic.w	r2, r3, #7
 80066da:	4922      	ldr	r1, [pc, #136]	; (8006764 <HAL_RCC_ClockConfig+0x1c0>)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	4313      	orrs	r3, r2
 80066e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066e2:	4b20      	ldr	r3, [pc, #128]	; (8006764 <HAL_RCC_ClockConfig+0x1c0>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d001      	beq.n	80066f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e032      	b.n	800675a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d008      	beq.n	8006712 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006700:	4b19      	ldr	r3, [pc, #100]	; (8006768 <HAL_RCC_ClockConfig+0x1c4>)
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	4916      	ldr	r1, [pc, #88]	; (8006768 <HAL_RCC_ClockConfig+0x1c4>)
 800670e:	4313      	orrs	r3, r2
 8006710:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0308 	and.w	r3, r3, #8
 800671a:	2b00      	cmp	r3, #0
 800671c:	d009      	beq.n	8006732 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800671e:	4b12      	ldr	r3, [pc, #72]	; (8006768 <HAL_RCC_ClockConfig+0x1c4>)
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	490e      	ldr	r1, [pc, #56]	; (8006768 <HAL_RCC_ClockConfig+0x1c4>)
 800672e:	4313      	orrs	r3, r2
 8006730:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006732:	f000 f821 	bl	8006778 <HAL_RCC_GetSysClockFreq>
 8006736:	4602      	mov	r2, r0
 8006738:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <HAL_RCC_ClockConfig+0x1c4>)
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	091b      	lsrs	r3, r3, #4
 800673e:	f003 030f 	and.w	r3, r3, #15
 8006742:	490a      	ldr	r1, [pc, #40]	; (800676c <HAL_RCC_ClockConfig+0x1c8>)
 8006744:	5ccb      	ldrb	r3, [r1, r3]
 8006746:	fa22 f303 	lsr.w	r3, r2, r3
 800674a:	4a09      	ldr	r2, [pc, #36]	; (8006770 <HAL_RCC_ClockConfig+0x1cc>)
 800674c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800674e:	4b09      	ldr	r3, [pc, #36]	; (8006774 <HAL_RCC_ClockConfig+0x1d0>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4618      	mov	r0, r3
 8006754:	f7fe fb7e 	bl	8004e54 <HAL_InitTick>

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	40022000 	.word	0x40022000
 8006768:	40021000 	.word	0x40021000
 800676c:	080098b4 	.word	0x080098b4
 8006770:	2000002c 	.word	0x2000002c
 8006774:	20000048 	.word	0x20000048

08006778 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006778:	b490      	push	{r4, r7}
 800677a:	b08a      	sub	sp, #40	; 0x28
 800677c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800677e:	4b2a      	ldr	r3, [pc, #168]	; (8006828 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006780:	1d3c      	adds	r4, r7, #4
 8006782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006784:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006788:	f240 2301 	movw	r3, #513	; 0x201
 800678c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	61fb      	str	r3, [r7, #28]
 8006792:	2300      	movs	r3, #0
 8006794:	61bb      	str	r3, [r7, #24]
 8006796:	2300      	movs	r3, #0
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
 800679a:	2300      	movs	r3, #0
 800679c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80067a2:	4b22      	ldr	r3, [pc, #136]	; (800682c <HAL_RCC_GetSysClockFreq+0xb4>)
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	f003 030c 	and.w	r3, r3, #12
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d002      	beq.n	80067b8 <HAL_RCC_GetSysClockFreq+0x40>
 80067b2:	2b08      	cmp	r3, #8
 80067b4:	d003      	beq.n	80067be <HAL_RCC_GetSysClockFreq+0x46>
 80067b6:	e02d      	b.n	8006814 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80067b8:	4b1d      	ldr	r3, [pc, #116]	; (8006830 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067ba:	623b      	str	r3, [r7, #32]
      break;
 80067bc:	e02d      	b.n	800681a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	0c9b      	lsrs	r3, r3, #18
 80067c2:	f003 030f 	and.w	r3, r3, #15
 80067c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80067ca:	4413      	add	r3, r2
 80067cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80067d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d013      	beq.n	8006804 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80067dc:	4b13      	ldr	r3, [pc, #76]	; (800682c <HAL_RCC_GetSysClockFreq+0xb4>)
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	0c5b      	lsrs	r3, r3, #17
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80067ea:	4413      	add	r3, r2
 80067ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80067f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	4a0e      	ldr	r2, [pc, #56]	; (8006830 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067f6:	fb02 f203 	mul.w	r2, r2, r3
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006800:	627b      	str	r3, [r7, #36]	; 0x24
 8006802:	e004      	b.n	800680e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	4a0b      	ldr	r2, [pc, #44]	; (8006834 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006808:	fb02 f303 	mul.w	r3, r2, r3
 800680c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	623b      	str	r3, [r7, #32]
      break;
 8006812:	e002      	b.n	800681a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006814:	4b06      	ldr	r3, [pc, #24]	; (8006830 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006816:	623b      	str	r3, [r7, #32]
      break;
 8006818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800681a:	6a3b      	ldr	r3, [r7, #32]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3728      	adds	r7, #40	; 0x28
 8006820:	46bd      	mov	sp, r7
 8006822:	bc90      	pop	{r4, r7}
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	08009138 	.word	0x08009138
 800682c:	40021000 	.word	0x40021000
 8006830:	007a1200 	.word	0x007a1200
 8006834:	003d0900 	.word	0x003d0900

08006838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006838:	b480      	push	{r7}
 800683a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800683c:	4b02      	ldr	r3, [pc, #8]	; (8006848 <HAL_RCC_GetHCLKFreq+0x10>)
 800683e:	681b      	ldr	r3, [r3, #0]
}
 8006840:	4618      	mov	r0, r3
 8006842:	46bd      	mov	sp, r7
 8006844:	bc80      	pop	{r7}
 8006846:	4770      	bx	lr
 8006848:	2000002c 	.word	0x2000002c

0800684c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006850:	f7ff fff2 	bl	8006838 <HAL_RCC_GetHCLKFreq>
 8006854:	4602      	mov	r2, r0
 8006856:	4b05      	ldr	r3, [pc, #20]	; (800686c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	0a1b      	lsrs	r3, r3, #8
 800685c:	f003 0307 	and.w	r3, r3, #7
 8006860:	4903      	ldr	r1, [pc, #12]	; (8006870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006862:	5ccb      	ldrb	r3, [r1, r3]
 8006864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006868:	4618      	mov	r0, r3
 800686a:	bd80      	pop	{r7, pc}
 800686c:	40021000 	.word	0x40021000
 8006870:	080098c4 	.word	0x080098c4

08006874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006878:	f7ff ffde 	bl	8006838 <HAL_RCC_GetHCLKFreq>
 800687c:	4602      	mov	r2, r0
 800687e:	4b05      	ldr	r3, [pc, #20]	; (8006894 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	0adb      	lsrs	r3, r3, #11
 8006884:	f003 0307 	and.w	r3, r3, #7
 8006888:	4903      	ldr	r1, [pc, #12]	; (8006898 <HAL_RCC_GetPCLK2Freq+0x24>)
 800688a:	5ccb      	ldrb	r3, [r1, r3]
 800688c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006890:	4618      	mov	r0, r3
 8006892:	bd80      	pop	{r7, pc}
 8006894:	40021000 	.word	0x40021000
 8006898:	080098c4 	.word	0x080098c4

0800689c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80068a4:	4b0a      	ldr	r3, [pc, #40]	; (80068d0 <RCC_Delay+0x34>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a0a      	ldr	r2, [pc, #40]	; (80068d4 <RCC_Delay+0x38>)
 80068aa:	fba2 2303 	umull	r2, r3, r2, r3
 80068ae:	0a5b      	lsrs	r3, r3, #9
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	fb02 f303 	mul.w	r3, r2, r3
 80068b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80068b8:	bf00      	nop
  }
  while (Delay --);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	1e5a      	subs	r2, r3, #1
 80068be:	60fa      	str	r2, [r7, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1f9      	bne.n	80068b8 <RCC_Delay+0x1c>
}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bc80      	pop	{r7}
 80068ce:	4770      	bx	lr
 80068d0:	2000002c 	.word	0x2000002c
 80068d4:	10624dd3 	.word	0x10624dd3

080068d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e076      	b.n	80069d8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d108      	bne.n	8006904 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068fa:	d009      	beq.n	8006910 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	61da      	str	r2, [r3, #28]
 8006902:	e005      	b.n	8006910 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d106      	bne.n	8006930 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7fc fb86 	bl	800303c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006946:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006958:	431a      	orrs	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	431a      	orrs	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006980:	431a      	orrs	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800698a:	431a      	orrs	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006994:	ea42 0103 	orr.w	r1, r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	0c1a      	lsrs	r2, r3, #16
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f002 0204 	and.w	r2, r2, #4
 80069b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	69da      	ldr	r2, [r3, #28]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b088      	sub	sp, #32
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	603b      	str	r3, [r7, #0]
 80069ec:	4613      	mov	r3, r2
 80069ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d101      	bne.n	8006a02 <HAL_SPI_Transmit+0x22>
 80069fe:	2302      	movs	r3, #2
 8006a00:	e126      	b.n	8006c50 <HAL_SPI_Transmit+0x270>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a0a:	f7fe fa65 	bl	8004ed8 <HAL_GetTick>
 8006a0e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006a10:	88fb      	ldrh	r3, [r7, #6]
 8006a12:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d002      	beq.n	8006a26 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006a20:	2302      	movs	r3, #2
 8006a22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a24:	e10b      	b.n	8006c3e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d002      	beq.n	8006a32 <HAL_SPI_Transmit+0x52>
 8006a2c:	88fb      	ldrh	r3, [r7, #6]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d102      	bne.n	8006a38 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a36:	e102      	b.n	8006c3e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2203      	movs	r2, #3
 8006a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	88fa      	ldrh	r2, [r7, #6]
 8006a50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	88fa      	ldrh	r2, [r7, #6]
 8006a56:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a7e:	d10f      	bne.n	8006aa0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a9e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aaa:	2b40      	cmp	r3, #64	; 0x40
 8006aac:	d007      	beq.n	8006abe <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006abc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ac6:	d14b      	bne.n	8006b60 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <HAL_SPI_Transmit+0xf6>
 8006ad0:	8afb      	ldrh	r3, [r7, #22]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d13e      	bne.n	8006b54 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ada:	881a      	ldrh	r2, [r3, #0]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae6:	1c9a      	adds	r2, r3, #2
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	3b01      	subs	r3, #1
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006afa:	e02b      	b.n	8006b54 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d112      	bne.n	8006b30 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0e:	881a      	ldrh	r2, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	1c9a      	adds	r2, r3, #2
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b2e:	e011      	b.n	8006b54 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b30:	f7fe f9d2 	bl	8004ed8 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d803      	bhi.n	8006b48 <HAL_SPI_Transmit+0x168>
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b46:	d102      	bne.n	8006b4e <HAL_SPI_Transmit+0x16e>
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d102      	bne.n	8006b54 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b52:	e074      	b.n	8006c3e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1ce      	bne.n	8006afc <HAL_SPI_Transmit+0x11c>
 8006b5e:	e04c      	b.n	8006bfa <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d002      	beq.n	8006b6e <HAL_SPI_Transmit+0x18e>
 8006b68:	8afb      	ldrh	r3, [r7, #22]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d140      	bne.n	8006bf0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	330c      	adds	r3, #12
 8006b78:	7812      	ldrb	r2, [r2, #0]
 8006b7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006b94:	e02c      	b.n	8006bf0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d113      	bne.n	8006bcc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	330c      	adds	r3, #12
 8006bae:	7812      	ldrb	r2, [r2, #0]
 8006bb0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb6:	1c5a      	adds	r2, r3, #1
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	86da      	strh	r2, [r3, #54]	; 0x36
 8006bca:	e011      	b.n	8006bf0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bcc:	f7fe f984 	bl	8004ed8 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d803      	bhi.n	8006be4 <HAL_SPI_Transmit+0x204>
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006be2:	d102      	bne.n	8006bea <HAL_SPI_Transmit+0x20a>
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d102      	bne.n	8006bf0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006bee:	e026      	b.n	8006c3e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1cd      	bne.n	8006b96 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bfa:	69ba      	ldr	r2, [r7, #24]
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f000 fbb8 	bl	8007374 <SPI_EndRxTxTransaction>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d002      	beq.n	8006c10 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10a      	bne.n	8006c2e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c18:	2300      	movs	r3, #0
 8006c1a:	613b      	str	r3, [r7, #16]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	613b      	str	r3, [r7, #16]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	613b      	str	r3, [r7, #16]
 8006c2c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d002      	beq.n	8006c3c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	77fb      	strb	r3, [r7, #31]
 8006c3a:	e000      	b.n	8006c3e <HAL_SPI_Transmit+0x25e>
  }

error:
 8006c3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3720      	adds	r7, #32
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b088      	sub	sp, #32
 8006c5c:	af02      	add	r7, sp, #8
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	603b      	str	r3, [r7, #0]
 8006c64:	4613      	mov	r3, r2
 8006c66:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c74:	d112      	bne.n	8006c9c <HAL_SPI_Receive+0x44>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10e      	bne.n	8006c9c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2204      	movs	r2, #4
 8006c82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006c86:	88fa      	ldrh	r2, [r7, #6]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	68b9      	ldr	r1, [r7, #8]
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 f8f1 	bl	8006e7a <HAL_SPI_TransmitReceive>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	e0ea      	b.n	8006e72 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d101      	bne.n	8006caa <HAL_SPI_Receive+0x52>
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	e0e3      	b.n	8006e72 <HAL_SPI_Receive+0x21a>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cb2:	f7fe f911 	bl	8004ed8 <HAL_GetTick>
 8006cb6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d002      	beq.n	8006cca <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006cc8:	e0ca      	b.n	8006e60 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d002      	beq.n	8006cd6 <HAL_SPI_Receive+0x7e>
 8006cd0:	88fb      	ldrh	r3, [r7, #6]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d102      	bne.n	8006cdc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006cda:	e0c1      	b.n	8006e60 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2204      	movs	r2, #4
 8006ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	88fa      	ldrh	r2, [r7, #6]
 8006cf4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	88fa      	ldrh	r2, [r7, #6]
 8006cfa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d22:	d10f      	bne.n	8006d44 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d32:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d42:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4e:	2b40      	cmp	r3, #64	; 0x40
 8006d50:	d007      	beq.n	8006d62 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d60:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d162      	bne.n	8006e30 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006d6a:	e02e      	b.n	8006dca <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d115      	bne.n	8006da6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f103 020c 	add.w	r2, r3, #12
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d86:	7812      	ldrb	r2, [r2, #0]
 8006d88:	b2d2      	uxtb	r2, r2
 8006d8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006da4:	e011      	b.n	8006dca <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006da6:	f7fe f897 	bl	8004ed8 <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d803      	bhi.n	8006dbe <HAL_SPI_Receive+0x166>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dbc:	d102      	bne.n	8006dc4 <HAL_SPI_Receive+0x16c>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d102      	bne.n	8006dca <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006dc8:	e04a      	b.n	8006e60 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1cb      	bne.n	8006d6c <HAL_SPI_Receive+0x114>
 8006dd4:	e031      	b.n	8006e3a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d113      	bne.n	8006e0c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dee:	b292      	uxth	r2, r2
 8006df0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df6:	1c9a      	adds	r2, r3, #2
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e0a:	e011      	b.n	8006e30 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e0c:	f7fe f864 	bl	8004ed8 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d803      	bhi.n	8006e24 <HAL_SPI_Receive+0x1cc>
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e22:	d102      	bne.n	8006e2a <HAL_SPI_Receive+0x1d2>
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d102      	bne.n	8006e30 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e2e:	e017      	b.n	8006e60 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1cd      	bne.n	8006dd6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f000 fa46 	bl	80072d0 <SPI_EndRxTransaction>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d002      	beq.n	8006e5e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	75fb      	strb	r3, [r7, #23]
 8006e5c:	e000      	b.n	8006e60 <HAL_SPI_Receive+0x208>
  }

error :
 8006e5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b08c      	sub	sp, #48	; 0x30
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	60f8      	str	r0, [r7, #12]
 8006e82:	60b9      	str	r1, [r7, #8]
 8006e84:	607a      	str	r2, [r7, #4]
 8006e86:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d101      	bne.n	8006ea0 <HAL_SPI_TransmitReceive+0x26>
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	e18a      	b.n	80071b6 <HAL_SPI_TransmitReceive+0x33c>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ea8:	f7fe f816 	bl	8004ed8 <HAL_GetTick>
 8006eac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006eb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006ebe:	887b      	ldrh	r3, [r7, #2]
 8006ec0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ec2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d00f      	beq.n	8006eea <HAL_SPI_TransmitReceive+0x70>
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ed0:	d107      	bne.n	8006ee2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d103      	bne.n	8006ee2 <HAL_SPI_TransmitReceive+0x68>
 8006eda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d003      	beq.n	8006eea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006ee8:	e15b      	b.n	80071a2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d005      	beq.n	8006efc <HAL_SPI_TransmitReceive+0x82>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d002      	beq.n	8006efc <HAL_SPI_TransmitReceive+0x82>
 8006ef6:	887b      	ldrh	r3, [r7, #2]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d103      	bne.n	8006f04 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006f02:	e14e      	b.n	80071a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	d003      	beq.n	8006f18 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2205      	movs	r2, #5
 8006f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	887a      	ldrh	r2, [r7, #2]
 8006f28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	887a      	ldrh	r2, [r7, #2]
 8006f2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	887a      	ldrh	r2, [r7, #2]
 8006f3a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	887a      	ldrh	r2, [r7, #2]
 8006f40:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f58:	2b40      	cmp	r3, #64	; 0x40
 8006f5a:	d007      	beq.n	8006f6c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f74:	d178      	bne.n	8007068 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <HAL_SPI_TransmitReceive+0x10a>
 8006f7e:	8b7b      	ldrh	r3, [r7, #26]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d166      	bne.n	8007052 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f88:	881a      	ldrh	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f94:	1c9a      	adds	r2, r3, #2
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fa8:	e053      	b.n	8007052 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f003 0302 	and.w	r3, r3, #2
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d11b      	bne.n	8006ff0 <HAL_SPI_TransmitReceive+0x176>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d016      	beq.n	8006ff0 <HAL_SPI_TransmitReceive+0x176>
 8006fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d113      	bne.n	8006ff0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fcc:	881a      	ldrh	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd8:	1c9a      	adds	r2, r3, #2
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d119      	bne.n	8007032 <HAL_SPI_TransmitReceive+0x1b8>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007002:	b29b      	uxth	r3, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	d014      	beq.n	8007032 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68da      	ldr	r2, [r3, #12]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007012:	b292      	uxth	r2, r2
 8007014:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701a:	1c9a      	adds	r2, r3, #2
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007024:	b29b      	uxth	r3, r3
 8007026:	3b01      	subs	r3, #1
 8007028:	b29a      	uxth	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800702e:	2301      	movs	r3, #1
 8007030:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007032:	f7fd ff51 	bl	8004ed8 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800703e:	429a      	cmp	r2, r3
 8007040:	d807      	bhi.n	8007052 <HAL_SPI_TransmitReceive+0x1d8>
 8007042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007048:	d003      	beq.n	8007052 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007050:	e0a7      	b.n	80071a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007056:	b29b      	uxth	r3, r3
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1a6      	bne.n	8006faa <HAL_SPI_TransmitReceive+0x130>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007060:	b29b      	uxth	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1a1      	bne.n	8006faa <HAL_SPI_TransmitReceive+0x130>
 8007066:	e07c      	b.n	8007162 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <HAL_SPI_TransmitReceive+0x1fc>
 8007070:	8b7b      	ldrh	r3, [r7, #26]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d16b      	bne.n	800714e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	330c      	adds	r3, #12
 8007080:	7812      	ldrb	r2, [r2, #0]
 8007082:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007092:	b29b      	uxth	r3, r3
 8007094:	3b01      	subs	r3, #1
 8007096:	b29a      	uxth	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800709c:	e057      	b.n	800714e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d11c      	bne.n	80070e6 <HAL_SPI_TransmitReceive+0x26c>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d017      	beq.n	80070e6 <HAL_SPI_TransmitReceive+0x26c>
 80070b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d114      	bne.n	80070e6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	330c      	adds	r3, #12
 80070c6:	7812      	ldrb	r2, [r2, #0]
 80070c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ce:	1c5a      	adds	r2, r3, #1
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070d8:	b29b      	uxth	r3, r3
 80070da:	3b01      	subs	r3, #1
 80070dc:	b29a      	uxth	r2, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f003 0301 	and.w	r3, r3, #1
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d119      	bne.n	8007128 <HAL_SPI_TransmitReceive+0x2ae>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d014      	beq.n	8007128 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68da      	ldr	r2, [r3, #12]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007108:	b2d2      	uxtb	r2, r2
 800710a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800711a:	b29b      	uxth	r3, r3
 800711c:	3b01      	subs	r3, #1
 800711e:	b29a      	uxth	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007124:	2301      	movs	r3, #1
 8007126:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007128:	f7fd fed6 	bl	8004ed8 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007134:	429a      	cmp	r2, r3
 8007136:	d803      	bhi.n	8007140 <HAL_SPI_TransmitReceive+0x2c6>
 8007138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800713e:	d102      	bne.n	8007146 <HAL_SPI_TransmitReceive+0x2cc>
 8007140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007142:	2b00      	cmp	r3, #0
 8007144:	d103      	bne.n	800714e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800714c:	e029      	b.n	80071a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007152:	b29b      	uxth	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1a2      	bne.n	800709e <HAL_SPI_TransmitReceive+0x224>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800715c:	b29b      	uxth	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d19d      	bne.n	800709e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007164:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f000 f904 	bl	8007374 <SPI_EndRxTxTransaction>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d006      	beq.n	8007180 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2220      	movs	r2, #32
 800717c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800717e:	e010      	b.n	80071a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10b      	bne.n	80071a0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007188:	2300      	movs	r3, #0
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	617b      	str	r3, [r7, #20]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	617b      	str	r3, [r7, #20]
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	e000      	b.n	80071a2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80071a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80071b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3730      	adds	r7, #48	; 0x30
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
	...

080071c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	603b      	str	r3, [r7, #0]
 80071cc:	4613      	mov	r3, r2
 80071ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071d0:	f7fd fe82 	bl	8004ed8 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d8:	1a9b      	subs	r3, r3, r2
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	4413      	add	r3, r2
 80071de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071e0:	f7fd fe7a 	bl	8004ed8 <HAL_GetTick>
 80071e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071e6:	4b39      	ldr	r3, [pc, #228]	; (80072cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	015b      	lsls	r3, r3, #5
 80071ec:	0d1b      	lsrs	r3, r3, #20
 80071ee:	69fa      	ldr	r2, [r7, #28]
 80071f0:	fb02 f303 	mul.w	r3, r2, r3
 80071f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071f6:	e054      	b.n	80072a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071fe:	d050      	beq.n	80072a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007200:	f7fd fe6a 	bl	8004ed8 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	69fa      	ldr	r2, [r7, #28]
 800720c:	429a      	cmp	r2, r3
 800720e:	d902      	bls.n	8007216 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d13d      	bne.n	8007292 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007224:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800722e:	d111      	bne.n	8007254 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007238:	d004      	beq.n	8007244 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007242:	d107      	bne.n	8007254 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007252:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800725c:	d10f      	bne.n	800727e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800727c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e017      	b.n	80072c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	3b01      	subs	r3, #1
 80072a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	4013      	ands	r3, r2
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	bf0c      	ite	eq
 80072b2:	2301      	moveq	r3, #1
 80072b4:	2300      	movne	r3, #0
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	461a      	mov	r2, r3
 80072ba:	79fb      	ldrb	r3, [r7, #7]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d19b      	bne.n	80071f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3720      	adds	r7, #32
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	2000002c 	.word	0x2000002c

080072d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af02      	add	r7, sp, #8
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072e4:	d111      	bne.n	800730a <SPI_EndRxTransaction+0x3a>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072ee:	d004      	beq.n	80072fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072f8:	d107      	bne.n	800730a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007308:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007312:	d117      	bne.n	8007344 <SPI_EndRxTransaction+0x74>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800731c:	d112      	bne.n	8007344 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	2200      	movs	r2, #0
 8007326:	2101      	movs	r1, #1
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f7ff ff49 	bl	80071c0 <SPI_WaitFlagStateUntilTimeout>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d01a      	beq.n	800736a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007338:	f043 0220 	orr.w	r2, r3, #32
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e013      	b.n	800736c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2200      	movs	r2, #0
 800734c:	2180      	movs	r1, #128	; 0x80
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f7ff ff36 	bl	80071c0 <SPI_WaitFlagStateUntilTimeout>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d007      	beq.n	800736a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735e:	f043 0220 	orr.w	r2, r3, #32
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e000      	b.n	800736c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af02      	add	r7, sp, #8
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2200      	movs	r2, #0
 8007388:	2180      	movs	r1, #128	; 0x80
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f7ff ff18 	bl	80071c0 <SPI_WaitFlagStateUntilTimeout>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d007      	beq.n	80073a6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800739a:	f043 0220 	orr.w	r2, r3, #32
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e000      	b.n	80073a8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e041      	b.n	8007446 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d106      	bne.n	80073dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7fb fe7a 	bl	80030d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2202      	movs	r2, #2
 80073e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3304      	adds	r3, #4
 80073ec:	4619      	mov	r1, r3
 80073ee:	4610      	mov	r0, r2
 80073f0:	f000 faa8 	bl	8007944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
	...

08007450 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b01      	cmp	r3, #1
 8007462:	d001      	beq.n	8007468 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e03a      	b.n	80074de <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2202      	movs	r2, #2
 800746c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f042 0201 	orr.w	r2, r2, #1
 800747e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a18      	ldr	r2, [pc, #96]	; (80074e8 <HAL_TIM_Base_Start_IT+0x98>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d00e      	beq.n	80074a8 <HAL_TIM_Base_Start_IT+0x58>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007492:	d009      	beq.n	80074a8 <HAL_TIM_Base_Start_IT+0x58>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a14      	ldr	r2, [pc, #80]	; (80074ec <HAL_TIM_Base_Start_IT+0x9c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d004      	beq.n	80074a8 <HAL_TIM_Base_Start_IT+0x58>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a13      	ldr	r2, [pc, #76]	; (80074f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d111      	bne.n	80074cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f003 0307 	and.w	r3, r3, #7
 80074b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2b06      	cmp	r3, #6
 80074b8:	d010      	beq.n	80074dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f042 0201 	orr.w	r2, r2, #1
 80074c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ca:	e007      	b.n	80074dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 0201 	orr.w	r2, r2, #1
 80074da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3714      	adds	r7, #20
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bc80      	pop	{r7}
 80074e6:	4770      	bx	lr
 80074e8:	40012c00 	.word	0x40012c00
 80074ec:	40000400 	.word	0x40000400
 80074f0:	40000800 	.word	0x40000800

080074f4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68da      	ldr	r2, [r3, #12]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0201 	bic.w	r2, r2, #1
 800750a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6a1a      	ldr	r2, [r3, #32]
 8007512:	f241 1311 	movw	r3, #4369	; 0x1111
 8007516:	4013      	ands	r3, r2
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10f      	bne.n	800753c <HAL_TIM_Base_Stop_IT+0x48>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6a1a      	ldr	r2, [r3, #32]
 8007522:	f240 4344 	movw	r3, #1092	; 0x444
 8007526:	4013      	ands	r3, r2
 8007528:	2b00      	cmp	r3, #0
 800752a:	d107      	bne.n	800753c <HAL_TIM_Base_Stop_IT+0x48>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f022 0201 	bic.w	r2, r2, #1
 800753a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	bc80      	pop	{r7}
 800754e:	4770      	bx	lr

08007550 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	f003 0302 	and.w	r3, r3, #2
 8007562:	2b02      	cmp	r3, #2
 8007564:	d122      	bne.n	80075ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b02      	cmp	r3, #2
 8007572:	d11b      	bne.n	80075ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f06f 0202 	mvn.w	r2, #2
 800757c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	f003 0303 	and.w	r3, r3, #3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f9ba 	bl	800790c <HAL_TIM_IC_CaptureCallback>
 8007598:	e005      	b.n	80075a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f9ad 	bl	80078fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 f9bc 	bl	800791e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	f003 0304 	and.w	r3, r3, #4
 80075b6:	2b04      	cmp	r3, #4
 80075b8:	d122      	bne.n	8007600 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f003 0304 	and.w	r3, r3, #4
 80075c4:	2b04      	cmp	r3, #4
 80075c6:	d11b      	bne.n	8007600 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f06f 0204 	mvn.w	r2, #4
 80075d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2202      	movs	r2, #2
 80075d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f990 	bl	800790c <HAL_TIM_IC_CaptureCallback>
 80075ec:	e005      	b.n	80075fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f983 	bl	80078fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f992 	bl	800791e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	f003 0308 	and.w	r3, r3, #8
 800760a:	2b08      	cmp	r3, #8
 800760c:	d122      	bne.n	8007654 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f003 0308 	and.w	r3, r3, #8
 8007618:	2b08      	cmp	r3, #8
 800761a:	d11b      	bne.n	8007654 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f06f 0208 	mvn.w	r2, #8
 8007624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2204      	movs	r2, #4
 800762a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	f003 0303 	and.w	r3, r3, #3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f966 	bl	800790c <HAL_TIM_IC_CaptureCallback>
 8007640:	e005      	b.n	800764e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f959 	bl	80078fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f968 	bl	800791e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	f003 0310 	and.w	r3, r3, #16
 800765e:	2b10      	cmp	r3, #16
 8007660:	d122      	bne.n	80076a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f003 0310 	and.w	r3, r3, #16
 800766c:	2b10      	cmp	r3, #16
 800766e:	d11b      	bne.n	80076a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f06f 0210 	mvn.w	r2, #16
 8007678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2208      	movs	r2, #8
 800767e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	69db      	ldr	r3, [r3, #28]
 8007686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f93c 	bl	800790c <HAL_TIM_IC_CaptureCallback>
 8007694:	e005      	b.n	80076a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f92f 	bl	80078fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f93e 	bl	800791e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d10e      	bne.n	80076d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d107      	bne.n	80076d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f06f 0201 	mvn.w	r2, #1
 80076cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f90a 	bl	80078e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076de:	2b80      	cmp	r3, #128	; 0x80
 80076e0:	d10e      	bne.n	8007700 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ec:	2b80      	cmp	r3, #128	; 0x80
 80076ee:	d107      	bne.n	8007700 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fa81 	bl	8007c02 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770a:	2b40      	cmp	r3, #64	; 0x40
 800770c:	d10e      	bne.n	800772c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007718:	2b40      	cmp	r3, #64	; 0x40
 800771a:	d107      	bne.n	800772c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f902 	bl	8007930 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	f003 0320 	and.w	r3, r3, #32
 8007736:	2b20      	cmp	r3, #32
 8007738:	d10e      	bne.n	8007758 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	f003 0320 	and.w	r3, r3, #32
 8007744:	2b20      	cmp	r3, #32
 8007746:	d107      	bne.n	8007758 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f06f 0220 	mvn.w	r2, #32
 8007750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fa4c 	bl	8007bf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007758:	bf00      	nop
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007770:	2b01      	cmp	r3, #1
 8007772:	d101      	bne.n	8007778 <HAL_TIM_ConfigClockSource+0x18>
 8007774:	2302      	movs	r3, #2
 8007776:	e0b3      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x180>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2202      	movs	r2, #2
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007796:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800779e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077b0:	d03e      	beq.n	8007830 <HAL_TIM_ConfigClockSource+0xd0>
 80077b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077b6:	f200 8087 	bhi.w	80078c8 <HAL_TIM_ConfigClockSource+0x168>
 80077ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077be:	f000 8085 	beq.w	80078cc <HAL_TIM_ConfigClockSource+0x16c>
 80077c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c6:	d87f      	bhi.n	80078c8 <HAL_TIM_ConfigClockSource+0x168>
 80077c8:	2b70      	cmp	r3, #112	; 0x70
 80077ca:	d01a      	beq.n	8007802 <HAL_TIM_ConfigClockSource+0xa2>
 80077cc:	2b70      	cmp	r3, #112	; 0x70
 80077ce:	d87b      	bhi.n	80078c8 <HAL_TIM_ConfigClockSource+0x168>
 80077d0:	2b60      	cmp	r3, #96	; 0x60
 80077d2:	d050      	beq.n	8007876 <HAL_TIM_ConfigClockSource+0x116>
 80077d4:	2b60      	cmp	r3, #96	; 0x60
 80077d6:	d877      	bhi.n	80078c8 <HAL_TIM_ConfigClockSource+0x168>
 80077d8:	2b50      	cmp	r3, #80	; 0x50
 80077da:	d03c      	beq.n	8007856 <HAL_TIM_ConfigClockSource+0xf6>
 80077dc:	2b50      	cmp	r3, #80	; 0x50
 80077de:	d873      	bhi.n	80078c8 <HAL_TIM_ConfigClockSource+0x168>
 80077e0:	2b40      	cmp	r3, #64	; 0x40
 80077e2:	d058      	beq.n	8007896 <HAL_TIM_ConfigClockSource+0x136>
 80077e4:	2b40      	cmp	r3, #64	; 0x40
 80077e6:	d86f      	bhi.n	80078c8 <HAL_TIM_ConfigClockSource+0x168>
 80077e8:	2b30      	cmp	r3, #48	; 0x30
 80077ea:	d064      	beq.n	80078b6 <HAL_TIM_ConfigClockSource+0x156>
 80077ec:	2b30      	cmp	r3, #48	; 0x30
 80077ee:	d86b      	bhi.n	80078c8 <HAL_TIM_ConfigClockSource+0x168>
 80077f0:	2b20      	cmp	r3, #32
 80077f2:	d060      	beq.n	80078b6 <HAL_TIM_ConfigClockSource+0x156>
 80077f4:	2b20      	cmp	r3, #32
 80077f6:	d867      	bhi.n	80078c8 <HAL_TIM_ConfigClockSource+0x168>
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d05c      	beq.n	80078b6 <HAL_TIM_ConfigClockSource+0x156>
 80077fc:	2b10      	cmp	r3, #16
 80077fe:	d05a      	beq.n	80078b6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007800:	e062      	b.n	80078c8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6818      	ldr	r0, [r3, #0]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	6899      	ldr	r1, [r3, #8]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	685a      	ldr	r2, [r3, #4]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f000 f970 	bl	8007af6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007824:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	609a      	str	r2, [r3, #8]
      break;
 800782e:	e04e      	b.n	80078ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6818      	ldr	r0, [r3, #0]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	6899      	ldr	r1, [r3, #8]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	f000 f959 	bl	8007af6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689a      	ldr	r2, [r3, #8]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007852:	609a      	str	r2, [r3, #8]
      break;
 8007854:	e03b      	b.n	80078ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6818      	ldr	r0, [r3, #0]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	6859      	ldr	r1, [r3, #4]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	461a      	mov	r2, r3
 8007864:	f000 f8d0 	bl	8007a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2150      	movs	r1, #80	; 0x50
 800786e:	4618      	mov	r0, r3
 8007870:	f000 f927 	bl	8007ac2 <TIM_ITRx_SetConfig>
      break;
 8007874:	e02b      	b.n	80078ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6818      	ldr	r0, [r3, #0]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	6859      	ldr	r1, [r3, #4]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	461a      	mov	r2, r3
 8007884:	f000 f8ee 	bl	8007a64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2160      	movs	r1, #96	; 0x60
 800788e:	4618      	mov	r0, r3
 8007890:	f000 f917 	bl	8007ac2 <TIM_ITRx_SetConfig>
      break;
 8007894:	e01b      	b.n	80078ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6818      	ldr	r0, [r3, #0]
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	6859      	ldr	r1, [r3, #4]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	461a      	mov	r2, r3
 80078a4:	f000 f8b0 	bl	8007a08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2140      	movs	r1, #64	; 0x40
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 f907 	bl	8007ac2 <TIM_ITRx_SetConfig>
      break;
 80078b4:	e00b      	b.n	80078ce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4619      	mov	r1, r3
 80078c0:	4610      	mov	r0, r2
 80078c2:	f000 f8fe 	bl	8007ac2 <TIM_ITRx_SetConfig>
        break;
 80078c6:	e002      	b.n	80078ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80078c8:	bf00      	nop
 80078ca:	e000      	b.n	80078ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80078cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bc80      	pop	{r7}
 80078f8:	4770      	bx	lr

080078fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007902:	bf00      	nop
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	bc80      	pop	{r7}
 800790a:	4770      	bx	lr

0800790c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	bc80      	pop	{r7}
 800791c:	4770      	bx	lr

0800791e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800791e:	b480      	push	{r7}
 8007920:	b083      	sub	sp, #12
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007926:	bf00      	nop
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	bc80      	pop	{r7}
 800792e:	4770      	bx	lr

08007930 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	bc80      	pop	{r7}
 8007940:	4770      	bx	lr
	...

08007944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a29      	ldr	r2, [pc, #164]	; (80079fc <TIM_Base_SetConfig+0xb8>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d00b      	beq.n	8007974 <TIM_Base_SetConfig+0x30>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007962:	d007      	beq.n	8007974 <TIM_Base_SetConfig+0x30>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a26      	ldr	r2, [pc, #152]	; (8007a00 <TIM_Base_SetConfig+0xbc>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d003      	beq.n	8007974 <TIM_Base_SetConfig+0x30>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a25      	ldr	r2, [pc, #148]	; (8007a04 <TIM_Base_SetConfig+0xc0>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d108      	bne.n	8007986 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800797a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	4313      	orrs	r3, r2
 8007984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a1c      	ldr	r2, [pc, #112]	; (80079fc <TIM_Base_SetConfig+0xb8>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d00b      	beq.n	80079a6 <TIM_Base_SetConfig+0x62>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007994:	d007      	beq.n	80079a6 <TIM_Base_SetConfig+0x62>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a19      	ldr	r2, [pc, #100]	; (8007a00 <TIM_Base_SetConfig+0xbc>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d003      	beq.n	80079a6 <TIM_Base_SetConfig+0x62>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a18      	ldr	r2, [pc, #96]	; (8007a04 <TIM_Base_SetConfig+0xc0>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d108      	bne.n	80079b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a07      	ldr	r2, [pc, #28]	; (80079fc <TIM_Base_SetConfig+0xb8>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d103      	bne.n	80079ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	691a      	ldr	r2, [r3, #16]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	615a      	str	r2, [r3, #20]
}
 80079f2:	bf00      	nop
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bc80      	pop	{r7}
 80079fa:	4770      	bx	lr
 80079fc:	40012c00 	.word	0x40012c00
 8007a00:	40000400 	.word	0x40000400
 8007a04:	40000800 	.word	0x40000800

08007a08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6a1b      	ldr	r3, [r3, #32]
 8007a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	f023 0201 	bic.w	r2, r3, #1
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	011b      	lsls	r3, r3, #4
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	f023 030a 	bic.w	r3, r3, #10
 8007a44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	621a      	str	r2, [r3, #32]
}
 8007a5a:	bf00      	nop
 8007a5c:	371c      	adds	r7, #28
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bc80      	pop	{r7}
 8007a62:	4770      	bx	lr

08007a64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b087      	sub	sp, #28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	f023 0210 	bic.w	r2, r3, #16
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	031b      	lsls	r3, r3, #12
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007aa0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	011b      	lsls	r3, r3, #4
 8007aa6:	693a      	ldr	r2, [r7, #16]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	621a      	str	r2, [r3, #32]
}
 8007ab8:	bf00      	nop
 8007aba:	371c      	adds	r7, #28
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bc80      	pop	{r7}
 8007ac0:	4770      	bx	lr

08007ac2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b085      	sub	sp, #20
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ad8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	f043 0307 	orr.w	r3, r3, #7
 8007ae4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	609a      	str	r2, [r3, #8]
}
 8007aec:	bf00      	nop
 8007aee:	3714      	adds	r7, #20
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bc80      	pop	{r7}
 8007af4:	4770      	bx	lr

08007af6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007af6:	b480      	push	{r7}
 8007af8:	b087      	sub	sp, #28
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	60f8      	str	r0, [r7, #12]
 8007afe:	60b9      	str	r1, [r7, #8]
 8007b00:	607a      	str	r2, [r7, #4]
 8007b02:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b10:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	021a      	lsls	r2, r3, #8
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	431a      	orrs	r2, r3
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	609a      	str	r2, [r3, #8]
}
 8007b2a:	bf00      	nop
 8007b2c:	371c      	adds	r7, #28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bc80      	pop	{r7}
 8007b32:	4770      	bx	lr

08007b34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d101      	bne.n	8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b48:	2302      	movs	r3, #2
 8007b4a:	e046      	b.n	8007bda <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2202      	movs	r2, #2
 8007b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a16      	ldr	r2, [pc, #88]	; (8007be4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d00e      	beq.n	8007bae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b98:	d009      	beq.n	8007bae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a12      	ldr	r2, [pc, #72]	; (8007be8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d004      	beq.n	8007bae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a10      	ldr	r2, [pc, #64]	; (8007bec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d10c      	bne.n	8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bc80      	pop	{r7}
 8007be2:	4770      	bx	lr
 8007be4:	40012c00 	.word	0x40012c00
 8007be8:	40000400 	.word	0x40000400
 8007bec:	40000800 	.word	0x40000800

08007bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bc80      	pop	{r7}
 8007c00:	4770      	bx	lr

08007c02 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b083      	sub	sp, #12
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c0a:	bf00      	nop
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bc80      	pop	{r7}
 8007c12:	4770      	bx	lr

08007c14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e03f      	b.n	8007ca6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d106      	bne.n	8007c40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7fb fa88 	bl	8003150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2224      	movs	r2, #36	; 0x24
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68da      	ldr	r2, [r3, #12]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 fbed 	bl	8008438 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	691a      	ldr	r2, [r3, #16]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	695a      	ldr	r2, [r3, #20]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68da      	ldr	r2, [r3, #12]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2220      	movs	r2, #32
 8007c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b085      	sub	sp, #20
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	60f8      	str	r0, [r7, #12]
 8007cb6:	60b9      	str	r1, [r7, #8]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b20      	cmp	r3, #32
 8007cc6:	d130      	bne.n	8007d2a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d002      	beq.n	8007cd4 <HAL_UART_Transmit_IT+0x26>
 8007cce:	88fb      	ldrh	r3, [r7, #6]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e029      	b.n	8007d2c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d101      	bne.n	8007ce6 <HAL_UART_Transmit_IT+0x38>
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	e022      	b.n	8007d2c <HAL_UART_Transmit_IT+0x7e>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	88fa      	ldrh	r2, [r7, #6]
 8007cf8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	88fa      	ldrh	r2, [r7, #6]
 8007cfe:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2221      	movs	r2, #33	; 0x21
 8007d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68da      	ldr	r2, [r3, #12]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d24:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	e000      	b.n	8007d2c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007d2a:	2302      	movs	r3, #2
  }
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3714      	adds	r7, #20
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bc80      	pop	{r7}
 8007d34:	4770      	bx	lr

08007d36 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b084      	sub	sp, #16
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	4613      	mov	r3, r2
 8007d42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b20      	cmp	r3, #32
 8007d4e:	d11d      	bne.n	8007d8c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d002      	beq.n	8007d5c <HAL_UART_Receive_IT+0x26>
 8007d56:	88fb      	ldrh	r3, [r7, #6]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e016      	b.n	8007d8e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d101      	bne.n	8007d6e <HAL_UART_Receive_IT+0x38>
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	e00f      	b.n	8007d8e <HAL_UART_Receive_IT+0x58>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007d7c:	88fb      	ldrh	r3, [r7, #6]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	68b9      	ldr	r1, [r7, #8]
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f000 f9cf 	bl	8008126 <UART_Start_Receive_IT>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	e000      	b.n	8007d8e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007d8c:	2302      	movs	r3, #2
  }
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
	...

08007d98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b08a      	sub	sp, #40	; 0x28
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	f003 030f 	and.w	r3, r3, #15
 8007dc6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10d      	bne.n	8007dea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	f003 0320 	and.w	r3, r3, #32
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d008      	beq.n	8007dea <HAL_UART_IRQHandler+0x52>
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	f003 0320 	and.w	r3, r3, #32
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fa7f 	bl	80082e6 <UART_Receive_IT>
      return;
 8007de8:	e17b      	b.n	80080e2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 80b1 	beq.w	8007f54 <HAL_UART_IRQHandler+0x1bc>
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	f003 0301 	and.w	r3, r3, #1
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d105      	bne.n	8007e08 <HAL_UART_IRQHandler+0x70>
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 80a6 	beq.w	8007f54 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00a      	beq.n	8007e28 <HAL_UART_IRQHandler+0x90>
 8007e12:	6a3b      	ldr	r3, [r7, #32]
 8007e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d005      	beq.n	8007e28 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e20:	f043 0201 	orr.w	r2, r3, #1
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	f003 0304 	and.w	r3, r3, #4
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00a      	beq.n	8007e48 <HAL_UART_IRQHandler+0xb0>
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d005      	beq.n	8007e48 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e40:	f043 0202 	orr.w	r2, r3, #2
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	f003 0302 	and.w	r3, r3, #2
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00a      	beq.n	8007e68 <HAL_UART_IRQHandler+0xd0>
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	f003 0301 	and.w	r3, r3, #1
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d005      	beq.n	8007e68 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e60:	f043 0204 	orr.w	r2, r3, #4
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	f003 0308 	and.w	r3, r3, #8
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00f      	beq.n	8007e92 <HAL_UART_IRQHandler+0xfa>
 8007e72:	6a3b      	ldr	r3, [r7, #32]
 8007e74:	f003 0320 	and.w	r3, r3, #32
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d104      	bne.n	8007e86 <HAL_UART_IRQHandler+0xee>
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d005      	beq.n	8007e92 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	f043 0208 	orr.w	r2, r3, #8
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f000 811e 	beq.w	80080d8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	f003 0320 	and.w	r3, r3, #32
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d007      	beq.n	8007eb6 <HAL_UART_IRQHandler+0x11e>
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	f003 0320 	and.w	r3, r3, #32
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fa18 	bl	80082e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	695b      	ldr	r3, [r3, #20]
 8007ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	bf14      	ite	ne
 8007ec4:	2301      	movne	r3, #1
 8007ec6:	2300      	moveq	r3, #0
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed0:	f003 0308 	and.w	r3, r3, #8
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d102      	bne.n	8007ede <HAL_UART_IRQHandler+0x146>
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d031      	beq.n	8007f42 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f95a 	bl	8008198 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d023      	beq.n	8007f3a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	695a      	ldr	r2, [r3, #20]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f00:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d013      	beq.n	8007f32 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0e:	4a76      	ldr	r2, [pc, #472]	; (80080e8 <HAL_UART_IRQHandler+0x350>)
 8007f10:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fd f954 	bl	80051c4 <HAL_DMA_Abort_IT>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d016      	beq.n	8007f50 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f30:	e00e      	b.n	8007f50 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f8e3 	bl	80080fe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f38:	e00a      	b.n	8007f50 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f8df 	bl	80080fe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f40:	e006      	b.n	8007f50 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f8db 	bl	80080fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007f4e:	e0c3      	b.n	80080d8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f50:	bf00      	nop
    return;
 8007f52:	e0c1      	b.n	80080d8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	f040 80a1 	bne.w	80080a0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	f003 0310 	and.w	r3, r3, #16
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f000 809b 	beq.w	80080a0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007f6a:	6a3b      	ldr	r3, [r7, #32]
 8007f6c:	f003 0310 	and.w	r3, r3, #16
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 8095 	beq.w	80080a0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f76:	2300      	movs	r3, #0
 8007f78:	60fb      	str	r3, [r7, #12]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	60fb      	str	r3, [r7, #12]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	60fb      	str	r3, [r7, #12]
 8007f8a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d04e      	beq.n	8008038 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007fa4:	8a3b      	ldrh	r3, [r7, #16]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f000 8098 	beq.w	80080dc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007fb0:	8a3a      	ldrh	r2, [r7, #16]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	f080 8092 	bcs.w	80080dc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	8a3a      	ldrh	r2, [r7, #16]
 8007fbc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	2b20      	cmp	r3, #32
 8007fc6:	d02b      	beq.n	8008020 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68da      	ldr	r2, [r3, #12]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fd6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	695a      	ldr	r2, [r3, #20]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f022 0201 	bic.w	r2, r2, #1
 8007fe6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	695a      	ldr	r2, [r3, #20]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ff6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68da      	ldr	r2, [r3, #12]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f022 0210 	bic.w	r2, r2, #16
 8008014:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801a:	4618      	mov	r0, r3
 800801c:	f7fd f897 	bl	800514e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008028:	b29b      	uxth	r3, r3
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	b29b      	uxth	r3, r3
 800802e:	4619      	mov	r1, r3
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f86d 	bl	8008110 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008036:	e051      	b.n	80080dc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008040:	b29b      	uxth	r3, r3
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800804a:	b29b      	uxth	r3, r3
 800804c:	2b00      	cmp	r3, #0
 800804e:	d047      	beq.n	80080e0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8008050:	8a7b      	ldrh	r3, [r7, #18]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d044      	beq.n	80080e0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68da      	ldr	r2, [r3, #12]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008064:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	695a      	ldr	r2, [r3, #20]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f022 0201 	bic.w	r2, r2, #1
 8008074:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2220      	movs	r2, #32
 800807a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68da      	ldr	r2, [r3, #12]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f022 0210 	bic.w	r2, r2, #16
 8008092:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008094:	8a7b      	ldrh	r3, [r7, #18]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f839 	bl	8008110 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800809e:	e01f      	b.n	80080e0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d008      	beq.n	80080bc <HAL_UART_IRQHandler+0x324>
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d003      	beq.n	80080bc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f8af 	bl	8008218 <UART_Transmit_IT>
    return;
 80080ba:	e012      	b.n	80080e2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00d      	beq.n	80080e2 <HAL_UART_IRQHandler+0x34a>
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d008      	beq.n	80080e2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f8f0 	bl	80082b6 <UART_EndTransmit_IT>
    return;
 80080d6:	e004      	b.n	80080e2 <HAL_UART_IRQHandler+0x34a>
    return;
 80080d8:	bf00      	nop
 80080da:	e002      	b.n	80080e2 <HAL_UART_IRQHandler+0x34a>
      return;
 80080dc:	bf00      	nop
 80080de:	e000      	b.n	80080e2 <HAL_UART_IRQHandler+0x34a>
      return;
 80080e0:	bf00      	nop
  }
}
 80080e2:	3728      	adds	r7, #40	; 0x28
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	080081f1 	.word	0x080081f1

080080ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bc80      	pop	{r7}
 80080fc:	4770      	bx	lr

080080fe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080fe:	b480      	push	{r7}
 8008100:	b083      	sub	sp, #12
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	bc80      	pop	{r7}
 800810e:	4770      	bx	lr

08008110 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	460b      	mov	r3, r1
 800811a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	bc80      	pop	{r7}
 8008124:	4770      	bx	lr

08008126 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008126:	b480      	push	{r7}
 8008128:	b085      	sub	sp, #20
 800812a:	af00      	add	r7, sp, #0
 800812c:	60f8      	str	r0, [r7, #12]
 800812e:	60b9      	str	r1, [r7, #8]
 8008130:	4613      	mov	r3, r2
 8008132:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	88fa      	ldrh	r2, [r7, #6]
 800813e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	88fa      	ldrh	r2, [r7, #6]
 8008144:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2222      	movs	r2, #34	; 0x22
 8008150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68da      	ldr	r2, [r3, #12]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800816a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	695a      	ldr	r2, [r3, #20]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f042 0201 	orr.w	r2, r2, #1
 800817a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f042 0220 	orr.w	r2, r2, #32
 800818a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	bc80      	pop	{r7}
 8008196:	4770      	bx	lr

08008198 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68da      	ldr	r2, [r3, #12]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80081ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	695a      	ldr	r2, [r3, #20]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0201 	bic.w	r2, r2, #1
 80081be:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d107      	bne.n	80081d8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68da      	ldr	r2, [r3, #12]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f022 0210 	bic.w	r2, r2, #16
 80081d6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2220      	movs	r2, #32
 80081dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bc80      	pop	{r7}
 80081ee:	4770      	bx	lr

080081f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f7ff ff77 	bl	80080fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008210:	bf00      	nop
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b21      	cmp	r3, #33	; 0x21
 800822a:	d13e      	bne.n	80082aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008234:	d114      	bne.n	8008260 <UART_Transmit_IT+0x48>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d110      	bne.n	8008260 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	461a      	mov	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008252:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a1b      	ldr	r3, [r3, #32]
 8008258:	1c9a      	adds	r2, r3, #2
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	621a      	str	r2, [r3, #32]
 800825e:	e008      	b.n	8008272 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a1b      	ldr	r3, [r3, #32]
 8008264:	1c59      	adds	r1, r3, #1
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	6211      	str	r1, [r2, #32]
 800826a:	781a      	ldrb	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008276:	b29b      	uxth	r3, r3
 8008278:	3b01      	subs	r3, #1
 800827a:	b29b      	uxth	r3, r3
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	4619      	mov	r1, r3
 8008280:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10f      	bne.n	80082a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68da      	ldr	r2, [r3, #12]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008294:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68da      	ldr	r2, [r3, #12]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082a6:	2300      	movs	r3, #0
 80082a8:	e000      	b.n	80082ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082aa:	2302      	movs	r3, #2
  }
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bc80      	pop	{r7}
 80082b4:	4770      	bx	lr

080082b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b082      	sub	sp, #8
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68da      	ldr	r2, [r3, #12]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2220      	movs	r2, #32
 80082d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7ff ff08 	bl	80080ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b086      	sub	sp, #24
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b22      	cmp	r3, #34	; 0x22
 80082f8:	f040 8099 	bne.w	800842e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008304:	d117      	bne.n	8008336 <UART_Receive_IT+0x50>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d113      	bne.n	8008336 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800830e:	2300      	movs	r3, #0
 8008310:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008316:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	b29b      	uxth	r3, r3
 8008320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008324:	b29a      	uxth	r2, r3
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832e:	1c9a      	adds	r2, r3, #2
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	629a      	str	r2, [r3, #40]	; 0x28
 8008334:	e026      	b.n	8008384 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800833c:	2300      	movs	r3, #0
 800833e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008348:	d007      	beq.n	800835a <UART_Receive_IT+0x74>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d10a      	bne.n	8008368 <UART_Receive_IT+0x82>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d106      	bne.n	8008368 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	b2da      	uxtb	r2, r3
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	701a      	strb	r2, [r3, #0]
 8008366:	e008      	b.n	800837a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	b2db      	uxtb	r3, r3
 8008370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008374:	b2da      	uxtb	r2, r3
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008388:	b29b      	uxth	r3, r3
 800838a:	3b01      	subs	r3, #1
 800838c:	b29b      	uxth	r3, r3
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	4619      	mov	r1, r3
 8008392:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008394:	2b00      	cmp	r3, #0
 8008396:	d148      	bne.n	800842a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68da      	ldr	r2, [r3, #12]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f022 0220 	bic.w	r2, r2, #32
 80083a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	695a      	ldr	r2, [r3, #20]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f022 0201 	bic.w	r2, r2, #1
 80083c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2220      	movs	r2, #32
 80083cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d123      	bne.n	8008420 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68da      	ldr	r2, [r3, #12]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f022 0210 	bic.w	r2, r2, #16
 80083ec:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 0310 	and.w	r3, r3, #16
 80083f8:	2b10      	cmp	r3, #16
 80083fa:	d10a      	bne.n	8008412 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083fc:	2300      	movs	r3, #0
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	60fb      	str	r3, [r7, #12]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7ff fe79 	bl	8008110 <HAL_UARTEx_RxEventCallback>
 800841e:	e002      	b.n	8008426 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7fa fd5b 	bl	8002edc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	e002      	b.n	8008430 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	e000      	b.n	8008430 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800842e:	2302      	movs	r3, #2
  }
}
 8008430:	4618      	mov	r0, r3
 8008432:	3718      	adds	r7, #24
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	68da      	ldr	r2, [r3, #12]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	430a      	orrs	r2, r1
 8008454:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	689a      	ldr	r2, [r3, #8]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	431a      	orrs	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	695b      	ldr	r3, [r3, #20]
 8008464:	4313      	orrs	r3, r2
 8008466:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008472:	f023 030c 	bic.w	r3, r3, #12
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	6812      	ldr	r2, [r2, #0]
 800847a:	68b9      	ldr	r1, [r7, #8]
 800847c:	430b      	orrs	r3, r1
 800847e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	699a      	ldr	r2, [r3, #24]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	430a      	orrs	r2, r1
 8008494:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a2c      	ldr	r2, [pc, #176]	; (800854c <UART_SetConfig+0x114>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d103      	bne.n	80084a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80084a0:	f7fe f9e8 	bl	8006874 <HAL_RCC_GetPCLK2Freq>
 80084a4:	60f8      	str	r0, [r7, #12]
 80084a6:	e002      	b.n	80084ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80084a8:	f7fe f9d0 	bl	800684c <HAL_RCC_GetPCLK1Freq>
 80084ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	4613      	mov	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4413      	add	r3, r2
 80084b6:	009a      	lsls	r2, r3, #2
 80084b8:	441a      	add	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c4:	4a22      	ldr	r2, [pc, #136]	; (8008550 <UART_SetConfig+0x118>)
 80084c6:	fba2 2303 	umull	r2, r3, r2, r3
 80084ca:	095b      	lsrs	r3, r3, #5
 80084cc:	0119      	lsls	r1, r3, #4
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	4613      	mov	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	009a      	lsls	r2, r3, #2
 80084d8:	441a      	add	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80084e4:	4b1a      	ldr	r3, [pc, #104]	; (8008550 <UART_SetConfig+0x118>)
 80084e6:	fba3 0302 	umull	r0, r3, r3, r2
 80084ea:	095b      	lsrs	r3, r3, #5
 80084ec:	2064      	movs	r0, #100	; 0x64
 80084ee:	fb00 f303 	mul.w	r3, r0, r3
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	011b      	lsls	r3, r3, #4
 80084f6:	3332      	adds	r3, #50	; 0x32
 80084f8:	4a15      	ldr	r2, [pc, #84]	; (8008550 <UART_SetConfig+0x118>)
 80084fa:	fba2 2303 	umull	r2, r3, r2, r3
 80084fe:	095b      	lsrs	r3, r3, #5
 8008500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008504:	4419      	add	r1, r3
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	4613      	mov	r3, r2
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	4413      	add	r3, r2
 800850e:	009a      	lsls	r2, r3, #2
 8008510:	441a      	add	r2, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	fbb2 f2f3 	udiv	r2, r2, r3
 800851c:	4b0c      	ldr	r3, [pc, #48]	; (8008550 <UART_SetConfig+0x118>)
 800851e:	fba3 0302 	umull	r0, r3, r3, r2
 8008522:	095b      	lsrs	r3, r3, #5
 8008524:	2064      	movs	r0, #100	; 0x64
 8008526:	fb00 f303 	mul.w	r3, r0, r3
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	011b      	lsls	r3, r3, #4
 800852e:	3332      	adds	r3, #50	; 0x32
 8008530:	4a07      	ldr	r2, [pc, #28]	; (8008550 <UART_SetConfig+0x118>)
 8008532:	fba2 2303 	umull	r2, r3, r2, r3
 8008536:	095b      	lsrs	r3, r3, #5
 8008538:	f003 020f 	and.w	r2, r3, #15
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	440a      	add	r2, r1
 8008542:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008544:	bf00      	nop
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	40013800 	.word	0x40013800
 8008550:	51eb851f 	.word	0x51eb851f

08008554 <__errno>:
 8008554:	4b01      	ldr	r3, [pc, #4]	; (800855c <__errno+0x8>)
 8008556:	6818      	ldr	r0, [r3, #0]
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	20000050 	.word	0x20000050

08008560 <__libc_init_array>:
 8008560:	b570      	push	{r4, r5, r6, lr}
 8008562:	2600      	movs	r6, #0
 8008564:	4d0c      	ldr	r5, [pc, #48]	; (8008598 <__libc_init_array+0x38>)
 8008566:	4c0d      	ldr	r4, [pc, #52]	; (800859c <__libc_init_array+0x3c>)
 8008568:	1b64      	subs	r4, r4, r5
 800856a:	10a4      	asrs	r4, r4, #2
 800856c:	42a6      	cmp	r6, r4
 800856e:	d109      	bne.n	8008584 <__libc_init_array+0x24>
 8008570:	f000 fcda 	bl	8008f28 <_init>
 8008574:	2600      	movs	r6, #0
 8008576:	4d0a      	ldr	r5, [pc, #40]	; (80085a0 <__libc_init_array+0x40>)
 8008578:	4c0a      	ldr	r4, [pc, #40]	; (80085a4 <__libc_init_array+0x44>)
 800857a:	1b64      	subs	r4, r4, r5
 800857c:	10a4      	asrs	r4, r4, #2
 800857e:	42a6      	cmp	r6, r4
 8008580:	d105      	bne.n	800858e <__libc_init_array+0x2e>
 8008582:	bd70      	pop	{r4, r5, r6, pc}
 8008584:	f855 3b04 	ldr.w	r3, [r5], #4
 8008588:	4798      	blx	r3
 800858a:	3601      	adds	r6, #1
 800858c:	e7ee      	b.n	800856c <__libc_init_array+0xc>
 800858e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008592:	4798      	blx	r3
 8008594:	3601      	adds	r6, #1
 8008596:	e7f2      	b.n	800857e <__libc_init_array+0x1e>
 8008598:	08009924 	.word	0x08009924
 800859c:	08009924 	.word	0x08009924
 80085a0:	08009924 	.word	0x08009924
 80085a4:	08009928 	.word	0x08009928

080085a8 <__itoa>:
 80085a8:	1e93      	subs	r3, r2, #2
 80085aa:	2b22      	cmp	r3, #34	; 0x22
 80085ac:	b510      	push	{r4, lr}
 80085ae:	460c      	mov	r4, r1
 80085b0:	d904      	bls.n	80085bc <__itoa+0x14>
 80085b2:	2300      	movs	r3, #0
 80085b4:	461c      	mov	r4, r3
 80085b6:	700b      	strb	r3, [r1, #0]
 80085b8:	4620      	mov	r0, r4
 80085ba:	bd10      	pop	{r4, pc}
 80085bc:	2a0a      	cmp	r2, #10
 80085be:	d109      	bne.n	80085d4 <__itoa+0x2c>
 80085c0:	2800      	cmp	r0, #0
 80085c2:	da07      	bge.n	80085d4 <__itoa+0x2c>
 80085c4:	232d      	movs	r3, #45	; 0x2d
 80085c6:	700b      	strb	r3, [r1, #0]
 80085c8:	2101      	movs	r1, #1
 80085ca:	4240      	negs	r0, r0
 80085cc:	4421      	add	r1, r4
 80085ce:	f000 f913 	bl	80087f8 <__utoa>
 80085d2:	e7f1      	b.n	80085b8 <__itoa+0x10>
 80085d4:	2100      	movs	r1, #0
 80085d6:	e7f9      	b.n	80085cc <__itoa+0x24>

080085d8 <itoa>:
 80085d8:	f7ff bfe6 	b.w	80085a8 <__itoa>

080085dc <memcpy>:
 80085dc:	440a      	add	r2, r1
 80085de:	4291      	cmp	r1, r2
 80085e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80085e4:	d100      	bne.n	80085e8 <memcpy+0xc>
 80085e6:	4770      	bx	lr
 80085e8:	b510      	push	{r4, lr}
 80085ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085ee:	4291      	cmp	r1, r2
 80085f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085f4:	d1f9      	bne.n	80085ea <memcpy+0xe>
 80085f6:	bd10      	pop	{r4, pc}

080085f8 <memset>:
 80085f8:	4603      	mov	r3, r0
 80085fa:	4402      	add	r2, r0
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d100      	bne.n	8008602 <memset+0xa>
 8008600:	4770      	bx	lr
 8008602:	f803 1b01 	strb.w	r1, [r3], #1
 8008606:	e7f9      	b.n	80085fc <memset+0x4>

08008608 <_free_r>:
 8008608:	b538      	push	{r3, r4, r5, lr}
 800860a:	4605      	mov	r5, r0
 800860c:	2900      	cmp	r1, #0
 800860e:	d043      	beq.n	8008698 <_free_r+0x90>
 8008610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008614:	1f0c      	subs	r4, r1, #4
 8008616:	2b00      	cmp	r3, #0
 8008618:	bfb8      	it	lt
 800861a:	18e4      	addlt	r4, r4, r3
 800861c:	f000 f92e 	bl	800887c <__malloc_lock>
 8008620:	4a1e      	ldr	r2, [pc, #120]	; (800869c <_free_r+0x94>)
 8008622:	6813      	ldr	r3, [r2, #0]
 8008624:	4610      	mov	r0, r2
 8008626:	b933      	cbnz	r3, 8008636 <_free_r+0x2e>
 8008628:	6063      	str	r3, [r4, #4]
 800862a:	6014      	str	r4, [r2, #0]
 800862c:	4628      	mov	r0, r5
 800862e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008632:	f000 b929 	b.w	8008888 <__malloc_unlock>
 8008636:	42a3      	cmp	r3, r4
 8008638:	d90a      	bls.n	8008650 <_free_r+0x48>
 800863a:	6821      	ldr	r1, [r4, #0]
 800863c:	1862      	adds	r2, r4, r1
 800863e:	4293      	cmp	r3, r2
 8008640:	bf01      	itttt	eq
 8008642:	681a      	ldreq	r2, [r3, #0]
 8008644:	685b      	ldreq	r3, [r3, #4]
 8008646:	1852      	addeq	r2, r2, r1
 8008648:	6022      	streq	r2, [r4, #0]
 800864a:	6063      	str	r3, [r4, #4]
 800864c:	6004      	str	r4, [r0, #0]
 800864e:	e7ed      	b.n	800862c <_free_r+0x24>
 8008650:	461a      	mov	r2, r3
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	b10b      	cbz	r3, 800865a <_free_r+0x52>
 8008656:	42a3      	cmp	r3, r4
 8008658:	d9fa      	bls.n	8008650 <_free_r+0x48>
 800865a:	6811      	ldr	r1, [r2, #0]
 800865c:	1850      	adds	r0, r2, r1
 800865e:	42a0      	cmp	r0, r4
 8008660:	d10b      	bne.n	800867a <_free_r+0x72>
 8008662:	6820      	ldr	r0, [r4, #0]
 8008664:	4401      	add	r1, r0
 8008666:	1850      	adds	r0, r2, r1
 8008668:	4283      	cmp	r3, r0
 800866a:	6011      	str	r1, [r2, #0]
 800866c:	d1de      	bne.n	800862c <_free_r+0x24>
 800866e:	6818      	ldr	r0, [r3, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	4401      	add	r1, r0
 8008674:	6011      	str	r1, [r2, #0]
 8008676:	6053      	str	r3, [r2, #4]
 8008678:	e7d8      	b.n	800862c <_free_r+0x24>
 800867a:	d902      	bls.n	8008682 <_free_r+0x7a>
 800867c:	230c      	movs	r3, #12
 800867e:	602b      	str	r3, [r5, #0]
 8008680:	e7d4      	b.n	800862c <_free_r+0x24>
 8008682:	6820      	ldr	r0, [r4, #0]
 8008684:	1821      	adds	r1, r4, r0
 8008686:	428b      	cmp	r3, r1
 8008688:	bf01      	itttt	eq
 800868a:	6819      	ldreq	r1, [r3, #0]
 800868c:	685b      	ldreq	r3, [r3, #4]
 800868e:	1809      	addeq	r1, r1, r0
 8008690:	6021      	streq	r1, [r4, #0]
 8008692:	6063      	str	r3, [r4, #4]
 8008694:	6054      	str	r4, [r2, #4]
 8008696:	e7c9      	b.n	800862c <_free_r+0x24>
 8008698:	bd38      	pop	{r3, r4, r5, pc}
 800869a:	bf00      	nop
 800869c:	200005b4 	.word	0x200005b4

080086a0 <_malloc_r>:
 80086a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a2:	1ccd      	adds	r5, r1, #3
 80086a4:	f025 0503 	bic.w	r5, r5, #3
 80086a8:	3508      	adds	r5, #8
 80086aa:	2d0c      	cmp	r5, #12
 80086ac:	bf38      	it	cc
 80086ae:	250c      	movcc	r5, #12
 80086b0:	2d00      	cmp	r5, #0
 80086b2:	4606      	mov	r6, r0
 80086b4:	db01      	blt.n	80086ba <_malloc_r+0x1a>
 80086b6:	42a9      	cmp	r1, r5
 80086b8:	d903      	bls.n	80086c2 <_malloc_r+0x22>
 80086ba:	230c      	movs	r3, #12
 80086bc:	6033      	str	r3, [r6, #0]
 80086be:	2000      	movs	r0, #0
 80086c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086c2:	f000 f8db 	bl	800887c <__malloc_lock>
 80086c6:	4921      	ldr	r1, [pc, #132]	; (800874c <_malloc_r+0xac>)
 80086c8:	680a      	ldr	r2, [r1, #0]
 80086ca:	4614      	mov	r4, r2
 80086cc:	b99c      	cbnz	r4, 80086f6 <_malloc_r+0x56>
 80086ce:	4f20      	ldr	r7, [pc, #128]	; (8008750 <_malloc_r+0xb0>)
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	b923      	cbnz	r3, 80086de <_malloc_r+0x3e>
 80086d4:	4621      	mov	r1, r4
 80086d6:	4630      	mov	r0, r6
 80086d8:	f000 f83c 	bl	8008754 <_sbrk_r>
 80086dc:	6038      	str	r0, [r7, #0]
 80086de:	4629      	mov	r1, r5
 80086e0:	4630      	mov	r0, r6
 80086e2:	f000 f837 	bl	8008754 <_sbrk_r>
 80086e6:	1c43      	adds	r3, r0, #1
 80086e8:	d123      	bne.n	8008732 <_malloc_r+0x92>
 80086ea:	230c      	movs	r3, #12
 80086ec:	4630      	mov	r0, r6
 80086ee:	6033      	str	r3, [r6, #0]
 80086f0:	f000 f8ca 	bl	8008888 <__malloc_unlock>
 80086f4:	e7e3      	b.n	80086be <_malloc_r+0x1e>
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	1b5b      	subs	r3, r3, r5
 80086fa:	d417      	bmi.n	800872c <_malloc_r+0x8c>
 80086fc:	2b0b      	cmp	r3, #11
 80086fe:	d903      	bls.n	8008708 <_malloc_r+0x68>
 8008700:	6023      	str	r3, [r4, #0]
 8008702:	441c      	add	r4, r3
 8008704:	6025      	str	r5, [r4, #0]
 8008706:	e004      	b.n	8008712 <_malloc_r+0x72>
 8008708:	6863      	ldr	r3, [r4, #4]
 800870a:	42a2      	cmp	r2, r4
 800870c:	bf0c      	ite	eq
 800870e:	600b      	streq	r3, [r1, #0]
 8008710:	6053      	strne	r3, [r2, #4]
 8008712:	4630      	mov	r0, r6
 8008714:	f000 f8b8 	bl	8008888 <__malloc_unlock>
 8008718:	f104 000b 	add.w	r0, r4, #11
 800871c:	1d23      	adds	r3, r4, #4
 800871e:	f020 0007 	bic.w	r0, r0, #7
 8008722:	1ac2      	subs	r2, r0, r3
 8008724:	d0cc      	beq.n	80086c0 <_malloc_r+0x20>
 8008726:	1a1b      	subs	r3, r3, r0
 8008728:	50a3      	str	r3, [r4, r2]
 800872a:	e7c9      	b.n	80086c0 <_malloc_r+0x20>
 800872c:	4622      	mov	r2, r4
 800872e:	6864      	ldr	r4, [r4, #4]
 8008730:	e7cc      	b.n	80086cc <_malloc_r+0x2c>
 8008732:	1cc4      	adds	r4, r0, #3
 8008734:	f024 0403 	bic.w	r4, r4, #3
 8008738:	42a0      	cmp	r0, r4
 800873a:	d0e3      	beq.n	8008704 <_malloc_r+0x64>
 800873c:	1a21      	subs	r1, r4, r0
 800873e:	4630      	mov	r0, r6
 8008740:	f000 f808 	bl	8008754 <_sbrk_r>
 8008744:	3001      	adds	r0, #1
 8008746:	d1dd      	bne.n	8008704 <_malloc_r+0x64>
 8008748:	e7cf      	b.n	80086ea <_malloc_r+0x4a>
 800874a:	bf00      	nop
 800874c:	200005b4 	.word	0x200005b4
 8008750:	200005b8 	.word	0x200005b8

08008754 <_sbrk_r>:
 8008754:	b538      	push	{r3, r4, r5, lr}
 8008756:	2300      	movs	r3, #0
 8008758:	4d05      	ldr	r5, [pc, #20]	; (8008770 <_sbrk_r+0x1c>)
 800875a:	4604      	mov	r4, r0
 800875c:	4608      	mov	r0, r1
 800875e:	602b      	str	r3, [r5, #0]
 8008760:	f7fa feec 	bl	800353c <_sbrk>
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	d102      	bne.n	800876e <_sbrk_r+0x1a>
 8008768:	682b      	ldr	r3, [r5, #0]
 800876a:	b103      	cbz	r3, 800876e <_sbrk_r+0x1a>
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	bd38      	pop	{r3, r4, r5, pc}
 8008770:	20000a3c 	.word	0x20000a3c

08008774 <siprintf>:
 8008774:	b40e      	push	{r1, r2, r3}
 8008776:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800877a:	b500      	push	{lr}
 800877c:	b09c      	sub	sp, #112	; 0x70
 800877e:	ab1d      	add	r3, sp, #116	; 0x74
 8008780:	9002      	str	r0, [sp, #8]
 8008782:	9006      	str	r0, [sp, #24]
 8008784:	9107      	str	r1, [sp, #28]
 8008786:	9104      	str	r1, [sp, #16]
 8008788:	4808      	ldr	r0, [pc, #32]	; (80087ac <siprintf+0x38>)
 800878a:	4909      	ldr	r1, [pc, #36]	; (80087b0 <siprintf+0x3c>)
 800878c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008790:	9105      	str	r1, [sp, #20]
 8008792:	6800      	ldr	r0, [r0, #0]
 8008794:	a902      	add	r1, sp, #8
 8008796:	9301      	str	r3, [sp, #4]
 8008798:	f000 f8d8 	bl	800894c <_svfiprintf_r>
 800879c:	2200      	movs	r2, #0
 800879e:	9b02      	ldr	r3, [sp, #8]
 80087a0:	701a      	strb	r2, [r3, #0]
 80087a2:	b01c      	add	sp, #112	; 0x70
 80087a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80087a8:	b003      	add	sp, #12
 80087aa:	4770      	bx	lr
 80087ac:	20000050 	.word	0x20000050
 80087b0:	ffff0208 	.word	0xffff0208

080087b4 <strcat>:
 80087b4:	4602      	mov	r2, r0
 80087b6:	b510      	push	{r4, lr}
 80087b8:	7814      	ldrb	r4, [r2, #0]
 80087ba:	4613      	mov	r3, r2
 80087bc:	3201      	adds	r2, #1
 80087be:	2c00      	cmp	r4, #0
 80087c0:	d1fa      	bne.n	80087b8 <strcat+0x4>
 80087c2:	3b01      	subs	r3, #1
 80087c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087cc:	2a00      	cmp	r2, #0
 80087ce:	d1f9      	bne.n	80087c4 <strcat+0x10>
 80087d0:	bd10      	pop	{r4, pc}

080087d2 <strncpy>:
 80087d2:	4603      	mov	r3, r0
 80087d4:	b510      	push	{r4, lr}
 80087d6:	3901      	subs	r1, #1
 80087d8:	b132      	cbz	r2, 80087e8 <strncpy+0x16>
 80087da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80087de:	3a01      	subs	r2, #1
 80087e0:	f803 4b01 	strb.w	r4, [r3], #1
 80087e4:	2c00      	cmp	r4, #0
 80087e6:	d1f7      	bne.n	80087d8 <strncpy+0x6>
 80087e8:	2100      	movs	r1, #0
 80087ea:	441a      	add	r2, r3
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d100      	bne.n	80087f2 <strncpy+0x20>
 80087f0:	bd10      	pop	{r4, pc}
 80087f2:	f803 1b01 	strb.w	r1, [r3], #1
 80087f6:	e7f9      	b.n	80087ec <strncpy+0x1a>

080087f8 <__utoa>:
 80087f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087fa:	b08b      	sub	sp, #44	; 0x2c
 80087fc:	4605      	mov	r5, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	466e      	mov	r6, sp
 8008802:	4c1d      	ldr	r4, [pc, #116]	; (8008878 <__utoa+0x80>)
 8008804:	f104 0c20 	add.w	ip, r4, #32
 8008808:	4637      	mov	r7, r6
 800880a:	6820      	ldr	r0, [r4, #0]
 800880c:	6861      	ldr	r1, [r4, #4]
 800880e:	3408      	adds	r4, #8
 8008810:	c703      	stmia	r7!, {r0, r1}
 8008812:	4564      	cmp	r4, ip
 8008814:	463e      	mov	r6, r7
 8008816:	d1f7      	bne.n	8008808 <__utoa+0x10>
 8008818:	7921      	ldrb	r1, [r4, #4]
 800881a:	6820      	ldr	r0, [r4, #0]
 800881c:	7139      	strb	r1, [r7, #4]
 800881e:	1e91      	subs	r1, r2, #2
 8008820:	2922      	cmp	r1, #34	; 0x22
 8008822:	6038      	str	r0, [r7, #0]
 8008824:	f04f 0100 	mov.w	r1, #0
 8008828:	d904      	bls.n	8008834 <__utoa+0x3c>
 800882a:	7019      	strb	r1, [r3, #0]
 800882c:	460b      	mov	r3, r1
 800882e:	4618      	mov	r0, r3
 8008830:	b00b      	add	sp, #44	; 0x2c
 8008832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008834:	1e58      	subs	r0, r3, #1
 8008836:	4684      	mov	ip, r0
 8008838:	fbb5 f7f2 	udiv	r7, r5, r2
 800883c:	fb02 5617 	mls	r6, r2, r7, r5
 8008840:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8008844:	4476      	add	r6, lr
 8008846:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800884a:	460c      	mov	r4, r1
 800884c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008850:	462e      	mov	r6, r5
 8008852:	42b2      	cmp	r2, r6
 8008854:	463d      	mov	r5, r7
 8008856:	f101 0101 	add.w	r1, r1, #1
 800885a:	d9ed      	bls.n	8008838 <__utoa+0x40>
 800885c:	2200      	movs	r2, #0
 800885e:	545a      	strb	r2, [r3, r1]
 8008860:	1919      	adds	r1, r3, r4
 8008862:	1aa5      	subs	r5, r4, r2
 8008864:	42aa      	cmp	r2, r5
 8008866:	dae2      	bge.n	800882e <__utoa+0x36>
 8008868:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800886c:	780e      	ldrb	r6, [r1, #0]
 800886e:	3201      	adds	r2, #1
 8008870:	7006      	strb	r6, [r0, #0]
 8008872:	f801 5901 	strb.w	r5, [r1], #-1
 8008876:	e7f4      	b.n	8008862 <__utoa+0x6a>
 8008878:	080098cc 	.word	0x080098cc

0800887c <__malloc_lock>:
 800887c:	4801      	ldr	r0, [pc, #4]	; (8008884 <__malloc_lock+0x8>)
 800887e:	f000 bafb 	b.w	8008e78 <__retarget_lock_acquire_recursive>
 8008882:	bf00      	nop
 8008884:	20000a44 	.word	0x20000a44

08008888 <__malloc_unlock>:
 8008888:	4801      	ldr	r0, [pc, #4]	; (8008890 <__malloc_unlock+0x8>)
 800888a:	f000 baf6 	b.w	8008e7a <__retarget_lock_release_recursive>
 800888e:	bf00      	nop
 8008890:	20000a44 	.word	0x20000a44

08008894 <__ssputs_r>:
 8008894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008898:	688e      	ldr	r6, [r1, #8]
 800889a:	4682      	mov	sl, r0
 800889c:	429e      	cmp	r6, r3
 800889e:	460c      	mov	r4, r1
 80088a0:	4690      	mov	r8, r2
 80088a2:	461f      	mov	r7, r3
 80088a4:	d838      	bhi.n	8008918 <__ssputs_r+0x84>
 80088a6:	898a      	ldrh	r2, [r1, #12]
 80088a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088ac:	d032      	beq.n	8008914 <__ssputs_r+0x80>
 80088ae:	6825      	ldr	r5, [r4, #0]
 80088b0:	6909      	ldr	r1, [r1, #16]
 80088b2:	3301      	adds	r3, #1
 80088b4:	eba5 0901 	sub.w	r9, r5, r1
 80088b8:	6965      	ldr	r5, [r4, #20]
 80088ba:	444b      	add	r3, r9
 80088bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088c4:	106d      	asrs	r5, r5, #1
 80088c6:	429d      	cmp	r5, r3
 80088c8:	bf38      	it	cc
 80088ca:	461d      	movcc	r5, r3
 80088cc:	0553      	lsls	r3, r2, #21
 80088ce:	d531      	bpl.n	8008934 <__ssputs_r+0xa0>
 80088d0:	4629      	mov	r1, r5
 80088d2:	f7ff fee5 	bl	80086a0 <_malloc_r>
 80088d6:	4606      	mov	r6, r0
 80088d8:	b950      	cbnz	r0, 80088f0 <__ssputs_r+0x5c>
 80088da:	230c      	movs	r3, #12
 80088dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088e0:	f8ca 3000 	str.w	r3, [sl]
 80088e4:	89a3      	ldrh	r3, [r4, #12]
 80088e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088ea:	81a3      	strh	r3, [r4, #12]
 80088ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f0:	464a      	mov	r2, r9
 80088f2:	6921      	ldr	r1, [r4, #16]
 80088f4:	f7ff fe72 	bl	80085dc <memcpy>
 80088f8:	89a3      	ldrh	r3, [r4, #12]
 80088fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008902:	81a3      	strh	r3, [r4, #12]
 8008904:	6126      	str	r6, [r4, #16]
 8008906:	444e      	add	r6, r9
 8008908:	6026      	str	r6, [r4, #0]
 800890a:	463e      	mov	r6, r7
 800890c:	6165      	str	r5, [r4, #20]
 800890e:	eba5 0509 	sub.w	r5, r5, r9
 8008912:	60a5      	str	r5, [r4, #8]
 8008914:	42be      	cmp	r6, r7
 8008916:	d900      	bls.n	800891a <__ssputs_r+0x86>
 8008918:	463e      	mov	r6, r7
 800891a:	4632      	mov	r2, r6
 800891c:	4641      	mov	r1, r8
 800891e:	6820      	ldr	r0, [r4, #0]
 8008920:	f000 faba 	bl	8008e98 <memmove>
 8008924:	68a3      	ldr	r3, [r4, #8]
 8008926:	6822      	ldr	r2, [r4, #0]
 8008928:	1b9b      	subs	r3, r3, r6
 800892a:	4432      	add	r2, r6
 800892c:	2000      	movs	r0, #0
 800892e:	60a3      	str	r3, [r4, #8]
 8008930:	6022      	str	r2, [r4, #0]
 8008932:	e7db      	b.n	80088ec <__ssputs_r+0x58>
 8008934:	462a      	mov	r2, r5
 8008936:	f000 fac9 	bl	8008ecc <_realloc_r>
 800893a:	4606      	mov	r6, r0
 800893c:	2800      	cmp	r0, #0
 800893e:	d1e1      	bne.n	8008904 <__ssputs_r+0x70>
 8008940:	4650      	mov	r0, sl
 8008942:	6921      	ldr	r1, [r4, #16]
 8008944:	f7ff fe60 	bl	8008608 <_free_r>
 8008948:	e7c7      	b.n	80088da <__ssputs_r+0x46>
	...

0800894c <_svfiprintf_r>:
 800894c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008950:	4698      	mov	r8, r3
 8008952:	898b      	ldrh	r3, [r1, #12]
 8008954:	4607      	mov	r7, r0
 8008956:	061b      	lsls	r3, r3, #24
 8008958:	460d      	mov	r5, r1
 800895a:	4614      	mov	r4, r2
 800895c:	b09d      	sub	sp, #116	; 0x74
 800895e:	d50e      	bpl.n	800897e <_svfiprintf_r+0x32>
 8008960:	690b      	ldr	r3, [r1, #16]
 8008962:	b963      	cbnz	r3, 800897e <_svfiprintf_r+0x32>
 8008964:	2140      	movs	r1, #64	; 0x40
 8008966:	f7ff fe9b 	bl	80086a0 <_malloc_r>
 800896a:	6028      	str	r0, [r5, #0]
 800896c:	6128      	str	r0, [r5, #16]
 800896e:	b920      	cbnz	r0, 800897a <_svfiprintf_r+0x2e>
 8008970:	230c      	movs	r3, #12
 8008972:	603b      	str	r3, [r7, #0]
 8008974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008978:	e0d1      	b.n	8008b1e <_svfiprintf_r+0x1d2>
 800897a:	2340      	movs	r3, #64	; 0x40
 800897c:	616b      	str	r3, [r5, #20]
 800897e:	2300      	movs	r3, #0
 8008980:	9309      	str	r3, [sp, #36]	; 0x24
 8008982:	2320      	movs	r3, #32
 8008984:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008988:	2330      	movs	r3, #48	; 0x30
 800898a:	f04f 0901 	mov.w	r9, #1
 800898e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008992:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008b38 <_svfiprintf_r+0x1ec>
 8008996:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800899a:	4623      	mov	r3, r4
 800899c:	469a      	mov	sl, r3
 800899e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089a2:	b10a      	cbz	r2, 80089a8 <_svfiprintf_r+0x5c>
 80089a4:	2a25      	cmp	r2, #37	; 0x25
 80089a6:	d1f9      	bne.n	800899c <_svfiprintf_r+0x50>
 80089a8:	ebba 0b04 	subs.w	fp, sl, r4
 80089ac:	d00b      	beq.n	80089c6 <_svfiprintf_r+0x7a>
 80089ae:	465b      	mov	r3, fp
 80089b0:	4622      	mov	r2, r4
 80089b2:	4629      	mov	r1, r5
 80089b4:	4638      	mov	r0, r7
 80089b6:	f7ff ff6d 	bl	8008894 <__ssputs_r>
 80089ba:	3001      	adds	r0, #1
 80089bc:	f000 80aa 	beq.w	8008b14 <_svfiprintf_r+0x1c8>
 80089c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089c2:	445a      	add	r2, fp
 80089c4:	9209      	str	r2, [sp, #36]	; 0x24
 80089c6:	f89a 3000 	ldrb.w	r3, [sl]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 80a2 	beq.w	8008b14 <_svfiprintf_r+0x1c8>
 80089d0:	2300      	movs	r3, #0
 80089d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089da:	f10a 0a01 	add.w	sl, sl, #1
 80089de:	9304      	str	r3, [sp, #16]
 80089e0:	9307      	str	r3, [sp, #28]
 80089e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089e6:	931a      	str	r3, [sp, #104]	; 0x68
 80089e8:	4654      	mov	r4, sl
 80089ea:	2205      	movs	r2, #5
 80089ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089f0:	4851      	ldr	r0, [pc, #324]	; (8008b38 <_svfiprintf_r+0x1ec>)
 80089f2:	f000 fa43 	bl	8008e7c <memchr>
 80089f6:	9a04      	ldr	r2, [sp, #16]
 80089f8:	b9d8      	cbnz	r0, 8008a32 <_svfiprintf_r+0xe6>
 80089fa:	06d0      	lsls	r0, r2, #27
 80089fc:	bf44      	itt	mi
 80089fe:	2320      	movmi	r3, #32
 8008a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a04:	0711      	lsls	r1, r2, #28
 8008a06:	bf44      	itt	mi
 8008a08:	232b      	movmi	r3, #43	; 0x2b
 8008a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a12:	2b2a      	cmp	r3, #42	; 0x2a
 8008a14:	d015      	beq.n	8008a42 <_svfiprintf_r+0xf6>
 8008a16:	4654      	mov	r4, sl
 8008a18:	2000      	movs	r0, #0
 8008a1a:	f04f 0c0a 	mov.w	ip, #10
 8008a1e:	9a07      	ldr	r2, [sp, #28]
 8008a20:	4621      	mov	r1, r4
 8008a22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a26:	3b30      	subs	r3, #48	; 0x30
 8008a28:	2b09      	cmp	r3, #9
 8008a2a:	d94e      	bls.n	8008aca <_svfiprintf_r+0x17e>
 8008a2c:	b1b0      	cbz	r0, 8008a5c <_svfiprintf_r+0x110>
 8008a2e:	9207      	str	r2, [sp, #28]
 8008a30:	e014      	b.n	8008a5c <_svfiprintf_r+0x110>
 8008a32:	eba0 0308 	sub.w	r3, r0, r8
 8008a36:	fa09 f303 	lsl.w	r3, r9, r3
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	46a2      	mov	sl, r4
 8008a3e:	9304      	str	r3, [sp, #16]
 8008a40:	e7d2      	b.n	80089e8 <_svfiprintf_r+0x9c>
 8008a42:	9b03      	ldr	r3, [sp, #12]
 8008a44:	1d19      	adds	r1, r3, #4
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	9103      	str	r1, [sp, #12]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	bfbb      	ittet	lt
 8008a4e:	425b      	neglt	r3, r3
 8008a50:	f042 0202 	orrlt.w	r2, r2, #2
 8008a54:	9307      	strge	r3, [sp, #28]
 8008a56:	9307      	strlt	r3, [sp, #28]
 8008a58:	bfb8      	it	lt
 8008a5a:	9204      	strlt	r2, [sp, #16]
 8008a5c:	7823      	ldrb	r3, [r4, #0]
 8008a5e:	2b2e      	cmp	r3, #46	; 0x2e
 8008a60:	d10c      	bne.n	8008a7c <_svfiprintf_r+0x130>
 8008a62:	7863      	ldrb	r3, [r4, #1]
 8008a64:	2b2a      	cmp	r3, #42	; 0x2a
 8008a66:	d135      	bne.n	8008ad4 <_svfiprintf_r+0x188>
 8008a68:	9b03      	ldr	r3, [sp, #12]
 8008a6a:	3402      	adds	r4, #2
 8008a6c:	1d1a      	adds	r2, r3, #4
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	9203      	str	r2, [sp, #12]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	bfb8      	it	lt
 8008a76:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008a7a:	9305      	str	r3, [sp, #20]
 8008a7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b48 <_svfiprintf_r+0x1fc>
 8008a80:	2203      	movs	r2, #3
 8008a82:	4650      	mov	r0, sl
 8008a84:	7821      	ldrb	r1, [r4, #0]
 8008a86:	f000 f9f9 	bl	8008e7c <memchr>
 8008a8a:	b140      	cbz	r0, 8008a9e <_svfiprintf_r+0x152>
 8008a8c:	2340      	movs	r3, #64	; 0x40
 8008a8e:	eba0 000a 	sub.w	r0, r0, sl
 8008a92:	fa03 f000 	lsl.w	r0, r3, r0
 8008a96:	9b04      	ldr	r3, [sp, #16]
 8008a98:	3401      	adds	r4, #1
 8008a9a:	4303      	orrs	r3, r0
 8008a9c:	9304      	str	r3, [sp, #16]
 8008a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aa2:	2206      	movs	r2, #6
 8008aa4:	4825      	ldr	r0, [pc, #148]	; (8008b3c <_svfiprintf_r+0x1f0>)
 8008aa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008aaa:	f000 f9e7 	bl	8008e7c <memchr>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d038      	beq.n	8008b24 <_svfiprintf_r+0x1d8>
 8008ab2:	4b23      	ldr	r3, [pc, #140]	; (8008b40 <_svfiprintf_r+0x1f4>)
 8008ab4:	bb1b      	cbnz	r3, 8008afe <_svfiprintf_r+0x1b2>
 8008ab6:	9b03      	ldr	r3, [sp, #12]
 8008ab8:	3307      	adds	r3, #7
 8008aba:	f023 0307 	bic.w	r3, r3, #7
 8008abe:	3308      	adds	r3, #8
 8008ac0:	9303      	str	r3, [sp, #12]
 8008ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ac4:	4433      	add	r3, r6
 8008ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ac8:	e767      	b.n	800899a <_svfiprintf_r+0x4e>
 8008aca:	460c      	mov	r4, r1
 8008acc:	2001      	movs	r0, #1
 8008ace:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ad2:	e7a5      	b.n	8008a20 <_svfiprintf_r+0xd4>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	f04f 0c0a 	mov.w	ip, #10
 8008ada:	4619      	mov	r1, r3
 8008adc:	3401      	adds	r4, #1
 8008ade:	9305      	str	r3, [sp, #20]
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ae6:	3a30      	subs	r2, #48	; 0x30
 8008ae8:	2a09      	cmp	r2, #9
 8008aea:	d903      	bls.n	8008af4 <_svfiprintf_r+0x1a8>
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d0c5      	beq.n	8008a7c <_svfiprintf_r+0x130>
 8008af0:	9105      	str	r1, [sp, #20]
 8008af2:	e7c3      	b.n	8008a7c <_svfiprintf_r+0x130>
 8008af4:	4604      	mov	r4, r0
 8008af6:	2301      	movs	r3, #1
 8008af8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008afc:	e7f0      	b.n	8008ae0 <_svfiprintf_r+0x194>
 8008afe:	ab03      	add	r3, sp, #12
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	462a      	mov	r2, r5
 8008b04:	4638      	mov	r0, r7
 8008b06:	4b0f      	ldr	r3, [pc, #60]	; (8008b44 <_svfiprintf_r+0x1f8>)
 8008b08:	a904      	add	r1, sp, #16
 8008b0a:	f3af 8000 	nop.w
 8008b0e:	1c42      	adds	r2, r0, #1
 8008b10:	4606      	mov	r6, r0
 8008b12:	d1d6      	bne.n	8008ac2 <_svfiprintf_r+0x176>
 8008b14:	89ab      	ldrh	r3, [r5, #12]
 8008b16:	065b      	lsls	r3, r3, #25
 8008b18:	f53f af2c 	bmi.w	8008974 <_svfiprintf_r+0x28>
 8008b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b1e:	b01d      	add	sp, #116	; 0x74
 8008b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b24:	ab03      	add	r3, sp, #12
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	462a      	mov	r2, r5
 8008b2a:	4638      	mov	r0, r7
 8008b2c:	4b05      	ldr	r3, [pc, #20]	; (8008b44 <_svfiprintf_r+0x1f8>)
 8008b2e:	a904      	add	r1, sp, #16
 8008b30:	f000 f87c 	bl	8008c2c <_printf_i>
 8008b34:	e7eb      	b.n	8008b0e <_svfiprintf_r+0x1c2>
 8008b36:	bf00      	nop
 8008b38:	080098f1 	.word	0x080098f1
 8008b3c:	080098fb 	.word	0x080098fb
 8008b40:	00000000 	.word	0x00000000
 8008b44:	08008895 	.word	0x08008895
 8008b48:	080098f7 	.word	0x080098f7

08008b4c <_printf_common>:
 8008b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b50:	4616      	mov	r6, r2
 8008b52:	4699      	mov	r9, r3
 8008b54:	688a      	ldr	r2, [r1, #8]
 8008b56:	690b      	ldr	r3, [r1, #16]
 8008b58:	4607      	mov	r7, r0
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	bfb8      	it	lt
 8008b5e:	4613      	movlt	r3, r2
 8008b60:	6033      	str	r3, [r6, #0]
 8008b62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b66:	460c      	mov	r4, r1
 8008b68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b6c:	b10a      	cbz	r2, 8008b72 <_printf_common+0x26>
 8008b6e:	3301      	adds	r3, #1
 8008b70:	6033      	str	r3, [r6, #0]
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	0699      	lsls	r1, r3, #26
 8008b76:	bf42      	ittt	mi
 8008b78:	6833      	ldrmi	r3, [r6, #0]
 8008b7a:	3302      	addmi	r3, #2
 8008b7c:	6033      	strmi	r3, [r6, #0]
 8008b7e:	6825      	ldr	r5, [r4, #0]
 8008b80:	f015 0506 	ands.w	r5, r5, #6
 8008b84:	d106      	bne.n	8008b94 <_printf_common+0x48>
 8008b86:	f104 0a19 	add.w	sl, r4, #25
 8008b8a:	68e3      	ldr	r3, [r4, #12]
 8008b8c:	6832      	ldr	r2, [r6, #0]
 8008b8e:	1a9b      	subs	r3, r3, r2
 8008b90:	42ab      	cmp	r3, r5
 8008b92:	dc28      	bgt.n	8008be6 <_printf_common+0x9a>
 8008b94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b98:	1e13      	subs	r3, r2, #0
 8008b9a:	6822      	ldr	r2, [r4, #0]
 8008b9c:	bf18      	it	ne
 8008b9e:	2301      	movne	r3, #1
 8008ba0:	0692      	lsls	r2, r2, #26
 8008ba2:	d42d      	bmi.n	8008c00 <_printf_common+0xb4>
 8008ba4:	4649      	mov	r1, r9
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bac:	47c0      	blx	r8
 8008bae:	3001      	adds	r0, #1
 8008bb0:	d020      	beq.n	8008bf4 <_printf_common+0xa8>
 8008bb2:	6823      	ldr	r3, [r4, #0]
 8008bb4:	68e5      	ldr	r5, [r4, #12]
 8008bb6:	f003 0306 	and.w	r3, r3, #6
 8008bba:	2b04      	cmp	r3, #4
 8008bbc:	bf18      	it	ne
 8008bbe:	2500      	movne	r5, #0
 8008bc0:	6832      	ldr	r2, [r6, #0]
 8008bc2:	f04f 0600 	mov.w	r6, #0
 8008bc6:	68a3      	ldr	r3, [r4, #8]
 8008bc8:	bf08      	it	eq
 8008bca:	1aad      	subeq	r5, r5, r2
 8008bcc:	6922      	ldr	r2, [r4, #16]
 8008bce:	bf08      	it	eq
 8008bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	bfc4      	itt	gt
 8008bd8:	1a9b      	subgt	r3, r3, r2
 8008bda:	18ed      	addgt	r5, r5, r3
 8008bdc:	341a      	adds	r4, #26
 8008bde:	42b5      	cmp	r5, r6
 8008be0:	d11a      	bne.n	8008c18 <_printf_common+0xcc>
 8008be2:	2000      	movs	r0, #0
 8008be4:	e008      	b.n	8008bf8 <_printf_common+0xac>
 8008be6:	2301      	movs	r3, #1
 8008be8:	4652      	mov	r2, sl
 8008bea:	4649      	mov	r1, r9
 8008bec:	4638      	mov	r0, r7
 8008bee:	47c0      	blx	r8
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	d103      	bne.n	8008bfc <_printf_common+0xb0>
 8008bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bfc:	3501      	adds	r5, #1
 8008bfe:	e7c4      	b.n	8008b8a <_printf_common+0x3e>
 8008c00:	2030      	movs	r0, #48	; 0x30
 8008c02:	18e1      	adds	r1, r4, r3
 8008c04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c08:	1c5a      	adds	r2, r3, #1
 8008c0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c0e:	4422      	add	r2, r4
 8008c10:	3302      	adds	r3, #2
 8008c12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c16:	e7c5      	b.n	8008ba4 <_printf_common+0x58>
 8008c18:	2301      	movs	r3, #1
 8008c1a:	4622      	mov	r2, r4
 8008c1c:	4649      	mov	r1, r9
 8008c1e:	4638      	mov	r0, r7
 8008c20:	47c0      	blx	r8
 8008c22:	3001      	adds	r0, #1
 8008c24:	d0e6      	beq.n	8008bf4 <_printf_common+0xa8>
 8008c26:	3601      	adds	r6, #1
 8008c28:	e7d9      	b.n	8008bde <_printf_common+0x92>
	...

08008c2c <_printf_i>:
 8008c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c30:	460c      	mov	r4, r1
 8008c32:	7e27      	ldrb	r7, [r4, #24]
 8008c34:	4691      	mov	r9, r2
 8008c36:	2f78      	cmp	r7, #120	; 0x78
 8008c38:	4680      	mov	r8, r0
 8008c3a:	469a      	mov	sl, r3
 8008c3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c42:	d807      	bhi.n	8008c54 <_printf_i+0x28>
 8008c44:	2f62      	cmp	r7, #98	; 0x62
 8008c46:	d80a      	bhi.n	8008c5e <_printf_i+0x32>
 8008c48:	2f00      	cmp	r7, #0
 8008c4a:	f000 80d9 	beq.w	8008e00 <_printf_i+0x1d4>
 8008c4e:	2f58      	cmp	r7, #88	; 0x58
 8008c50:	f000 80a4 	beq.w	8008d9c <_printf_i+0x170>
 8008c54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c5c:	e03a      	b.n	8008cd4 <_printf_i+0xa8>
 8008c5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c62:	2b15      	cmp	r3, #21
 8008c64:	d8f6      	bhi.n	8008c54 <_printf_i+0x28>
 8008c66:	a001      	add	r0, pc, #4	; (adr r0, 8008c6c <_printf_i+0x40>)
 8008c68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008c6c:	08008cc5 	.word	0x08008cc5
 8008c70:	08008cd9 	.word	0x08008cd9
 8008c74:	08008c55 	.word	0x08008c55
 8008c78:	08008c55 	.word	0x08008c55
 8008c7c:	08008c55 	.word	0x08008c55
 8008c80:	08008c55 	.word	0x08008c55
 8008c84:	08008cd9 	.word	0x08008cd9
 8008c88:	08008c55 	.word	0x08008c55
 8008c8c:	08008c55 	.word	0x08008c55
 8008c90:	08008c55 	.word	0x08008c55
 8008c94:	08008c55 	.word	0x08008c55
 8008c98:	08008de7 	.word	0x08008de7
 8008c9c:	08008d09 	.word	0x08008d09
 8008ca0:	08008dc9 	.word	0x08008dc9
 8008ca4:	08008c55 	.word	0x08008c55
 8008ca8:	08008c55 	.word	0x08008c55
 8008cac:	08008e09 	.word	0x08008e09
 8008cb0:	08008c55 	.word	0x08008c55
 8008cb4:	08008d09 	.word	0x08008d09
 8008cb8:	08008c55 	.word	0x08008c55
 8008cbc:	08008c55 	.word	0x08008c55
 8008cc0:	08008dd1 	.word	0x08008dd1
 8008cc4:	680b      	ldr	r3, [r1, #0]
 8008cc6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008cca:	1d1a      	adds	r2, r3, #4
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	600a      	str	r2, [r1, #0]
 8008cd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e0a4      	b.n	8008e22 <_printf_i+0x1f6>
 8008cd8:	6825      	ldr	r5, [r4, #0]
 8008cda:	6808      	ldr	r0, [r1, #0]
 8008cdc:	062e      	lsls	r6, r5, #24
 8008cde:	f100 0304 	add.w	r3, r0, #4
 8008ce2:	d50a      	bpl.n	8008cfa <_printf_i+0xce>
 8008ce4:	6805      	ldr	r5, [r0, #0]
 8008ce6:	600b      	str	r3, [r1, #0]
 8008ce8:	2d00      	cmp	r5, #0
 8008cea:	da03      	bge.n	8008cf4 <_printf_i+0xc8>
 8008cec:	232d      	movs	r3, #45	; 0x2d
 8008cee:	426d      	negs	r5, r5
 8008cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cf4:	230a      	movs	r3, #10
 8008cf6:	485e      	ldr	r0, [pc, #376]	; (8008e70 <_printf_i+0x244>)
 8008cf8:	e019      	b.n	8008d2e <_printf_i+0x102>
 8008cfa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008cfe:	6805      	ldr	r5, [r0, #0]
 8008d00:	600b      	str	r3, [r1, #0]
 8008d02:	bf18      	it	ne
 8008d04:	b22d      	sxthne	r5, r5
 8008d06:	e7ef      	b.n	8008ce8 <_printf_i+0xbc>
 8008d08:	680b      	ldr	r3, [r1, #0]
 8008d0a:	6825      	ldr	r5, [r4, #0]
 8008d0c:	1d18      	adds	r0, r3, #4
 8008d0e:	6008      	str	r0, [r1, #0]
 8008d10:	0628      	lsls	r0, r5, #24
 8008d12:	d501      	bpl.n	8008d18 <_printf_i+0xec>
 8008d14:	681d      	ldr	r5, [r3, #0]
 8008d16:	e002      	b.n	8008d1e <_printf_i+0xf2>
 8008d18:	0669      	lsls	r1, r5, #25
 8008d1a:	d5fb      	bpl.n	8008d14 <_printf_i+0xe8>
 8008d1c:	881d      	ldrh	r5, [r3, #0]
 8008d1e:	2f6f      	cmp	r7, #111	; 0x6f
 8008d20:	bf0c      	ite	eq
 8008d22:	2308      	moveq	r3, #8
 8008d24:	230a      	movne	r3, #10
 8008d26:	4852      	ldr	r0, [pc, #328]	; (8008e70 <_printf_i+0x244>)
 8008d28:	2100      	movs	r1, #0
 8008d2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d2e:	6866      	ldr	r6, [r4, #4]
 8008d30:	2e00      	cmp	r6, #0
 8008d32:	bfa8      	it	ge
 8008d34:	6821      	ldrge	r1, [r4, #0]
 8008d36:	60a6      	str	r6, [r4, #8]
 8008d38:	bfa4      	itt	ge
 8008d3a:	f021 0104 	bicge.w	r1, r1, #4
 8008d3e:	6021      	strge	r1, [r4, #0]
 8008d40:	b90d      	cbnz	r5, 8008d46 <_printf_i+0x11a>
 8008d42:	2e00      	cmp	r6, #0
 8008d44:	d04d      	beq.n	8008de2 <_printf_i+0x1b6>
 8008d46:	4616      	mov	r6, r2
 8008d48:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d4c:	fb03 5711 	mls	r7, r3, r1, r5
 8008d50:	5dc7      	ldrb	r7, [r0, r7]
 8008d52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d56:	462f      	mov	r7, r5
 8008d58:	42bb      	cmp	r3, r7
 8008d5a:	460d      	mov	r5, r1
 8008d5c:	d9f4      	bls.n	8008d48 <_printf_i+0x11c>
 8008d5e:	2b08      	cmp	r3, #8
 8008d60:	d10b      	bne.n	8008d7a <_printf_i+0x14e>
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	07df      	lsls	r7, r3, #31
 8008d66:	d508      	bpl.n	8008d7a <_printf_i+0x14e>
 8008d68:	6923      	ldr	r3, [r4, #16]
 8008d6a:	6861      	ldr	r1, [r4, #4]
 8008d6c:	4299      	cmp	r1, r3
 8008d6e:	bfde      	ittt	le
 8008d70:	2330      	movle	r3, #48	; 0x30
 8008d72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d76:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008d7a:	1b92      	subs	r2, r2, r6
 8008d7c:	6122      	str	r2, [r4, #16]
 8008d7e:	464b      	mov	r3, r9
 8008d80:	4621      	mov	r1, r4
 8008d82:	4640      	mov	r0, r8
 8008d84:	f8cd a000 	str.w	sl, [sp]
 8008d88:	aa03      	add	r2, sp, #12
 8008d8a:	f7ff fedf 	bl	8008b4c <_printf_common>
 8008d8e:	3001      	adds	r0, #1
 8008d90:	d14c      	bne.n	8008e2c <_printf_i+0x200>
 8008d92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d96:	b004      	add	sp, #16
 8008d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d9c:	4834      	ldr	r0, [pc, #208]	; (8008e70 <_printf_i+0x244>)
 8008d9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008da2:	680e      	ldr	r6, [r1, #0]
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	f856 5b04 	ldr.w	r5, [r6], #4
 8008daa:	061f      	lsls	r7, r3, #24
 8008dac:	600e      	str	r6, [r1, #0]
 8008dae:	d514      	bpl.n	8008dda <_printf_i+0x1ae>
 8008db0:	07d9      	lsls	r1, r3, #31
 8008db2:	bf44      	itt	mi
 8008db4:	f043 0320 	orrmi.w	r3, r3, #32
 8008db8:	6023      	strmi	r3, [r4, #0]
 8008dba:	b91d      	cbnz	r5, 8008dc4 <_printf_i+0x198>
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	f023 0320 	bic.w	r3, r3, #32
 8008dc2:	6023      	str	r3, [r4, #0]
 8008dc4:	2310      	movs	r3, #16
 8008dc6:	e7af      	b.n	8008d28 <_printf_i+0xfc>
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	f043 0320 	orr.w	r3, r3, #32
 8008dce:	6023      	str	r3, [r4, #0]
 8008dd0:	2378      	movs	r3, #120	; 0x78
 8008dd2:	4828      	ldr	r0, [pc, #160]	; (8008e74 <_printf_i+0x248>)
 8008dd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dd8:	e7e3      	b.n	8008da2 <_printf_i+0x176>
 8008dda:	065e      	lsls	r6, r3, #25
 8008ddc:	bf48      	it	mi
 8008dde:	b2ad      	uxthmi	r5, r5
 8008de0:	e7e6      	b.n	8008db0 <_printf_i+0x184>
 8008de2:	4616      	mov	r6, r2
 8008de4:	e7bb      	b.n	8008d5e <_printf_i+0x132>
 8008de6:	680b      	ldr	r3, [r1, #0]
 8008de8:	6826      	ldr	r6, [r4, #0]
 8008dea:	1d1d      	adds	r5, r3, #4
 8008dec:	6960      	ldr	r0, [r4, #20]
 8008dee:	600d      	str	r5, [r1, #0]
 8008df0:	0635      	lsls	r5, r6, #24
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	d501      	bpl.n	8008dfa <_printf_i+0x1ce>
 8008df6:	6018      	str	r0, [r3, #0]
 8008df8:	e002      	b.n	8008e00 <_printf_i+0x1d4>
 8008dfa:	0671      	lsls	r1, r6, #25
 8008dfc:	d5fb      	bpl.n	8008df6 <_printf_i+0x1ca>
 8008dfe:	8018      	strh	r0, [r3, #0]
 8008e00:	2300      	movs	r3, #0
 8008e02:	4616      	mov	r6, r2
 8008e04:	6123      	str	r3, [r4, #16]
 8008e06:	e7ba      	b.n	8008d7e <_printf_i+0x152>
 8008e08:	680b      	ldr	r3, [r1, #0]
 8008e0a:	1d1a      	adds	r2, r3, #4
 8008e0c:	600a      	str	r2, [r1, #0]
 8008e0e:	681e      	ldr	r6, [r3, #0]
 8008e10:	2100      	movs	r1, #0
 8008e12:	4630      	mov	r0, r6
 8008e14:	6862      	ldr	r2, [r4, #4]
 8008e16:	f000 f831 	bl	8008e7c <memchr>
 8008e1a:	b108      	cbz	r0, 8008e20 <_printf_i+0x1f4>
 8008e1c:	1b80      	subs	r0, r0, r6
 8008e1e:	6060      	str	r0, [r4, #4]
 8008e20:	6863      	ldr	r3, [r4, #4]
 8008e22:	6123      	str	r3, [r4, #16]
 8008e24:	2300      	movs	r3, #0
 8008e26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e2a:	e7a8      	b.n	8008d7e <_printf_i+0x152>
 8008e2c:	4632      	mov	r2, r6
 8008e2e:	4649      	mov	r1, r9
 8008e30:	4640      	mov	r0, r8
 8008e32:	6923      	ldr	r3, [r4, #16]
 8008e34:	47d0      	blx	sl
 8008e36:	3001      	adds	r0, #1
 8008e38:	d0ab      	beq.n	8008d92 <_printf_i+0x166>
 8008e3a:	6823      	ldr	r3, [r4, #0]
 8008e3c:	079b      	lsls	r3, r3, #30
 8008e3e:	d413      	bmi.n	8008e68 <_printf_i+0x23c>
 8008e40:	68e0      	ldr	r0, [r4, #12]
 8008e42:	9b03      	ldr	r3, [sp, #12]
 8008e44:	4298      	cmp	r0, r3
 8008e46:	bfb8      	it	lt
 8008e48:	4618      	movlt	r0, r3
 8008e4a:	e7a4      	b.n	8008d96 <_printf_i+0x16a>
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	4632      	mov	r2, r6
 8008e50:	4649      	mov	r1, r9
 8008e52:	4640      	mov	r0, r8
 8008e54:	47d0      	blx	sl
 8008e56:	3001      	adds	r0, #1
 8008e58:	d09b      	beq.n	8008d92 <_printf_i+0x166>
 8008e5a:	3501      	adds	r5, #1
 8008e5c:	68e3      	ldr	r3, [r4, #12]
 8008e5e:	9903      	ldr	r1, [sp, #12]
 8008e60:	1a5b      	subs	r3, r3, r1
 8008e62:	42ab      	cmp	r3, r5
 8008e64:	dcf2      	bgt.n	8008e4c <_printf_i+0x220>
 8008e66:	e7eb      	b.n	8008e40 <_printf_i+0x214>
 8008e68:	2500      	movs	r5, #0
 8008e6a:	f104 0619 	add.w	r6, r4, #25
 8008e6e:	e7f5      	b.n	8008e5c <_printf_i+0x230>
 8008e70:	08009902 	.word	0x08009902
 8008e74:	08009913 	.word	0x08009913

08008e78 <__retarget_lock_acquire_recursive>:
 8008e78:	4770      	bx	lr

08008e7a <__retarget_lock_release_recursive>:
 8008e7a:	4770      	bx	lr

08008e7c <memchr>:
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	b510      	push	{r4, lr}
 8008e80:	b2c9      	uxtb	r1, r1
 8008e82:	4402      	add	r2, r0
 8008e84:	4293      	cmp	r3, r2
 8008e86:	4618      	mov	r0, r3
 8008e88:	d101      	bne.n	8008e8e <memchr+0x12>
 8008e8a:	2000      	movs	r0, #0
 8008e8c:	e003      	b.n	8008e96 <memchr+0x1a>
 8008e8e:	7804      	ldrb	r4, [r0, #0]
 8008e90:	3301      	adds	r3, #1
 8008e92:	428c      	cmp	r4, r1
 8008e94:	d1f6      	bne.n	8008e84 <memchr+0x8>
 8008e96:	bd10      	pop	{r4, pc}

08008e98 <memmove>:
 8008e98:	4288      	cmp	r0, r1
 8008e9a:	b510      	push	{r4, lr}
 8008e9c:	eb01 0402 	add.w	r4, r1, r2
 8008ea0:	d902      	bls.n	8008ea8 <memmove+0x10>
 8008ea2:	4284      	cmp	r4, r0
 8008ea4:	4623      	mov	r3, r4
 8008ea6:	d807      	bhi.n	8008eb8 <memmove+0x20>
 8008ea8:	1e43      	subs	r3, r0, #1
 8008eaa:	42a1      	cmp	r1, r4
 8008eac:	d008      	beq.n	8008ec0 <memmove+0x28>
 8008eae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008eb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008eb6:	e7f8      	b.n	8008eaa <memmove+0x12>
 8008eb8:	4601      	mov	r1, r0
 8008eba:	4402      	add	r2, r0
 8008ebc:	428a      	cmp	r2, r1
 8008ebe:	d100      	bne.n	8008ec2 <memmove+0x2a>
 8008ec0:	bd10      	pop	{r4, pc}
 8008ec2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ec6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008eca:	e7f7      	b.n	8008ebc <memmove+0x24>

08008ecc <_realloc_r>:
 8008ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ece:	4607      	mov	r7, r0
 8008ed0:	4614      	mov	r4, r2
 8008ed2:	460e      	mov	r6, r1
 8008ed4:	b921      	cbnz	r1, 8008ee0 <_realloc_r+0x14>
 8008ed6:	4611      	mov	r1, r2
 8008ed8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008edc:	f7ff bbe0 	b.w	80086a0 <_malloc_r>
 8008ee0:	b922      	cbnz	r2, 8008eec <_realloc_r+0x20>
 8008ee2:	f7ff fb91 	bl	8008608 <_free_r>
 8008ee6:	4625      	mov	r5, r4
 8008ee8:	4628      	mov	r0, r5
 8008eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eec:	f000 f814 	bl	8008f18 <_malloc_usable_size_r>
 8008ef0:	42a0      	cmp	r0, r4
 8008ef2:	d20f      	bcs.n	8008f14 <_realloc_r+0x48>
 8008ef4:	4621      	mov	r1, r4
 8008ef6:	4638      	mov	r0, r7
 8008ef8:	f7ff fbd2 	bl	80086a0 <_malloc_r>
 8008efc:	4605      	mov	r5, r0
 8008efe:	2800      	cmp	r0, #0
 8008f00:	d0f2      	beq.n	8008ee8 <_realloc_r+0x1c>
 8008f02:	4631      	mov	r1, r6
 8008f04:	4622      	mov	r2, r4
 8008f06:	f7ff fb69 	bl	80085dc <memcpy>
 8008f0a:	4631      	mov	r1, r6
 8008f0c:	4638      	mov	r0, r7
 8008f0e:	f7ff fb7b 	bl	8008608 <_free_r>
 8008f12:	e7e9      	b.n	8008ee8 <_realloc_r+0x1c>
 8008f14:	4635      	mov	r5, r6
 8008f16:	e7e7      	b.n	8008ee8 <_realloc_r+0x1c>

08008f18 <_malloc_usable_size_r>:
 8008f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f1c:	1f18      	subs	r0, r3, #4
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	bfbc      	itt	lt
 8008f22:	580b      	ldrlt	r3, [r1, r0]
 8008f24:	18c0      	addlt	r0, r0, r3
 8008f26:	4770      	bx	lr

08008f28 <_init>:
 8008f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2a:	bf00      	nop
 8008f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f2e:	bc08      	pop	{r3}
 8008f30:	469e      	mov	lr, r3
 8008f32:	4770      	bx	lr

08008f34 <_fini>:
 8008f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f36:	bf00      	nop
 8008f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f3a:	bc08      	pop	{r3}
 8008f3c:	469e      	mov	lr, r3
 8008f3e:	4770      	bx	lr
