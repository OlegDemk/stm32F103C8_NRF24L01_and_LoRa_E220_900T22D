
TX_pipe_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000828  080048e0  080048e0  000148e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005108  08005108  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08005108  08005108  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005108  08005108  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005108  08005108  00015108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  20000080  08005190  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  08005190  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1a0  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b3  00000000  00000000  0002e249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00030500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  00031130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000024c9  00000000  00000000  00031ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fea0  00000000  00000000  00034171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008721e  00000000  00000000  00044011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb22f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003668  00000000  00000000  000cb284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	080048c8 	.word	0x080048c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	080048c8 	.word	0x080048c8

0800014c <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000154:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <DelayMicro+0x3c>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <DelayMicro+0x3c>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4a0b      	ldr	r2, [pc, #44]	; (800018c <DelayMicro+0x40>)
 8000160:	fba2 2303 	umull	r2, r3, r2, r3
 8000164:	0ddb      	lsrs	r3, r3, #23
 8000166:	687a      	ldr	r2, [r7, #4]
 8000168:	fb02 f303 	mul.w	r3, r2, r3
 800016c:	607b      	str	r3, [r7, #4]
	while (micros--);
 800016e:	bf00      	nop
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	1e5a      	subs	r2, r3, #1
 8000174:	607a      	str	r2, [r7, #4]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d1fa      	bne.n	8000170 <DelayMicro+0x24>
}
 800017a:	bf00      	nop
 800017c:	bf00      	nop
 800017e:	3714      	adds	r7, #20
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	20000010 	.word	0x20000010
 800018c:	ffa71ee7 	.word	0xffa71ee7

08000190 <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b086      	sub	sp, #24
 8000194:	af02      	add	r7, sp, #8
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 800019a:	2300      	movs	r3, #0
 800019c:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 800019e:	2200      	movs	r2, #0
 80001a0:	2110      	movs	r1, #16
 80001a2:	4813      	ldr	r0, [pc, #76]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001a4:	f001 fcc3 	bl	8001b2e <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 80001a8:	f107 020f 	add.w	r2, r7, #15
 80001ac:	1df9      	adds	r1, r7, #7
 80001ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b2:	9300      	str	r3, [sp, #0]
 80001b4:	2301      	movs	r3, #1
 80001b6:	480f      	ldr	r0, [pc, #60]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001b8:	f003 f817 	bl	80031ea <HAL_SPI_TransmitReceive>

  if (addr!=STATUS_NRF)
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	2b07      	cmp	r3, #7
 80001c0:	d00c      	beq.n	80001dc <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 80001c2:	23ff      	movs	r3, #255	; 0xff
 80001c4:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 80001c6:	f107 020f 	add.w	r2, r7, #15
 80001ca:	f107 010e 	add.w	r1, r7, #14
 80001ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d2:	9300      	str	r3, [sp, #0]
 80001d4:	2301      	movs	r3, #1
 80001d6:	4807      	ldr	r0, [pc, #28]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001d8:	f003 f807 	bl	80031ea <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 80001dc:	2201      	movs	r2, #1
 80001de:	2110      	movs	r1, #16
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001e2:	f001 fca4 	bl	8001b2e <HAL_GPIO_WritePin>
  return dt;
 80001e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3710      	adds	r7, #16
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40010800 	.word	0x40010800
 80001f4:	20000574 	.word	0x20000574

080001f8 <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	460a      	mov	r2, r1
 8000202:	71fb      	strb	r3, [r7, #7]
 8000204:	4613      	mov	r3, r2
 8000206:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	f043 0320 	orr.w	r3, r3, #32
 800020e:	b2db      	uxtb	r3, r3
 8000210:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	480d      	ldr	r0, [pc, #52]	; (800024c <NRF24_WriteReg+0x54>)
 8000218:	f001 fc89 	bl	8001b2e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800021c:	1df9      	adds	r1, r7, #7
 800021e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000222:	2201      	movs	r2, #1
 8000224:	480a      	ldr	r0, [pc, #40]	; (8000250 <NRF24_WriteReg+0x58>)
 8000226:	f002 fd93 	bl	8002d50 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 800022a:	1db9      	adds	r1, r7, #6
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	2201      	movs	r2, #1
 8000232:	4807      	ldr	r0, [pc, #28]	; (8000250 <NRF24_WriteReg+0x58>)
 8000234:	f002 fd8c 	bl	8002d50 <HAL_SPI_Transmit>
  CS_OFF;
 8000238:	2201      	movs	r2, #1
 800023a:	2110      	movs	r1, #16
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <NRF24_WriteReg+0x54>)
 800023e:	f001 fc76 	bl	8001b2e <HAL_GPIO_WritePin>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40010800 	.word	0x40010800
 8000250:	20000574 	.word	0x20000574

08000254 <NRF24_ToggleFeatures>:
//----------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 800025a:	2350      	movs	r3, #80	; 0x50
 800025c:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800025e:	2200      	movs	r2, #0
 8000260:	2110      	movs	r1, #16
 8000262:	480f      	ldr	r0, [pc, #60]	; (80002a0 <NRF24_ToggleFeatures+0x4c>)
 8000264:	f001 fc63 	bl	8001b2e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000268:	1d39      	adds	r1, r7, #4
 800026a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800026e:	2201      	movs	r2, #1
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <NRF24_ToggleFeatures+0x50>)
 8000272:	f002 fd6d 	bl	8002d50 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000276:	2001      	movs	r0, #1
 8000278:	f7ff ff68 	bl	800014c <DelayMicro>
  dt[0] = 0x73;
 800027c:	2373      	movs	r3, #115	; 0x73
 800027e:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000280:	1d39      	adds	r1, r7, #4
 8000282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000286:	2201      	movs	r2, #1
 8000288:	4806      	ldr	r0, [pc, #24]	; (80002a4 <NRF24_ToggleFeatures+0x50>)
 800028a:	f002 fd61 	bl	8002d50 <HAL_SPI_Transmit>
  CS_OFF;
 800028e:	2201      	movs	r2, #1
 8000290:	2110      	movs	r1, #16
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <NRF24_ToggleFeatures+0x4c>)
 8000294:	f001 fc4b 	bl	8001b2e <HAL_GPIO_WritePin>
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40010800 	.word	0x40010800
 80002a4:	20000574 	.word	0x20000574

080002a8 <NRF24_Read_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	6039      	str	r1, [r7, #0]
 80002b2:	71fb      	strb	r3, [r7, #7]
 80002b4:	4613      	mov	r3, r2
 80002b6:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 80002b8:	2200      	movs	r2, #0
 80002ba:	2110      	movs	r1, #16
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <NRF24_Read_Buf+0x4c>)
 80002be:	f001 fc36 	bl	8001b2e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 80002c2:	1df9      	adds	r1, r7, #7
 80002c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c8:	2201      	movs	r2, #1
 80002ca:	480b      	ldr	r0, [pc, #44]	; (80002f8 <NRF24_Read_Buf+0x50>)
 80002cc:	f002 fd40 	bl	8002d50 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 80002d0:	79bb      	ldrb	r3, [r7, #6]
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d8:	6839      	ldr	r1, [r7, #0]
 80002da:	4807      	ldr	r0, [pc, #28]	; (80002f8 <NRF24_Read_Buf+0x50>)
 80002dc:	f002 fe74 	bl	8002fc8 <HAL_SPI_Receive>
  CS_OFF;
 80002e0:	2201      	movs	r2, #1
 80002e2:	2110      	movs	r1, #16
 80002e4:	4803      	ldr	r0, [pc, #12]	; (80002f4 <NRF24_Read_Buf+0x4c>)
 80002e6:	f001 fc22 	bl	8001b2e <HAL_GPIO_WritePin>
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40010800 	.word	0x40010800
 80002f8:	20000574 	.word	0x20000574

080002fc <NRF24_Write_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]
 8000308:	4613      	mov	r3, r2
 800030a:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								//Add write bit
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	f043 0320 	orr.w	r3, r3, #32
 8000312:	b2db      	uxtb	r3, r3
 8000314:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000316:	2200      	movs	r2, #0
 8000318:	2110      	movs	r1, #16
 800031a:	480f      	ldr	r0, [pc, #60]	; (8000358 <NRF24_Write_Buf+0x5c>)
 800031c:	f001 fc07 	bl	8001b2e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000320:	1df9      	adds	r1, r7, #7
 8000322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000326:	2201      	movs	r2, #1
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <NRF24_Write_Buf+0x60>)
 800032a:	f002 fd11 	bl	8002d50 <HAL_SPI_Transmit>
  DelayMicro(1);
 800032e:	2001      	movs	r0, #1
 8000330:	f7ff ff0c 	bl	800014c <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000);			// Send data in buffer
 8000334:	79bb      	ldrb	r3, [r7, #6]
 8000336:	b29a      	uxth	r2, r3
 8000338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033c:	6839      	ldr	r1, [r7, #0]
 800033e:	4807      	ldr	r0, [pc, #28]	; (800035c <NRF24_Write_Buf+0x60>)
 8000340:	f002 fd06 	bl	8002d50 <HAL_SPI_Transmit>
  CS_OFF;
 8000344:	2201      	movs	r2, #1
 8000346:	2110      	movs	r1, #16
 8000348:	4803      	ldr	r0, [pc, #12]	; (8000358 <NRF24_Write_Buf+0x5c>)
 800034a:	f001 fbf0 	bl	8001b2e <HAL_GPIO_WritePin>
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010800 	.word	0x40010800
 800035c:	20000574 	.word	0x20000574

08000360 <NRF24_FlushRX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushRX(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 8000366:	23e2      	movs	r3, #226	; 0xe2
 8000368:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800036a:	2200      	movs	r2, #0
 800036c:	2110      	movs	r1, #16
 800036e:	480b      	ldr	r0, [pc, #44]	; (800039c <NRF24_FlushRX+0x3c>)
 8000370:	f001 fbdd 	bl	8001b2e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000374:	1d39      	adds	r1, r7, #4
 8000376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800037a:	2201      	movs	r2, #1
 800037c:	4808      	ldr	r0, [pc, #32]	; (80003a0 <NRF24_FlushRX+0x40>)
 800037e:	f002 fce7 	bl	8002d50 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000382:	2001      	movs	r0, #1
 8000384:	f7ff fee2 	bl	800014c <DelayMicro>
  CS_OFF;
 8000388:	2201      	movs	r2, #1
 800038a:	2110      	movs	r1, #16
 800038c:	4803      	ldr	r0, [pc, #12]	; (800039c <NRF24_FlushRX+0x3c>)
 800038e:	f001 fbce 	bl	8001b2e <HAL_GPIO_WritePin>
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40010800 	.word	0x40010800
 80003a0:	20000574 	.word	0x20000574

080003a4 <NRF24_FlushTX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushTX(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 80003aa:	23e1      	movs	r3, #225	; 0xe1
 80003ac:	713b      	strb	r3, [r7, #4]
  CS_ON;
 80003ae:	2200      	movs	r2, #0
 80003b0:	2110      	movs	r1, #16
 80003b2:	480b      	ldr	r0, [pc, #44]	; (80003e0 <NRF24_FlushTX+0x3c>)
 80003b4:	f001 fbbb 	bl	8001b2e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 80003b8:	1d39      	adds	r1, r7, #4
 80003ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003be:	2201      	movs	r2, #1
 80003c0:	4808      	ldr	r0, [pc, #32]	; (80003e4 <NRF24_FlushTX+0x40>)
 80003c2:	f002 fcc5 	bl	8002d50 <HAL_SPI_Transmit>
  DelayMicro(1);
 80003c6:	2001      	movs	r0, #1
 80003c8:	f7ff fec0 	bl	800014c <DelayMicro>
  CS_OFF;
 80003cc:	2201      	movs	r2, #1
 80003ce:	2110      	movs	r1, #16
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <NRF24_FlushTX+0x3c>)
 80003d2:	f001 fbac 	bl	8001b2e <HAL_GPIO_WritePin>
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40010800 	.word	0x40010800
 80003e4:	20000574 	.word	0x20000574

080003e8 <NRF24L01_RX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 80003ee:	2300      	movs	r3, #0
 80003f0:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 80003f2:	2000      	movs	r0, #0
 80003f4:	f7ff fecc 	bl	8000190 <NRF24_ReadReg>
 80003f8:	4603      	mov	r3, r0
 80003fa:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP)|(1<<PRIM_RX);	 // Power up module. Write PWR_UP и PRIM_RX bits
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	f043 0303 	orr.w	r3, r3, #3
 8000402:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	4619      	mov	r1, r3
 8000408:	2000      	movs	r0, #0
 800040a:	f7ff fef5 	bl	80001f8 <NRF24_WriteReg>
  CE_SET;
 800040e:	2201      	movs	r2, #1
 8000410:	2108      	movs	r1, #8
 8000412:	4807      	ldr	r0, [pc, #28]	; (8000430 <NRF24L01_RX_Mode+0x48>)
 8000414:	f001 fb8b 	bl	8001b2e <HAL_GPIO_WritePin>
  DelayMicro(150);						 // Delay 130 us
 8000418:	2096      	movs	r0, #150	; 0x96
 800041a:	f7ff fe97 	bl	800014c <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 800041e:	f7ff ff9f 	bl	8000360 <NRF24_FlushRX>
  NRF24_FlushTX();
 8000422:	f7ff ffbf 	bl	80003a4 <NRF24_FlushTX>
}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40010800 	.word	0x40010800

08000434 <NRF24_ini>:
//----------------------------------------------------------------------------------------
void NRF24_ini(void)    // TRANSMITTER
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	CE_RESET;
 8000438:	2200      	movs	r2, #0
 800043a:	2108      	movs	r1, #8
 800043c:	4824      	ldr	r0, [pc, #144]	; (80004d0 <NRF24_ini+0x9c>)
 800043e:	f001 fb76 	bl	8001b2e <HAL_GPIO_WritePin>
	DelayMicro(5000);
 8000442:	f241 3088 	movw	r0, #5000	; 0x1388
 8000446:	f7ff fe81 	bl	800014c <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 800044a:	210a      	movs	r1, #10
 800044c:	2000      	movs	r0, #0
 800044e:	f7ff fed3 	bl	80001f8 <NRF24_WriteReg>

	DelayMicro(5000);
 8000452:	f241 3088 	movw	r0, #5000	; 0x1388
 8000456:	f7ff fe79 	bl	800014c <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable Pipe0
 800045a:	2101      	movs	r1, #1
 800045c:	2001      	movs	r0, #1
 800045e:	f7ff fecb 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe0
 8000462:	2101      	movs	r1, #1
 8000464:	2002      	movs	r0, #2
 8000466:	f7ff fec7 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 800046a:	2101      	movs	r1, #1
 800046c:	2003      	movs	r0, #3
 800046e:	f7ff fec3 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 8000472:	215f      	movs	r1, #95	; 0x5f
 8000474:	2004      	movs	r0, #4
 8000476:	f7ff febf 	bl	80001f8 <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 800047a:	f7ff feeb 	bl	8000254 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 800047e:	2100      	movs	r1, #0
 8000480:	201d      	movs	r0, #29
 8000482:	f7ff feb9 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 8000486:	2100      	movs	r1, #0
 8000488:	201c      	movs	r0, #28
 800048a:	f7ff feb5 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 800048e:	2170      	movs	r1, #112	; 0x70
 8000490:	2007      	movs	r0, #7
 8000492:	f7ff feb1 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 8000496:	214c      	movs	r1, #76	; 0x4c
 8000498:	2005      	movs	r0, #5
 800049a:	f7ff fead 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate:250kbps
 800049e:	2126      	movs	r1, #38	; 0x26
 80004a0:	2006      	movs	r0, #6
 80004a2:	f7ff fea9 	bl	80001f8 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);			// Write TX address
 80004a6:	2203      	movs	r2, #3
 80004a8:	490a      	ldr	r1, [pc, #40]	; (80004d4 <NRF24_ini+0xa0>)
 80004aa:	2010      	movs	r0, #16
 80004ac:	f7ff ff26 	bl	80002fc <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);		// Set up pipe 0 address
 80004b0:	2203      	movs	r2, #3
 80004b2:	4908      	ldr	r1, [pc, #32]	; (80004d4 <NRF24_ini+0xa0>)
 80004b4:	200a      	movs	r0, #10
 80004b6:	f7ff ff21 	bl	80002fc <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 	// Number of bytes in TX buffer
 80004ba:	210a      	movs	r1, #10
 80004bc:	2011      	movs	r0, #17
 80004be:	f7ff fe9b 	bl	80001f8 <NRF24_WriteReg>

	NRF24L01_RX_Mode();
 80004c2:	f7ff ff91 	bl	80003e8 <NRF24L01_RX_Mode>

	read_config_registers();	// For debug
 80004c6:	f000 f807 	bl	80004d8 <read_config_registers>
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40010800 	.word	0x40010800
 80004d4:	20000000 	.word	0x20000000

080004d8 <read_config_registers>:
//----------------------------------------------------------------------------------------
// Read config data from nrf registers
void read_config_registers(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 80004dc:	2001      	movs	r0, #1
 80004de:	f000 ffa9 	bl	8001434 <HAL_Delay>

	config_array[0] = NRF24_ReadReg(CONFIG);			// 0x0B
 80004e2:	2000      	movs	r0, #0
 80004e4:	f7ff fe54 	bl	8000190 <NRF24_ReadReg>
 80004e8:	4603      	mov	r3, r0
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <read_config_registers+0x68>)
 80004ee:	701a      	strb	r2, [r3, #0]
	config_array[1] = NRF24_ReadReg(EN_AA);			    // 0x01
 80004f0:	2001      	movs	r0, #1
 80004f2:	f7ff fe4d 	bl	8000190 <NRF24_ReadReg>
 80004f6:	4603      	mov	r3, r0
 80004f8:	461a      	mov	r2, r3
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <read_config_registers+0x68>)
 80004fc:	705a      	strb	r2, [r3, #1]
	config_array[2] = NRF24_ReadReg(EN_RXADDR); 		// 0x01
 80004fe:	2002      	movs	r0, #2
 8000500:	f7ff fe46 	bl	8000190 <NRF24_ReadReg>
 8000504:	4603      	mov	r3, r0
 8000506:	461a      	mov	r2, r3
 8000508:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <read_config_registers+0x68>)
 800050a:	709a      	strb	r2, [r3, #2]
	config_array[3] = NRF24_ReadReg(STATUS_NRF);		// 0x0E
 800050c:	2007      	movs	r0, #7
 800050e:	f7ff fe3f 	bl	8000190 <NRF24_ReadReg>
 8000512:	4603      	mov	r3, r0
 8000514:	461a      	mov	r2, r3
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <read_config_registers+0x68>)
 8000518:	70da      	strb	r2, [r3, #3]
	config_array[4] = NRF24_ReadReg(RF_SETUP);		    // 0x06
 800051a:	2006      	movs	r0, #6
 800051c:	f7ff fe38 	bl	8000190 <NRF24_ReadReg>
 8000520:	4603      	mov	r3, r0
 8000522:	461a      	mov	r2, r3
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <read_config_registers+0x68>)
 8000526:	711a      	strb	r2, [r3, #4]

	NRF24_Read_Buf(TX_ADDR,buf1,3);
 8000528:	2203      	movs	r2, #3
 800052a:	4906      	ldr	r1, [pc, #24]	; (8000544 <read_config_registers+0x6c>)
 800052c:	2010      	movs	r0, #16
 800052e:	f7ff febb 	bl	80002a8 <NRF24_Read_Buf>
	NRF24_Read_Buf(RX_ADDR_P0,buf1,3);
 8000532:	2203      	movs	r2, #3
 8000534:	4903      	ldr	r1, [pc, #12]	; (8000544 <read_config_registers+0x6c>)
 8000536:	200a      	movs	r0, #10
 8000538:	f7ff feb6 	bl	80002a8 <NRF24_Read_Buf>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200000b0 	.word	0x200000b0
 8000544:	2000009c 	.word	0x2000009c

08000548 <NRF24L01_TX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 8000550:	2203      	movs	r2, #3
 8000552:	4908      	ldr	r1, [pc, #32]	; (8000574 <NRF24L01_TX_Mode+0x2c>)
 8000554:	2010      	movs	r0, #16
 8000556:	f7ff fed1 	bl	80002fc <NRF24_Write_Buf>
  CE_RESET;
 800055a:	2200      	movs	r2, #0
 800055c:	2108      	movs	r1, #8
 800055e:	4806      	ldr	r0, [pc, #24]	; (8000578 <NRF24L01_TX_Mode+0x30>)
 8000560:	f001 fae5 	bl	8001b2e <HAL_GPIO_WritePin>
  // Flush buffers
  NRF24_FlushRX();
 8000564:	f7ff fefc 	bl	8000360 <NRF24_FlushRX>
  NRF24_FlushTX();
 8000568:	f7ff ff1c 	bl	80003a4 <NRF24_FlushTX>
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000000 	.word	0x20000000
 8000578:	40010800 	.word	0x40010800

0800057c <NRF24_Transmit>:
//----------------------------------------------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	6039      	str	r1, [r7, #0]
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	71bb      	strb	r3, [r7, #6]
  CE_RESET;
 800058c:	2200      	movs	r2, #0
 800058e:	2108      	movs	r1, #8
 8000590:	4813      	ldr	r0, [pc, #76]	; (80005e0 <NRF24_Transmit+0x64>)
 8000592:	f001 facc 	bl	8001b2e <HAL_GPIO_WritePin>
  CS_ON;
 8000596:	2200      	movs	r2, #0
 8000598:	2110      	movs	r1, #16
 800059a:	4811      	ldr	r0, [pc, #68]	; (80005e0 <NRF24_Transmit+0x64>)
 800059c:	f001 fac7 	bl	8001b2e <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);	//Send address in NRF module
 80005a0:	1df9      	adds	r1, r7, #7
 80005a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a6:	2201      	movs	r2, #1
 80005a8:	480e      	ldr	r0, [pc, #56]	; (80005e4 <NRF24_Transmit+0x68>)
 80005aa:	f002 fbd1 	bl	8002d50 <HAL_SPI_Transmit>
  DelayMicro(1);
 80005ae:	2001      	movs	r0, #1
 80005b0:	f7ff fdcc 	bl	800014c <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000); //Send buff in NRF module
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005bc:	6839      	ldr	r1, [r7, #0]
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <NRF24_Transmit+0x68>)
 80005c0:	f002 fbc6 	bl	8002d50 <HAL_SPI_Transmit>
  CS_OFF;
 80005c4:	2201      	movs	r2, #1
 80005c6:	2110      	movs	r1, #16
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <NRF24_Transmit+0x64>)
 80005ca:	f001 fab0 	bl	8001b2e <HAL_GPIO_WritePin>
  CE_SET;
 80005ce:	2201      	movs	r2, #1
 80005d0:	2108      	movs	r1, #8
 80005d2:	4803      	ldr	r0, [pc, #12]	; (80005e0 <NRF24_Transmit+0x64>)
 80005d4:	f001 faab 	bl	8001b2e <HAL_GPIO_WritePin>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40010800 	.word	0x40010800
 80005e4:	20000574 	.word	0x20000574

080005e8 <NRF24L01_Send>:
//----------------------------------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint8_t status=0x00, regval=0x00;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
 80005f4:	2300      	movs	r3, #0
 80005f6:	73bb      	strb	r3, [r7, #14]
  NRF24L01_TX_Mode(pBuf);
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff ffa5 	bl	8000548 <NRF24L01_TX_Mode>
  regval = NRF24_ReadReg(CONFIG);
 80005fe:	2000      	movs	r0, #0
 8000600:	f7ff fdc6 	bl	8000190 <NRF24_ReadReg>
 8000604:	4603      	mov	r3, r0
 8000606:	73bb      	strb	r3, [r7, #14]
  // If module in sleep mode, wake up it send PWR_UP and PRIM_RX bits in CONFIG
  regval |= (1<<PWR_UP);			// Set power up
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	f043 0302 	orr.w	r3, r3, #2
 800060e:	73bb      	strb	r3, [r7, #14]
  regval &= ~(1<<PRIM_RX);			// Set TX mode
 8000610:	7bbb      	ldrb	r3, [r7, #14]
 8000612:	f023 0301 	bic.w	r3, r3, #1
 8000616:	73bb      	strb	r3, [r7, #14]
  NRF24_WriteReg(CONFIG,regval);
 8000618:	7bbb      	ldrb	r3, [r7, #14]
 800061a:	4619      	mov	r1, r3
 800061c:	2000      	movs	r0, #0
 800061e:	f7ff fdeb 	bl	80001f8 <NRF24_WriteReg>
  DelayMicro(150); 					// Delay more then 130 us
 8000622:	2096      	movs	r0, #150	; 0x96
 8000624:	f7ff fd92 	bl	800014c <DelayMicro>
  NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);	// Send data
 8000628:	220a      	movs	r2, #10
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	20a0      	movs	r0, #160	; 0xa0
 800062e:	f7ff ffa5 	bl	800057c <NRF24_Transmit>

  CE_SET;
 8000632:	2201      	movs	r2, #1
 8000634:	2108      	movs	r1, #8
 8000636:	481c      	ldr	r0, [pc, #112]	; (80006a8 <NRF24L01_Send+0xc0>)
 8000638:	f001 fa79 	bl	8001b2e <HAL_GPIO_WritePin>
  DelayMicro(15); 					//minimum 10us high pulse (Page 21)
 800063c:	200f      	movs	r0, #15
 800063e:	f7ff fd85 	bl	800014c <DelayMicro>
  CE_RESET;
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	4818      	ldr	r0, [pc, #96]	; (80006a8 <NRF24L01_Send+0xc0>)
 8000648:	f001 fa71 	bl	8001b2e <HAL_GPIO_WritePin>

  // Waiting interrupt signal from IRQ
  while((GPIO_PinState)IRQ == GPIO_PIN_SET){}
 800064c:	bf00      	nop
 800064e:	2104      	movs	r1, #4
 8000650:	4815      	ldr	r0, [pc, #84]	; (80006a8 <NRF24L01_Send+0xc0>)
 8000652:	f001 fa55 	bl	8001b00 <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d0f8      	beq.n	800064e <NRF24L01_Send+0x66>

  status = NRF24_ReadReg(STATUS_NRF);		// Read status sent data to RX
 800065c:	2007      	movs	r0, #7
 800065e:	f7ff fd97 	bl	8000190 <NRF24_ReadReg>
 8000662:	4603      	mov	r3, r0
 8000664:	73fb      	strb	r3, [r7, #15]
  if(status & TX_DS) 	     //TX_DS == 0x20   // When transmitted data was receive, and we take back ACK answer
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	f003 0320 	and.w	r3, r3, #32
 800066c:	2b00      	cmp	r3, #0
 800066e:	d004      	beq.n	800067a <NRF24L01_Send+0x92>
  {
      NRF24_WriteReg(STATUS_NRF, 0x20);
 8000670:	2120      	movs	r1, #32
 8000672:	2007      	movs	r0, #7
 8000674:	f7ff fdc0 	bl	80001f8 <NRF24_WriteReg>
 8000678:	e00a      	b.n	8000690 <NRF24L01_Send+0xa8>
  }
  else if(status & MAX_RT)   //MAX_RT == 0x10  // Retransmeet data flag
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	f003 0310 	and.w	r3, r3, #16
 8000680:	2b00      	cmp	r3, #0
 8000682:	d005      	beq.n	8000690 <NRF24L01_Send+0xa8>
  {
    NRF24_WriteReg(STATUS_NRF, 0x10);
 8000684:	2110      	movs	r1, #16
 8000686:	2007      	movs	r0, #7
 8000688:	f7ff fdb6 	bl	80001f8 <NRF24_WriteReg>
    NRF24_FlushTX();
 800068c:	f7ff fe8a 	bl	80003a4 <NRF24_FlushTX>
  }

  regval = NRF24_ReadReg(OBSERVE_TX);   // Return Count lost packets and count transmitted packets
 8000690:	2008      	movs	r0, #8
 8000692:	f7ff fd7d 	bl	8000190 <NRF24_ReadReg>
 8000696:	4603      	mov	r3, r0
 8000698:	73bb      	strb	r3, [r7, #14]

  // Switch on RX mode
  NRF24L01_RX_Mode();
 800069a:	f7ff fea5 	bl	80003e8 <NRF24L01_RX_Mode>

  return regval;
 800069e:	7bbb      	ldrb	r3, [r7, #14]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40010800 	.word	0x40010800

080006ac <nrf_communication_test>:
//----------------------------------------------------------------------------------------
void nrf_communication_test(void)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b091      	sub	sp, #68	; 0x44
 80006b0:	af00      	add	r7, sp, #0
	NRF24_ini();
 80006b2:	f7ff febf 	bl	8000434 <NRF24_ini>

	char ctr[5] = {0};
 80006b6:	2300      	movs	r3, #0
 80006b8:	637b      	str	r3, [r7, #52]	; 0x34
 80006ba:	2300      	movs	r3, #0
 80006bc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	char ctr_buf[5] = {0};
 80006c0:	2300      	movs	r3, #0
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006c4:	2300      	movs	r3, #0
 80006c6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uint8_t retr_cnt, dt = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	int test_data = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c

	while(1)
	{
		// Test transmit data
		sprintf(buf1, "%d", test_data);
 80006d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006d6:	4971      	ldr	r1, [pc, #452]	; (800089c <nrf_communication_test+0x1f0>)
 80006d8:	4871      	ldr	r0, [pc, #452]	; (80008a0 <nrf_communication_test+0x1f4>)
 80006da:	f003 fc69 	bl	8003fb0 <siprintf>

		// Print transmit data
		uint8_t test[25] = {0};
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
 80006f2:	751a      	strb	r2, [r3, #20]
		uint8_t test_i[10] = {0};
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	809a      	strh	r2, [r3, #4]

		ssd1306_SetCursor(0, 16);
 8000702:	2110      	movs	r1, #16
 8000704:	2000      	movs	r0, #0
 8000706:	f000 fab9 	bl	8000c7c <ssd1306_SetCursor>
		strcpy(test, "Data:");
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	4a65      	ldr	r2, [pc, #404]	; (80008a4 <nrf_communication_test+0x1f8>)
 8000710:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000714:	6018      	str	r0, [r3, #0]
 8000716:	3304      	adds	r3, #4
 8000718:	8019      	strh	r1, [r3, #0]
		strcat(test, buf1);
 800071a:	f107 0310 	add.w	r3, r7, #16
 800071e:	4960      	ldr	r1, [pc, #384]	; (80008a0 <nrf_communication_test+0x1f4>)
 8000720:	4618      	mov	r0, r3
 8000722:	f003 fc65 	bl	8003ff0 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 8000726:	4a60      	ldr	r2, [pc, #384]	; (80008a8 <nrf_communication_test+0x1fc>)
 8000728:	f107 0010 	add.w	r0, r7, #16
 800072c:	2301      	movs	r3, #1
 800072e:	ca06      	ldmia	r2, {r1, r2}
 8000730:	f000 fa7e 	bl	8000c30 <ssd1306_WriteString>

		dt = NRF24L01_Send(buf1);						// Transmit data
 8000734:	485a      	ldr	r0, [pc, #360]	; (80008a0 <nrf_communication_test+0x1f4>)
 8000736:	f7ff ff57 	bl	80005e8 <NRF24L01_Send>
 800073a:	4603      	mov	r3, r0
 800073c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		retr_cnt = dt & 0xF;
 8000740:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000744:	f003 030f 	and.w	r3, r3, #15
 8000748:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		retr_cnt_full += retr_cnt;
 800074c:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8000750:	4b56      	ldr	r3, [pc, #344]	; (80008ac <nrf_communication_test+0x200>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4413      	add	r3, r2
 8000756:	4a55      	ldr	r2, [pc, #340]	; (80008ac <nrf_communication_test+0x200>)
 8000758:	6013      	str	r3, [r2, #0]

		// Print transmit counter
		memset(test, 0, sizeof(test));
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	2219      	movs	r2, #25
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f003 fc1c 	bl	8003fa0 <memset>
		memset(test_i, 0, sizeof(test_i));
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	220a      	movs	r2, #10
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fc16 	bl	8003fa0 <memset>

		ssd1306_SetCursor(0, 26);
 8000774:	211a      	movs	r1, #26
 8000776:	2000      	movs	r0, #0
 8000778:	f000 fa80 	bl	8000c7c <ssd1306_SetCursor>
		strcpy(test, "Conut trans:");
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	4a4b      	ldr	r2, [pc, #300]	; (80008b0 <nrf_communication_test+0x204>)
 8000782:	461c      	mov	r4, r3
 8000784:	4613      	mov	r3, r2
 8000786:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000788:	c407      	stmia	r4!, {r0, r1, r2}
 800078a:	7023      	strb	r3, [r4, #0]
		// number in string
		itoa(i, test_i, 10);
 800078c:	4b49      	ldr	r3, [pc, #292]	; (80008b4 <nrf_communication_test+0x208>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	1d39      	adds	r1, r7, #4
 8000792:	220a      	movs	r2, #10
 8000794:	4618      	mov	r0, r3
 8000796:	f003 fc01 	bl	8003f9c <itoa>
		strcat(test, test_i);
 800079a:	1d3a      	adds	r2, r7, #4
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f003 fc24 	bl	8003ff0 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 80007a8:	4a3f      	ldr	r2, [pc, #252]	; (80008a8 <nrf_communication_test+0x1fc>)
 80007aa:	f107 0010 	add.w	r0, r7, #16
 80007ae:	2301      	movs	r3, #1
 80007b0:	ca06      	ldmia	r2, {r1, r2}
 80007b2:	f000 fa3d 	bl	8000c30 <ssd1306_WriteString>

		// Print retransmeet counter
		memset(test, 0, sizeof(test));
 80007b6:	f107 0310 	add.w	r3, r7, #16
 80007ba:	2219      	movs	r2, #25
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 fbee 	bl	8003fa0 <memset>
		memset(test_i, 0, sizeof(test_i));
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	220a      	movs	r2, #10
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f003 fbe8 	bl	8003fa0 <memset>

		ssd1306_SetCursor(0, 36);
 80007d0:	2124      	movs	r1, #36	; 0x24
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 fa52 	bl	8000c7c <ssd1306_SetCursor>
		strcpy(test, "Retransm:");
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4a36      	ldr	r2, [pc, #216]	; (80008b8 <nrf_communication_test+0x20c>)
 80007de:	ca07      	ldmia	r2, {r0, r1, r2}
 80007e0:	c303      	stmia	r3!, {r0, r1}
 80007e2:	801a      	strh	r2, [r3, #0]
		itoa(retr_cnt_full, test_i, 10);
 80007e4:	4b31      	ldr	r3, [pc, #196]	; (80008ac <nrf_communication_test+0x200>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	1d39      	adds	r1, r7, #4
 80007ea:	220a      	movs	r2, #10
 80007ec:	4618      	mov	r0, r3
 80007ee:	f003 fbd5 	bl	8003f9c <itoa>
		strcat(test, test_i);
 80007f2:	1d3a      	adds	r2, r7, #4
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 fbf8 	bl	8003ff0 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 8000800:	4a29      	ldr	r2, [pc, #164]	; (80008a8 <nrf_communication_test+0x1fc>)
 8000802:	f107 0010 	add.w	r0, r7, #16
 8000806:	2301      	movs	r3, #1
 8000808:	ca06      	ldmia	r2, {r1, r2}
 800080a:	f000 fa11 	bl	8000c30 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800080e:	f000 f8ff 	bl	8000a10 <ssd1306_UpdateScreen>

		// Print lost pacets
		memset(test, 0, sizeof(test));
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	2219      	movs	r2, #25
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f003 fbc0 	bl	8003fa0 <memset>
		memset(test_i, 0, sizeof(test_i));
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	220a      	movs	r2, #10
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f003 fbba 	bl	8003fa0 <memset>

		cnt_lost = dt >> 4;
 800082c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000830:	091b      	lsrs	r3, r3, #4
 8000832:	b2db      	uxtb	r3, r3
 8000834:	461a      	mov	r2, r3
 8000836:	4b21      	ldr	r3, [pc, #132]	; (80008bc <nrf_communication_test+0x210>)
 8000838:	601a      	str	r2, [r3, #0]

		ssd1306_SetCursor(0, 46);
 800083a:	212e      	movs	r1, #46	; 0x2e
 800083c:	2000      	movs	r0, #0
 800083e:	f000 fa1d 	bl	8000c7c <ssd1306_SetCursor>
		strcpy(test, "Lost:");
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	4a1e      	ldr	r2, [pc, #120]	; (80008c0 <nrf_communication_test+0x214>)
 8000848:	e892 0003 	ldmia.w	r2, {r0, r1}
 800084c:	6018      	str	r0, [r3, #0]
 800084e:	3304      	adds	r3, #4
 8000850:	8019      	strh	r1, [r3, #0]
		itoa(cnt_lost, test_i, 10);
 8000852:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <nrf_communication_test+0x210>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	1d39      	adds	r1, r7, #4
 8000858:	220a      	movs	r2, #10
 800085a:	4618      	mov	r0, r3
 800085c:	f003 fb9e 	bl	8003f9c <itoa>
		strcat(test, test_i);
 8000860:	1d3a      	adds	r2, r7, #4
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	4611      	mov	r1, r2
 8000868:	4618      	mov	r0, r3
 800086a:	f003 fbc1 	bl	8003ff0 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 800086e:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <nrf_communication_test+0x1fc>)
 8000870:	f107 0010 	add.w	r0, r7, #16
 8000874:	2301      	movs	r3, #1
 8000876:	ca06      	ldmia	r2, {r1, r2}
 8000878:	f000 f9da 	bl	8000c30 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800087c:	f000 f8c8 	bl	8000a10 <ssd1306_UpdateScreen>

		test_data++;
 8000880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000882:	3301      	adds	r3, #1
 8000884:	63fb      	str	r3, [r7, #60]	; 0x3c
		i++;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <nrf_communication_test+0x208>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	3301      	adds	r3, #1
 800088c:	4a09      	ldr	r2, [pc, #36]	; (80008b4 <nrf_communication_test+0x208>)
 800088e:	6013      	str	r3, [r2, #0]

		HAL_Delay(500);
 8000890:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000894:	f000 fdce 	bl	8001434 <HAL_Delay>
	{
 8000898:	e71c      	b.n	80006d4 <nrf_communication_test+0x28>
 800089a:	bf00      	nop
 800089c:	080048e0 	.word	0x080048e0
 80008a0:	2000009c 	.word	0x2000009c
 80008a4:	080048e4 	.word	0x080048e4
 80008a8:	20000008 	.word	0x20000008
 80008ac:	200000c0 	.word	0x200000c0
 80008b0:	080048ec 	.word	0x080048ec
 80008b4:	20000004 	.word	0x20000004
 80008b8:	080048fc 	.word	0x080048fc
 80008bc:	200000c4 	.word	0x200000c4
 80008c0:	08004908 	.word	0x08004908

080008c4 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af04      	add	r7, sp, #16
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80008ce:	230a      	movs	r3, #10
 80008d0:	9302      	str	r3, [sp, #8]
 80008d2:	2301      	movs	r3, #1
 80008d4:	9301      	str	r3, [sp, #4]
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2301      	movs	r3, #1
 80008dc:	2200      	movs	r2, #0
 80008de:	2178      	movs	r1, #120	; 0x78
 80008e0:	4803      	ldr	r0, [pc, #12]	; (80008f0 <ssd1306_WriteCommand+0x2c>)
 80008e2:	f001 fa81 	bl	8001de8 <HAL_I2C_Mem_Write>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200004dc 	.word	0x200004dc

080008f4 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 80008f8:	2064      	movs	r0, #100	; 0x64
 80008fa:	f000 fd9b 	bl	8001434 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 80008fe:	20ae      	movs	r0, #174	; 0xae
 8000900:	f7ff ffe0 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000904:	2020      	movs	r0, #32
 8000906:	f7ff ffdd 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800090a:	2010      	movs	r0, #16
 800090c:	f7ff ffda 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000910:	20b0      	movs	r0, #176	; 0xb0
 8000912:	f7ff ffd7 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000916:	20c8      	movs	r0, #200	; 0xc8
 8000918:	f7ff ffd4 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 800091c:	2000      	movs	r0, #0
 800091e:	f7ff ffd1 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8000922:	2010      	movs	r0, #16
 8000924:	f7ff ffce 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8000928:	2040      	movs	r0, #64	; 0x40
 800092a:	f7ff ffcb 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 800092e:	2081      	movs	r0, #129	; 0x81
 8000930:	f7ff ffc8 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8000934:	20ff      	movs	r0, #255	; 0xff
 8000936:	f7ff ffc5 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 800093a:	20a1      	movs	r0, #161	; 0xa1
 800093c:	f7ff ffc2 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8000940:	20a6      	movs	r0, #166	; 0xa6
 8000942:	f7ff ffbf 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8000946:	20a8      	movs	r0, #168	; 0xa8
 8000948:	f7ff ffbc 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 800094c:	203f      	movs	r0, #63	; 0x3f
 800094e:	f7ff ffb9 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000952:	20a4      	movs	r0, #164	; 0xa4
 8000954:	f7ff ffb6 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8000958:	20d3      	movs	r0, #211	; 0xd3
 800095a:	f7ff ffb3 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff ffb0 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000964:	20d5      	movs	r0, #213	; 0xd5
 8000966:	f7ff ffad 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 800096a:	20f0      	movs	r0, #240	; 0xf0
 800096c:	f7ff ffaa 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000970:	20d9      	movs	r0, #217	; 0xd9
 8000972:	f7ff ffa7 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8000976:	2022      	movs	r0, #34	; 0x22
 8000978:	f7ff ffa4 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 800097c:	20da      	movs	r0, #218	; 0xda
 800097e:	f7ff ffa1 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8000982:	2012      	movs	r0, #18
 8000984:	f7ff ff9e 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8000988:	20db      	movs	r0, #219	; 0xdb
 800098a:	f7ff ff9b 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800098e:	2020      	movs	r0, #32
 8000990:	f7ff ff98 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000994:	208d      	movs	r0, #141	; 0x8d
 8000996:	f7ff ff95 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 800099a:	2014      	movs	r0, #20
 800099c:	f7ff ff92 	bl	80008c4 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80009a0:	20af      	movs	r0, #175	; 0xaf
 80009a2:	f7ff ff8f 	bl	80008c4 <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f000 f810 	bl	80009cc <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 80009ac:	f000 f830 	bl	8000a10 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <ssd1306_Init+0xd4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80009b6:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <ssd1306_Init+0xd4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 80009bc:	4b02      	ldr	r3, [pc, #8]	; (80009c8 <ssd1306_Init+0xd4>)
 80009be:	2201      	movs	r2, #1
 80009c0:	715a      	strb	r2, [r3, #5]

	return 1;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200004c8 	.word	0x200004c8

080009cc <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	e00d      	b.n	80009f8 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d101      	bne.n	80009e6 <ssd1306_Fill+0x1a>
 80009e2:	2100      	movs	r1, #0
 80009e4:	e000      	b.n	80009e8 <ssd1306_Fill+0x1c>
 80009e6:	21ff      	movs	r1, #255	; 0xff
 80009e8:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <ssd1306_Fill+0x40>)
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	4413      	add	r3, r2
 80009ee:	460a      	mov	r2, r1
 80009f0:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	3301      	adds	r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009fe:	d3ed      	bcc.n	80009dc <ssd1306_Fill+0x10>
	}
}
 8000a00:	bf00      	nop
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	200000c8 	.word	0x200000c8

08000a10 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8000a16:	2300      	movs	r3, #0
 8000a18:	71fb      	strb	r3, [r7, #7]
 8000a1a:	e01d      	b.n	8000a58 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	3b50      	subs	r3, #80	; 0x50
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff ff4e 	bl	80008c4 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f7ff ff4b 	bl	80008c4 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8000a2e:	2010      	movs	r0, #16
 8000a30:	f7ff ff48 	bl	80008c4 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	01db      	lsls	r3, r3, #7
 8000a38:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <ssd1306_UpdateScreen+0x58>)
 8000a3a:	4413      	add	r3, r2
 8000a3c:	2264      	movs	r2, #100	; 0x64
 8000a3e:	9202      	str	r2, [sp, #8]
 8000a40:	2280      	movs	r2, #128	; 0x80
 8000a42:	9201      	str	r2, [sp, #4]
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2301      	movs	r3, #1
 8000a48:	2240      	movs	r2, #64	; 0x40
 8000a4a:	2178      	movs	r1, #120	; 0x78
 8000a4c:	4807      	ldr	r0, [pc, #28]	; (8000a6c <ssd1306_UpdateScreen+0x5c>)
 8000a4e:	f001 f9cb 	bl	8001de8 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	3301      	adds	r3, #1
 8000a56:	71fb      	strb	r3, [r7, #7]
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	2b07      	cmp	r3, #7
 8000a5c:	d9de      	bls.n	8000a1c <ssd1306_UpdateScreen+0xc>
	}
}
 8000a5e:	bf00      	nop
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200000c8 	.word	0x200000c8
 8000a6c:	200004dc 	.word	0x200004dc

08000a70 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	71bb      	strb	r3, [r7, #6]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	db48      	blt.n	8000b1c <ssd1306_DrawPixel+0xac>
 8000a8a:	79bb      	ldrb	r3, [r7, #6]
 8000a8c:	2b3f      	cmp	r3, #63	; 0x3f
 8000a8e:	d845      	bhi.n	8000b1c <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8000a90:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <ssd1306_DrawPixel+0xb8>)
 8000a92:	791b      	ldrb	r3, [r3, #4]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d006      	beq.n	8000aa6 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8000a98:	797b      	ldrb	r3, [r7, #5]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	bf0c      	ite	eq
 8000a9e:	2301      	moveq	r3, #1
 8000aa0:	2300      	movne	r3, #0
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 8000aa6:	797b      	ldrb	r3, [r7, #5]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d11a      	bne.n	8000ae2 <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000aac:	79fa      	ldrb	r2, [r7, #7]
 8000aae:	79bb      	ldrb	r3, [r7, #6]
 8000ab0:	08db      	lsrs	r3, r3, #3
 8000ab2:	b2d8      	uxtb	r0, r3
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	01db      	lsls	r3, r3, #7
 8000ab8:	4413      	add	r3, r2
 8000aba:	4a1c      	ldr	r2, [pc, #112]	; (8000b2c <ssd1306_DrawPixel+0xbc>)
 8000abc:	5cd3      	ldrb	r3, [r2, r3]
 8000abe:	b25a      	sxtb	r2, r3
 8000ac0:	79bb      	ldrb	r3, [r7, #6]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8000acc:	b25b      	sxtb	r3, r3
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	b259      	sxtb	r1, r3
 8000ad2:	79fa      	ldrb	r2, [r7, #7]
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	01db      	lsls	r3, r3, #7
 8000ad8:	4413      	add	r3, r2
 8000ada:	b2c9      	uxtb	r1, r1
 8000adc:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <ssd1306_DrawPixel+0xbc>)
 8000ade:	54d1      	strb	r1, [r2, r3]
 8000ae0:	e01d      	b.n	8000b1e <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000ae2:	79fa      	ldrb	r2, [r7, #7]
 8000ae4:	79bb      	ldrb	r3, [r7, #6]
 8000ae6:	08db      	lsrs	r3, r3, #3
 8000ae8:	b2d8      	uxtb	r0, r3
 8000aea:	4603      	mov	r3, r0
 8000aec:	01db      	lsls	r3, r3, #7
 8000aee:	4413      	add	r3, r2
 8000af0:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <ssd1306_DrawPixel+0xbc>)
 8000af2:	5cd3      	ldrb	r3, [r2, r3]
 8000af4:	b25a      	sxtb	r2, r3
 8000af6:	79bb      	ldrb	r3, [r7, #6]
 8000af8:	f003 0307 	and.w	r3, r3, #7
 8000afc:	2101      	movs	r1, #1
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	b25b      	sxtb	r3, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	b25b      	sxtb	r3, r3
 8000b08:	4013      	ands	r3, r2
 8000b0a:	b259      	sxtb	r1, r3
 8000b0c:	79fa      	ldrb	r2, [r7, #7]
 8000b0e:	4603      	mov	r3, r0
 8000b10:	01db      	lsls	r3, r3, #7
 8000b12:	4413      	add	r3, r2
 8000b14:	b2c9      	uxtb	r1, r1
 8000b16:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <ssd1306_DrawPixel+0xbc>)
 8000b18:	54d1      	strb	r1, [r2, r3]
 8000b1a:	e000      	b.n	8000b1e <ssd1306_DrawPixel+0xae>
		return;
 8000b1c:	bf00      	nop
	}
}
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	200004c8 	.word	0x200004c8
 8000b2c:	200000c8 	.word	0x200000c8

08000b30 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b089      	sub	sp, #36	; 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4604      	mov	r4, r0
 8000b38:	1d38      	adds	r0, r7, #4
 8000b3a:	e880 0006 	stmia.w	r0, {r1, r2}
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4623      	mov	r3, r4
 8000b42:	73fb      	strb	r3, [r7, #15]
 8000b44:	4613      	mov	r3, r2
 8000b46:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000b48:	4b38      	ldr	r3, [pc, #224]	; (8000c2c <ssd1306_WriteChar+0xfc>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	793b      	ldrb	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	2b7f      	cmp	r3, #127	; 0x7f
 8000b54:	dc06      	bgt.n	8000b64 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000b56:	4b35      	ldr	r3, [pc, #212]	; (8000c2c <ssd1306_WriteChar+0xfc>)
 8000b58:	885b      	ldrh	r3, [r3, #2]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	797b      	ldrb	r3, [r7, #5]
 8000b5e:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000b60:	2b3f      	cmp	r3, #63	; 0x3f
 8000b62:	dd01      	ble.n	8000b68 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	e05d      	b.n	8000c24 <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
 8000b6c:	e04c      	b.n	8000c08 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	3b20      	subs	r3, #32
 8000b74:	7979      	ldrb	r1, [r7, #5]
 8000b76:	fb01 f303 	mul.w	r3, r1, r3
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	440b      	add	r3, r1
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	4413      	add	r3, r2
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
 8000b8c:	e034      	b.n	8000bf8 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 8000b8e:	697a      	ldr	r2, [r7, #20]
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d012      	beq.n	8000bc4 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000b9e:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <ssd1306_WriteChar+0xfc>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	4413      	add	r3, r2
 8000baa:	b2d8      	uxtb	r0, r3
 8000bac:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <ssd1306_WriteChar+0xfc>)
 8000bae:	885b      	ldrh	r3, [r3, #2]
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	4413      	add	r3, r2
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	7bba      	ldrb	r2, [r7, #14]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f7ff ff57 	bl	8000a70 <ssd1306_DrawPixel>
 8000bc2:	e016      	b.n	8000bf2 <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <ssd1306_WriteChar+0xfc>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	4413      	add	r3, r2
 8000bd0:	b2d8      	uxtb	r0, r3
 8000bd2:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <ssd1306_WriteChar+0xfc>)
 8000bd4:	885b      	ldrh	r3, [r3, #2]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4413      	add	r3, r2
 8000bde:	b2d9      	uxtb	r1, r3
 8000be0:	7bbb      	ldrb	r3, [r7, #14]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	bf0c      	ite	eq
 8000be6:	2301      	moveq	r3, #1
 8000be8:	2300      	movne	r3, #0
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	461a      	mov	r2, r3
 8000bee:	f7ff ff3f 	bl	8000a70 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	61bb      	str	r3, [r7, #24]
 8000bf8:	793b      	ldrb	r3, [r7, #4]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d3c5      	bcc.n	8000b8e <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3301      	adds	r3, #1
 8000c06:	61fb      	str	r3, [r7, #28]
 8000c08:	797b      	ldrb	r3, [r7, #5]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d3ad      	bcc.n	8000b6e <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <ssd1306_WriteChar+0xfc>)
 8000c14:	881a      	ldrh	r2, [r3, #0]
 8000c16:	793b      	ldrb	r3, [r7, #4]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <ssd1306_WriteChar+0xfc>)
 8000c20:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3724      	adds	r7, #36	; 0x24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd90      	pop	{r4, r7, pc}
 8000c2c:	200004c8 	.word	0x200004c8

08000c30 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	1d38      	adds	r0, r7, #4
 8000c3a:	e880 0006 	stmia.w	r0, {r1, r2}
 8000c3e:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 8000c40:	e012      	b.n	8000c68 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	7818      	ldrb	r0, [r3, #0]
 8000c46:	78fb      	ldrb	r3, [r7, #3]
 8000c48:	1d3a      	adds	r2, r7, #4
 8000c4a:	ca06      	ldmia	r2, {r1, r2}
 8000c4c:	f7ff ff70 	bl	8000b30 <ssd1306_WriteChar>
 8000c50:	4603      	mov	r3, r0
 8000c52:	461a      	mov	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d002      	beq.n	8000c62 <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	e008      	b.n	8000c74 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	3301      	adds	r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d1e8      	bne.n	8000c42 <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	781b      	ldrb	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	460a      	mov	r2, r1
 8000c86:	71fb      	strb	r3, [r7, #7]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <ssd1306_SetCursor+0x2c>)
 8000c92:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000c94:	79bb      	ldrb	r3, [r7, #6]
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <ssd1306_SetCursor+0x2c>)
 8000c9a:	805a      	strh	r2, [r3, #2]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	200004c8 	.word	0x200004c8

08000cac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb2:	f000 fb5d 	bl	8001370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb6:	f000 f83d 	bl	8000d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cba:	f000 f90f 	bl	8000edc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cbe:	f000 f87f 	bl	8000dc0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000cc2:	f000 f8ab 	bl	8000e1c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000cc6:	f000 f8df 	bl	8000e88 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2025      	movs	r0, #37	; 0x25
 8000cd0:	f000 fcab 	bl	800162a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cd4:	2025      	movs	r0, #37	; 0x25
 8000cd6:	f000 fcc4 	bl	8001662 <HAL_NVIC_EnableIRQ>


  ssd1306_Init();
 8000cda:	f7ff fe0b 	bl	80008f4 <ssd1306_Init>
  ssd1306_Fill(Black);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f7ff fe74 	bl	80009cc <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8000ce4:	f7ff fe94 	bl	8000a10 <ssd1306_UpdateScreen>


#if nrf
  // Test write on OLED
  ssd1306_SetCursor(0, 0);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2000      	movs	r0, #0
 8000cec:	f7ff ffc6 	bl	8000c7c <ssd1306_SetCursor>
  char test_main[20] = {0};
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	f107 0308 	add.w	r3, r7, #8
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
  strcpy(test_main, "NRF24L01 RX");
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4a09      	ldr	r2, [pc, #36]	; (8000d2c <main+0x80>)
 8000d06:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  ssd1306_WriteString(test_main,  Font_7x10, White);
 8000d0c:	4a08      	ldr	r2, [pc, #32]	; (8000d30 <main+0x84>)
 8000d0e:	1d38      	adds	r0, r7, #4
 8000d10:	2301      	movs	r3, #1
 8000d12:	ca06      	ldmia	r2, {r1, r2}
 8000d14:	f7ff ff8c 	bl	8000c30 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000d18:	f7ff fe7a 	bl	8000a10 <ssd1306_UpdateScreen>

  NRF24_ini();
 8000d1c:	f7ff fb8a 	bl	8000434 <NRF24_ini>
  read_config_registers();
 8000d20:	f7ff fbda 	bl	80004d8 <read_config_registers>
#endif

  while (1)
  {
	#if nrf
  nrf_communication_test();      // Main function LORA
 8000d24:	f7ff fcc2 	bl	80006ac <nrf_communication_test>
  {
 8000d28:	e7fc      	b.n	8000d24 <main+0x78>
 8000d2a:	bf00      	nop
 8000d2c:	08004910 	.word	0x08004910
 8000d30:	20000008 	.word	0x20000008

08000d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b090      	sub	sp, #64	; 0x40
 8000d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3a:	f107 0318 	add.w	r3, r7, #24
 8000d3e:	2228      	movs	r2, #40	; 0x28
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f003 f92c 	bl	8003fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d56:	2301      	movs	r3, #1
 8000d58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d64:	2301      	movs	r3, #1
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000d72:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d78:	f107 0318 	add.w	r3, r7, #24
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f001 fb49 	bl	8002414 <HAL_RCC_OscConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d88:	f000 f94a 	bl	8001020 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d90:	2302      	movs	r3, #2
 8000d92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2102      	movs	r1, #2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f001 fdb4 	bl	8002914 <HAL_RCC_ClockConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000db2:	f000 f935 	bl	8001020 <Error_Handler>
  }
}
 8000db6:	bf00      	nop
 8000db8:	3740      	adds	r7, #64	; 0x40
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <MX_I2C1_Init+0x50>)
 8000dc6:	4a13      	ldr	r2, [pc, #76]	; (8000e14 <MX_I2C1_Init+0x54>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_I2C1_Init+0x50>)
 8000dcc:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <MX_I2C1_Init+0x58>)
 8000dce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <MX_I2C1_Init+0x50>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <MX_I2C1_Init+0x50>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <MX_I2C1_Init+0x50>)
 8000dde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000de2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <MX_I2C1_Init+0x50>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <MX_I2C1_Init+0x50>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <MX_I2C1_Init+0x50>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MX_I2C1_Init+0x50>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dfc:	4804      	ldr	r0, [pc, #16]	; (8000e10 <MX_I2C1_Init+0x50>)
 8000dfe:	f000 feaf 	bl	8001b60 <HAL_I2C_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e08:	f000 f90a 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200004dc 	.word	0x200004dc
 8000e14:	40005400 	.word	0x40005400
 8000e18:	000186a0 	.word	0x000186a0

08000e1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e22:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <MX_SPI1_Init+0x68>)
 8000e24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e50:	2220      	movs	r2, #32
 8000e52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e68:	220a      	movs	r2, #10
 8000e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <MX_SPI1_Init+0x64>)
 8000e6e:	f001 feeb 	bl	8002c48 <HAL_SPI_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e78:	f000 f8d2 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000574 	.word	0x20000574
 8000e84:	40013000 	.word	0x40013000

08000e88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <MX_USART1_UART_Init+0x50>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000e94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_USART1_UART_Init+0x4c>)
 8000ec0:	f002 fc2e 	bl	8003720 <HAL_UART_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eca:	f000 f8a9 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000530 	.word	0x20000530
 8000ed8:	40013800 	.word	0x40013800

08000edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef0:	4b47      	ldr	r3, [pc, #284]	; (8001010 <MX_GPIO_Init+0x134>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a46      	ldr	r2, [pc, #280]	; (8001010 <MX_GPIO_Init+0x134>)
 8000ef6:	f043 0310 	orr.w	r3, r3, #16
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b44      	ldr	r3, [pc, #272]	; (8001010 <MX_GPIO_Init+0x134>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0310 	and.w	r3, r3, #16
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f08:	4b41      	ldr	r3, [pc, #260]	; (8001010 <MX_GPIO_Init+0x134>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a40      	ldr	r2, [pc, #256]	; (8001010 <MX_GPIO_Init+0x134>)
 8000f0e:	f043 0320 	orr.w	r3, r3, #32
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b3e      	ldr	r3, [pc, #248]	; (8001010 <MX_GPIO_Init+0x134>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0320 	and.w	r3, r3, #32
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	4b3b      	ldr	r3, [pc, #236]	; (8001010 <MX_GPIO_Init+0x134>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a3a      	ldr	r2, [pc, #232]	; (8001010 <MX_GPIO_Init+0x134>)
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b38      	ldr	r3, [pc, #224]	; (8001010 <MX_GPIO_Init+0x134>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f38:	4b35      	ldr	r3, [pc, #212]	; (8001010 <MX_GPIO_Init+0x134>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a34      	ldr	r2, [pc, #208]	; (8001010 <MX_GPIO_Init+0x134>)
 8000f3e:	f043 0308 	orr.w	r3, r3, #8
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b32      	ldr	r3, [pc, #200]	; (8001010 <MX_GPIO_Init+0x134>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0308 	and.w	r3, r3, #8
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f56:	482f      	ldr	r0, [pc, #188]	; (8001014 <MX_GPIO_Init+0x138>)
 8000f58:	f000 fde9 	bl	8001b2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2108      	movs	r1, #8
 8000f60:	482d      	ldr	r0, [pc, #180]	; (8001018 <MX_GPIO_Init+0x13c>)
 8000f62:	f000 fde4 	bl	8001b2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	2110      	movs	r1, #16
 8000f6a:	482b      	ldr	r0, [pc, #172]	; (8001018 <MX_GPIO_Init+0x13c>)
 8000f6c:	f000 fddf 	bl	8001b2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	f242 0101 	movw	r1, #8193	; 0x2001
 8000f76:	4829      	ldr	r0, [pc, #164]	; (800101c <MX_GPIO_Init+0x140>)
 8000f78:	f000 fdd9 	bl	8001b2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	4619      	mov	r1, r3
 8000f94:	481f      	ldr	r0, [pc, #124]	; (8001014 <MX_GPIO_Init+0x138>)
 8000f96:	f000 fc2f 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 SW3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|SW3_Pin;
 8000f9a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000f9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	4619      	mov	r1, r3
 8000fae:	481a      	ldr	r0, [pc, #104]	; (8001018 <MX_GPIO_Init+0x13c>)
 8000fb0:	f000 fc22 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000fb4:	2318      	movs	r3, #24
 8000fb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4813      	ldr	r0, [pc, #76]	; (8001018 <MX_GPIO_Init+0x13c>)
 8000fcc:	f000 fc14 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 8000fd0:	f242 0301 	movw	r3, #8193	; 0x2001
 8000fd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 0310 	add.w	r3, r7, #16
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480c      	ldr	r0, [pc, #48]	; (800101c <MX_GPIO_Init+0x140>)
 8000fea:	f000 fc05 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AUX_Pin SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = AUX_Pin|SW1_Pin|SW2_Pin;
 8000fee:	f24c 0302 	movw	r3, #49154	; 0xc002
 8000ff2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	4619      	mov	r1, r3
 8001002:	4806      	ldr	r0, [pc, #24]	; (800101c <MX_GPIO_Init+0x140>)
 8001004:	f000 fbf8 	bl	80017f8 <HAL_GPIO_Init>

}
 8001008:	bf00      	nop
 800100a:	3720      	adds	r7, #32
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40021000 	.word	0x40021000
 8001014:	40011000 	.word	0x40011000
 8001018:	40010800 	.word	0x40010800
 800101c:	40010c00 	.word	0x40010c00

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	e7fe      	b.n	8001028 <Error_Handler+0x8>
	...

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_MspInit+0x5c>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	4a14      	ldr	r2, [pc, #80]	; (8001088 <HAL_MspInit+0x5c>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6193      	str	r3, [r2, #24]
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_MspInit+0x5c>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_MspInit+0x5c>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <HAL_MspInit+0x5c>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001054:	61d3      	str	r3, [r2, #28]
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <HAL_MspInit+0x5c>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_MspInit+0x60>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	4a04      	ldr	r2, [pc, #16]	; (800108c <HAL_MspInit+0x60>)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	40021000 	.word	0x40021000
 800108c:	40010000 	.word	0x40010000

08001090 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a15      	ldr	r2, [pc, #84]	; (8001100 <HAL_I2C_MspInit+0x70>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d123      	bne.n	80010f8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HAL_I2C_MspInit+0x74>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a13      	ldr	r2, [pc, #76]	; (8001104 <HAL_I2C_MspInit+0x74>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_I2C_MspInit+0x74>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010c8:	23c0      	movs	r3, #192	; 0xc0
 80010ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010cc:	2312      	movs	r3, #18
 80010ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	4619      	mov	r1, r3
 80010da:	480b      	ldr	r0, [pc, #44]	; (8001108 <HAL_I2C_MspInit+0x78>)
 80010dc:	f000 fb8c 	bl	80017f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_I2C_MspInit+0x74>)
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_I2C_MspInit+0x74>)
 80010e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ea:	61d3      	str	r3, [r2, #28]
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <HAL_I2C_MspInit+0x74>)
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40005400 	.word	0x40005400
 8001104:	40021000 	.word	0x40021000
 8001108:	40010c00 	.word	0x40010c00

0800110c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a1b      	ldr	r2, [pc, #108]	; (8001194 <HAL_SPI_MspInit+0x88>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d12f      	bne.n	800118c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <HAL_SPI_MspInit+0x8c>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a19      	ldr	r2, [pc, #100]	; (8001198 <HAL_SPI_MspInit+0x8c>)
 8001132:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_SPI_MspInit+0x8c>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_SPI_MspInit+0x8c>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4a13      	ldr	r2, [pc, #76]	; (8001198 <HAL_SPI_MspInit+0x8c>)
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_SPI_MspInit+0x8c>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800115c:	23a0      	movs	r3, #160	; 0xa0
 800115e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	4619      	mov	r1, r3
 800116e:	480b      	ldr	r0, [pc, #44]	; (800119c <HAL_SPI_MspInit+0x90>)
 8001170:	f000 fb42 	bl	80017f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001174:	2340      	movs	r3, #64	; 0x40
 8001176:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4619      	mov	r1, r3
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <HAL_SPI_MspInit+0x90>)
 8001188:	f000 fb36 	bl	80017f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800118c:	bf00      	nop
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40013000 	.word	0x40013000
 8001198:	40021000 	.word	0x40021000
 800119c:	40010800 	.word	0x40010800

080011a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a20      	ldr	r2, [pc, #128]	; (800123c <HAL_UART_MspInit+0x9c>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d139      	bne.n	8001234 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011c0:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <HAL_UART_MspInit+0xa0>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a1e      	ldr	r2, [pc, #120]	; (8001240 <HAL_UART_MspInit+0xa0>)
 80011c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <HAL_UART_MspInit+0xa0>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <HAL_UART_MspInit+0xa0>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	4a18      	ldr	r2, [pc, #96]	; (8001240 <HAL_UART_MspInit+0xa0>)
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	6193      	str	r3, [r2, #24]
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <HAL_UART_MspInit+0xa0>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	4619      	mov	r1, r3
 8001204:	480f      	ldr	r0, [pc, #60]	; (8001244 <HAL_UART_MspInit+0xa4>)
 8001206:	f000 faf7 	bl	80017f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800120a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800120e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4619      	mov	r1, r3
 800121e:	4809      	ldr	r0, [pc, #36]	; (8001244 <HAL_UART_MspInit+0xa4>)
 8001220:	f000 faea 	bl	80017f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	2100      	movs	r1, #0
 8001228:	2025      	movs	r0, #37	; 0x25
 800122a:	f000 f9fe 	bl	800162a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800122e:	2025      	movs	r0, #37	; 0x25
 8001230:	f000 fa17 	bl	8001662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001234:	bf00      	nop
 8001236:	3720      	adds	r7, #32
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40013800 	.word	0x40013800
 8001240:	40021000 	.word	0x40021000
 8001244:	40010800 	.word	0x40010800

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800124c:	e7fe      	b.n	800124c <NMI_Handler+0x4>

0800124e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <MemManage_Handler+0x4>

0800125a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <UsageFault_Handler+0x4>

08001266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr

0800128a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128e:	f000 f8b5 	bl	80013fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <USART1_IRQHandler+0x10>)
 800129e:	f002 fa8d 	bl	80037bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000530 	.word	0x20000530

080012ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b4:	4a14      	ldr	r2, [pc, #80]	; (8001308 <_sbrk+0x5c>)
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <_sbrk+0x60>)
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <_sbrk+0x64>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <_sbrk+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012dc:	f002 fe1c 	bl	8003f18 <__errno>
 80012e0:	4603      	mov	r3, r0
 80012e2:	220c      	movs	r2, #12
 80012e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ea:	e009      	b.n	8001300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <_sbrk+0x64>)
 80012fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20005000 	.word	0x20005000
 800130c:	00000400 	.word	0x00000400
 8001310:	200004d0 	.word	0x200004d0
 8001314:	200005e0 	.word	0x200005e0

08001318 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001324:	480c      	ldr	r0, [pc, #48]	; (8001358 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001326:	490d      	ldr	r1, [pc, #52]	; (800135c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800132c:	e002      	b.n	8001334 <LoopCopyDataInit>

0800132e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001332:	3304      	adds	r3, #4

08001334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001338:	d3f9      	bcc.n	800132e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800133c:	4c0a      	ldr	r4, [pc, #40]	; (8001368 <LoopFillZerobss+0x22>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001340:	e001      	b.n	8001346 <LoopFillZerobss>

08001342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001344:	3204      	adds	r2, #4

08001346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001348:	d3fb      	bcc.n	8001342 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800134a:	f7ff ffe5 	bl	8001318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800134e:	f002 fde9 	bl	8003f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001352:	f7ff fcab 	bl	8000cac <main>
  bx lr
 8001356:	4770      	bx	lr
  ldr r0, =_sdata
 8001358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800135c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001360:	08005110 	.word	0x08005110
  ldr r2, =_sbss
 8001364:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001368:	200005e0 	.word	0x200005e0

0800136c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800136c:	e7fe      	b.n	800136c <ADC1_2_IRQHandler>
	...

08001370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_Init+0x28>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a07      	ldr	r2, [pc, #28]	; (8001398 <HAL_Init+0x28>)
 800137a:	f043 0310 	orr.w	r3, r3, #16
 800137e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001380:	2003      	movs	r0, #3
 8001382:	f000 f947 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001386:	2000      	movs	r0, #0
 8001388:	f000 f808 	bl	800139c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800138c:	f7ff fe4e 	bl	800102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40022000 	.word	0x40022000

0800139c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_InitTick+0x54>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_InitTick+0x58>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4619      	mov	r1, r3
 80013ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f95f 	bl	800167e <HAL_SYSTICK_Config>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00e      	b.n	80013e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b0f      	cmp	r3, #15
 80013ce:	d80a      	bhi.n	80013e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d0:	2200      	movs	r2, #0
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d8:	f000 f927 	bl	800162a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013dc:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <HAL_InitTick+0x5c>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e000      	b.n	80013e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000010 	.word	0x20000010
 80013f4:	20000018 	.word	0x20000018
 80013f8:	20000014 	.word	0x20000014

080013fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_IncTick+0x1c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <HAL_IncTick+0x20>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4413      	add	r3, r2
 800140c:	4a03      	ldr	r2, [pc, #12]	; (800141c <HAL_IncTick+0x20>)
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	20000018 	.word	0x20000018
 800141c:	200005cc 	.word	0x200005cc

08001420 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return uwTick;
 8001424:	4b02      	ldr	r3, [pc, #8]	; (8001430 <HAL_GetTick+0x10>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	200005cc 	.word	0x200005cc

08001434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800143c:	f7ff fff0 	bl	8001420 <HAL_GetTick>
 8001440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800144c:	d005      	beq.n	800145a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_Delay+0x44>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4413      	add	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800145a:	bf00      	nop
 800145c:	f7ff ffe0 	bl	8001420 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	429a      	cmp	r2, r3
 800146a:	d8f7      	bhi.n	800145c <HAL_Delay+0x28>
  {
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000018 	.word	0x20000018

0800147c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001498:	4013      	ands	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	60d3      	str	r3, [r2, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <__NVIC_GetPriorityGrouping+0x18>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	f003 0307 	and.w	r3, r3, #7
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	db0b      	blt.n	800150a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	f003 021f 	and.w	r2, r3, #31
 80014f8:	4906      	ldr	r1, [pc, #24]	; (8001514 <__NVIC_EnableIRQ+0x34>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	095b      	lsrs	r3, r3, #5
 8001500:	2001      	movs	r0, #1
 8001502:	fa00 f202 	lsl.w	r2, r0, r2
 8001506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
         );
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e0:	d301      	bcc.n	80015e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00f      	b.n	8001606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <SysTick_Config+0x40>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ee:	210f      	movs	r1, #15
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015f4:	f7ff ff90 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <SysTick_Config+0x40>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <SysTick_Config+0x40>)
 8001600:	2207      	movs	r2, #7
 8001602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010

08001614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff2d 	bl	800147c <__NVIC_SetPriorityGrouping>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800163c:	f7ff ff42 	bl	80014c4 <__NVIC_GetPriorityGrouping>
 8001640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f7ff ff90 	bl	800156c <NVIC_EncodePriority>
 800164c:	4602      	mov	r2, r0
 800164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff5f 	bl	8001518 <__NVIC_SetPriority>
}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff35 	bl	80014e0 <__NVIC_EnableIRQ>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffa2 	bl	80015d0 <SysTick_Config>
 800168c:	4603      	mov	r3, r0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001696:	b480      	push	{r7}
 8001698:	b085      	sub	sp, #20
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d008      	beq.n	80016be <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2204      	movs	r2, #4
 80016b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e020      	b.n	8001700 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 020e 	bic.w	r2, r2, #14
 80016cc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0201 	bic.w	r2, r2, #1
 80016dc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e6:	2101      	movs	r1, #1
 80016e8:	fa01 f202 	lsl.w	r2, r1, r2
 80016ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
	...

0800170c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800171e:	2b02      	cmp	r3, #2
 8001720:	d005      	beq.n	800172e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2204      	movs	r2, #4
 8001726:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
 800172c:	e051      	b.n	80017d2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 020e 	bic.w	r2, r2, #14
 800173c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0201 	bic.w	r2, r2, #1
 800174c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a22      	ldr	r2, [pc, #136]	; (80017dc <HAL_DMA_Abort_IT+0xd0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d029      	beq.n	80017ac <HAL_DMA_Abort_IT+0xa0>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a20      	ldr	r2, [pc, #128]	; (80017e0 <HAL_DMA_Abort_IT+0xd4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d022      	beq.n	80017a8 <HAL_DMA_Abort_IT+0x9c>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a1f      	ldr	r2, [pc, #124]	; (80017e4 <HAL_DMA_Abort_IT+0xd8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d01a      	beq.n	80017a2 <HAL_DMA_Abort_IT+0x96>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1d      	ldr	r2, [pc, #116]	; (80017e8 <HAL_DMA_Abort_IT+0xdc>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d012      	beq.n	800179c <HAL_DMA_Abort_IT+0x90>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a1c      	ldr	r2, [pc, #112]	; (80017ec <HAL_DMA_Abort_IT+0xe0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d00a      	beq.n	8001796 <HAL_DMA_Abort_IT+0x8a>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1a      	ldr	r2, [pc, #104]	; (80017f0 <HAL_DMA_Abort_IT+0xe4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d102      	bne.n	8001790 <HAL_DMA_Abort_IT+0x84>
 800178a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800178e:	e00e      	b.n	80017ae <HAL_DMA_Abort_IT+0xa2>
 8001790:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001794:	e00b      	b.n	80017ae <HAL_DMA_Abort_IT+0xa2>
 8001796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800179a:	e008      	b.n	80017ae <HAL_DMA_Abort_IT+0xa2>
 800179c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a0:	e005      	b.n	80017ae <HAL_DMA_Abort_IT+0xa2>
 80017a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a6:	e002      	b.n	80017ae <HAL_DMA_Abort_IT+0xa2>
 80017a8:	2310      	movs	r3, #16
 80017aa:	e000      	b.n	80017ae <HAL_DMA_Abort_IT+0xa2>
 80017ac:	2301      	movs	r3, #1
 80017ae:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <HAL_DMA_Abort_IT+0xe8>)
 80017b0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	4798      	blx	r3
    } 
  }
  return status;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40020008 	.word	0x40020008
 80017e0:	4002001c 	.word	0x4002001c
 80017e4:	40020030 	.word	0x40020030
 80017e8:	40020044 	.word	0x40020044
 80017ec:	40020058 	.word	0x40020058
 80017f0:	4002006c 	.word	0x4002006c
 80017f4:	40020000 	.word	0x40020000

080017f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b08b      	sub	sp, #44	; 0x2c
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180a:	e169      	b.n	8001ae0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800180c:	2201      	movs	r2, #1
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	69fa      	ldr	r2, [r7, #28]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	429a      	cmp	r2, r3
 8001826:	f040 8158 	bne.w	8001ada <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4a9a      	ldr	r2, [pc, #616]	; (8001a98 <HAL_GPIO_Init+0x2a0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d05e      	beq.n	80018f2 <HAL_GPIO_Init+0xfa>
 8001834:	4a98      	ldr	r2, [pc, #608]	; (8001a98 <HAL_GPIO_Init+0x2a0>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d875      	bhi.n	8001926 <HAL_GPIO_Init+0x12e>
 800183a:	4a98      	ldr	r2, [pc, #608]	; (8001a9c <HAL_GPIO_Init+0x2a4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d058      	beq.n	80018f2 <HAL_GPIO_Init+0xfa>
 8001840:	4a96      	ldr	r2, [pc, #600]	; (8001a9c <HAL_GPIO_Init+0x2a4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d86f      	bhi.n	8001926 <HAL_GPIO_Init+0x12e>
 8001846:	4a96      	ldr	r2, [pc, #600]	; (8001aa0 <HAL_GPIO_Init+0x2a8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d052      	beq.n	80018f2 <HAL_GPIO_Init+0xfa>
 800184c:	4a94      	ldr	r2, [pc, #592]	; (8001aa0 <HAL_GPIO_Init+0x2a8>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d869      	bhi.n	8001926 <HAL_GPIO_Init+0x12e>
 8001852:	4a94      	ldr	r2, [pc, #592]	; (8001aa4 <HAL_GPIO_Init+0x2ac>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d04c      	beq.n	80018f2 <HAL_GPIO_Init+0xfa>
 8001858:	4a92      	ldr	r2, [pc, #584]	; (8001aa4 <HAL_GPIO_Init+0x2ac>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d863      	bhi.n	8001926 <HAL_GPIO_Init+0x12e>
 800185e:	4a92      	ldr	r2, [pc, #584]	; (8001aa8 <HAL_GPIO_Init+0x2b0>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d046      	beq.n	80018f2 <HAL_GPIO_Init+0xfa>
 8001864:	4a90      	ldr	r2, [pc, #576]	; (8001aa8 <HAL_GPIO_Init+0x2b0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d85d      	bhi.n	8001926 <HAL_GPIO_Init+0x12e>
 800186a:	2b12      	cmp	r3, #18
 800186c:	d82a      	bhi.n	80018c4 <HAL_GPIO_Init+0xcc>
 800186e:	2b12      	cmp	r3, #18
 8001870:	d859      	bhi.n	8001926 <HAL_GPIO_Init+0x12e>
 8001872:	a201      	add	r2, pc, #4	; (adr r2, 8001878 <HAL_GPIO_Init+0x80>)
 8001874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001878:	080018f3 	.word	0x080018f3
 800187c:	080018cd 	.word	0x080018cd
 8001880:	080018df 	.word	0x080018df
 8001884:	08001921 	.word	0x08001921
 8001888:	08001927 	.word	0x08001927
 800188c:	08001927 	.word	0x08001927
 8001890:	08001927 	.word	0x08001927
 8001894:	08001927 	.word	0x08001927
 8001898:	08001927 	.word	0x08001927
 800189c:	08001927 	.word	0x08001927
 80018a0:	08001927 	.word	0x08001927
 80018a4:	08001927 	.word	0x08001927
 80018a8:	08001927 	.word	0x08001927
 80018ac:	08001927 	.word	0x08001927
 80018b0:	08001927 	.word	0x08001927
 80018b4:	08001927 	.word	0x08001927
 80018b8:	08001927 	.word	0x08001927
 80018bc:	080018d5 	.word	0x080018d5
 80018c0:	080018e9 	.word	0x080018e9
 80018c4:	4a79      	ldr	r2, [pc, #484]	; (8001aac <HAL_GPIO_Init+0x2b4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d013      	beq.n	80018f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018ca:	e02c      	b.n	8001926 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	623b      	str	r3, [r7, #32]
          break;
 80018d2:	e029      	b.n	8001928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	3304      	adds	r3, #4
 80018da:	623b      	str	r3, [r7, #32]
          break;
 80018dc:	e024      	b.n	8001928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	3308      	adds	r3, #8
 80018e4:	623b      	str	r3, [r7, #32]
          break;
 80018e6:	e01f      	b.n	8001928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	330c      	adds	r3, #12
 80018ee:	623b      	str	r3, [r7, #32]
          break;
 80018f0:	e01a      	b.n	8001928 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d102      	bne.n	8001900 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018fa:	2304      	movs	r3, #4
 80018fc:	623b      	str	r3, [r7, #32]
          break;
 80018fe:	e013      	b.n	8001928 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d105      	bne.n	8001914 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001908:	2308      	movs	r3, #8
 800190a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	611a      	str	r2, [r3, #16]
          break;
 8001912:	e009      	b.n	8001928 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001914:	2308      	movs	r3, #8
 8001916:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	615a      	str	r2, [r3, #20]
          break;
 800191e:	e003      	b.n	8001928 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
          break;
 8001924:	e000      	b.n	8001928 <HAL_GPIO_Init+0x130>
          break;
 8001926:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	2bff      	cmp	r3, #255	; 0xff
 800192c:	d801      	bhi.n	8001932 <HAL_GPIO_Init+0x13a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	e001      	b.n	8001936 <HAL_GPIO_Init+0x13e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3304      	adds	r3, #4
 8001936:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	2bff      	cmp	r3, #255	; 0xff
 800193c:	d802      	bhi.n	8001944 <HAL_GPIO_Init+0x14c>
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	e002      	b.n	800194a <HAL_GPIO_Init+0x152>
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	3b08      	subs	r3, #8
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	210f      	movs	r1, #15
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	fa01 f303 	lsl.w	r3, r1, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	401a      	ands	r2, r3
 800195c:	6a39      	ldr	r1, [r7, #32]
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	431a      	orrs	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 80b1 	beq.w	8001ada <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001978:	4b4d      	ldr	r3, [pc, #308]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4a4c      	ldr	r2, [pc, #304]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6193      	str	r3, [r2, #24]
 8001984:	4b4a      	ldr	r3, [pc, #296]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001990:	4a48      	ldr	r2, [pc, #288]	; (8001ab4 <HAL_GPIO_Init+0x2bc>)
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	3302      	adds	r3, #2
 8001998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	220f      	movs	r2, #15
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	4013      	ands	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a40      	ldr	r2, [pc, #256]	; (8001ab8 <HAL_GPIO_Init+0x2c0>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d013      	beq.n	80019e4 <HAL_GPIO_Init+0x1ec>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a3f      	ldr	r2, [pc, #252]	; (8001abc <HAL_GPIO_Init+0x2c4>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d00d      	beq.n	80019e0 <HAL_GPIO_Init+0x1e8>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a3e      	ldr	r2, [pc, #248]	; (8001ac0 <HAL_GPIO_Init+0x2c8>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d007      	beq.n	80019dc <HAL_GPIO_Init+0x1e4>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a3d      	ldr	r2, [pc, #244]	; (8001ac4 <HAL_GPIO_Init+0x2cc>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d101      	bne.n	80019d8 <HAL_GPIO_Init+0x1e0>
 80019d4:	2303      	movs	r3, #3
 80019d6:	e006      	b.n	80019e6 <HAL_GPIO_Init+0x1ee>
 80019d8:	2304      	movs	r3, #4
 80019da:	e004      	b.n	80019e6 <HAL_GPIO_Init+0x1ee>
 80019dc:	2302      	movs	r3, #2
 80019de:	e002      	b.n	80019e6 <HAL_GPIO_Init+0x1ee>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <HAL_GPIO_Init+0x1ee>
 80019e4:	2300      	movs	r3, #0
 80019e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e8:	f002 0203 	and.w	r2, r2, #3
 80019ec:	0092      	lsls	r2, r2, #2
 80019ee:	4093      	lsls	r3, r2
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019f6:	492f      	ldr	r1, [pc, #188]	; (8001ab4 <HAL_GPIO_Init+0x2bc>)
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	3302      	adds	r3, #2
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d006      	beq.n	8001a1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a10:	4b2d      	ldr	r3, [pc, #180]	; (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	492c      	ldr	r1, [pc, #176]	; (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	600b      	str	r3, [r1, #0]
 8001a1c:	e006      	b.n	8001a2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a1e:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	4928      	ldr	r1, [pc, #160]	; (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d006      	beq.n	8001a46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a38:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	4922      	ldr	r1, [pc, #136]	; (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]
 8001a44:	e006      	b.n	8001a54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	491e      	ldr	r1, [pc, #120]	; (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d006      	beq.n	8001a6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a60:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	4918      	ldr	r1, [pc, #96]	; (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	608b      	str	r3, [r1, #8]
 8001a6c:	e006      	b.n	8001a7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	4914      	ldr	r1, [pc, #80]	; (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d021      	beq.n	8001acc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a88:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	490e      	ldr	r1, [pc, #56]	; (8001ac8 <HAL_GPIO_Init+0x2d0>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	60cb      	str	r3, [r1, #12]
 8001a94:	e021      	b.n	8001ada <HAL_GPIO_Init+0x2e2>
 8001a96:	bf00      	nop
 8001a98:	10320000 	.word	0x10320000
 8001a9c:	10310000 	.word	0x10310000
 8001aa0:	10220000 	.word	0x10220000
 8001aa4:	10210000 	.word	0x10210000
 8001aa8:	10120000 	.word	0x10120000
 8001aac:	10110000 	.word	0x10110000
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40010000 	.word	0x40010000
 8001ab8:	40010800 	.word	0x40010800
 8001abc:	40010c00 	.word	0x40010c00
 8001ac0:	40011000 	.word	0x40011000
 8001ac4:	40011400 	.word	0x40011400
 8001ac8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_GPIO_Init+0x304>)
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	4909      	ldr	r1, [pc, #36]	; (8001afc <HAL_GPIO_Init+0x304>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	3301      	adds	r3, #1
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f47f ae8e 	bne.w	800180c <HAL_GPIO_Init+0x14>
  }
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	372c      	adds	r7, #44	; 0x2c
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	40010400 	.word	0x40010400

08001b00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	887b      	ldrh	r3, [r7, #2]
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d002      	beq.n	8001b1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	73fb      	strb	r3, [r7, #15]
 8001b1c:	e001      	b.n	8001b22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	460b      	mov	r3, r1
 8001b38:	807b      	strh	r3, [r7, #2]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b3e:	787b      	ldrb	r3, [r7, #1]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b44:	887a      	ldrh	r2, [r7, #2]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b4a:	e003      	b.n	8001b54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	041a      	lsls	r2, r3, #16
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	611a      	str	r2, [r3, #16]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
	...

08001b60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e12b      	b.n	8001dca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d106      	bne.n	8001b8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff fa82 	bl	8001090 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2224      	movs	r2, #36	; 0x24
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0201 	bic.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bc4:	f000 fffa 	bl	8002bbc <HAL_RCC_GetPCLK1Freq>
 8001bc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	4a81      	ldr	r2, [pc, #516]	; (8001dd4 <HAL_I2C_Init+0x274>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d807      	bhi.n	8001be4 <HAL_I2C_Init+0x84>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4a80      	ldr	r2, [pc, #512]	; (8001dd8 <HAL_I2C_Init+0x278>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	bf94      	ite	ls
 8001bdc:	2301      	movls	r3, #1
 8001bde:	2300      	movhi	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	e006      	b.n	8001bf2 <HAL_I2C_Init+0x92>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4a7d      	ldr	r2, [pc, #500]	; (8001ddc <HAL_I2C_Init+0x27c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	bf94      	ite	ls
 8001bec:	2301      	movls	r3, #1
 8001bee:	2300      	movhi	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e0e7      	b.n	8001dca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4a78      	ldr	r2, [pc, #480]	; (8001de0 <HAL_I2C_Init+0x280>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	0c9b      	lsrs	r3, r3, #18
 8001c04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4a6a      	ldr	r2, [pc, #424]	; (8001dd4 <HAL_I2C_Init+0x274>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d802      	bhi.n	8001c34 <HAL_I2C_Init+0xd4>
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	3301      	adds	r3, #1
 8001c32:	e009      	b.n	8001c48 <HAL_I2C_Init+0xe8>
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c3a:	fb02 f303 	mul.w	r3, r2, r3
 8001c3e:	4a69      	ldr	r2, [pc, #420]	; (8001de4 <HAL_I2C_Init+0x284>)
 8001c40:	fba2 2303 	umull	r2, r3, r2, r3
 8001c44:	099b      	lsrs	r3, r3, #6
 8001c46:	3301      	adds	r3, #1
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	495c      	ldr	r1, [pc, #368]	; (8001dd4 <HAL_I2C_Init+0x274>)
 8001c64:	428b      	cmp	r3, r1
 8001c66:	d819      	bhi.n	8001c9c <HAL_I2C_Init+0x13c>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	1e59      	subs	r1, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c76:	1c59      	adds	r1, r3, #1
 8001c78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c7c:	400b      	ands	r3, r1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00a      	beq.n	8001c98 <HAL_I2C_Init+0x138>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	1e59      	subs	r1, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c90:	3301      	adds	r3, #1
 8001c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c96:	e051      	b.n	8001d3c <HAL_I2C_Init+0x1dc>
 8001c98:	2304      	movs	r3, #4
 8001c9a:	e04f      	b.n	8001d3c <HAL_I2C_Init+0x1dc>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d111      	bne.n	8001cc8 <HAL_I2C_Init+0x168>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	1e58      	subs	r0, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6859      	ldr	r1, [r3, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	440b      	add	r3, r1
 8001cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf0c      	ite	eq
 8001cc0:	2301      	moveq	r3, #1
 8001cc2:	2300      	movne	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	e012      	b.n	8001cee <HAL_I2C_Init+0x18e>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	1e58      	subs	r0, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6859      	ldr	r1, [r3, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	0099      	lsls	r1, r3, #2
 8001cd8:	440b      	add	r3, r1
 8001cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	bf0c      	ite	eq
 8001ce8:	2301      	moveq	r3, #1
 8001cea:	2300      	movne	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_I2C_Init+0x196>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e022      	b.n	8001d3c <HAL_I2C_Init+0x1dc>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10e      	bne.n	8001d1c <HAL_I2C_Init+0x1bc>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1e58      	subs	r0, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6859      	ldr	r1, [r3, #4]
 8001d06:	460b      	mov	r3, r1
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	440b      	add	r3, r1
 8001d0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d10:	3301      	adds	r3, #1
 8001d12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d1a:	e00f      	b.n	8001d3c <HAL_I2C_Init+0x1dc>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1e58      	subs	r0, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6859      	ldr	r1, [r3, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	0099      	lsls	r1, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d32:	3301      	adds	r3, #1
 8001d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	6809      	ldr	r1, [r1, #0]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69da      	ldr	r2, [r3, #28]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6911      	ldr	r1, [r2, #16]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68d2      	ldr	r2, [r2, #12]
 8001d76:	4311      	orrs	r1, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	695a      	ldr	r2, [r3, #20]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0201 	orr.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2220      	movs	r2, #32
 8001db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	000186a0 	.word	0x000186a0
 8001dd8:	001e847f 	.word	0x001e847f
 8001ddc:	003d08ff 	.word	0x003d08ff
 8001de0:	431bde83 	.word	0x431bde83
 8001de4:	10624dd3 	.word	0x10624dd3

08001de8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af02      	add	r7, sp, #8
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	4608      	mov	r0, r1
 8001df2:	4611      	mov	r1, r2
 8001df4:	461a      	mov	r2, r3
 8001df6:	4603      	mov	r3, r0
 8001df8:	817b      	strh	r3, [r7, #10]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	813b      	strh	r3, [r7, #8]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e02:	f7ff fb0d 	bl	8001420 <HAL_GetTick>
 8001e06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b20      	cmp	r3, #32
 8001e12:	f040 80d9 	bne.w	8001fc8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2319      	movs	r3, #25
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	496d      	ldr	r1, [pc, #436]	; (8001fd4 <HAL_I2C_Mem_Write+0x1ec>)
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 f971 	bl	8002108 <I2C_WaitOnFlagUntilTimeout>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	e0cc      	b.n	8001fca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <HAL_I2C_Mem_Write+0x56>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e0c5      	b.n	8001fca <HAL_I2C_Mem_Write+0x1e2>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d007      	beq.n	8001e64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2221      	movs	r2, #33	; 0x21
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2240      	movs	r2, #64	; 0x40
 8001e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6a3a      	ldr	r2, [r7, #32]
 8001e8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4a4d      	ldr	r2, [pc, #308]	; (8001fd8 <HAL_I2C_Mem_Write+0x1f0>)
 8001ea4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ea6:	88f8      	ldrh	r0, [r7, #6]
 8001ea8:	893a      	ldrh	r2, [r7, #8]
 8001eaa:	8979      	ldrh	r1, [r7, #10]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	9301      	str	r3, [sp, #4]
 8001eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f890 	bl	8001fdc <I2C_RequestMemoryWrite>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d052      	beq.n	8001f68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e081      	b.n	8001fca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f9f2 	bl	80022b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00d      	beq.n	8001ef2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d107      	bne.n	8001eee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e06b      	b.n	8001fca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	781a      	ldrb	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d11b      	bne.n	8001f68 <HAL_I2C_Mem_Write+0x180>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d017      	beq.n	8001f68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	781a      	ldrb	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f52:	3b01      	subs	r3, #1
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1aa      	bne.n	8001ec6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 f9de 	bl	8002336 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00d      	beq.n	8001f9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d107      	bne.n	8001f98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e016      	b.n	8001fca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001faa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e000      	b.n	8001fca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001fc8:	2302      	movs	r3, #2
  }
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	00100002 	.word	0x00100002
 8001fd8:	ffff0000 	.word	0xffff0000

08001fdc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af02      	add	r7, sp, #8
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	4608      	mov	r0, r1
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4603      	mov	r3, r0
 8001fec:	817b      	strh	r3, [r7, #10]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	813b      	strh	r3, [r7, #8]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002004:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	2200      	movs	r2, #0
 800200e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 f878 	bl	8002108 <I2C_WaitOnFlagUntilTimeout>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00d      	beq.n	800203a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800202c:	d103      	bne.n	8002036 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002034:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e05f      	b.n	80020fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800203a:	897b      	ldrh	r3, [r7, #10]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	461a      	mov	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002048:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	6a3a      	ldr	r2, [r7, #32]
 800204e:	492d      	ldr	r1, [pc, #180]	; (8002104 <I2C_RequestMemoryWrite+0x128>)
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 f8b0 	bl	80021b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e04c      	b.n	80020fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002078:	6a39      	ldr	r1, [r7, #32]
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 f91a 	bl	80022b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00d      	beq.n	80020a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	2b04      	cmp	r3, #4
 800208c:	d107      	bne.n	800209e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800209c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e02b      	b.n	80020fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d105      	bne.n	80020b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020a8:	893b      	ldrh	r3, [r7, #8]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	611a      	str	r2, [r3, #16]
 80020b2:	e021      	b.n	80020f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80020b4:	893b      	ldrh	r3, [r7, #8]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c4:	6a39      	ldr	r1, [r7, #32]
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f8f4 	bl	80022b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00d      	beq.n	80020ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d107      	bne.n	80020ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e005      	b.n	80020fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020ee:	893b      	ldrh	r3, [r7, #8]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	00010002 	.word	0x00010002

08002108 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	4613      	mov	r3, r2
 8002116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002118:	e025      	b.n	8002166 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002120:	d021      	beq.n	8002166 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002122:	f7ff f97d 	bl	8001420 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d302      	bcc.n	8002138 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d116      	bne.n	8002166 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2220      	movs	r2, #32
 8002142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f043 0220 	orr.w	r2, r3, #32
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e023      	b.n	80021ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	0c1b      	lsrs	r3, r3, #16
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b01      	cmp	r3, #1
 800216e:	d10d      	bne.n	800218c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	43da      	mvns	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	4013      	ands	r3, r2
 800217c:	b29b      	uxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	bf0c      	ite	eq
 8002182:	2301      	moveq	r3, #1
 8002184:	2300      	movne	r3, #0
 8002186:	b2db      	uxtb	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	e00c      	b.n	80021a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	43da      	mvns	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4013      	ands	r3, r2
 8002198:	b29b      	uxth	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	bf0c      	ite	eq
 800219e:	2301      	moveq	r3, #1
 80021a0:	2300      	movne	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d0b6      	beq.n	800211a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021c4:	e051      	b.n	800226a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d4:	d123      	bne.n	800221e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f043 0204 	orr.w	r2, r3, #4
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e046      	b.n	80022ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002224:	d021      	beq.n	800226a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002226:	f7ff f8fb 	bl	8001420 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	429a      	cmp	r2, r3
 8002234:	d302      	bcc.n	800223c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d116      	bne.n	800226a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2220      	movs	r2, #32
 8002246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f043 0220 	orr.w	r2, r3, #32
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e020      	b.n	80022ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	0c1b      	lsrs	r3, r3, #16
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b01      	cmp	r3, #1
 8002272:	d10c      	bne.n	800228e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	43da      	mvns	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4013      	ands	r3, r2
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	bf14      	ite	ne
 8002286:	2301      	movne	r3, #1
 8002288:	2300      	moveq	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	e00b      	b.n	80022a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	43da      	mvns	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	4013      	ands	r3, r2
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf14      	ite	ne
 80022a0:	2301      	movne	r3, #1
 80022a2:	2300      	moveq	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d18d      	bne.n	80021c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022c0:	e02d      	b.n	800231e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f878 	bl	80023b8 <I2C_IsAcknowledgeFailed>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e02d      	b.n	800232e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022d8:	d021      	beq.n	800231e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022da:	f7ff f8a1 	bl	8001420 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d302      	bcc.n	80022f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d116      	bne.n	800231e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2220      	movs	r2, #32
 80022fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f043 0220 	orr.w	r2, r3, #32
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e007      	b.n	800232e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002328:	2b80      	cmp	r3, #128	; 0x80
 800232a:	d1ca      	bne.n	80022c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002342:	e02d      	b.n	80023a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f837 	bl	80023b8 <I2C_IsAcknowledgeFailed>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e02d      	b.n	80023b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800235a:	d021      	beq.n	80023a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800235c:	f7ff f860 	bl	8001420 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	429a      	cmp	r2, r3
 800236a:	d302      	bcc.n	8002372 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d116      	bne.n	80023a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2220      	movs	r2, #32
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	f043 0220 	orr.w	r2, r3, #32
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e007      	b.n	80023b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d1ca      	bne.n	8002344 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ce:	d11b      	bne.n	8002408 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	f043 0204 	orr.w	r2, r3, #4
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e26c      	b.n	8002900 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 8087 	beq.w	8002542 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002434:	4b92      	ldr	r3, [pc, #584]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 030c 	and.w	r3, r3, #12
 800243c:	2b04      	cmp	r3, #4
 800243e:	d00c      	beq.n	800245a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002440:	4b8f      	ldr	r3, [pc, #572]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 030c 	and.w	r3, r3, #12
 8002448:	2b08      	cmp	r3, #8
 800244a:	d112      	bne.n	8002472 <HAL_RCC_OscConfig+0x5e>
 800244c:	4b8c      	ldr	r3, [pc, #560]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002458:	d10b      	bne.n	8002472 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245a:	4b89      	ldr	r3, [pc, #548]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d06c      	beq.n	8002540 <HAL_RCC_OscConfig+0x12c>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d168      	bne.n	8002540 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e246      	b.n	8002900 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247a:	d106      	bne.n	800248a <HAL_RCC_OscConfig+0x76>
 800247c:	4b80      	ldr	r3, [pc, #512]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a7f      	ldr	r2, [pc, #508]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 8002482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	e02e      	b.n	80024e8 <HAL_RCC_OscConfig+0xd4>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x98>
 8002492:	4b7b      	ldr	r3, [pc, #492]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a7a      	ldr	r2, [pc, #488]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 8002498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	4b78      	ldr	r3, [pc, #480]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a77      	ldr	r2, [pc, #476]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e01d      	b.n	80024e8 <HAL_RCC_OscConfig+0xd4>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b4:	d10c      	bne.n	80024d0 <HAL_RCC_OscConfig+0xbc>
 80024b6:	4b72      	ldr	r3, [pc, #456]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a71      	ldr	r2, [pc, #452]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	4b6f      	ldr	r3, [pc, #444]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a6e      	ldr	r2, [pc, #440]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	e00b      	b.n	80024e8 <HAL_RCC_OscConfig+0xd4>
 80024d0:	4b6b      	ldr	r3, [pc, #428]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a6a      	ldr	r2, [pc, #424]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80024d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	4b68      	ldr	r3, [pc, #416]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a67      	ldr	r2, [pc, #412]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d013      	beq.n	8002518 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7fe ff96 	bl	8001420 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f8:	f7fe ff92 	bl	8001420 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e1fa      	b.n	8002900 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250a:	4b5d      	ldr	r3, [pc, #372]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0xe4>
 8002516:	e014      	b.n	8002542 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7fe ff82 	bl	8001420 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002520:	f7fe ff7e 	bl	8001420 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e1e6      	b.n	8002900 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002532:	4b53      	ldr	r3, [pc, #332]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x10c>
 800253e:	e000      	b.n	8002542 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d063      	beq.n	8002616 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800254e:	4b4c      	ldr	r3, [pc, #304]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800255a:	4b49      	ldr	r3, [pc, #292]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b08      	cmp	r3, #8
 8002564:	d11c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x18c>
 8002566:	4b46      	ldr	r3, [pc, #280]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d116      	bne.n	80025a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002572:	4b43      	ldr	r3, [pc, #268]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d005      	beq.n	800258a <HAL_RCC_OscConfig+0x176>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d001      	beq.n	800258a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e1ba      	b.n	8002900 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258a:	4b3d      	ldr	r3, [pc, #244]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4939      	ldr	r1, [pc, #228]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259e:	e03a      	b.n	8002616 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d020      	beq.n	80025ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a8:	4b36      	ldr	r3, [pc, #216]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ae:	f7fe ff37 	bl	8001420 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b6:	f7fe ff33 	bl	8001420 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e19b      	b.n	8002900 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c8:	4b2d      	ldr	r3, [pc, #180]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d4:	4b2a      	ldr	r3, [pc, #168]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4927      	ldr	r1, [pc, #156]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	600b      	str	r3, [r1, #0]
 80025e8:	e015      	b.n	8002616 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ea:	4b26      	ldr	r3, [pc, #152]	; (8002684 <HAL_RCC_OscConfig+0x270>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f0:	f7fe ff16 	bl	8001420 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f8:	f7fe ff12 	bl	8001420 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e17a      	b.n	8002900 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d03a      	beq.n	8002698 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d019      	beq.n	800265e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800262a:	4b17      	ldr	r3, [pc, #92]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 800262c:	2201      	movs	r2, #1
 800262e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002630:	f7fe fef6 	bl	8001420 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002638:	f7fe fef2 	bl	8001420 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e15a      	b.n	8002900 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264a:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <HAL_RCC_OscConfig+0x26c>)
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002656:	2001      	movs	r0, #1
 8002658:	f000 fad8 	bl	8002c0c <RCC_Delay>
 800265c:	e01c      	b.n	8002698 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800265e:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <HAL_RCC_OscConfig+0x274>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002664:	f7fe fedc 	bl	8001420 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266a:	e00f      	b.n	800268c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800266c:	f7fe fed8 	bl	8001420 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d908      	bls.n	800268c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e140      	b.n	8002900 <HAL_RCC_OscConfig+0x4ec>
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	42420000 	.word	0x42420000
 8002688:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800268c:	4b9e      	ldr	r3, [pc, #632]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1e9      	bne.n	800266c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80a6 	beq.w	80027f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026aa:	4b97      	ldr	r3, [pc, #604]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10d      	bne.n	80026d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b6:	4b94      	ldr	r3, [pc, #592]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	4a93      	ldr	r2, [pc, #588]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c0:	61d3      	str	r3, [r2, #28]
 80026c2:	4b91      	ldr	r3, [pc, #580]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ce:	2301      	movs	r3, #1
 80026d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d2:	4b8e      	ldr	r3, [pc, #568]	; (800290c <HAL_RCC_OscConfig+0x4f8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d118      	bne.n	8002710 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026de:	4b8b      	ldr	r3, [pc, #556]	; (800290c <HAL_RCC_OscConfig+0x4f8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a8a      	ldr	r2, [pc, #552]	; (800290c <HAL_RCC_OscConfig+0x4f8>)
 80026e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ea:	f7fe fe99 	bl	8001420 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f2:	f7fe fe95 	bl	8001420 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b64      	cmp	r3, #100	; 0x64
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e0fd      	b.n	8002900 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002704:	4b81      	ldr	r3, [pc, #516]	; (800290c <HAL_RCC_OscConfig+0x4f8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d106      	bne.n	8002726 <HAL_RCC_OscConfig+0x312>
 8002718:	4b7b      	ldr	r3, [pc, #492]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	4a7a      	ldr	r2, [pc, #488]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6213      	str	r3, [r2, #32]
 8002724:	e02d      	b.n	8002782 <HAL_RCC_OscConfig+0x36e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10c      	bne.n	8002748 <HAL_RCC_OscConfig+0x334>
 800272e:	4b76      	ldr	r3, [pc, #472]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	4a75      	ldr	r2, [pc, #468]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	6213      	str	r3, [r2, #32]
 800273a:	4b73      	ldr	r3, [pc, #460]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	4a72      	ldr	r2, [pc, #456]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 8002740:	f023 0304 	bic.w	r3, r3, #4
 8002744:	6213      	str	r3, [r2, #32]
 8002746:	e01c      	b.n	8002782 <HAL_RCC_OscConfig+0x36e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b05      	cmp	r3, #5
 800274e:	d10c      	bne.n	800276a <HAL_RCC_OscConfig+0x356>
 8002750:	4b6d      	ldr	r3, [pc, #436]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	4a6c      	ldr	r2, [pc, #432]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 8002756:	f043 0304 	orr.w	r3, r3, #4
 800275a:	6213      	str	r3, [r2, #32]
 800275c:	4b6a      	ldr	r3, [pc, #424]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	4a69      	ldr	r2, [pc, #420]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6213      	str	r3, [r2, #32]
 8002768:	e00b      	b.n	8002782 <HAL_RCC_OscConfig+0x36e>
 800276a:	4b67      	ldr	r3, [pc, #412]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	4a66      	ldr	r2, [pc, #408]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 8002770:	f023 0301 	bic.w	r3, r3, #1
 8002774:	6213      	str	r3, [r2, #32]
 8002776:	4b64      	ldr	r3, [pc, #400]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	4a63      	ldr	r2, [pc, #396]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 800277c:	f023 0304 	bic.w	r3, r3, #4
 8002780:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d015      	beq.n	80027b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278a:	f7fe fe49 	bl	8001420 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002790:	e00a      	b.n	80027a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002792:	f7fe fe45 	bl	8001420 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e0ab      	b.n	8002900 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a8:	4b57      	ldr	r3, [pc, #348]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0ee      	beq.n	8002792 <HAL_RCC_OscConfig+0x37e>
 80027b4:	e014      	b.n	80027e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b6:	f7fe fe33 	bl	8001420 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027bc:	e00a      	b.n	80027d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027be:	f7fe fe2f 	bl	8001420 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e095      	b.n	8002900 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d4:	4b4c      	ldr	r3, [pc, #304]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1ee      	bne.n	80027be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027e0:	7dfb      	ldrb	r3, [r7, #23]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d105      	bne.n	80027f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e6:	4b48      	ldr	r3, [pc, #288]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	4a47      	ldr	r2, [pc, #284]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 80027ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 8081 	beq.w	80028fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027fc:	4b42      	ldr	r3, [pc, #264]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 030c 	and.w	r3, r3, #12
 8002804:	2b08      	cmp	r3, #8
 8002806:	d061      	beq.n	80028cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d146      	bne.n	800289e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002810:	4b3f      	ldr	r3, [pc, #252]	; (8002910 <HAL_RCC_OscConfig+0x4fc>)
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002816:	f7fe fe03 	bl	8001420 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281e:	f7fe fdff 	bl	8001420 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e067      	b.n	8002900 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002830:	4b35      	ldr	r3, [pc, #212]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f0      	bne.n	800281e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002844:	d108      	bne.n	8002858 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002846:	4b30      	ldr	r3, [pc, #192]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	492d      	ldr	r1, [pc, #180]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002858:	4b2b      	ldr	r3, [pc, #172]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a19      	ldr	r1, [r3, #32]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	430b      	orrs	r3, r1
 800286a:	4927      	ldr	r1, [pc, #156]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002870:	4b27      	ldr	r3, [pc, #156]	; (8002910 <HAL_RCC_OscConfig+0x4fc>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002876:	f7fe fdd3 	bl	8001420 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287e:	f7fe fdcf 	bl	8001420 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e037      	b.n	8002900 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x46a>
 800289c:	e02f      	b.n	80028fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289e:	4b1c      	ldr	r3, [pc, #112]	; (8002910 <HAL_RCC_OscConfig+0x4fc>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7fe fdbc 	bl	8001420 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ac:	f7fe fdb8 	bl	8001420 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e020      	b.n	8002900 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028be:	4b12      	ldr	r3, [pc, #72]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x498>
 80028ca:	e018      	b.n	80028fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e013      	b.n	8002900 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_RCC_OscConfig+0x4f4>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d106      	bne.n	80028fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d001      	beq.n	80028fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40021000 	.word	0x40021000
 800290c:	40007000 	.word	0x40007000
 8002910:	42420060 	.word	0x42420060

08002914 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0d0      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002928:	4b6a      	ldr	r3, [pc, #424]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d910      	bls.n	8002958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b67      	ldr	r3, [pc, #412]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 0207 	bic.w	r2, r3, #7
 800293e:	4965      	ldr	r1, [pc, #404]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002946:	4b63      	ldr	r3, [pc, #396]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d001      	beq.n	8002958 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0b8      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d020      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002970:	4b59      	ldr	r3, [pc, #356]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4a58      	ldr	r2, [pc, #352]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800297a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002988:	4b53      	ldr	r3, [pc, #332]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4a52      	ldr	r2, [pc, #328]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002992:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002994:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	494d      	ldr	r1, [pc, #308]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d040      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d107      	bne.n	80029ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d115      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e07f      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d2:	4b41      	ldr	r3, [pc, #260]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e073      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e2:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e06b      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f2:	4b39      	ldr	r3, [pc, #228]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f023 0203 	bic.w	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4936      	ldr	r1, [pc, #216]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a04:	f7fe fd0c 	bl	8001420 <HAL_GetTick>
 8002a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a0c:	f7fe fd08 	bl	8001420 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e053      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a22:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 020c 	and.w	r2, r3, #12
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d1eb      	bne.n	8002a0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a34:	4b27      	ldr	r3, [pc, #156]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d210      	bcs.n	8002a64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b24      	ldr	r3, [pc, #144]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 0207 	bic.w	r2, r3, #7
 8002a4a:	4922      	ldr	r1, [pc, #136]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e032      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a70:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4916      	ldr	r1, [pc, #88]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a8e:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	490e      	ldr	r1, [pc, #56]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aa2:	f000 f821 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	490a      	ldr	r1, [pc, #40]	; (8002adc <HAL_RCC_ClockConfig+0x1c8>)
 8002ab4:	5ccb      	ldrb	r3, [r1, r3]
 8002ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aba:	4a09      	ldr	r2, [pc, #36]	; (8002ae0 <HAL_RCC_ClockConfig+0x1cc>)
 8002abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe fc6a 	bl	800139c <HAL_InitTick>

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40022000 	.word	0x40022000
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	08005098 	.word	0x08005098
 8002ae0:	20000010 	.word	0x20000010
 8002ae4:	20000014 	.word	0x20000014

08002ae8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae8:	b490      	push	{r4, r7}
 8002aea:	b08a      	sub	sp, #40	; 0x28
 8002aec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002aee:	4b2a      	ldr	r3, [pc, #168]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002af0:	1d3c      	adds	r4, r7, #4
 8002af2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002af4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002af8:	f240 2301 	movw	r3, #513	; 0x201
 8002afc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	2300      	movs	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
 8002b06:	2300      	movs	r3, #0
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b12:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d002      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x40>
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d003      	beq.n	8002b2e <HAL_RCC_GetSysClockFreq+0x46>
 8002b26:	e02d      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b28:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b2a:	623b      	str	r3, [r7, #32]
      break;
 8002b2c:	e02d      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	0c9b      	lsrs	r3, r3, #18
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b40:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d013      	beq.n	8002b74 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	0c5b      	lsrs	r3, r3, #17
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b60:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	4a0e      	ldr	r2, [pc, #56]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b66:	fb02 f203 	mul.w	r2, r2, r3
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
 8002b72:	e004      	b.n	8002b7e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	4a0b      	ldr	r2, [pc, #44]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b78:	fb02 f303 	mul.w	r3, r2, r3
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	623b      	str	r3, [r7, #32]
      break;
 8002b82:	e002      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b86:	623b      	str	r3, [r7, #32]
      break;
 8002b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3728      	adds	r7, #40	; 0x28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc90      	pop	{r4, r7}
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	0800491c 	.word	0x0800491c
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	007a1200 	.word	0x007a1200
 8002ba4:	003d0900 	.word	0x003d0900

08002ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bac:	4b02      	ldr	r3, [pc, #8]	; (8002bb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bae:	681b      	ldr	r3, [r3, #0]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr
 8002bb8:	20000010 	.word	0x20000010

08002bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bc0:	f7ff fff2 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	0a1b      	lsrs	r3, r3, #8
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	4903      	ldr	r1, [pc, #12]	; (8002be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bd2:	5ccb      	ldrb	r3, [r1, r3]
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	080050a8 	.word	0x080050a8

08002be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002be8:	f7ff ffde 	bl	8002ba8 <HAL_RCC_GetHCLKFreq>
 8002bec:	4602      	mov	r2, r0
 8002bee:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	0adb      	lsrs	r3, r3, #11
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	4903      	ldr	r1, [pc, #12]	; (8002c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bfa:	5ccb      	ldrb	r3, [r1, r3]
 8002bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40021000 	.word	0x40021000
 8002c08:	080050a8 	.word	0x080050a8

08002c0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c14:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <RCC_Delay+0x34>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a0a      	ldr	r2, [pc, #40]	; (8002c44 <RCC_Delay+0x38>)
 8002c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1e:	0a5b      	lsrs	r3, r3, #9
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	fb02 f303 	mul.w	r3, r2, r3
 8002c26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c28:	bf00      	nop
  }
  while (Delay --);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1e5a      	subs	r2, r3, #1
 8002c2e:	60fa      	str	r2, [r7, #12]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1f9      	bne.n	8002c28 <RCC_Delay+0x1c>
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	20000010 	.word	0x20000010
 8002c44:	10624dd3 	.word	0x10624dd3

08002c48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e076      	b.n	8002d48 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d108      	bne.n	8002c74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c6a:	d009      	beq.n	8002c80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61da      	str	r2, [r3, #28]
 8002c72:	e005      	b.n	8002c80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe fa36 	bl	800110c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d04:	ea42 0103 	orr.w	r1, r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	0c1a      	lsrs	r2, r3, #16
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f002 0204 	and.w	r2, r2, #4
 8002d26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <HAL_SPI_Transmit+0x22>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e126      	b.n	8002fc0 <HAL_SPI_Transmit+0x270>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d7a:	f7fe fb51 	bl	8001420 <HAL_GetTick>
 8002d7e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d80:	88fb      	ldrh	r3, [r7, #6]
 8002d82:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d002      	beq.n	8002d96 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d90:	2302      	movs	r3, #2
 8002d92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d94:	e10b      	b.n	8002fae <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_SPI_Transmit+0x52>
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d102      	bne.n	8002da8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002da6:	e102      	b.n	8002fae <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2203      	movs	r2, #3
 8002dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	88fa      	ldrh	r2, [r7, #6]
 8002dc0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	88fa      	ldrh	r2, [r7, #6]
 8002dc6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dee:	d10f      	bne.n	8002e10 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dfe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e0e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b40      	cmp	r3, #64	; 0x40
 8002e1c:	d007      	beq.n	8002e2e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e36:	d14b      	bne.n	8002ed0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <HAL_SPI_Transmit+0xf6>
 8002e40:	8afb      	ldrh	r3, [r7, #22]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d13e      	bne.n	8002ec4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	881a      	ldrh	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	1c9a      	adds	r2, r3, #2
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e6a:	e02b      	b.n	8002ec4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d112      	bne.n	8002ea0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	881a      	ldrh	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	1c9a      	adds	r2, r3, #2
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e9e:	e011      	b.n	8002ec4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ea0:	f7fe fabe 	bl	8001420 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d803      	bhi.n	8002eb8 <HAL_SPI_Transmit+0x168>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eb6:	d102      	bne.n	8002ebe <HAL_SPI_Transmit+0x16e>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d102      	bne.n	8002ec4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ec2:	e074      	b.n	8002fae <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1ce      	bne.n	8002e6c <HAL_SPI_Transmit+0x11c>
 8002ece:	e04c      	b.n	8002f6a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <HAL_SPI_Transmit+0x18e>
 8002ed8:	8afb      	ldrh	r3, [r7, #22]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d140      	bne.n	8002f60 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	330c      	adds	r3, #12
 8002ee8:	7812      	ldrb	r2, [r2, #0]
 8002eea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f04:	e02c      	b.n	8002f60 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d113      	bne.n	8002f3c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	7812      	ldrb	r2, [r2, #0]
 8002f20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f3a:	e011      	b.n	8002f60 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f3c:	f7fe fa70 	bl	8001420 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d803      	bhi.n	8002f54 <HAL_SPI_Transmit+0x204>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f52:	d102      	bne.n	8002f5a <HAL_SPI_Transmit+0x20a>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d102      	bne.n	8002f60 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f5e:	e026      	b.n	8002fae <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1cd      	bne.n	8002f06 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	6839      	ldr	r1, [r7, #0]
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 fbb8 	bl	80036e4 <SPI_EndRxTxTransaction>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f88:	2300      	movs	r3, #0
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	77fb      	strb	r3, [r7, #31]
 8002faa:	e000      	b.n	8002fae <HAL_SPI_Transmit+0x25e>
  }

error:
 8002fac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3720      	adds	r7, #32
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fe4:	d112      	bne.n	800300c <HAL_SPI_Receive+0x44>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10e      	bne.n	800300c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2204      	movs	r2, #4
 8002ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ff6:	88fa      	ldrh	r2, [r7, #6]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	68b9      	ldr	r1, [r7, #8]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f8f1 	bl	80031ea <HAL_SPI_TransmitReceive>
 8003008:	4603      	mov	r3, r0
 800300a:	e0ea      	b.n	80031e2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_SPI_Receive+0x52>
 8003016:	2302      	movs	r3, #2
 8003018:	e0e3      	b.n	80031e2 <HAL_SPI_Receive+0x21a>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003022:	f7fe f9fd 	bl	8001420 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b01      	cmp	r3, #1
 8003032:	d002      	beq.n	800303a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003034:	2302      	movs	r3, #2
 8003036:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003038:	e0ca      	b.n	80031d0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <HAL_SPI_Receive+0x7e>
 8003040:	88fb      	ldrh	r3, [r7, #6]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d102      	bne.n	800304c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	75fb      	strb	r3, [r7, #23]
    goto error;
 800304a:	e0c1      	b.n	80031d0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2204      	movs	r2, #4
 8003050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	88fa      	ldrh	r2, [r7, #6]
 8003064:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	88fa      	ldrh	r2, [r7, #6]
 800306a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003092:	d10f      	bne.n	80030b4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030b2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030be:	2b40      	cmp	r3, #64	; 0x40
 80030c0:	d007      	beq.n	80030d2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d162      	bne.n	80031a0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80030da:	e02e      	b.n	800313a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d115      	bne.n	8003116 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f103 020c 	add.w	r2, r3, #12
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f6:	7812      	ldrb	r2, [r2, #0]
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800310a:	b29b      	uxth	r3, r3
 800310c:	3b01      	subs	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003114:	e011      	b.n	800313a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003116:	f7fe f983 	bl	8001420 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d803      	bhi.n	800312e <HAL_SPI_Receive+0x166>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800312c:	d102      	bne.n	8003134 <HAL_SPI_Receive+0x16c>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003138:	e04a      	b.n	80031d0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1cb      	bne.n	80030dc <HAL_SPI_Receive+0x114>
 8003144:	e031      	b.n	80031aa <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b01      	cmp	r3, #1
 8003152:	d113      	bne.n	800317c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	b292      	uxth	r2, r2
 8003160:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003166:	1c9a      	adds	r2, r3, #2
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003170:	b29b      	uxth	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	87da      	strh	r2, [r3, #62]	; 0x3e
 800317a:	e011      	b.n	80031a0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800317c:	f7fe f950 	bl	8001420 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d803      	bhi.n	8003194 <HAL_SPI_Receive+0x1cc>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003192:	d102      	bne.n	800319a <HAL_SPI_Receive+0x1d2>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d102      	bne.n	80031a0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800319e:	e017      	b.n	80031d0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1cd      	bne.n	8003146 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	6839      	ldr	r1, [r7, #0]
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fa46 	bl	8003640 <SPI_EndRxTransaction>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2220      	movs	r2, #32
 80031be:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	75fb      	strb	r3, [r7, #23]
 80031cc:	e000      	b.n	80031d0 <HAL_SPI_Receive+0x208>
  }

error :
 80031ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b08c      	sub	sp, #48	; 0x30
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031f8:	2301      	movs	r3, #1
 80031fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_SPI_TransmitReceive+0x26>
 800320c:	2302      	movs	r3, #2
 800320e:	e18a      	b.n	8003526 <HAL_SPI_TransmitReceive+0x33c>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003218:	f7fe f902 	bl	8001420 <HAL_GetTick>
 800321c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800322e:	887b      	ldrh	r3, [r7, #2]
 8003230:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003232:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003236:	2b01      	cmp	r3, #1
 8003238:	d00f      	beq.n	800325a <HAL_SPI_TransmitReceive+0x70>
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003240:	d107      	bne.n	8003252 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d103      	bne.n	8003252 <HAL_SPI_TransmitReceive+0x68>
 800324a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800324e:	2b04      	cmp	r3, #4
 8003250:	d003      	beq.n	800325a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003252:	2302      	movs	r3, #2
 8003254:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003258:	e15b      	b.n	8003512 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_SPI_TransmitReceive+0x82>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_SPI_TransmitReceive+0x82>
 8003266:	887b      	ldrh	r3, [r7, #2]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d103      	bne.n	8003274 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003272:	e14e      	b.n	8003512 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b04      	cmp	r3, #4
 800327e:	d003      	beq.n	8003288 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2205      	movs	r2, #5
 8003284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	887a      	ldrh	r2, [r7, #2]
 8003298:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	887a      	ldrh	r2, [r7, #2]
 800329e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	887a      	ldrh	r2, [r7, #2]
 80032aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	887a      	ldrh	r2, [r7, #2]
 80032b0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c8:	2b40      	cmp	r3, #64	; 0x40
 80032ca:	d007      	beq.n	80032dc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e4:	d178      	bne.n	80033d8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_SPI_TransmitReceive+0x10a>
 80032ee:	8b7b      	ldrh	r3, [r7, #26]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d166      	bne.n	80033c2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	881a      	ldrh	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	1c9a      	adds	r2, r3, #2
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003318:	e053      	b.n	80033c2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b02      	cmp	r3, #2
 8003326:	d11b      	bne.n	8003360 <HAL_SPI_TransmitReceive+0x176>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d016      	beq.n	8003360 <HAL_SPI_TransmitReceive+0x176>
 8003332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003334:	2b01      	cmp	r3, #1
 8003336:	d113      	bne.n	8003360 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	881a      	ldrh	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	1c9a      	adds	r2, r3, #2
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b01      	cmp	r3, #1
 800336c:	d119      	bne.n	80033a2 <HAL_SPI_TransmitReceive+0x1b8>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d014      	beq.n	80033a2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	b292      	uxth	r2, r2
 8003384:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338a:	1c9a      	adds	r2, r3, #2
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003394:	b29b      	uxth	r3, r3
 8003396:	3b01      	subs	r3, #1
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800339e:	2301      	movs	r3, #1
 80033a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033a2:	f7fe f83d 	bl	8001420 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d807      	bhi.n	80033c2 <HAL_SPI_TransmitReceive+0x1d8>
 80033b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033b8:	d003      	beq.n	80033c2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033c0:	e0a7      	b.n	8003512 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1a6      	bne.n	800331a <HAL_SPI_TransmitReceive+0x130>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1a1      	bne.n	800331a <HAL_SPI_TransmitReceive+0x130>
 80033d6:	e07c      	b.n	80034d2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <HAL_SPI_TransmitReceive+0x1fc>
 80033e0:	8b7b      	ldrh	r3, [r7, #26]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d16b      	bne.n	80034be <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	330c      	adds	r3, #12
 80033f0:	7812      	ldrb	r2, [r2, #0]
 80033f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800340c:	e057      	b.n	80034be <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b02      	cmp	r3, #2
 800341a:	d11c      	bne.n	8003456 <HAL_SPI_TransmitReceive+0x26c>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d017      	beq.n	8003456 <HAL_SPI_TransmitReceive+0x26c>
 8003426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003428:	2b01      	cmp	r3, #1
 800342a:	d114      	bne.n	8003456 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	330c      	adds	r3, #12
 8003436:	7812      	ldrb	r2, [r2, #0]
 8003438:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003448:	b29b      	uxth	r3, r3
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003452:	2300      	movs	r3, #0
 8003454:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b01      	cmp	r3, #1
 8003462:	d119      	bne.n	8003498 <HAL_SPI_TransmitReceive+0x2ae>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d014      	beq.n	8003498 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003494:	2301      	movs	r3, #1
 8003496:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003498:	f7fd ffc2 	bl	8001420 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d803      	bhi.n	80034b0 <HAL_SPI_TransmitReceive+0x2c6>
 80034a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034ae:	d102      	bne.n	80034b6 <HAL_SPI_TransmitReceive+0x2cc>
 80034b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d103      	bne.n	80034be <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034bc:	e029      	b.n	8003512 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1a2      	bne.n	800340e <HAL_SPI_TransmitReceive+0x224>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d19d      	bne.n	800340e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 f904 	bl	80036e4 <SPI_EndRxTxTransaction>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d006      	beq.n	80034f0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2220      	movs	r2, #32
 80034ec:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80034ee:	e010      	b.n	8003512 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10b      	bne.n	8003510 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	e000      	b.n	8003512 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003510:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003522:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003526:	4618      	mov	r0, r3
 8003528:	3730      	adds	r7, #48	; 0x30
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003540:	f7fd ff6e 	bl	8001420 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	4413      	add	r3, r2
 800354e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003550:	f7fd ff66 	bl	8001420 <HAL_GetTick>
 8003554:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003556:	4b39      	ldr	r3, [pc, #228]	; (800363c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	015b      	lsls	r3, r3, #5
 800355c:	0d1b      	lsrs	r3, r3, #20
 800355e:	69fa      	ldr	r2, [r7, #28]
 8003560:	fb02 f303 	mul.w	r3, r2, r3
 8003564:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003566:	e054      	b.n	8003612 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800356e:	d050      	beq.n	8003612 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003570:	f7fd ff56 	bl	8001420 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	69fa      	ldr	r2, [r7, #28]
 800357c:	429a      	cmp	r2, r3
 800357e:	d902      	bls.n	8003586 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d13d      	bne.n	8003602 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003594:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359e:	d111      	bne.n	80035c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a8:	d004      	beq.n	80035b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b2:	d107      	bne.n	80035c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035cc:	d10f      	bne.n	80035ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e017      	b.n	8003632 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	3b01      	subs	r3, #1
 8003610:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4013      	ands	r3, r2
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	429a      	cmp	r2, r3
 8003620:	bf0c      	ite	eq
 8003622:	2301      	moveq	r3, #1
 8003624:	2300      	movne	r3, #0
 8003626:	b2db      	uxtb	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	429a      	cmp	r2, r3
 800362e:	d19b      	bne.n	8003568 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3720      	adds	r7, #32
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20000010 	.word	0x20000010

08003640 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af02      	add	r7, sp, #8
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003654:	d111      	bne.n	800367a <SPI_EndRxTransaction+0x3a>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800365e:	d004      	beq.n	800366a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003668:	d107      	bne.n	800367a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003678:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003682:	d117      	bne.n	80036b4 <SPI_EndRxTransaction+0x74>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368c:	d112      	bne.n	80036b4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2200      	movs	r2, #0
 8003696:	2101      	movs	r1, #1
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f7ff ff49 	bl	8003530 <SPI_WaitFlagStateUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01a      	beq.n	80036da <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a8:	f043 0220 	orr.w	r2, r3, #32
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e013      	b.n	80036dc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2200      	movs	r2, #0
 80036bc:	2180      	movs	r1, #128	; 0x80
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f7ff ff36 	bl	8003530 <SPI_WaitFlagStateUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d007      	beq.n	80036da <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ce:	f043 0220 	orr.w	r2, r3, #32
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e000      	b.n	80036dc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2200      	movs	r2, #0
 80036f8:	2180      	movs	r1, #128	; 0x80
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f7ff ff18 	bl	8003530 <SPI_WaitFlagStateUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370a:	f043 0220 	orr.w	r2, r3, #32
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e000      	b.n	8003718 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e03f      	b.n	80037b2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fd fd2a 	bl	80011a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2224      	movs	r2, #36	; 0x24
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003762:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 fb49 	bl	8003dfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003778:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003788:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003798:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	; 0x28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80037dc:	2300      	movs	r3, #0
 80037de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10d      	bne.n	800380e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_UART_IRQHandler+0x52>
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fa4f 	bl	8003caa <UART_Receive_IT>
      return;
 800380c:	e17b      	b.n	8003b06 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 80b1 	beq.w	8003978 <HAL_UART_IRQHandler+0x1bc>
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d105      	bne.n	800382c <HAL_UART_IRQHandler+0x70>
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80a6 	beq.w	8003978 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <HAL_UART_IRQHandler+0x90>
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	f043 0201 	orr.w	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_UART_IRQHandler+0xb0>
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	f043 0202 	orr.w	r2, r3, #2
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_UART_IRQHandler+0xd0>
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	f043 0204 	orr.w	r2, r3, #4
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00f      	beq.n	80038b6 <HAL_UART_IRQHandler+0xfa>
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	2b00      	cmp	r3, #0
 800389e:	d104      	bne.n	80038aa <HAL_UART_IRQHandler+0xee>
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f043 0208 	orr.w	r2, r3, #8
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 811e 	beq.w	8003afc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d007      	beq.n	80038da <HAL_UART_IRQHandler+0x11e>
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f9e8 	bl	8003caa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bf14      	ite	ne
 80038e8:	2301      	movne	r3, #1
 80038ea:	2300      	moveq	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d102      	bne.n	8003902 <HAL_UART_IRQHandler+0x146>
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d031      	beq.n	8003966 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f92a 	bl	8003b5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d023      	beq.n	800395e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695a      	ldr	r2, [r3, #20]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003924:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	2b00      	cmp	r3, #0
 800392c:	d013      	beq.n	8003956 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	4a76      	ldr	r2, [pc, #472]	; (8003b0c <HAL_UART_IRQHandler+0x350>)
 8003934:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393a:	4618      	mov	r0, r3
 800393c:	f7fd fee6 	bl	800170c <HAL_DMA_Abort_IT>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d016      	beq.n	8003974 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003950:	4610      	mov	r0, r2
 8003952:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003954:	e00e      	b.n	8003974 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f8ec 	bl	8003b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800395c:	e00a      	b.n	8003974 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f8e8 	bl	8003b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003964:	e006      	b.n	8003974 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f8e4 	bl	8003b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003972:	e0c3      	b.n	8003afc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003974:	bf00      	nop
    return;
 8003976:	e0c1      	b.n	8003afc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	2b01      	cmp	r3, #1
 800397e:	f040 80a1 	bne.w	8003ac4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	f003 0310 	and.w	r3, r3, #16
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 809b 	beq.w	8003ac4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 8095 	beq.w	8003ac4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d04e      	beq.n	8003a5c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80039c8:	8a3b      	ldrh	r3, [r7, #16]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 8098 	beq.w	8003b00 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039d4:	8a3a      	ldrh	r2, [r7, #16]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	f080 8092 	bcs.w	8003b00 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8a3a      	ldrh	r2, [r7, #16]
 80039e0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d02b      	beq.n	8003a44 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039fa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0201 	bic.w	r2, r2, #1
 8003a0a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695a      	ldr	r2, [r3, #20]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a1a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0210 	bic.w	r2, r2, #16
 8003a38:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fd fe29 	bl	8001696 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	4619      	mov	r1, r3
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f876 	bl	8003b46 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a5a:	e051      	b.n	8003b00 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d047      	beq.n	8003b04 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003a74:	8a7b      	ldrh	r3, [r7, #18]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d044      	beq.n	8003b04 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a88:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695a      	ldr	r2, [r3, #20]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0201 	bic.w	r2, r2, #1
 8003a98:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0210 	bic.w	r2, r2, #16
 8003ab6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ab8:	8a7b      	ldrh	r3, [r7, #18]
 8003aba:	4619      	mov	r1, r3
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f842 	bl	8003b46 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ac2:	e01f      	b.n	8003b04 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d008      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x324>
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f87f 	bl	8003bdc <UART_Transmit_IT>
    return;
 8003ade:	e012      	b.n	8003b06 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00d      	beq.n	8003b06 <HAL_UART_IRQHandler+0x34a>
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f8c0 	bl	8003c7a <UART_EndTransmit_IT>
    return;
 8003afa:	e004      	b.n	8003b06 <HAL_UART_IRQHandler+0x34a>
    return;
 8003afc:	bf00      	nop
 8003afe:	e002      	b.n	8003b06 <HAL_UART_IRQHandler+0x34a>
      return;
 8003b00:	bf00      	nop
 8003b02:	e000      	b.n	8003b06 <HAL_UART_IRQHandler+0x34a>
      return;
 8003b04:	bf00      	nop
  }
}
 8003b06:	3728      	adds	r7, #40	; 0x28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	08003bb5 	.word	0x08003bb5

08003b10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr

08003b22 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr

08003b34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr

08003b46 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr

08003b5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b72:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
 8003b82:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d107      	bne.n	8003b9c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0210 	bic.w	r2, r2, #16
 8003b9a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr

08003bb4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f7ff ffb0 	bl	8003b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bd4:	bf00      	nop
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b21      	cmp	r3, #33	; 0x21
 8003bee:	d13e      	bne.n	8003c6e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf8:	d114      	bne.n	8003c24 <UART_Transmit_IT+0x48>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d110      	bne.n	8003c24 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c16:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	1c9a      	adds	r2, r3, #2
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	621a      	str	r2, [r3, #32]
 8003c22:	e008      	b.n	8003c36 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	1c59      	adds	r1, r3, #1
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6211      	str	r1, [r2, #32]
 8003c2e:	781a      	ldrb	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	4619      	mov	r1, r3
 8003c44:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10f      	bne.n	8003c6a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c58:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c68:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e000      	b.n	8003c70 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c6e:	2302      	movs	r3, #2
  }
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr

08003c7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff ff38 	bl	8003b10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b086      	sub	sp, #24
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b22      	cmp	r3, #34	; 0x22
 8003cbc:	f040 8099 	bne.w	8003df2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc8:	d117      	bne.n	8003cfa <UART_Receive_IT+0x50>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d113      	bne.n	8003cfa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cda:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	1c9a      	adds	r2, r3, #2
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	629a      	str	r2, [r3, #40]	; 0x28
 8003cf8:	e026      	b.n	8003d48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfe:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d0c:	d007      	beq.n	8003d1e <UART_Receive_IT+0x74>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10a      	bne.n	8003d2c <UART_Receive_IT+0x82>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	701a      	strb	r2, [r3, #0]
 8003d2a:	e008      	b.n	8003d3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	4619      	mov	r1, r3
 8003d56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d148      	bne.n	8003dee <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0220 	bic.w	r2, r2, #32
 8003d6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695a      	ldr	r2, [r3, #20]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0201 	bic.w	r2, r2, #1
 8003d8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d123      	bne.n	8003de4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0210 	bic.w	r2, r2, #16
 8003db0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b10      	cmp	r3, #16
 8003dbe:	d10a      	bne.n	8003dd6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff feb2 	bl	8003b46 <HAL_UARTEx_RxEventCallback>
 8003de2:	e002      	b.n	8003dea <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff fe9c 	bl	8003b22 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	e002      	b.n	8003df4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	e000      	b.n	8003df4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003df2:	2302      	movs	r3, #2
  }
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e36:	f023 030c 	bic.w	r3, r3, #12
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	68b9      	ldr	r1, [r7, #8]
 8003e40:	430b      	orrs	r3, r1
 8003e42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a2c      	ldr	r2, [pc, #176]	; (8003f10 <UART_SetConfig+0x114>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d103      	bne.n	8003e6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e64:	f7fe febe 	bl	8002be4 <HAL_RCC_GetPCLK2Freq>
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	e002      	b.n	8003e72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e6c:	f7fe fea6 	bl	8002bbc <HAL_RCC_GetPCLK1Freq>
 8003e70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	009a      	lsls	r2, r3, #2
 8003e7c:	441a      	add	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e88:	4a22      	ldr	r2, [pc, #136]	; (8003f14 <UART_SetConfig+0x118>)
 8003e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	0119      	lsls	r1, r3, #4
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	009a      	lsls	r2, r3, #2
 8003e9c:	441a      	add	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ea8:	4b1a      	ldr	r3, [pc, #104]	; (8003f14 <UART_SetConfig+0x118>)
 8003eaa:	fba3 0302 	umull	r0, r3, r3, r2
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	2064      	movs	r0, #100	; 0x64
 8003eb2:	fb00 f303 	mul.w	r3, r0, r3
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	3332      	adds	r3, #50	; 0x32
 8003ebc:	4a15      	ldr	r2, [pc, #84]	; (8003f14 <UART_SetConfig+0x118>)
 8003ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ec8:	4419      	add	r1, r3
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	009a      	lsls	r2, r3, #2
 8003ed4:	441a      	add	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ee0:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <UART_SetConfig+0x118>)
 8003ee2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	2064      	movs	r0, #100	; 0x64
 8003eea:	fb00 f303 	mul.w	r3, r0, r3
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	3332      	adds	r3, #50	; 0x32
 8003ef4:	4a07      	ldr	r2, [pc, #28]	; (8003f14 <UART_SetConfig+0x118>)
 8003ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	f003 020f 	and.w	r2, r3, #15
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	440a      	add	r2, r1
 8003f06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f08:	bf00      	nop
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40013800 	.word	0x40013800
 8003f14:	51eb851f 	.word	0x51eb851f

08003f18 <__errno>:
 8003f18:	4b01      	ldr	r3, [pc, #4]	; (8003f20 <__errno+0x8>)
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	2000001c 	.word	0x2000001c

08003f24 <__libc_init_array>:
 8003f24:	b570      	push	{r4, r5, r6, lr}
 8003f26:	2600      	movs	r6, #0
 8003f28:	4d0c      	ldr	r5, [pc, #48]	; (8003f5c <__libc_init_array+0x38>)
 8003f2a:	4c0d      	ldr	r4, [pc, #52]	; (8003f60 <__libc_init_array+0x3c>)
 8003f2c:	1b64      	subs	r4, r4, r5
 8003f2e:	10a4      	asrs	r4, r4, #2
 8003f30:	42a6      	cmp	r6, r4
 8003f32:	d109      	bne.n	8003f48 <__libc_init_array+0x24>
 8003f34:	f000 fcc8 	bl	80048c8 <_init>
 8003f38:	2600      	movs	r6, #0
 8003f3a:	4d0a      	ldr	r5, [pc, #40]	; (8003f64 <__libc_init_array+0x40>)
 8003f3c:	4c0a      	ldr	r4, [pc, #40]	; (8003f68 <__libc_init_array+0x44>)
 8003f3e:	1b64      	subs	r4, r4, r5
 8003f40:	10a4      	asrs	r4, r4, #2
 8003f42:	42a6      	cmp	r6, r4
 8003f44:	d105      	bne.n	8003f52 <__libc_init_array+0x2e>
 8003f46:	bd70      	pop	{r4, r5, r6, pc}
 8003f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f4c:	4798      	blx	r3
 8003f4e:	3601      	adds	r6, #1
 8003f50:	e7ee      	b.n	8003f30 <__libc_init_array+0xc>
 8003f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f56:	4798      	blx	r3
 8003f58:	3601      	adds	r6, #1
 8003f5a:	e7f2      	b.n	8003f42 <__libc_init_array+0x1e>
 8003f5c:	08005108 	.word	0x08005108
 8003f60:	08005108 	.word	0x08005108
 8003f64:	08005108 	.word	0x08005108
 8003f68:	0800510c 	.word	0x0800510c

08003f6c <__itoa>:
 8003f6c:	1e93      	subs	r3, r2, #2
 8003f6e:	2b22      	cmp	r3, #34	; 0x22
 8003f70:	b510      	push	{r4, lr}
 8003f72:	460c      	mov	r4, r1
 8003f74:	d904      	bls.n	8003f80 <__itoa+0x14>
 8003f76:	2300      	movs	r3, #0
 8003f78:	461c      	mov	r4, r3
 8003f7a:	700b      	strb	r3, [r1, #0]
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	bd10      	pop	{r4, pc}
 8003f80:	2a0a      	cmp	r2, #10
 8003f82:	d109      	bne.n	8003f98 <__itoa+0x2c>
 8003f84:	2800      	cmp	r0, #0
 8003f86:	da07      	bge.n	8003f98 <__itoa+0x2c>
 8003f88:	232d      	movs	r3, #45	; 0x2d
 8003f8a:	700b      	strb	r3, [r1, #0]
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	4240      	negs	r0, r0
 8003f90:	4421      	add	r1, r4
 8003f92:	f000 f83d 	bl	8004010 <__utoa>
 8003f96:	e7f1      	b.n	8003f7c <__itoa+0x10>
 8003f98:	2100      	movs	r1, #0
 8003f9a:	e7f9      	b.n	8003f90 <__itoa+0x24>

08003f9c <itoa>:
 8003f9c:	f7ff bfe6 	b.w	8003f6c <__itoa>

08003fa0 <memset>:
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	4402      	add	r2, r0
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d100      	bne.n	8003faa <memset+0xa>
 8003fa8:	4770      	bx	lr
 8003faa:	f803 1b01 	strb.w	r1, [r3], #1
 8003fae:	e7f9      	b.n	8003fa4 <memset+0x4>

08003fb0 <siprintf>:
 8003fb0:	b40e      	push	{r1, r2, r3}
 8003fb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fb6:	b500      	push	{lr}
 8003fb8:	b09c      	sub	sp, #112	; 0x70
 8003fba:	ab1d      	add	r3, sp, #116	; 0x74
 8003fbc:	9002      	str	r0, [sp, #8]
 8003fbe:	9006      	str	r0, [sp, #24]
 8003fc0:	9107      	str	r1, [sp, #28]
 8003fc2:	9104      	str	r1, [sp, #16]
 8003fc4:	4808      	ldr	r0, [pc, #32]	; (8003fe8 <siprintf+0x38>)
 8003fc6:	4909      	ldr	r1, [pc, #36]	; (8003fec <siprintf+0x3c>)
 8003fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fcc:	9105      	str	r1, [sp, #20]
 8003fce:	6800      	ldr	r0, [r0, #0]
 8003fd0:	a902      	add	r1, sp, #8
 8003fd2:	9301      	str	r3, [sp, #4]
 8003fd4:	f000 f8ba 	bl	800414c <_svfiprintf_r>
 8003fd8:	2200      	movs	r2, #0
 8003fda:	9b02      	ldr	r3, [sp, #8]
 8003fdc:	701a      	strb	r2, [r3, #0]
 8003fde:	b01c      	add	sp, #112	; 0x70
 8003fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fe4:	b003      	add	sp, #12
 8003fe6:	4770      	bx	lr
 8003fe8:	2000001c 	.word	0x2000001c
 8003fec:	ffff0208 	.word	0xffff0208

08003ff0 <strcat>:
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	b510      	push	{r4, lr}
 8003ff4:	7814      	ldrb	r4, [r2, #0]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	3201      	adds	r2, #1
 8003ffa:	2c00      	cmp	r4, #0
 8003ffc:	d1fa      	bne.n	8003ff4 <strcat+0x4>
 8003ffe:	3b01      	subs	r3, #1
 8004000:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004004:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004008:	2a00      	cmp	r2, #0
 800400a:	d1f9      	bne.n	8004000 <strcat+0x10>
 800400c:	bd10      	pop	{r4, pc}
	...

08004010 <__utoa>:
 8004010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004012:	b08b      	sub	sp, #44	; 0x2c
 8004014:	4605      	mov	r5, r0
 8004016:	460b      	mov	r3, r1
 8004018:	466e      	mov	r6, sp
 800401a:	4c1d      	ldr	r4, [pc, #116]	; (8004090 <__utoa+0x80>)
 800401c:	f104 0c20 	add.w	ip, r4, #32
 8004020:	4637      	mov	r7, r6
 8004022:	6820      	ldr	r0, [r4, #0]
 8004024:	6861      	ldr	r1, [r4, #4]
 8004026:	3408      	adds	r4, #8
 8004028:	c703      	stmia	r7!, {r0, r1}
 800402a:	4564      	cmp	r4, ip
 800402c:	463e      	mov	r6, r7
 800402e:	d1f7      	bne.n	8004020 <__utoa+0x10>
 8004030:	7921      	ldrb	r1, [r4, #4]
 8004032:	6820      	ldr	r0, [r4, #0]
 8004034:	7139      	strb	r1, [r7, #4]
 8004036:	1e91      	subs	r1, r2, #2
 8004038:	2922      	cmp	r1, #34	; 0x22
 800403a:	6038      	str	r0, [r7, #0]
 800403c:	f04f 0100 	mov.w	r1, #0
 8004040:	d904      	bls.n	800404c <__utoa+0x3c>
 8004042:	7019      	strb	r1, [r3, #0]
 8004044:	460b      	mov	r3, r1
 8004046:	4618      	mov	r0, r3
 8004048:	b00b      	add	sp, #44	; 0x2c
 800404a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800404c:	1e58      	subs	r0, r3, #1
 800404e:	4684      	mov	ip, r0
 8004050:	fbb5 f7f2 	udiv	r7, r5, r2
 8004054:	fb02 5617 	mls	r6, r2, r7, r5
 8004058:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800405c:	4476      	add	r6, lr
 800405e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004062:	460c      	mov	r4, r1
 8004064:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004068:	462e      	mov	r6, r5
 800406a:	42b2      	cmp	r2, r6
 800406c:	463d      	mov	r5, r7
 800406e:	f101 0101 	add.w	r1, r1, #1
 8004072:	d9ed      	bls.n	8004050 <__utoa+0x40>
 8004074:	2200      	movs	r2, #0
 8004076:	545a      	strb	r2, [r3, r1]
 8004078:	1919      	adds	r1, r3, r4
 800407a:	1aa5      	subs	r5, r4, r2
 800407c:	42aa      	cmp	r2, r5
 800407e:	dae2      	bge.n	8004046 <__utoa+0x36>
 8004080:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004084:	780e      	ldrb	r6, [r1, #0]
 8004086:	3201      	adds	r2, #1
 8004088:	7006      	strb	r6, [r0, #0]
 800408a:	f801 5901 	strb.w	r5, [r1], #-1
 800408e:	e7f4      	b.n	800407a <__utoa+0x6a>
 8004090:	080050b0 	.word	0x080050b0

08004094 <__ssputs_r>:
 8004094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004098:	688e      	ldr	r6, [r1, #8]
 800409a:	4682      	mov	sl, r0
 800409c:	429e      	cmp	r6, r3
 800409e:	460c      	mov	r4, r1
 80040a0:	4690      	mov	r8, r2
 80040a2:	461f      	mov	r7, r3
 80040a4:	d838      	bhi.n	8004118 <__ssputs_r+0x84>
 80040a6:	898a      	ldrh	r2, [r1, #12]
 80040a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040ac:	d032      	beq.n	8004114 <__ssputs_r+0x80>
 80040ae:	6825      	ldr	r5, [r4, #0]
 80040b0:	6909      	ldr	r1, [r1, #16]
 80040b2:	3301      	adds	r3, #1
 80040b4:	eba5 0901 	sub.w	r9, r5, r1
 80040b8:	6965      	ldr	r5, [r4, #20]
 80040ba:	444b      	add	r3, r9
 80040bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040c4:	106d      	asrs	r5, r5, #1
 80040c6:	429d      	cmp	r5, r3
 80040c8:	bf38      	it	cc
 80040ca:	461d      	movcc	r5, r3
 80040cc:	0553      	lsls	r3, r2, #21
 80040ce:	d531      	bpl.n	8004134 <__ssputs_r+0xa0>
 80040d0:	4629      	mov	r1, r5
 80040d2:	f000 fb53 	bl	800477c <_malloc_r>
 80040d6:	4606      	mov	r6, r0
 80040d8:	b950      	cbnz	r0, 80040f0 <__ssputs_r+0x5c>
 80040da:	230c      	movs	r3, #12
 80040dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040e0:	f8ca 3000 	str.w	r3, [sl]
 80040e4:	89a3      	ldrh	r3, [r4, #12]
 80040e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ea:	81a3      	strh	r3, [r4, #12]
 80040ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040f0:	464a      	mov	r2, r9
 80040f2:	6921      	ldr	r1, [r4, #16]
 80040f4:	f000 face 	bl	8004694 <memcpy>
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80040fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004102:	81a3      	strh	r3, [r4, #12]
 8004104:	6126      	str	r6, [r4, #16]
 8004106:	444e      	add	r6, r9
 8004108:	6026      	str	r6, [r4, #0]
 800410a:	463e      	mov	r6, r7
 800410c:	6165      	str	r5, [r4, #20]
 800410e:	eba5 0509 	sub.w	r5, r5, r9
 8004112:	60a5      	str	r5, [r4, #8]
 8004114:	42be      	cmp	r6, r7
 8004116:	d900      	bls.n	800411a <__ssputs_r+0x86>
 8004118:	463e      	mov	r6, r7
 800411a:	4632      	mov	r2, r6
 800411c:	4641      	mov	r1, r8
 800411e:	6820      	ldr	r0, [r4, #0]
 8004120:	f000 fac6 	bl	80046b0 <memmove>
 8004124:	68a3      	ldr	r3, [r4, #8]
 8004126:	6822      	ldr	r2, [r4, #0]
 8004128:	1b9b      	subs	r3, r3, r6
 800412a:	4432      	add	r2, r6
 800412c:	2000      	movs	r0, #0
 800412e:	60a3      	str	r3, [r4, #8]
 8004130:	6022      	str	r2, [r4, #0]
 8004132:	e7db      	b.n	80040ec <__ssputs_r+0x58>
 8004134:	462a      	mov	r2, r5
 8004136:	f000 fb7b 	bl	8004830 <_realloc_r>
 800413a:	4606      	mov	r6, r0
 800413c:	2800      	cmp	r0, #0
 800413e:	d1e1      	bne.n	8004104 <__ssputs_r+0x70>
 8004140:	4650      	mov	r0, sl
 8004142:	6921      	ldr	r1, [r4, #16]
 8004144:	f000 face 	bl	80046e4 <_free_r>
 8004148:	e7c7      	b.n	80040da <__ssputs_r+0x46>
	...

0800414c <_svfiprintf_r>:
 800414c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004150:	4698      	mov	r8, r3
 8004152:	898b      	ldrh	r3, [r1, #12]
 8004154:	4607      	mov	r7, r0
 8004156:	061b      	lsls	r3, r3, #24
 8004158:	460d      	mov	r5, r1
 800415a:	4614      	mov	r4, r2
 800415c:	b09d      	sub	sp, #116	; 0x74
 800415e:	d50e      	bpl.n	800417e <_svfiprintf_r+0x32>
 8004160:	690b      	ldr	r3, [r1, #16]
 8004162:	b963      	cbnz	r3, 800417e <_svfiprintf_r+0x32>
 8004164:	2140      	movs	r1, #64	; 0x40
 8004166:	f000 fb09 	bl	800477c <_malloc_r>
 800416a:	6028      	str	r0, [r5, #0]
 800416c:	6128      	str	r0, [r5, #16]
 800416e:	b920      	cbnz	r0, 800417a <_svfiprintf_r+0x2e>
 8004170:	230c      	movs	r3, #12
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004178:	e0d1      	b.n	800431e <_svfiprintf_r+0x1d2>
 800417a:	2340      	movs	r3, #64	; 0x40
 800417c:	616b      	str	r3, [r5, #20]
 800417e:	2300      	movs	r3, #0
 8004180:	9309      	str	r3, [sp, #36]	; 0x24
 8004182:	2320      	movs	r3, #32
 8004184:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004188:	2330      	movs	r3, #48	; 0x30
 800418a:	f04f 0901 	mov.w	r9, #1
 800418e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004192:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004338 <_svfiprintf_r+0x1ec>
 8004196:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800419a:	4623      	mov	r3, r4
 800419c:	469a      	mov	sl, r3
 800419e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041a2:	b10a      	cbz	r2, 80041a8 <_svfiprintf_r+0x5c>
 80041a4:	2a25      	cmp	r2, #37	; 0x25
 80041a6:	d1f9      	bne.n	800419c <_svfiprintf_r+0x50>
 80041a8:	ebba 0b04 	subs.w	fp, sl, r4
 80041ac:	d00b      	beq.n	80041c6 <_svfiprintf_r+0x7a>
 80041ae:	465b      	mov	r3, fp
 80041b0:	4622      	mov	r2, r4
 80041b2:	4629      	mov	r1, r5
 80041b4:	4638      	mov	r0, r7
 80041b6:	f7ff ff6d 	bl	8004094 <__ssputs_r>
 80041ba:	3001      	adds	r0, #1
 80041bc:	f000 80aa 	beq.w	8004314 <_svfiprintf_r+0x1c8>
 80041c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041c2:	445a      	add	r2, fp
 80041c4:	9209      	str	r2, [sp, #36]	; 0x24
 80041c6:	f89a 3000 	ldrb.w	r3, [sl]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 80a2 	beq.w	8004314 <_svfiprintf_r+0x1c8>
 80041d0:	2300      	movs	r3, #0
 80041d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041da:	f10a 0a01 	add.w	sl, sl, #1
 80041de:	9304      	str	r3, [sp, #16]
 80041e0:	9307      	str	r3, [sp, #28]
 80041e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041e6:	931a      	str	r3, [sp, #104]	; 0x68
 80041e8:	4654      	mov	r4, sl
 80041ea:	2205      	movs	r2, #5
 80041ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041f0:	4851      	ldr	r0, [pc, #324]	; (8004338 <_svfiprintf_r+0x1ec>)
 80041f2:	f000 fa41 	bl	8004678 <memchr>
 80041f6:	9a04      	ldr	r2, [sp, #16]
 80041f8:	b9d8      	cbnz	r0, 8004232 <_svfiprintf_r+0xe6>
 80041fa:	06d0      	lsls	r0, r2, #27
 80041fc:	bf44      	itt	mi
 80041fe:	2320      	movmi	r3, #32
 8004200:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004204:	0711      	lsls	r1, r2, #28
 8004206:	bf44      	itt	mi
 8004208:	232b      	movmi	r3, #43	; 0x2b
 800420a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800420e:	f89a 3000 	ldrb.w	r3, [sl]
 8004212:	2b2a      	cmp	r3, #42	; 0x2a
 8004214:	d015      	beq.n	8004242 <_svfiprintf_r+0xf6>
 8004216:	4654      	mov	r4, sl
 8004218:	2000      	movs	r0, #0
 800421a:	f04f 0c0a 	mov.w	ip, #10
 800421e:	9a07      	ldr	r2, [sp, #28]
 8004220:	4621      	mov	r1, r4
 8004222:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004226:	3b30      	subs	r3, #48	; 0x30
 8004228:	2b09      	cmp	r3, #9
 800422a:	d94e      	bls.n	80042ca <_svfiprintf_r+0x17e>
 800422c:	b1b0      	cbz	r0, 800425c <_svfiprintf_r+0x110>
 800422e:	9207      	str	r2, [sp, #28]
 8004230:	e014      	b.n	800425c <_svfiprintf_r+0x110>
 8004232:	eba0 0308 	sub.w	r3, r0, r8
 8004236:	fa09 f303 	lsl.w	r3, r9, r3
 800423a:	4313      	orrs	r3, r2
 800423c:	46a2      	mov	sl, r4
 800423e:	9304      	str	r3, [sp, #16]
 8004240:	e7d2      	b.n	80041e8 <_svfiprintf_r+0x9c>
 8004242:	9b03      	ldr	r3, [sp, #12]
 8004244:	1d19      	adds	r1, r3, #4
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	9103      	str	r1, [sp, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	bfbb      	ittet	lt
 800424e:	425b      	neglt	r3, r3
 8004250:	f042 0202 	orrlt.w	r2, r2, #2
 8004254:	9307      	strge	r3, [sp, #28]
 8004256:	9307      	strlt	r3, [sp, #28]
 8004258:	bfb8      	it	lt
 800425a:	9204      	strlt	r2, [sp, #16]
 800425c:	7823      	ldrb	r3, [r4, #0]
 800425e:	2b2e      	cmp	r3, #46	; 0x2e
 8004260:	d10c      	bne.n	800427c <_svfiprintf_r+0x130>
 8004262:	7863      	ldrb	r3, [r4, #1]
 8004264:	2b2a      	cmp	r3, #42	; 0x2a
 8004266:	d135      	bne.n	80042d4 <_svfiprintf_r+0x188>
 8004268:	9b03      	ldr	r3, [sp, #12]
 800426a:	3402      	adds	r4, #2
 800426c:	1d1a      	adds	r2, r3, #4
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	9203      	str	r2, [sp, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	bfb8      	it	lt
 8004276:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800427a:	9305      	str	r3, [sp, #20]
 800427c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004348 <_svfiprintf_r+0x1fc>
 8004280:	2203      	movs	r2, #3
 8004282:	4650      	mov	r0, sl
 8004284:	7821      	ldrb	r1, [r4, #0]
 8004286:	f000 f9f7 	bl	8004678 <memchr>
 800428a:	b140      	cbz	r0, 800429e <_svfiprintf_r+0x152>
 800428c:	2340      	movs	r3, #64	; 0x40
 800428e:	eba0 000a 	sub.w	r0, r0, sl
 8004292:	fa03 f000 	lsl.w	r0, r3, r0
 8004296:	9b04      	ldr	r3, [sp, #16]
 8004298:	3401      	adds	r4, #1
 800429a:	4303      	orrs	r3, r0
 800429c:	9304      	str	r3, [sp, #16]
 800429e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042a2:	2206      	movs	r2, #6
 80042a4:	4825      	ldr	r0, [pc, #148]	; (800433c <_svfiprintf_r+0x1f0>)
 80042a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042aa:	f000 f9e5 	bl	8004678 <memchr>
 80042ae:	2800      	cmp	r0, #0
 80042b0:	d038      	beq.n	8004324 <_svfiprintf_r+0x1d8>
 80042b2:	4b23      	ldr	r3, [pc, #140]	; (8004340 <_svfiprintf_r+0x1f4>)
 80042b4:	bb1b      	cbnz	r3, 80042fe <_svfiprintf_r+0x1b2>
 80042b6:	9b03      	ldr	r3, [sp, #12]
 80042b8:	3307      	adds	r3, #7
 80042ba:	f023 0307 	bic.w	r3, r3, #7
 80042be:	3308      	adds	r3, #8
 80042c0:	9303      	str	r3, [sp, #12]
 80042c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042c4:	4433      	add	r3, r6
 80042c6:	9309      	str	r3, [sp, #36]	; 0x24
 80042c8:	e767      	b.n	800419a <_svfiprintf_r+0x4e>
 80042ca:	460c      	mov	r4, r1
 80042cc:	2001      	movs	r0, #1
 80042ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80042d2:	e7a5      	b.n	8004220 <_svfiprintf_r+0xd4>
 80042d4:	2300      	movs	r3, #0
 80042d6:	f04f 0c0a 	mov.w	ip, #10
 80042da:	4619      	mov	r1, r3
 80042dc:	3401      	adds	r4, #1
 80042de:	9305      	str	r3, [sp, #20]
 80042e0:	4620      	mov	r0, r4
 80042e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042e6:	3a30      	subs	r2, #48	; 0x30
 80042e8:	2a09      	cmp	r2, #9
 80042ea:	d903      	bls.n	80042f4 <_svfiprintf_r+0x1a8>
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0c5      	beq.n	800427c <_svfiprintf_r+0x130>
 80042f0:	9105      	str	r1, [sp, #20]
 80042f2:	e7c3      	b.n	800427c <_svfiprintf_r+0x130>
 80042f4:	4604      	mov	r4, r0
 80042f6:	2301      	movs	r3, #1
 80042f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80042fc:	e7f0      	b.n	80042e0 <_svfiprintf_r+0x194>
 80042fe:	ab03      	add	r3, sp, #12
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	462a      	mov	r2, r5
 8004304:	4638      	mov	r0, r7
 8004306:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <_svfiprintf_r+0x1f8>)
 8004308:	a904      	add	r1, sp, #16
 800430a:	f3af 8000 	nop.w
 800430e:	1c42      	adds	r2, r0, #1
 8004310:	4606      	mov	r6, r0
 8004312:	d1d6      	bne.n	80042c2 <_svfiprintf_r+0x176>
 8004314:	89ab      	ldrh	r3, [r5, #12]
 8004316:	065b      	lsls	r3, r3, #25
 8004318:	f53f af2c 	bmi.w	8004174 <_svfiprintf_r+0x28>
 800431c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800431e:	b01d      	add	sp, #116	; 0x74
 8004320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004324:	ab03      	add	r3, sp, #12
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	462a      	mov	r2, r5
 800432a:	4638      	mov	r0, r7
 800432c:	4b05      	ldr	r3, [pc, #20]	; (8004344 <_svfiprintf_r+0x1f8>)
 800432e:	a904      	add	r1, sp, #16
 8004330:	f000 f87c 	bl	800442c <_printf_i>
 8004334:	e7eb      	b.n	800430e <_svfiprintf_r+0x1c2>
 8004336:	bf00      	nop
 8004338:	080050d5 	.word	0x080050d5
 800433c:	080050df 	.word	0x080050df
 8004340:	00000000 	.word	0x00000000
 8004344:	08004095 	.word	0x08004095
 8004348:	080050db 	.word	0x080050db

0800434c <_printf_common>:
 800434c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004350:	4616      	mov	r6, r2
 8004352:	4699      	mov	r9, r3
 8004354:	688a      	ldr	r2, [r1, #8]
 8004356:	690b      	ldr	r3, [r1, #16]
 8004358:	4607      	mov	r7, r0
 800435a:	4293      	cmp	r3, r2
 800435c:	bfb8      	it	lt
 800435e:	4613      	movlt	r3, r2
 8004360:	6033      	str	r3, [r6, #0]
 8004362:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004366:	460c      	mov	r4, r1
 8004368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800436c:	b10a      	cbz	r2, 8004372 <_printf_common+0x26>
 800436e:	3301      	adds	r3, #1
 8004370:	6033      	str	r3, [r6, #0]
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	0699      	lsls	r1, r3, #26
 8004376:	bf42      	ittt	mi
 8004378:	6833      	ldrmi	r3, [r6, #0]
 800437a:	3302      	addmi	r3, #2
 800437c:	6033      	strmi	r3, [r6, #0]
 800437e:	6825      	ldr	r5, [r4, #0]
 8004380:	f015 0506 	ands.w	r5, r5, #6
 8004384:	d106      	bne.n	8004394 <_printf_common+0x48>
 8004386:	f104 0a19 	add.w	sl, r4, #25
 800438a:	68e3      	ldr	r3, [r4, #12]
 800438c:	6832      	ldr	r2, [r6, #0]
 800438e:	1a9b      	subs	r3, r3, r2
 8004390:	42ab      	cmp	r3, r5
 8004392:	dc28      	bgt.n	80043e6 <_printf_common+0x9a>
 8004394:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004398:	1e13      	subs	r3, r2, #0
 800439a:	6822      	ldr	r2, [r4, #0]
 800439c:	bf18      	it	ne
 800439e:	2301      	movne	r3, #1
 80043a0:	0692      	lsls	r2, r2, #26
 80043a2:	d42d      	bmi.n	8004400 <_printf_common+0xb4>
 80043a4:	4649      	mov	r1, r9
 80043a6:	4638      	mov	r0, r7
 80043a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043ac:	47c0      	blx	r8
 80043ae:	3001      	adds	r0, #1
 80043b0:	d020      	beq.n	80043f4 <_printf_common+0xa8>
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	68e5      	ldr	r5, [r4, #12]
 80043b6:	f003 0306 	and.w	r3, r3, #6
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	bf18      	it	ne
 80043be:	2500      	movne	r5, #0
 80043c0:	6832      	ldr	r2, [r6, #0]
 80043c2:	f04f 0600 	mov.w	r6, #0
 80043c6:	68a3      	ldr	r3, [r4, #8]
 80043c8:	bf08      	it	eq
 80043ca:	1aad      	subeq	r5, r5, r2
 80043cc:	6922      	ldr	r2, [r4, #16]
 80043ce:	bf08      	it	eq
 80043d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043d4:	4293      	cmp	r3, r2
 80043d6:	bfc4      	itt	gt
 80043d8:	1a9b      	subgt	r3, r3, r2
 80043da:	18ed      	addgt	r5, r5, r3
 80043dc:	341a      	adds	r4, #26
 80043de:	42b5      	cmp	r5, r6
 80043e0:	d11a      	bne.n	8004418 <_printf_common+0xcc>
 80043e2:	2000      	movs	r0, #0
 80043e4:	e008      	b.n	80043f8 <_printf_common+0xac>
 80043e6:	2301      	movs	r3, #1
 80043e8:	4652      	mov	r2, sl
 80043ea:	4649      	mov	r1, r9
 80043ec:	4638      	mov	r0, r7
 80043ee:	47c0      	blx	r8
 80043f0:	3001      	adds	r0, #1
 80043f2:	d103      	bne.n	80043fc <_printf_common+0xb0>
 80043f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fc:	3501      	adds	r5, #1
 80043fe:	e7c4      	b.n	800438a <_printf_common+0x3e>
 8004400:	2030      	movs	r0, #48	; 0x30
 8004402:	18e1      	adds	r1, r4, r3
 8004404:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800440e:	4422      	add	r2, r4
 8004410:	3302      	adds	r3, #2
 8004412:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004416:	e7c5      	b.n	80043a4 <_printf_common+0x58>
 8004418:	2301      	movs	r3, #1
 800441a:	4622      	mov	r2, r4
 800441c:	4649      	mov	r1, r9
 800441e:	4638      	mov	r0, r7
 8004420:	47c0      	blx	r8
 8004422:	3001      	adds	r0, #1
 8004424:	d0e6      	beq.n	80043f4 <_printf_common+0xa8>
 8004426:	3601      	adds	r6, #1
 8004428:	e7d9      	b.n	80043de <_printf_common+0x92>
	...

0800442c <_printf_i>:
 800442c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004430:	460c      	mov	r4, r1
 8004432:	7e27      	ldrb	r7, [r4, #24]
 8004434:	4691      	mov	r9, r2
 8004436:	2f78      	cmp	r7, #120	; 0x78
 8004438:	4680      	mov	r8, r0
 800443a:	469a      	mov	sl, r3
 800443c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800443e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004442:	d807      	bhi.n	8004454 <_printf_i+0x28>
 8004444:	2f62      	cmp	r7, #98	; 0x62
 8004446:	d80a      	bhi.n	800445e <_printf_i+0x32>
 8004448:	2f00      	cmp	r7, #0
 800444a:	f000 80d9 	beq.w	8004600 <_printf_i+0x1d4>
 800444e:	2f58      	cmp	r7, #88	; 0x58
 8004450:	f000 80a4 	beq.w	800459c <_printf_i+0x170>
 8004454:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004458:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800445c:	e03a      	b.n	80044d4 <_printf_i+0xa8>
 800445e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004462:	2b15      	cmp	r3, #21
 8004464:	d8f6      	bhi.n	8004454 <_printf_i+0x28>
 8004466:	a001      	add	r0, pc, #4	; (adr r0, 800446c <_printf_i+0x40>)
 8004468:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800446c:	080044c5 	.word	0x080044c5
 8004470:	080044d9 	.word	0x080044d9
 8004474:	08004455 	.word	0x08004455
 8004478:	08004455 	.word	0x08004455
 800447c:	08004455 	.word	0x08004455
 8004480:	08004455 	.word	0x08004455
 8004484:	080044d9 	.word	0x080044d9
 8004488:	08004455 	.word	0x08004455
 800448c:	08004455 	.word	0x08004455
 8004490:	08004455 	.word	0x08004455
 8004494:	08004455 	.word	0x08004455
 8004498:	080045e7 	.word	0x080045e7
 800449c:	08004509 	.word	0x08004509
 80044a0:	080045c9 	.word	0x080045c9
 80044a4:	08004455 	.word	0x08004455
 80044a8:	08004455 	.word	0x08004455
 80044ac:	08004609 	.word	0x08004609
 80044b0:	08004455 	.word	0x08004455
 80044b4:	08004509 	.word	0x08004509
 80044b8:	08004455 	.word	0x08004455
 80044bc:	08004455 	.word	0x08004455
 80044c0:	080045d1 	.word	0x080045d1
 80044c4:	680b      	ldr	r3, [r1, #0]
 80044c6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044ca:	1d1a      	adds	r2, r3, #4
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	600a      	str	r2, [r1, #0]
 80044d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0a4      	b.n	8004622 <_printf_i+0x1f6>
 80044d8:	6825      	ldr	r5, [r4, #0]
 80044da:	6808      	ldr	r0, [r1, #0]
 80044dc:	062e      	lsls	r6, r5, #24
 80044de:	f100 0304 	add.w	r3, r0, #4
 80044e2:	d50a      	bpl.n	80044fa <_printf_i+0xce>
 80044e4:	6805      	ldr	r5, [r0, #0]
 80044e6:	600b      	str	r3, [r1, #0]
 80044e8:	2d00      	cmp	r5, #0
 80044ea:	da03      	bge.n	80044f4 <_printf_i+0xc8>
 80044ec:	232d      	movs	r3, #45	; 0x2d
 80044ee:	426d      	negs	r5, r5
 80044f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044f4:	230a      	movs	r3, #10
 80044f6:	485e      	ldr	r0, [pc, #376]	; (8004670 <_printf_i+0x244>)
 80044f8:	e019      	b.n	800452e <_printf_i+0x102>
 80044fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80044fe:	6805      	ldr	r5, [r0, #0]
 8004500:	600b      	str	r3, [r1, #0]
 8004502:	bf18      	it	ne
 8004504:	b22d      	sxthne	r5, r5
 8004506:	e7ef      	b.n	80044e8 <_printf_i+0xbc>
 8004508:	680b      	ldr	r3, [r1, #0]
 800450a:	6825      	ldr	r5, [r4, #0]
 800450c:	1d18      	adds	r0, r3, #4
 800450e:	6008      	str	r0, [r1, #0]
 8004510:	0628      	lsls	r0, r5, #24
 8004512:	d501      	bpl.n	8004518 <_printf_i+0xec>
 8004514:	681d      	ldr	r5, [r3, #0]
 8004516:	e002      	b.n	800451e <_printf_i+0xf2>
 8004518:	0669      	lsls	r1, r5, #25
 800451a:	d5fb      	bpl.n	8004514 <_printf_i+0xe8>
 800451c:	881d      	ldrh	r5, [r3, #0]
 800451e:	2f6f      	cmp	r7, #111	; 0x6f
 8004520:	bf0c      	ite	eq
 8004522:	2308      	moveq	r3, #8
 8004524:	230a      	movne	r3, #10
 8004526:	4852      	ldr	r0, [pc, #328]	; (8004670 <_printf_i+0x244>)
 8004528:	2100      	movs	r1, #0
 800452a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800452e:	6866      	ldr	r6, [r4, #4]
 8004530:	2e00      	cmp	r6, #0
 8004532:	bfa8      	it	ge
 8004534:	6821      	ldrge	r1, [r4, #0]
 8004536:	60a6      	str	r6, [r4, #8]
 8004538:	bfa4      	itt	ge
 800453a:	f021 0104 	bicge.w	r1, r1, #4
 800453e:	6021      	strge	r1, [r4, #0]
 8004540:	b90d      	cbnz	r5, 8004546 <_printf_i+0x11a>
 8004542:	2e00      	cmp	r6, #0
 8004544:	d04d      	beq.n	80045e2 <_printf_i+0x1b6>
 8004546:	4616      	mov	r6, r2
 8004548:	fbb5 f1f3 	udiv	r1, r5, r3
 800454c:	fb03 5711 	mls	r7, r3, r1, r5
 8004550:	5dc7      	ldrb	r7, [r0, r7]
 8004552:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004556:	462f      	mov	r7, r5
 8004558:	42bb      	cmp	r3, r7
 800455a:	460d      	mov	r5, r1
 800455c:	d9f4      	bls.n	8004548 <_printf_i+0x11c>
 800455e:	2b08      	cmp	r3, #8
 8004560:	d10b      	bne.n	800457a <_printf_i+0x14e>
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	07df      	lsls	r7, r3, #31
 8004566:	d508      	bpl.n	800457a <_printf_i+0x14e>
 8004568:	6923      	ldr	r3, [r4, #16]
 800456a:	6861      	ldr	r1, [r4, #4]
 800456c:	4299      	cmp	r1, r3
 800456e:	bfde      	ittt	le
 8004570:	2330      	movle	r3, #48	; 0x30
 8004572:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004576:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800457a:	1b92      	subs	r2, r2, r6
 800457c:	6122      	str	r2, [r4, #16]
 800457e:	464b      	mov	r3, r9
 8004580:	4621      	mov	r1, r4
 8004582:	4640      	mov	r0, r8
 8004584:	f8cd a000 	str.w	sl, [sp]
 8004588:	aa03      	add	r2, sp, #12
 800458a:	f7ff fedf 	bl	800434c <_printf_common>
 800458e:	3001      	adds	r0, #1
 8004590:	d14c      	bne.n	800462c <_printf_i+0x200>
 8004592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004596:	b004      	add	sp, #16
 8004598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800459c:	4834      	ldr	r0, [pc, #208]	; (8004670 <_printf_i+0x244>)
 800459e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045a2:	680e      	ldr	r6, [r1, #0]
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80045aa:	061f      	lsls	r7, r3, #24
 80045ac:	600e      	str	r6, [r1, #0]
 80045ae:	d514      	bpl.n	80045da <_printf_i+0x1ae>
 80045b0:	07d9      	lsls	r1, r3, #31
 80045b2:	bf44      	itt	mi
 80045b4:	f043 0320 	orrmi.w	r3, r3, #32
 80045b8:	6023      	strmi	r3, [r4, #0]
 80045ba:	b91d      	cbnz	r5, 80045c4 <_printf_i+0x198>
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	f023 0320 	bic.w	r3, r3, #32
 80045c2:	6023      	str	r3, [r4, #0]
 80045c4:	2310      	movs	r3, #16
 80045c6:	e7af      	b.n	8004528 <_printf_i+0xfc>
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	f043 0320 	orr.w	r3, r3, #32
 80045ce:	6023      	str	r3, [r4, #0]
 80045d0:	2378      	movs	r3, #120	; 0x78
 80045d2:	4828      	ldr	r0, [pc, #160]	; (8004674 <_printf_i+0x248>)
 80045d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045d8:	e7e3      	b.n	80045a2 <_printf_i+0x176>
 80045da:	065e      	lsls	r6, r3, #25
 80045dc:	bf48      	it	mi
 80045de:	b2ad      	uxthmi	r5, r5
 80045e0:	e7e6      	b.n	80045b0 <_printf_i+0x184>
 80045e2:	4616      	mov	r6, r2
 80045e4:	e7bb      	b.n	800455e <_printf_i+0x132>
 80045e6:	680b      	ldr	r3, [r1, #0]
 80045e8:	6826      	ldr	r6, [r4, #0]
 80045ea:	1d1d      	adds	r5, r3, #4
 80045ec:	6960      	ldr	r0, [r4, #20]
 80045ee:	600d      	str	r5, [r1, #0]
 80045f0:	0635      	lsls	r5, r6, #24
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	d501      	bpl.n	80045fa <_printf_i+0x1ce>
 80045f6:	6018      	str	r0, [r3, #0]
 80045f8:	e002      	b.n	8004600 <_printf_i+0x1d4>
 80045fa:	0671      	lsls	r1, r6, #25
 80045fc:	d5fb      	bpl.n	80045f6 <_printf_i+0x1ca>
 80045fe:	8018      	strh	r0, [r3, #0]
 8004600:	2300      	movs	r3, #0
 8004602:	4616      	mov	r6, r2
 8004604:	6123      	str	r3, [r4, #16]
 8004606:	e7ba      	b.n	800457e <_printf_i+0x152>
 8004608:	680b      	ldr	r3, [r1, #0]
 800460a:	1d1a      	adds	r2, r3, #4
 800460c:	600a      	str	r2, [r1, #0]
 800460e:	681e      	ldr	r6, [r3, #0]
 8004610:	2100      	movs	r1, #0
 8004612:	4630      	mov	r0, r6
 8004614:	6862      	ldr	r2, [r4, #4]
 8004616:	f000 f82f 	bl	8004678 <memchr>
 800461a:	b108      	cbz	r0, 8004620 <_printf_i+0x1f4>
 800461c:	1b80      	subs	r0, r0, r6
 800461e:	6060      	str	r0, [r4, #4]
 8004620:	6863      	ldr	r3, [r4, #4]
 8004622:	6123      	str	r3, [r4, #16]
 8004624:	2300      	movs	r3, #0
 8004626:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800462a:	e7a8      	b.n	800457e <_printf_i+0x152>
 800462c:	4632      	mov	r2, r6
 800462e:	4649      	mov	r1, r9
 8004630:	4640      	mov	r0, r8
 8004632:	6923      	ldr	r3, [r4, #16]
 8004634:	47d0      	blx	sl
 8004636:	3001      	adds	r0, #1
 8004638:	d0ab      	beq.n	8004592 <_printf_i+0x166>
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	079b      	lsls	r3, r3, #30
 800463e:	d413      	bmi.n	8004668 <_printf_i+0x23c>
 8004640:	68e0      	ldr	r0, [r4, #12]
 8004642:	9b03      	ldr	r3, [sp, #12]
 8004644:	4298      	cmp	r0, r3
 8004646:	bfb8      	it	lt
 8004648:	4618      	movlt	r0, r3
 800464a:	e7a4      	b.n	8004596 <_printf_i+0x16a>
 800464c:	2301      	movs	r3, #1
 800464e:	4632      	mov	r2, r6
 8004650:	4649      	mov	r1, r9
 8004652:	4640      	mov	r0, r8
 8004654:	47d0      	blx	sl
 8004656:	3001      	adds	r0, #1
 8004658:	d09b      	beq.n	8004592 <_printf_i+0x166>
 800465a:	3501      	adds	r5, #1
 800465c:	68e3      	ldr	r3, [r4, #12]
 800465e:	9903      	ldr	r1, [sp, #12]
 8004660:	1a5b      	subs	r3, r3, r1
 8004662:	42ab      	cmp	r3, r5
 8004664:	dcf2      	bgt.n	800464c <_printf_i+0x220>
 8004666:	e7eb      	b.n	8004640 <_printf_i+0x214>
 8004668:	2500      	movs	r5, #0
 800466a:	f104 0619 	add.w	r6, r4, #25
 800466e:	e7f5      	b.n	800465c <_printf_i+0x230>
 8004670:	080050e6 	.word	0x080050e6
 8004674:	080050f7 	.word	0x080050f7

08004678 <memchr>:
 8004678:	4603      	mov	r3, r0
 800467a:	b510      	push	{r4, lr}
 800467c:	b2c9      	uxtb	r1, r1
 800467e:	4402      	add	r2, r0
 8004680:	4293      	cmp	r3, r2
 8004682:	4618      	mov	r0, r3
 8004684:	d101      	bne.n	800468a <memchr+0x12>
 8004686:	2000      	movs	r0, #0
 8004688:	e003      	b.n	8004692 <memchr+0x1a>
 800468a:	7804      	ldrb	r4, [r0, #0]
 800468c:	3301      	adds	r3, #1
 800468e:	428c      	cmp	r4, r1
 8004690:	d1f6      	bne.n	8004680 <memchr+0x8>
 8004692:	bd10      	pop	{r4, pc}

08004694 <memcpy>:
 8004694:	440a      	add	r2, r1
 8004696:	4291      	cmp	r1, r2
 8004698:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800469c:	d100      	bne.n	80046a0 <memcpy+0xc>
 800469e:	4770      	bx	lr
 80046a0:	b510      	push	{r4, lr}
 80046a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046a6:	4291      	cmp	r1, r2
 80046a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046ac:	d1f9      	bne.n	80046a2 <memcpy+0xe>
 80046ae:	bd10      	pop	{r4, pc}

080046b0 <memmove>:
 80046b0:	4288      	cmp	r0, r1
 80046b2:	b510      	push	{r4, lr}
 80046b4:	eb01 0402 	add.w	r4, r1, r2
 80046b8:	d902      	bls.n	80046c0 <memmove+0x10>
 80046ba:	4284      	cmp	r4, r0
 80046bc:	4623      	mov	r3, r4
 80046be:	d807      	bhi.n	80046d0 <memmove+0x20>
 80046c0:	1e43      	subs	r3, r0, #1
 80046c2:	42a1      	cmp	r1, r4
 80046c4:	d008      	beq.n	80046d8 <memmove+0x28>
 80046c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046ce:	e7f8      	b.n	80046c2 <memmove+0x12>
 80046d0:	4601      	mov	r1, r0
 80046d2:	4402      	add	r2, r0
 80046d4:	428a      	cmp	r2, r1
 80046d6:	d100      	bne.n	80046da <memmove+0x2a>
 80046d8:	bd10      	pop	{r4, pc}
 80046da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046e2:	e7f7      	b.n	80046d4 <memmove+0x24>

080046e4 <_free_r>:
 80046e4:	b538      	push	{r3, r4, r5, lr}
 80046e6:	4605      	mov	r5, r0
 80046e8:	2900      	cmp	r1, #0
 80046ea:	d043      	beq.n	8004774 <_free_r+0x90>
 80046ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046f0:	1f0c      	subs	r4, r1, #4
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	bfb8      	it	lt
 80046f6:	18e4      	addlt	r4, r4, r3
 80046f8:	f000 f8d0 	bl	800489c <__malloc_lock>
 80046fc:	4a1e      	ldr	r2, [pc, #120]	; (8004778 <_free_r+0x94>)
 80046fe:	6813      	ldr	r3, [r2, #0]
 8004700:	4610      	mov	r0, r2
 8004702:	b933      	cbnz	r3, 8004712 <_free_r+0x2e>
 8004704:	6063      	str	r3, [r4, #4]
 8004706:	6014      	str	r4, [r2, #0]
 8004708:	4628      	mov	r0, r5
 800470a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800470e:	f000 b8cb 	b.w	80048a8 <__malloc_unlock>
 8004712:	42a3      	cmp	r3, r4
 8004714:	d90a      	bls.n	800472c <_free_r+0x48>
 8004716:	6821      	ldr	r1, [r4, #0]
 8004718:	1862      	adds	r2, r4, r1
 800471a:	4293      	cmp	r3, r2
 800471c:	bf01      	itttt	eq
 800471e:	681a      	ldreq	r2, [r3, #0]
 8004720:	685b      	ldreq	r3, [r3, #4]
 8004722:	1852      	addeq	r2, r2, r1
 8004724:	6022      	streq	r2, [r4, #0]
 8004726:	6063      	str	r3, [r4, #4]
 8004728:	6004      	str	r4, [r0, #0]
 800472a:	e7ed      	b.n	8004708 <_free_r+0x24>
 800472c:	461a      	mov	r2, r3
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	b10b      	cbz	r3, 8004736 <_free_r+0x52>
 8004732:	42a3      	cmp	r3, r4
 8004734:	d9fa      	bls.n	800472c <_free_r+0x48>
 8004736:	6811      	ldr	r1, [r2, #0]
 8004738:	1850      	adds	r0, r2, r1
 800473a:	42a0      	cmp	r0, r4
 800473c:	d10b      	bne.n	8004756 <_free_r+0x72>
 800473e:	6820      	ldr	r0, [r4, #0]
 8004740:	4401      	add	r1, r0
 8004742:	1850      	adds	r0, r2, r1
 8004744:	4283      	cmp	r3, r0
 8004746:	6011      	str	r1, [r2, #0]
 8004748:	d1de      	bne.n	8004708 <_free_r+0x24>
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	4401      	add	r1, r0
 8004750:	6011      	str	r1, [r2, #0]
 8004752:	6053      	str	r3, [r2, #4]
 8004754:	e7d8      	b.n	8004708 <_free_r+0x24>
 8004756:	d902      	bls.n	800475e <_free_r+0x7a>
 8004758:	230c      	movs	r3, #12
 800475a:	602b      	str	r3, [r5, #0]
 800475c:	e7d4      	b.n	8004708 <_free_r+0x24>
 800475e:	6820      	ldr	r0, [r4, #0]
 8004760:	1821      	adds	r1, r4, r0
 8004762:	428b      	cmp	r3, r1
 8004764:	bf01      	itttt	eq
 8004766:	6819      	ldreq	r1, [r3, #0]
 8004768:	685b      	ldreq	r3, [r3, #4]
 800476a:	1809      	addeq	r1, r1, r0
 800476c:	6021      	streq	r1, [r4, #0]
 800476e:	6063      	str	r3, [r4, #4]
 8004770:	6054      	str	r4, [r2, #4]
 8004772:	e7c9      	b.n	8004708 <_free_r+0x24>
 8004774:	bd38      	pop	{r3, r4, r5, pc}
 8004776:	bf00      	nop
 8004778:	200004d4 	.word	0x200004d4

0800477c <_malloc_r>:
 800477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477e:	1ccd      	adds	r5, r1, #3
 8004780:	f025 0503 	bic.w	r5, r5, #3
 8004784:	3508      	adds	r5, #8
 8004786:	2d0c      	cmp	r5, #12
 8004788:	bf38      	it	cc
 800478a:	250c      	movcc	r5, #12
 800478c:	2d00      	cmp	r5, #0
 800478e:	4606      	mov	r6, r0
 8004790:	db01      	blt.n	8004796 <_malloc_r+0x1a>
 8004792:	42a9      	cmp	r1, r5
 8004794:	d903      	bls.n	800479e <_malloc_r+0x22>
 8004796:	230c      	movs	r3, #12
 8004798:	6033      	str	r3, [r6, #0]
 800479a:	2000      	movs	r0, #0
 800479c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800479e:	f000 f87d 	bl	800489c <__malloc_lock>
 80047a2:	4921      	ldr	r1, [pc, #132]	; (8004828 <_malloc_r+0xac>)
 80047a4:	680a      	ldr	r2, [r1, #0]
 80047a6:	4614      	mov	r4, r2
 80047a8:	b99c      	cbnz	r4, 80047d2 <_malloc_r+0x56>
 80047aa:	4f20      	ldr	r7, [pc, #128]	; (800482c <_malloc_r+0xb0>)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	b923      	cbnz	r3, 80047ba <_malloc_r+0x3e>
 80047b0:	4621      	mov	r1, r4
 80047b2:	4630      	mov	r0, r6
 80047b4:	f000 f862 	bl	800487c <_sbrk_r>
 80047b8:	6038      	str	r0, [r7, #0]
 80047ba:	4629      	mov	r1, r5
 80047bc:	4630      	mov	r0, r6
 80047be:	f000 f85d 	bl	800487c <_sbrk_r>
 80047c2:	1c43      	adds	r3, r0, #1
 80047c4:	d123      	bne.n	800480e <_malloc_r+0x92>
 80047c6:	230c      	movs	r3, #12
 80047c8:	4630      	mov	r0, r6
 80047ca:	6033      	str	r3, [r6, #0]
 80047cc:	f000 f86c 	bl	80048a8 <__malloc_unlock>
 80047d0:	e7e3      	b.n	800479a <_malloc_r+0x1e>
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	1b5b      	subs	r3, r3, r5
 80047d6:	d417      	bmi.n	8004808 <_malloc_r+0x8c>
 80047d8:	2b0b      	cmp	r3, #11
 80047da:	d903      	bls.n	80047e4 <_malloc_r+0x68>
 80047dc:	6023      	str	r3, [r4, #0]
 80047de:	441c      	add	r4, r3
 80047e0:	6025      	str	r5, [r4, #0]
 80047e2:	e004      	b.n	80047ee <_malloc_r+0x72>
 80047e4:	6863      	ldr	r3, [r4, #4]
 80047e6:	42a2      	cmp	r2, r4
 80047e8:	bf0c      	ite	eq
 80047ea:	600b      	streq	r3, [r1, #0]
 80047ec:	6053      	strne	r3, [r2, #4]
 80047ee:	4630      	mov	r0, r6
 80047f0:	f000 f85a 	bl	80048a8 <__malloc_unlock>
 80047f4:	f104 000b 	add.w	r0, r4, #11
 80047f8:	1d23      	adds	r3, r4, #4
 80047fa:	f020 0007 	bic.w	r0, r0, #7
 80047fe:	1ac2      	subs	r2, r0, r3
 8004800:	d0cc      	beq.n	800479c <_malloc_r+0x20>
 8004802:	1a1b      	subs	r3, r3, r0
 8004804:	50a3      	str	r3, [r4, r2]
 8004806:	e7c9      	b.n	800479c <_malloc_r+0x20>
 8004808:	4622      	mov	r2, r4
 800480a:	6864      	ldr	r4, [r4, #4]
 800480c:	e7cc      	b.n	80047a8 <_malloc_r+0x2c>
 800480e:	1cc4      	adds	r4, r0, #3
 8004810:	f024 0403 	bic.w	r4, r4, #3
 8004814:	42a0      	cmp	r0, r4
 8004816:	d0e3      	beq.n	80047e0 <_malloc_r+0x64>
 8004818:	1a21      	subs	r1, r4, r0
 800481a:	4630      	mov	r0, r6
 800481c:	f000 f82e 	bl	800487c <_sbrk_r>
 8004820:	3001      	adds	r0, #1
 8004822:	d1dd      	bne.n	80047e0 <_malloc_r+0x64>
 8004824:	e7cf      	b.n	80047c6 <_malloc_r+0x4a>
 8004826:	bf00      	nop
 8004828:	200004d4 	.word	0x200004d4
 800482c:	200004d8 	.word	0x200004d8

08004830 <_realloc_r>:
 8004830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004832:	4607      	mov	r7, r0
 8004834:	4614      	mov	r4, r2
 8004836:	460e      	mov	r6, r1
 8004838:	b921      	cbnz	r1, 8004844 <_realloc_r+0x14>
 800483a:	4611      	mov	r1, r2
 800483c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004840:	f7ff bf9c 	b.w	800477c <_malloc_r>
 8004844:	b922      	cbnz	r2, 8004850 <_realloc_r+0x20>
 8004846:	f7ff ff4d 	bl	80046e4 <_free_r>
 800484a:	4625      	mov	r5, r4
 800484c:	4628      	mov	r0, r5
 800484e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004850:	f000 f830 	bl	80048b4 <_malloc_usable_size_r>
 8004854:	42a0      	cmp	r0, r4
 8004856:	d20f      	bcs.n	8004878 <_realloc_r+0x48>
 8004858:	4621      	mov	r1, r4
 800485a:	4638      	mov	r0, r7
 800485c:	f7ff ff8e 	bl	800477c <_malloc_r>
 8004860:	4605      	mov	r5, r0
 8004862:	2800      	cmp	r0, #0
 8004864:	d0f2      	beq.n	800484c <_realloc_r+0x1c>
 8004866:	4631      	mov	r1, r6
 8004868:	4622      	mov	r2, r4
 800486a:	f7ff ff13 	bl	8004694 <memcpy>
 800486e:	4631      	mov	r1, r6
 8004870:	4638      	mov	r0, r7
 8004872:	f7ff ff37 	bl	80046e4 <_free_r>
 8004876:	e7e9      	b.n	800484c <_realloc_r+0x1c>
 8004878:	4635      	mov	r5, r6
 800487a:	e7e7      	b.n	800484c <_realloc_r+0x1c>

0800487c <_sbrk_r>:
 800487c:	b538      	push	{r3, r4, r5, lr}
 800487e:	2300      	movs	r3, #0
 8004880:	4d05      	ldr	r5, [pc, #20]	; (8004898 <_sbrk_r+0x1c>)
 8004882:	4604      	mov	r4, r0
 8004884:	4608      	mov	r0, r1
 8004886:	602b      	str	r3, [r5, #0]
 8004888:	f7fc fd10 	bl	80012ac <_sbrk>
 800488c:	1c43      	adds	r3, r0, #1
 800488e:	d102      	bne.n	8004896 <_sbrk_r+0x1a>
 8004890:	682b      	ldr	r3, [r5, #0]
 8004892:	b103      	cbz	r3, 8004896 <_sbrk_r+0x1a>
 8004894:	6023      	str	r3, [r4, #0]
 8004896:	bd38      	pop	{r3, r4, r5, pc}
 8004898:	200005d0 	.word	0x200005d0

0800489c <__malloc_lock>:
 800489c:	4801      	ldr	r0, [pc, #4]	; (80048a4 <__malloc_lock+0x8>)
 800489e:	f000 b811 	b.w	80048c4 <__retarget_lock_acquire_recursive>
 80048a2:	bf00      	nop
 80048a4:	200005d8 	.word	0x200005d8

080048a8 <__malloc_unlock>:
 80048a8:	4801      	ldr	r0, [pc, #4]	; (80048b0 <__malloc_unlock+0x8>)
 80048aa:	f000 b80c 	b.w	80048c6 <__retarget_lock_release_recursive>
 80048ae:	bf00      	nop
 80048b0:	200005d8 	.word	0x200005d8

080048b4 <_malloc_usable_size_r>:
 80048b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048b8:	1f18      	subs	r0, r3, #4
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	bfbc      	itt	lt
 80048be:	580b      	ldrlt	r3, [r1, r0]
 80048c0:	18c0      	addlt	r0, r0, r3
 80048c2:	4770      	bx	lr

080048c4 <__retarget_lock_acquire_recursive>:
 80048c4:	4770      	bx	lr

080048c6 <__retarget_lock_release_recursive>:
 80048c6:	4770      	bx	lr

080048c8 <_init>:
 80048c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ca:	bf00      	nop
 80048cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ce:	bc08      	pop	{r3}
 80048d0:	469e      	mov	lr, r3
 80048d2:	4770      	bx	lr

080048d4 <_fini>:
 80048d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d6:	bf00      	nop
 80048d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048da:	bc08      	pop	{r3}
 80048dc:	469e      	mov	lr, r3
 80048de:	4770      	bx	lr
