
TX_pipe_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         000047cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000828  080048d8  080048d8  000148d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005100  08005100  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08005100  08005100  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005100  08005100  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005100  08005100  00015100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005104  08005104  00015104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  20000080  08005188  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  08005188  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1a0  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b3  00000000  00000000  0002e249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00030500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  00031130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000024c9  00000000  00000000  00031ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe9d  00000000  00000000  00034171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008721e  00000000  00000000  0004400e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb22c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003668  00000000  00000000  000cb280  2**2
=======
  1 .text         000047e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000828  080048f0  080048f0  000148f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005118  08005118  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08005118  08005118  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005118  08005118  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005118  08005118  00015118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800511c  0800511c  0001511c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  20000080  080051a0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  080051a0  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e16c  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000229e  00000000  00000000  0002e215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  000304b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  000310e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000024c9  00000000  00000000  00031c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fead  00000000  00000000  00034129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008721e  00000000  00000000  00043fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb1f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003668  00000000  00000000  000cb248  2**2
>>>>>>> FFF
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
<<<<<<< HEAD
 800012c:	080048c0 	.word	0x080048c0
=======
 800012c:	080048d8 	.word	0x080048d8
>>>>>>> FFF

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
<<<<<<< HEAD
 8000148:	080048c0 	.word	0x080048c0
=======
 8000148:	080048d8 	.word	0x080048d8
>>>>>>> FFF

0800014c <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000154:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <DelayMicro+0x3c>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <DelayMicro+0x3c>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4a0b      	ldr	r2, [pc, #44]	; (800018c <DelayMicro+0x40>)
 8000160:	fba2 2303 	umull	r2, r3, r2, r3
 8000164:	0ddb      	lsrs	r3, r3, #23
 8000166:	687a      	ldr	r2, [r7, #4]
 8000168:	fb02 f303 	mul.w	r3, r2, r3
 800016c:	607b      	str	r3, [r7, #4]
	while (micros--);
 800016e:	bf00      	nop
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	1e5a      	subs	r2, r3, #1
 8000174:	607a      	str	r2, [r7, #4]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d1fa      	bne.n	8000170 <DelayMicro+0x24>
}
 800017a:	bf00      	nop
 800017c:	bf00      	nop
 800017e:	3714      	adds	r7, #20
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	20000010 	.word	0x20000010
 800018c:	ffa71ee7 	.word	0xffa71ee7

08000190 <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b086      	sub	sp, #24
 8000194:	af02      	add	r7, sp, #8
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 800019a:	2300      	movs	r3, #0
 800019c:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 800019e:	2200      	movs	r2, #0
 80001a0:	2110      	movs	r1, #16
 80001a2:	4813      	ldr	r0, [pc, #76]	; (80001f0 <NRF24_ReadReg+0x60>)
<<<<<<< HEAD
 80001a4:	f001 fcbf 	bl	8001b26 <HAL_GPIO_WritePin>
=======
 80001a4:	f001 fccb 	bl	8001b3e <HAL_GPIO_WritePin>
>>>>>>> FFF
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 80001a8:	f107 020f 	add.w	r2, r7, #15
 80001ac:	1df9      	adds	r1, r7, #7
 80001ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b2:	9300      	str	r3, [sp, #0]
 80001b4:	2301      	movs	r3, #1
 80001b6:	480f      	ldr	r0, [pc, #60]	; (80001f4 <NRF24_ReadReg+0x64>)
<<<<<<< HEAD
 80001b8:	f003 f813 	bl	80031e2 <HAL_SPI_TransmitReceive>
=======
 80001b8:	f003 f81f 	bl	80031fa <HAL_SPI_TransmitReceive>
>>>>>>> FFF

  if (addr!=STATUS_NRF)
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	2b07      	cmp	r3, #7
 80001c0:	d00c      	beq.n	80001dc <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 80001c2:	23ff      	movs	r3, #255	; 0xff
 80001c4:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 80001c6:	f107 020f 	add.w	r2, r7, #15
 80001ca:	f107 010e 	add.w	r1, r7, #14
 80001ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d2:	9300      	str	r3, [sp, #0]
 80001d4:	2301      	movs	r3, #1
 80001d6:	4807      	ldr	r0, [pc, #28]	; (80001f4 <NRF24_ReadReg+0x64>)
<<<<<<< HEAD
 80001d8:	f003 f803 	bl	80031e2 <HAL_SPI_TransmitReceive>
=======
 80001d8:	f003 f80f 	bl	80031fa <HAL_SPI_TransmitReceive>
>>>>>>> FFF
  }
  CS_OFF;
 80001dc:	2201      	movs	r2, #1
 80001de:	2110      	movs	r1, #16
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <NRF24_ReadReg+0x60>)
<<<<<<< HEAD
 80001e2:	f001 fca0 	bl	8001b26 <HAL_GPIO_WritePin>
=======
 80001e2:	f001 fcac 	bl	8001b3e <HAL_GPIO_WritePin>
>>>>>>> FFF
  return dt;
 80001e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3710      	adds	r7, #16
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40010800 	.word	0x40010800
 80001f4:	20000574 	.word	0x20000574

080001f8 <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	460a      	mov	r2, r1
 8000202:	71fb      	strb	r3, [r7, #7]
 8000204:	4613      	mov	r3, r2
 8000206:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	f043 0320 	orr.w	r3, r3, #32
 800020e:	b2db      	uxtb	r3, r3
 8000210:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	480d      	ldr	r0, [pc, #52]	; (800024c <NRF24_WriteReg+0x54>)
<<<<<<< HEAD
 8000218:	f001 fc85 	bl	8001b26 <HAL_GPIO_WritePin>
=======
 8000218:	f001 fc91 	bl	8001b3e <HAL_GPIO_WritePin>
>>>>>>> FFF
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800021c:	1df9      	adds	r1, r7, #7
 800021e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000222:	2201      	movs	r2, #1
 8000224:	480a      	ldr	r0, [pc, #40]	; (8000250 <NRF24_WriteReg+0x58>)
<<<<<<< HEAD
 8000226:	f002 fd8f 	bl	8002d48 <HAL_SPI_Transmit>
=======
 8000226:	f002 fd9b 	bl	8002d60 <HAL_SPI_Transmit>
>>>>>>> FFF
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 800022a:	1db9      	adds	r1, r7, #6
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	2201      	movs	r2, #1
 8000232:	4807      	ldr	r0, [pc, #28]	; (8000250 <NRF24_WriteReg+0x58>)
<<<<<<< HEAD
 8000234:	f002 fd88 	bl	8002d48 <HAL_SPI_Transmit>
=======
 8000234:	f002 fd94 	bl	8002d60 <HAL_SPI_Transmit>
>>>>>>> FFF
  CS_OFF;
 8000238:	2201      	movs	r2, #1
 800023a:	2110      	movs	r1, #16
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <NRF24_WriteReg+0x54>)
<<<<<<< HEAD
 800023e:	f001 fc72 	bl	8001b26 <HAL_GPIO_WritePin>
=======
 800023e:	f001 fc7e 	bl	8001b3e <HAL_GPIO_WritePin>
>>>>>>> FFF
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40010800 	.word	0x40010800
 8000250:	20000574 	.word	0x20000574

08000254 <NRF24_ToggleFeatures>:
//----------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 800025a:	2350      	movs	r3, #80	; 0x50
 800025c:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800025e:	2200      	movs	r2, #0
 8000260:	2110      	movs	r1, #16
 8000262:	480f      	ldr	r0, [pc, #60]	; (80002a0 <NRF24_ToggleFeatures+0x4c>)
<<<<<<< HEAD
 8000264:	f001 fc5f 	bl	8001b26 <HAL_GPIO_WritePin>
=======
 8000264:	f001 fc6b 	bl	8001b3e <HAL_GPIO_WritePin>
>>>>>>> FFF
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000268:	1d39      	adds	r1, r7, #4
 800026a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800026e:	2201      	movs	r2, #1
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <NRF24_ToggleFeatures+0x50>)
<<<<<<< HEAD
 8000272:	f002 fd69 	bl	8002d48 <HAL_SPI_Transmit>
=======
 8000272:	f002 fd75 	bl	8002d60 <HAL_SPI_Transmit>
>>>>>>> FFF
  DelayMicro(1);
 8000276:	2001      	movs	r0, #1
 8000278:	f7ff ff68 	bl	800014c <DelayMicro>
  dt[0] = 0x73;
 800027c:	2373      	movs	r3, #115	; 0x73
 800027e:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000280:	1d39      	adds	r1, r7, #4
 8000282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000286:	2201      	movs	r2, #1
 8000288:	4806      	ldr	r0, [pc, #24]	; (80002a4 <NRF24_ToggleFeatures+0x50>)
<<<<<<< HEAD
 800028a:	f002 fd5d 	bl	8002d48 <HAL_SPI_Transmit>
=======
 800028a:	f002 fd69 	bl	8002d60 <HAL_SPI_Transmit>
>>>>>>> FFF
  CS_OFF;
 800028e:	2201      	movs	r2, #1
 8000290:	2110      	movs	r1, #16
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <NRF24_ToggleFeatures+0x4c>)
<<<<<<< HEAD
 8000294:	f001 fc47 	bl	8001b26 <HAL_GPIO_WritePin>
=======
 8000294:	f001 fc53 	bl	8001b3e <HAL_GPIO_WritePin>
>>>>>>> FFF
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40010800 	.word	0x40010800
 80002a4:	20000574 	.word	0x20000574

080002a8 <NRF24_Read_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	6039      	str	r1, [r7, #0]
 80002b2:	71fb      	strb	r3, [r7, #7]
 80002b4:	4613      	mov	r3, r2
 80002b6:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 80002b8:	2200      	movs	r2, #0
 80002ba:	2110      	movs	r1, #16
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <NRF24_Read_Buf+0x4c>)
<<<<<<< HEAD
 80002be:	f001 fc32 	bl	8001b26 <HAL_GPIO_WritePin>
=======
 80002be:	f001 fc3e 	bl	8001b3e <HAL_GPIO_WritePin>
>>>>>>> FFF
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 80002c2:	1df9      	adds	r1, r7, #7
 80002c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c8:	2201      	movs	r2, #1
 80002ca:	480b      	ldr	r0, [pc, #44]	; (80002f8 <NRF24_Read_Buf+0x50>)
<<<<<<< HEAD
 80002cc:	f002 fd3c 	bl	8002d48 <HAL_SPI_Transmit>
=======
 80002cc:	f002 fd48 	bl	8002d60 <HAL_SPI_Transmit>
>>>>>>> FFF
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 80002d0:	79bb      	ldrb	r3, [r7, #6]
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d8:	6839      	ldr	r1, [r7, #0]
 80002da:	4807      	ldr	r0, [pc, #28]	; (80002f8 <NRF24_Read_Buf+0x50>)
<<<<<<< HEAD
 80002dc:	f002 fe70 	bl	8002fc0 <HAL_SPI_Receive>
=======
 80002dc:	f002 fe7c 	bl	8002fd8 <HAL_SPI_Receive>
>>>>>>> FFF
  CS_OFF;
 80002e0:	2201      	movs	r2, #1
 80002e2:	2110      	movs	r1, #16
 80002e4:	4803      	ldr	r0, [pc, #12]	; (80002f4 <NRF24_Read_Buf+0x4c>)
<<<<<<< HEAD
 80002e6:	f001 fc1e 	bl	8001b26 <HAL_GPIO_WritePin>
=======
 80002e6:	f001 fc2a 	bl	8001b3e <HAL_GPIO_WritePin>
>>>>>>> FFF
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40010800 	.word	0x40010800
 80002f8:	20000574 	.word	0x20000574

080002fc <NRF24_Write_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]
 8000308:	4613      	mov	r3, r2
 800030a:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								//Add write bit
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	f043 0320 	orr.w	r3, r3, #32
 8000312:	b2db      	uxtb	r3, r3
 8000314:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000316:	2200      	movs	r2, #0
 8000318:	2110      	movs	r1, #16
 800031a:	480f      	ldr	r0, [pc, #60]	; (8000358 <NRF24_Write_Buf+0x5c>)
<<<<<<< HEAD
 800031c:	f001 fc03 	bl	8001b26 <HAL_GPIO_WritePin>
=======
 800031c:	f001 fc0f 	bl	8001b3e <HAL_GPIO_WritePin>
>>>>>>> FFF
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000320:	1df9      	adds	r1, r7, #7
 8000322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000326:	2201      	movs	r2, #1
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <NRF24_Write_Buf+0x60>)
<<<<<<< HEAD
 800032a:	f002 fd0d 	bl	8002d48 <HAL_SPI_Transmit>
=======
 800032a:	f002 fd19 	bl	8002d60 <HAL_SPI_Transmit>
>>>>>>> FFF
  DelayMicro(1);
 800032e:	2001      	movs	r0, #1
 8000330:	f7ff ff0c 	bl	800014c <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000);			// Send data in buffer
 8000334:	79bb      	ldrb	r3, [r7, #6]
 8000336:	b29a      	uxth	r2, r3
 8000338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033c:	6839      	ldr	r1, [r7, #0]
 800033e:	4807      	ldr	r0, [pc, #28]	; (800035c <NRF24_Write_Buf+0x60>)
<<<<<<< HEAD
 8000340:	f002 fd02 	bl	8002d48 <HAL_SPI_Transmit>
=======
 8000340:	f002 fd0e 	bl	8002d60 <HAL_SPI_Transmit>
>>>>>>> FFF
  CS_OFF;
 8000344:	2201      	movs	r2, #1
 8000346:	2110      	movs	r1, #16
 8000348:	4803      	ldr	r0, [pc, #12]	; (8000358 <NRF24_Write_Buf+0x5c>)
<<<<<<< HEAD
 800034a:	f001 fbec 	bl	8001b26 <HAL_GPIO_WritePin>
=======
 800034a:	f001 fbf8 	bl	8001b3e <HAL_GPIO_WritePin>
>>>>>>> FFF
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010800 	.word	0x40010800
 800035c:	20000574 	.word	0x20000574

08000360 <NRF24_FlushRX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushRX(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 8000366:	23e2      	movs	r3, #226	; 0xe2
 8000368:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800036a:	2200      	movs	r2, #0
 800036c:	2110      	movs	r1, #16
 800036e:	480b      	ldr	r0, [pc, #44]	; (800039c <NRF24_FlushRX+0x3c>)
<<<<<<< HEAD
 8000370:	f001 fbd9 	bl	8001b26 <HAL_GPIO_WritePin>
=======
 8000370:	f001 fbe5 	bl	8001b3e <HAL_GPIO_WritePin>
>>>>>>> FFF
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000374:	1d39      	adds	r1, r7, #4
 8000376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800037a:	2201      	movs	r2, #1
 800037c:	4808      	ldr	r0, [pc, #32]	; (80003a0 <NRF24_FlushRX+0x40>)
<<<<<<< HEAD
 800037e:	f002 fce3 	bl	8002d48 <HAL_SPI_Transmit>
=======
 800037e:	f002 fcef 	bl	8002d60 <HAL_SPI_Transmit>
>>>>>>> FFF
  DelayMicro(1);
 8000382:	2001      	movs	r0, #1
 8000384:	f7ff fee2 	bl	800014c <DelayMicro>
  CS_OFF;
 8000388:	2201      	movs	r2, #1
 800038a:	2110      	movs	r1, #16
 800038c:	4803      	ldr	r0, [pc, #12]	; (800039c <NRF24_FlushRX+0x3c>)
<<<<<<< HEAD
 800038e:	f001 fbca 	bl	8001b26 <HAL_GPIO_WritePin>
=======
 800038e:	f001 fbd6 	bl	8001b3e <HAL_GPIO_WritePin>
>>>>>>> FFF
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40010800 	.word	0x40010800
 80003a0:	20000574 	.word	0x20000574

080003a4 <NRF24_FlushTX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushTX(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 80003aa:	23e1      	movs	r3, #225	; 0xe1
 80003ac:	713b      	strb	r3, [r7, #4]
  CS_ON;
 80003ae:	2200      	movs	r2, #0
 80003b0:	2110      	movs	r1, #16
 80003b2:	480b      	ldr	r0, [pc, #44]	; (80003e0 <NRF24_FlushTX+0x3c>)
<<<<<<< HEAD
 80003b4:	f001 fbb7 	bl	8001b26 <HAL_GPIO_WritePin>
=======
 80003b4:	f001 fbc3 	bl	8001b3e <HAL_GPIO_WritePin>
>>>>>>> FFF
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 80003b8:	1d39      	adds	r1, r7, #4
 80003ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003be:	2201      	movs	r2, #1
 80003c0:	4808      	ldr	r0, [pc, #32]	; (80003e4 <NRF24_FlushTX+0x40>)
<<<<<<< HEAD
 80003c2:	f002 fcc1 	bl	8002d48 <HAL_SPI_Transmit>
=======
 80003c2:	f002 fccd 	bl	8002d60 <HAL_SPI_Transmit>
>>>>>>> FFF
  DelayMicro(1);
 80003c6:	2001      	movs	r0, #1
 80003c8:	f7ff fec0 	bl	800014c <DelayMicro>
  CS_OFF;
 80003cc:	2201      	movs	r2, #1
 80003ce:	2110      	movs	r1, #16
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <NRF24_FlushTX+0x3c>)
<<<<<<< HEAD
 80003d2:	f001 fba8 	bl	8001b26 <HAL_GPIO_WritePin>
=======
 80003d2:	f001 fbb4 	bl	8001b3e <HAL_GPIO_WritePin>
>>>>>>> FFF
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40010800 	.word	0x40010800
 80003e4:	20000574 	.word	0x20000574
<<<<<<< HEAD

080003e8 <NRF24L01_RX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 80003ee:	2300      	movs	r3, #0
 80003f0:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 80003f2:	2000      	movs	r0, #0
 80003f4:	f7ff fecc 	bl	8000190 <NRF24_ReadReg>
 80003f8:	4603      	mov	r3, r0
 80003fa:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP)|(1<<PRIM_RX);	 // Power up module. Write PWR_UP и PRIM_RX bits
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	f043 0303 	orr.w	r3, r3, #3
 8000402:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	4619      	mov	r1, r3
 8000408:	2000      	movs	r0, #0
 800040a:	f7ff fef5 	bl	80001f8 <NRF24_WriteReg>
  CE_SET;
 800040e:	2201      	movs	r2, #1
 8000410:	2108      	movs	r1, #8
 8000412:	4807      	ldr	r0, [pc, #28]	; (8000430 <NRF24L01_RX_Mode+0x48>)
 8000414:	f001 fb87 	bl	8001b26 <HAL_GPIO_WritePin>
  DelayMicro(150);						 // Delay 130 us
 8000418:	2096      	movs	r0, #150	; 0x96
 800041a:	f7ff fe97 	bl	800014c <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 800041e:	f7ff ff9f 	bl	8000360 <NRF24_FlushRX>
  NRF24_FlushTX();
 8000422:	f7ff ffbf 	bl	80003a4 <NRF24_FlushTX>
}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40010800 	.word	0x40010800

08000434 <NRF24_ini>:
//----------------------------------------------------------------------------------------
void NRF24_ini(void)    // TRANSMITTER
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	CE_RESET;
 8000438:	2200      	movs	r2, #0
 800043a:	2108      	movs	r1, #8
 800043c:	4824      	ldr	r0, [pc, #144]	; (80004d0 <NRF24_ini+0x9c>)
 800043e:	f001 fb72 	bl	8001b26 <HAL_GPIO_WritePin>
	DelayMicro(5000);
 8000442:	f241 3088 	movw	r0, #5000	; 0x1388
 8000446:	f7ff fe81 	bl	800014c <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 800044a:	210a      	movs	r1, #10
 800044c:	2000      	movs	r0, #0
 800044e:	f7ff fed3 	bl	80001f8 <NRF24_WriteReg>

	DelayMicro(5000);
 8000452:	f241 3088 	movw	r0, #5000	; 0x1388
 8000456:	f7ff fe79 	bl	800014c <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable Pipe0
 800045a:	2101      	movs	r1, #1
 800045c:	2001      	movs	r0, #1
 800045e:	f7ff fecb 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe0
 8000462:	2101      	movs	r1, #1
 8000464:	2002      	movs	r0, #2
 8000466:	f7ff fec7 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 800046a:	2101      	movs	r1, #1
 800046c:	2003      	movs	r0, #3
 800046e:	f7ff fec3 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 8000472:	215f      	movs	r1, #95	; 0x5f
 8000474:	2004      	movs	r0, #4
 8000476:	f7ff febf 	bl	80001f8 <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 800047a:	f7ff feeb 	bl	8000254 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 800047e:	2100      	movs	r1, #0
 8000480:	201d      	movs	r0, #29
 8000482:	f7ff feb9 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 8000486:	2100      	movs	r1, #0
 8000488:	201c      	movs	r0, #28
 800048a:	f7ff feb5 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 800048e:	2170      	movs	r1, #112	; 0x70
 8000490:	2007      	movs	r0, #7
 8000492:	f7ff feb1 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 8000496:	214c      	movs	r1, #76	; 0x4c
 8000498:	2005      	movs	r0, #5
 800049a:	f7ff fead 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate:250kbps
 800049e:	2126      	movs	r1, #38	; 0x26
 80004a0:	2006      	movs	r0, #6
 80004a2:	f7ff fea9 	bl	80001f8 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);			// Write TX address
 80004a6:	2203      	movs	r2, #3
 80004a8:	490a      	ldr	r1, [pc, #40]	; (80004d4 <NRF24_ini+0xa0>)
 80004aa:	2010      	movs	r0, #16
 80004ac:	f7ff ff26 	bl	80002fc <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);		// Set up pipe 0 address
 80004b0:	2203      	movs	r2, #3
 80004b2:	4908      	ldr	r1, [pc, #32]	; (80004d4 <NRF24_ini+0xa0>)
 80004b4:	200a      	movs	r0, #10
 80004b6:	f7ff ff21 	bl	80002fc <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 	// Number of bytes in TX buffer
 80004ba:	210a      	movs	r1, #10
 80004bc:	2011      	movs	r0, #17
 80004be:	f7ff fe9b 	bl	80001f8 <NRF24_WriteReg>

	NRF24L01_RX_Mode();
 80004c2:	f7ff ff91 	bl	80003e8 <NRF24L01_RX_Mode>

	read_config_registers();	// For debug
 80004c6:	f000 f807 	bl	80004d8 <read_config_registers>
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40010800 	.word	0x40010800
 80004d4:	20000000 	.word	0x20000000

080004d8 <read_config_registers>:
//----------------------------------------------------------------------------------------
// Read config data from nrf registers
void read_config_registers(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 80004dc:	2001      	movs	r0, #1
 80004de:	f000 ffa5 	bl	800142c <HAL_Delay>

	config_array[0] = NRF24_ReadReg(CONFIG);			// 0x0B
 80004e2:	2000      	movs	r0, #0
 80004e4:	f7ff fe54 	bl	8000190 <NRF24_ReadReg>
 80004e8:	4603      	mov	r3, r0
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <read_config_registers+0x68>)
 80004ee:	701a      	strb	r2, [r3, #0]
	config_array[1] = NRF24_ReadReg(EN_AA);			    // 0x01
 80004f0:	2001      	movs	r0, #1
 80004f2:	f7ff fe4d 	bl	8000190 <NRF24_ReadReg>
 80004f6:	4603      	mov	r3, r0
 80004f8:	461a      	mov	r2, r3
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <read_config_registers+0x68>)
 80004fc:	705a      	strb	r2, [r3, #1]
	config_array[2] = NRF24_ReadReg(EN_RXADDR); 		// 0x01
 80004fe:	2002      	movs	r0, #2
 8000500:	f7ff fe46 	bl	8000190 <NRF24_ReadReg>
 8000504:	4603      	mov	r3, r0
 8000506:	461a      	mov	r2, r3
 8000508:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <read_config_registers+0x68>)
 800050a:	709a      	strb	r2, [r3, #2]
	config_array[3] = NRF24_ReadReg(STATUS_NRF);		// 0x0E
 800050c:	2007      	movs	r0, #7
 800050e:	f7ff fe3f 	bl	8000190 <NRF24_ReadReg>
 8000512:	4603      	mov	r3, r0
 8000514:	461a      	mov	r2, r3
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <read_config_registers+0x68>)
 8000518:	70da      	strb	r2, [r3, #3]
	config_array[4] = NRF24_ReadReg(RF_SETUP);		    // 0x06
 800051a:	2006      	movs	r0, #6
 800051c:	f7ff fe38 	bl	8000190 <NRF24_ReadReg>
 8000520:	4603      	mov	r3, r0
 8000522:	461a      	mov	r2, r3
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <read_config_registers+0x68>)
 8000526:	711a      	strb	r2, [r3, #4]

	NRF24_Read_Buf(TX_ADDR,buf1,3);
 8000528:	2203      	movs	r2, #3
 800052a:	4906      	ldr	r1, [pc, #24]	; (8000544 <read_config_registers+0x6c>)
 800052c:	2010      	movs	r0, #16
 800052e:	f7ff febb 	bl	80002a8 <NRF24_Read_Buf>
	NRF24_Read_Buf(RX_ADDR_P0,buf1,3);
 8000532:	2203      	movs	r2, #3
 8000534:	4903      	ldr	r1, [pc, #12]	; (8000544 <read_config_registers+0x6c>)
 8000536:	200a      	movs	r0, #10
 8000538:	f7ff feb6 	bl	80002a8 <NRF24_Read_Buf>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200000b0 	.word	0x200000b0
 8000544:	2000009c 	.word	0x2000009c

=======

080003e8 <NRF24L01_RX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 80003ee:	2300      	movs	r3, #0
 80003f0:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 80003f2:	2000      	movs	r0, #0
 80003f4:	f7ff fecc 	bl	8000190 <NRF24_ReadReg>
 80003f8:	4603      	mov	r3, r0
 80003fa:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP)|(1<<PRIM_RX);	 // Power up module. Write PWR_UP и PRIM_RX bits
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	f043 0303 	orr.w	r3, r3, #3
 8000402:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	4619      	mov	r1, r3
 8000408:	2000      	movs	r0, #0
 800040a:	f7ff fef5 	bl	80001f8 <NRF24_WriteReg>
  CE_SET;
 800040e:	2201      	movs	r2, #1
 8000410:	2108      	movs	r1, #8
 8000412:	4807      	ldr	r0, [pc, #28]	; (8000430 <NRF24L01_RX_Mode+0x48>)
 8000414:	f001 fb93 	bl	8001b3e <HAL_GPIO_WritePin>
  DelayMicro(150);						 // Delay 130 us
 8000418:	2096      	movs	r0, #150	; 0x96
 800041a:	f7ff fe97 	bl	800014c <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 800041e:	f7ff ff9f 	bl	8000360 <NRF24_FlushRX>
  NRF24_FlushTX();
 8000422:	f7ff ffbf 	bl	80003a4 <NRF24_FlushTX>
}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40010800 	.word	0x40010800

08000434 <NRF24_ini>:
//----------------------------------------------------------------------------------------
void NRF24_ini(void)    // TRANSMITTER
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	CE_RESET;
 8000438:	2200      	movs	r2, #0
 800043a:	2108      	movs	r1, #8
 800043c:	4824      	ldr	r0, [pc, #144]	; (80004d0 <NRF24_ini+0x9c>)
 800043e:	f001 fb7e 	bl	8001b3e <HAL_GPIO_WritePin>
	DelayMicro(5000);
 8000442:	f241 3088 	movw	r0, #5000	; 0x1388
 8000446:	f7ff fe81 	bl	800014c <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 800044a:	210a      	movs	r1, #10
 800044c:	2000      	movs	r0, #0
 800044e:	f7ff fed3 	bl	80001f8 <NRF24_WriteReg>

	DelayMicro(5000);
 8000452:	f241 3088 	movw	r0, #5000	; 0x1388
 8000456:	f7ff fe79 	bl	800014c <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable Pipe0
 800045a:	2101      	movs	r1, #1
 800045c:	2001      	movs	r0, #1
 800045e:	f7ff fecb 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe0
 8000462:	2101      	movs	r1, #1
 8000464:	2002      	movs	r0, #2
 8000466:	f7ff fec7 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 800046a:	2101      	movs	r1, #1
 800046c:	2003      	movs	r0, #3
 800046e:	f7ff fec3 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 8000472:	215f      	movs	r1, #95	; 0x5f
 8000474:	2004      	movs	r0, #4
 8000476:	f7ff febf 	bl	80001f8 <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 800047a:	f7ff feeb 	bl	8000254 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 800047e:	2100      	movs	r1, #0
 8000480:	201d      	movs	r0, #29
 8000482:	f7ff feb9 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 8000486:	2100      	movs	r1, #0
 8000488:	201c      	movs	r0, #28
 800048a:	f7ff feb5 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 800048e:	2170      	movs	r1, #112	; 0x70
 8000490:	2007      	movs	r0, #7
 8000492:	f7ff feb1 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 8000496:	214c      	movs	r1, #76	; 0x4c
 8000498:	2005      	movs	r0, #5
 800049a:	f7ff fead 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26);  		// TX_PWR:0dBm, Datarate:250kbps
 800049e:	2126      	movs	r1, #38	; 0x26
 80004a0:	2006      	movs	r0, #6
 80004a2:	f7ff fea9 	bl	80001f8 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);			// Write TX address
 80004a6:	2203      	movs	r2, #3
 80004a8:	490a      	ldr	r1, [pc, #40]	; (80004d4 <NRF24_ini+0xa0>)
 80004aa:	2010      	movs	r0, #16
 80004ac:	f7ff ff26 	bl	80002fc <NRF24_Write_Buf>

	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);		// Set up pipe 0 address
 80004b0:	2203      	movs	r2, #3
 80004b2:	4908      	ldr	r1, [pc, #32]	; (80004d4 <NRF24_ini+0xa0>)
 80004b4:	200a      	movs	r0, #10
 80004b6:	f7ff ff21 	bl	80002fc <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 	// Number of bytes in TX buffer
 80004ba:	210a      	movs	r1, #10
 80004bc:	2011      	movs	r0, #17
 80004be:	f7ff fe9b 	bl	80001f8 <NRF24_WriteReg>

	NRF24L01_RX_Mode();
 80004c2:	f7ff ff91 	bl	80003e8 <NRF24L01_RX_Mode>

	read_config_registers();	// For debug
 80004c6:	f000 f807 	bl	80004d8 <read_config_registers>
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40010800 	.word	0x40010800
 80004d4:	20000000 	.word	0x20000000

080004d8 <read_config_registers>:
//----------------------------------------------------------------------------------------
// Read config data from nrf registers
void read_config_registers(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 80004dc:	2001      	movs	r0, #1
 80004de:	f000 ffb1 	bl	8001444 <HAL_Delay>

	config_array[0] = NRF24_ReadReg(CONFIG);			// 0x0B
 80004e2:	2000      	movs	r0, #0
 80004e4:	f7ff fe54 	bl	8000190 <NRF24_ReadReg>
 80004e8:	4603      	mov	r3, r0
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <read_config_registers+0x68>)
 80004ee:	701a      	strb	r2, [r3, #0]
	config_array[1] = NRF24_ReadReg(EN_AA);			    // 0x01
 80004f0:	2001      	movs	r0, #1
 80004f2:	f7ff fe4d 	bl	8000190 <NRF24_ReadReg>
 80004f6:	4603      	mov	r3, r0
 80004f8:	461a      	mov	r2, r3
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <read_config_registers+0x68>)
 80004fc:	705a      	strb	r2, [r3, #1]
	config_array[2] = NRF24_ReadReg(EN_RXADDR); 		// 0x01
 80004fe:	2002      	movs	r0, #2
 8000500:	f7ff fe46 	bl	8000190 <NRF24_ReadReg>
 8000504:	4603      	mov	r3, r0
 8000506:	461a      	mov	r2, r3
 8000508:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <read_config_registers+0x68>)
 800050a:	709a      	strb	r2, [r3, #2]
	config_array[3] = NRF24_ReadReg(STATUS_NRF);		// 0x0E
 800050c:	2007      	movs	r0, #7
 800050e:	f7ff fe3f 	bl	8000190 <NRF24_ReadReg>
 8000512:	4603      	mov	r3, r0
 8000514:	461a      	mov	r2, r3
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <read_config_registers+0x68>)
 8000518:	70da      	strb	r2, [r3, #3]
	config_array[4] = NRF24_ReadReg(RF_SETUP);		    // 0x06
 800051a:	2006      	movs	r0, #6
 800051c:	f7ff fe38 	bl	8000190 <NRF24_ReadReg>
 8000520:	4603      	mov	r3, r0
 8000522:	461a      	mov	r2, r3
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <read_config_registers+0x68>)
 8000526:	711a      	strb	r2, [r3, #4]

	NRF24_Read_Buf(TX_ADDR,buf1,3);
 8000528:	2203      	movs	r2, #3
 800052a:	4906      	ldr	r1, [pc, #24]	; (8000544 <read_config_registers+0x6c>)
 800052c:	2010      	movs	r0, #16
 800052e:	f7ff febb 	bl	80002a8 <NRF24_Read_Buf>
	NRF24_Read_Buf(RX_ADDR_P0,buf1,3);
 8000532:	2203      	movs	r2, #3
 8000534:	4903      	ldr	r1, [pc, #12]	; (8000544 <read_config_registers+0x6c>)
 8000536:	200a      	movs	r0, #10
 8000538:	f7ff feb6 	bl	80002a8 <NRF24_Read_Buf>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200000b0 	.word	0x200000b0
 8000544:	2000009c 	.word	0x2000009c

>>>>>>> FFF
08000548 <NRF24L01_TX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 8000550:	2203      	movs	r2, #3
 8000552:	4908      	ldr	r1, [pc, #32]	; (8000574 <NRF24L01_TX_Mode+0x2c>)
 8000554:	2010      	movs	r0, #16
 8000556:	f7ff fed1 	bl	80002fc <NRF24_Write_Buf>
  CE_RESET;
 800055a:	2200      	movs	r2, #0
 800055c:	2108      	movs	r1, #8
 800055e:	4806      	ldr	r0, [pc, #24]	; (8000578 <NRF24L01_TX_Mode+0x30>)
<<<<<<< HEAD
 8000560:	f001 fae1 	bl	8001b26 <HAL_GPIO_WritePin>
=======
 8000560:	f001 faed 	bl	8001b3e <HAL_GPIO_WritePin>
>>>>>>> FFF
  // Flush buffers
  NRF24_FlushRX();
 8000564:	f7ff fefc 	bl	8000360 <NRF24_FlushRX>
  NRF24_FlushTX();
 8000568:	f7ff ff1c 	bl	80003a4 <NRF24_FlushTX>
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000000 	.word	0x20000000
 8000578:	40010800 	.word	0x40010800

0800057c <NRF24_Transmit>:
//----------------------------------------------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	6039      	str	r1, [r7, #0]
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	71bb      	strb	r3, [r7, #6]
  CE_RESET;
 800058c:	2200      	movs	r2, #0
 800058e:	2108      	movs	r1, #8
 8000590:	4813      	ldr	r0, [pc, #76]	; (80005e0 <NRF24_Transmit+0x64>)
<<<<<<< HEAD
 8000592:	f001 fac8 	bl	8001b26 <HAL_GPIO_WritePin>
=======
 8000592:	f001 fad4 	bl	8001b3e <HAL_GPIO_WritePin>
>>>>>>> FFF
  CS_ON;
 8000596:	2200      	movs	r2, #0
 8000598:	2110      	movs	r1, #16
 800059a:	4811      	ldr	r0, [pc, #68]	; (80005e0 <NRF24_Transmit+0x64>)
<<<<<<< HEAD
 800059c:	f001 fac3 	bl	8001b26 <HAL_GPIO_WritePin>
=======
 800059c:	f001 facf 	bl	8001b3e <HAL_GPIO_WritePin>
>>>>>>> FFF
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);	//Send address in NRF module
 80005a0:	1df9      	adds	r1, r7, #7
 80005a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a6:	2201      	movs	r2, #1
 80005a8:	480e      	ldr	r0, [pc, #56]	; (80005e4 <NRF24_Transmit+0x68>)
<<<<<<< HEAD
 80005aa:	f002 fbcd 	bl	8002d48 <HAL_SPI_Transmit>
=======
 80005aa:	f002 fbd9 	bl	8002d60 <HAL_SPI_Transmit>
>>>>>>> FFF
  DelayMicro(1);
 80005ae:	2001      	movs	r0, #1
 80005b0:	f7ff fdcc 	bl	800014c <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000); //Send buff in NRF module
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005bc:	6839      	ldr	r1, [r7, #0]
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <NRF24_Transmit+0x68>)
<<<<<<< HEAD
 80005c0:	f002 fbc2 	bl	8002d48 <HAL_SPI_Transmit>
=======
 80005c0:	f002 fbce 	bl	8002d60 <HAL_SPI_Transmit>
>>>>>>> FFF
  CS_OFF;
 80005c4:	2201      	movs	r2, #1
 80005c6:	2110      	movs	r1, #16
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <NRF24_Transmit+0x64>)
<<<<<<< HEAD
 80005ca:	f001 faac 	bl	8001b26 <HAL_GPIO_WritePin>
=======
 80005ca:	f001 fab8 	bl	8001b3e <HAL_GPIO_WritePin>
>>>>>>> FFF
  CE_SET;
 80005ce:	2201      	movs	r2, #1
 80005d0:	2108      	movs	r1, #8
 80005d2:	4803      	ldr	r0, [pc, #12]	; (80005e0 <NRF24_Transmit+0x64>)
<<<<<<< HEAD
 80005d4:	f001 faa7 	bl	8001b26 <HAL_GPIO_WritePin>
=======
 80005d4:	f001 fab3 	bl	8001b3e <HAL_GPIO_WritePin>
>>>>>>> FFF
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40010800 	.word	0x40010800
 80005e4:	20000574 	.word	0x20000574

080005e8 <NRF24L01_Send>:
//----------------------------------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint8_t status=0x00, regval=0x00;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
 80005f4:	2300      	movs	r3, #0
 80005f6:	73bb      	strb	r3, [r7, #14]
  NRF24L01_TX_Mode(pBuf);
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff ffa5 	bl	8000548 <NRF24L01_TX_Mode>
<<<<<<< HEAD
  // If module in sleep mode, wake up it send PWR_UP and PRIM_RX bits in CONFIG
  regval |= (1<<PWR_UP);			// Set power up
 80005fe:	7bbb      	ldrb	r3, [r7, #14]
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	73bb      	strb	r3, [r7, #14]
  regval &= ~(1<<PRIM_RX);			// Set TX mode
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	f023 0301 	bic.w	r3, r3, #1
 800060c:	73bb      	strb	r3, [r7, #14]
  NRF24_WriteReg(CONFIG,regval);
 800060e:	7bbb      	ldrb	r3, [r7, #14]
 8000610:	4619      	mov	r1, r3
 8000612:	2000      	movs	r0, #0
 8000614:	f7ff fdf0 	bl	80001f8 <NRF24_WriteReg>
  DelayMicro(150); 					// Delay more then 130 us
 8000618:	2096      	movs	r0, #150	; 0x96
 800061a:	f7ff fd97 	bl	800014c <DelayMicro>
  NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);	// Send data
 800061e:	220a      	movs	r2, #10
 8000620:	6879      	ldr	r1, [r7, #4]
 8000622:	20a0      	movs	r0, #160	; 0xa0
 8000624:	f7ff ffaa 	bl	800057c <NRF24_Transmit>

  CE_SET;
 8000628:	2201      	movs	r2, #1
 800062a:	2108      	movs	r1, #8
 800062c:	481c      	ldr	r0, [pc, #112]	; (80006a0 <NRF24L01_Send+0xb8>)
 800062e:	f001 fa7a 	bl	8001b26 <HAL_GPIO_WritePin>
  DelayMicro(15); 					//minimum 10us high pulse (Page 21)
 8000632:	200f      	movs	r0, #15
 8000634:	f7ff fd8a 	bl	800014c <DelayMicro>
  CE_RESET;
 8000638:	2200      	movs	r2, #0
 800063a:	2108      	movs	r1, #8
 800063c:	4818      	ldr	r0, [pc, #96]	; (80006a0 <NRF24L01_Send+0xb8>)
 800063e:	f001 fa72 	bl	8001b26 <HAL_GPIO_WritePin>

  // Waiting interrupt signal from IRQ
  while((GPIO_PinState)IRQ == GPIO_PIN_SET){}
 8000642:	bf00      	nop
 8000644:	2104      	movs	r1, #4
 8000646:	4816      	ldr	r0, [pc, #88]	; (80006a0 <NRF24L01_Send+0xb8>)
 8000648:	f001 fa56 	bl	8001af8 <HAL_GPIO_ReadPin>
 800064c:	4603      	mov	r3, r0
 800064e:	2b01      	cmp	r3, #1
 8000650:	d0f8      	beq.n	8000644 <NRF24L01_Send+0x5c>

  status = NRF24_ReadReg(STATUS_NRF);		// Read status sent data to RX
 8000652:	2007      	movs	r0, #7
 8000654:	f7ff fd9c 	bl	8000190 <NRF24_ReadReg>
 8000658:	4603      	mov	r3, r0
 800065a:	73fb      	strb	r3, [r7, #15]
  if(status & TX_DS) 	     //TX_DS == 0x20   // When transmitted data was receive, and we take back ACK answer
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	f003 0320 	and.w	r3, r3, #32
 8000662:	2b00      	cmp	r3, #0
 8000664:	d004      	beq.n	8000670 <NRF24L01_Send+0x88>
  {
      NRF24_WriteReg(STATUS_NRF, 0x20);
 8000666:	2120      	movs	r1, #32
 8000668:	2007      	movs	r0, #7
 800066a:	f7ff fdc5 	bl	80001f8 <NRF24_WriteReg>
 800066e:	e00a      	b.n	8000686 <NRF24L01_Send+0x9e>
  }
  else if(status & MAX_RT)   //MAX_RT == 0x10  // Retransmeet data flag
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	f003 0310 	and.w	r3, r3, #16
 8000676:	2b00      	cmp	r3, #0
 8000678:	d005      	beq.n	8000686 <NRF24L01_Send+0x9e>
  {
	  NRF24_WriteReg(STATUS_NRF, 0x10);
 800067a:	2110      	movs	r1, #16
 800067c:	2007      	movs	r0, #7
 800067e:	f7ff fdbb 	bl	80001f8 <NRF24_WriteReg>
	  NRF24_FlushTX();
 8000682:	f7ff fe8f 	bl	80003a4 <NRF24_FlushTX>
  }

  regval = NRF24_ReadReg(OBSERVE_TX);   // Return Count lost packets and count transmitted packets
 8000686:	2008      	movs	r0, #8
 8000688:	f7ff fd82 	bl	8000190 <NRF24_ReadReg>
 800068c:	4603      	mov	r3, r0
 800068e:	73bb      	strb	r3, [r7, #14]

  // Switch on RX mode
  NRF24L01_RX_Mode();
 8000690:	f7ff feaa 	bl	80003e8 <NRF24L01_RX_Mode>

  return regval;
 8000694:	7bbb      	ldrb	r3, [r7, #14]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40010800 	.word	0x40010800

080006a4 <nrf_communication_test>:
//----------------------------------------------------------------------------------------
void nrf_communication_test(void)
{
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b091      	sub	sp, #68	; 0x44
 80006a8:	af00      	add	r7, sp, #0
	NRF24_ini();
 80006aa:	f7ff fec3 	bl	8000434 <NRF24_ini>

	char ctr[5] = {0};
 80006ae:	2300      	movs	r3, #0
 80006b0:	637b      	str	r3, [r7, #52]	; 0x34
 80006b2:	2300      	movs	r3, #0
 80006b4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	char ctr_buf[5] = {0};
 80006b8:	2300      	movs	r3, #0
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006bc:	2300      	movs	r3, #0
 80006be:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	uint8_t retr_cnt, dt = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	int test_data = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
=======
  regval = NRF24_ReadReg(CONFIG);
 80005fe:	2000      	movs	r0, #0
 8000600:	f7ff fdc6 	bl	8000190 <NRF24_ReadReg>
 8000604:	4603      	mov	r3, r0
 8000606:	73bb      	strb	r3, [r7, #14]
  // If module in sleep mode, wake up it send PWR_UP and PRIM_RX bits in CONFIG
  regval |= (1<<PWR_UP);			// Set power up
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	f043 0302 	orr.w	r3, r3, #2
 800060e:	73bb      	strb	r3, [r7, #14]
  regval &= ~(1<<PRIM_RX);			// Set TX mode
 8000610:	7bbb      	ldrb	r3, [r7, #14]
 8000612:	f023 0301 	bic.w	r3, r3, #1
 8000616:	73bb      	strb	r3, [r7, #14]
  NRF24_WriteReg(CONFIG,regval);
 8000618:	7bbb      	ldrb	r3, [r7, #14]
 800061a:	4619      	mov	r1, r3
 800061c:	2000      	movs	r0, #0
 800061e:	f7ff fdeb 	bl	80001f8 <NRF24_WriteReg>
  DelayMicro(150); 					// Delay more then 130 us
 8000622:	2096      	movs	r0, #150	; 0x96
 8000624:	f7ff fd92 	bl	800014c <DelayMicro>
  NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);	// Send data
 8000628:	220a      	movs	r2, #10
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	20a0      	movs	r0, #160	; 0xa0
 800062e:	f7ff ffa5 	bl	800057c <NRF24_Transmit>

  CE_SET;
 8000632:	2201      	movs	r2, #1
 8000634:	2108      	movs	r1, #8
 8000636:	481c      	ldr	r0, [pc, #112]	; (80006a8 <NRF24L01_Send+0xc0>)
 8000638:	f001 fa81 	bl	8001b3e <HAL_GPIO_WritePin>
  DelayMicro(15); 					//minimum 10us high pulse (Page 21)
 800063c:	200f      	movs	r0, #15
 800063e:	f7ff fd85 	bl	800014c <DelayMicro>
  CE_RESET;
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	4818      	ldr	r0, [pc, #96]	; (80006a8 <NRF24L01_Send+0xc0>)
 8000648:	f001 fa79 	bl	8001b3e <HAL_GPIO_WritePin>

  // Waiting interrupt signal from IRQ
  while((GPIO_PinState)IRQ == GPIO_PIN_SET){}
 800064c:	bf00      	nop
 800064e:	2104      	movs	r1, #4
 8000650:	4815      	ldr	r0, [pc, #84]	; (80006a8 <NRF24L01_Send+0xc0>)
 8000652:	f001 fa5d 	bl	8001b10 <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d0f8      	beq.n	800064e <NRF24L01_Send+0x66>

  status = NRF24_ReadReg(STATUS_NRF);		// Read status sent data to RX
 800065c:	2007      	movs	r0, #7
 800065e:	f7ff fd97 	bl	8000190 <NRF24_ReadReg>
 8000662:	4603      	mov	r3, r0
 8000664:	73fb      	strb	r3, [r7, #15]
  if(status & TX_DS) 	     //TX_DS == 0x20   // When transmitted data was receive, and we take back ACK answer
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	f003 0320 	and.w	r3, r3, #32
 800066c:	2b00      	cmp	r3, #0
 800066e:	d004      	beq.n	800067a <NRF24L01_Send+0x92>
  {
      NRF24_WriteReg(STATUS_NRF, 0x20);
 8000670:	2120      	movs	r1, #32
 8000672:	2007      	movs	r0, #7
 8000674:	f7ff fdc0 	bl	80001f8 <NRF24_WriteReg>
 8000678:	e00a      	b.n	8000690 <NRF24L01_Send+0xa8>
  }
  else if(status & MAX_RT)   //MAX_RT == 0x10  // Retransmeet data flag
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	f003 0310 	and.w	r3, r3, #16
 8000680:	2b00      	cmp	r3, #0
 8000682:	d005      	beq.n	8000690 <NRF24L01_Send+0xa8>
  {
    NRF24_WriteReg(STATUS_NRF, 0x10);
 8000684:	2110      	movs	r1, #16
 8000686:	2007      	movs	r0, #7
 8000688:	f7ff fdb6 	bl	80001f8 <NRF24_WriteReg>
    NRF24_FlushTX();
 800068c:	f7ff fe8a 	bl	80003a4 <NRF24_FlushTX>
  }

  regval = NRF24_ReadReg(OBSERVE_TX);   // Return Count lost packets and count transmitted packets
 8000690:	2008      	movs	r0, #8
 8000692:	f7ff fd7d 	bl	8000190 <NRF24_ReadReg>
 8000696:	4603      	mov	r3, r0
 8000698:	73bb      	strb	r3, [r7, #14]

  // Switch on RX mode
  NRF24L01_RX_Mode();
 800069a:	f7ff fea5 	bl	80003e8 <NRF24L01_RX_Mode>

  return regval;
 800069e:	7bbb      	ldrb	r3, [r7, #14]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40010800 	.word	0x40010800

080006ac <nrf_communication_test>:
//----------------------------------------------------------------------------------------
void nrf_communication_test(void)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b08f      	sub	sp, #60	; 0x3c
 80006b0:	af00      	add	r7, sp, #0
	NRF24_ini();
 80006b2:	f7ff febf 	bl	8000434 <NRF24_ini>

	char ctr[5] = {0};
 80006b6:	2300      	movs	r3, #0
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006ba:	2300      	movs	r3, #0
 80006bc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	char ctr_buf[5] = {0};
 80006c0:	2300      	movs	r3, #0
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
 80006c4:	2300      	movs	r3, #0
 80006c6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	uint8_t retr_cnt, dt = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	int test_data = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> FFF

	while(1)
	{
		// Test transmit data
		sprintf(buf1, "%d", test_data);
<<<<<<< HEAD
 80006cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006ce:	4971      	ldr	r1, [pc, #452]	; (8000894 <nrf_communication_test+0x1f0>)
 80006d0:	4871      	ldr	r0, [pc, #452]	; (8000898 <nrf_communication_test+0x1f4>)
 80006d2:	f003 fc69 	bl	8003fa8 <siprintf>

		// Print transmit data
		uint8_t test[25] = {0};
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]
 80006ea:	751a      	strb	r2, [r3, #20]
		uint8_t test_i[10] = {0};
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	809a      	strh	r2, [r3, #4]

		ssd1306_SetCursor(0, 16);
 80006fa:	2110      	movs	r1, #16
 80006fc:	2000      	movs	r0, #0
 80006fe:	f000 fab9 	bl	8000c74 <ssd1306_SetCursor>
		strcpy(test, "Data:");
 8000702:	f107 0310 	add.w	r3, r7, #16
 8000706:	4a65      	ldr	r2, [pc, #404]	; (800089c <nrf_communication_test+0x1f8>)
 8000708:	e892 0003 	ldmia.w	r2, {r0, r1}
 800070c:	6018      	str	r0, [r3, #0]
 800070e:	3304      	adds	r3, #4
 8000710:	8019      	strh	r1, [r3, #0]
		strcat(test, buf1);
 8000712:	f107 0310 	add.w	r3, r7, #16
 8000716:	4960      	ldr	r1, [pc, #384]	; (8000898 <nrf_communication_test+0x1f4>)
 8000718:	4618      	mov	r0, r3
 800071a:	f003 fc65 	bl	8003fe8 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 800071e:	4a60      	ldr	r2, [pc, #384]	; (80008a0 <nrf_communication_test+0x1fc>)
 8000720:	f107 0010 	add.w	r0, r7, #16
 8000724:	2301      	movs	r3, #1
 8000726:	ca06      	ldmia	r2, {r1, r2}
 8000728:	f000 fa7e 	bl	8000c28 <ssd1306_WriteString>

		dt = NRF24L01_Send(buf1);						// Transmit data
 800072c:	485a      	ldr	r0, [pc, #360]	; (8000898 <nrf_communication_test+0x1f4>)
 800072e:	f7ff ff5b 	bl	80005e8 <NRF24L01_Send>
 8000732:	4603      	mov	r3, r0
 8000734:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		retr_cnt = dt & 0xF;
 8000738:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800073c:	f003 030f 	and.w	r3, r3, #15
 8000740:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		retr_cnt_full += retr_cnt;
 8000744:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8000748:	4b56      	ldr	r3, [pc, #344]	; (80008a4 <nrf_communication_test+0x200>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4413      	add	r3, r2
 800074e:	4a55      	ldr	r2, [pc, #340]	; (80008a4 <nrf_communication_test+0x200>)
 8000750:	6013      	str	r3, [r2, #0]

		// Print transmit counter
		memset(test, 0, sizeof(test));
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	2219      	movs	r2, #25
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f003 fc1c 	bl	8003f98 <memset>
		memset(test_i, 0, sizeof(test_i));
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	220a      	movs	r2, #10
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f003 fc16 	bl	8003f98 <memset>

		ssd1306_SetCursor(0, 26);
 800076c:	211a      	movs	r1, #26
 800076e:	2000      	movs	r0, #0
 8000770:	f000 fa80 	bl	8000c74 <ssd1306_SetCursor>
		strcpy(test, "Conut trans:");
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	4a4b      	ldr	r2, [pc, #300]	; (80008a8 <nrf_communication_test+0x204>)
 800077a:	461c      	mov	r4, r3
 800077c:	4613      	mov	r3, r2
 800077e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000780:	c407      	stmia	r4!, {r0, r1, r2}
 8000782:	7023      	strb	r3, [r4, #0]
		// number in string
		itoa(i, test_i, 10);
 8000784:	4b49      	ldr	r3, [pc, #292]	; (80008ac <nrf_communication_test+0x208>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	220a      	movs	r2, #10
 800078c:	4618      	mov	r0, r3
 800078e:	f003 fc01 	bl	8003f94 <itoa>
		strcat(test, test_i);
 8000792:	1d3a      	adds	r2, r7, #4
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	4611      	mov	r1, r2
 800079a:	4618      	mov	r0, r3
 800079c:	f003 fc24 	bl	8003fe8 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 80007a0:	4a3f      	ldr	r2, [pc, #252]	; (80008a0 <nrf_communication_test+0x1fc>)
 80007a2:	f107 0010 	add.w	r0, r7, #16
 80007a6:	2301      	movs	r3, #1
 80007a8:	ca06      	ldmia	r2, {r1, r2}
 80007aa:	f000 fa3d 	bl	8000c28 <ssd1306_WriteString>

		// Print retransmeet counter
		memset(test, 0, sizeof(test));
 80007ae:	f107 0310 	add.w	r3, r7, #16
 80007b2:	2219      	movs	r2, #25
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 fbee 	bl	8003f98 <memset>
		memset(test_i, 0, sizeof(test_i));
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	220a      	movs	r2, #10
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f003 fbe8 	bl	8003f98 <memset>

		ssd1306_SetCursor(0, 36);
 80007c8:	2124      	movs	r1, #36	; 0x24
 80007ca:	2000      	movs	r0, #0
 80007cc:	f000 fa52 	bl	8000c74 <ssd1306_SetCursor>
		strcpy(test, "Retransm:");
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	4a36      	ldr	r2, [pc, #216]	; (80008b0 <nrf_communication_test+0x20c>)
 80007d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80007d8:	c303      	stmia	r3!, {r0, r1}
 80007da:	801a      	strh	r2, [r3, #0]
		itoa(retr_cnt_full, test_i, 10);
 80007dc:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <nrf_communication_test+0x200>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	1d39      	adds	r1, r7, #4
 80007e2:	220a      	movs	r2, #10
 80007e4:	4618      	mov	r0, r3
 80007e6:	f003 fbd5 	bl	8003f94 <itoa>
		strcat(test, test_i);
 80007ea:	1d3a      	adds	r2, r7, #4
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	4611      	mov	r1, r2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f003 fbf8 	bl	8003fe8 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 80007f8:	4a29      	ldr	r2, [pc, #164]	; (80008a0 <nrf_communication_test+0x1fc>)
 80007fa:	f107 0010 	add.w	r0, r7, #16
 80007fe:	2301      	movs	r3, #1
 8000800:	ca06      	ldmia	r2, {r1, r2}
 8000802:	f000 fa11 	bl	8000c28 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000806:	f000 f8ff 	bl	8000a08 <ssd1306_UpdateScreen>

		// Print lost pacets
		memset(test, 0, sizeof(test));
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	2219      	movs	r2, #25
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f003 fbc0 	bl	8003f98 <memset>
		memset(test_i, 0, sizeof(test_i));
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	220a      	movs	r2, #10
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f003 fbba 	bl	8003f98 <memset>

		cnt_lost = dt >> 4;
 8000824:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000828:	091b      	lsrs	r3, r3, #4
 800082a:	b2db      	uxtb	r3, r3
 800082c:	461a      	mov	r2, r3
 800082e:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <nrf_communication_test+0x210>)
 8000830:	601a      	str	r2, [r3, #0]

		ssd1306_SetCursor(0, 46);
 8000832:	212e      	movs	r1, #46	; 0x2e
 8000834:	2000      	movs	r0, #0
 8000836:	f000 fa1d 	bl	8000c74 <ssd1306_SetCursor>
		strcpy(test, "Lost:");
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <nrf_communication_test+0x214>)
 8000840:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000844:	6018      	str	r0, [r3, #0]
 8000846:	3304      	adds	r3, #4
 8000848:	8019      	strh	r1, [r3, #0]
		itoa(cnt_lost, test_i, 10);
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <nrf_communication_test+0x210>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	1d39      	adds	r1, r7, #4
 8000850:	220a      	movs	r2, #10
 8000852:	4618      	mov	r0, r3
 8000854:	f003 fb9e 	bl	8003f94 <itoa>
		strcat(test, test_i);
 8000858:	1d3a      	adds	r2, r7, #4
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	4611      	mov	r1, r2
 8000860:	4618      	mov	r0, r3
 8000862:	f003 fbc1 	bl	8003fe8 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 8000866:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <nrf_communication_test+0x1fc>)
 8000868:	f107 0010 	add.w	r0, r7, #16
 800086c:	2301      	movs	r3, #1
 800086e:	ca06      	ldmia	r2, {r1, r2}
 8000870:	f000 f9da 	bl	8000c28 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000874:	f000 f8c8 	bl	8000a08 <ssd1306_UpdateScreen>

		test_data++;
 8000878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800087a:	3301      	adds	r3, #1
 800087c:	63fb      	str	r3, [r7, #60]	; 0x3c
		i++;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <nrf_communication_test+0x208>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	3301      	adds	r3, #1
 8000884:	4a09      	ldr	r2, [pc, #36]	; (80008ac <nrf_communication_test+0x208>)
 8000886:	6013      	str	r3, [r2, #0]

		HAL_Delay(500);
 8000888:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800088c:	f000 fdce 	bl	800142c <HAL_Delay>
	{
 8000890:	e71c      	b.n	80006cc <nrf_communication_test+0x28>
 8000892:	bf00      	nop
 8000894:	080048d8 	.word	0x080048d8
 8000898:	2000009c 	.word	0x2000009c
 800089c:	080048dc 	.word	0x080048dc
 80008a0:	20000008 	.word	0x20000008
 80008a4:	200000c0 	.word	0x200000c0
 80008a8:	080048e4 	.word	0x080048e4
 80008ac:	20000004 	.word	0x20000004
 80008b0:	080048f4 	.word	0x080048f4
 80008b4:	200000c4 	.word	0x200000c4
 80008b8:	08004900 	.word	0x08004900

080008bc <ssd1306_WriteCommand>:
=======
 80006d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80006d6:	4970      	ldr	r1, [pc, #448]	; (8000898 <nrf_communication_test+0x1ec>)
 80006d8:	4870      	ldr	r0, [pc, #448]	; (800089c <nrf_communication_test+0x1f0>)
 80006da:	f003 fc71 	bl	8003fc0 <siprintf>

		// Print transmit data
		uint8_t test[20] = {0};
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
		uint8_t test_i[10] = {0};
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	809a      	strh	r2, [r3, #4]

		ssd1306_SetCursor(0, 16);
 80006fe:	2110      	movs	r1, #16
 8000700:	2000      	movs	r0, #0
 8000702:	f000 fab9 	bl	8000c78 <ssd1306_SetCursor>
		strcpy(test, "Data:");
 8000706:	f107 0310 	add.w	r3, r7, #16
 800070a:	4a65      	ldr	r2, [pc, #404]	; (80008a0 <nrf_communication_test+0x1f4>)
 800070c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000710:	6018      	str	r0, [r3, #0]
 8000712:	3304      	adds	r3, #4
 8000714:	8019      	strh	r1, [r3, #0]
		strcat(test, buf1);
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	4960      	ldr	r1, [pc, #384]	; (800089c <nrf_communication_test+0x1f0>)
 800071c:	4618      	mov	r0, r3
 800071e:	f003 fc6f 	bl	8004000 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 8000722:	4a60      	ldr	r2, [pc, #384]	; (80008a4 <nrf_communication_test+0x1f8>)
 8000724:	f107 0010 	add.w	r0, r7, #16
 8000728:	2301      	movs	r3, #1
 800072a:	ca06      	ldmia	r2, {r1, r2}
 800072c:	f000 fa7e 	bl	8000c2c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000730:	f000 f96c 	bl	8000a0c <ssd1306_UpdateScreen>

		dt = NRF24L01_Send(buf1);						// Transmit data
 8000734:	4859      	ldr	r0, [pc, #356]	; (800089c <nrf_communication_test+0x1f0>)
 8000736:	f7ff ff57 	bl	80005e8 <NRF24L01_Send>
 800073a:	4603      	mov	r3, r0
 800073c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		retr_cnt = dt & 0xF;
 8000740:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000744:	f003 030f 	and.w	r3, r3, #15
 8000748:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		retr_cnt_full += retr_cnt;
 800074c:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8000750:	4b55      	ldr	r3, [pc, #340]	; (80008a8 <nrf_communication_test+0x1fc>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4413      	add	r3, r2
 8000756:	4a54      	ldr	r2, [pc, #336]	; (80008a8 <nrf_communication_test+0x1fc>)
 8000758:	6013      	str	r3, [r2, #0]

		// Print transmit counter
		memset(test, 0, sizeof(test));
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	2214      	movs	r2, #20
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f003 fc24 	bl	8003fb0 <memset>
		memset(test_i, 0, sizeof(test_i));
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	220a      	movs	r2, #10
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fc1e 	bl	8003fb0 <memset>

		ssd1306_SetCursor(0, 26);
 8000774:	211a      	movs	r1, #26
 8000776:	2000      	movs	r0, #0
 8000778:	f000 fa7e 	bl	8000c78 <ssd1306_SetCursor>
		strcpy(test, "Conut trans:");
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	4a4a      	ldr	r2, [pc, #296]	; (80008ac <nrf_communication_test+0x200>)
 8000782:	461c      	mov	r4, r3
 8000784:	4613      	mov	r3, r2
 8000786:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000788:	c407      	stmia	r4!, {r0, r1, r2}
 800078a:	7023      	strb	r3, [r4, #0]
		// number in string
		itoa(i, test_i, 10);
 800078c:	4b48      	ldr	r3, [pc, #288]	; (80008b0 <nrf_communication_test+0x204>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	1d39      	adds	r1, r7, #4
 8000792:	220a      	movs	r2, #10
 8000794:	4618      	mov	r0, r3
 8000796:	f003 fc09 	bl	8003fac <itoa>
		strcat(test, test_i);
 800079a:	1d3a      	adds	r2, r7, #4
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f003 fc2c 	bl	8004000 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 80007a8:	4a3e      	ldr	r2, [pc, #248]	; (80008a4 <nrf_communication_test+0x1f8>)
 80007aa:	f107 0010 	add.w	r0, r7, #16
 80007ae:	2301      	movs	r3, #1
 80007b0:	ca06      	ldmia	r2, {r1, r2}
 80007b2:	f000 fa3b 	bl	8000c2c <ssd1306_WriteString>

		// Print retransmeet counter
		memset(test, 0, sizeof(test));
 80007b6:	f107 0310 	add.w	r3, r7, #16
 80007ba:	2214      	movs	r2, #20
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 fbf6 	bl	8003fb0 <memset>
		memset(test_i, 0, sizeof(test_i));
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	220a      	movs	r2, #10
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f003 fbf0 	bl	8003fb0 <memset>

		ssd1306_SetCursor(0, 36);
 80007d0:	2124      	movs	r1, #36	; 0x24
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 fa50 	bl	8000c78 <ssd1306_SetCursor>
		strcpy(test, "Retransm:");
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4a35      	ldr	r2, [pc, #212]	; (80008b4 <nrf_communication_test+0x208>)
 80007de:	ca07      	ldmia	r2, {r0, r1, r2}
 80007e0:	c303      	stmia	r3!, {r0, r1}
 80007e2:	801a      	strh	r2, [r3, #0]
		itoa(retr_cnt_full, test_i, 10);
 80007e4:	4b30      	ldr	r3, [pc, #192]	; (80008a8 <nrf_communication_test+0x1fc>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	1d39      	adds	r1, r7, #4
 80007ea:	220a      	movs	r2, #10
 80007ec:	4618      	mov	r0, r3
 80007ee:	f003 fbdd 	bl	8003fac <itoa>
		strcat(test, test_i);
 80007f2:	1d3a      	adds	r2, r7, #4
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 fc00 	bl	8004000 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 8000800:	4a28      	ldr	r2, [pc, #160]	; (80008a4 <nrf_communication_test+0x1f8>)
 8000802:	f107 0010 	add.w	r0, r7, #16
 8000806:	2301      	movs	r3, #1
 8000808:	ca06      	ldmia	r2, {r1, r2}
 800080a:	f000 fa0f 	bl	8000c2c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800080e:	f000 f8fd 	bl	8000a0c <ssd1306_UpdateScreen>

		// Print lost pacets
		memset(test, 0, sizeof(test));
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	2214      	movs	r2, #20
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f003 fbc8 	bl	8003fb0 <memset>
		memset(test_i, 0, sizeof(test_i));
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	220a      	movs	r2, #10
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f003 fbc2 	bl	8003fb0 <memset>

		cnt_lost = dt >> 4;
 800082c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000830:	091b      	lsrs	r3, r3, #4
 8000832:	b2db      	uxtb	r3, r3
 8000834:	461a      	mov	r2, r3
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <nrf_communication_test+0x20c>)
 8000838:	601a      	str	r2, [r3, #0]

		ssd1306_SetCursor(0, 46);
 800083a:	212e      	movs	r1, #46	; 0x2e
 800083c:	2000      	movs	r0, #0
 800083e:	f000 fa1b 	bl	8000c78 <ssd1306_SetCursor>
		strcpy(test, "Lost:");
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	4a1d      	ldr	r2, [pc, #116]	; (80008bc <nrf_communication_test+0x210>)
 8000848:	e892 0003 	ldmia.w	r2, {r0, r1}
 800084c:	6018      	str	r0, [r3, #0]
 800084e:	3304      	adds	r3, #4
 8000850:	8019      	strh	r1, [r3, #0]
		itoa(cnt_lost, test_i, 10);
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <nrf_communication_test+0x20c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	1d39      	adds	r1, r7, #4
 8000858:	220a      	movs	r2, #10
 800085a:	4618      	mov	r0, r3
 800085c:	f003 fba6 	bl	8003fac <itoa>
		strcat(test, test_i);
 8000860:	1d3a      	adds	r2, r7, #4
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	4611      	mov	r1, r2
 8000868:	4618      	mov	r0, r3
 800086a:	f003 fbc9 	bl	8004000 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 800086e:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <nrf_communication_test+0x1f8>)
 8000870:	f107 0010 	add.w	r0, r7, #16
 8000874:	2301      	movs	r3, #1
 8000876:	ca06      	ldmia	r2, {r1, r2}
 8000878:	f000 f9d8 	bl	8000c2c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800087c:	f000 f8c6 	bl	8000a0c <ssd1306_UpdateScreen>

		test_data++;
 8000880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000882:	3301      	adds	r3, #1
 8000884:	637b      	str	r3, [r7, #52]	; 0x34
		i++;
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <nrf_communication_test+0x204>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	3301      	adds	r3, #1
 800088c:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <nrf_communication_test+0x204>)
 800088e:	6013      	str	r3, [r2, #0]

		HAL_Delay(100);
 8000890:	2064      	movs	r0, #100	; 0x64
 8000892:	f000 fdd7 	bl	8001444 <HAL_Delay>
	{
 8000896:	e71d      	b.n	80006d4 <nrf_communication_test+0x28>
 8000898:	080048f0 	.word	0x080048f0
 800089c:	2000009c 	.word	0x2000009c
 80008a0:	080048f4 	.word	0x080048f4
 80008a4:	20000008 	.word	0x20000008
 80008a8:	200000c0 	.word	0x200000c0
 80008ac:	080048fc 	.word	0x080048fc
 80008b0:	20000004 	.word	0x20000004
 80008b4:	0800490c 	.word	0x0800490c
 80008b8:	200000c4 	.word	0x200000c4
 80008bc:	08004918 	.word	0x08004918

080008c0 <ssd1306_WriteCommand>:
>>>>>>> FFF

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
<<<<<<< HEAD
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af04      	add	r7, sp, #16
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80008c6:	230a      	movs	r3, #10
 80008c8:	9302      	str	r3, [sp, #8]
 80008ca:	2301      	movs	r3, #1
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	2301      	movs	r3, #1
 80008d4:	2200      	movs	r2, #0
 80008d6:	2178      	movs	r1, #120	; 0x78
 80008d8:	4803      	ldr	r0, [pc, #12]	; (80008e8 <ssd1306_WriteCommand+0x2c>)
 80008da:	f001 fa81 	bl	8001de0 <HAL_I2C_Mem_Write>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200004dc 	.word	0x200004dc

080008ec <ssd1306_Init>:
=======
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af04      	add	r7, sp, #16
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80008ca:	230a      	movs	r3, #10
 80008cc:	9302      	str	r3, [sp, #8]
 80008ce:	2301      	movs	r3, #1
 80008d0:	9301      	str	r3, [sp, #4]
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	2301      	movs	r3, #1
 80008d8:	2200      	movs	r2, #0
 80008da:	2178      	movs	r1, #120	; 0x78
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <ssd1306_WriteCommand+0x2c>)
 80008de:	f001 fa8b 	bl	8001df8 <HAL_I2C_Mem_Write>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200004dc 	.word	0x200004dc

080008f0 <ssd1306_Init>:
>>>>>>> FFF

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
<<<<<<< HEAD
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 80008f0:	2064      	movs	r0, #100	; 0x64
 80008f2:	f000 fd9b 	bl	800142c <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 80008f6:	20ae      	movs	r0, #174	; 0xae
 80008f8:	f7ff ffe0 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80008fc:	2020      	movs	r0, #32
 80008fe:	f7ff ffdd 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000902:	2010      	movs	r0, #16
 8000904:	f7ff ffda 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000908:	20b0      	movs	r0, #176	; 0xb0
 800090a:	f7ff ffd7 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800090e:	20c8      	movs	r0, #200	; 0xc8
 8000910:	f7ff ffd4 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8000914:	2000      	movs	r0, #0
 8000916:	f7ff ffd1 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800091a:	2010      	movs	r0, #16
 800091c:	f7ff ffce 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8000920:	2040      	movs	r0, #64	; 0x40
 8000922:	f7ff ffcb 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8000926:	2081      	movs	r0, #129	; 0x81
 8000928:	f7ff ffc8 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 800092c:	20ff      	movs	r0, #255	; 0xff
 800092e:	f7ff ffc5 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8000932:	20a1      	movs	r0, #161	; 0xa1
 8000934:	f7ff ffc2 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8000938:	20a6      	movs	r0, #166	; 0xa6
 800093a:	f7ff ffbf 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 800093e:	20a8      	movs	r0, #168	; 0xa8
 8000940:	f7ff ffbc 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8000944:	203f      	movs	r0, #63	; 0x3f
 8000946:	f7ff ffb9 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800094a:	20a4      	movs	r0, #164	; 0xa4
 800094c:	f7ff ffb6 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8000950:	20d3      	movs	r0, #211	; 0xd3
 8000952:	f7ff ffb3 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8000956:	2000      	movs	r0, #0
 8000958:	f7ff ffb0 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800095c:	20d5      	movs	r0, #213	; 0xd5
 800095e:	f7ff ffad 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000962:	20f0      	movs	r0, #240	; 0xf0
 8000964:	f7ff ffaa 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000968:	20d9      	movs	r0, #217	; 0xd9
 800096a:	f7ff ffa7 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 800096e:	2022      	movs	r0, #34	; 0x22
 8000970:	f7ff ffa4 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8000974:	20da      	movs	r0, #218	; 0xda
 8000976:	f7ff ffa1 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 800097a:	2012      	movs	r0, #18
 800097c:	f7ff ff9e 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8000980:	20db      	movs	r0, #219	; 0xdb
 8000982:	f7ff ff9b 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000986:	2020      	movs	r0, #32
 8000988:	f7ff ff98 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800098c:	208d      	movs	r0, #141	; 0x8d
 800098e:	f7ff ff95 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8000992:	2014      	movs	r0, #20
 8000994:	f7ff ff92 	bl	80008bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000998:	20af      	movs	r0, #175	; 0xaf
 800099a:	f7ff ff8f 	bl	80008bc <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 800099e:	2000      	movs	r0, #0
 80009a0:	f000 f810 	bl	80009c4 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 80009a4:	f000 f830 	bl	8000a08 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <ssd1306_Init+0xd4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80009ae:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <ssd1306_Init+0xd4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 80009b4:	4b02      	ldr	r3, [pc, #8]	; (80009c0 <ssd1306_Init+0xd4>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	715a      	strb	r2, [r3, #5]

	return 1;
 80009ba:	2301      	movs	r3, #1
}
 80009bc:	4618      	mov	r0, r3
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200004c8 	.word	0x200004c8

080009c4 <ssd1306_Fill>:
=======
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 80008f4:	2064      	movs	r0, #100	; 0x64
 80008f6:	f000 fda5 	bl	8001444 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 80008fa:	20ae      	movs	r0, #174	; 0xae
 80008fc:	f7ff ffe0 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000900:	2020      	movs	r0, #32
 8000902:	f7ff ffdd 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000906:	2010      	movs	r0, #16
 8000908:	f7ff ffda 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800090c:	20b0      	movs	r0, #176	; 0xb0
 800090e:	f7ff ffd7 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000912:	20c8      	movs	r0, #200	; 0xc8
 8000914:	f7ff ffd4 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8000918:	2000      	movs	r0, #0
 800091a:	f7ff ffd1 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800091e:	2010      	movs	r0, #16
 8000920:	f7ff ffce 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8000924:	2040      	movs	r0, #64	; 0x40
 8000926:	f7ff ffcb 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 800092a:	2081      	movs	r0, #129	; 0x81
 800092c:	f7ff ffc8 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8000930:	20ff      	movs	r0, #255	; 0xff
 8000932:	f7ff ffc5 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8000936:	20a1      	movs	r0, #161	; 0xa1
 8000938:	f7ff ffc2 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 800093c:	20a6      	movs	r0, #166	; 0xa6
 800093e:	f7ff ffbf 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8000942:	20a8      	movs	r0, #168	; 0xa8
 8000944:	f7ff ffbc 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8000948:	203f      	movs	r0, #63	; 0x3f
 800094a:	f7ff ffb9 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800094e:	20a4      	movs	r0, #164	; 0xa4
 8000950:	f7ff ffb6 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8000954:	20d3      	movs	r0, #211	; 0xd3
 8000956:	f7ff ffb3 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff ffb0 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000960:	20d5      	movs	r0, #213	; 0xd5
 8000962:	f7ff ffad 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000966:	20f0      	movs	r0, #240	; 0xf0
 8000968:	f7ff ffaa 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800096c:	20d9      	movs	r0, #217	; 0xd9
 800096e:	f7ff ffa7 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8000972:	2022      	movs	r0, #34	; 0x22
 8000974:	f7ff ffa4 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8000978:	20da      	movs	r0, #218	; 0xda
 800097a:	f7ff ffa1 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 800097e:	2012      	movs	r0, #18
 8000980:	f7ff ff9e 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8000984:	20db      	movs	r0, #219	; 0xdb
 8000986:	f7ff ff9b 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800098a:	2020      	movs	r0, #32
 800098c:	f7ff ff98 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000990:	208d      	movs	r0, #141	; 0x8d
 8000992:	f7ff ff95 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8000996:	2014      	movs	r0, #20
 8000998:	f7ff ff92 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800099c:	20af      	movs	r0, #175	; 0xaf
 800099e:	f7ff ff8f 	bl	80008c0 <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f000 f810 	bl	80009c8 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 80009a8:	f000 f830 	bl	8000a0c <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <ssd1306_Init+0xd4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80009b2:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <ssd1306_Init+0xd4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 80009b8:	4b02      	ldr	r3, [pc, #8]	; (80009c4 <ssd1306_Init+0xd4>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	715a      	strb	r2, [r3, #5]

	return 1;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200004c8 	.word	0x200004c8

080009c8 <ssd1306_Fill>:
>>>>>>> FFF

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
<<<<<<< HEAD
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
=======
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
>>>>>>> FFF
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
<<<<<<< HEAD
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	e00d      	b.n	80009f0 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d101      	bne.n	80009de <ssd1306_Fill+0x1a>
 80009da:	2100      	movs	r1, #0
 80009dc:	e000      	b.n	80009e0 <ssd1306_Fill+0x1c>
 80009de:	21ff      	movs	r1, #255	; 0xff
 80009e0:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <ssd1306_Fill+0x40>)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	4413      	add	r3, r2
 80009e6:	460a      	mov	r2, r1
 80009e8:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	3301      	adds	r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009f6:	d3ed      	bcc.n	80009d4 <ssd1306_Fill+0x10>
	}
}
 80009f8:	bf00      	nop
 80009fa:	bf00      	nop
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	200000c8 	.word	0x200000c8

08000a08 <ssd1306_UpdateScreen>:
=======
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	e00d      	b.n	80009f4 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d101      	bne.n	80009e2 <ssd1306_Fill+0x1a>
 80009de:	2100      	movs	r1, #0
 80009e0:	e000      	b.n	80009e4 <ssd1306_Fill+0x1c>
 80009e2:	21ff      	movs	r1, #255	; 0xff
 80009e4:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <ssd1306_Fill+0x40>)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4413      	add	r3, r2
 80009ea:	460a      	mov	r2, r1
 80009ec:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	3301      	adds	r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009fa:	d3ed      	bcc.n	80009d8 <ssd1306_Fill+0x10>
	}
}
 80009fc:	bf00      	nop
 80009fe:	bf00      	nop
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	200000c8 	.word	0x200000c8

08000a0c <ssd1306_UpdateScreen>:
>>>>>>> FFF

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
<<<<<<< HEAD
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8000a0e:	2300      	movs	r3, #0
 8000a10:	71fb      	strb	r3, [r7, #7]
 8000a12:	e01d      	b.n	8000a50 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	3b50      	subs	r3, #80	; 0x50
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ff4e 	bl	80008bc <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff ff4b 	bl	80008bc <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8000a26:	2010      	movs	r0, #16
 8000a28:	f7ff ff48 	bl	80008bc <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	01db      	lsls	r3, r3, #7
 8000a30:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <ssd1306_UpdateScreen+0x58>)
 8000a32:	4413      	add	r3, r2
 8000a34:	2264      	movs	r2, #100	; 0x64
 8000a36:	9202      	str	r2, [sp, #8]
 8000a38:	2280      	movs	r2, #128	; 0x80
 8000a3a:	9201      	str	r2, [sp, #4]
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2301      	movs	r3, #1
 8000a40:	2240      	movs	r2, #64	; 0x40
 8000a42:	2178      	movs	r1, #120	; 0x78
 8000a44:	4807      	ldr	r0, [pc, #28]	; (8000a64 <ssd1306_UpdateScreen+0x5c>)
 8000a46:	f001 f9cb 	bl	8001de0 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	71fb      	strb	r3, [r7, #7]
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	2b07      	cmp	r3, #7
 8000a54:	d9de      	bls.n	8000a14 <ssd1306_UpdateScreen+0xc>
	}
}
 8000a56:	bf00      	nop
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200000c8 	.word	0x200000c8
 8000a64:	200004dc 	.word	0x200004dc

08000a68 <ssd1306_DrawPixel>:
=======
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8000a12:	2300      	movs	r3, #0
 8000a14:	71fb      	strb	r3, [r7, #7]
 8000a16:	e01d      	b.n	8000a54 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	3b50      	subs	r3, #80	; 0x50
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff4e 	bl	80008c0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff ff4b 	bl	80008c0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8000a2a:	2010      	movs	r0, #16
 8000a2c:	f7ff ff48 	bl	80008c0 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	01db      	lsls	r3, r3, #7
 8000a34:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <ssd1306_UpdateScreen+0x58>)
 8000a36:	4413      	add	r3, r2
 8000a38:	2264      	movs	r2, #100	; 0x64
 8000a3a:	9202      	str	r2, [sp, #8]
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	9201      	str	r2, [sp, #4]
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2301      	movs	r3, #1
 8000a44:	2240      	movs	r2, #64	; 0x40
 8000a46:	2178      	movs	r1, #120	; 0x78
 8000a48:	4807      	ldr	r0, [pc, #28]	; (8000a68 <ssd1306_UpdateScreen+0x5c>)
 8000a4a:	f001 f9d5 	bl	8001df8 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	3301      	adds	r3, #1
 8000a52:	71fb      	strb	r3, [r7, #7]
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	2b07      	cmp	r3, #7
 8000a58:	d9de      	bls.n	8000a18 <ssd1306_UpdateScreen+0xc>
	}
}
 8000a5a:	bf00      	nop
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200000c8 	.word	0x200000c8
 8000a68:	200004dc 	.word	0x200004dc

08000a6c <ssd1306_DrawPixel>:
>>>>>>> FFF
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
<<<<<<< HEAD
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
 8000a72:	460b      	mov	r3, r1
 8000a74:	71bb      	strb	r3, [r7, #6]
 8000a76:	4613      	mov	r3, r2
 8000a78:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	db48      	blt.n	8000b14 <ssd1306_DrawPixel+0xac>
 8000a82:	79bb      	ldrb	r3, [r7, #6]
 8000a84:	2b3f      	cmp	r3, #63	; 0x3f
 8000a86:	d845      	bhi.n	8000b14 <ssd1306_DrawPixel+0xac>
=======
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
 8000a76:	460b      	mov	r3, r1
 8000a78:	71bb      	strb	r3, [r7, #6]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	db48      	blt.n	8000b18 <ssd1306_DrawPixel+0xac>
 8000a86:	79bb      	ldrb	r3, [r7, #6]
 8000a88:	2b3f      	cmp	r3, #63	; 0x3f
 8000a8a:	d845      	bhi.n	8000b18 <ssd1306_DrawPixel+0xac>
>>>>>>> FFF
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
<<<<<<< HEAD
 8000a88:	4b25      	ldr	r3, [pc, #148]	; (8000b20 <ssd1306_DrawPixel+0xb8>)
 8000a8a:	791b      	ldrb	r3, [r3, #4]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d006      	beq.n	8000a9e <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8000a90:	797b      	ldrb	r3, [r7, #5]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	bf0c      	ite	eq
 8000a96:	2301      	moveq	r3, #1
 8000a98:	2300      	movne	r3, #0
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	717b      	strb	r3, [r7, #5]
=======
 8000a8c:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <ssd1306_DrawPixel+0xb8>)
 8000a8e:	791b      	ldrb	r3, [r3, #4]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d006      	beq.n	8000aa2 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8000a94:	797b      	ldrb	r3, [r7, #5]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	bf0c      	ite	eq
 8000a9a:	2301      	moveq	r3, #1
 8000a9c:	2300      	movne	r3, #0
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	717b      	strb	r3, [r7, #5]
>>>>>>> FFF
	}

	// Draw in the right color
	if (color == White)
<<<<<<< HEAD
 8000a9e:	797b      	ldrb	r3, [r7, #5]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d11a      	bne.n	8000ada <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000aa4:	79fa      	ldrb	r2, [r7, #7]
 8000aa6:	79bb      	ldrb	r3, [r7, #6]
 8000aa8:	08db      	lsrs	r3, r3, #3
 8000aaa:	b2d8      	uxtb	r0, r3
 8000aac:	4603      	mov	r3, r0
 8000aae:	01db      	lsls	r3, r3, #7
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a1c      	ldr	r2, [pc, #112]	; (8000b24 <ssd1306_DrawPixel+0xbc>)
 8000ab4:	5cd3      	ldrb	r3, [r2, r3]
 8000ab6:	b25a      	sxtb	r2, r3
 8000ab8:	79bb      	ldrb	r3, [r7, #6]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	2101      	movs	r1, #1
 8000ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac4:	b25b      	sxtb	r3, r3
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	b259      	sxtb	r1, r3
 8000aca:	79fa      	ldrb	r2, [r7, #7]
 8000acc:	4603      	mov	r3, r0
 8000ace:	01db      	lsls	r3, r3, #7
 8000ad0:	4413      	add	r3, r2
 8000ad2:	b2c9      	uxtb	r1, r1
 8000ad4:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <ssd1306_DrawPixel+0xbc>)
 8000ad6:	54d1      	strb	r1, [r2, r3]
 8000ad8:	e01d      	b.n	8000b16 <ssd1306_DrawPixel+0xae>
=======
 8000aa2:	797b      	ldrb	r3, [r7, #5]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d11a      	bne.n	8000ade <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000aa8:	79fa      	ldrb	r2, [r7, #7]
 8000aaa:	79bb      	ldrb	r3, [r7, #6]
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	b2d8      	uxtb	r0, r3
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	01db      	lsls	r3, r3, #7
 8000ab4:	4413      	add	r3, r2
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <ssd1306_DrawPixel+0xbc>)
 8000ab8:	5cd3      	ldrb	r3, [r2, r3]
 8000aba:	b25a      	sxtb	r2, r3
 8000abc:	79bb      	ldrb	r3, [r7, #6]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac8:	b25b      	sxtb	r3, r3
 8000aca:	4313      	orrs	r3, r2
 8000acc:	b259      	sxtb	r1, r3
 8000ace:	79fa      	ldrb	r2, [r7, #7]
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	01db      	lsls	r3, r3, #7
 8000ad4:	4413      	add	r3, r2
 8000ad6:	b2c9      	uxtb	r1, r1
 8000ad8:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <ssd1306_DrawPixel+0xbc>)
 8000ada:	54d1      	strb	r1, [r2, r3]
 8000adc:	e01d      	b.n	8000b1a <ssd1306_DrawPixel+0xae>
>>>>>>> FFF
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
<<<<<<< HEAD
 8000ada:	79fa      	ldrb	r2, [r7, #7]
 8000adc:	79bb      	ldrb	r3, [r7, #6]
 8000ade:	08db      	lsrs	r3, r3, #3
 8000ae0:	b2d8      	uxtb	r0, r3
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	01db      	lsls	r3, r3, #7
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <ssd1306_DrawPixel+0xbc>)
 8000aea:	5cd3      	ldrb	r3, [r2, r3]
 8000aec:	b25a      	sxtb	r2, r3
 8000aee:	79bb      	ldrb	r3, [r7, #6]
 8000af0:	f003 0307 	and.w	r3, r3, #7
 8000af4:	2101      	movs	r1, #1
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	b25b      	sxtb	r3, r3
 8000afc:	43db      	mvns	r3, r3
 8000afe:	b25b      	sxtb	r3, r3
 8000b00:	4013      	ands	r3, r2
 8000b02:	b259      	sxtb	r1, r3
 8000b04:	79fa      	ldrb	r2, [r7, #7]
 8000b06:	4603      	mov	r3, r0
 8000b08:	01db      	lsls	r3, r3, #7
 8000b0a:	4413      	add	r3, r2
 8000b0c:	b2c9      	uxtb	r1, r1
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <ssd1306_DrawPixel+0xbc>)
 8000b10:	54d1      	strb	r1, [r2, r3]
 8000b12:	e000      	b.n	8000b16 <ssd1306_DrawPixel+0xae>
		return;
 8000b14:	bf00      	nop
	}
}
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	200004c8 	.word	0x200004c8
 8000b24:	200000c8 	.word	0x200000c8

08000b28 <ssd1306_WriteChar>:
=======
 8000ade:	79fa      	ldrb	r2, [r7, #7]
 8000ae0:	79bb      	ldrb	r3, [r7, #6]
 8000ae2:	08db      	lsrs	r3, r3, #3
 8000ae4:	b2d8      	uxtb	r0, r3
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	01db      	lsls	r3, r3, #7
 8000aea:	4413      	add	r3, r2
 8000aec:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <ssd1306_DrawPixel+0xbc>)
 8000aee:	5cd3      	ldrb	r3, [r2, r3]
 8000af0:	b25a      	sxtb	r2, r3
 8000af2:	79bb      	ldrb	r3, [r7, #6]
 8000af4:	f003 0307 	and.w	r3, r3, #7
 8000af8:	2101      	movs	r1, #1
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	b25b      	sxtb	r3, r3
 8000b00:	43db      	mvns	r3, r3
 8000b02:	b25b      	sxtb	r3, r3
 8000b04:	4013      	ands	r3, r2
 8000b06:	b259      	sxtb	r1, r3
 8000b08:	79fa      	ldrb	r2, [r7, #7]
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	01db      	lsls	r3, r3, #7
 8000b0e:	4413      	add	r3, r2
 8000b10:	b2c9      	uxtb	r1, r1
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <ssd1306_DrawPixel+0xbc>)
 8000b14:	54d1      	strb	r1, [r2, r3]
 8000b16:	e000      	b.n	8000b1a <ssd1306_DrawPixel+0xae>
		return;
 8000b18:	bf00      	nop
	}
}
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	200004c8 	.word	0x200004c8
 8000b28:	200000c8 	.word	0x200000c8

08000b2c <ssd1306_WriteChar>:
>>>>>>> FFF
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
<<<<<<< HEAD
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b089      	sub	sp, #36	; 0x24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4604      	mov	r4, r0
 8000b30:	1d38      	adds	r0, r7, #4
 8000b32:	e880 0006 	stmia.w	r0, {r1, r2}
 8000b36:	461a      	mov	r2, r3
 8000b38:	4623      	mov	r3, r4
 8000b3a:	73fb      	strb	r3, [r7, #15]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	73bb      	strb	r3, [r7, #14]
=======
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b089      	sub	sp, #36	; 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4604      	mov	r4, r0
 8000b34:	1d38      	adds	r0, r7, #4
 8000b36:	e880 0006 	stmia.w	r0, {r1, r2}
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4623      	mov	r3, r4
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	4613      	mov	r3, r2
 8000b42:	73bb      	strb	r3, [r7, #14]
>>>>>>> FFF
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
<<<<<<< HEAD
 8000b40:	4b38      	ldr	r3, [pc, #224]	; (8000c24 <ssd1306_WriteChar+0xfc>)
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	793b      	ldrb	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b4c:	dc06      	bgt.n	8000b5c <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000b4e:	4b35      	ldr	r3, [pc, #212]	; (8000c24 <ssd1306_WriteChar+0xfc>)
 8000b50:	885b      	ldrh	r3, [r3, #2]
 8000b52:	461a      	mov	r2, r3
 8000b54:	797b      	ldrb	r3, [r7, #5]
 8000b56:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000b58:	2b3f      	cmp	r3, #63	; 0x3f
 8000b5a:	dd01      	ble.n	8000b60 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	e05d      	b.n	8000c1c <ssd1306_WriteChar+0xf4>
=======
 8000b44:	4b38      	ldr	r3, [pc, #224]	; (8000c28 <ssd1306_WriteChar+0xfc>)
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	793b      	ldrb	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b50:	dc06      	bgt.n	8000b60 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000b52:	4b35      	ldr	r3, [pc, #212]	; (8000c28 <ssd1306_WriteChar+0xfc>)
 8000b54:	885b      	ldrh	r3, [r3, #2]
 8000b56:	461a      	mov	r2, r3
 8000b58:	797b      	ldrb	r3, [r7, #5]
 8000b5a:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000b5c:	2b3f      	cmp	r3, #63	; 0x3f
 8000b5e:	dd01      	ble.n	8000b64 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	e05d      	b.n	8000c20 <ssd1306_WriteChar+0xf4>
>>>>>>> FFF
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
<<<<<<< HEAD
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
 8000b64:	e04c      	b.n	8000c00 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	3b20      	subs	r3, #32
 8000b6c:	7979      	ldrb	r1, [r7, #5]
 8000b6e:	fb01 f303 	mul.w	r3, r1, r3
 8000b72:	4619      	mov	r1, r3
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	440b      	add	r3, r1
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	4413      	add	r3, r2
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8000b80:	2300      	movs	r3, #0
 8000b82:	61bb      	str	r3, [r7, #24]
 8000b84:	e034      	b.n	8000bf0 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 8000b86:	697a      	ldr	r2, [r7, #20]
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d012      	beq.n	8000bbc <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000b96:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <ssd1306_WriteChar+0xfc>)
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	4413      	add	r3, r2
 8000ba2:	b2d8      	uxtb	r0, r3
 8000ba4:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <ssd1306_WriteChar+0xfc>)
 8000ba6:	885b      	ldrh	r3, [r3, #2]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	4413      	add	r3, r2
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	7bba      	ldrb	r2, [r7, #14]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f7ff ff57 	bl	8000a68 <ssd1306_DrawPixel>
 8000bba:	e016      	b.n	8000bea <ssd1306_WriteChar+0xc2>
=======
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
 8000b68:	e04c      	b.n	8000c04 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	3b20      	subs	r3, #32
 8000b70:	7979      	ldrb	r1, [r7, #5]
 8000b72:	fb01 f303 	mul.w	r3, r1, r3
 8000b76:	4619      	mov	r1, r3
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	440b      	add	r3, r1
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	4413      	add	r3, r2
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	61bb      	str	r3, [r7, #24]
 8000b88:	e034      	b.n	8000bf4 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d012      	beq.n	8000bc0 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000b9a:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <ssd1306_WriteChar+0xfc>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4413      	add	r3, r2
 8000ba6:	b2d8      	uxtb	r0, r3
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <ssd1306_WriteChar+0xfc>)
 8000baa:	885b      	ldrh	r3, [r3, #2]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4413      	add	r3, r2
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	7bba      	ldrb	r2, [r7, #14]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f7ff ff57 	bl	8000a6c <ssd1306_DrawPixel>
 8000bbe:	e016      	b.n	8000bee <ssd1306_WriteChar+0xc2>
>>>>>>> FFF
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
<<<<<<< HEAD
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <ssd1306_WriteChar+0xfc>)
 8000bbe:	881b      	ldrh	r3, [r3, #0]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4413      	add	r3, r2
 8000bc8:	b2d8      	uxtb	r0, r3
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <ssd1306_WriteChar+0xfc>)
 8000bcc:	885b      	ldrh	r3, [r3, #2]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	4413      	add	r3, r2
 8000bd6:	b2d9      	uxtb	r1, r3
 8000bd8:	7bbb      	ldrb	r3, [r7, #14]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	bf0c      	ite	eq
 8000bde:	2301      	moveq	r3, #1
 8000be0:	2300      	movne	r3, #0
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	461a      	mov	r2, r3
 8000be6:	f7ff ff3f 	bl	8000a68 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	3301      	adds	r3, #1
 8000bee:	61bb      	str	r3, [r7, #24]
 8000bf0:	793b      	ldrb	r3, [r7, #4]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d3c5      	bcc.n	8000b86 <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	61fb      	str	r3, [r7, #28]
 8000c00:	797b      	ldrb	r3, [r7, #5]
 8000c02:	461a      	mov	r2, r3
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d3ad      	bcc.n	8000b66 <ssd1306_WriteChar+0x3e>
=======
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <ssd1306_WriteChar+0xfc>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	4413      	add	r3, r2
 8000bcc:	b2d8      	uxtb	r0, r3
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <ssd1306_WriteChar+0xfc>)
 8000bd0:	885b      	ldrh	r3, [r3, #2]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	4413      	add	r3, r2
 8000bda:	b2d9      	uxtb	r1, r3
 8000bdc:	7bbb      	ldrb	r3, [r7, #14]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	bf0c      	ite	eq
 8000be2:	2301      	moveq	r3, #1
 8000be4:	2300      	movne	r3, #0
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	461a      	mov	r2, r3
 8000bea:	f7ff ff3f 	bl	8000a6c <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	61bb      	str	r3, [r7, #24]
 8000bf4:	793b      	ldrb	r3, [r7, #4]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d3c5      	bcc.n	8000b8a <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3301      	adds	r3, #1
 8000c02:	61fb      	str	r3, [r7, #28]
 8000c04:	797b      	ldrb	r3, [r7, #5]
 8000c06:	461a      	mov	r2, r3
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d3ad      	bcc.n	8000b6a <ssd1306_WriteChar+0x3e>
>>>>>>> FFF
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
<<<<<<< HEAD
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <ssd1306_WriteChar+0xfc>)
 8000c0c:	881a      	ldrh	r2, [r3, #0]
 8000c0e:	793b      	ldrb	r3, [r7, #4]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	4413      	add	r3, r2
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <ssd1306_WriteChar+0xfc>)
 8000c18:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3724      	adds	r7, #36	; 0x24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd90      	pop	{r4, r7, pc}
 8000c24:	200004c8 	.word	0x200004c8

08000c28 <ssd1306_WriteString>:
=======
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <ssd1306_WriteChar+0xfc>)
 8000c10:	881a      	ldrh	r2, [r3, #0]
 8000c12:	793b      	ldrb	r3, [r7, #4]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	4413      	add	r3, r2
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <ssd1306_WriteChar+0xfc>)
 8000c1c:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3724      	adds	r7, #36	; 0x24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd90      	pop	{r4, r7, pc}
 8000c28:	200004c8 	.word	0x200004c8

08000c2c <ssd1306_WriteString>:
>>>>>>> FFF

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
<<<<<<< HEAD
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	1d38      	adds	r0, r7, #4
 8000c32:	e880 0006 	stmia.w	r0, {r1, r2}
 8000c36:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 8000c38:	e012      	b.n	8000c60 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	7818      	ldrb	r0, [r3, #0]
 8000c3e:	78fb      	ldrb	r3, [r7, #3]
 8000c40:	1d3a      	adds	r2, r7, #4
 8000c42:	ca06      	ldmia	r2, {r1, r2}
 8000c44:	f7ff ff70 	bl	8000b28 <ssd1306_WriteChar>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d002      	beq.n	8000c5a <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	e008      	b.n	8000c6c <ssd1306_WriteString+0x44>
=======
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	1d38      	adds	r0, r7, #4
 8000c36:	e880 0006 	stmia.w	r0, {r1, r2}
 8000c3a:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 8000c3c:	e012      	b.n	8000c64 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	7818      	ldrb	r0, [r3, #0]
 8000c42:	78fb      	ldrb	r3, [r7, #3]
 8000c44:	1d3a      	adds	r2, r7, #4
 8000c46:	ca06      	ldmia	r2, {r1, r2}
 8000c48:	f7ff ff70 	bl	8000b2c <ssd1306_WriteChar>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	461a      	mov	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d002      	beq.n	8000c5e <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	e008      	b.n	8000c70 <ssd1306_WriteString+0x44>
>>>>>>> FFF
		}

		// Next char
		str++;
<<<<<<< HEAD
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1e8      	bne.n	8000c3a <ssd1306_WriteString+0x12>
=======
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	3301      	adds	r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1e8      	bne.n	8000c3e <ssd1306_WriteString+0x12>
>>>>>>> FFF
	}

	// Everything ok
	return *str;
<<<<<<< HEAD
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	781b      	ldrb	r3, [r3, #0]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <ssd1306_SetCursor>:
=======
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <ssd1306_SetCursor>:
>>>>>>> FFF

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
<<<<<<< HEAD
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	460a      	mov	r2, r1
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	4613      	mov	r3, r2
 8000c82:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <ssd1306_SetCursor+0x2c>)
 8000c8a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000c8c:	79bb      	ldrb	r3, [r7, #6]
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <ssd1306_SetCursor+0x2c>)
 8000c92:	805a      	strh	r2, [r3, #2]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	200004c8 	.word	0x200004c8

08000ca4 <main>:
=======
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	460a      	mov	r2, r1
 8000c82:	71fb      	strb	r3, [r7, #7]
 8000c84:	4613      	mov	r3, r2
 8000c86:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <ssd1306_SetCursor+0x2c>)
 8000c8e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000c90:	79bb      	ldrb	r3, [r7, #6]
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <ssd1306_SetCursor+0x2c>)
 8000c96:	805a      	strh	r2, [r3, #2]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	200004c8 	.word	0x200004c8

08000ca8 <main>:
>>>>>>> FFF
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
=======
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000caa:	f000 fb5d 	bl	8001368 <HAL_Init>
=======
 8000cae:	f000 fb67 	bl	8001380 <HAL_Init>
>>>>>>> FFF
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8000cae:	f000 f83d 	bl	8000d2c <SystemClock_Config>
=======
 8000cb2:	f000 f839 	bl	8000d28 <SystemClock_Config>
>>>>>>> FFF
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 8000cb2:	f000 f90f 	bl	8000ed4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cb6:	f000 f87f 	bl	8000db8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000cba:	f000 f8ab 	bl	8000e14 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000cbe:	f000 f8df 	bl	8000e80 <MX_USART1_UART_Init>
=======
 8000cb6:	f000 f90b 	bl	8000ed0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cba:	f000 f87b 	bl	8000db4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000cbe:	f000 f8a7 	bl	8000e10 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000cc2:	f000 f8db 	bl	8000e7c <MX_USART1_UART_Init>
>>>>>>> FFF

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
<<<<<<< HEAD
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2025      	movs	r0, #37	; 0x25
 8000cc8:	f000 fcab 	bl	8001622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ccc:	2025      	movs	r0, #37	; 0x25
 8000cce:	f000 fcc4 	bl	800165a <HAL_NVIC_EnableIRQ>


  ssd1306_Init();
 8000cd2:	f7ff fe0b 	bl	80008ec <ssd1306_Init>
  ssd1306_Fill(Black);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fe74 	bl	80009c4 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8000cdc:	f7ff fe94 	bl	8000a08 <ssd1306_UpdateScreen>


#if nrf
  // Test write on OLED
  ssd1306_SetCursor(0, 0);
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f7ff ffc6 	bl	8000c74 <ssd1306_SetCursor>
  char test_main[20] = {0};
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	f107 0308 	add.w	r3, r7, #8
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
  strcpy(test_main, "NRF24L01 RX");
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <main+0x80>)
 8000cfe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  ssd1306_WriteString(test_main,  Font_7x10, White);
 8000d04:	4a08      	ldr	r2, [pc, #32]	; (8000d28 <main+0x84>)
 8000d06:	1d38      	adds	r0, r7, #4
 8000d08:	2301      	movs	r3, #1
 8000d0a:	ca06      	ldmia	r2, {r1, r2}
 8000d0c:	f7ff ff8c 	bl	8000c28 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000d10:	f7ff fe7a 	bl	8000a08 <ssd1306_UpdateScreen>

  NRF24_ini();
 8000d14:	f7ff fb8e 	bl	8000434 <NRF24_ini>
  read_config_registers();
 8000d18:	f7ff fbde 	bl	80004d8 <read_config_registers>
#endif

  while (1)
  {
	#if nrf
  nrf_communication_test();      // Main function LORA
 8000d1c:	f7ff fcc2 	bl	80006a4 <nrf_communication_test>
  {
 8000d20:	e7fc      	b.n	8000d1c <main+0x78>
 8000d22:	bf00      	nop
 8000d24:	08004908 	.word	0x08004908
 8000d28:	20000008 	.word	0x20000008

08000d2c <SystemClock_Config>:
=======
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2025      	movs	r0, #37	; 0x25
 8000ccc:	f000 fcb5 	bl	800163a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cd0:	2025      	movs	r0, #37	; 0x25
 8000cd2:	f000 fcce 	bl	8001672 <HAL_NVIC_EnableIRQ>


  ssd1306_Init();
 8000cd6:	f7ff fe0b 	bl	80008f0 <ssd1306_Init>
  ssd1306_Fill(Black);
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f7ff fe74 	bl	80009c8 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8000ce0:	f7ff fe94 	bl	8000a0c <ssd1306_UpdateScreen>


#if nrf
  // Test write on OLED
  ssd1306_SetCursor(0, 0);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff ffc6 	bl	8000c78 <ssd1306_SetCursor>
  char test_main[20] = {0};
 8000cec:	2300      	movs	r3, #0
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	f107 0308 	add.w	r3, r7, #8
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
  strcpy(test_main, "NRF24L01 TX");
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <main+0x78>)
 8000d02:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  ssd1306_WriteString(test_main,  Font_7x10, White);
 8000d08:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <main+0x7c>)
 8000d0a:	1d38      	adds	r0, r7, #4
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	ca06      	ldmia	r2, {r1, r2}
 8000d10:	f7ff ff8c 	bl	8000c2c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000d14:	f7ff fe7a 	bl	8000a0c <ssd1306_UpdateScreen>
#endif

  while (1)
  {
	#if nrf
  nrf_communication_test();       // Main function LORA
 8000d18:	f7ff fcc8 	bl	80006ac <nrf_communication_test>
  {
 8000d1c:	e7fc      	b.n	8000d18 <main+0x70>
 8000d1e:	bf00      	nop
 8000d20:	08004920 	.word	0x08004920
 8000d24:	20000008 	.word	0x20000008

08000d28 <SystemClock_Config>:
>>>>>>> FFF
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b090      	sub	sp, #64	; 0x40
 8000d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d32:	f107 0318 	add.w	r3, r7, #24
 8000d36:	2228      	movs	r2, #40	; 0x28
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f003 f92c 	bl	8003f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]
=======
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b090      	sub	sp, #64	; 0x40
 8000d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2e:	f107 0318 	add.w	r3, r7, #24
 8000d32:	2228      	movs	r2, #40	; 0x28
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f003 f93a 	bl	8003fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
>>>>>>> FFF

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< HEAD
 8000d4e:	2301      	movs	r3, #1
 8000d50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d60:	2302      	movs	r3, #2
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000d6a:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d70:	f107 0318 	add.w	r3, r7, #24
 8000d74:	4618      	mov	r0, r3
 8000d76:	f001 fb49 	bl	800240c <HAL_RCC_OscConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d80:	f000 f94a 	bl	8001018 <Error_Handler>
=======
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000d66:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6c:	f107 0318 	add.w	r3, r7, #24
 8000d70:	4618      	mov	r0, r3
 8000d72:	f001 fb57 	bl	8002424 <HAL_RCC_OscConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d7c:	f000 f958 	bl	8001030 <Error_Handler>
>>>>>>> FFF
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8000d84:	230f      	movs	r3, #15
 8000d86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f001 fdb4 	bl	800290c <HAL_RCC_ClockConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000daa:	f000 f935 	bl	8001018 <Error_Handler>
  }
}
 8000dae:	bf00      	nop
 8000db0:	3740      	adds	r7, #64	; 0x40
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <MX_I2C1_Init>:
=======
 8000d80:	230f      	movs	r3, #15
 8000d82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d84:	2302      	movs	r3, #2
 8000d86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2102      	movs	r1, #2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 fdc2 	bl	8002924 <HAL_RCC_ClockConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000da6:	f000 f943 	bl	8001030 <Error_Handler>
  }
}
 8000daa:	bf00      	nop
 8000dac:	3740      	adds	r7, #64	; 0x40
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <MX_I2C1_Init>:
>>>>>>> FFF
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
<<<<<<< HEAD
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
=======
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
<<<<<<< HEAD
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dbe:	4a13      	ldr	r2, [pc, #76]	; (8000e0c <MX_I2C1_Init+0x54>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dc4:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <MX_I2C1_Init+0x58>)
 8000dc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000df6:	f000 feaf 	bl	8001b58 <HAL_I2C_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e00:	f000 f90a 	bl	8001018 <Error_Handler>
=======
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dba:	4a13      	ldr	r2, [pc, #76]	; (8000e08 <MX_I2C1_Init+0x54>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dc0:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <MX_I2C1_Init+0x58>)
 8000dc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000df2:	f000 febd 	bl	8001b70 <HAL_I2C_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dfc:	f000 f918 	bl	8001030 <Error_Handler>
>>>>>>> FFF
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
<<<<<<< HEAD
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	200004dc 	.word	0x200004dc
 8000e0c:	40005400 	.word	0x40005400
 8000e10:	000186a0 	.word	0x000186a0

08000e14 <MX_SPI1_Init>:
=======
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200004dc 	.word	0x200004dc
 8000e08:	40005400 	.word	0x40005400
 8000e0c:	000186a0 	.word	0x000186a0

08000e10 <MX_SPI1_Init>:
>>>>>>> FFF
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
<<<<<<< HEAD
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
=======
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
>>>>>>> FFF

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
<<<<<<< HEAD
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e1a:	4a18      	ldr	r2, [pc, #96]	; (8000e7c <MX_SPI1_Init+0x68>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e48:	2220      	movs	r2, #32
 8000e4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e60:	220a      	movs	r2, #10
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e64:	4804      	ldr	r0, [pc, #16]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e66:	f001 feeb 	bl	8002c40 <HAL_SPI_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e70:	f000 f8d2 	bl	8001018 <Error_Handler>
=======
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e16:	4a18      	ldr	r2, [pc, #96]	; (8000e78 <MX_SPI1_Init+0x68>)
 8000e18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e1a:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e44:	2220      	movs	r2, #32
 8000e46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e5c:	220a      	movs	r2, #10
 8000e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e60:	4804      	ldr	r0, [pc, #16]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e62:	f001 fef9 	bl	8002c58 <HAL_SPI_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e6c:	f000 f8e0 	bl	8001030 <Error_Handler>
>>>>>>> FFF
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
<<<<<<< HEAD
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000574 	.word	0x20000574
 8000e7c:	40013000 	.word	0x40013000

08000e80 <MX_USART1_UART_Init>:
=======
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000574 	.word	0x20000574
 8000e78:	40013000 	.word	0x40013000

08000e7c <MX_USART1_UART_Init>:
>>>>>>> FFF
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
=======
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <MX_USART1_UART_Init+0x4c>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <MX_USART1_UART_Init+0x50>)
 8000e88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <MX_USART1_UART_Init+0x4c>)
 8000e8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <MX_USART1_UART_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <MX_USART1_UART_Init+0x4c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <MX_USART1_UART_Init+0x4c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <MX_USART1_UART_Init+0x4c>)
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <MX_USART1_UART_Init+0x4c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <MX_USART1_UART_Init+0x4c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_USART1_UART_Init+0x4c>)
 8000eb8:	f002 fc2e 	bl	8003718 <HAL_UART_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ec2:	f000 f8a9 	bl	8001018 <Error_Handler>
=======
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_USART1_UART_Init+0x4c>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <MX_USART1_UART_Init+0x50>)
 8000e84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_USART1_UART_Init+0x4c>)
 8000e88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_USART1_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_USART1_UART_Init+0x4c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <MX_USART1_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_USART1_UART_Init+0x4c>)
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <MX_USART1_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_USART1_UART_Init+0x4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_USART1_UART_Init+0x4c>)
 8000eb4:	f002 fc3c 	bl	8003730 <HAL_UART_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ebe:	f000 f8b7 	bl	8001030 <Error_Handler>
>>>>>>> FFF
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000530 	.word	0x20000530
 8000ed0:	40013800 	.word	0x40013800

08000ed4 <MX_GPIO_Init>:
=======
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000530 	.word	0x20000530
 8000ecc:	40013800 	.word	0x40013800

08000ed0 <MX_GPIO_Init>:
>>>>>>> FFF
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee8:	4b47      	ldr	r3, [pc, #284]	; (8001008 <MX_GPIO_Init+0x134>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a46      	ldr	r2, [pc, #280]	; (8001008 <MX_GPIO_Init+0x134>)
 8000eee:	f043 0310 	orr.w	r3, r3, #16
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b44      	ldr	r3, [pc, #272]	; (8001008 <MX_GPIO_Init+0x134>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0310 	and.w	r3, r3, #16
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f00:	4b41      	ldr	r3, [pc, #260]	; (8001008 <MX_GPIO_Init+0x134>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a40      	ldr	r2, [pc, #256]	; (8001008 <MX_GPIO_Init+0x134>)
 8000f06:	f043 0320 	orr.w	r3, r3, #32
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b3e      	ldr	r3, [pc, #248]	; (8001008 <MX_GPIO_Init+0x134>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0320 	and.w	r3, r3, #32
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <MX_GPIO_Init+0x134>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a3a      	ldr	r2, [pc, #232]	; (8001008 <MX_GPIO_Init+0x134>)
 8000f1e:	f043 0304 	orr.w	r3, r3, #4
 8000f22:	6193      	str	r3, [r2, #24]
 8000f24:	4b38      	ldr	r3, [pc, #224]	; (8001008 <MX_GPIO_Init+0x134>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f30:	4b35      	ldr	r3, [pc, #212]	; (8001008 <MX_GPIO_Init+0x134>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4a34      	ldr	r2, [pc, #208]	; (8001008 <MX_GPIO_Init+0x134>)
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b32      	ldr	r3, [pc, #200]	; (8001008 <MX_GPIO_Init+0x134>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f003 0308 	and.w	r3, r3, #8
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4e:	482f      	ldr	r0, [pc, #188]	; (800100c <MX_GPIO_Init+0x138>)
 8000f50:	f000 fde9 	bl	8001b26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2108      	movs	r1, #8
 8000f58:	482d      	ldr	r0, [pc, #180]	; (8001010 <MX_GPIO_Init+0x13c>)
 8000f5a:	f000 fde4 	bl	8001b26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2110      	movs	r1, #16
 8000f62:	482b      	ldr	r0, [pc, #172]	; (8001010 <MX_GPIO_Init+0x13c>)
 8000f64:	f000 fddf 	bl	8001b26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f242 0101 	movw	r1, #8193	; 0x2001
 8000f6e:	4829      	ldr	r0, [pc, #164]	; (8001014 <MX_GPIO_Init+0x140>)
 8000f70:	f000 fdd9 	bl	8001b26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2302      	movs	r3, #2
 8000f84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	481f      	ldr	r0, [pc, #124]	; (800100c <MX_GPIO_Init+0x138>)
 8000f8e:	f000 fc2f 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 SW3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|SW3_Pin;
 8000f92:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	481a      	ldr	r0, [pc, #104]	; (8001010 <MX_GPIO_Init+0x13c>)
 8000fa8:	f000 fc22 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000fac:	2318      	movs	r3, #24
 8000fae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4813      	ldr	r0, [pc, #76]	; (8001010 <MX_GPIO_Init+0x13c>)
 8000fc4:	f000 fc14 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 8000fc8:	f242 0301 	movw	r3, #8193	; 0x2001
 8000fcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480c      	ldr	r0, [pc, #48]	; (8001014 <MX_GPIO_Init+0x140>)
 8000fe2:	f000 fc05 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AUX_Pin SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = AUX_Pin|SW1_Pin|SW2_Pin;
 8000fe6:	f24c 0302 	movw	r3, #49154	; 0xc002
 8000fea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <MX_GPIO_Init+0x140>)
 8000ffc:	f000 fbf8 	bl	80017f0 <HAL_GPIO_Init>

}
 8001000:	bf00      	nop
 8001002:	3720      	adds	r7, #32
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021000 	.word	0x40021000
 800100c:	40011000 	.word	0x40011000
 8001010:	40010800 	.word	0x40010800
 8001014:	40010c00 	.word	0x40010c00

08001018 <Error_Handler>:
=======
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed6:	f107 0310 	add.w	r3, r7, #16
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee4:	4b4d      	ldr	r3, [pc, #308]	; (800101c <MX_GPIO_Init+0x14c>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a4c      	ldr	r2, [pc, #304]	; (800101c <MX_GPIO_Init+0x14c>)
 8000eea:	f043 0310 	orr.w	r3, r3, #16
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b4a      	ldr	r3, [pc, #296]	; (800101c <MX_GPIO_Init+0x14c>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f003 0310 	and.w	r3, r3, #16
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efc:	4b47      	ldr	r3, [pc, #284]	; (800101c <MX_GPIO_Init+0x14c>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	4a46      	ldr	r2, [pc, #280]	; (800101c <MX_GPIO_Init+0x14c>)
 8000f02:	f043 0320 	orr.w	r3, r3, #32
 8000f06:	6193      	str	r3, [r2, #24]
 8000f08:	4b44      	ldr	r3, [pc, #272]	; (800101c <MX_GPIO_Init+0x14c>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0320 	and.w	r3, r3, #32
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b41      	ldr	r3, [pc, #260]	; (800101c <MX_GPIO_Init+0x14c>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a40      	ldr	r2, [pc, #256]	; (800101c <MX_GPIO_Init+0x14c>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b3e      	ldr	r3, [pc, #248]	; (800101c <MX_GPIO_Init+0x14c>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2c:	4b3b      	ldr	r3, [pc, #236]	; (800101c <MX_GPIO_Init+0x14c>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a3a      	ldr	r2, [pc, #232]	; (800101c <MX_GPIO_Init+0x14c>)
 8000f32:	f043 0308 	orr.w	r3, r3, #8
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b38      	ldr	r3, [pc, #224]	; (800101c <MX_GPIO_Init+0x14c>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0308 	and.w	r3, r3, #8
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4a:	4835      	ldr	r0, [pc, #212]	; (8001020 <MX_GPIO_Init+0x150>)
 8000f4c:	f000 fdf7 	bl	8001b3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2108      	movs	r1, #8
 8000f54:	4833      	ldr	r0, [pc, #204]	; (8001024 <MX_GPIO_Init+0x154>)
 8000f56:	f000 fdf2 	bl	8001b3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2110      	movs	r1, #16
 8000f5e:	4831      	ldr	r0, [pc, #196]	; (8001024 <MX_GPIO_Init+0x154>)
 8000f60:	f000 fded 	bl	8001b3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f242 0101 	movw	r1, #8193	; 0x2001
 8000f6a:	482f      	ldr	r0, [pc, #188]	; (8001028 <MX_GPIO_Init+0x158>)
 8000f6c:	f000 fde7 	bl	8001b3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f82:	f107 0310 	add.w	r3, r7, #16
 8000f86:	4619      	mov	r1, r3
 8000f88:	4825      	ldr	r0, [pc, #148]	; (8001020 <MX_GPIO_Init+0x150>)
 8000f8a:	f000 fc3d 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f8e:	2304      	movs	r3, #4
 8000f90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f92:	4b26      	ldr	r3, [pc, #152]	; (800102c <MX_GPIO_Init+0x15c>)
 8000f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	f107 0310 	add.w	r3, r7, #16
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4820      	ldr	r0, [pc, #128]	; (8001024 <MX_GPIO_Init+0x154>)
 8000fa2:	f000 fc31 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000fa6:	2318      	movs	r3, #24
 8000fa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 0310 	add.w	r3, r7, #16
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4819      	ldr	r0, [pc, #100]	; (8001024 <MX_GPIO_Init+0x154>)
 8000fbe:	f000 fc23 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 8000fc2:	f242 0301 	movw	r3, #8193	; 0x2001
 8000fc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4813      	ldr	r0, [pc, #76]	; (8001028 <MX_GPIO_Init+0x158>)
 8000fdc:	f000 fc14 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pins : AUX_Pin SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = AUX_Pin|SW1_Pin|SW2_Pin;
 8000fe0:	f24c 0302 	movw	r3, #49154	; 0xc002
 8000fe4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <MX_GPIO_Init+0x158>)
 8000ff6:	f000 fc07 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW3_Pin */
  GPIO_InitStruct.Pin = SW3_Pin;
 8000ffa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ffe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	4619      	mov	r1, r3
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_GPIO_Init+0x154>)
 8001010:	f000 fbfa 	bl	8001808 <HAL_GPIO_Init>

}
 8001014:	bf00      	nop
 8001016:	3720      	adds	r7, #32
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40021000 	.word	0x40021000
 8001020:	40011000 	.word	0x40011000
 8001024:	40010800 	.word	0x40010800
 8001028:	40010c00 	.word	0x40010c00
 800102c:	10110000 	.word	0x10110000

08001030 <Error_Handler>:
>>>>>>> FFF
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
=======
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
>>>>>>> FFF
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 800101c:	b672      	cpsid	i
}
 800101e:	bf00      	nop
=======
 8001034:	b672      	cpsid	i
}
 8001036:	bf00      	nop
>>>>>>> FFF
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8001020:	e7fe      	b.n	8001020 <Error_Handler+0x8>
	...

08001024 <HAL_MspInit>:
=======
 8001038:	e7fe      	b.n	8001038 <Error_Handler+0x8>
	...

0800103c <HAL_MspInit>:
>>>>>>> FFF
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
=======
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
<<<<<<< HEAD
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_MspInit+0x5c>)
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	4a14      	ldr	r2, [pc, #80]	; (8001080 <HAL_MspInit+0x5c>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6193      	str	r3, [r2, #24]
 8001036:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_MspInit+0x5c>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <HAL_MspInit+0x5c>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <HAL_MspInit+0x5c>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104c:	61d3      	str	r3, [r2, #28]
 800104e:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <HAL_MspInit+0x5c>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
=======
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_MspInit+0x5c>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	4a14      	ldr	r2, [pc, #80]	; (8001098 <HAL_MspInit+0x5c>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6193      	str	r3, [r2, #24]
 800104e:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_MspInit+0x5c>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <HAL_MspInit+0x5c>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <HAL_MspInit+0x5c>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001064:	61d3      	str	r3, [r2, #28]
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <HAL_MspInit+0x5c>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
>>>>>>> FFF

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
<<<<<<< HEAD
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_MspInit+0x60>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <HAL_MspInit+0x60>)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6053      	str	r3, [r2, #4]
=======
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <HAL_MspInit+0x60>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <HAL_MspInit+0x60>)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6053      	str	r3, [r2, #4]
>>>>>>> FFF

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	40021000 	.word	0x40021000
 8001084:	40010000 	.word	0x40010000

08001088 <HAL_I2C_MspInit>:
=======
 800108e:	bf00      	nop
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	40021000 	.word	0x40021000
 800109c:	40010000 	.word	0x40010000

080010a0 <HAL_I2C_MspInit>:
>>>>>>> FFF
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
<<<<<<< HEAD
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a15      	ldr	r2, [pc, #84]	; (80010f8 <HAL_I2C_MspInit+0x70>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d123      	bne.n	80010f0 <HAL_I2C_MspInit+0x68>
=======
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a15      	ldr	r2, [pc, #84]	; (8001110 <HAL_I2C_MspInit+0x70>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d123      	bne.n	8001108 <HAL_I2C_MspInit+0x68>
>>>>>>> FFF
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_I2C_MspInit+0x74>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a13      	ldr	r2, [pc, #76]	; (80010fc <HAL_I2C_MspInit+0x74>)
 80010ae:	f043 0308 	orr.w	r3, r3, #8
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_I2C_MspInit+0x74>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
=======
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <HAL_I2C_MspInit+0x74>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a13      	ldr	r2, [pc, #76]	; (8001114 <HAL_I2C_MspInit+0x74>)
 80010c6:	f043 0308 	orr.w	r3, r3, #8
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_I2C_MspInit+0x74>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
>>>>>>> FFF
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< HEAD
 80010c0:	23c0      	movs	r3, #192	; 0xc0
 80010c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c4:	2312      	movs	r3, #18
 80010c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	4619      	mov	r1, r3
 80010d2:	480b      	ldr	r0, [pc, #44]	; (8001100 <HAL_I2C_MspInit+0x78>)
 80010d4:	f000 fb8c 	bl	80017f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <HAL_I2C_MspInit+0x74>)
 80010da:	69db      	ldr	r3, [r3, #28]
 80010dc:	4a07      	ldr	r2, [pc, #28]	; (80010fc <HAL_I2C_MspInit+0x74>)
 80010de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010e2:	61d3      	str	r3, [r2, #28]
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <HAL_I2C_MspInit+0x74>)
 80010e6:	69db      	ldr	r3, [r3, #28]
 80010e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
=======
 80010d8:	23c0      	movs	r3, #192	; 0xc0
 80010da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010dc:	2312      	movs	r3, #18
 80010de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	4619      	mov	r1, r3
 80010ea:	480b      	ldr	r0, [pc, #44]	; (8001118 <HAL_I2C_MspInit+0x78>)
 80010ec:	f000 fb8c 	bl	8001808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_I2C_MspInit+0x74>)
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_I2C_MspInit+0x74>)
 80010f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010fa:	61d3      	str	r3, [r2, #28]
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_I2C_MspInit+0x74>)
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
>>>>>>> FFF
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
<<<<<<< HEAD
 80010f0:	bf00      	nop
 80010f2:	3720      	adds	r7, #32
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40005400 	.word	0x40005400
 80010fc:	40021000 	.word	0x40021000
 8001100:	40010c00 	.word	0x40010c00

08001104 <HAL_SPI_MspInit>:
=======
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40005400 	.word	0x40005400
 8001114:	40021000 	.word	0x40021000
 8001118:	40010c00 	.word	0x40010c00

0800111c <HAL_SPI_MspInit>:
>>>>>>> FFF
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
<<<<<<< HEAD
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a1b      	ldr	r2, [pc, #108]	; (800118c <HAL_SPI_MspInit+0x88>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d12f      	bne.n	8001184 <HAL_SPI_MspInit+0x80>
=======
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a1b      	ldr	r2, [pc, #108]	; (80011a4 <HAL_SPI_MspInit+0x88>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d12f      	bne.n	800119c <HAL_SPI_MspInit+0x80>
>>>>>>> FFF
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< HEAD
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <HAL_SPI_MspInit+0x8c>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a19      	ldr	r2, [pc, #100]	; (8001190 <HAL_SPI_MspInit+0x8c>)
 800112a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b17      	ldr	r3, [pc, #92]	; (8001190 <HAL_SPI_MspInit+0x8c>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <HAL_SPI_MspInit+0x8c>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a13      	ldr	r2, [pc, #76]	; (8001190 <HAL_SPI_MspInit+0x8c>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_SPI_MspInit+0x8c>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
=======
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <HAL_SPI_MspInit+0x8c>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <HAL_SPI_MspInit+0x8c>)
 8001142:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <HAL_SPI_MspInit+0x8c>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <HAL_SPI_MspInit+0x8c>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a13      	ldr	r2, [pc, #76]	; (80011a8 <HAL_SPI_MspInit+0x8c>)
 800115a:	f043 0304 	orr.w	r3, r3, #4
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_SPI_MspInit+0x8c>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
>>>>>>> FFF
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
<<<<<<< HEAD
 8001154:	23a0      	movs	r3, #160	; 0xa0
 8001156:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4619      	mov	r1, r3
 8001166:	480b      	ldr	r0, [pc, #44]	; (8001194 <HAL_SPI_MspInit+0x90>)
 8001168:	f000 fb42 	bl	80017f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800116c:	2340      	movs	r3, #64	; 0x40
 800116e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	4619      	mov	r1, r3
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <HAL_SPI_MspInit+0x90>)
 8001180:	f000 fb36 	bl	80017f0 <HAL_GPIO_Init>
=======
 800116c:	23a0      	movs	r3, #160	; 0xa0
 800116e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	4619      	mov	r1, r3
 800117e:	480b      	ldr	r0, [pc, #44]	; (80011ac <HAL_SPI_MspInit+0x90>)
 8001180:	f000 fb42 	bl	8001808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001184:	2340      	movs	r3, #64	; 0x40
 8001186:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	4619      	mov	r1, r3
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <HAL_SPI_MspInit+0x90>)
 8001198:	f000 fb36 	bl	8001808 <HAL_GPIO_Init>
>>>>>>> FFF
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001184:	bf00      	nop
 8001186:	3720      	adds	r7, #32
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40013000 	.word	0x40013000
 8001190:	40021000 	.word	0x40021000
 8001194:	40010800 	.word	0x40010800

08001198 <HAL_UART_MspInit>:
=======
 800119c:	bf00      	nop
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40013000 	.word	0x40013000
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010800 	.word	0x40010800

080011b0 <HAL_UART_MspInit>:
>>>>>>> FFF
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a20      	ldr	r2, [pc, #128]	; (8001234 <HAL_UART_MspInit+0x9c>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d139      	bne.n	800122c <HAL_UART_MspInit+0x94>
=======
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a20      	ldr	r2, [pc, #128]	; (800124c <HAL_UART_MspInit+0x9c>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d139      	bne.n	8001244 <HAL_UART_MspInit+0x94>
>>>>>>> FFF
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 80011b8:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <HAL_UART_MspInit+0xa0>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a1e      	ldr	r2, [pc, #120]	; (8001238 <HAL_UART_MspInit+0xa0>)
 80011be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <HAL_UART_MspInit+0xa0>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_UART_MspInit+0xa0>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a18      	ldr	r2, [pc, #96]	; (8001238 <HAL_UART_MspInit+0xa0>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <HAL_UART_MspInit+0xa0>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
=======
 80011d0:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <HAL_UART_MspInit+0xa0>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a1e      	ldr	r2, [pc, #120]	; (8001250 <HAL_UART_MspInit+0xa0>)
 80011d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <HAL_UART_MspInit+0xa0>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <HAL_UART_MspInit+0xa0>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a18      	ldr	r2, [pc, #96]	; (8001250 <HAL_UART_MspInit+0xa0>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <HAL_UART_MspInit+0xa0>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
>>>>>>> FFF
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
<<<<<<< HEAD
 80011e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4619      	mov	r1, r3
 80011fc:	480f      	ldr	r0, [pc, #60]	; (800123c <HAL_UART_MspInit+0xa4>)
 80011fe:	f000 faf7 	bl	80017f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001206:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	4619      	mov	r1, r3
 8001216:	4809      	ldr	r0, [pc, #36]	; (800123c <HAL_UART_MspInit+0xa4>)
 8001218:	f000 faea 	bl	80017f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2100      	movs	r1, #0
 8001220:	2025      	movs	r0, #37	; 0x25
 8001222:	f000 f9fe 	bl	8001622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001226:	2025      	movs	r0, #37	; 0x25
 8001228:	f000 fa17 	bl	800165a <HAL_NVIC_EnableIRQ>
=======
 8001200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001204:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	4619      	mov	r1, r3
 8001214:	480f      	ldr	r0, [pc, #60]	; (8001254 <HAL_UART_MspInit+0xa4>)
 8001216:	f000 faf7 	bl	8001808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800121a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800121e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4619      	mov	r1, r3
 800122e:	4809      	ldr	r0, [pc, #36]	; (8001254 <HAL_UART_MspInit+0xa4>)
 8001230:	f000 faea 	bl	8001808 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001234:	2200      	movs	r2, #0
 8001236:	2100      	movs	r1, #0
 8001238:	2025      	movs	r0, #37	; 0x25
 800123a:	f000 f9fe 	bl	800163a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800123e:	2025      	movs	r0, #37	; 0x25
 8001240:	f000 fa17 	bl	8001672 <HAL_NVIC_EnableIRQ>
>>>>>>> FFF
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
<<<<<<< HEAD
 800122c:	bf00      	nop
 800122e:	3720      	adds	r7, #32
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40013800 	.word	0x40013800
 8001238:	40021000 	.word	0x40021000
 800123c:	40010800 	.word	0x40010800

08001240 <NMI_Handler>:
=======
 8001244:	bf00      	nop
 8001246:	3720      	adds	r7, #32
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40013800 	.word	0x40013800
 8001250:	40021000 	.word	0x40021000
 8001254:	40010800 	.word	0x40010800

08001258 <NMI_Handler>:
>>>>>>> FFF
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
=======
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 8001244:	e7fe      	b.n	8001244 <NMI_Handler+0x4>

08001246 <HardFault_Handler>:
=======
 800125c:	e7fe      	b.n	800125c <NMI_Handler+0x4>

0800125e <HardFault_Handler>:
>>>>>>> FFF

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
=======
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800124a:	e7fe      	b.n	800124a <HardFault_Handler+0x4>

0800124c <MemManage_Handler>:
=======
 8001262:	e7fe      	b.n	8001262 <HardFault_Handler+0x4>

08001264 <MemManage_Handler>:
>>>>>>> FFF

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
=======
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001250:	e7fe      	b.n	8001250 <MemManage_Handler+0x4>

08001252 <BusFault_Handler>:
=======
 8001268:	e7fe      	b.n	8001268 <MemManage_Handler+0x4>

0800126a <BusFault_Handler>:
>>>>>>> FFF

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
=======
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001256:	e7fe      	b.n	8001256 <BusFault_Handler+0x4>

08001258 <UsageFault_Handler>:
=======
 800126e:	e7fe      	b.n	800126e <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:
>>>>>>> FFF

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
=======
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800125c:	e7fe      	b.n	800125c <UsageFault_Handler+0x4>

0800125e <SVC_Handler>:
=======
 8001274:	e7fe      	b.n	8001274 <UsageFault_Handler+0x4>

08001276 <SVC_Handler>:
>>>>>>> FFF

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
=======
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
>>>>>>> FFF

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr

0800126a <DebugMon_Handler>:
=======
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <DebugMon_Handler>:
>>>>>>> FFF

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
=======
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
>>>>>>> FFF

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <PendSV_Handler>:
=======
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr

0800128e <PendSV_Handler>:
>>>>>>> FFF

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
=======
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
>>>>>>> FFF

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <SysTick_Handler>:
=======
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <SysTick_Handler>:
>>>>>>> FFF

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8001282:	b580      	push	{r7, lr}
 8001284:	af00      	add	r7, sp, #0
=======
 800129a:	b580      	push	{r7, lr}
 800129c:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8001286:	f000 f8b5 	bl	80013f4 <HAL_IncTick>
=======
 800129e:	f000 f8b5 	bl	800140c <HAL_IncTick>
>>>>>>> FFF
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <USART1_IRQHandler>:
=======
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <USART1_IRQHandler>:
>>>>>>> FFF

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
<<<<<<< HEAD
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
=======
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
>>>>>>> FFF
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
<<<<<<< HEAD
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <USART1_IRQHandler+0x10>)
 8001296:	f002 fa8d 	bl	80037b4 <HAL_UART_IRQHandler>
=======
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <USART1_IRQHandler+0x10>)
 80012ae:	f002 fa8d 	bl	80037cc <HAL_UART_IRQHandler>
>>>>>>> FFF
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
<<<<<<< HEAD
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000530 	.word	0x20000530

080012a4 <_sbrk>:
=======
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000530 	.word	0x20000530

080012bc <_sbrk>:
>>>>>>> FFF
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
=======
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 80012ac:	4a14      	ldr	r2, [pc, #80]	; (8001300 <_sbrk+0x5c>)
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <_sbrk+0x60>)
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	613b      	str	r3, [r7, #16]
=======
 80012c4:	4a14      	ldr	r2, [pc, #80]	; (8001318 <_sbrk+0x5c>)
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <_sbrk+0x60>)
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	613b      	str	r3, [r7, #16]
>>>>>>> FFF
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <_sbrk+0x64>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <_sbrk+0x68>)
 80012c4:	601a      	str	r2, [r3, #0]
=======
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <_sbrk+0x64>)
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <_sbrk+0x68>)
 80012dc:	601a      	str	r2, [r3, #0]
>>>>>>> FFF
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d207      	bcs.n	80012e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d4:	f002 fe1c 	bl	8003f10 <__errno>
 80012d8:	4603      	mov	r3, r0
 80012da:	220c      	movs	r2, #12
 80012dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012e2:	e009      	b.n	80012f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <_sbrk+0x64>)
 80012f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20005000 	.word	0x20005000
 8001304:	00000400 	.word	0x00000400
 8001308:	200004d0 	.word	0x200004d0
 800130c:	200005e0 	.word	0x200005e0

08001310 <SystemInit>:
=======
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d207      	bcs.n	80012fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012ec:	f002 fe1c 	bl	8003f28 <__errno>
 80012f0:	4603      	mov	r3, r0
 80012f2:	220c      	movs	r2, #12
 80012f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012fa:	e009      	b.n	8001310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <_sbrk+0x64>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <_sbrk+0x64>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	4a05      	ldr	r2, [pc, #20]	; (8001320 <_sbrk+0x64>)
 800130c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800130e:	68fb      	ldr	r3, [r7, #12]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20005000 	.word	0x20005000
 800131c:	00000400 	.word	0x00000400
 8001320:	200004d0 	.word	0x200004d0
 8001324:	200005e0 	.word	0x200005e0

08001328 <SystemInit>:
>>>>>>> FFF
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
<<<<<<< HEAD
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
=======
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
>>>>>>> FFF

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <Reset_Handler>:
=======
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <Reset_Handler>:
>>>>>>> FFF
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
<<<<<<< HEAD
 800131c:	480c      	ldr	r0, [pc, #48]	; (8001350 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800131e:	490d      	ldr	r1, [pc, #52]	; (8001354 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001320:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001324:	e002      	b.n	800132c <LoopCopyDataInit>

08001326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132a:	3304      	adds	r3, #4

0800132c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800132c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001330:	d3f9      	bcc.n	8001326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001334:	4c0a      	ldr	r4, [pc, #40]	; (8001360 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001338:	e001      	b.n	800133e <LoopFillZerobss>

0800133a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800133c:	3204      	adds	r2, #4

0800133e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001340:	d3fb      	bcc.n	800133a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001342:	f7ff ffe5 	bl	8001310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001346:	f002 fde9 	bl	8003f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800134a:	f7ff fcab 	bl	8000ca4 <main>
  bx lr
 800134e:	4770      	bx	lr
  ldr r0, =_sdata
 8001350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001354:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001358:	08005108 	.word	0x08005108
  ldr r2, =_sbss
 800135c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001360:	200005e0 	.word	0x200005e0

08001364 <ADC1_2_IRQHandler>:
=======
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001336:	490d      	ldr	r1, [pc, #52]	; (800136c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001338:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800133c:	e002      	b.n	8001344 <LoopCopyDataInit>

0800133e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001342:	3304      	adds	r3, #4

08001344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001348:	d3f9      	bcc.n	800133e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800134c:	4c0a      	ldr	r4, [pc, #40]	; (8001378 <LoopFillZerobss+0x22>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001350:	e001      	b.n	8001356 <LoopFillZerobss>

08001352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001354:	3204      	adds	r2, #4

08001356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001358:	d3fb      	bcc.n	8001352 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800135a:	f7ff ffe5 	bl	8001328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135e:	f002 fde9 	bl	8003f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001362:	f7ff fca1 	bl	8000ca8 <main>
  bx lr
 8001366:	4770      	bx	lr
  ldr r0, =_sdata
 8001368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800136c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001370:	08005120 	.word	0x08005120
  ldr r2, =_sbss
 8001374:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001378:	200005e0 	.word	0x200005e0

0800137c <ADC1_2_IRQHandler>:
>>>>>>> FFF
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< HEAD
 8001364:	e7fe      	b.n	8001364 <ADC1_2_IRQHandler>
	...

08001368 <HAL_Init>:
=======
 800137c:	e7fe      	b.n	800137c <ADC1_2_IRQHandler>
	...

08001380 <HAL_Init>:
>>>>>>> FFF
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
=======
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
>>>>>>> FFF
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <HAL_Init+0x28>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a07      	ldr	r2, [pc, #28]	; (8001390 <HAL_Init+0x28>)
 8001372:	f043 0310 	orr.w	r3, r3, #16
 8001376:	6013      	str	r3, [r2, #0]
=======
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <HAL_Init+0x28>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <HAL_Init+0x28>)
 800138a:	f043 0310 	orr.w	r3, r3, #16
 800138e:	6013      	str	r3, [r2, #0]
>>>>>>> FFF
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8001378:	2003      	movs	r0, #3
 800137a:	f000 f947 	bl	800160c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800137e:	2000      	movs	r0, #0
 8001380:	f000 f808 	bl	8001394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001384:	f7ff fe4e 	bl	8001024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40022000 	.word	0x40022000

08001394 <HAL_InitTick>:
=======
 8001390:	2003      	movs	r0, #3
 8001392:	f000 f947 	bl	8001624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001396:	2000      	movs	r0, #0
 8001398:	f000 f808 	bl	80013ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800139c:	f7ff fe4e 	bl	800103c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40022000 	.word	0x40022000

080013ac <HAL_InitTick>:
>>>>>>> FFF
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_InitTick+0x54>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_InitTick+0x58>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f95f 	bl	8001676 <HAL_SYSTICK_Config>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e00e      	b.n	80013e0 <HAL_InitTick+0x4c>
=======
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_InitTick+0x54>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_InitTick+0x58>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4619      	mov	r1, r3
 80013be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f95f 	bl	800168e <HAL_SYSTICK_Config>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00e      	b.n	80013f8 <HAL_InitTick+0x4c>
>>>>>>> FFF
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d80a      	bhi.n	80013de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d0:	f000 f927 	bl	8001622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <HAL_InitTick+0x5c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
=======
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b0f      	cmp	r3, #15
 80013de:	d80a      	bhi.n	80013f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e0:	2200      	movs	r2, #0
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013e8:	f000 f927 	bl	800163a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013ec:	4a06      	ldr	r2, [pc, #24]	; (8001408 <HAL_InitTick+0x5c>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6013      	str	r3, [r2, #0]
>>>>>>> FFF
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000010 	.word	0x20000010
 80013ec:	20000018 	.word	0x20000018
 80013f0:	20000014 	.word	0x20000014

080013f4 <HAL_IncTick>:
=======
 80013f2:	2300      	movs	r3, #0
 80013f4:	e000      	b.n	80013f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000010 	.word	0x20000010
 8001404:	20000018 	.word	0x20000018
 8001408:	20000014 	.word	0x20000014

0800140c <HAL_IncTick>:
>>>>>>> FFF
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_IncTick+0x1c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_IncTick+0x20>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4413      	add	r3, r2
 8001404:	4a03      	ldr	r2, [pc, #12]	; (8001414 <HAL_IncTick+0x20>)
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	20000018 	.word	0x20000018
 8001414:	200005cc 	.word	0x200005cc

08001418 <HAL_GetTick>:
=======
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_IncTick+0x1c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	461a      	mov	r2, r3
 8001416:	4b05      	ldr	r3, [pc, #20]	; (800142c <HAL_IncTick+0x20>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4413      	add	r3, r2
 800141c:	4a03      	ldr	r2, [pc, #12]	; (800142c <HAL_IncTick+0x20>)
 800141e:	6013      	str	r3, [r2, #0]
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	20000018 	.word	0x20000018
 800142c:	200005cc 	.word	0x200005cc

08001430 <HAL_GetTick>:
>>>>>>> FFF
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b02      	ldr	r3, [pc, #8]	; (8001428 <HAL_GetTick+0x10>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	200005cc 	.word	0x200005cc

0800142c <HAL_Delay>:
=======
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return uwTick;
 8001434:	4b02      	ldr	r3, [pc, #8]	; (8001440 <HAL_GetTick+0x10>)
 8001436:	681b      	ldr	r3, [r3, #0]
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	200005cc 	.word	0x200005cc

08001444 <HAL_Delay>:
>>>>>>> FFF
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001434:	f7ff fff0 	bl	8001418 <HAL_GetTick>
 8001438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001444:	d005      	beq.n	8001452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_Delay+0x44>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001452:	bf00      	nop
 8001454:	f7ff ffe0 	bl	8001418 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	429a      	cmp	r2, r3
 8001462:	d8f7      	bhi.n	8001454 <HAL_Delay+0x28>
  {
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000018 	.word	0x20000018

08001474 <__NVIC_SetPriorityGrouping>:
=======
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800144c:	f7ff fff0 	bl	8001430 <HAL_GetTick>
 8001450:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800145c:	d005      	beq.n	800146a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_Delay+0x44>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4413      	add	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800146a:	bf00      	nop
 800146c:	f7ff ffe0 	bl	8001430 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	429a      	cmp	r2, r3
 800147a:	d8f7      	bhi.n	800146c <HAL_Delay+0x28>
  {
  }
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000018 	.word	0x20000018

0800148c <__NVIC_SetPriorityGrouping>:
>>>>>>> FFF
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001490:	4013      	ands	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800149c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a6:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	60d3      	str	r3, [r2, #12]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_GetPriorityGrouping>:
=======
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a8:	4013      	ands	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	60d3      	str	r3, [r2, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_GetPriorityGrouping>:
>>>>>>> FFF
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <__NVIC_GetPriorityGrouping+0x18>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	f003 0307 	and.w	r3, r3, #7
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_EnableIRQ>:
=======
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <__NVIC_GetPriorityGrouping+0x18>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	f003 0307 	and.w	r3, r3, #7
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_EnableIRQ>:
>>>>>>> FFF
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	db0b      	blt.n	8001502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	f003 021f 	and.w	r2, r3, #31
 80014f0:	4906      	ldr	r1, [pc, #24]	; (800150c <__NVIC_EnableIRQ+0x34>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	2001      	movs	r0, #1
 80014fa:	fa00 f202 	lsl.w	r2, r0, r2
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	e000e100 	.word	0xe000e100

08001510 <__NVIC_SetPriority>:
=======
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	db0b      	blt.n	800151a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	f003 021f 	and.w	r2, r3, #31
 8001508:	4906      	ldr	r1, [pc, #24]	; (8001524 <__NVIC_EnableIRQ+0x34>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	095b      	lsrs	r3, r3, #5
 8001510:	2001      	movs	r0, #1
 8001512:	fa00 f202 	lsl.w	r2, r0, r2
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	e000e100 	.word	0xe000e100

08001528 <__NVIC_SetPriority>:
>>>>>>> FFF
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db0a      	blt.n	800153a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	490c      	ldr	r1, [pc, #48]	; (800155c <__NVIC_SetPriority+0x4c>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	440b      	add	r3, r1
 8001534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	2b00      	cmp	r3, #0
 800153a:	db0a      	blt.n	8001552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	b2da      	uxtb	r2, r3
 8001540:	490c      	ldr	r1, [pc, #48]	; (8001574 <__NVIC_SetPriority+0x4c>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	0112      	lsls	r2, r2, #4
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	440b      	add	r3, r1
 800154c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> FFF
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8001538:	e00a      	b.n	8001550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4908      	ldr	r1, [pc, #32]	; (8001560 <__NVIC_SetPriority+0x50>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	3b04      	subs	r3, #4
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	440b      	add	r3, r1
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <NVIC_EncodePriority>:
=======
 8001550:	e00a      	b.n	8001568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4908      	ldr	r1, [pc, #32]	; (8001578 <__NVIC_SetPriority+0x50>)
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	3b04      	subs	r3, #4
 8001560:	0112      	lsls	r2, r2, #4
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	440b      	add	r3, r1
 8001566:	761a      	strb	r2, [r3, #24]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <NVIC_EncodePriority>:
>>>>>>> FFF
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	61fb      	str	r3, [r7, #28]
=======
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	61fb      	str	r3, [r7, #28]
>>>>>>> FFF
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f1c3 0307 	rsb	r3, r3, #7
 800157e:	2b04      	cmp	r3, #4
 8001580:	bf28      	it	cs
 8001582:	2304      	movcs	r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3304      	adds	r3, #4
 800158a:	2b06      	cmp	r3, #6
 800158c:	d902      	bls.n	8001594 <NVIC_EncodePriority+0x30>
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3b03      	subs	r3, #3
 8001592:	e000      	b.n	8001596 <NVIC_EncodePriority+0x32>
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	4313      	orrs	r3, r2
         );
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	; 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <SysTick_Config>:
=======
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f1c3 0307 	rsb	r3, r3, #7
 8001596:	2b04      	cmp	r3, #4
 8001598:	bf28      	it	cs
 800159a:	2304      	movcs	r3, #4
 800159c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3304      	adds	r3, #4
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d902      	bls.n	80015ac <NVIC_EncodePriority+0x30>
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3b03      	subs	r3, #3
 80015aa:	e000      	b.n	80015ae <NVIC_EncodePriority+0x32>
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43da      	mvns	r2, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43d9      	mvns	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	4313      	orrs	r3, r2
         );
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3724      	adds	r7, #36	; 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <SysTick_Config>:
>>>>>>> FFF
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d8:	d301      	bcc.n	80015de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015da:	2301      	movs	r3, #1
 80015dc:	e00f      	b.n	80015fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <SysTick_Config+0x40>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e6:	210f      	movs	r1, #15
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015ec:	f7ff ff90 	bl	8001510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <SysTick_Config+0x40>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f6:	4b04      	ldr	r3, [pc, #16]	; (8001608 <SysTick_Config+0x40>)
 80015f8:	2207      	movs	r2, #7
 80015fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	e000e010 	.word	0xe000e010

0800160c <HAL_NVIC_SetPriorityGrouping>:
=======
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f0:	d301      	bcc.n	80015f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00f      	b.n	8001616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <SysTick_Config+0x40>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fe:	210f      	movs	r1, #15
 8001600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001604:	f7ff ff90 	bl	8001528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <SysTick_Config+0x40>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160e:	4b04      	ldr	r3, [pc, #16]	; (8001620 <SysTick_Config+0x40>)
 8001610:	2207      	movs	r2, #7
 8001612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	e000e010 	.word	0xe000e010

08001624 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> FFF
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
=======
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff2d 	bl	8001474 <__NVIC_SetPriorityGrouping>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_NVIC_SetPriority>:
=======
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff2d 	bl	800148c <__NVIC_SetPriorityGrouping>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_SetPriority>:
>>>>>>> FFF
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8001622:	b580      	push	{r7, lr}
 8001624:	b086      	sub	sp, #24
 8001626:	af00      	add	r7, sp, #0
 8001628:	4603      	mov	r3, r0
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
=======
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
>>>>>>> FFF
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8001634:	f7ff ff42 	bl	80014bc <__NVIC_GetPriorityGrouping>
 8001638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	6978      	ldr	r0, [r7, #20]
 8001640:	f7ff ff90 	bl	8001564 <NVIC_EncodePriority>
 8001644:	4602      	mov	r2, r0
 8001646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff5f 	bl	8001510 <__NVIC_SetPriority>
}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_EnableIRQ>:
=======
 800164c:	f7ff ff42 	bl	80014d4 <__NVIC_GetPriorityGrouping>
 8001650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	6978      	ldr	r0, [r7, #20]
 8001658:	f7ff ff90 	bl	800157c <NVIC_EncodePriority>
 800165c:	4602      	mov	r2, r0
 800165e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff5f 	bl	8001528 <__NVIC_SetPriority>
}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_EnableIRQ>:
>>>>>>> FFF
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	71fb      	strb	r3, [r7, #7]
=======
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	71fb      	strb	r3, [r7, #7]
>>>>>>> FFF
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff35 	bl	80014d8 <__NVIC_EnableIRQ>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_SYSTICK_Config>:
=======
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff35 	bl	80014f0 <__NVIC_EnableIRQ>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_SYSTICK_Config>:
>>>>>>> FFF
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ffa2 	bl	80015c8 <SysTick_Config>
 8001684:	4603      	mov	r3, r0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_DMA_Abort>:
=======
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ffa2 	bl	80015e0 <SysTick_Config>
 800169c:	4603      	mov	r3, r0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_DMA_Abort>:
>>>>>>> FFF
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800168e:	b480      	push	{r7}
 8001690:	b085      	sub	sp, #20
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d008      	beq.n	80016b6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2204      	movs	r2, #4
 80016a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e020      	b.n	80016f8 <HAL_DMA_Abort+0x6a>
=======
 80016a6:	b480      	push	{r7}
 80016a8:	b085      	sub	sp, #20
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d008      	beq.n	80016ce <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2204      	movs	r2, #4
 80016c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e020      	b.n	8001710 <HAL_DMA_Abort+0x6a>
>>>>>>> FFF
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 020e 	bic.w	r2, r2, #14
 80016c4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0201 	bic.w	r2, r2, #1
 80016d4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016de:	2101      	movs	r1, #1
 80016e0:	fa01 f202 	lsl.w	r2, r1, r2
 80016e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
	...

08001704 <HAL_DMA_Abort_IT>:
=======
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 020e 	bic.w	r2, r2, #14
 80016dc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0201 	bic.w	r2, r2, #1
 80016ec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f6:	2101      	movs	r1, #1
 80016f8:	fa01 f202 	lsl.w	r2, r1, r2
 80016fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800170e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
	...

0800171c <HAL_DMA_Abort_IT>:
>>>>>>> FFF
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
<<<<<<< HEAD
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001716:	2b02      	cmp	r3, #2
 8001718:	d005      	beq.n	8001726 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2204      	movs	r2, #4
 800171e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	e051      	b.n	80017ca <HAL_DMA_Abort_IT+0xc6>
=======
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800172e:	2b02      	cmp	r3, #2
 8001730:	d005      	beq.n	800173e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2204      	movs	r2, #4
 8001736:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
 800173c:	e051      	b.n	80017e2 <HAL_DMA_Abort_IT+0xc6>
>>>>>>> FFF
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 020e 	bic.w	r2, r2, #14
 8001734:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0201 	bic.w	r2, r2, #1
 8001744:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a22      	ldr	r2, [pc, #136]	; (80017d4 <HAL_DMA_Abort_IT+0xd0>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d029      	beq.n	80017a4 <HAL_DMA_Abort_IT+0xa0>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a20      	ldr	r2, [pc, #128]	; (80017d8 <HAL_DMA_Abort_IT+0xd4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d022      	beq.n	80017a0 <HAL_DMA_Abort_IT+0x9c>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a1f      	ldr	r2, [pc, #124]	; (80017dc <HAL_DMA_Abort_IT+0xd8>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d01a      	beq.n	800179a <HAL_DMA_Abort_IT+0x96>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a1d      	ldr	r2, [pc, #116]	; (80017e0 <HAL_DMA_Abort_IT+0xdc>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d012      	beq.n	8001794 <HAL_DMA_Abort_IT+0x90>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a1c      	ldr	r2, [pc, #112]	; (80017e4 <HAL_DMA_Abort_IT+0xe0>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d00a      	beq.n	800178e <HAL_DMA_Abort_IT+0x8a>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1a      	ldr	r2, [pc, #104]	; (80017e8 <HAL_DMA_Abort_IT+0xe4>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d102      	bne.n	8001788 <HAL_DMA_Abort_IT+0x84>
 8001782:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001786:	e00e      	b.n	80017a6 <HAL_DMA_Abort_IT+0xa2>
 8001788:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800178c:	e00b      	b.n	80017a6 <HAL_DMA_Abort_IT+0xa2>
 800178e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001792:	e008      	b.n	80017a6 <HAL_DMA_Abort_IT+0xa2>
 8001794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001798:	e005      	b.n	80017a6 <HAL_DMA_Abort_IT+0xa2>
 800179a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800179e:	e002      	b.n	80017a6 <HAL_DMA_Abort_IT+0xa2>
 80017a0:	2310      	movs	r3, #16
 80017a2:	e000      	b.n	80017a6 <HAL_DMA_Abort_IT+0xa2>
 80017a4:	2301      	movs	r3, #1
 80017a6:	4a11      	ldr	r2, [pc, #68]	; (80017ec <HAL_DMA_Abort_IT+0xe8>)
 80017a8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	4798      	blx	r3
    } 
  }
  return status;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40020008 	.word	0x40020008
 80017d8:	4002001c 	.word	0x4002001c
 80017dc:	40020030 	.word	0x40020030
 80017e0:	40020044 	.word	0x40020044
 80017e4:	40020058 	.word	0x40020058
 80017e8:	4002006c 	.word	0x4002006c
 80017ec:	40020000 	.word	0x40020000

080017f0 <HAL_GPIO_Init>:
=======
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 020e 	bic.w	r2, r2, #14
 800174c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0201 	bic.w	r2, r2, #1
 800175c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a22      	ldr	r2, [pc, #136]	; (80017ec <HAL_DMA_Abort_IT+0xd0>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d029      	beq.n	80017bc <HAL_DMA_Abort_IT+0xa0>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a20      	ldr	r2, [pc, #128]	; (80017f0 <HAL_DMA_Abort_IT+0xd4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d022      	beq.n	80017b8 <HAL_DMA_Abort_IT+0x9c>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a1f      	ldr	r2, [pc, #124]	; (80017f4 <HAL_DMA_Abort_IT+0xd8>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d01a      	beq.n	80017b2 <HAL_DMA_Abort_IT+0x96>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1d      	ldr	r2, [pc, #116]	; (80017f8 <HAL_DMA_Abort_IT+0xdc>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d012      	beq.n	80017ac <HAL_DMA_Abort_IT+0x90>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <HAL_DMA_Abort_IT+0xe0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d00a      	beq.n	80017a6 <HAL_DMA_Abort_IT+0x8a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <HAL_DMA_Abort_IT+0xe4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d102      	bne.n	80017a0 <HAL_DMA_Abort_IT+0x84>
 800179a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800179e:	e00e      	b.n	80017be <HAL_DMA_Abort_IT+0xa2>
 80017a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017a4:	e00b      	b.n	80017be <HAL_DMA_Abort_IT+0xa2>
 80017a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017aa:	e008      	b.n	80017be <HAL_DMA_Abort_IT+0xa2>
 80017ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b0:	e005      	b.n	80017be <HAL_DMA_Abort_IT+0xa2>
 80017b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b6:	e002      	b.n	80017be <HAL_DMA_Abort_IT+0xa2>
 80017b8:	2310      	movs	r3, #16
 80017ba:	e000      	b.n	80017be <HAL_DMA_Abort_IT+0xa2>
 80017bc:	2301      	movs	r3, #1
 80017be:	4a11      	ldr	r2, [pc, #68]	; (8001804 <HAL_DMA_Abort_IT+0xe8>)
 80017c0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	4798      	blx	r3
    } 
  }
  return status;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40020008 	.word	0x40020008
 80017f0:	4002001c 	.word	0x4002001c
 80017f4:	40020030 	.word	0x40020030
 80017f8:	40020044 	.word	0x40020044
 80017fc:	40020058 	.word	0x40020058
 8001800:	4002006c 	.word	0x4002006c
 8001804:	40020000 	.word	0x40020000

08001808 <HAL_GPIO_Init>:
>>>>>>> FFF
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 80017f0:	b480      	push	{r7}
 80017f2:	b08b      	sub	sp, #44	; 0x2c
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8001808:	b480      	push	{r7}
 800180a:	b08b      	sub	sp, #44	; 0x2c
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> FFF
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
<<<<<<< HEAD
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
=======
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
>>>>>>> FFF
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 8001802:	e169      	b.n	8001ad8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001804:	2201      	movs	r2, #1
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	429a      	cmp	r2, r3
 800181e:	f040 8158 	bne.w	8001ad2 <HAL_GPIO_Init+0x2e2>
=======
 800181a:	e169      	b.n	8001af0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800181c:	2201      	movs	r2, #1
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	69fa      	ldr	r2, [r7, #28]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	429a      	cmp	r2, r3
 8001836:	f040 8158 	bne.w	8001aea <HAL_GPIO_Init+0x2e2>
>>>>>>> FFF
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
<<<<<<< HEAD
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4a9a      	ldr	r2, [pc, #616]	; (8001a90 <HAL_GPIO_Init+0x2a0>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d05e      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 800182c:	4a98      	ldr	r2, [pc, #608]	; (8001a90 <HAL_GPIO_Init+0x2a0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d875      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 8001832:	4a98      	ldr	r2, [pc, #608]	; (8001a94 <HAL_GPIO_Init+0x2a4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d058      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 8001838:	4a96      	ldr	r2, [pc, #600]	; (8001a94 <HAL_GPIO_Init+0x2a4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d86f      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 800183e:	4a96      	ldr	r2, [pc, #600]	; (8001a98 <HAL_GPIO_Init+0x2a8>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d052      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 8001844:	4a94      	ldr	r2, [pc, #592]	; (8001a98 <HAL_GPIO_Init+0x2a8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d869      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 800184a:	4a94      	ldr	r2, [pc, #592]	; (8001a9c <HAL_GPIO_Init+0x2ac>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d04c      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 8001850:	4a92      	ldr	r2, [pc, #584]	; (8001a9c <HAL_GPIO_Init+0x2ac>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d863      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 8001856:	4a92      	ldr	r2, [pc, #584]	; (8001aa0 <HAL_GPIO_Init+0x2b0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d046      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
 800185c:	4a90      	ldr	r2, [pc, #576]	; (8001aa0 <HAL_GPIO_Init+0x2b0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d85d      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 8001862:	2b12      	cmp	r3, #18
 8001864:	d82a      	bhi.n	80018bc <HAL_GPIO_Init+0xcc>
 8001866:	2b12      	cmp	r3, #18
 8001868:	d859      	bhi.n	800191e <HAL_GPIO_Init+0x12e>
 800186a:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <HAL_GPIO_Init+0x80>)
 800186c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001870:	080018eb 	.word	0x080018eb
 8001874:	080018c5 	.word	0x080018c5
 8001878:	080018d7 	.word	0x080018d7
 800187c:	08001919 	.word	0x08001919
 8001880:	0800191f 	.word	0x0800191f
 8001884:	0800191f 	.word	0x0800191f
 8001888:	0800191f 	.word	0x0800191f
 800188c:	0800191f 	.word	0x0800191f
 8001890:	0800191f 	.word	0x0800191f
 8001894:	0800191f 	.word	0x0800191f
 8001898:	0800191f 	.word	0x0800191f
 800189c:	0800191f 	.word	0x0800191f
 80018a0:	0800191f 	.word	0x0800191f
 80018a4:	0800191f 	.word	0x0800191f
 80018a8:	0800191f 	.word	0x0800191f
 80018ac:	0800191f 	.word	0x0800191f
 80018b0:	0800191f 	.word	0x0800191f
 80018b4:	080018cd 	.word	0x080018cd
 80018b8:	080018e1 	.word	0x080018e1
 80018bc:	4a79      	ldr	r2, [pc, #484]	; (8001aa4 <HAL_GPIO_Init+0x2b4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d013      	beq.n	80018ea <HAL_GPIO_Init+0xfa>
=======
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4a9a      	ldr	r2, [pc, #616]	; (8001aa8 <HAL_GPIO_Init+0x2a0>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d05e      	beq.n	8001902 <HAL_GPIO_Init+0xfa>
 8001844:	4a98      	ldr	r2, [pc, #608]	; (8001aa8 <HAL_GPIO_Init+0x2a0>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d875      	bhi.n	8001936 <HAL_GPIO_Init+0x12e>
 800184a:	4a98      	ldr	r2, [pc, #608]	; (8001aac <HAL_GPIO_Init+0x2a4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d058      	beq.n	8001902 <HAL_GPIO_Init+0xfa>
 8001850:	4a96      	ldr	r2, [pc, #600]	; (8001aac <HAL_GPIO_Init+0x2a4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d86f      	bhi.n	8001936 <HAL_GPIO_Init+0x12e>
 8001856:	4a96      	ldr	r2, [pc, #600]	; (8001ab0 <HAL_GPIO_Init+0x2a8>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d052      	beq.n	8001902 <HAL_GPIO_Init+0xfa>
 800185c:	4a94      	ldr	r2, [pc, #592]	; (8001ab0 <HAL_GPIO_Init+0x2a8>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d869      	bhi.n	8001936 <HAL_GPIO_Init+0x12e>
 8001862:	4a94      	ldr	r2, [pc, #592]	; (8001ab4 <HAL_GPIO_Init+0x2ac>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d04c      	beq.n	8001902 <HAL_GPIO_Init+0xfa>
 8001868:	4a92      	ldr	r2, [pc, #584]	; (8001ab4 <HAL_GPIO_Init+0x2ac>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d863      	bhi.n	8001936 <HAL_GPIO_Init+0x12e>
 800186e:	4a92      	ldr	r2, [pc, #584]	; (8001ab8 <HAL_GPIO_Init+0x2b0>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d046      	beq.n	8001902 <HAL_GPIO_Init+0xfa>
 8001874:	4a90      	ldr	r2, [pc, #576]	; (8001ab8 <HAL_GPIO_Init+0x2b0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d85d      	bhi.n	8001936 <HAL_GPIO_Init+0x12e>
 800187a:	2b12      	cmp	r3, #18
 800187c:	d82a      	bhi.n	80018d4 <HAL_GPIO_Init+0xcc>
 800187e:	2b12      	cmp	r3, #18
 8001880:	d859      	bhi.n	8001936 <HAL_GPIO_Init+0x12e>
 8001882:	a201      	add	r2, pc, #4	; (adr r2, 8001888 <HAL_GPIO_Init+0x80>)
 8001884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001888:	08001903 	.word	0x08001903
 800188c:	080018dd 	.word	0x080018dd
 8001890:	080018ef 	.word	0x080018ef
 8001894:	08001931 	.word	0x08001931
 8001898:	08001937 	.word	0x08001937
 800189c:	08001937 	.word	0x08001937
 80018a0:	08001937 	.word	0x08001937
 80018a4:	08001937 	.word	0x08001937
 80018a8:	08001937 	.word	0x08001937
 80018ac:	08001937 	.word	0x08001937
 80018b0:	08001937 	.word	0x08001937
 80018b4:	08001937 	.word	0x08001937
 80018b8:	08001937 	.word	0x08001937
 80018bc:	08001937 	.word	0x08001937
 80018c0:	08001937 	.word	0x08001937
 80018c4:	08001937 	.word	0x08001937
 80018c8:	08001937 	.word	0x08001937
 80018cc:	080018e5 	.word	0x080018e5
 80018d0:	080018f9 	.word	0x080018f9
 80018d4:	4a79      	ldr	r2, [pc, #484]	; (8001abc <HAL_GPIO_Init+0x2b4>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d013      	beq.n	8001902 <HAL_GPIO_Init+0xfa>
>>>>>>> FFF
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
<<<<<<< HEAD
 80018c2:	e02c      	b.n	800191e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	623b      	str	r3, [r7, #32]
          break;
 80018ca:	e029      	b.n	8001920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	3304      	adds	r3, #4
 80018d2:	623b      	str	r3, [r7, #32]
          break;
 80018d4:	e024      	b.n	8001920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	3308      	adds	r3, #8
 80018dc:	623b      	str	r3, [r7, #32]
          break;
 80018de:	e01f      	b.n	8001920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	330c      	adds	r3, #12
 80018e6:	623b      	str	r3, [r7, #32]
          break;
 80018e8:	e01a      	b.n	8001920 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d102      	bne.n	80018f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018f2:	2304      	movs	r3, #4
 80018f4:	623b      	str	r3, [r7, #32]
          break;
 80018f6:	e013      	b.n	8001920 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d105      	bne.n	800190c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001900:	2308      	movs	r3, #8
 8001902:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	611a      	str	r2, [r3, #16]
          break;
 800190a:	e009      	b.n	8001920 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800190c:	2308      	movs	r3, #8
 800190e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	615a      	str	r2, [r3, #20]
          break;
 8001916:	e003      	b.n	8001920 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001918:	2300      	movs	r3, #0
 800191a:	623b      	str	r3, [r7, #32]
          break;
 800191c:	e000      	b.n	8001920 <HAL_GPIO_Init+0x130>
          break;
 800191e:	bf00      	nop
=======
 80018da:	e02c      	b.n	8001936 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	623b      	str	r3, [r7, #32]
          break;
 80018e2:	e029      	b.n	8001938 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	3304      	adds	r3, #4
 80018ea:	623b      	str	r3, [r7, #32]
          break;
 80018ec:	e024      	b.n	8001938 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	3308      	adds	r3, #8
 80018f4:	623b      	str	r3, [r7, #32]
          break;
 80018f6:	e01f      	b.n	8001938 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	330c      	adds	r3, #12
 80018fe:	623b      	str	r3, [r7, #32]
          break;
 8001900:	e01a      	b.n	8001938 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d102      	bne.n	8001910 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800190a:	2304      	movs	r3, #4
 800190c:	623b      	str	r3, [r7, #32]
          break;
 800190e:	e013      	b.n	8001938 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d105      	bne.n	8001924 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001918:	2308      	movs	r3, #8
 800191a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	611a      	str	r2, [r3, #16]
          break;
 8001922:	e009      	b.n	8001938 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001924:	2308      	movs	r3, #8
 8001926:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	615a      	str	r2, [r3, #20]
          break;
 800192e:	e003      	b.n	8001938 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
          break;
 8001934:	e000      	b.n	8001938 <HAL_GPIO_Init+0x130>
          break;
 8001936:	bf00      	nop
>>>>>>> FFF
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
<<<<<<< HEAD
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	2bff      	cmp	r3, #255	; 0xff
 8001924:	d801      	bhi.n	800192a <HAL_GPIO_Init+0x13a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	e001      	b.n	800192e <HAL_GPIO_Init+0x13e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3304      	adds	r3, #4
 800192e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	2bff      	cmp	r3, #255	; 0xff
 8001934:	d802      	bhi.n	800193c <HAL_GPIO_Init+0x14c>
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	e002      	b.n	8001942 <HAL_GPIO_Init+0x152>
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	3b08      	subs	r3, #8
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	210f      	movs	r1, #15
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	401a      	ands	r2, r3
 8001954:	6a39      	ldr	r1, [r7, #32]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	fa01 f303 	lsl.w	r3, r1, r3
 800195c:	431a      	orrs	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	601a      	str	r2, [r3, #0]
=======
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	2bff      	cmp	r3, #255	; 0xff
 800193c:	d801      	bhi.n	8001942 <HAL_GPIO_Init+0x13a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	e001      	b.n	8001946 <HAL_GPIO_Init+0x13e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3304      	adds	r3, #4
 8001946:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2bff      	cmp	r3, #255	; 0xff
 800194c:	d802      	bhi.n	8001954 <HAL_GPIO_Init+0x14c>
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	e002      	b.n	800195a <HAL_GPIO_Init+0x152>
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	3b08      	subs	r3, #8
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	210f      	movs	r1, #15
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	fa01 f303 	lsl.w	r3, r1, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	401a      	ands	r2, r3
 800196c:	6a39      	ldr	r1, [r7, #32]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	431a      	orrs	r2, r3
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	601a      	str	r2, [r3, #0]
>>>>>>> FFF

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 80b1 	beq.w	8001ad2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001970:	4b4d      	ldr	r3, [pc, #308]	; (8001aa8 <HAL_GPIO_Init+0x2b8>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4a4c      	ldr	r2, [pc, #304]	; (8001aa8 <HAL_GPIO_Init+0x2b8>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6193      	str	r3, [r2, #24]
 800197c:	4b4a      	ldr	r3, [pc, #296]	; (8001aa8 <HAL_GPIO_Init+0x2b8>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001988:	4a48      	ldr	r2, [pc, #288]	; (8001aac <HAL_GPIO_Init+0x2bc>)
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	089b      	lsrs	r3, r3, #2
 800198e:	3302      	adds	r3, #2
 8001990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001994:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	220f      	movs	r2, #15
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	4013      	ands	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a40      	ldr	r2, [pc, #256]	; (8001ab0 <HAL_GPIO_Init+0x2c0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d013      	beq.n	80019dc <HAL_GPIO_Init+0x1ec>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a3f      	ldr	r2, [pc, #252]	; (8001ab4 <HAL_GPIO_Init+0x2c4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d00d      	beq.n	80019d8 <HAL_GPIO_Init+0x1e8>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a3e      	ldr	r2, [pc, #248]	; (8001ab8 <HAL_GPIO_Init+0x2c8>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d007      	beq.n	80019d4 <HAL_GPIO_Init+0x1e4>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a3d      	ldr	r2, [pc, #244]	; (8001abc <HAL_GPIO_Init+0x2cc>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d101      	bne.n	80019d0 <HAL_GPIO_Init+0x1e0>
 80019cc:	2303      	movs	r3, #3
 80019ce:	e006      	b.n	80019de <HAL_GPIO_Init+0x1ee>
 80019d0:	2304      	movs	r3, #4
 80019d2:	e004      	b.n	80019de <HAL_GPIO_Init+0x1ee>
 80019d4:	2302      	movs	r3, #2
 80019d6:	e002      	b.n	80019de <HAL_GPIO_Init+0x1ee>
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <HAL_GPIO_Init+0x1ee>
 80019dc:	2300      	movs	r3, #0
 80019de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e0:	f002 0203 	and.w	r2, r2, #3
 80019e4:	0092      	lsls	r2, r2, #2
 80019e6:	4093      	lsls	r3, r2
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019ee:	492f      	ldr	r1, [pc, #188]	; (8001aac <HAL_GPIO_Init+0x2bc>)
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	089b      	lsrs	r3, r3, #2
 80019f4:	3302      	adds	r3, #2
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	f000 80b1 	beq.w	8001aea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001988:	4b4d      	ldr	r3, [pc, #308]	; (8001ac0 <HAL_GPIO_Init+0x2b8>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	4a4c      	ldr	r2, [pc, #304]	; (8001ac0 <HAL_GPIO_Init+0x2b8>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6193      	str	r3, [r2, #24]
 8001994:	4b4a      	ldr	r3, [pc, #296]	; (8001ac0 <HAL_GPIO_Init+0x2b8>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019a0:	4a48      	ldr	r2, [pc, #288]	; (8001ac4 <HAL_GPIO_Init+0x2bc>)
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	3302      	adds	r3, #2
 80019a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	220f      	movs	r2, #15
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4013      	ands	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a40      	ldr	r2, [pc, #256]	; (8001ac8 <HAL_GPIO_Init+0x2c0>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d013      	beq.n	80019f4 <HAL_GPIO_Init+0x1ec>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a3f      	ldr	r2, [pc, #252]	; (8001acc <HAL_GPIO_Init+0x2c4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d00d      	beq.n	80019f0 <HAL_GPIO_Init+0x1e8>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a3e      	ldr	r2, [pc, #248]	; (8001ad0 <HAL_GPIO_Init+0x2c8>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d007      	beq.n	80019ec <HAL_GPIO_Init+0x1e4>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a3d      	ldr	r2, [pc, #244]	; (8001ad4 <HAL_GPIO_Init+0x2cc>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d101      	bne.n	80019e8 <HAL_GPIO_Init+0x1e0>
 80019e4:	2303      	movs	r3, #3
 80019e6:	e006      	b.n	80019f6 <HAL_GPIO_Init+0x1ee>
 80019e8:	2304      	movs	r3, #4
 80019ea:	e004      	b.n	80019f6 <HAL_GPIO_Init+0x1ee>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e002      	b.n	80019f6 <HAL_GPIO_Init+0x1ee>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <HAL_GPIO_Init+0x1ee>
 80019f4:	2300      	movs	r3, #0
 80019f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f8:	f002 0203 	and.w	r2, r2, #3
 80019fc:	0092      	lsls	r2, r2, #2
 80019fe:	4093      	lsls	r3, r2
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a06:	492f      	ldr	r1, [pc, #188]	; (8001ac4 <HAL_GPIO_Init+0x2bc>)
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> FFF


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
<<<<<<< HEAD
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d006      	beq.n	8001a16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a08:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	492c      	ldr	r1, [pc, #176]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]
 8001a14:	e006      	b.n	8001a24 <HAL_GPIO_Init+0x234>
=======
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d006      	beq.n	8001a2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a20:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	492c      	ldr	r1, [pc, #176]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]
 8001a2c:	e006      	b.n	8001a3c <HAL_GPIO_Init+0x234>
>>>>>>> FFF
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
<<<<<<< HEAD
 8001a16:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	4928      	ldr	r1, [pc, #160]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	600b      	str	r3, [r1, #0]
=======
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	4928      	ldr	r1, [pc, #160]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	600b      	str	r3, [r1, #0]
>>>>>>> FFF
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
<<<<<<< HEAD
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d006      	beq.n	8001a3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a30:	4b23      	ldr	r3, [pc, #140]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	4922      	ldr	r1, [pc, #136]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
 8001a3c:	e006      	b.n	8001a4c <HAL_GPIO_Init+0x25c>
=======
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d006      	beq.n	8001a56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a48:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	4922      	ldr	r1, [pc, #136]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]
 8001a54:	e006      	b.n	8001a64 <HAL_GPIO_Init+0x25c>
>>>>>>> FFF
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
<<<<<<< HEAD
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	491e      	ldr	r1, [pc, #120]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
=======
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	491e      	ldr	r1, [pc, #120]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]
>>>>>>> FFF
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
<<<<<<< HEAD
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d006      	beq.n	8001a66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a58:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	4918      	ldr	r1, [pc, #96]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	608b      	str	r3, [r1, #8]
 8001a64:	e006      	b.n	8001a74 <HAL_GPIO_Init+0x284>
=======
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d006      	beq.n	8001a7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a70:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	4918      	ldr	r1, [pc, #96]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	608b      	str	r3, [r1, #8]
 8001a7c:	e006      	b.n	8001a8c <HAL_GPIO_Init+0x284>
>>>>>>> FFF
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
<<<<<<< HEAD
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	4914      	ldr	r1, [pc, #80]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	608b      	str	r3, [r1, #8]
=======
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	4914      	ldr	r1, [pc, #80]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	608b      	str	r3, [r1, #8]
>>>>>>> FFF
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
<<<<<<< HEAD
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d021      	beq.n	8001ac4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	490e      	ldr	r1, [pc, #56]	; (8001ac0 <HAL_GPIO_Init+0x2d0>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60cb      	str	r3, [r1, #12]
 8001a8c:	e021      	b.n	8001ad2 <HAL_GPIO_Init+0x2e2>
 8001a8e:	bf00      	nop
 8001a90:	10320000 	.word	0x10320000
 8001a94:	10310000 	.word	0x10310000
 8001a98:	10220000 	.word	0x10220000
 8001a9c:	10210000 	.word	0x10210000
 8001aa0:	10120000 	.word	0x10120000
 8001aa4:	10110000 	.word	0x10110000
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40010000 	.word	0x40010000
 8001ab0:	40010800 	.word	0x40010800
 8001ab4:	40010c00 	.word	0x40010c00
 8001ab8:	40011000 	.word	0x40011000
 8001abc:	40011400 	.word	0x40011400
 8001ac0:	40010400 	.word	0x40010400
=======
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d021      	beq.n	8001adc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	490e      	ldr	r1, [pc, #56]	; (8001ad8 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	60cb      	str	r3, [r1, #12]
 8001aa4:	e021      	b.n	8001aea <HAL_GPIO_Init+0x2e2>
 8001aa6:	bf00      	nop
 8001aa8:	10320000 	.word	0x10320000
 8001aac:	10310000 	.word	0x10310000
 8001ab0:	10220000 	.word	0x10220000
 8001ab4:	10210000 	.word	0x10210000
 8001ab8:	10120000 	.word	0x10120000
 8001abc:	10110000 	.word	0x10110000
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40010000 	.word	0x40010000
 8001ac8:	40010800 	.word	0x40010800
 8001acc:	40010c00 	.word	0x40010c00
 8001ad0:	40011000 	.word	0x40011000
 8001ad4:	40011400 	.word	0x40011400
 8001ad8:	40010400 	.word	0x40010400
>>>>>>> FFF
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
<<<<<<< HEAD
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_GPIO_Init+0x304>)
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	4909      	ldr	r1, [pc, #36]	; (8001af4 <HAL_GPIO_Init+0x304>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	60cb      	str	r3, [r1, #12]
=======
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_GPIO_Init+0x304>)
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	4909      	ldr	r1, [pc, #36]	; (8001b0c <HAL_GPIO_Init+0x304>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	60cb      	str	r3, [r1, #12]
>>>>>>> FFF
        }
      }
    }

	position++;
<<<<<<< HEAD
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f47f ae8e 	bne.w	8001804 <HAL_GPIO_Init+0x14>
  }
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	372c      	adds	r7, #44	; 0x2c
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	40010400 	.word	0x40010400

08001af8 <HAL_GPIO_ReadPin>:
=======
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	3301      	adds	r3, #1
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	fa22 f303 	lsr.w	r3, r2, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f47f ae8e 	bne.w	800181c <HAL_GPIO_Init+0x14>
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	372c      	adds	r7, #44	; 0x2c
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	40010400 	.word	0x40010400

08001b10 <HAL_GPIO_ReadPin>:
>>>>>>> FFF
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	807b      	strh	r3, [r7, #2]
=======
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
>>>>>>> FFF
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< HEAD
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	887b      	ldrh	r3, [r7, #2]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d002      	beq.n	8001b16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b10:	2301      	movs	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
 8001b14:	e001      	b.n	8001b1a <HAL_GPIO_ReadPin+0x22>
=======
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	887b      	ldrh	r3, [r7, #2]
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d002      	beq.n	8001b2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	73fb      	strb	r3, [r7, #15]
 8001b2c:	e001      	b.n	8001b32 <HAL_GPIO_ReadPin+0x22>
>>>>>>> FFF
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< HEAD
 8001b16:	2300      	movs	r3, #0
 8001b18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <HAL_GPIO_WritePin>:
=======
 8001b2e:	2300      	movs	r3, #0
 8001b30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <HAL_GPIO_WritePin>:
>>>>>>> FFF
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	807b      	strh	r3, [r7, #2]
 8001b32:	4613      	mov	r3, r2
 8001b34:	707b      	strb	r3, [r7, #1]
=======
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	460b      	mov	r3, r1
 8001b48:	807b      	strh	r3, [r7, #2]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	707b      	strb	r3, [r7, #1]
>>>>>>> FFF
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8001b36:	787b      	ldrb	r3, [r7, #1]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3c:	887a      	ldrh	r2, [r7, #2]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	611a      	str	r2, [r3, #16]
=======
 8001b4e:	787b      	ldrb	r3, [r7, #1]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b54:	887a      	ldrh	r2, [r7, #2]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	611a      	str	r2, [r3, #16]
>>>>>>> FFF
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
<<<<<<< HEAD
 8001b42:	e003      	b.n	8001b4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b44:	887b      	ldrh	r3, [r7, #2]
 8001b46:	041a      	lsls	r2, r3, #16
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	611a      	str	r2, [r3, #16]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_I2C_Init>:
=======
 8001b5a:	e003      	b.n	8001b64 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b5c:	887b      	ldrh	r3, [r7, #2]
 8001b5e:	041a      	lsls	r2, r3, #16
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	611a      	str	r2, [r3, #16]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
	...

08001b70 <HAL_I2C_Init>:
>>>>>>> FFF
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
=======
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
<<<<<<< HEAD
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e12b      	b.n	8001dc2 <HAL_I2C_Init+0x26a>
=======
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e12b      	b.n	8001dda <HAL_I2C_Init+0x26a>
>>>>>>> FFF
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< HEAD
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d106      	bne.n	8001b84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d106      	bne.n	8001b9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> FFF

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff fa82 	bl	8001088 <HAL_I2C_MspInit>
=======
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fa82 	bl	80010a0 <HAL_I2C_MspInit>
>>>>>>> FFF
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2224      	movs	r2, #36	; 0x24
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0201 	bic.w	r2, r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001baa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bbc:	f000 fffa 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 8001bc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4a81      	ldr	r2, [pc, #516]	; (8001dcc <HAL_I2C_Init+0x274>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d807      	bhi.n	8001bdc <HAL_I2C_Init+0x84>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4a80      	ldr	r2, [pc, #512]	; (8001dd0 <HAL_I2C_Init+0x278>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	bf94      	ite	ls
 8001bd4:	2301      	movls	r3, #1
 8001bd6:	2300      	movhi	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	e006      	b.n	8001bea <HAL_I2C_Init+0x92>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4a7d      	ldr	r2, [pc, #500]	; (8001dd4 <HAL_I2C_Init+0x27c>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	bf94      	ite	ls
 8001be4:	2301      	movls	r3, #1
 8001be6:	2300      	movhi	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e0e7      	b.n	8001dc2 <HAL_I2C_Init+0x26a>
=======
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2224      	movs	r2, #36	; 0x24
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0201 	bic.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bd4:	f000 fffa 	bl	8002bcc <HAL_RCC_GetPCLK1Freq>
 8001bd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4a81      	ldr	r2, [pc, #516]	; (8001de4 <HAL_I2C_Init+0x274>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d807      	bhi.n	8001bf4 <HAL_I2C_Init+0x84>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4a80      	ldr	r2, [pc, #512]	; (8001de8 <HAL_I2C_Init+0x278>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	bf94      	ite	ls
 8001bec:	2301      	movls	r3, #1
 8001bee:	2300      	movhi	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	e006      	b.n	8001c02 <HAL_I2C_Init+0x92>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4a7d      	ldr	r2, [pc, #500]	; (8001dec <HAL_I2C_Init+0x27c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	bf94      	ite	ls
 8001bfc:	2301      	movls	r3, #1
 8001bfe:	2300      	movhi	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e0e7      	b.n	8001dda <HAL_I2C_Init+0x26a>
>>>>>>> FFF
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
<<<<<<< HEAD
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4a78      	ldr	r2, [pc, #480]	; (8001dd8 <HAL_I2C_Init+0x280>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	0c9b      	lsrs	r3, r3, #18
 8001bfc:	60bb      	str	r3, [r7, #8]
=======
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4a78      	ldr	r2, [pc, #480]	; (8001df0 <HAL_I2C_Init+0x280>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	0c9b      	lsrs	r3, r3, #18
 8001c14:	60bb      	str	r3, [r7, #8]
>>>>>>> FFF

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
<<<<<<< HEAD
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	605a      	str	r2, [r3, #4]
=======
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	605a      	str	r2, [r3, #4]
>>>>>>> FFF

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
<<<<<<< HEAD
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	4a6a      	ldr	r2, [pc, #424]	; (8001dcc <HAL_I2C_Init+0x274>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d802      	bhi.n	8001c2c <HAL_I2C_Init+0xd4>
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	e009      	b.n	8001c40 <HAL_I2C_Init+0xe8>
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c32:	fb02 f303 	mul.w	r3, r2, r3
 8001c36:	4a69      	ldr	r2, [pc, #420]	; (8001ddc <HAL_I2C_Init+0x284>)
 8001c38:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3c:	099b      	lsrs	r3, r3, #6
 8001c3e:	3301      	adds	r3, #1
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	430b      	orrs	r3, r1
 8001c46:	6213      	str	r3, [r2, #32]
=======
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	4a6a      	ldr	r2, [pc, #424]	; (8001de4 <HAL_I2C_Init+0x274>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d802      	bhi.n	8001c44 <HAL_I2C_Init+0xd4>
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3301      	adds	r3, #1
 8001c42:	e009      	b.n	8001c58 <HAL_I2C_Init+0xe8>
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c4a:	fb02 f303 	mul.w	r3, r2, r3
 8001c4e:	4a69      	ldr	r2, [pc, #420]	; (8001df4 <HAL_I2C_Init+0x284>)
 8001c50:	fba2 2303 	umull	r2, r3, r2, r3
 8001c54:	099b      	lsrs	r3, r3, #6
 8001c56:	3301      	adds	r3, #1
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	6213      	str	r3, [r2, #32]
>>>>>>> FFF

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
<<<<<<< HEAD
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	495c      	ldr	r1, [pc, #368]	; (8001dcc <HAL_I2C_Init+0x274>)
 8001c5c:	428b      	cmp	r3, r1
 8001c5e:	d819      	bhi.n	8001c94 <HAL_I2C_Init+0x13c>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1e59      	subs	r1, r3, #1
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c6e:	1c59      	adds	r1, r3, #1
 8001c70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c74:	400b      	ands	r3, r1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00a      	beq.n	8001c90 <HAL_I2C_Init+0x138>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	1e59      	subs	r1, r3, #1
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c88:	3301      	adds	r3, #1
 8001c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c8e:	e051      	b.n	8001d34 <HAL_I2C_Init+0x1dc>
 8001c90:	2304      	movs	r3, #4
 8001c92:	e04f      	b.n	8001d34 <HAL_I2C_Init+0x1dc>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d111      	bne.n	8001cc0 <HAL_I2C_Init+0x168>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	1e58      	subs	r0, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6859      	ldr	r1, [r3, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	440b      	add	r3, r1
 8001caa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf0c      	ite	eq
 8001cb8:	2301      	moveq	r3, #1
 8001cba:	2300      	movne	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	e012      	b.n	8001ce6 <HAL_I2C_Init+0x18e>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	1e58      	subs	r0, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6859      	ldr	r1, [r3, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	0099      	lsls	r1, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	bf0c      	ite	eq
 8001ce0:	2301      	moveq	r3, #1
 8001ce2:	2300      	movne	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_I2C_Init+0x196>
 8001cea:	2301      	movs	r3, #1
 8001cec:	e022      	b.n	8001d34 <HAL_I2C_Init+0x1dc>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10e      	bne.n	8001d14 <HAL_I2C_Init+0x1bc>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1e58      	subs	r0, r3, #1
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6859      	ldr	r1, [r3, #4]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	440b      	add	r3, r1
 8001d04:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d12:	e00f      	b.n	8001d34 <HAL_I2C_Init+0x1dc>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	1e58      	subs	r0, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6859      	ldr	r1, [r3, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	0099      	lsls	r1, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	6809      	ldr	r1, [r1, #0]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61cb      	str	r3, [r1, #28]
=======
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	495c      	ldr	r1, [pc, #368]	; (8001de4 <HAL_I2C_Init+0x274>)
 8001c74:	428b      	cmp	r3, r1
 8001c76:	d819      	bhi.n	8001cac <HAL_I2C_Init+0x13c>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	1e59      	subs	r1, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c86:	1c59      	adds	r1, r3, #1
 8001c88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c8c:	400b      	ands	r3, r1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00a      	beq.n	8001ca8 <HAL_I2C_Init+0x138>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1e59      	subs	r1, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca6:	e051      	b.n	8001d4c <HAL_I2C_Init+0x1dc>
 8001ca8:	2304      	movs	r3, #4
 8001caa:	e04f      	b.n	8001d4c <HAL_I2C_Init+0x1dc>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d111      	bne.n	8001cd8 <HAL_I2C_Init+0x168>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	1e58      	subs	r0, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6859      	ldr	r1, [r3, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	440b      	add	r3, r1
 8001cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bf0c      	ite	eq
 8001cd0:	2301      	moveq	r3, #1
 8001cd2:	2300      	movne	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	e012      	b.n	8001cfe <HAL_I2C_Init+0x18e>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1e58      	subs	r0, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6859      	ldr	r1, [r3, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	0099      	lsls	r1, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bf0c      	ite	eq
 8001cf8:	2301      	moveq	r3, #1
 8001cfa:	2300      	movne	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_I2C_Init+0x196>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e022      	b.n	8001d4c <HAL_I2C_Init+0x1dc>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10e      	bne.n	8001d2c <HAL_I2C_Init+0x1bc>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1e58      	subs	r0, r3, #1
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6859      	ldr	r1, [r3, #4]
 8001d16:	460b      	mov	r3, r1
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	440b      	add	r3, r1
 8001d1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d20:	3301      	adds	r3, #1
 8001d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d2a:	e00f      	b.n	8001d4c <HAL_I2C_Init+0x1dc>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1e58      	subs	r0, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6859      	ldr	r1, [r3, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	0099      	lsls	r1, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d42:	3301      	adds	r3, #1
 8001d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	6809      	ldr	r1, [r1, #0]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61cb      	str	r3, [r1, #28]
>>>>>>> FFF

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
<<<<<<< HEAD
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69da      	ldr	r2, [r3, #28]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]
=======
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69da      	ldr	r2, [r3, #28]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]
>>>>>>> FFF

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
<<<<<<< HEAD
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6911      	ldr	r1, [r2, #16]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68d2      	ldr	r2, [r2, #12]
 8001d6e:	4311      	orrs	r1, r2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	430b      	orrs	r3, r1
 8001d76:	6093      	str	r3, [r2, #8]
=======
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6911      	ldr	r1, [r2, #16]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68d2      	ldr	r2, [r2, #12]
 8001d86:	4311      	orrs	r1, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	6093      	str	r3, [r2, #8]
>>>>>>> FFF

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
<<<<<<< HEAD
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695a      	ldr	r2, [r3, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2220      	movs	r2, #32
 8001dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	000186a0 	.word	0x000186a0
 8001dd0:	001e847f 	.word	0x001e847f
 8001dd4:	003d08ff 	.word	0x003d08ff
 8001dd8:	431bde83 	.word	0x431bde83
 8001ddc:	10624dd3 	.word	0x10624dd3

08001de0 <HAL_I2C_Mem_Write>:
=======
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695a      	ldr	r2, [r3, #20]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	000186a0 	.word	0x000186a0
 8001de8:	001e847f 	.word	0x001e847f
 8001dec:	003d08ff 	.word	0x003d08ff
 8001df0:	431bde83 	.word	0x431bde83
 8001df4:	10624dd3 	.word	0x10624dd3

08001df8 <HAL_I2C_Mem_Write>:
>>>>>>> FFF
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af02      	add	r7, sp, #8
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	4608      	mov	r0, r1
 8001dea:	4611      	mov	r1, r2
 8001dec:	461a      	mov	r2, r3
 8001dee:	4603      	mov	r3, r0
 8001df0:	817b      	strh	r3, [r7, #10]
 8001df2:	460b      	mov	r3, r1
 8001df4:	813b      	strh	r3, [r7, #8]
 8001df6:	4613      	mov	r3, r2
 8001df8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dfa:	f7ff fb0d 	bl	8001418 <HAL_GetTick>
 8001dfe:	6178      	str	r0, [r7, #20]
=======
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af02      	add	r7, sp, #8
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	4608      	mov	r0, r1
 8001e02:	4611      	mov	r1, r2
 8001e04:	461a      	mov	r2, r3
 8001e06:	4603      	mov	r3, r0
 8001e08:	817b      	strh	r3, [r7, #10]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	813b      	strh	r3, [r7, #8]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e12:	f7ff fb0d 	bl	8001430 <HAL_GetTick>
 8001e16:	6178      	str	r0, [r7, #20]
>>>>>>> FFF

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
<<<<<<< HEAD
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b20      	cmp	r3, #32
 8001e0a:	f040 80d9 	bne.w	8001fc0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	2319      	movs	r3, #25
 8001e14:	2201      	movs	r2, #1
 8001e16:	496d      	ldr	r1, [pc, #436]	; (8001fcc <HAL_I2C_Mem_Write+0x1ec>)
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 f971 	bl	8002100 <I2C_WaitOnFlagUntilTimeout>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e24:	2302      	movs	r3, #2
 8001e26:	e0cc      	b.n	8001fc2 <HAL_I2C_Mem_Write+0x1e2>
=======
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b20      	cmp	r3, #32
 8001e22:	f040 80d9 	bne.w	8001fd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	2319      	movs	r3, #25
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	496d      	ldr	r1, [pc, #436]	; (8001fe4 <HAL_I2C_Mem_Write+0x1ec>)
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 f971 	bl	8002118 <I2C_WaitOnFlagUntilTimeout>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e0cc      	b.n	8001fda <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> FFF
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_I2C_Mem_Write+0x56>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e0c5      	b.n	8001fc2 <HAL_I2C_Mem_Write+0x1e2>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d007      	beq.n	8001e5c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
=======
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_I2C_Mem_Write+0x56>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e0c5      	b.n	8001fda <HAL_I2C_Mem_Write+0x1e2>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d007      	beq.n	8001e74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
>>>>>>> FFF
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2221      	movs	r2, #33	; 0x21
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2240      	movs	r2, #64	; 0x40
 8001e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6a3a      	ldr	r2, [r7, #32]
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4a4d      	ldr	r2, [pc, #308]	; (8001fd0 <HAL_I2C_Mem_Write+0x1f0>)
 8001e9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e9e:	88f8      	ldrh	r0, [r7, #6]
 8001ea0:	893a      	ldrh	r2, [r7, #8]
 8001ea2:	8979      	ldrh	r1, [r7, #10]
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	9301      	str	r3, [sp, #4]
 8001ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	4603      	mov	r3, r0
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f890 	bl	8001fd4 <I2C_RequestMemoryWrite>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d052      	beq.n	8001f60 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e081      	b.n	8001fc2 <HAL_I2C_Mem_Write+0x1e2>
=======
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2221      	movs	r2, #33	; 0x21
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2240      	movs	r2, #64	; 0x40
 8001e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6a3a      	ldr	r2, [r7, #32]
 8001e9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4a4d      	ldr	r2, [pc, #308]	; (8001fe8 <HAL_I2C_Mem_Write+0x1f0>)
 8001eb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001eb6:	88f8      	ldrh	r0, [r7, #6]
 8001eb8:	893a      	ldrh	r2, [r7, #8]
 8001eba:	8979      	ldrh	r1, [r7, #10]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f890 	bl	8001fec <I2C_RequestMemoryWrite>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d052      	beq.n	8001f78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e081      	b.n	8001fda <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> FFF
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 f9f2 	bl	80022ac <I2C_WaitOnTXEFlagUntilTimeout>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00d      	beq.n	8001eea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d107      	bne.n	8001ee6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e06b      	b.n	8001fc2 <HAL_I2C_Mem_Write+0x1e2>
=======
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f9f2 	bl	80022c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00d      	beq.n	8001f02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d107      	bne.n	8001efe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001efc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e06b      	b.n	8001fda <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> FFF
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
<<<<<<< HEAD
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	781a      	ldrb	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	3b01      	subs	r3, #1
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d11b      	bne.n	8001f60 <HAL_I2C_Mem_Write+0x180>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d017      	beq.n	8001f60 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	781a      	ldrb	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1aa      	bne.n	8001ebe <HAL_I2C_Mem_Write+0xde>
=======
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	781a      	ldrb	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d11b      	bne.n	8001f78 <HAL_I2C_Mem_Write+0x180>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d017      	beq.n	8001f78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	781a      	ldrb	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1aa      	bne.n	8001ed6 <HAL_I2C_Mem_Write+0xde>
>>>>>>> FFF
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 f9de 	bl	800232e <I2C_WaitOnBTFFlagUntilTimeout>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00d      	beq.n	8001f94 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d107      	bne.n	8001f90 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f8e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e016      	b.n	8001fc2 <HAL_I2C_Mem_Write+0x1e2>
=======
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 f9de 	bl	8002346 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00d      	beq.n	8001fac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d107      	bne.n	8001fa8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e016      	b.n	8001fda <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> FFF
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	e000      	b.n	8001fc2 <HAL_I2C_Mem_Write+0x1e2>
=======
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	e000      	b.n	8001fda <HAL_I2C_Mem_Write+0x1e2>
>>>>>>> FFF
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8001fc0:	2302      	movs	r3, #2
  }
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	00100002 	.word	0x00100002
 8001fd0:	ffff0000 	.word	0xffff0000

08001fd4 <I2C_RequestMemoryWrite>:
=======
 8001fd8:	2302      	movs	r3, #2
  }
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	00100002 	.word	0x00100002
 8001fe8:	ffff0000 	.word	0xffff0000

08001fec <I2C_RequestMemoryWrite>:
>>>>>>> FFF
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	4608      	mov	r0, r1
 8001fde:	4611      	mov	r1, r2
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	817b      	strh	r3, [r7, #10]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	813b      	strh	r3, [r7, #8]
 8001fea:	4613      	mov	r3, r2
 8001fec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ffc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	2200      	movs	r2, #0
 8002006:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f878 	bl	8002100 <I2C_WaitOnFlagUntilTimeout>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00d      	beq.n	8002032 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002024:	d103      	bne.n	800202e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800202c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e05f      	b.n	80020f2 <I2C_RequestMemoryWrite+0x11e>
=======
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	4608      	mov	r0, r1
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	817b      	strh	r3, [r7, #10]
 8001ffe:	460b      	mov	r3, r1
 8002000:	813b      	strh	r3, [r7, #8]
 8002002:	4613      	mov	r3, r2
 8002004:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002014:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	2200      	movs	r2, #0
 800201e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 f878 	bl	8002118 <I2C_WaitOnFlagUntilTimeout>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00d      	beq.n	800204a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800203c:	d103      	bne.n	8002046 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002044:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e05f      	b.n	800210a <I2C_RequestMemoryWrite+0x11e>
>>>>>>> FFF
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
<<<<<<< HEAD
 8002032:	897b      	ldrh	r3, [r7, #10]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002040:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	6a3a      	ldr	r2, [r7, #32]
 8002046:	492d      	ldr	r1, [pc, #180]	; (80020fc <I2C_RequestMemoryWrite+0x128>)
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 f8b0 	bl	80021ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e04c      	b.n	80020f2 <I2C_RequestMemoryWrite+0x11e>
=======
 800204a:	897b      	ldrh	r3, [r7, #10]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	461a      	mov	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002058:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	6a3a      	ldr	r2, [r7, #32]
 800205e:	492d      	ldr	r1, [pc, #180]	; (8002114 <I2C_RequestMemoryWrite+0x128>)
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 f8b0 	bl	80021c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e04c      	b.n	800210a <I2C_RequestMemoryWrite+0x11e>
>>>>>>> FFF
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800206e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002070:	6a39      	ldr	r1, [r7, #32]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 f91a 	bl	80022ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00d      	beq.n	800209a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	2b04      	cmp	r3, #4
 8002084:	d107      	bne.n	8002096 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002094:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e02b      	b.n	80020f2 <I2C_RequestMemoryWrite+0x11e>
=======
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002088:	6a39      	ldr	r1, [r7, #32]
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f91a 	bl	80022c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00d      	beq.n	80020b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	2b04      	cmp	r3, #4
 800209c:	d107      	bne.n	80020ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e02b      	b.n	800210a <I2C_RequestMemoryWrite+0x11e>
>>>>>>> FFF
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
<<<<<<< HEAD
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d105      	bne.n	80020ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020a0:	893b      	ldrh	r3, [r7, #8]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	611a      	str	r2, [r3, #16]
 80020aa:	e021      	b.n	80020f0 <I2C_RequestMemoryWrite+0x11c>
=======
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d105      	bne.n	80020c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020b8:	893b      	ldrh	r3, [r7, #8]
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	611a      	str	r2, [r3, #16]
 80020c2:	e021      	b.n	8002108 <I2C_RequestMemoryWrite+0x11c>
>>>>>>> FFF
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
<<<<<<< HEAD
 80020ac:	893b      	ldrh	r3, [r7, #8]
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020bc:	6a39      	ldr	r1, [r7, #32]
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 f8f4 	bl	80022ac <I2C_WaitOnTXEFlagUntilTimeout>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00d      	beq.n	80020e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d107      	bne.n	80020e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e005      	b.n	80020f2 <I2C_RequestMemoryWrite+0x11e>
=======
 80020c4:	893b      	ldrh	r3, [r7, #8]
 80020c6:	0a1b      	lsrs	r3, r3, #8
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d4:	6a39      	ldr	r1, [r7, #32]
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f8f4 	bl	80022c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00d      	beq.n	80020fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d107      	bne.n	80020fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e005      	b.n	800210a <I2C_RequestMemoryWrite+0x11e>
>>>>>>> FFF
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
<<<<<<< HEAD
 80020e6:	893b      	ldrh	r3, [r7, #8]
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	00010002 	.word	0x00010002

08002100 <I2C_WaitOnFlagUntilTimeout>:
=======
 80020fe:	893b      	ldrh	r3, [r7, #8]
 8002100:	b2da      	uxtb	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	00010002 	.word	0x00010002

08002118 <I2C_WaitOnFlagUntilTimeout>:
>>>>>>> FFF
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	4613      	mov	r3, r2
 800210e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002110:	e025      	b.n	800215e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002118:	d021      	beq.n	800215e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800211a:	f7ff f97d 	bl	8001418 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d302      	bcc.n	8002130 <I2C_WaitOnFlagUntilTimeout+0x30>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d116      	bne.n	800215e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2220      	movs	r2, #32
 800213a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f043 0220 	orr.w	r2, r3, #32
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e023      	b.n	80021a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	0c1b      	lsrs	r3, r3, #16
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b01      	cmp	r3, #1
 8002166:	d10d      	bne.n	8002184 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	43da      	mvns	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4013      	ands	r3, r2
 8002174:	b29b      	uxth	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	bf0c      	ite	eq
 800217a:	2301      	moveq	r3, #1
 800217c:	2300      	movne	r3, #0
 800217e:	b2db      	uxtb	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	e00c      	b.n	800219e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	43da      	mvns	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4013      	ands	r3, r2
 8002190:	b29b      	uxth	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	bf0c      	ite	eq
 8002196:	2301      	moveq	r3, #1
 8002198:	2300      	movne	r3, #0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d0b6      	beq.n	8002112 <I2C_WaitOnFlagUntilTimeout+0x12>
=======
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	4613      	mov	r3, r2
 8002126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002128:	e025      	b.n	8002176 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002130:	d021      	beq.n	8002176 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002132:	f7ff f97d 	bl	8001430 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d302      	bcc.n	8002148 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d116      	bne.n	8002176 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f043 0220 	orr.w	r2, r3, #32
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e023      	b.n	80021be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	0c1b      	lsrs	r3, r3, #16
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b01      	cmp	r3, #1
 800217e:	d10d      	bne.n	800219c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	43da      	mvns	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4013      	ands	r3, r2
 800218c:	b29b      	uxth	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	bf0c      	ite	eq
 8002192:	2301      	moveq	r3, #1
 8002194:	2300      	movne	r3, #0
 8002196:	b2db      	uxtb	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	e00c      	b.n	80021b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	43da      	mvns	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4013      	ands	r3, r2
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	bf0c      	ite	eq
 80021ae:	2301      	moveq	r3, #1
 80021b0:	2300      	movne	r3, #0
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	461a      	mov	r2, r3
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d0b6      	beq.n	800212a <I2C_WaitOnFlagUntilTimeout+0x12>
>>>>>>> FFF
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
=======
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
>>>>>>> FFF
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b084      	sub	sp, #16
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021bc:	e051      	b.n	8002262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021cc:	d123      	bne.n	8002216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2220      	movs	r2, #32
 80021f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f043 0204 	orr.w	r2, r3, #4
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e046      	b.n	80022a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
=======
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b084      	sub	sp, #16
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	60f8      	str	r0, [r7, #12]
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021d4:	e051      	b.n	800227a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e4:	d123      	bne.n	800222e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2220      	movs	r2, #32
 800220a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f043 0204 	orr.w	r2, r3, #4
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e046      	b.n	80022bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
>>>>>>> FFF
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800221c:	d021      	beq.n	8002262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800221e:	f7ff f8fb 	bl	8001418 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	429a      	cmp	r2, r3
 800222c:	d302      	bcc.n	8002234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d116      	bne.n	8002262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2220      	movs	r2, #32
 800223e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f043 0220 	orr.w	r2, r3, #32
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e020      	b.n	80022a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	0c1b      	lsrs	r3, r3, #16
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b01      	cmp	r3, #1
 800226a:	d10c      	bne.n	8002286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	43da      	mvns	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	4013      	ands	r3, r2
 8002278:	b29b      	uxth	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	bf14      	ite	ne
 800227e:	2301      	movne	r3, #1
 8002280:	2300      	moveq	r3, #0
 8002282:	b2db      	uxtb	r3, r3
 8002284:	e00b      	b.n	800229e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	43da      	mvns	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	4013      	ands	r3, r2
 8002292:	b29b      	uxth	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf14      	ite	ne
 8002298:	2301      	movne	r3, #1
 800229a:	2300      	moveq	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d18d      	bne.n	80021be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
=======
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002234:	d021      	beq.n	800227a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002236:	f7ff f8fb 	bl	8001430 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	429a      	cmp	r2, r3
 8002244:	d302      	bcc.n	800224c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d116      	bne.n	800227a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2220      	movs	r2, #32
 8002256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f043 0220 	orr.w	r2, r3, #32
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e020      	b.n	80022bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	0c1b      	lsrs	r3, r3, #16
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b01      	cmp	r3, #1
 8002282:	d10c      	bne.n	800229e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	43da      	mvns	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	4013      	ands	r3, r2
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	bf14      	ite	ne
 8002296:	2301      	movne	r3, #1
 8002298:	2300      	moveq	r3, #0
 800229a:	b2db      	uxtb	r3, r3
 800229c:	e00b      	b.n	80022b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	43da      	mvns	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	4013      	ands	r3, r2
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf14      	ite	ne
 80022b0:	2301      	movne	r3, #1
 80022b2:	2300      	moveq	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d18d      	bne.n	80021d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
>>>>>>> FFF
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <I2C_WaitOnTXEFlagUntilTimeout>:
=======
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <I2C_WaitOnTXEFlagUntilTimeout>:
>>>>>>> FFF
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022b8:	e02d      	b.n	8002316 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 f878 	bl	80023b0 <I2C_IsAcknowledgeFailed>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e02d      	b.n	8002326 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
=======
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022d0:	e02d      	b.n	800232e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 f878 	bl	80023c8 <I2C_IsAcknowledgeFailed>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e02d      	b.n	800233e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
>>>>>>> FFF
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022d0:	d021      	beq.n	8002316 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d2:	f7ff f8a1 	bl	8001418 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d302      	bcc.n	80022e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d116      	bne.n	8002316 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2220      	movs	r2, #32
 80022f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f043 0220 	orr.w	r2, r3, #32
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e007      	b.n	8002326 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002320:	2b80      	cmp	r3, #128	; 0x80
 8002322:	d1ca      	bne.n	80022ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
=======
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022e8:	d021      	beq.n	800232e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ea:	f7ff f8a1 	bl	8001430 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d302      	bcc.n	8002300 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d116      	bne.n	800232e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	f043 0220 	orr.w	r2, r3, #32
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e007      	b.n	800233e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002338:	2b80      	cmp	r3, #128	; 0x80
 800233a:	d1ca      	bne.n	80022d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
>>>>>>> FFF
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <I2C_WaitOnBTFFlagUntilTimeout>:
=======
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <I2C_WaitOnBTFFlagUntilTimeout>:
>>>>>>> FFF
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 800232e:	b580      	push	{r7, lr}
 8002330:	b084      	sub	sp, #16
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800233a:	e02d      	b.n	8002398 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 f837 	bl	80023b0 <I2C_IsAcknowledgeFailed>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e02d      	b.n	80023a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
=======
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002352:	e02d      	b.n	80023b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f837 	bl	80023c8 <I2C_IsAcknowledgeFailed>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e02d      	b.n	80023c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
>>>>>>> FFF
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002352:	d021      	beq.n	8002398 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002354:	f7ff f860 	bl	8001418 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	429a      	cmp	r2, r3
 8002362:	d302      	bcc.n	800236a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d116      	bne.n	8002398 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	f043 0220 	orr.w	r2, r3, #32
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e007      	b.n	80023a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d1ca      	bne.n	800233c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
=======
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800236a:	d021      	beq.n	80023b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800236c:	f7ff f860 	bl	8001430 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	429a      	cmp	r2, r3
 800237a:	d302      	bcc.n	8002382 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d116      	bne.n	80023b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f043 0220 	orr.w	r2, r3, #32
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e007      	b.n	80023c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d1ca      	bne.n	8002354 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
>>>>>>> FFF
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <I2C_IsAcknowledgeFailed>:
=======
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <I2C_IsAcknowledgeFailed>:
>>>>>>> FFF
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c6:	d11b      	bne.n	8002400 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	f043 0204 	orr.w	r2, r3, #4
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr

0800240c <HAL_RCC_OscConfig>:
=======
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023de:	d11b      	bne.n	8002418 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	f043 0204 	orr.w	r2, r3, #4
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <HAL_RCC_OscConfig>:
>>>>>>> FFF
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
=======
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e26c      	b.n	80028f8 <HAL_RCC_OscConfig+0x4ec>
=======
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e26c      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> FFF

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 8087 	beq.w	800253a <HAL_RCC_OscConfig+0x12e>
=======
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 8087 	beq.w	8002552 <HAL_RCC_OscConfig+0x12e>
>>>>>>> FFF
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< HEAD
 800242c:	4b92      	ldr	r3, [pc, #584]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b04      	cmp	r3, #4
 8002436:	d00c      	beq.n	8002452 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002438:	4b8f      	ldr	r3, [pc, #572]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b08      	cmp	r3, #8
 8002442:	d112      	bne.n	800246a <HAL_RCC_OscConfig+0x5e>
 8002444:	4b8c      	ldr	r3, [pc, #560]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002450:	d10b      	bne.n	800246a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002452:	4b89      	ldr	r3, [pc, #548]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d06c      	beq.n	8002538 <HAL_RCC_OscConfig+0x12c>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d168      	bne.n	8002538 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e246      	b.n	80028f8 <HAL_RCC_OscConfig+0x4ec>
=======
 8002444:	4b92      	ldr	r3, [pc, #584]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 030c 	and.w	r3, r3, #12
 800244c:	2b04      	cmp	r3, #4
 800244e:	d00c      	beq.n	800246a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002450:	4b8f      	ldr	r3, [pc, #572]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b08      	cmp	r3, #8
 800245a:	d112      	bne.n	8002482 <HAL_RCC_OscConfig+0x5e>
 800245c:	4b8c      	ldr	r3, [pc, #560]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002468:	d10b      	bne.n	8002482 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246a:	4b89      	ldr	r3, [pc, #548]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d06c      	beq.n	8002550 <HAL_RCC_OscConfig+0x12c>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d168      	bne.n	8002550 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e246      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> FFF
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002472:	d106      	bne.n	8002482 <HAL_RCC_OscConfig+0x76>
 8002474:	4b80      	ldr	r3, [pc, #512]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a7f      	ldr	r2, [pc, #508]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 800247a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	e02e      	b.n	80024e0 <HAL_RCC_OscConfig+0xd4>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x98>
 800248a:	4b7b      	ldr	r3, [pc, #492]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a7a      	ldr	r2, [pc, #488]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	4b78      	ldr	r3, [pc, #480]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a77      	ldr	r2, [pc, #476]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 800249c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e01d      	b.n	80024e0 <HAL_RCC_OscConfig+0xd4>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0xbc>
 80024ae:	4b72      	ldr	r3, [pc, #456]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a71      	ldr	r2, [pc, #452]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	4b6f      	ldr	r3, [pc, #444]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a6e      	ldr	r2, [pc, #440]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e00b      	b.n	80024e0 <HAL_RCC_OscConfig+0xd4>
 80024c8:	4b6b      	ldr	r3, [pc, #428]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a6a      	ldr	r2, [pc, #424]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 80024ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b68      	ldr	r3, [pc, #416]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a67      	ldr	r2, [pc, #412]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 80024da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024de:	6013      	str	r3, [r2, #0]
=======
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248a:	d106      	bne.n	800249a <HAL_RCC_OscConfig+0x76>
 800248c:	4b80      	ldr	r3, [pc, #512]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a7f      	ldr	r2, [pc, #508]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	e02e      	b.n	80024f8 <HAL_RCC_OscConfig+0xd4>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10c      	bne.n	80024bc <HAL_RCC_OscConfig+0x98>
 80024a2:	4b7b      	ldr	r3, [pc, #492]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a7a      	ldr	r2, [pc, #488]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	4b78      	ldr	r3, [pc, #480]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a77      	ldr	r2, [pc, #476]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e01d      	b.n	80024f8 <HAL_RCC_OscConfig+0xd4>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0xbc>
 80024c6:	4b72      	ldr	r3, [pc, #456]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a71      	ldr	r2, [pc, #452]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	4b6f      	ldr	r3, [pc, #444]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a6e      	ldr	r2, [pc, #440]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e00b      	b.n	80024f8 <HAL_RCC_OscConfig+0xd4>
 80024e0:	4b6b      	ldr	r3, [pc, #428]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a6a      	ldr	r2, [pc, #424]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b68      	ldr	r3, [pc, #416]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a67      	ldr	r2, [pc, #412]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f6:	6013      	str	r3, [r2, #0]
>>>>>>> FFF


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
<<<<<<< HEAD
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d013      	beq.n	8002510 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7fe ff96 	bl	8001418 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f0:	f7fe ff92 	bl	8001418 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e1fa      	b.n	80028f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	4b5d      	ldr	r3, [pc, #372]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0xe4>
 800250e:	e014      	b.n	800253a <HAL_RCC_OscConfig+0x12e>
=======
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d013      	beq.n	8002528 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7fe ff96 	bl	8001430 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002508:	f7fe ff92 	bl	8001430 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e1fa      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	4b5d      	ldr	r3, [pc, #372]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0xe4>
 8002526:	e014      	b.n	8002552 <HAL_RCC_OscConfig+0x12e>
>>>>>>> FFF
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8002510:	f7fe ff82 	bl	8001418 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002518:	f7fe ff7e 	bl	8001418 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	; 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e1e6      	b.n	80028f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252a:	4b53      	ldr	r3, [pc, #332]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x10c>
 8002536:	e000      	b.n	800253a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002538:	bf00      	nop
=======
 8002528:	f7fe ff82 	bl	8001430 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002530:	f7fe ff7e 	bl	8001430 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	; 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e1e6      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002542:	4b53      	ldr	r3, [pc, #332]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0x10c>
 800254e:	e000      	b.n	8002552 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002550:	bf00      	nop
>>>>>>> FFF
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d063      	beq.n	800260e <HAL_RCC_OscConfig+0x202>
=======
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d063      	beq.n	8002626 <HAL_RCC_OscConfig+0x202>
>>>>>>> FFF
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< HEAD
 8002546:	4b4c      	ldr	r3, [pc, #304]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002552:	4b49      	ldr	r3, [pc, #292]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b08      	cmp	r3, #8
 800255c:	d11c      	bne.n	8002598 <HAL_RCC_OscConfig+0x18c>
 800255e:	4b46      	ldr	r3, [pc, #280]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d116      	bne.n	8002598 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256a:	4b43      	ldr	r3, [pc, #268]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <HAL_RCC_OscConfig+0x176>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d001      	beq.n	8002582 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e1ba      	b.n	80028f8 <HAL_RCC_OscConfig+0x4ec>
=======
 800255e:	4b4c      	ldr	r3, [pc, #304]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800256a:	4b49      	ldr	r3, [pc, #292]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b08      	cmp	r3, #8
 8002574:	d11c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x18c>
 8002576:	4b46      	ldr	r3, [pc, #280]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d116      	bne.n	80025b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	4b43      	ldr	r3, [pc, #268]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_RCC_OscConfig+0x176>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d001      	beq.n	800259a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e1ba      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> FFF
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8002582:	4b3d      	ldr	r3, [pc, #244]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4939      	ldr	r1, [pc, #228]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002592:	4313      	orrs	r3, r2
 8002594:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002596:	e03a      	b.n	800260e <HAL_RCC_OscConfig+0x202>
=======
 800259a:	4b3d      	ldr	r3, [pc, #244]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4939      	ldr	r1, [pc, #228]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ae:	e03a      	b.n	8002626 <HAL_RCC_OscConfig+0x202>
>>>>>>> FFF
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d020      	beq.n	80025e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a0:	4b36      	ldr	r3, [pc, #216]	; (800267c <HAL_RCC_OscConfig+0x270>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a6:	f7fe ff37 	bl	8001418 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ae:	f7fe ff33 	bl	8001418 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e19b      	b.n	80028f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c0:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x1a2>
=======
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b8:	4b36      	ldr	r3, [pc, #216]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7fe ff37 	bl	8001430 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c6:	f7fe ff33 	bl	8001430 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e19b      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d8:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1a2>
>>>>>>> FFF
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80025cc:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	4927      	ldr	r1, [pc, #156]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	600b      	str	r3, [r1, #0]
 80025e0:	e015      	b.n	800260e <HAL_RCC_OscConfig+0x202>
=======
 80025e4:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4927      	ldr	r1, [pc, #156]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	600b      	str	r3, [r1, #0]
 80025f8:	e015      	b.n	8002626 <HAL_RCC_OscConfig+0x202>
>>>>>>> FFF
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 80025e2:	4b26      	ldr	r3, [pc, #152]	; (800267c <HAL_RCC_OscConfig+0x270>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7fe ff16 	bl	8001418 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f0:	f7fe ff12 	bl	8001418 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e17a      	b.n	80028f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002602:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x1e4>
=======
 80025fa:	4b26      	ldr	r3, [pc, #152]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe ff16 	bl	8001430 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002608:	f7fe ff12 	bl	8001430 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e17a      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261a:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x1e4>
>>>>>>> FFF
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d03a      	beq.n	8002690 <HAL_RCC_OscConfig+0x284>
=======
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d03a      	beq.n	80026a8 <HAL_RCC_OscConfig+0x284>
>>>>>>> FFF
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d019      	beq.n	8002656 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002622:	4b17      	ldr	r3, [pc, #92]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 8002624:	2201      	movs	r2, #1
 8002626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002628:	f7fe fef6 	bl	8001418 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002630:	f7fe fef2 	bl	8001418 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e15a      	b.n	80028f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002642:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <HAL_RCC_OscConfig+0x26c>)
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x224>
=======
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d019      	beq.n	800266e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263a:	4b17      	ldr	r3, [pc, #92]	; (8002698 <HAL_RCC_OscConfig+0x274>)
 800263c:	2201      	movs	r2, #1
 800263e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002640:	f7fe fef6 	bl	8001430 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002648:	f7fe fef2 	bl	8001430 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e15a      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265a:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x224>
>>>>>>> FFF
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
<<<<<<< HEAD
 800264e:	2001      	movs	r0, #1
 8002650:	f000 fad8 	bl	8002c04 <RCC_Delay>
 8002654:	e01c      	b.n	8002690 <HAL_RCC_OscConfig+0x284>
=======
 8002666:	2001      	movs	r0, #1
 8002668:	f000 fad8 	bl	8002c1c <RCC_Delay>
 800266c:	e01c      	b.n	80026a8 <HAL_RCC_OscConfig+0x284>
>>>>>>> FFF
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <HAL_RCC_OscConfig+0x274>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265c:	f7fe fedc 	bl	8001418 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002662:	e00f      	b.n	8002684 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002664:	f7fe fed8 	bl	8001418 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d908      	bls.n	8002684 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e140      	b.n	80028f8 <HAL_RCC_OscConfig+0x4ec>
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000
 800267c:	42420000 	.word	0x42420000
 8002680:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002684:	4b9e      	ldr	r3, [pc, #632]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1e9      	bne.n	8002664 <HAL_RCC_OscConfig+0x258>
=======
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <HAL_RCC_OscConfig+0x274>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002674:	f7fe fedc 	bl	8001430 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267a:	e00f      	b.n	800269c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800267c:	f7fe fed8 	bl	8001430 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d908      	bls.n	800269c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e140      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000
 8002694:	42420000 	.word	0x42420000
 8002698:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269c:	4b9e      	ldr	r3, [pc, #632]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1e9      	bne.n	800267c <HAL_RCC_OscConfig+0x258>
>>>>>>> FFF
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80a6 	beq.w	80027ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800269e:	2300      	movs	r3, #0
 80026a0:	75fb      	strb	r3, [r7, #23]
=======
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 80a6 	beq.w	8002802 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b6:	2300      	movs	r3, #0
 80026b8:	75fb      	strb	r3, [r7, #23]
>>>>>>> FFF
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 80026a2:	4b97      	ldr	r3, [pc, #604]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10d      	bne.n	80026ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ae:	4b94      	ldr	r3, [pc, #592]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	4a93      	ldr	r2, [pc, #588]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 80026b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b8:	61d3      	str	r3, [r2, #28]
 80026ba:	4b91      	ldr	r3, [pc, #580]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c6:	2301      	movs	r3, #1
 80026c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ca:	4b8e      	ldr	r3, [pc, #568]	; (8002904 <HAL_RCC_OscConfig+0x4f8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d118      	bne.n	8002708 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d6:	4b8b      	ldr	r3, [pc, #556]	; (8002904 <HAL_RCC_OscConfig+0x4f8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a8a      	ldr	r2, [pc, #552]	; (8002904 <HAL_RCC_OscConfig+0x4f8>)
 80026dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e2:	f7fe fe99 	bl	8001418 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ea:	f7fe fe95 	bl	8001418 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b64      	cmp	r3, #100	; 0x64
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e0fd      	b.n	80028f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fc:	4b81      	ldr	r3, [pc, #516]	; (8002904 <HAL_RCC_OscConfig+0x4f8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x2de>
=======
 80026ba:	4b97      	ldr	r3, [pc, #604]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10d      	bne.n	80026e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c6:	4b94      	ldr	r3, [pc, #592]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	4a93      	ldr	r2, [pc, #588]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 80026cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d0:	61d3      	str	r3, [r2, #28]
 80026d2:	4b91      	ldr	r3, [pc, #580]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026de:	2301      	movs	r3, #1
 80026e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e2:	4b8e      	ldr	r3, [pc, #568]	; (800291c <HAL_RCC_OscConfig+0x4f8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d118      	bne.n	8002720 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ee:	4b8b      	ldr	r3, [pc, #556]	; (800291c <HAL_RCC_OscConfig+0x4f8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a8a      	ldr	r2, [pc, #552]	; (800291c <HAL_RCC_OscConfig+0x4f8>)
 80026f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026fa:	f7fe fe99 	bl	8001430 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002702:	f7fe fe95 	bl	8001430 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b64      	cmp	r3, #100	; 0x64
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e0fd      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002714:	4b81      	ldr	r3, [pc, #516]	; (800291c <HAL_RCC_OscConfig+0x4f8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x2de>
>>>>>>> FFF
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x312>
 8002710:	4b7b      	ldr	r3, [pc, #492]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	4a7a      	ldr	r2, [pc, #488]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6213      	str	r3, [r2, #32]
 800271c:	e02d      	b.n	800277a <HAL_RCC_OscConfig+0x36e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10c      	bne.n	8002740 <HAL_RCC_OscConfig+0x334>
 8002726:	4b76      	ldr	r3, [pc, #472]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4a75      	ldr	r2, [pc, #468]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	6213      	str	r3, [r2, #32]
 8002732:	4b73      	ldr	r3, [pc, #460]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	4a72      	ldr	r2, [pc, #456]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	f023 0304 	bic.w	r3, r3, #4
 800273c:	6213      	str	r3, [r2, #32]
 800273e:	e01c      	b.n	800277a <HAL_RCC_OscConfig+0x36e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	2b05      	cmp	r3, #5
 8002746:	d10c      	bne.n	8002762 <HAL_RCC_OscConfig+0x356>
 8002748:	4b6d      	ldr	r3, [pc, #436]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	4a6c      	ldr	r2, [pc, #432]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 800274e:	f043 0304 	orr.w	r3, r3, #4
 8002752:	6213      	str	r3, [r2, #32]
 8002754:	4b6a      	ldr	r3, [pc, #424]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	4a69      	ldr	r2, [pc, #420]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	6213      	str	r3, [r2, #32]
 8002760:	e00b      	b.n	800277a <HAL_RCC_OscConfig+0x36e>
 8002762:	4b67      	ldr	r3, [pc, #412]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	4a66      	ldr	r2, [pc, #408]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 8002768:	f023 0301 	bic.w	r3, r3, #1
 800276c:	6213      	str	r3, [r2, #32]
 800276e:	4b64      	ldr	r3, [pc, #400]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	4a63      	ldr	r2, [pc, #396]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 8002774:	f023 0304 	bic.w	r3, r3, #4
 8002778:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d015      	beq.n	80027ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002782:	f7fe fe49 	bl	8001418 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002788:	e00a      	b.n	80027a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278a:	f7fe fe45 	bl	8001418 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	f241 3288 	movw	r2, #5000	; 0x1388
 8002798:	4293      	cmp	r3, r2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e0ab      	b.n	80028f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a0:	4b57      	ldr	r3, [pc, #348]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0ee      	beq.n	800278a <HAL_RCC_OscConfig+0x37e>
 80027ac:	e014      	b.n	80027d8 <HAL_RCC_OscConfig+0x3cc>
=======
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d106      	bne.n	8002736 <HAL_RCC_OscConfig+0x312>
 8002728:	4b7b      	ldr	r3, [pc, #492]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4a7a      	ldr	r2, [pc, #488]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6213      	str	r3, [r2, #32]
 8002734:	e02d      	b.n	8002792 <HAL_RCC_OscConfig+0x36e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10c      	bne.n	8002758 <HAL_RCC_OscConfig+0x334>
 800273e:	4b76      	ldr	r3, [pc, #472]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	4a75      	ldr	r2, [pc, #468]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	6213      	str	r3, [r2, #32]
 800274a:	4b73      	ldr	r3, [pc, #460]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4a72      	ldr	r2, [pc, #456]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 8002750:	f023 0304 	bic.w	r3, r3, #4
 8002754:	6213      	str	r3, [r2, #32]
 8002756:	e01c      	b.n	8002792 <HAL_RCC_OscConfig+0x36e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	2b05      	cmp	r3, #5
 800275e:	d10c      	bne.n	800277a <HAL_RCC_OscConfig+0x356>
 8002760:	4b6d      	ldr	r3, [pc, #436]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	4a6c      	ldr	r2, [pc, #432]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 8002766:	f043 0304 	orr.w	r3, r3, #4
 800276a:	6213      	str	r3, [r2, #32]
 800276c:	4b6a      	ldr	r3, [pc, #424]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	4a69      	ldr	r2, [pc, #420]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	6213      	str	r3, [r2, #32]
 8002778:	e00b      	b.n	8002792 <HAL_RCC_OscConfig+0x36e>
 800277a:	4b67      	ldr	r3, [pc, #412]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	4a66      	ldr	r2, [pc, #408]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 8002780:	f023 0301 	bic.w	r3, r3, #1
 8002784:	6213      	str	r3, [r2, #32]
 8002786:	4b64      	ldr	r3, [pc, #400]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	4a63      	ldr	r2, [pc, #396]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 800278c:	f023 0304 	bic.w	r3, r3, #4
 8002790:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d015      	beq.n	80027c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279a:	f7fe fe49 	bl	8001430 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a0:	e00a      	b.n	80027b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a2:	f7fe fe45 	bl	8001430 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e0ab      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b8:	4b57      	ldr	r3, [pc, #348]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0ee      	beq.n	80027a2 <HAL_RCC_OscConfig+0x37e>
 80027c4:	e014      	b.n	80027f0 <HAL_RCC_OscConfig+0x3cc>
>>>>>>> FFF
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 80027ae:	f7fe fe33 	bl	8001418 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b4:	e00a      	b.n	80027cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b6:	f7fe fe2f 	bl	8001418 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e095      	b.n	80028f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027cc:	4b4c      	ldr	r3, [pc, #304]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1ee      	bne.n	80027b6 <HAL_RCC_OscConfig+0x3aa>
=======
 80027c6:	f7fe fe33 	bl	8001430 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027cc:	e00a      	b.n	80027e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ce:	f7fe fe2f 	bl	8001430 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027dc:	4293      	cmp	r3, r2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e095      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e4:	4b4c      	ldr	r3, [pc, #304]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1ee      	bne.n	80027ce <HAL_RCC_OscConfig+0x3aa>
>>>>>>> FFF
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 80027d8:	7dfb      	ldrb	r3, [r7, #23]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d105      	bne.n	80027ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027de:	4b48      	ldr	r3, [pc, #288]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	4a47      	ldr	r2, [pc, #284]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 80027e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e8:	61d3      	str	r3, [r2, #28]
=======
 80027f0:	7dfb      	ldrb	r3, [r7, #23]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d105      	bne.n	8002802 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f6:	4b48      	ldr	r3, [pc, #288]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	4a47      	ldr	r2, [pc, #284]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 80027fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002800:	61d3      	str	r3, [r2, #28]
>>>>>>> FFF

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 8081 	beq.w	80028f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f4:	4b42      	ldr	r3, [pc, #264]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 030c 	and.w	r3, r3, #12
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d061      	beq.n	80028c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d146      	bne.n	8002896 <HAL_RCC_OscConfig+0x48a>
=======
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 8081 	beq.w	800290e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800280c:	4b42      	ldr	r3, [pc, #264]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b08      	cmp	r3, #8
 8002816:	d061      	beq.n	80028dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d146      	bne.n	80028ae <HAL_RCC_OscConfig+0x48a>
>>>>>>> FFF
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8002808:	4b3f      	ldr	r3, [pc, #252]	; (8002908 <HAL_RCC_OscConfig+0x4fc>)
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280e:	f7fe fe03 	bl	8001418 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002816:	f7fe fdff 	bl	8001418 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e067      	b.n	80028f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002828:	4b35      	ldr	r3, [pc, #212]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f0      	bne.n	8002816 <HAL_RCC_OscConfig+0x40a>
=======
 8002820:	4b3f      	ldr	r3, [pc, #252]	; (8002920 <HAL_RCC_OscConfig+0x4fc>)
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002826:	f7fe fe03 	bl	8001430 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282e:	f7fe fdff 	bl	8001430 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e067      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002840:	4b35      	ldr	r3, [pc, #212]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f0      	bne.n	800282e <HAL_RCC_OscConfig+0x40a>
>>>>>>> FFF
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
<<<<<<< HEAD
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283c:	d108      	bne.n	8002850 <HAL_RCC_OscConfig+0x444>
=======
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002854:	d108      	bne.n	8002868 <HAL_RCC_OscConfig+0x444>
>>>>>>> FFF
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
<<<<<<< HEAD
 800283e:	4b30      	ldr	r3, [pc, #192]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	492d      	ldr	r1, [pc, #180]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
=======
 8002856:	4b30      	ldr	r3, [pc, #192]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	492d      	ldr	r1, [pc, #180]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
>>>>>>> FFF
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 8002850:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a19      	ldr	r1, [r3, #32]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	430b      	orrs	r3, r1
 8002862:	4927      	ldr	r1, [pc, #156]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002868:	4b27      	ldr	r3, [pc, #156]	; (8002908 <HAL_RCC_OscConfig+0x4fc>)
 800286a:	2201      	movs	r2, #1
 800286c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286e:	f7fe fdd3 	bl	8001418 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002876:	f7fe fdcf 	bl	8001418 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e037      	b.n	80028f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002888:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x46a>
 8002894:	e02f      	b.n	80028f6 <HAL_RCC_OscConfig+0x4ea>
=======
 8002868:	4b2b      	ldr	r3, [pc, #172]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a19      	ldr	r1, [r3, #32]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	430b      	orrs	r3, r1
 800287a:	4927      	ldr	r1, [pc, #156]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002880:	4b27      	ldr	r3, [pc, #156]	; (8002920 <HAL_RCC_OscConfig+0x4fc>)
 8002882:	2201      	movs	r2, #1
 8002884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002886:	f7fe fdd3 	bl	8001430 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288e:	f7fe fdcf 	bl	8001430 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e037      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028a0:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x46a>
 80028ac:	e02f      	b.n	800290e <HAL_RCC_OscConfig+0x4ea>
>>>>>>> FFF
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8002896:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <HAL_RCC_OscConfig+0x4fc>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7fe fdbc 	bl	8001418 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a4:	f7fe fdb8 	bl	8001418 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e020      	b.n	80028f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b6:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x498>
 80028c2:	e018      	b.n	80028f6 <HAL_RCC_OscConfig+0x4ea>
=======
 80028ae:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <HAL_RCC_OscConfig+0x4fc>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7fe fdbc 	bl	8001430 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028bc:	f7fe fdb8 	bl	8001430 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e020      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ce:	4b12      	ldr	r3, [pc, #72]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x498>
 80028da:	e018      	b.n	800290e <HAL_RCC_OscConfig+0x4ea>
>>>>>>> FFF
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e013      	b.n	80028f8 <HAL_RCC_OscConfig+0x4ec>
=======
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e013      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> FFF
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
<<<<<<< HEAD
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_OscConfig+0x4f4>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d001      	beq.n	80028f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <HAL_RCC_OscConfig+0x4ec>
=======
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <HAL_RCC_OscConfig+0x4f4>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d106      	bne.n	800290a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002906:	429a      	cmp	r2, r3
 8002908:	d001      	beq.n	800290e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> FFF
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000
 8002904:	40007000 	.word	0x40007000
 8002908:	42420060 	.word	0x42420060

0800290c <HAL_RCC_ClockConfig>:
=======
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000
 800291c:	40007000 	.word	0x40007000
 8002920:	42420060 	.word	0x42420060

08002924 <HAL_RCC_ClockConfig>:
>>>>>>> FFF
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
=======
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
>>>>>>> FFF
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0d0      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1b6>
=======
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0d0      	b.n	8002ada <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> FFF
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8002920:	4b6a      	ldr	r3, [pc, #424]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d910      	bls.n	8002950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292e:	4b67      	ldr	r3, [pc, #412]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 0207 	bic.w	r2, r3, #7
 8002936:	4965      	ldr	r1, [pc, #404]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	4313      	orrs	r3, r2
 800293c:	600b      	str	r3, [r1, #0]
=======
 8002938:	4b6a      	ldr	r3, [pc, #424]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d910      	bls.n	8002968 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002946:	4b67      	ldr	r3, [pc, #412]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 0207 	bic.w	r2, r3, #7
 800294e:	4965      	ldr	r1, [pc, #404]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	4313      	orrs	r3, r2
 8002954:	600b      	str	r3, [r1, #0]
>>>>>>> FFF

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800293e:	4b63      	ldr	r3, [pc, #396]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d001      	beq.n	8002950 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0b8      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1b6>
=======
 8002956:	4b63      	ldr	r3, [pc, #396]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0b8      	b.n	8002ada <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> FFF
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d020      	beq.n	800299e <HAL_RCC_ClockConfig+0x92>
=======
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d020      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x92>
>>>>>>> FFF
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002968:	4b59      	ldr	r3, [pc, #356]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a58      	ldr	r2, [pc, #352]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002972:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002980:	4b53      	ldr	r3, [pc, #332]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	4a52      	ldr	r2, [pc, #328]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800298a:	6053      	str	r3, [r2, #4]
=======
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002980:	4b59      	ldr	r3, [pc, #356]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	4a58      	ldr	r2, [pc, #352]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800298a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002998:	4b53      	ldr	r3, [pc, #332]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4a52      	ldr	r2, [pc, #328]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029a2:	6053      	str	r3, [r2, #4]
>>>>>>> FFF
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 800298c:	4b50      	ldr	r3, [pc, #320]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	494d      	ldr	r1, [pc, #308]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
=======
 80029a4:	4b50      	ldr	r3, [pc, #320]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	494d      	ldr	r1, [pc, #308]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	604b      	str	r3, [r1, #4]
>>>>>>> FFF
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d040      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x120>
=======
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d040      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x120>
>>>>>>> FFF
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d107      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b2:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d115      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e07f      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1b6>
=======
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ca:	4b47      	ldr	r3, [pc, #284]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d115      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e07f      	b.n	8002ada <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> FFF
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ca:	4b41      	ldr	r3, [pc, #260]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d109      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e073      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1b6>
=======
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e2:	4b41      	ldr	r3, [pc, #260]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e073      	b.n	8002ada <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> FFF
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 80029da:	4b3d      	ldr	r3, [pc, #244]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e06b      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ea:	4b39      	ldr	r3, [pc, #228]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f023 0203 	bic.w	r2, r3, #3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4936      	ldr	r1, [pc, #216]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029fc:	f7fe fd0c 	bl	8001418 <HAL_GetTick>
 8002a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a02:	e00a      	b.n	8002a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a04:	f7fe fd08 	bl	8001418 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e053      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 020c 	and.w	r2, r3, #12
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d1eb      	bne.n	8002a04 <HAL_RCC_ClockConfig+0xf8>
=======
 80029f2:	4b3d      	ldr	r3, [pc, #244]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e06b      	b.n	8002ada <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a02:	4b39      	ldr	r3, [pc, #228]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f023 0203 	bic.w	r2, r3, #3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4936      	ldr	r1, [pc, #216]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a14:	f7fe fd0c 	bl	8001430 <HAL_GetTick>
 8002a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a1c:	f7fe fd08 	bl	8001430 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e053      	b.n	8002ada <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a32:	4b2d      	ldr	r3, [pc, #180]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 020c 	and.w	r2, r3, #12
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d1eb      	bne.n	8002a1c <HAL_RCC_ClockConfig+0xf8>
>>>>>>> FFF
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8002a2c:	4b27      	ldr	r3, [pc, #156]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d210      	bcs.n	8002a5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b24      	ldr	r3, [pc, #144]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 0207 	bic.w	r2, r3, #7
 8002a42:	4922      	ldr	r1, [pc, #136]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]
=======
 8002a44:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d210      	bcs.n	8002a74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 0207 	bic.w	r2, r3, #7
 8002a5a:	4922      	ldr	r1, [pc, #136]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	600b      	str	r3, [r1, #0]
>>>>>>> FFF

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8002a4a:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e032      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x1b6>
=======
 8002a62:	4b20      	ldr	r3, [pc, #128]	; (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e032      	b.n	8002ada <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> FFF
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a68:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4916      	ldr	r1, [pc, #88]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	604b      	str	r3, [r1, #4]
=======
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a80:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	4916      	ldr	r1, [pc, #88]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]
>>>>>>> FFF
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a86:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	490e      	ldr	r1, [pc, #56]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	604b      	str	r3, [r1, #4]
=======
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d009      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a9e:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	490e      	ldr	r1, [pc, #56]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]
>>>>>>> FFF
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8002a9a:	f000 f821 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	490a      	ldr	r1, [pc, #40]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8002aac:	5ccb      	ldrb	r3, [r1, r3]
 8002aae:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab2:	4a09      	ldr	r2, [pc, #36]	; (8002ad8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ab6:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_RCC_ClockConfig+0x1d0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fc6a 	bl	8001394 <HAL_InitTick>

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40022000 	.word	0x40022000
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	08005090 	.word	0x08005090
 8002ad8:	20000010 	.word	0x20000010
 8002adc:	20000014 	.word	0x20000014

08002ae0 <HAL_RCC_GetSysClockFreq>:
=======
 8002ab2:	f000 f821 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	490a      	ldr	r1, [pc, #40]	; (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002ac4:	5ccb      	ldrb	r3, [r1, r3]
 8002ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aca:	4a09      	ldr	r2, [pc, #36]	; (8002af0 <HAL_RCC_ClockConfig+0x1cc>)
 8002acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fe fc6a 	bl	80013ac <HAL_InitTick>

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40022000 	.word	0x40022000
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	080050a8 	.word	0x080050a8
 8002af0:	20000010 	.word	0x20000010
 8002af4:	20000014 	.word	0x20000014

08002af8 <HAL_RCC_GetSysClockFreq>:
>>>>>>> FFF
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8002ae0:	b490      	push	{r4, r7}
 8002ae2:	b08a      	sub	sp, #40	; 0x28
 8002ae4:	af00      	add	r7, sp, #0
=======
 8002af8:	b490      	push	{r4, r7}
 8002afa:	b08a      	sub	sp, #40	; 0x28
 8002afc:	af00      	add	r7, sp, #0
>>>>>>> FFF
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
<<<<<<< HEAD
 8002ae6:	4b2a      	ldr	r3, [pc, #168]	; (8002b90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ae8:	1d3c      	adds	r4, r7, #4
 8002aea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
=======
 8002afe:	4b2a      	ldr	r3, [pc, #168]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b00:	1d3c      	adds	r4, r7, #4
 8002b02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
>>>>>>> FFF
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
<<<<<<< HEAD
 8002af0:	f240 2301 	movw	r3, #513	; 0x201
 8002af4:	803b      	strh	r3, [r7, #0]
=======
 8002b08:	f240 2301 	movw	r3, #513	; 0x201
 8002b0c:	803b      	strh	r3, [r7, #0]
>>>>>>> FFF
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
<<<<<<< HEAD
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
 8002afe:	2300      	movs	r3, #0
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	623b      	str	r3, [r7, #32]
=======
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	2300      	movs	r3, #0
 8002b14:	61bb      	str	r3, [r7, #24]
 8002b16:	2300      	movs	r3, #0
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	623b      	str	r3, [r7, #32]
>>>>>>> FFF
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
<<<<<<< HEAD
 8002b0a:	4b22      	ldr	r3, [pc, #136]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d002      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x40>
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d003      	beq.n	8002b26 <HAL_RCC_GetSysClockFreq+0x46>
 8002b1e:	e02d      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x9c>
=======
 8002b22:	4b22      	ldr	r3, [pc, #136]	; (8002bac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d002      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x40>
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d003      	beq.n	8002b3e <HAL_RCC_GetSysClockFreq+0x46>
 8002b36:	e02d      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x9c>
>>>>>>> FFF
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8002b20:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b22:	623b      	str	r3, [r7, #32]
      break;
 8002b24:	e02d      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0xa2>
=======
 8002b38:	4b1d      	ldr	r3, [pc, #116]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b3a:	623b      	str	r3, [r7, #32]
      break;
 8002b3c:	e02d      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0xa2>
>>>>>>> FFF
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
<<<<<<< HEAD
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	0c9b      	lsrs	r3, r3, #18
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b32:	4413      	add	r3, r2
 8002b34:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b38:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d013      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0x8c>
=======
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	0c9b      	lsrs	r3, r3, #18
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d013      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x8c>
>>>>>>> FFF
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
<<<<<<< HEAD
 8002b44:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	0c5b      	lsrs	r3, r3, #17
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b52:	4413      	add	r3, r2
 8002b54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b58:	61bb      	str	r3, [r7, #24]
=======
 8002b5c:	4b13      	ldr	r3, [pc, #76]	; (8002bac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	0c5b      	lsrs	r3, r3, #17
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b70:	61bb      	str	r3, [r7, #24]
>>>>>>> FFF
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
<<<<<<< HEAD
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	4a0e      	ldr	r2, [pc, #56]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b5e:	fb02 f203 	mul.w	r2, r2, r3
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6a:	e004      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0x96>
=======
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	4a0e      	ldr	r2, [pc, #56]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b76:	fb02 f203 	mul.w	r2, r2, r3
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
 8002b82:	e004      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x96>
>>>>>>> FFF
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
<<<<<<< HEAD
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	4a0b      	ldr	r2, [pc, #44]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b70:	fb02 f303 	mul.w	r3, r2, r3
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	623b      	str	r3, [r7, #32]
      break;
 8002b7a:	e002      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0xa2>
=======
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	4a0b      	ldr	r2, [pc, #44]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b88:	fb02 f303 	mul.w	r3, r2, r3
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	623b      	str	r3, [r7, #32]
      break;
 8002b92:	e002      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0xa2>
>>>>>>> FFF
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b7e:	623b      	str	r3, [r7, #32]
      break;
 8002b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b82:	6a3b      	ldr	r3, [r7, #32]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3728      	adds	r7, #40	; 0x28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc90      	pop	{r4, r7}
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	08004914 	.word	0x08004914
 8002b94:	40021000 	.word	0x40021000
 8002b98:	007a1200 	.word	0x007a1200
 8002b9c:	003d0900 	.word	0x003d0900

08002ba0 <HAL_RCC_GetHCLKFreq>:
=======
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b96:	623b      	str	r3, [r7, #32]
      break;
 8002b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3728      	adds	r7, #40	; 0x28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc90      	pop	{r4, r7}
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	0800492c 	.word	0x0800492c
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	007a1200 	.word	0x007a1200
 8002bb4:	003d0900 	.word	0x003d0900

08002bb8 <HAL_RCC_GetHCLKFreq>:
>>>>>>> FFF
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba4:	4b02      	ldr	r3, [pc, #8]	; (8002bb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	20000010 	.word	0x20000010

08002bb4 <HAL_RCC_GetPCLK1Freq>:
=======
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bbc:	4b02      	ldr	r3, [pc, #8]	; (8002bc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	20000010 	.word	0x20000010

08002bcc <HAL_RCC_GetPCLK1Freq>:
>>>>>>> FFF
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bb8:	f7ff fff2 	bl	8002ba0 <HAL_RCC_GetHCLKFreq>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	4903      	ldr	r1, [pc, #12]	; (8002bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bca:	5ccb      	ldrb	r3, [r1, r3]
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	080050a0 	.word	0x080050a0

08002bdc <HAL_RCC_GetPCLK2Freq>:
=======
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bd0:	f7ff fff2 	bl	8002bb8 <HAL_RCC_GetHCLKFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	4903      	ldr	r1, [pc, #12]	; (8002bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	080050b8 	.word	0x080050b8

08002bf4 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> FFF
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002be0:	f7ff ffde 	bl	8002ba0 <HAL_RCC_GetHCLKFreq>
 8002be4:	4602      	mov	r2, r0
 8002be6:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	0adb      	lsrs	r3, r3, #11
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	4903      	ldr	r1, [pc, #12]	; (8002c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bf2:	5ccb      	ldrb	r3, [r1, r3]
 8002bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	080050a0 	.word	0x080050a0

08002c04 <RCC_Delay>:
=======
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bf8:	f7ff ffde 	bl	8002bb8 <HAL_RCC_GetHCLKFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	0adb      	lsrs	r3, r3, #11
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	4903      	ldr	r1, [pc, #12]	; (8002c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000
 8002c18:	080050b8 	.word	0x080050b8

08002c1c <RCC_Delay>:
>>>>>>> FFF
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
<<<<<<< HEAD
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <RCC_Delay+0x34>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <RCC_Delay+0x38>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	0a5b      	lsrs	r3, r3, #9
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	fb02 f303 	mul.w	r3, r2, r3
 8002c1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c20:	bf00      	nop
  }
  while (Delay --);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1e5a      	subs	r2, r3, #1
 8002c26:	60fa      	str	r2, [r7, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1f9      	bne.n	8002c20 <RCC_Delay+0x1c>
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr
 8002c38:	20000010 	.word	0x20000010
 8002c3c:	10624dd3 	.word	0x10624dd3

08002c40 <HAL_SPI_Init>:
=======
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c24:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <RCC_Delay+0x34>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <RCC_Delay+0x38>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	0a5b      	lsrs	r3, r3, #9
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	fb02 f303 	mul.w	r3, r2, r3
 8002c36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c38:	bf00      	nop
  }
  while (Delay --);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1e5a      	subs	r2, r3, #1
 8002c3e:	60fa      	str	r2, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f9      	bne.n	8002c38 <RCC_Delay+0x1c>
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	20000010 	.word	0x20000010
 8002c54:	10624dd3 	.word	0x10624dd3

08002c58 <HAL_SPI_Init>:
>>>>>>> FFF
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e076      	b.n	8002d40 <HAL_SPI_Init+0x100>
=======
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e076      	b.n	8002d58 <HAL_SPI_Init+0x100>
>>>>>>> FFF
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< HEAD
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d108      	bne.n	8002c6c <HAL_SPI_Init+0x2c>
=======
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d108      	bne.n	8002c84 <HAL_SPI_Init+0x2c>
>>>>>>> FFF
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< HEAD
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c62:	d009      	beq.n	8002c78 <HAL_SPI_Init+0x38>
=======
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c7a:	d009      	beq.n	8002c90 <HAL_SPI_Init+0x38>
>>>>>>> FFF
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< HEAD
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	61da      	str	r2, [r3, #28]
 8002c6a:	e005      	b.n	8002c78 <HAL_SPI_Init+0x38>
=======
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	61da      	str	r2, [r3, #28]
 8002c82:	e005      	b.n	8002c90 <HAL_SPI_Init+0x38>
>>>>>>> FFF
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< HEAD
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	615a      	str	r2, [r3, #20]
=======
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	615a      	str	r2, [r3, #20]
>>>>>>> FFF
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> FFF

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< HEAD
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7fe fa36 	bl	8001104 <HAL_SPI_MspInit>
=======
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fe fa36 	bl	800111c <HAL_SPI_MspInit>
>>>>>>> FFF
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< HEAD
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cae:	601a      	str	r2, [r3, #0]
=======
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cc6:	601a      	str	r2, [r3, #0]
>>>>>>> FFF

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< HEAD
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfc:	ea42 0103 	orr.w	r1, r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]
=======
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d14:	ea42 0103 	orr.w	r1, r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]
>>>>>>> FFF
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
<<<<<<< HEAD
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	0c1a      	lsrs	r2, r3, #16
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f002 0204 	and.w	r2, r2, #4
 8002d1e:	605a      	str	r2, [r3, #4]
=======
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	0c1a      	lsrs	r2, r3, #16
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f002 0204 	and.w	r2, r2, #4
 8002d36:	605a      	str	r2, [r3, #4]
>>>>>>> FFF
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< HEAD
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69da      	ldr	r2, [r3, #28]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	4613      	mov	r3, r2
 8002d56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_SPI_Transmit+0x22>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e126      	b.n	8002fb8 <HAL_SPI_Transmit+0x270>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d72:	f7fe fb51 	bl	8001418 <HAL_GetTick>
 8002d76:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d78:	88fb      	ldrh	r3, [r7, #6]
 8002d7a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d002      	beq.n	8002d8e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d8c:	e10b      	b.n	8002fa6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <HAL_SPI_Transmit+0x52>
 8002d94:	88fb      	ldrh	r3, [r7, #6]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d102      	bne.n	8002da0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d9e:	e102      	b.n	8002fa6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2203      	movs	r2, #3
 8002da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	88fa      	ldrh	r2, [r7, #6]
 8002db8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	88fa      	ldrh	r2, [r7, #6]
 8002dbe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de6:	d10f      	bne.n	8002e08 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e12:	2b40      	cmp	r3, #64	; 0x40
 8002e14:	d007      	beq.n	8002e26 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e2e:	d14b      	bne.n	8002ec8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d002      	beq.n	8002e3e <HAL_SPI_Transmit+0xf6>
 8002e38:	8afb      	ldrh	r3, [r7, #22]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d13e      	bne.n	8002ebc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	881a      	ldrh	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	1c9a      	adds	r2, r3, #2
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e62:	e02b      	b.n	8002ebc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d112      	bne.n	8002e98 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	881a      	ldrh	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	1c9a      	adds	r2, r3, #2
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e96:	e011      	b.n	8002ebc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e98:	f7fe fabe 	bl	8001418 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d803      	bhi.n	8002eb0 <HAL_SPI_Transmit+0x168>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eae:	d102      	bne.n	8002eb6 <HAL_SPI_Transmit+0x16e>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d102      	bne.n	8002ebc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002eba:	e074      	b.n	8002fa6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1ce      	bne.n	8002e64 <HAL_SPI_Transmit+0x11c>
 8002ec6:	e04c      	b.n	8002f62 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <HAL_SPI_Transmit+0x18e>
 8002ed0:	8afb      	ldrh	r3, [r7, #22]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d140      	bne.n	8002f58 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	330c      	adds	r3, #12
 8002ee0:	7812      	ldrb	r2, [r2, #0]
 8002ee2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002efc:	e02c      	b.n	8002f58 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d113      	bne.n	8002f34 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	330c      	adds	r3, #12
 8002f16:	7812      	ldrb	r2, [r2, #0]
 8002f18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f32:	e011      	b.n	8002f58 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f34:	f7fe fa70 	bl	8001418 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d803      	bhi.n	8002f4c <HAL_SPI_Transmit+0x204>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f4a:	d102      	bne.n	8002f52 <HAL_SPI_Transmit+0x20a>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d102      	bne.n	8002f58 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f56:	e026      	b.n	8002fa6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1cd      	bne.n	8002efe <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	6839      	ldr	r1, [r7, #0]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 fbb8 	bl	80036dc <SPI_EndRxTxTransaction>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2220      	movs	r2, #32
 8002f76:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10a      	bne.n	8002f96 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f80:	2300      	movs	r3, #0
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	77fb      	strb	r3, [r7, #31]
 8002fa2:	e000      	b.n	8002fa6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002fa4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3720      	adds	r7, #32
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fdc:	d112      	bne.n	8003004 <HAL_SPI_Receive+0x44>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10e      	bne.n	8003004 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2204      	movs	r2, #4
 8002fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002fee:	88fa      	ldrh	r2, [r7, #6]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f8f1 	bl	80031e2 <HAL_SPI_TransmitReceive>
 8003000:	4603      	mov	r3, r0
 8003002:	e0ea      	b.n	80031da <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_SPI_Receive+0x52>
 800300e:	2302      	movs	r3, #2
 8003010:	e0e3      	b.n	80031da <HAL_SPI_Receive+0x21a>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800301a:	f7fe f9fd 	bl	8001418 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b01      	cmp	r3, #1
 800302a:	d002      	beq.n	8003032 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800302c:	2302      	movs	r3, #2
 800302e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003030:	e0ca      	b.n	80031c8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <HAL_SPI_Receive+0x7e>
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003042:	e0c1      	b.n	80031c8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2204      	movs	r2, #4
 8003048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	88fa      	ldrh	r2, [r7, #6]
 800305c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	88fa      	ldrh	r2, [r7, #6]
 8003062:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800308a:	d10f      	bne.n	80030ac <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800309a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030aa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	d007      	beq.n	80030ca <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030c8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d162      	bne.n	8003198 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80030d2:	e02e      	b.n	8003132 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d115      	bne.n	800310e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f103 020c 	add.w	r2, r3, #12
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ee:	7812      	ldrb	r2, [r2, #0]
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003102:	b29b      	uxth	r3, r3
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800310c:	e011      	b.n	8003132 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800310e:	f7fe f983 	bl	8001418 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d803      	bhi.n	8003126 <HAL_SPI_Receive+0x166>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003124:	d102      	bne.n	800312c <HAL_SPI_Receive+0x16c>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d102      	bne.n	8003132 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003130:	e04a      	b.n	80031c8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1cb      	bne.n	80030d4 <HAL_SPI_Receive+0x114>
 800313c:	e031      	b.n	80031a2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b01      	cmp	r3, #1
 800314a:	d113      	bne.n	8003174 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	b292      	uxth	r2, r2
 8003158:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	1c9a      	adds	r2, r3, #2
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003172:	e011      	b.n	8003198 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003174:	f7fe f950 	bl	8001418 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d803      	bhi.n	800318c <HAL_SPI_Receive+0x1cc>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800318a:	d102      	bne.n	8003192 <HAL_SPI_Receive+0x1d2>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d102      	bne.n	8003198 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003196:	e017      	b.n	80031c8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1cd      	bne.n	800313e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	6839      	ldr	r1, [r7, #0]
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 fa46 	bl	8003638 <SPI_EndRxTransaction>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2220      	movs	r2, #32
 80031b6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	75fb      	strb	r3, [r7, #23]
 80031c4:	e000      	b.n	80031c8 <HAL_SPI_Receive+0x208>
  }

error :
 80031c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b08c      	sub	sp, #48	; 0x30
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031f0:	2301      	movs	r3, #1
 80031f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_SPI_TransmitReceive+0x26>
 8003204:	2302      	movs	r3, #2
 8003206:	e18a      	b.n	800351e <HAL_SPI_TransmitReceive+0x33c>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003210:	f7fe f902 	bl	8001418 <HAL_GetTick>
 8003214:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800321c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003226:	887b      	ldrh	r3, [r7, #2]
 8003228:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800322a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800322e:	2b01      	cmp	r3, #1
 8003230:	d00f      	beq.n	8003252 <HAL_SPI_TransmitReceive+0x70>
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003238:	d107      	bne.n	800324a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d103      	bne.n	800324a <HAL_SPI_TransmitReceive+0x68>
 8003242:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003246:	2b04      	cmp	r3, #4
 8003248:	d003      	beq.n	8003252 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800324a:	2302      	movs	r3, #2
 800324c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003250:	e15b      	b.n	800350a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_SPI_TransmitReceive+0x82>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <HAL_SPI_TransmitReceive+0x82>
 800325e:	887b      	ldrh	r3, [r7, #2]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d103      	bne.n	800326c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800326a:	e14e      	b.n	800350a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b04      	cmp	r3, #4
 8003276:	d003      	beq.n	8003280 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2205      	movs	r2, #5
 800327c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	887a      	ldrh	r2, [r7, #2]
 8003290:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	887a      	ldrh	r2, [r7, #2]
 8003296:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	887a      	ldrh	r2, [r7, #2]
 80032a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	887a      	ldrh	r2, [r7, #2]
 80032a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c0:	2b40      	cmp	r3, #64	; 0x40
 80032c2:	d007      	beq.n	80032d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032dc:	d178      	bne.n	80033d0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <HAL_SPI_TransmitReceive+0x10a>
 80032e6:	8b7b      	ldrh	r3, [r7, #26]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d166      	bne.n	80033ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	881a      	ldrh	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	1c9a      	adds	r2, r3, #2
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003310:	e053      	b.n	80033ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b02      	cmp	r3, #2
 800331e:	d11b      	bne.n	8003358 <HAL_SPI_TransmitReceive+0x176>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d016      	beq.n	8003358 <HAL_SPI_TransmitReceive+0x176>
 800332a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d113      	bne.n	8003358 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	881a      	ldrh	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003340:	1c9a      	adds	r2, r3, #2
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b01      	cmp	r3, #1
 8003364:	d119      	bne.n	800339a <HAL_SPI_TransmitReceive+0x1b8>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d014      	beq.n	800339a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	b292      	uxth	r2, r2
 800337c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	1c9a      	adds	r2, r3, #2
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003396:	2301      	movs	r3, #1
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800339a:	f7fe f83d 	bl	8001418 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d807      	bhi.n	80033ba <HAL_SPI_TransmitReceive+0x1d8>
 80033aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033b0:	d003      	beq.n	80033ba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033b8:	e0a7      	b.n	800350a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1a6      	bne.n	8003312 <HAL_SPI_TransmitReceive+0x130>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1a1      	bne.n	8003312 <HAL_SPI_TransmitReceive+0x130>
 80033ce:	e07c      	b.n	80034ca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HAL_SPI_TransmitReceive+0x1fc>
 80033d8:	8b7b      	ldrh	r3, [r7, #26]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d16b      	bne.n	80034b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	330c      	adds	r3, #12
 80033e8:	7812      	ldrb	r2, [r2, #0]
 80033ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003404:	e057      	b.n	80034b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b02      	cmp	r3, #2
 8003412:	d11c      	bne.n	800344e <HAL_SPI_TransmitReceive+0x26c>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d017      	beq.n	800344e <HAL_SPI_TransmitReceive+0x26c>
 800341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003420:	2b01      	cmp	r3, #1
 8003422:	d114      	bne.n	800344e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	330c      	adds	r3, #12
 800342e:	7812      	ldrb	r2, [r2, #0]
 8003430:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b01      	cmp	r3, #1
 800345a:	d119      	bne.n	8003490 <HAL_SPI_TransmitReceive+0x2ae>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d014      	beq.n	8003490 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800348c:	2301      	movs	r3, #1
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003490:	f7fd ffc2 	bl	8001418 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800349c:	429a      	cmp	r2, r3
 800349e:	d803      	bhi.n	80034a8 <HAL_SPI_TransmitReceive+0x2c6>
 80034a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034a6:	d102      	bne.n	80034ae <HAL_SPI_TransmitReceive+0x2cc>
 80034a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d103      	bne.n	80034b6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034b4:	e029      	b.n	800350a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1a2      	bne.n	8003406 <HAL_SPI_TransmitReceive+0x224>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d19d      	bne.n	8003406 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 f904 	bl	80036dc <SPI_EndRxTxTransaction>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d006      	beq.n	80034e8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80034e6:	e010      	b.n	800350a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10b      	bne.n	8003508 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	e000      	b.n	800350a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003508:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800351a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800351e:	4618      	mov	r0, r3
 8003520:	3730      	adds	r7, #48	; 0x30
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	603b      	str	r3, [r7, #0]
 8003534:	4613      	mov	r3, r2
 8003536:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003538:	f7fd ff6e 	bl	8001418 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	4413      	add	r3, r2
 8003546:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003548:	f7fd ff66 	bl	8001418 <HAL_GetTick>
 800354c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800354e:	4b39      	ldr	r3, [pc, #228]	; (8003634 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	015b      	lsls	r3, r3, #5
 8003554:	0d1b      	lsrs	r3, r3, #20
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	fb02 f303 	mul.w	r3, r2, r3
 800355c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800355e:	e054      	b.n	800360a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003566:	d050      	beq.n	800360a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003568:	f7fd ff56 	bl	8001418 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	429a      	cmp	r2, r3
 8003576:	d902      	bls.n	800357e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d13d      	bne.n	80035fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800358c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003596:	d111      	bne.n	80035bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a0:	d004      	beq.n	80035ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035aa:	d107      	bne.n	80035bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c4:	d10f      	bne.n	80035e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e017      	b.n	800362a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	3b01      	subs	r3, #1
 8003608:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4013      	ands	r3, r2
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	429a      	cmp	r2, r3
 8003618:	bf0c      	ite	eq
 800361a:	2301      	moveq	r3, #1
 800361c:	2300      	movne	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	429a      	cmp	r2, r3
 8003626:	d19b      	bne.n	8003560 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3720      	adds	r7, #32
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20000010 	.word	0x20000010

08003638 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af02      	add	r7, sp, #8
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800364c:	d111      	bne.n	8003672 <SPI_EndRxTransaction+0x3a>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003656:	d004      	beq.n	8003662 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003660:	d107      	bne.n	8003672 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003670:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800367a:	d117      	bne.n	80036ac <SPI_EndRxTransaction+0x74>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003684:	d112      	bne.n	80036ac <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2200      	movs	r2, #0
 800368e:	2101      	movs	r1, #1
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f7ff ff49 	bl	8003528 <SPI_WaitFlagStateUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d01a      	beq.n	80036d2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a0:	f043 0220 	orr.w	r2, r3, #32
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e013      	b.n	80036d4 <SPI_EndRxTransaction+0x9c>
=======
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	69da      	ldr	r2, [r3, #28]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_SPI_Transmit+0x22>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e126      	b.n	8002fd0 <HAL_SPI_Transmit+0x270>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d8a:	f7fe fb51 	bl	8001430 <HAL_GetTick>
 8002d8e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d90:	88fb      	ldrh	r3, [r7, #6]
 8002d92:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d002      	beq.n	8002da6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002da0:	2302      	movs	r3, #2
 8002da2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002da4:	e10b      	b.n	8002fbe <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <HAL_SPI_Transmit+0x52>
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d102      	bne.n	8002db8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002db6:	e102      	b.n	8002fbe <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2203      	movs	r2, #3
 8002dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	88fa      	ldrh	r2, [r7, #6]
 8002dd0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	88fa      	ldrh	r2, [r7, #6]
 8002dd6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dfe:	d10f      	bne.n	8002e20 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2a:	2b40      	cmp	r3, #64	; 0x40
 8002e2c:	d007      	beq.n	8002e3e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e46:	d14b      	bne.n	8002ee0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <HAL_SPI_Transmit+0xf6>
 8002e50:	8afb      	ldrh	r3, [r7, #22]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d13e      	bne.n	8002ed4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	881a      	ldrh	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	1c9a      	adds	r2, r3, #2
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e7a:	e02b      	b.n	8002ed4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d112      	bne.n	8002eb0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	881a      	ldrh	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	1c9a      	adds	r2, r3, #2
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	86da      	strh	r2, [r3, #54]	; 0x36
 8002eae:	e011      	b.n	8002ed4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eb0:	f7fe fabe 	bl	8001430 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d803      	bhi.n	8002ec8 <HAL_SPI_Transmit+0x168>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ec6:	d102      	bne.n	8002ece <HAL_SPI_Transmit+0x16e>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d102      	bne.n	8002ed4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ed2:	e074      	b.n	8002fbe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1ce      	bne.n	8002e7c <HAL_SPI_Transmit+0x11c>
 8002ede:	e04c      	b.n	8002f7a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <HAL_SPI_Transmit+0x18e>
 8002ee8:	8afb      	ldrh	r3, [r7, #22]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d140      	bne.n	8002f70 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	330c      	adds	r3, #12
 8002ef8:	7812      	ldrb	r2, [r2, #0]
 8002efa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f14:	e02c      	b.n	8002f70 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d113      	bne.n	8002f4c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	330c      	adds	r3, #12
 8002f2e:	7812      	ldrb	r2, [r2, #0]
 8002f30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f4a:	e011      	b.n	8002f70 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f4c:	f7fe fa70 	bl	8001430 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d803      	bhi.n	8002f64 <HAL_SPI_Transmit+0x204>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f62:	d102      	bne.n	8002f6a <HAL_SPI_Transmit+0x20a>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d102      	bne.n	8002f70 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f6e:	e026      	b.n	8002fbe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1cd      	bne.n	8002f16 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	6839      	ldr	r1, [r7, #0]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 fbb8 	bl	80036f4 <SPI_EndRxTxTransaction>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10a      	bne.n	8002fae <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f98:	2300      	movs	r3, #0
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	613b      	str	r3, [r7, #16]
 8002fac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	77fb      	strb	r3, [r7, #31]
 8002fba:	e000      	b.n	8002fbe <HAL_SPI_Transmit+0x25e>
  }

error:
 8002fbc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fce:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3720      	adds	r7, #32
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af02      	add	r7, sp, #8
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ff4:	d112      	bne.n	800301c <HAL_SPI_Receive+0x44>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10e      	bne.n	800301c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2204      	movs	r2, #4
 8003002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003006:	88fa      	ldrh	r2, [r7, #6]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	4613      	mov	r3, r2
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	68b9      	ldr	r1, [r7, #8]
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 f8f1 	bl	80031fa <HAL_SPI_TransmitReceive>
 8003018:	4603      	mov	r3, r0
 800301a:	e0ea      	b.n	80031f2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_SPI_Receive+0x52>
 8003026:	2302      	movs	r3, #2
 8003028:	e0e3      	b.n	80031f2 <HAL_SPI_Receive+0x21a>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003032:	f7fe f9fd 	bl	8001430 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d002      	beq.n	800304a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003044:	2302      	movs	r3, #2
 8003046:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003048:	e0ca      	b.n	80031e0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <HAL_SPI_Receive+0x7e>
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d102      	bne.n	800305c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	75fb      	strb	r3, [r7, #23]
    goto error;
 800305a:	e0c1      	b.n	80031e0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2204      	movs	r2, #4
 8003060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	88fa      	ldrh	r2, [r7, #6]
 8003074:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	88fa      	ldrh	r2, [r7, #6]
 800307a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a2:	d10f      	bne.n	80030c4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ce:	2b40      	cmp	r3, #64	; 0x40
 80030d0:	d007      	beq.n	80030e2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d162      	bne.n	80031b0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80030ea:	e02e      	b.n	800314a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d115      	bne.n	8003126 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f103 020c 	add.w	r2, r3, #12
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003106:	7812      	ldrb	r2, [r2, #0]
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003124:	e011      	b.n	800314a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003126:	f7fe f983 	bl	8001430 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d803      	bhi.n	800313e <HAL_SPI_Receive+0x166>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800313c:	d102      	bne.n	8003144 <HAL_SPI_Receive+0x16c>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d102      	bne.n	800314a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003148:	e04a      	b.n	80031e0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800314e:	b29b      	uxth	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1cb      	bne.n	80030ec <HAL_SPI_Receive+0x114>
 8003154:	e031      	b.n	80031ba <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b01      	cmp	r3, #1
 8003162:	d113      	bne.n	800318c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316e:	b292      	uxth	r2, r2
 8003170:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003176:	1c9a      	adds	r2, r3, #2
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	87da      	strh	r2, [r3, #62]	; 0x3e
 800318a:	e011      	b.n	80031b0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800318c:	f7fe f950 	bl	8001430 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d803      	bhi.n	80031a4 <HAL_SPI_Receive+0x1cc>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031a2:	d102      	bne.n	80031aa <HAL_SPI_Receive+0x1d2>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 80031ae:	e017      	b.n	80031e0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1cd      	bne.n	8003156 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	6839      	ldr	r1, [r7, #0]
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 fa46 	bl	8003650 <SPI_EndRxTransaction>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	75fb      	strb	r3, [r7, #23]
 80031dc:	e000      	b.n	80031e0 <HAL_SPI_Receive+0x208>
  }

error :
 80031de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b08c      	sub	sp, #48	; 0x30
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
 8003206:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003208:	2301      	movs	r3, #1
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_SPI_TransmitReceive+0x26>
 800321c:	2302      	movs	r3, #2
 800321e:	e18a      	b.n	8003536 <HAL_SPI_TransmitReceive+0x33c>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003228:	f7fe f902 	bl	8001430 <HAL_GetTick>
 800322c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800323e:	887b      	ldrh	r3, [r7, #2]
 8003240:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003242:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003246:	2b01      	cmp	r3, #1
 8003248:	d00f      	beq.n	800326a <HAL_SPI_TransmitReceive+0x70>
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003250:	d107      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d103      	bne.n	8003262 <HAL_SPI_TransmitReceive+0x68>
 800325a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800325e:	2b04      	cmp	r3, #4
 8003260:	d003      	beq.n	800326a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003262:	2302      	movs	r3, #2
 8003264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003268:	e15b      	b.n	8003522 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d005      	beq.n	800327c <HAL_SPI_TransmitReceive+0x82>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_SPI_TransmitReceive+0x82>
 8003276:	887b      	ldrh	r3, [r7, #2]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d103      	bne.n	8003284 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003282:	e14e      	b.n	8003522 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b04      	cmp	r3, #4
 800328e:	d003      	beq.n	8003298 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2205      	movs	r2, #5
 8003294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	887a      	ldrh	r2, [r7, #2]
 80032a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	887a      	ldrh	r2, [r7, #2]
 80032ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	887a      	ldrh	r2, [r7, #2]
 80032ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	887a      	ldrh	r2, [r7, #2]
 80032c0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d8:	2b40      	cmp	r3, #64	; 0x40
 80032da:	d007      	beq.n	80032ec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f4:	d178      	bne.n	80033e8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <HAL_SPI_TransmitReceive+0x10a>
 80032fe:	8b7b      	ldrh	r3, [r7, #26]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d166      	bne.n	80033d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	881a      	ldrh	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	1c9a      	adds	r2, r3, #2
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003328:	e053      	b.n	80033d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b02      	cmp	r3, #2
 8003336:	d11b      	bne.n	8003370 <HAL_SPI_TransmitReceive+0x176>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d016      	beq.n	8003370 <HAL_SPI_TransmitReceive+0x176>
 8003342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003344:	2b01      	cmp	r3, #1
 8003346:	d113      	bne.n	8003370 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	881a      	ldrh	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	1c9a      	adds	r2, r3, #2
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b01      	cmp	r3, #1
 800337c:	d119      	bne.n	80033b2 <HAL_SPI_TransmitReceive+0x1b8>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003382:	b29b      	uxth	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d014      	beq.n	80033b2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	b292      	uxth	r2, r2
 8003394:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339a:	1c9a      	adds	r2, r3, #2
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033ae:	2301      	movs	r3, #1
 80033b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033b2:	f7fe f83d 	bl	8001430 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033be:	429a      	cmp	r2, r3
 80033c0:	d807      	bhi.n	80033d2 <HAL_SPI_TransmitReceive+0x1d8>
 80033c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033c8:	d003      	beq.n	80033d2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033d0:	e0a7      	b.n	8003522 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1a6      	bne.n	800332a <HAL_SPI_TransmitReceive+0x130>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1a1      	bne.n	800332a <HAL_SPI_TransmitReceive+0x130>
 80033e6:	e07c      	b.n	80034e2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <HAL_SPI_TransmitReceive+0x1fc>
 80033f0:	8b7b      	ldrh	r3, [r7, #26]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d16b      	bne.n	80034ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	330c      	adds	r3, #12
 8003400:	7812      	ldrb	r2, [r2, #0]
 8003402:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800341c:	e057      	b.n	80034ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b02      	cmp	r3, #2
 800342a:	d11c      	bne.n	8003466 <HAL_SPI_TransmitReceive+0x26c>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d017      	beq.n	8003466 <HAL_SPI_TransmitReceive+0x26c>
 8003436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003438:	2b01      	cmp	r3, #1
 800343a:	d114      	bne.n	8003466 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	330c      	adds	r3, #12
 8003446:	7812      	ldrb	r2, [r2, #0]
 8003448:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003462:	2300      	movs	r3, #0
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b01      	cmp	r3, #1
 8003472:	d119      	bne.n	80034a8 <HAL_SPI_TransmitReceive+0x2ae>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d014      	beq.n	80034a8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034a4:	2301      	movs	r3, #1
 80034a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034a8:	f7fd ffc2 	bl	8001430 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d803      	bhi.n	80034c0 <HAL_SPI_TransmitReceive+0x2c6>
 80034b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034be:	d102      	bne.n	80034c6 <HAL_SPI_TransmitReceive+0x2cc>
 80034c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d103      	bne.n	80034ce <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034cc:	e029      	b.n	8003522 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1a2      	bne.n	800341e <HAL_SPI_TransmitReceive+0x224>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d19d      	bne.n	800341e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f904 	bl	80036f4 <SPI_EndRxTxTransaction>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d006      	beq.n	8003500 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80034fe:	e010      	b.n	8003522 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10b      	bne.n	8003520 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	e000      	b.n	8003522 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003520:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003532:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003536:	4618      	mov	r0, r3
 8003538:	3730      	adds	r7, #48	; 0x30
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	4613      	mov	r3, r2
 800354e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003550:	f7fd ff6e 	bl	8001430 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	4413      	add	r3, r2
 800355e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003560:	f7fd ff66 	bl	8001430 <HAL_GetTick>
 8003564:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003566:	4b39      	ldr	r3, [pc, #228]	; (800364c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	015b      	lsls	r3, r3, #5
 800356c:	0d1b      	lsrs	r3, r3, #20
 800356e:	69fa      	ldr	r2, [r7, #28]
 8003570:	fb02 f303 	mul.w	r3, r2, r3
 8003574:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003576:	e054      	b.n	8003622 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800357e:	d050      	beq.n	8003622 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003580:	f7fd ff56 	bl	8001430 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	429a      	cmp	r2, r3
 800358e:	d902      	bls.n	8003596 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d13d      	bne.n	8003612 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035ae:	d111      	bne.n	80035d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b8:	d004      	beq.n	80035c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c2:	d107      	bne.n	80035d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035dc:	d10f      	bne.n	80035fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e017      	b.n	8003642 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	3b01      	subs	r3, #1
 8003620:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4013      	ands	r3, r2
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	429a      	cmp	r2, r3
 8003630:	bf0c      	ite	eq
 8003632:	2301      	moveq	r3, #1
 8003634:	2300      	movne	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	429a      	cmp	r2, r3
 800363e:	d19b      	bne.n	8003578 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3720      	adds	r7, #32
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000010 	.word	0x20000010

08003650 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af02      	add	r7, sp, #8
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003664:	d111      	bne.n	800368a <SPI_EndRxTransaction+0x3a>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800366e:	d004      	beq.n	800367a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003678:	d107      	bne.n	800368a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003688:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003692:	d117      	bne.n	80036c4 <SPI_EndRxTransaction+0x74>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369c:	d112      	bne.n	80036c4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2200      	movs	r2, #0
 80036a6:	2101      	movs	r1, #1
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f7ff ff49 	bl	8003540 <SPI_WaitFlagStateUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01a      	beq.n	80036ea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b8:	f043 0220 	orr.w	r2, r3, #32
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e013      	b.n	80036ec <SPI_EndRxTransaction+0x9c>
>>>>>>> FFF
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2200      	movs	r2, #0
 80036b4:	2180      	movs	r1, #128	; 0x80
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f7ff ff36 	bl	8003528 <SPI_WaitFlagStateUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d007      	beq.n	80036d2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c6:	f043 0220 	orr.w	r2, r3, #32
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e000      	b.n	80036d4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <SPI_EndRxTxTransaction>:
=======
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2200      	movs	r2, #0
 80036cc:	2180      	movs	r1, #128	; 0x80
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f7ff ff36 	bl	8003540 <SPI_WaitFlagStateUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d007      	beq.n	80036ea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036de:	f043 0220 	orr.w	r2, r3, #32
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e000      	b.n	80036ec <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <SPI_EndRxTxTransaction>:
>>>>>>> FFF
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2200      	movs	r2, #0
 80036f0:	2180      	movs	r1, #128	; 0x80
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f7ff ff18 	bl	8003528 <SPI_WaitFlagStateUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d007      	beq.n	800370e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003702:	f043 0220 	orr.w	r2, r3, #32
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e000      	b.n	8003710 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_UART_Init>:
=======
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2200      	movs	r2, #0
 8003708:	2180      	movs	r1, #128	; 0x80
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f7ff ff18 	bl	8003540 <SPI_WaitFlagStateUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d007      	beq.n	8003726 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371a:	f043 0220 	orr.w	r2, r3, #32
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e000      	b.n	8003728 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_UART_Init>:
>>>>>>> FFF
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e03f      	b.n	80037aa <HAL_UART_Init+0x92>
=======
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e03f      	b.n	80037c2 <HAL_UART_Init+0x92>
>>>>>>> FFF
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> FFF

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fd fd2a 	bl	8001198 <HAL_UART_MspInit>
=======
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fd fd2a 	bl	80011b0 <HAL_UART_MspInit>
>>>>>>> FFF
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2224      	movs	r2, #36	; 0x24
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800375a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fb49 	bl	8003df4 <UART_SetConfig>
=======
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2224      	movs	r2, #36	; 0x24
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003772:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fb49 	bl	8003e0c <UART_SetConfig>
>>>>>>> FFF

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003770:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003780:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003790:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <HAL_UART_IRQHandler>:
=======
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003788:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003798:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <HAL_UART_IRQHandler>:
>>>>>>> FFF
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08a      	sub	sp, #40	; 0x28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10d      	bne.n	8003806 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_UART_IRQHandler+0x52>
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fa4f 	bl	8003ca2 <UART_Receive_IT>
      return;
 8003804:	e17b      	b.n	8003afe <HAL_UART_IRQHandler+0x34a>
=======
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	; 0x28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10d      	bne.n	800381e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_UART_IRQHandler+0x52>
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	f003 0320 	and.w	r3, r3, #32
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fa4f 	bl	8003cba <UART_Receive_IT>
      return;
 800381c:	e17b      	b.n	8003b16 <HAL_UART_IRQHandler+0x34a>
>>>>>>> FFF
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
<<<<<<< HEAD
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80b1 	beq.w	8003970 <HAL_UART_IRQHandler+0x1bc>
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d105      	bne.n	8003824 <HAL_UART_IRQHandler+0x70>
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 80a6 	beq.w	8003970 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <HAL_UART_IRQHandler+0x90>
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	f043 0201 	orr.w	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80b1 	beq.w	8003988 <HAL_UART_IRQHandler+0x1bc>
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d105      	bne.n	800383c <HAL_UART_IRQHandler+0x70>
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 80a6 	beq.w	8003988 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_UART_IRQHandler+0x90>
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	f043 0201 	orr.w	r2, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> FFF
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_UART_IRQHandler+0xb0>
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	f043 0202 	orr.w	r2, r3, #2
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_UART_IRQHandler+0xb0>
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	f043 0202 	orr.w	r2, r3, #2
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> FFF
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_UART_IRQHandler+0xd0>
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	f043 0204 	orr.w	r2, r3, #4
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <HAL_UART_IRQHandler+0xd0>
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	f043 0204 	orr.w	r2, r3, #4
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> FFF
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
<<<<<<< HEAD
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00f      	beq.n	80038ae <HAL_UART_IRQHandler+0xfa>
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d104      	bne.n	80038a2 <HAL_UART_IRQHandler+0xee>
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d005      	beq.n	80038ae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f043 0208 	orr.w	r2, r3, #8
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00f      	beq.n	80038c6 <HAL_UART_IRQHandler+0xfa>
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d104      	bne.n	80038ba <HAL_UART_IRQHandler+0xee>
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f043 0208 	orr.w	r2, r3, #8
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> FFF
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 811e 	beq.w	8003af4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d007      	beq.n	80038d2 <HAL_UART_IRQHandler+0x11e>
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f9e8 	bl	8003ca2 <UART_Receive_IT>
=======
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 811e 	beq.w	8003b0c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d007      	beq.n	80038ea <HAL_UART_IRQHandler+0x11e>
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f9e8 	bl	8003cba <UART_Receive_IT>
>>>>>>> FFF
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038dc:	2b00      	cmp	r3, #0
 80038de:	bf14      	ite	ne
 80038e0:	2301      	movne	r3, #1
 80038e2:	2300      	moveq	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d102      	bne.n	80038fa <HAL_UART_IRQHandler+0x146>
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d031      	beq.n	800395e <HAL_UART_IRQHandler+0x1aa>
=======
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bf14      	ite	ne
 80038f8:	2301      	movne	r3, #1
 80038fa:	2300      	moveq	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b00      	cmp	r3, #0
 800390a:	d102      	bne.n	8003912 <HAL_UART_IRQHandler+0x146>
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d031      	beq.n	8003976 <HAL_UART_IRQHandler+0x1aa>
>>>>>>> FFF
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f92a 	bl	8003b54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d023      	beq.n	8003956 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695a      	ldr	r2, [r3, #20]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800391c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003922:	2b00      	cmp	r3, #0
 8003924:	d013      	beq.n	800394e <HAL_UART_IRQHandler+0x19a>
=======
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f92a 	bl	8003b6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d023      	beq.n	800396e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003934:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393a:	2b00      	cmp	r3, #0
 800393c:	d013      	beq.n	8003966 <HAL_UART_IRQHandler+0x19a>
>>>>>>> FFF
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	4a76      	ldr	r2, [pc, #472]	; (8003b04 <HAL_UART_IRQHandler+0x350>)
 800392c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	4618      	mov	r0, r3
 8003934:	f7fd fee6 	bl	8001704 <HAL_DMA_Abort_IT>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d016      	beq.n	800396c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003948:	4610      	mov	r0, r2
 800394a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800394c:	e00e      	b.n	800396c <HAL_UART_IRQHandler+0x1b8>
=======
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003942:	4a76      	ldr	r2, [pc, #472]	; (8003b1c <HAL_UART_IRQHandler+0x350>)
 8003944:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	4618      	mov	r0, r3
 800394c:	f7fd fee6 	bl	800171c <HAL_DMA_Abort_IT>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d016      	beq.n	8003984 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003960:	4610      	mov	r0, r2
 8003962:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003964:	e00e      	b.n	8003984 <HAL_UART_IRQHandler+0x1b8>
>>>>>>> FFF
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f8ec 	bl	8003b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003954:	e00a      	b.n	800396c <HAL_UART_IRQHandler+0x1b8>
=======
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f8ec 	bl	8003b44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800396c:	e00a      	b.n	8003984 <HAL_UART_IRQHandler+0x1b8>
>>>>>>> FFF
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f8e8 	bl	8003b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800395c:	e006      	b.n	800396c <HAL_UART_IRQHandler+0x1b8>
=======
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f8e8 	bl	8003b44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003974:	e006      	b.n	8003984 <HAL_UART_IRQHandler+0x1b8>
>>>>>>> FFF
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f8e4 	bl	8003b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800396a:	e0c3      	b.n	8003af4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800396c:	bf00      	nop
    return;
 800396e:	e0c1      	b.n	8003af4 <HAL_UART_IRQHandler+0x340>
=======
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f8e4 	bl	8003b44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003982:	e0c3      	b.n	8003b0c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003984:	bf00      	nop
    return;
 8003986:	e0c1      	b.n	8003b0c <HAL_UART_IRQHandler+0x340>
>>>>>>> FFF
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	2b01      	cmp	r3, #1
 8003976:	f040 80a1 	bne.w	8003abc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 809b 	beq.w	8003abc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 8095 	beq.w	8003abc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d04e      	beq.n	8003a54 <HAL_UART_IRQHandler+0x2a0>
=======
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	2b01      	cmp	r3, #1
 800398e:	f040 80a1 	bne.w	8003ad4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 809b 	beq.w	8003ad4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8095 	beq.w	8003ad4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d04e      	beq.n	8003a6c <HAL_UART_IRQHandler+0x2a0>
>>>>>>> FFF
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80039c0:	8a3b      	ldrh	r3, [r7, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 8098 	beq.w	8003af8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039cc:	8a3a      	ldrh	r2, [r7, #16]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	f080 8092 	bcs.w	8003af8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8a3a      	ldrh	r2, [r7, #16]
 80039d8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d02b      	beq.n	8003a3c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039f2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0201 	bic.w	r2, r2, #1
 8003a02:	615a      	str	r2, [r3, #20]
=======
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80039d8:	8a3b      	ldrh	r3, [r7, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 8098 	beq.w	8003b10 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039e4:	8a3a      	ldrh	r2, [r7, #16]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	f080 8092 	bcs.w	8003b10 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8a3a      	ldrh	r2, [r7, #16]
 80039f0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d02b      	beq.n	8003a54 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a0a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695a      	ldr	r2, [r3, #20]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0201 	bic.w	r2, r2, #1
 8003a1a:	615a      	str	r2, [r3, #20]
>>>>>>> FFF

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695a      	ldr	r2, [r3, #20]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a12:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0210 	bic.w	r2, r2, #16
 8003a30:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fd fe29 	bl	800168e <HAL_DMA_Abort>
=======
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695a      	ldr	r2, [r3, #20]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a2a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0210 	bic.w	r2, r2, #16
 8003a48:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fd fe29 	bl	80016a6 <HAL_DMA_Abort>
>>>>>>> FFF
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f876 	bl	8003b3e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a52:	e051      	b.n	8003af8 <HAL_UART_IRQHandler+0x344>
=======
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	4619      	mov	r1, r3
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f876 	bl	8003b56 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a6a:	e051      	b.n	8003b10 <HAL_UART_IRQHandler+0x344>
>>>>>>> FFF
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d047      	beq.n	8003afc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003a6c:	8a7b      	ldrh	r3, [r7, #18]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d044      	beq.n	8003afc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a80:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695a      	ldr	r2, [r3, #20]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0201 	bic.w	r2, r2, #1
 8003a90:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0210 	bic.w	r2, r2, #16
 8003aae:	60da      	str	r2, [r3, #12]
=======
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d047      	beq.n	8003b14 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003a84:	8a7b      	ldrh	r3, [r7, #18]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d044      	beq.n	8003b14 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a98:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695a      	ldr	r2, [r3, #20]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0201 	bic.w	r2, r2, #1
 8003aa8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2220      	movs	r2, #32
 8003aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0210 	bic.w	r2, r2, #16
 8003ac6:	60da      	str	r2, [r3, #12]
>>>>>>> FFF
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 8003ab0:	8a7b      	ldrh	r3, [r7, #18]
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f842 	bl	8003b3e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003aba:	e01f      	b.n	8003afc <HAL_UART_IRQHandler+0x348>
=======
 8003ac8:	8a7b      	ldrh	r3, [r7, #18]
 8003aca:	4619      	mov	r1, r3
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f842 	bl	8003b56 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ad2:	e01f      	b.n	8003b14 <HAL_UART_IRQHandler+0x348>
>>>>>>> FFF
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
<<<<<<< HEAD
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x324>
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f87f 	bl	8003bd4 <UART_Transmit_IT>
    return;
 8003ad6:	e012      	b.n	8003afe <HAL_UART_IRQHandler+0x34a>
=======
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d008      	beq.n	8003af0 <HAL_UART_IRQHandler+0x324>
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f87f 	bl	8003bec <UART_Transmit_IT>
    return;
 8003aee:	e012      	b.n	8003b16 <HAL_UART_IRQHandler+0x34a>
>>>>>>> FFF
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
<<<<<<< HEAD
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00d      	beq.n	8003afe <HAL_UART_IRQHandler+0x34a>
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f8c0 	bl	8003c72 <UART_EndTransmit_IT>
    return;
 8003af2:	e004      	b.n	8003afe <HAL_UART_IRQHandler+0x34a>
    return;
 8003af4:	bf00      	nop
 8003af6:	e002      	b.n	8003afe <HAL_UART_IRQHandler+0x34a>
      return;
 8003af8:	bf00      	nop
 8003afa:	e000      	b.n	8003afe <HAL_UART_IRQHandler+0x34a>
      return;
 8003afc:	bf00      	nop
  }
}
 8003afe:	3728      	adds	r7, #40	; 0x28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	08003bad 	.word	0x08003bad

08003b08 <HAL_UART_TxCpltCallback>:
=======
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00d      	beq.n	8003b16 <HAL_UART_IRQHandler+0x34a>
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f8c0 	bl	8003c8a <UART_EndTransmit_IT>
    return;
 8003b0a:	e004      	b.n	8003b16 <HAL_UART_IRQHandler+0x34a>
    return;
 8003b0c:	bf00      	nop
 8003b0e:	e002      	b.n	8003b16 <HAL_UART_IRQHandler+0x34a>
      return;
 8003b10:	bf00      	nop
 8003b12:	e000      	b.n	8003b16 <HAL_UART_IRQHandler+0x34a>
      return;
 8003b14:	bf00      	nop
  }
}
 8003b16:	3728      	adds	r7, #40	; 0x28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	08003bc5 	.word	0x08003bc5

08003b20 <HAL_UART_TxCpltCallback>:
>>>>>>> FFF
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
=======
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr

08003b1a <HAL_UART_RxCpltCallback>:
=======
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bc80      	pop	{r7}
 8003b30:	4770      	bx	lr

08003b32 <HAL_UART_RxCpltCallback>:
>>>>>>> FFF
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
=======
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <HAL_UART_ErrorCallback>:
=======
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr

08003b44 <HAL_UART_ErrorCallback>:
>>>>>>> FFF
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
=======
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr

08003b3e <HAL_UARTEx_RxEventCallback>:
=======
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <HAL_UARTEx_RxEventCallback>:
>>>>>>> FFF
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	460b      	mov	r3, r1
 8003b48:	807b      	strh	r3, [r7, #2]
=======
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	807b      	strh	r3, [r7, #2]
>>>>>>> FFF
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr

08003b54 <UART_EndRxTransfer>:
=======
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <UART_EndRxTransfer>:
>>>>>>> FFF
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b6a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0201 	bic.w	r2, r2, #1
 8003b7a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d107      	bne.n	8003b94 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0210 	bic.w	r2, r2, #16
 8003b92:	60da      	str	r2, [r3, #12]
=======
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b82:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d107      	bne.n	8003bac <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0210 	bic.w	r2, r2, #16
 8003baa:	60da      	str	r2, [r3, #12]
>>>>>>> FFF
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr

08003bac <UART_DMAAbortOnError>:
=======
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr

08003bc4 <UART_DMAAbortOnError>:
>>>>>>> FFF
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	84da      	strh	r2, [r3, #38]	; 0x26
=======
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	84da      	strh	r2, [r3, #38]	; 0x26
>>>>>>> FFF
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f7ff ffb0 	bl	8003b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bcc:	bf00      	nop
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <UART_Transmit_IT>:
=======
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f7ff ffb0 	bl	8003b44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003be4:	bf00      	nop
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <UART_Transmit_IT>:
>>>>>>> FFF
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
=======
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b21      	cmp	r3, #33	; 0x21
 8003be6:	d13e      	bne.n	8003c66 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf0:	d114      	bne.n	8003c1c <UART_Transmit_IT+0x48>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d110      	bne.n	8003c1c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c0e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	1c9a      	adds	r2, r3, #2
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	621a      	str	r2, [r3, #32]
 8003c1a:	e008      	b.n	8003c2e <UART_Transmit_IT+0x5a>
=======
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b21      	cmp	r3, #33	; 0x21
 8003bfe:	d13e      	bne.n	8003c7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c08:	d114      	bne.n	8003c34 <UART_Transmit_IT+0x48>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d110      	bne.n	8003c34 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	1c9a      	adds	r2, r3, #2
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	621a      	str	r2, [r3, #32]
 8003c32:	e008      	b.n	8003c46 <UART_Transmit_IT+0x5a>
>>>>>>> FFF
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
<<<<<<< HEAD
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	1c59      	adds	r1, r3, #1
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6211      	str	r1, [r2, #32]
 8003c26:	781a      	ldrb	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10f      	bne.n	8003c62 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	e000      	b.n	8003c68 <UART_Transmit_IT+0x94>
=======
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	1c59      	adds	r1, r3, #1
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6211      	str	r1, [r2, #32]
 8003c3e:	781a      	ldrb	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	4619      	mov	r1, r3
 8003c54:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10f      	bne.n	8003c7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	e000      	b.n	8003c80 <UART_Transmit_IT+0x94>
>>>>>>> FFF
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8003c66:	2302      	movs	r3, #2
  }
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr

08003c72 <UART_EndTransmit_IT>:
=======
 8003c7e:	2302      	movs	r3, #2
  }
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr

08003c8a <UART_EndTransmit_IT>:
>>>>>>> FFF
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b082      	sub	sp, #8
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68da      	ldr	r2, [r3, #12]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> FFF
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff ff38 	bl	8003b08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <UART_Receive_IT>:
=======
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff ff38 	bl	8003b20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <UART_Receive_IT>:
>>>>>>> FFF
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b086      	sub	sp, #24
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
=======
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b086      	sub	sp, #24
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b22      	cmp	r3, #34	; 0x22
 8003cb4:	f040 8099 	bne.w	8003dea <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc0:	d117      	bne.n	8003cf2 <UART_Receive_IT+0x50>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d113      	bne.n	8003cf2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	1c9a      	adds	r2, r3, #2
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	629a      	str	r2, [r3, #40]	; 0x28
 8003cf0:	e026      	b.n	8003d40 <UART_Receive_IT+0x9e>
=======
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b22      	cmp	r3, #34	; 0x22
 8003ccc:	f040 8099 	bne.w	8003e02 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd8:	d117      	bne.n	8003d0a <UART_Receive_IT+0x50>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d113      	bne.n	8003d0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	1c9a      	adds	r2, r3, #2
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	629a      	str	r2, [r3, #40]	; 0x28
 8003d08:	e026      	b.n	8003d58 <UART_Receive_IT+0x9e>
>>>>>>> FFF
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
<<<<<<< HEAD
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d04:	d007      	beq.n	8003d16 <UART_Receive_IT+0x74>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10a      	bne.n	8003d24 <UART_Receive_IT+0x82>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	701a      	strb	r2, [r3, #0]
 8003d22:	e008      	b.n	8003d36 <UART_Receive_IT+0x94>
=======
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1c:	d007      	beq.n	8003d2e <UART_Receive_IT+0x74>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <UART_Receive_IT+0x82>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d106      	bne.n	8003d3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	701a      	strb	r2, [r3, #0]
 8003d3a:	e008      	b.n	8003d4e <UART_Receive_IT+0x94>
>>>>>>> FFF
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
<<<<<<< HEAD
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d148      	bne.n	8003de6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0220 	bic.w	r2, r2, #32
 8003d62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695a      	ldr	r2, [r3, #20]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0201 	bic.w	r2, r2, #1
 8003d82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
=======
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	4619      	mov	r1, r3
 8003d66:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d148      	bne.n	8003dfe <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0220 	bic.w	r2, r2, #32
 8003d7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0201 	bic.w	r2, r2, #1
 8003d9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
>>>>>>> FFF

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d123      	bne.n	8003ddc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0210 	bic.w	r2, r2, #16
 8003da8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	2b10      	cmp	r3, #16
 8003db6:	d10a      	bne.n	8003dce <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
=======
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d123      	bne.n	8003df4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0210 	bic.w	r2, r2, #16
 8003dc0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b10      	cmp	r3, #16
 8003dce:	d10a      	bne.n	8003de6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]
>>>>>>> FFF
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff feb2 	bl	8003b3e <HAL_UARTEx_RxEventCallback>
 8003dda:	e002      	b.n	8003de2 <UART_Receive_IT+0x140>
=======
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dea:	4619      	mov	r1, r3
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff feb2 	bl	8003b56 <HAL_UARTEx_RxEventCallback>
 8003df2:	e002      	b.n	8003dfa <UART_Receive_IT+0x140>
>>>>>>> FFF
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff fe9c 	bl	8003b1a <HAL_UART_RxCpltCallback>
=======
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff fe9c 	bl	8003b32 <HAL_UART_RxCpltCallback>
>>>>>>> FFF
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
<<<<<<< HEAD
 8003de2:	2300      	movs	r3, #0
 8003de4:	e002      	b.n	8003dec <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	e000      	b.n	8003dec <UART_Receive_IT+0x14a>
=======
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e002      	b.n	8003e04 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	e000      	b.n	8003e04 <UART_Receive_IT+0x14a>
>>>>>>> FFF
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8003dea:	2302      	movs	r3, #2
  }
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <UART_SetConfig>:
=======
 8003e02:	2302      	movs	r3, #2
  }
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <UART_SetConfig>:
>>>>>>> FFF
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
=======
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
>>>>>>> FFF
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	611a      	str	r2, [r3, #16]
=======
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	611a      	str	r2, [r3, #16]
>>>>>>> FFF
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
<<<<<<< HEAD
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e2e:	f023 030c 	bic.w	r3, r3, #12
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6812      	ldr	r2, [r2, #0]
 8003e36:	68b9      	ldr	r1, [r7, #8]
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	60d3      	str	r3, [r2, #12]
=======
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e46:	f023 030c 	bic.w	r3, r3, #12
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6812      	ldr	r2, [r2, #0]
 8003e4e:	68b9      	ldr	r1, [r7, #8]
 8003e50:	430b      	orrs	r3, r1
 8003e52:	60d3      	str	r3, [r2, #12]
>>>>>>> FFF
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699a      	ldr	r2, [r3, #24]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a2c      	ldr	r2, [pc, #176]	; (8003f08 <UART_SetConfig+0x114>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d103      	bne.n	8003e64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e5c:	f7fe febe 	bl	8002bdc <HAL_RCC_GetPCLK2Freq>
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	e002      	b.n	8003e6a <UART_SetConfig+0x76>
=======
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a2c      	ldr	r2, [pc, #176]	; (8003f20 <UART_SetConfig+0x114>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d103      	bne.n	8003e7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e74:	f7fe febe 	bl	8002bf4 <HAL_RCC_GetPCLK2Freq>
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	e002      	b.n	8003e82 <UART_SetConfig+0x76>
>>>>>>> FFF
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8003e64:	f7fe fea6 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 8003e68:	60f8      	str	r0, [r7, #12]
=======
 8003e7c:	f7fe fea6 	bl	8002bcc <HAL_RCC_GetPCLK1Freq>
 8003e80:	60f8      	str	r0, [r7, #12]
>>>>>>> FFF
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
<<<<<<< HEAD
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	009a      	lsls	r2, r3, #2
 8003e74:	441a      	add	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e80:	4a22      	ldr	r2, [pc, #136]	; (8003f0c <UART_SetConfig+0x118>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	0119      	lsls	r1, r3, #4
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	009a      	lsls	r2, r3, #2
 8003e94:	441a      	add	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ea0:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <UART_SetConfig+0x118>)
 8003ea2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	2064      	movs	r0, #100	; 0x64
 8003eaa:	fb00 f303 	mul.w	r3, r0, r3
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	3332      	adds	r3, #50	; 0x32
 8003eb4:	4a15      	ldr	r2, [pc, #84]	; (8003f0c <UART_SetConfig+0x118>)
 8003eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ec0:	4419      	add	r1, r3
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	009a      	lsls	r2, r3, #2
 8003ecc:	441a      	add	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ed8:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <UART_SetConfig+0x118>)
 8003eda:	fba3 0302 	umull	r0, r3, r3, r2
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	2064      	movs	r0, #100	; 0x64
 8003ee2:	fb00 f303 	mul.w	r3, r0, r3
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	3332      	adds	r3, #50	; 0x32
 8003eec:	4a07      	ldr	r2, [pc, #28]	; (8003f0c <UART_SetConfig+0x118>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	f003 020f 	and.w	r2, r3, #15
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	440a      	add	r2, r1
 8003efe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40013800 	.word	0x40013800
 8003f0c:	51eb851f 	.word	0x51eb851f

08003f10 <__errno>:
 8003f10:	4b01      	ldr	r3, [pc, #4]	; (8003f18 <__errno+0x8>)
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	2000001c 	.word	0x2000001c

08003f1c <__libc_init_array>:
 8003f1c:	b570      	push	{r4, r5, r6, lr}
 8003f1e:	2600      	movs	r6, #0
 8003f20:	4d0c      	ldr	r5, [pc, #48]	; (8003f54 <__libc_init_array+0x38>)
 8003f22:	4c0d      	ldr	r4, [pc, #52]	; (8003f58 <__libc_init_array+0x3c>)
 8003f24:	1b64      	subs	r4, r4, r5
 8003f26:	10a4      	asrs	r4, r4, #2
 8003f28:	42a6      	cmp	r6, r4
 8003f2a:	d109      	bne.n	8003f40 <__libc_init_array+0x24>
 8003f2c:	f000 fcc8 	bl	80048c0 <_init>
 8003f30:	2600      	movs	r6, #0
 8003f32:	4d0a      	ldr	r5, [pc, #40]	; (8003f5c <__libc_init_array+0x40>)
 8003f34:	4c0a      	ldr	r4, [pc, #40]	; (8003f60 <__libc_init_array+0x44>)
 8003f36:	1b64      	subs	r4, r4, r5
 8003f38:	10a4      	asrs	r4, r4, #2
 8003f3a:	42a6      	cmp	r6, r4
 8003f3c:	d105      	bne.n	8003f4a <__libc_init_array+0x2e>
 8003f3e:	bd70      	pop	{r4, r5, r6, pc}
 8003f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f44:	4798      	blx	r3
 8003f46:	3601      	adds	r6, #1
 8003f48:	e7ee      	b.n	8003f28 <__libc_init_array+0xc>
 8003f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f4e:	4798      	blx	r3
 8003f50:	3601      	adds	r6, #1
 8003f52:	e7f2      	b.n	8003f3a <__libc_init_array+0x1e>
 8003f54:	08005100 	.word	0x08005100
 8003f58:	08005100 	.word	0x08005100
 8003f5c:	08005100 	.word	0x08005100
 8003f60:	08005104 	.word	0x08005104

08003f64 <__itoa>:
 8003f64:	1e93      	subs	r3, r2, #2
 8003f66:	2b22      	cmp	r3, #34	; 0x22
 8003f68:	b510      	push	{r4, lr}
 8003f6a:	460c      	mov	r4, r1
 8003f6c:	d904      	bls.n	8003f78 <__itoa+0x14>
 8003f6e:	2300      	movs	r3, #0
 8003f70:	461c      	mov	r4, r3
 8003f72:	700b      	strb	r3, [r1, #0]
 8003f74:	4620      	mov	r0, r4
 8003f76:	bd10      	pop	{r4, pc}
 8003f78:	2a0a      	cmp	r2, #10
 8003f7a:	d109      	bne.n	8003f90 <__itoa+0x2c>
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	da07      	bge.n	8003f90 <__itoa+0x2c>
 8003f80:	232d      	movs	r3, #45	; 0x2d
 8003f82:	700b      	strb	r3, [r1, #0]
 8003f84:	2101      	movs	r1, #1
 8003f86:	4240      	negs	r0, r0
 8003f88:	4421      	add	r1, r4
 8003f8a:	f000 f83d 	bl	8004008 <__utoa>
 8003f8e:	e7f1      	b.n	8003f74 <__itoa+0x10>
 8003f90:	2100      	movs	r1, #0
 8003f92:	e7f9      	b.n	8003f88 <__itoa+0x24>

08003f94 <itoa>:
 8003f94:	f7ff bfe6 	b.w	8003f64 <__itoa>

08003f98 <memset>:
 8003f98:	4603      	mov	r3, r0
 8003f9a:	4402      	add	r2, r0
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d100      	bne.n	8003fa2 <memset+0xa>
 8003fa0:	4770      	bx	lr
 8003fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fa6:	e7f9      	b.n	8003f9c <memset+0x4>

08003fa8 <siprintf>:
 8003fa8:	b40e      	push	{r1, r2, r3}
 8003faa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fae:	b500      	push	{lr}
 8003fb0:	b09c      	sub	sp, #112	; 0x70
 8003fb2:	ab1d      	add	r3, sp, #116	; 0x74
 8003fb4:	9002      	str	r0, [sp, #8]
 8003fb6:	9006      	str	r0, [sp, #24]
 8003fb8:	9107      	str	r1, [sp, #28]
 8003fba:	9104      	str	r1, [sp, #16]
 8003fbc:	4808      	ldr	r0, [pc, #32]	; (8003fe0 <siprintf+0x38>)
 8003fbe:	4909      	ldr	r1, [pc, #36]	; (8003fe4 <siprintf+0x3c>)
 8003fc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fc4:	9105      	str	r1, [sp, #20]
 8003fc6:	6800      	ldr	r0, [r0, #0]
 8003fc8:	a902      	add	r1, sp, #8
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	f000 f8ba 	bl	8004144 <_svfiprintf_r>
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	9b02      	ldr	r3, [sp, #8]
 8003fd4:	701a      	strb	r2, [r3, #0]
 8003fd6:	b01c      	add	sp, #112	; 0x70
 8003fd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fdc:	b003      	add	sp, #12
 8003fde:	4770      	bx	lr
 8003fe0:	2000001c 	.word	0x2000001c
 8003fe4:	ffff0208 	.word	0xffff0208

08003fe8 <strcat>:
 8003fe8:	4602      	mov	r2, r0
 8003fea:	b510      	push	{r4, lr}
 8003fec:	7814      	ldrb	r4, [r2, #0]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	3201      	adds	r2, #1
 8003ff2:	2c00      	cmp	r4, #0
 8003ff4:	d1fa      	bne.n	8003fec <strcat+0x4>
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ffc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004000:	2a00      	cmp	r2, #0
 8004002:	d1f9      	bne.n	8003ff8 <strcat+0x10>
 8004004:	bd10      	pop	{r4, pc}
	...

08004008 <__utoa>:
 8004008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800400a:	b08b      	sub	sp, #44	; 0x2c
 800400c:	4605      	mov	r5, r0
 800400e:	460b      	mov	r3, r1
 8004010:	466e      	mov	r6, sp
 8004012:	4c1d      	ldr	r4, [pc, #116]	; (8004088 <__utoa+0x80>)
 8004014:	f104 0c20 	add.w	ip, r4, #32
 8004018:	4637      	mov	r7, r6
 800401a:	6820      	ldr	r0, [r4, #0]
 800401c:	6861      	ldr	r1, [r4, #4]
 800401e:	3408      	adds	r4, #8
 8004020:	c703      	stmia	r7!, {r0, r1}
 8004022:	4564      	cmp	r4, ip
 8004024:	463e      	mov	r6, r7
 8004026:	d1f7      	bne.n	8004018 <__utoa+0x10>
 8004028:	7921      	ldrb	r1, [r4, #4]
 800402a:	6820      	ldr	r0, [r4, #0]
 800402c:	7139      	strb	r1, [r7, #4]
 800402e:	1e91      	subs	r1, r2, #2
 8004030:	2922      	cmp	r1, #34	; 0x22
 8004032:	6038      	str	r0, [r7, #0]
 8004034:	f04f 0100 	mov.w	r1, #0
 8004038:	d904      	bls.n	8004044 <__utoa+0x3c>
 800403a:	7019      	strb	r1, [r3, #0]
 800403c:	460b      	mov	r3, r1
 800403e:	4618      	mov	r0, r3
 8004040:	b00b      	add	sp, #44	; 0x2c
 8004042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004044:	1e58      	subs	r0, r3, #1
 8004046:	4684      	mov	ip, r0
 8004048:	fbb5 f7f2 	udiv	r7, r5, r2
 800404c:	fb02 5617 	mls	r6, r2, r7, r5
 8004050:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8004054:	4476      	add	r6, lr
 8004056:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800405a:	460c      	mov	r4, r1
 800405c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004060:	462e      	mov	r6, r5
 8004062:	42b2      	cmp	r2, r6
 8004064:	463d      	mov	r5, r7
 8004066:	f101 0101 	add.w	r1, r1, #1
 800406a:	d9ed      	bls.n	8004048 <__utoa+0x40>
 800406c:	2200      	movs	r2, #0
 800406e:	545a      	strb	r2, [r3, r1]
 8004070:	1919      	adds	r1, r3, r4
 8004072:	1aa5      	subs	r5, r4, r2
 8004074:	42aa      	cmp	r2, r5
 8004076:	dae2      	bge.n	800403e <__utoa+0x36>
 8004078:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800407c:	780e      	ldrb	r6, [r1, #0]
 800407e:	3201      	adds	r2, #1
 8004080:	7006      	strb	r6, [r0, #0]
 8004082:	f801 5901 	strb.w	r5, [r1], #-1
 8004086:	e7f4      	b.n	8004072 <__utoa+0x6a>
 8004088:	080050a8 	.word	0x080050a8

0800408c <__ssputs_r>:
 800408c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004090:	688e      	ldr	r6, [r1, #8]
 8004092:	4682      	mov	sl, r0
 8004094:	429e      	cmp	r6, r3
 8004096:	460c      	mov	r4, r1
 8004098:	4690      	mov	r8, r2
 800409a:	461f      	mov	r7, r3
 800409c:	d838      	bhi.n	8004110 <__ssputs_r+0x84>
 800409e:	898a      	ldrh	r2, [r1, #12]
 80040a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040a4:	d032      	beq.n	800410c <__ssputs_r+0x80>
 80040a6:	6825      	ldr	r5, [r4, #0]
 80040a8:	6909      	ldr	r1, [r1, #16]
 80040aa:	3301      	adds	r3, #1
 80040ac:	eba5 0901 	sub.w	r9, r5, r1
 80040b0:	6965      	ldr	r5, [r4, #20]
 80040b2:	444b      	add	r3, r9
 80040b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040bc:	106d      	asrs	r5, r5, #1
 80040be:	429d      	cmp	r5, r3
 80040c0:	bf38      	it	cc
 80040c2:	461d      	movcc	r5, r3
 80040c4:	0553      	lsls	r3, r2, #21
 80040c6:	d531      	bpl.n	800412c <__ssputs_r+0xa0>
 80040c8:	4629      	mov	r1, r5
 80040ca:	f000 fb53 	bl	8004774 <_malloc_r>
 80040ce:	4606      	mov	r6, r0
 80040d0:	b950      	cbnz	r0, 80040e8 <__ssputs_r+0x5c>
 80040d2:	230c      	movs	r3, #12
 80040d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040d8:	f8ca 3000 	str.w	r3, [sl]
 80040dc:	89a3      	ldrh	r3, [r4, #12]
 80040de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040e2:	81a3      	strh	r3, [r4, #12]
 80040e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e8:	464a      	mov	r2, r9
 80040ea:	6921      	ldr	r1, [r4, #16]
 80040ec:	f000 face 	bl	800468c <memcpy>
 80040f0:	89a3      	ldrh	r3, [r4, #12]
 80040f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80040f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040fa:	81a3      	strh	r3, [r4, #12]
 80040fc:	6126      	str	r6, [r4, #16]
 80040fe:	444e      	add	r6, r9
 8004100:	6026      	str	r6, [r4, #0]
 8004102:	463e      	mov	r6, r7
 8004104:	6165      	str	r5, [r4, #20]
 8004106:	eba5 0509 	sub.w	r5, r5, r9
 800410a:	60a5      	str	r5, [r4, #8]
 800410c:	42be      	cmp	r6, r7
 800410e:	d900      	bls.n	8004112 <__ssputs_r+0x86>
 8004110:	463e      	mov	r6, r7
 8004112:	4632      	mov	r2, r6
 8004114:	4641      	mov	r1, r8
 8004116:	6820      	ldr	r0, [r4, #0]
 8004118:	f000 fac6 	bl	80046a8 <memmove>
 800411c:	68a3      	ldr	r3, [r4, #8]
 800411e:	6822      	ldr	r2, [r4, #0]
 8004120:	1b9b      	subs	r3, r3, r6
 8004122:	4432      	add	r2, r6
 8004124:	2000      	movs	r0, #0
 8004126:	60a3      	str	r3, [r4, #8]
 8004128:	6022      	str	r2, [r4, #0]
 800412a:	e7db      	b.n	80040e4 <__ssputs_r+0x58>
 800412c:	462a      	mov	r2, r5
 800412e:	f000 fb7b 	bl	8004828 <_realloc_r>
 8004132:	4606      	mov	r6, r0
 8004134:	2800      	cmp	r0, #0
 8004136:	d1e1      	bne.n	80040fc <__ssputs_r+0x70>
 8004138:	4650      	mov	r0, sl
 800413a:	6921      	ldr	r1, [r4, #16]
 800413c:	f000 face 	bl	80046dc <_free_r>
 8004140:	e7c7      	b.n	80040d2 <__ssputs_r+0x46>
	...

08004144 <_svfiprintf_r>:
 8004144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004148:	4698      	mov	r8, r3
 800414a:	898b      	ldrh	r3, [r1, #12]
 800414c:	4607      	mov	r7, r0
 800414e:	061b      	lsls	r3, r3, #24
 8004150:	460d      	mov	r5, r1
 8004152:	4614      	mov	r4, r2
 8004154:	b09d      	sub	sp, #116	; 0x74
 8004156:	d50e      	bpl.n	8004176 <_svfiprintf_r+0x32>
 8004158:	690b      	ldr	r3, [r1, #16]
 800415a:	b963      	cbnz	r3, 8004176 <_svfiprintf_r+0x32>
 800415c:	2140      	movs	r1, #64	; 0x40
 800415e:	f000 fb09 	bl	8004774 <_malloc_r>
 8004162:	6028      	str	r0, [r5, #0]
 8004164:	6128      	str	r0, [r5, #16]
 8004166:	b920      	cbnz	r0, 8004172 <_svfiprintf_r+0x2e>
 8004168:	230c      	movs	r3, #12
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004170:	e0d1      	b.n	8004316 <_svfiprintf_r+0x1d2>
 8004172:	2340      	movs	r3, #64	; 0x40
 8004174:	616b      	str	r3, [r5, #20]
 8004176:	2300      	movs	r3, #0
 8004178:	9309      	str	r3, [sp, #36]	; 0x24
 800417a:	2320      	movs	r3, #32
 800417c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004180:	2330      	movs	r3, #48	; 0x30
 8004182:	f04f 0901 	mov.w	r9, #1
 8004186:	f8cd 800c 	str.w	r8, [sp, #12]
 800418a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004330 <_svfiprintf_r+0x1ec>
 800418e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004192:	4623      	mov	r3, r4
 8004194:	469a      	mov	sl, r3
 8004196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800419a:	b10a      	cbz	r2, 80041a0 <_svfiprintf_r+0x5c>
 800419c:	2a25      	cmp	r2, #37	; 0x25
 800419e:	d1f9      	bne.n	8004194 <_svfiprintf_r+0x50>
 80041a0:	ebba 0b04 	subs.w	fp, sl, r4
 80041a4:	d00b      	beq.n	80041be <_svfiprintf_r+0x7a>
 80041a6:	465b      	mov	r3, fp
 80041a8:	4622      	mov	r2, r4
 80041aa:	4629      	mov	r1, r5
 80041ac:	4638      	mov	r0, r7
 80041ae:	f7ff ff6d 	bl	800408c <__ssputs_r>
 80041b2:	3001      	adds	r0, #1
 80041b4:	f000 80aa 	beq.w	800430c <_svfiprintf_r+0x1c8>
 80041b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041ba:	445a      	add	r2, fp
 80041bc:	9209      	str	r2, [sp, #36]	; 0x24
 80041be:	f89a 3000 	ldrb.w	r3, [sl]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 80a2 	beq.w	800430c <_svfiprintf_r+0x1c8>
 80041c8:	2300      	movs	r3, #0
 80041ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041d2:	f10a 0a01 	add.w	sl, sl, #1
 80041d6:	9304      	str	r3, [sp, #16]
 80041d8:	9307      	str	r3, [sp, #28]
 80041da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041de:	931a      	str	r3, [sp, #104]	; 0x68
 80041e0:	4654      	mov	r4, sl
 80041e2:	2205      	movs	r2, #5
 80041e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041e8:	4851      	ldr	r0, [pc, #324]	; (8004330 <_svfiprintf_r+0x1ec>)
 80041ea:	f000 fa41 	bl	8004670 <memchr>
 80041ee:	9a04      	ldr	r2, [sp, #16]
 80041f0:	b9d8      	cbnz	r0, 800422a <_svfiprintf_r+0xe6>
 80041f2:	06d0      	lsls	r0, r2, #27
 80041f4:	bf44      	itt	mi
 80041f6:	2320      	movmi	r3, #32
 80041f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041fc:	0711      	lsls	r1, r2, #28
 80041fe:	bf44      	itt	mi
 8004200:	232b      	movmi	r3, #43	; 0x2b
 8004202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004206:	f89a 3000 	ldrb.w	r3, [sl]
 800420a:	2b2a      	cmp	r3, #42	; 0x2a
 800420c:	d015      	beq.n	800423a <_svfiprintf_r+0xf6>
 800420e:	4654      	mov	r4, sl
 8004210:	2000      	movs	r0, #0
 8004212:	f04f 0c0a 	mov.w	ip, #10
 8004216:	9a07      	ldr	r2, [sp, #28]
 8004218:	4621      	mov	r1, r4
 800421a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800421e:	3b30      	subs	r3, #48	; 0x30
 8004220:	2b09      	cmp	r3, #9
 8004222:	d94e      	bls.n	80042c2 <_svfiprintf_r+0x17e>
 8004224:	b1b0      	cbz	r0, 8004254 <_svfiprintf_r+0x110>
 8004226:	9207      	str	r2, [sp, #28]
 8004228:	e014      	b.n	8004254 <_svfiprintf_r+0x110>
 800422a:	eba0 0308 	sub.w	r3, r0, r8
 800422e:	fa09 f303 	lsl.w	r3, r9, r3
 8004232:	4313      	orrs	r3, r2
 8004234:	46a2      	mov	sl, r4
 8004236:	9304      	str	r3, [sp, #16]
 8004238:	e7d2      	b.n	80041e0 <_svfiprintf_r+0x9c>
 800423a:	9b03      	ldr	r3, [sp, #12]
 800423c:	1d19      	adds	r1, r3, #4
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	9103      	str	r1, [sp, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	bfbb      	ittet	lt
 8004246:	425b      	neglt	r3, r3
 8004248:	f042 0202 	orrlt.w	r2, r2, #2
 800424c:	9307      	strge	r3, [sp, #28]
 800424e:	9307      	strlt	r3, [sp, #28]
 8004250:	bfb8      	it	lt
 8004252:	9204      	strlt	r2, [sp, #16]
 8004254:	7823      	ldrb	r3, [r4, #0]
 8004256:	2b2e      	cmp	r3, #46	; 0x2e
 8004258:	d10c      	bne.n	8004274 <_svfiprintf_r+0x130>
 800425a:	7863      	ldrb	r3, [r4, #1]
 800425c:	2b2a      	cmp	r3, #42	; 0x2a
 800425e:	d135      	bne.n	80042cc <_svfiprintf_r+0x188>
 8004260:	9b03      	ldr	r3, [sp, #12]
 8004262:	3402      	adds	r4, #2
 8004264:	1d1a      	adds	r2, r3, #4
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	9203      	str	r2, [sp, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	bfb8      	it	lt
 800426e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004272:	9305      	str	r3, [sp, #20]
 8004274:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004340 <_svfiprintf_r+0x1fc>
 8004278:	2203      	movs	r2, #3
 800427a:	4650      	mov	r0, sl
 800427c:	7821      	ldrb	r1, [r4, #0]
 800427e:	f000 f9f7 	bl	8004670 <memchr>
 8004282:	b140      	cbz	r0, 8004296 <_svfiprintf_r+0x152>
 8004284:	2340      	movs	r3, #64	; 0x40
 8004286:	eba0 000a 	sub.w	r0, r0, sl
 800428a:	fa03 f000 	lsl.w	r0, r3, r0
 800428e:	9b04      	ldr	r3, [sp, #16]
 8004290:	3401      	adds	r4, #1
 8004292:	4303      	orrs	r3, r0
 8004294:	9304      	str	r3, [sp, #16]
 8004296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800429a:	2206      	movs	r2, #6
 800429c:	4825      	ldr	r0, [pc, #148]	; (8004334 <_svfiprintf_r+0x1f0>)
 800429e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042a2:	f000 f9e5 	bl	8004670 <memchr>
 80042a6:	2800      	cmp	r0, #0
 80042a8:	d038      	beq.n	800431c <_svfiprintf_r+0x1d8>
 80042aa:	4b23      	ldr	r3, [pc, #140]	; (8004338 <_svfiprintf_r+0x1f4>)
 80042ac:	bb1b      	cbnz	r3, 80042f6 <_svfiprintf_r+0x1b2>
 80042ae:	9b03      	ldr	r3, [sp, #12]
 80042b0:	3307      	adds	r3, #7
 80042b2:	f023 0307 	bic.w	r3, r3, #7
 80042b6:	3308      	adds	r3, #8
 80042b8:	9303      	str	r3, [sp, #12]
 80042ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042bc:	4433      	add	r3, r6
 80042be:	9309      	str	r3, [sp, #36]	; 0x24
 80042c0:	e767      	b.n	8004192 <_svfiprintf_r+0x4e>
 80042c2:	460c      	mov	r4, r1
 80042c4:	2001      	movs	r0, #1
 80042c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80042ca:	e7a5      	b.n	8004218 <_svfiprintf_r+0xd4>
 80042cc:	2300      	movs	r3, #0
 80042ce:	f04f 0c0a 	mov.w	ip, #10
 80042d2:	4619      	mov	r1, r3
 80042d4:	3401      	adds	r4, #1
 80042d6:	9305      	str	r3, [sp, #20]
 80042d8:	4620      	mov	r0, r4
 80042da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042de:	3a30      	subs	r2, #48	; 0x30
 80042e0:	2a09      	cmp	r2, #9
 80042e2:	d903      	bls.n	80042ec <_svfiprintf_r+0x1a8>
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0c5      	beq.n	8004274 <_svfiprintf_r+0x130>
 80042e8:	9105      	str	r1, [sp, #20]
 80042ea:	e7c3      	b.n	8004274 <_svfiprintf_r+0x130>
 80042ec:	4604      	mov	r4, r0
 80042ee:	2301      	movs	r3, #1
 80042f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80042f4:	e7f0      	b.n	80042d8 <_svfiprintf_r+0x194>
 80042f6:	ab03      	add	r3, sp, #12
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	462a      	mov	r2, r5
 80042fc:	4638      	mov	r0, r7
 80042fe:	4b0f      	ldr	r3, [pc, #60]	; (800433c <_svfiprintf_r+0x1f8>)
 8004300:	a904      	add	r1, sp, #16
 8004302:	f3af 8000 	nop.w
 8004306:	1c42      	adds	r2, r0, #1
 8004308:	4606      	mov	r6, r0
 800430a:	d1d6      	bne.n	80042ba <_svfiprintf_r+0x176>
 800430c:	89ab      	ldrh	r3, [r5, #12]
 800430e:	065b      	lsls	r3, r3, #25
 8004310:	f53f af2c 	bmi.w	800416c <_svfiprintf_r+0x28>
 8004314:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004316:	b01d      	add	sp, #116	; 0x74
 8004318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800431c:	ab03      	add	r3, sp, #12
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	462a      	mov	r2, r5
 8004322:	4638      	mov	r0, r7
 8004324:	4b05      	ldr	r3, [pc, #20]	; (800433c <_svfiprintf_r+0x1f8>)
 8004326:	a904      	add	r1, sp, #16
 8004328:	f000 f87c 	bl	8004424 <_printf_i>
 800432c:	e7eb      	b.n	8004306 <_svfiprintf_r+0x1c2>
 800432e:	bf00      	nop
 8004330:	080050cd 	.word	0x080050cd
 8004334:	080050d7 	.word	0x080050d7
 8004338:	00000000 	.word	0x00000000
 800433c:	0800408d 	.word	0x0800408d
 8004340:	080050d3 	.word	0x080050d3

08004344 <_printf_common>:
 8004344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004348:	4616      	mov	r6, r2
 800434a:	4699      	mov	r9, r3
 800434c:	688a      	ldr	r2, [r1, #8]
 800434e:	690b      	ldr	r3, [r1, #16]
 8004350:	4607      	mov	r7, r0
 8004352:	4293      	cmp	r3, r2
 8004354:	bfb8      	it	lt
 8004356:	4613      	movlt	r3, r2
 8004358:	6033      	str	r3, [r6, #0]
 800435a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800435e:	460c      	mov	r4, r1
 8004360:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004364:	b10a      	cbz	r2, 800436a <_printf_common+0x26>
 8004366:	3301      	adds	r3, #1
 8004368:	6033      	str	r3, [r6, #0]
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	0699      	lsls	r1, r3, #26
 800436e:	bf42      	ittt	mi
 8004370:	6833      	ldrmi	r3, [r6, #0]
 8004372:	3302      	addmi	r3, #2
 8004374:	6033      	strmi	r3, [r6, #0]
 8004376:	6825      	ldr	r5, [r4, #0]
 8004378:	f015 0506 	ands.w	r5, r5, #6
 800437c:	d106      	bne.n	800438c <_printf_common+0x48>
 800437e:	f104 0a19 	add.w	sl, r4, #25
 8004382:	68e3      	ldr	r3, [r4, #12]
 8004384:	6832      	ldr	r2, [r6, #0]
 8004386:	1a9b      	subs	r3, r3, r2
 8004388:	42ab      	cmp	r3, r5
 800438a:	dc28      	bgt.n	80043de <_printf_common+0x9a>
 800438c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004390:	1e13      	subs	r3, r2, #0
 8004392:	6822      	ldr	r2, [r4, #0]
 8004394:	bf18      	it	ne
 8004396:	2301      	movne	r3, #1
 8004398:	0692      	lsls	r2, r2, #26
 800439a:	d42d      	bmi.n	80043f8 <_printf_common+0xb4>
 800439c:	4649      	mov	r1, r9
 800439e:	4638      	mov	r0, r7
 80043a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043a4:	47c0      	blx	r8
 80043a6:	3001      	adds	r0, #1
 80043a8:	d020      	beq.n	80043ec <_printf_common+0xa8>
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	68e5      	ldr	r5, [r4, #12]
 80043ae:	f003 0306 	and.w	r3, r3, #6
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	bf18      	it	ne
 80043b6:	2500      	movne	r5, #0
 80043b8:	6832      	ldr	r2, [r6, #0]
 80043ba:	f04f 0600 	mov.w	r6, #0
 80043be:	68a3      	ldr	r3, [r4, #8]
 80043c0:	bf08      	it	eq
 80043c2:	1aad      	subeq	r5, r5, r2
 80043c4:	6922      	ldr	r2, [r4, #16]
 80043c6:	bf08      	it	eq
 80043c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043cc:	4293      	cmp	r3, r2
 80043ce:	bfc4      	itt	gt
 80043d0:	1a9b      	subgt	r3, r3, r2
 80043d2:	18ed      	addgt	r5, r5, r3
 80043d4:	341a      	adds	r4, #26
 80043d6:	42b5      	cmp	r5, r6
 80043d8:	d11a      	bne.n	8004410 <_printf_common+0xcc>
 80043da:	2000      	movs	r0, #0
 80043dc:	e008      	b.n	80043f0 <_printf_common+0xac>
 80043de:	2301      	movs	r3, #1
 80043e0:	4652      	mov	r2, sl
 80043e2:	4649      	mov	r1, r9
 80043e4:	4638      	mov	r0, r7
 80043e6:	47c0      	blx	r8
 80043e8:	3001      	adds	r0, #1
 80043ea:	d103      	bne.n	80043f4 <_printf_common+0xb0>
 80043ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f4:	3501      	adds	r5, #1
 80043f6:	e7c4      	b.n	8004382 <_printf_common+0x3e>
 80043f8:	2030      	movs	r0, #48	; 0x30
 80043fa:	18e1      	adds	r1, r4, r3
 80043fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004406:	4422      	add	r2, r4
 8004408:	3302      	adds	r3, #2
 800440a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800440e:	e7c5      	b.n	800439c <_printf_common+0x58>
 8004410:	2301      	movs	r3, #1
 8004412:	4622      	mov	r2, r4
 8004414:	4649      	mov	r1, r9
 8004416:	4638      	mov	r0, r7
 8004418:	47c0      	blx	r8
 800441a:	3001      	adds	r0, #1
 800441c:	d0e6      	beq.n	80043ec <_printf_common+0xa8>
 800441e:	3601      	adds	r6, #1
 8004420:	e7d9      	b.n	80043d6 <_printf_common+0x92>
	...

08004424 <_printf_i>:
 8004424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004428:	460c      	mov	r4, r1
 800442a:	7e27      	ldrb	r7, [r4, #24]
 800442c:	4691      	mov	r9, r2
 800442e:	2f78      	cmp	r7, #120	; 0x78
 8004430:	4680      	mov	r8, r0
 8004432:	469a      	mov	sl, r3
 8004434:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004436:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800443a:	d807      	bhi.n	800444c <_printf_i+0x28>
 800443c:	2f62      	cmp	r7, #98	; 0x62
 800443e:	d80a      	bhi.n	8004456 <_printf_i+0x32>
 8004440:	2f00      	cmp	r7, #0
 8004442:	f000 80d9 	beq.w	80045f8 <_printf_i+0x1d4>
 8004446:	2f58      	cmp	r7, #88	; 0x58
 8004448:	f000 80a4 	beq.w	8004594 <_printf_i+0x170>
 800444c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004454:	e03a      	b.n	80044cc <_printf_i+0xa8>
 8004456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800445a:	2b15      	cmp	r3, #21
 800445c:	d8f6      	bhi.n	800444c <_printf_i+0x28>
 800445e:	a001      	add	r0, pc, #4	; (adr r0, 8004464 <_printf_i+0x40>)
 8004460:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004464:	080044bd 	.word	0x080044bd
 8004468:	080044d1 	.word	0x080044d1
 800446c:	0800444d 	.word	0x0800444d
 8004470:	0800444d 	.word	0x0800444d
 8004474:	0800444d 	.word	0x0800444d
 8004478:	0800444d 	.word	0x0800444d
 800447c:	080044d1 	.word	0x080044d1
 8004480:	0800444d 	.word	0x0800444d
 8004484:	0800444d 	.word	0x0800444d
 8004488:	0800444d 	.word	0x0800444d
 800448c:	0800444d 	.word	0x0800444d
 8004490:	080045df 	.word	0x080045df
 8004494:	08004501 	.word	0x08004501
 8004498:	080045c1 	.word	0x080045c1
 800449c:	0800444d 	.word	0x0800444d
 80044a0:	0800444d 	.word	0x0800444d
 80044a4:	08004601 	.word	0x08004601
 80044a8:	0800444d 	.word	0x0800444d
 80044ac:	08004501 	.word	0x08004501
 80044b0:	0800444d 	.word	0x0800444d
 80044b4:	0800444d 	.word	0x0800444d
 80044b8:	080045c9 	.word	0x080045c9
 80044bc:	680b      	ldr	r3, [r1, #0]
 80044be:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044c2:	1d1a      	adds	r2, r3, #4
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	600a      	str	r2, [r1, #0]
 80044c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044cc:	2301      	movs	r3, #1
 80044ce:	e0a4      	b.n	800461a <_printf_i+0x1f6>
 80044d0:	6825      	ldr	r5, [r4, #0]
 80044d2:	6808      	ldr	r0, [r1, #0]
 80044d4:	062e      	lsls	r6, r5, #24
 80044d6:	f100 0304 	add.w	r3, r0, #4
 80044da:	d50a      	bpl.n	80044f2 <_printf_i+0xce>
 80044dc:	6805      	ldr	r5, [r0, #0]
 80044de:	600b      	str	r3, [r1, #0]
 80044e0:	2d00      	cmp	r5, #0
 80044e2:	da03      	bge.n	80044ec <_printf_i+0xc8>
 80044e4:	232d      	movs	r3, #45	; 0x2d
 80044e6:	426d      	negs	r5, r5
 80044e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ec:	230a      	movs	r3, #10
 80044ee:	485e      	ldr	r0, [pc, #376]	; (8004668 <_printf_i+0x244>)
 80044f0:	e019      	b.n	8004526 <_printf_i+0x102>
 80044f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80044f6:	6805      	ldr	r5, [r0, #0]
 80044f8:	600b      	str	r3, [r1, #0]
 80044fa:	bf18      	it	ne
 80044fc:	b22d      	sxthne	r5, r5
 80044fe:	e7ef      	b.n	80044e0 <_printf_i+0xbc>
 8004500:	680b      	ldr	r3, [r1, #0]
 8004502:	6825      	ldr	r5, [r4, #0]
 8004504:	1d18      	adds	r0, r3, #4
 8004506:	6008      	str	r0, [r1, #0]
 8004508:	0628      	lsls	r0, r5, #24
 800450a:	d501      	bpl.n	8004510 <_printf_i+0xec>
 800450c:	681d      	ldr	r5, [r3, #0]
 800450e:	e002      	b.n	8004516 <_printf_i+0xf2>
 8004510:	0669      	lsls	r1, r5, #25
 8004512:	d5fb      	bpl.n	800450c <_printf_i+0xe8>
 8004514:	881d      	ldrh	r5, [r3, #0]
 8004516:	2f6f      	cmp	r7, #111	; 0x6f
 8004518:	bf0c      	ite	eq
 800451a:	2308      	moveq	r3, #8
 800451c:	230a      	movne	r3, #10
 800451e:	4852      	ldr	r0, [pc, #328]	; (8004668 <_printf_i+0x244>)
 8004520:	2100      	movs	r1, #0
 8004522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004526:	6866      	ldr	r6, [r4, #4]
 8004528:	2e00      	cmp	r6, #0
 800452a:	bfa8      	it	ge
 800452c:	6821      	ldrge	r1, [r4, #0]
 800452e:	60a6      	str	r6, [r4, #8]
 8004530:	bfa4      	itt	ge
 8004532:	f021 0104 	bicge.w	r1, r1, #4
 8004536:	6021      	strge	r1, [r4, #0]
 8004538:	b90d      	cbnz	r5, 800453e <_printf_i+0x11a>
 800453a:	2e00      	cmp	r6, #0
 800453c:	d04d      	beq.n	80045da <_printf_i+0x1b6>
 800453e:	4616      	mov	r6, r2
 8004540:	fbb5 f1f3 	udiv	r1, r5, r3
 8004544:	fb03 5711 	mls	r7, r3, r1, r5
 8004548:	5dc7      	ldrb	r7, [r0, r7]
 800454a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800454e:	462f      	mov	r7, r5
 8004550:	42bb      	cmp	r3, r7
 8004552:	460d      	mov	r5, r1
 8004554:	d9f4      	bls.n	8004540 <_printf_i+0x11c>
 8004556:	2b08      	cmp	r3, #8
 8004558:	d10b      	bne.n	8004572 <_printf_i+0x14e>
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	07df      	lsls	r7, r3, #31
 800455e:	d508      	bpl.n	8004572 <_printf_i+0x14e>
 8004560:	6923      	ldr	r3, [r4, #16]
 8004562:	6861      	ldr	r1, [r4, #4]
 8004564:	4299      	cmp	r1, r3
 8004566:	bfde      	ittt	le
 8004568:	2330      	movle	r3, #48	; 0x30
 800456a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800456e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004572:	1b92      	subs	r2, r2, r6
 8004574:	6122      	str	r2, [r4, #16]
 8004576:	464b      	mov	r3, r9
 8004578:	4621      	mov	r1, r4
 800457a:	4640      	mov	r0, r8
 800457c:	f8cd a000 	str.w	sl, [sp]
 8004580:	aa03      	add	r2, sp, #12
 8004582:	f7ff fedf 	bl	8004344 <_printf_common>
 8004586:	3001      	adds	r0, #1
 8004588:	d14c      	bne.n	8004624 <_printf_i+0x200>
 800458a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800458e:	b004      	add	sp, #16
 8004590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004594:	4834      	ldr	r0, [pc, #208]	; (8004668 <_printf_i+0x244>)
 8004596:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800459a:	680e      	ldr	r6, [r1, #0]
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	f856 5b04 	ldr.w	r5, [r6], #4
 80045a2:	061f      	lsls	r7, r3, #24
 80045a4:	600e      	str	r6, [r1, #0]
 80045a6:	d514      	bpl.n	80045d2 <_printf_i+0x1ae>
 80045a8:	07d9      	lsls	r1, r3, #31
 80045aa:	bf44      	itt	mi
 80045ac:	f043 0320 	orrmi.w	r3, r3, #32
 80045b0:	6023      	strmi	r3, [r4, #0]
 80045b2:	b91d      	cbnz	r5, 80045bc <_printf_i+0x198>
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	f023 0320 	bic.w	r3, r3, #32
 80045ba:	6023      	str	r3, [r4, #0]
 80045bc:	2310      	movs	r3, #16
 80045be:	e7af      	b.n	8004520 <_printf_i+0xfc>
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	f043 0320 	orr.w	r3, r3, #32
 80045c6:	6023      	str	r3, [r4, #0]
 80045c8:	2378      	movs	r3, #120	; 0x78
 80045ca:	4828      	ldr	r0, [pc, #160]	; (800466c <_printf_i+0x248>)
 80045cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045d0:	e7e3      	b.n	800459a <_printf_i+0x176>
 80045d2:	065e      	lsls	r6, r3, #25
 80045d4:	bf48      	it	mi
 80045d6:	b2ad      	uxthmi	r5, r5
 80045d8:	e7e6      	b.n	80045a8 <_printf_i+0x184>
 80045da:	4616      	mov	r6, r2
 80045dc:	e7bb      	b.n	8004556 <_printf_i+0x132>
 80045de:	680b      	ldr	r3, [r1, #0]
 80045e0:	6826      	ldr	r6, [r4, #0]
 80045e2:	1d1d      	adds	r5, r3, #4
 80045e4:	6960      	ldr	r0, [r4, #20]
 80045e6:	600d      	str	r5, [r1, #0]
 80045e8:	0635      	lsls	r5, r6, #24
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	d501      	bpl.n	80045f2 <_printf_i+0x1ce>
 80045ee:	6018      	str	r0, [r3, #0]
 80045f0:	e002      	b.n	80045f8 <_printf_i+0x1d4>
 80045f2:	0671      	lsls	r1, r6, #25
 80045f4:	d5fb      	bpl.n	80045ee <_printf_i+0x1ca>
 80045f6:	8018      	strh	r0, [r3, #0]
 80045f8:	2300      	movs	r3, #0
 80045fa:	4616      	mov	r6, r2
 80045fc:	6123      	str	r3, [r4, #16]
 80045fe:	e7ba      	b.n	8004576 <_printf_i+0x152>
 8004600:	680b      	ldr	r3, [r1, #0]
 8004602:	1d1a      	adds	r2, r3, #4
 8004604:	600a      	str	r2, [r1, #0]
 8004606:	681e      	ldr	r6, [r3, #0]
 8004608:	2100      	movs	r1, #0
 800460a:	4630      	mov	r0, r6
 800460c:	6862      	ldr	r2, [r4, #4]
 800460e:	f000 f82f 	bl	8004670 <memchr>
 8004612:	b108      	cbz	r0, 8004618 <_printf_i+0x1f4>
 8004614:	1b80      	subs	r0, r0, r6
 8004616:	6060      	str	r0, [r4, #4]
 8004618:	6863      	ldr	r3, [r4, #4]
 800461a:	6123      	str	r3, [r4, #16]
 800461c:	2300      	movs	r3, #0
 800461e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004622:	e7a8      	b.n	8004576 <_printf_i+0x152>
 8004624:	4632      	mov	r2, r6
 8004626:	4649      	mov	r1, r9
 8004628:	4640      	mov	r0, r8
 800462a:	6923      	ldr	r3, [r4, #16]
 800462c:	47d0      	blx	sl
 800462e:	3001      	adds	r0, #1
 8004630:	d0ab      	beq.n	800458a <_printf_i+0x166>
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	079b      	lsls	r3, r3, #30
 8004636:	d413      	bmi.n	8004660 <_printf_i+0x23c>
 8004638:	68e0      	ldr	r0, [r4, #12]
 800463a:	9b03      	ldr	r3, [sp, #12]
 800463c:	4298      	cmp	r0, r3
 800463e:	bfb8      	it	lt
 8004640:	4618      	movlt	r0, r3
 8004642:	e7a4      	b.n	800458e <_printf_i+0x16a>
 8004644:	2301      	movs	r3, #1
 8004646:	4632      	mov	r2, r6
 8004648:	4649      	mov	r1, r9
 800464a:	4640      	mov	r0, r8
 800464c:	47d0      	blx	sl
 800464e:	3001      	adds	r0, #1
 8004650:	d09b      	beq.n	800458a <_printf_i+0x166>
 8004652:	3501      	adds	r5, #1
 8004654:	68e3      	ldr	r3, [r4, #12]
 8004656:	9903      	ldr	r1, [sp, #12]
 8004658:	1a5b      	subs	r3, r3, r1
 800465a:	42ab      	cmp	r3, r5
 800465c:	dcf2      	bgt.n	8004644 <_printf_i+0x220>
 800465e:	e7eb      	b.n	8004638 <_printf_i+0x214>
 8004660:	2500      	movs	r5, #0
 8004662:	f104 0619 	add.w	r6, r4, #25
 8004666:	e7f5      	b.n	8004654 <_printf_i+0x230>
 8004668:	080050de 	.word	0x080050de
 800466c:	080050ef 	.word	0x080050ef

08004670 <memchr>:
 8004670:	4603      	mov	r3, r0
 8004672:	b510      	push	{r4, lr}
 8004674:	b2c9      	uxtb	r1, r1
 8004676:	4402      	add	r2, r0
 8004678:	4293      	cmp	r3, r2
 800467a:	4618      	mov	r0, r3
 800467c:	d101      	bne.n	8004682 <memchr+0x12>
 800467e:	2000      	movs	r0, #0
 8004680:	e003      	b.n	800468a <memchr+0x1a>
 8004682:	7804      	ldrb	r4, [r0, #0]
 8004684:	3301      	adds	r3, #1
 8004686:	428c      	cmp	r4, r1
 8004688:	d1f6      	bne.n	8004678 <memchr+0x8>
 800468a:	bd10      	pop	{r4, pc}

0800468c <memcpy>:
 800468c:	440a      	add	r2, r1
 800468e:	4291      	cmp	r1, r2
 8004690:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004694:	d100      	bne.n	8004698 <memcpy+0xc>
 8004696:	4770      	bx	lr
 8004698:	b510      	push	{r4, lr}
 800469a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800469e:	4291      	cmp	r1, r2
 80046a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046a4:	d1f9      	bne.n	800469a <memcpy+0xe>
 80046a6:	bd10      	pop	{r4, pc}

080046a8 <memmove>:
 80046a8:	4288      	cmp	r0, r1
 80046aa:	b510      	push	{r4, lr}
 80046ac:	eb01 0402 	add.w	r4, r1, r2
 80046b0:	d902      	bls.n	80046b8 <memmove+0x10>
 80046b2:	4284      	cmp	r4, r0
 80046b4:	4623      	mov	r3, r4
 80046b6:	d807      	bhi.n	80046c8 <memmove+0x20>
 80046b8:	1e43      	subs	r3, r0, #1
 80046ba:	42a1      	cmp	r1, r4
 80046bc:	d008      	beq.n	80046d0 <memmove+0x28>
 80046be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046c6:	e7f8      	b.n	80046ba <memmove+0x12>
 80046c8:	4601      	mov	r1, r0
 80046ca:	4402      	add	r2, r0
 80046cc:	428a      	cmp	r2, r1
 80046ce:	d100      	bne.n	80046d2 <memmove+0x2a>
 80046d0:	bd10      	pop	{r4, pc}
 80046d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046da:	e7f7      	b.n	80046cc <memmove+0x24>

080046dc <_free_r>:
 80046dc:	b538      	push	{r3, r4, r5, lr}
 80046de:	4605      	mov	r5, r0
 80046e0:	2900      	cmp	r1, #0
 80046e2:	d043      	beq.n	800476c <_free_r+0x90>
 80046e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046e8:	1f0c      	subs	r4, r1, #4
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	bfb8      	it	lt
 80046ee:	18e4      	addlt	r4, r4, r3
 80046f0:	f000 f8d0 	bl	8004894 <__malloc_lock>
 80046f4:	4a1e      	ldr	r2, [pc, #120]	; (8004770 <_free_r+0x94>)
 80046f6:	6813      	ldr	r3, [r2, #0]
 80046f8:	4610      	mov	r0, r2
 80046fa:	b933      	cbnz	r3, 800470a <_free_r+0x2e>
 80046fc:	6063      	str	r3, [r4, #4]
 80046fe:	6014      	str	r4, [r2, #0]
 8004700:	4628      	mov	r0, r5
 8004702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004706:	f000 b8cb 	b.w	80048a0 <__malloc_unlock>
 800470a:	42a3      	cmp	r3, r4
 800470c:	d90a      	bls.n	8004724 <_free_r+0x48>
 800470e:	6821      	ldr	r1, [r4, #0]
 8004710:	1862      	adds	r2, r4, r1
 8004712:	4293      	cmp	r3, r2
 8004714:	bf01      	itttt	eq
 8004716:	681a      	ldreq	r2, [r3, #0]
 8004718:	685b      	ldreq	r3, [r3, #4]
 800471a:	1852      	addeq	r2, r2, r1
 800471c:	6022      	streq	r2, [r4, #0]
 800471e:	6063      	str	r3, [r4, #4]
 8004720:	6004      	str	r4, [r0, #0]
 8004722:	e7ed      	b.n	8004700 <_free_r+0x24>
 8004724:	461a      	mov	r2, r3
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	b10b      	cbz	r3, 800472e <_free_r+0x52>
 800472a:	42a3      	cmp	r3, r4
 800472c:	d9fa      	bls.n	8004724 <_free_r+0x48>
 800472e:	6811      	ldr	r1, [r2, #0]
 8004730:	1850      	adds	r0, r2, r1
 8004732:	42a0      	cmp	r0, r4
 8004734:	d10b      	bne.n	800474e <_free_r+0x72>
 8004736:	6820      	ldr	r0, [r4, #0]
 8004738:	4401      	add	r1, r0
 800473a:	1850      	adds	r0, r2, r1
 800473c:	4283      	cmp	r3, r0
 800473e:	6011      	str	r1, [r2, #0]
 8004740:	d1de      	bne.n	8004700 <_free_r+0x24>
 8004742:	6818      	ldr	r0, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	4401      	add	r1, r0
 8004748:	6011      	str	r1, [r2, #0]
 800474a:	6053      	str	r3, [r2, #4]
 800474c:	e7d8      	b.n	8004700 <_free_r+0x24>
 800474e:	d902      	bls.n	8004756 <_free_r+0x7a>
 8004750:	230c      	movs	r3, #12
 8004752:	602b      	str	r3, [r5, #0]
 8004754:	e7d4      	b.n	8004700 <_free_r+0x24>
 8004756:	6820      	ldr	r0, [r4, #0]
 8004758:	1821      	adds	r1, r4, r0
 800475a:	428b      	cmp	r3, r1
 800475c:	bf01      	itttt	eq
 800475e:	6819      	ldreq	r1, [r3, #0]
 8004760:	685b      	ldreq	r3, [r3, #4]
 8004762:	1809      	addeq	r1, r1, r0
 8004764:	6021      	streq	r1, [r4, #0]
 8004766:	6063      	str	r3, [r4, #4]
 8004768:	6054      	str	r4, [r2, #4]
 800476a:	e7c9      	b.n	8004700 <_free_r+0x24>
 800476c:	bd38      	pop	{r3, r4, r5, pc}
 800476e:	bf00      	nop
 8004770:	200004d4 	.word	0x200004d4

08004774 <_malloc_r>:
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	1ccd      	adds	r5, r1, #3
 8004778:	f025 0503 	bic.w	r5, r5, #3
 800477c:	3508      	adds	r5, #8
 800477e:	2d0c      	cmp	r5, #12
 8004780:	bf38      	it	cc
 8004782:	250c      	movcc	r5, #12
 8004784:	2d00      	cmp	r5, #0
 8004786:	4606      	mov	r6, r0
 8004788:	db01      	blt.n	800478e <_malloc_r+0x1a>
 800478a:	42a9      	cmp	r1, r5
 800478c:	d903      	bls.n	8004796 <_malloc_r+0x22>
 800478e:	230c      	movs	r3, #12
 8004790:	6033      	str	r3, [r6, #0]
 8004792:	2000      	movs	r0, #0
 8004794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004796:	f000 f87d 	bl	8004894 <__malloc_lock>
 800479a:	4921      	ldr	r1, [pc, #132]	; (8004820 <_malloc_r+0xac>)
 800479c:	680a      	ldr	r2, [r1, #0]
 800479e:	4614      	mov	r4, r2
 80047a0:	b99c      	cbnz	r4, 80047ca <_malloc_r+0x56>
 80047a2:	4f20      	ldr	r7, [pc, #128]	; (8004824 <_malloc_r+0xb0>)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	b923      	cbnz	r3, 80047b2 <_malloc_r+0x3e>
 80047a8:	4621      	mov	r1, r4
 80047aa:	4630      	mov	r0, r6
 80047ac:	f000 f862 	bl	8004874 <_sbrk_r>
 80047b0:	6038      	str	r0, [r7, #0]
 80047b2:	4629      	mov	r1, r5
 80047b4:	4630      	mov	r0, r6
 80047b6:	f000 f85d 	bl	8004874 <_sbrk_r>
 80047ba:	1c43      	adds	r3, r0, #1
 80047bc:	d123      	bne.n	8004806 <_malloc_r+0x92>
 80047be:	230c      	movs	r3, #12
 80047c0:	4630      	mov	r0, r6
 80047c2:	6033      	str	r3, [r6, #0]
 80047c4:	f000 f86c 	bl	80048a0 <__malloc_unlock>
 80047c8:	e7e3      	b.n	8004792 <_malloc_r+0x1e>
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	1b5b      	subs	r3, r3, r5
 80047ce:	d417      	bmi.n	8004800 <_malloc_r+0x8c>
 80047d0:	2b0b      	cmp	r3, #11
 80047d2:	d903      	bls.n	80047dc <_malloc_r+0x68>
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	441c      	add	r4, r3
 80047d8:	6025      	str	r5, [r4, #0]
 80047da:	e004      	b.n	80047e6 <_malloc_r+0x72>
 80047dc:	6863      	ldr	r3, [r4, #4]
 80047de:	42a2      	cmp	r2, r4
 80047e0:	bf0c      	ite	eq
 80047e2:	600b      	streq	r3, [r1, #0]
 80047e4:	6053      	strne	r3, [r2, #4]
 80047e6:	4630      	mov	r0, r6
 80047e8:	f000 f85a 	bl	80048a0 <__malloc_unlock>
 80047ec:	f104 000b 	add.w	r0, r4, #11
 80047f0:	1d23      	adds	r3, r4, #4
 80047f2:	f020 0007 	bic.w	r0, r0, #7
 80047f6:	1ac2      	subs	r2, r0, r3
 80047f8:	d0cc      	beq.n	8004794 <_malloc_r+0x20>
 80047fa:	1a1b      	subs	r3, r3, r0
 80047fc:	50a3      	str	r3, [r4, r2]
 80047fe:	e7c9      	b.n	8004794 <_malloc_r+0x20>
 8004800:	4622      	mov	r2, r4
 8004802:	6864      	ldr	r4, [r4, #4]
 8004804:	e7cc      	b.n	80047a0 <_malloc_r+0x2c>
 8004806:	1cc4      	adds	r4, r0, #3
 8004808:	f024 0403 	bic.w	r4, r4, #3
 800480c:	42a0      	cmp	r0, r4
 800480e:	d0e3      	beq.n	80047d8 <_malloc_r+0x64>
 8004810:	1a21      	subs	r1, r4, r0
 8004812:	4630      	mov	r0, r6
 8004814:	f000 f82e 	bl	8004874 <_sbrk_r>
 8004818:	3001      	adds	r0, #1
 800481a:	d1dd      	bne.n	80047d8 <_malloc_r+0x64>
 800481c:	e7cf      	b.n	80047be <_malloc_r+0x4a>
 800481e:	bf00      	nop
 8004820:	200004d4 	.word	0x200004d4
 8004824:	200004d8 	.word	0x200004d8

08004828 <_realloc_r>:
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	4607      	mov	r7, r0
 800482c:	4614      	mov	r4, r2
 800482e:	460e      	mov	r6, r1
 8004830:	b921      	cbnz	r1, 800483c <_realloc_r+0x14>
 8004832:	4611      	mov	r1, r2
 8004834:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004838:	f7ff bf9c 	b.w	8004774 <_malloc_r>
 800483c:	b922      	cbnz	r2, 8004848 <_realloc_r+0x20>
 800483e:	f7ff ff4d 	bl	80046dc <_free_r>
 8004842:	4625      	mov	r5, r4
 8004844:	4628      	mov	r0, r5
 8004846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004848:	f000 f830 	bl	80048ac <_malloc_usable_size_r>
 800484c:	42a0      	cmp	r0, r4
 800484e:	d20f      	bcs.n	8004870 <_realloc_r+0x48>
 8004850:	4621      	mov	r1, r4
 8004852:	4638      	mov	r0, r7
 8004854:	f7ff ff8e 	bl	8004774 <_malloc_r>
 8004858:	4605      	mov	r5, r0
 800485a:	2800      	cmp	r0, #0
 800485c:	d0f2      	beq.n	8004844 <_realloc_r+0x1c>
 800485e:	4631      	mov	r1, r6
 8004860:	4622      	mov	r2, r4
 8004862:	f7ff ff13 	bl	800468c <memcpy>
 8004866:	4631      	mov	r1, r6
 8004868:	4638      	mov	r0, r7
 800486a:	f7ff ff37 	bl	80046dc <_free_r>
 800486e:	e7e9      	b.n	8004844 <_realloc_r+0x1c>
 8004870:	4635      	mov	r5, r6
 8004872:	e7e7      	b.n	8004844 <_realloc_r+0x1c>

08004874 <_sbrk_r>:
 8004874:	b538      	push	{r3, r4, r5, lr}
 8004876:	2300      	movs	r3, #0
 8004878:	4d05      	ldr	r5, [pc, #20]	; (8004890 <_sbrk_r+0x1c>)
 800487a:	4604      	mov	r4, r0
 800487c:	4608      	mov	r0, r1
 800487e:	602b      	str	r3, [r5, #0]
 8004880:	f7fc fd10 	bl	80012a4 <_sbrk>
 8004884:	1c43      	adds	r3, r0, #1
 8004886:	d102      	bne.n	800488e <_sbrk_r+0x1a>
 8004888:	682b      	ldr	r3, [r5, #0]
 800488a:	b103      	cbz	r3, 800488e <_sbrk_r+0x1a>
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	bd38      	pop	{r3, r4, r5, pc}
 8004890:	200005d0 	.word	0x200005d0

08004894 <__malloc_lock>:
 8004894:	4801      	ldr	r0, [pc, #4]	; (800489c <__malloc_lock+0x8>)
 8004896:	f000 b811 	b.w	80048bc <__retarget_lock_acquire_recursive>
 800489a:	bf00      	nop
 800489c:	200005d8 	.word	0x200005d8

080048a0 <__malloc_unlock>:
 80048a0:	4801      	ldr	r0, [pc, #4]	; (80048a8 <__malloc_unlock+0x8>)
 80048a2:	f000 b80c 	b.w	80048be <__retarget_lock_release_recursive>
 80048a6:	bf00      	nop
 80048a8:	200005d8 	.word	0x200005d8

080048ac <_malloc_usable_size_r>:
 80048ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048b0:	1f18      	subs	r0, r3, #4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	bfbc      	itt	lt
 80048b6:	580b      	ldrlt	r3, [r1, r0]
 80048b8:	18c0      	addlt	r0, r0, r3
 80048ba:	4770      	bx	lr

080048bc <__retarget_lock_acquire_recursive>:
 80048bc:	4770      	bx	lr

080048be <__retarget_lock_release_recursive>:
 80048be:	4770      	bx	lr

080048c0 <_init>:
 80048c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c2:	bf00      	nop
 80048c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c6:	bc08      	pop	{r3}
 80048c8:	469e      	mov	lr, r3
 80048ca:	4770      	bx	lr

080048cc <_fini>:
 80048cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ce:	bf00      	nop
 80048d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d2:	bc08      	pop	{r3}
 80048d4:	469e      	mov	lr, r3
 80048d6:	4770      	bx	lr
=======
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	009a      	lsls	r2, r3, #2
 8003e8c:	441a      	add	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e98:	4a22      	ldr	r2, [pc, #136]	; (8003f24 <UART_SetConfig+0x118>)
 8003e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9e:	095b      	lsrs	r3, r3, #5
 8003ea0:	0119      	lsls	r1, r3, #4
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009a      	lsls	r2, r3, #2
 8003eac:	441a      	add	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eb8:	4b1a      	ldr	r3, [pc, #104]	; (8003f24 <UART_SetConfig+0x118>)
 8003eba:	fba3 0302 	umull	r0, r3, r3, r2
 8003ebe:	095b      	lsrs	r3, r3, #5
 8003ec0:	2064      	movs	r0, #100	; 0x64
 8003ec2:	fb00 f303 	mul.w	r3, r0, r3
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	3332      	adds	r3, #50	; 0x32
 8003ecc:	4a15      	ldr	r2, [pc, #84]	; (8003f24 <UART_SetConfig+0x118>)
 8003ece:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ed8:	4419      	add	r1, r3
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009a      	lsls	r2, r3, #2
 8003ee4:	441a      	add	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ef0:	4b0c      	ldr	r3, [pc, #48]	; (8003f24 <UART_SetConfig+0x118>)
 8003ef2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	2064      	movs	r0, #100	; 0x64
 8003efa:	fb00 f303 	mul.w	r3, r0, r3
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	3332      	adds	r3, #50	; 0x32
 8003f04:	4a07      	ldr	r2, [pc, #28]	; (8003f24 <UART_SetConfig+0x118>)
 8003f06:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	f003 020f 	and.w	r2, r3, #15
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	440a      	add	r2, r1
 8003f16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f18:	bf00      	nop
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40013800 	.word	0x40013800
 8003f24:	51eb851f 	.word	0x51eb851f

08003f28 <__errno>:
 8003f28:	4b01      	ldr	r3, [pc, #4]	; (8003f30 <__errno+0x8>)
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	2000001c 	.word	0x2000001c

08003f34 <__libc_init_array>:
 8003f34:	b570      	push	{r4, r5, r6, lr}
 8003f36:	2600      	movs	r6, #0
 8003f38:	4d0c      	ldr	r5, [pc, #48]	; (8003f6c <__libc_init_array+0x38>)
 8003f3a:	4c0d      	ldr	r4, [pc, #52]	; (8003f70 <__libc_init_array+0x3c>)
 8003f3c:	1b64      	subs	r4, r4, r5
 8003f3e:	10a4      	asrs	r4, r4, #2
 8003f40:	42a6      	cmp	r6, r4
 8003f42:	d109      	bne.n	8003f58 <__libc_init_array+0x24>
 8003f44:	f000 fcc8 	bl	80048d8 <_init>
 8003f48:	2600      	movs	r6, #0
 8003f4a:	4d0a      	ldr	r5, [pc, #40]	; (8003f74 <__libc_init_array+0x40>)
 8003f4c:	4c0a      	ldr	r4, [pc, #40]	; (8003f78 <__libc_init_array+0x44>)
 8003f4e:	1b64      	subs	r4, r4, r5
 8003f50:	10a4      	asrs	r4, r4, #2
 8003f52:	42a6      	cmp	r6, r4
 8003f54:	d105      	bne.n	8003f62 <__libc_init_array+0x2e>
 8003f56:	bd70      	pop	{r4, r5, r6, pc}
 8003f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f5c:	4798      	blx	r3
 8003f5e:	3601      	adds	r6, #1
 8003f60:	e7ee      	b.n	8003f40 <__libc_init_array+0xc>
 8003f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f66:	4798      	blx	r3
 8003f68:	3601      	adds	r6, #1
 8003f6a:	e7f2      	b.n	8003f52 <__libc_init_array+0x1e>
 8003f6c:	08005118 	.word	0x08005118
 8003f70:	08005118 	.word	0x08005118
 8003f74:	08005118 	.word	0x08005118
 8003f78:	0800511c 	.word	0x0800511c

08003f7c <__itoa>:
 8003f7c:	1e93      	subs	r3, r2, #2
 8003f7e:	2b22      	cmp	r3, #34	; 0x22
 8003f80:	b510      	push	{r4, lr}
 8003f82:	460c      	mov	r4, r1
 8003f84:	d904      	bls.n	8003f90 <__itoa+0x14>
 8003f86:	2300      	movs	r3, #0
 8003f88:	461c      	mov	r4, r3
 8003f8a:	700b      	strb	r3, [r1, #0]
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	bd10      	pop	{r4, pc}
 8003f90:	2a0a      	cmp	r2, #10
 8003f92:	d109      	bne.n	8003fa8 <__itoa+0x2c>
 8003f94:	2800      	cmp	r0, #0
 8003f96:	da07      	bge.n	8003fa8 <__itoa+0x2c>
 8003f98:	232d      	movs	r3, #45	; 0x2d
 8003f9a:	700b      	strb	r3, [r1, #0]
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	4240      	negs	r0, r0
 8003fa0:	4421      	add	r1, r4
 8003fa2:	f000 f83d 	bl	8004020 <__utoa>
 8003fa6:	e7f1      	b.n	8003f8c <__itoa+0x10>
 8003fa8:	2100      	movs	r1, #0
 8003faa:	e7f9      	b.n	8003fa0 <__itoa+0x24>

08003fac <itoa>:
 8003fac:	f7ff bfe6 	b.w	8003f7c <__itoa>

08003fb0 <memset>:
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	4402      	add	r2, r0
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d100      	bne.n	8003fba <memset+0xa>
 8003fb8:	4770      	bx	lr
 8003fba:	f803 1b01 	strb.w	r1, [r3], #1
 8003fbe:	e7f9      	b.n	8003fb4 <memset+0x4>

08003fc0 <siprintf>:
 8003fc0:	b40e      	push	{r1, r2, r3}
 8003fc2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fc6:	b500      	push	{lr}
 8003fc8:	b09c      	sub	sp, #112	; 0x70
 8003fca:	ab1d      	add	r3, sp, #116	; 0x74
 8003fcc:	9002      	str	r0, [sp, #8]
 8003fce:	9006      	str	r0, [sp, #24]
 8003fd0:	9107      	str	r1, [sp, #28]
 8003fd2:	9104      	str	r1, [sp, #16]
 8003fd4:	4808      	ldr	r0, [pc, #32]	; (8003ff8 <siprintf+0x38>)
 8003fd6:	4909      	ldr	r1, [pc, #36]	; (8003ffc <siprintf+0x3c>)
 8003fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fdc:	9105      	str	r1, [sp, #20]
 8003fde:	6800      	ldr	r0, [r0, #0]
 8003fe0:	a902      	add	r1, sp, #8
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	f000 f8ba 	bl	800415c <_svfiprintf_r>
 8003fe8:	2200      	movs	r2, #0
 8003fea:	9b02      	ldr	r3, [sp, #8]
 8003fec:	701a      	strb	r2, [r3, #0]
 8003fee:	b01c      	add	sp, #112	; 0x70
 8003ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ff4:	b003      	add	sp, #12
 8003ff6:	4770      	bx	lr
 8003ff8:	2000001c 	.word	0x2000001c
 8003ffc:	ffff0208 	.word	0xffff0208

08004000 <strcat>:
 8004000:	4602      	mov	r2, r0
 8004002:	b510      	push	{r4, lr}
 8004004:	7814      	ldrb	r4, [r2, #0]
 8004006:	4613      	mov	r3, r2
 8004008:	3201      	adds	r2, #1
 800400a:	2c00      	cmp	r4, #0
 800400c:	d1fa      	bne.n	8004004 <strcat+0x4>
 800400e:	3b01      	subs	r3, #1
 8004010:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004014:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004018:	2a00      	cmp	r2, #0
 800401a:	d1f9      	bne.n	8004010 <strcat+0x10>
 800401c:	bd10      	pop	{r4, pc}
	...

08004020 <__utoa>:
 8004020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004022:	b08b      	sub	sp, #44	; 0x2c
 8004024:	4605      	mov	r5, r0
 8004026:	460b      	mov	r3, r1
 8004028:	466e      	mov	r6, sp
 800402a:	4c1d      	ldr	r4, [pc, #116]	; (80040a0 <__utoa+0x80>)
 800402c:	f104 0c20 	add.w	ip, r4, #32
 8004030:	4637      	mov	r7, r6
 8004032:	6820      	ldr	r0, [r4, #0]
 8004034:	6861      	ldr	r1, [r4, #4]
 8004036:	3408      	adds	r4, #8
 8004038:	c703      	stmia	r7!, {r0, r1}
 800403a:	4564      	cmp	r4, ip
 800403c:	463e      	mov	r6, r7
 800403e:	d1f7      	bne.n	8004030 <__utoa+0x10>
 8004040:	7921      	ldrb	r1, [r4, #4]
 8004042:	6820      	ldr	r0, [r4, #0]
 8004044:	7139      	strb	r1, [r7, #4]
 8004046:	1e91      	subs	r1, r2, #2
 8004048:	2922      	cmp	r1, #34	; 0x22
 800404a:	6038      	str	r0, [r7, #0]
 800404c:	f04f 0100 	mov.w	r1, #0
 8004050:	d904      	bls.n	800405c <__utoa+0x3c>
 8004052:	7019      	strb	r1, [r3, #0]
 8004054:	460b      	mov	r3, r1
 8004056:	4618      	mov	r0, r3
 8004058:	b00b      	add	sp, #44	; 0x2c
 800405a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800405c:	1e58      	subs	r0, r3, #1
 800405e:	4684      	mov	ip, r0
 8004060:	fbb5 f7f2 	udiv	r7, r5, r2
 8004064:	fb02 5617 	mls	r6, r2, r7, r5
 8004068:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800406c:	4476      	add	r6, lr
 800406e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004072:	460c      	mov	r4, r1
 8004074:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004078:	462e      	mov	r6, r5
 800407a:	42b2      	cmp	r2, r6
 800407c:	463d      	mov	r5, r7
 800407e:	f101 0101 	add.w	r1, r1, #1
 8004082:	d9ed      	bls.n	8004060 <__utoa+0x40>
 8004084:	2200      	movs	r2, #0
 8004086:	545a      	strb	r2, [r3, r1]
 8004088:	1919      	adds	r1, r3, r4
 800408a:	1aa5      	subs	r5, r4, r2
 800408c:	42aa      	cmp	r2, r5
 800408e:	dae2      	bge.n	8004056 <__utoa+0x36>
 8004090:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004094:	780e      	ldrb	r6, [r1, #0]
 8004096:	3201      	adds	r2, #1
 8004098:	7006      	strb	r6, [r0, #0]
 800409a:	f801 5901 	strb.w	r5, [r1], #-1
 800409e:	e7f4      	b.n	800408a <__utoa+0x6a>
 80040a0:	080050c0 	.word	0x080050c0

080040a4 <__ssputs_r>:
 80040a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040a8:	688e      	ldr	r6, [r1, #8]
 80040aa:	4682      	mov	sl, r0
 80040ac:	429e      	cmp	r6, r3
 80040ae:	460c      	mov	r4, r1
 80040b0:	4690      	mov	r8, r2
 80040b2:	461f      	mov	r7, r3
 80040b4:	d838      	bhi.n	8004128 <__ssputs_r+0x84>
 80040b6:	898a      	ldrh	r2, [r1, #12]
 80040b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040bc:	d032      	beq.n	8004124 <__ssputs_r+0x80>
 80040be:	6825      	ldr	r5, [r4, #0]
 80040c0:	6909      	ldr	r1, [r1, #16]
 80040c2:	3301      	adds	r3, #1
 80040c4:	eba5 0901 	sub.w	r9, r5, r1
 80040c8:	6965      	ldr	r5, [r4, #20]
 80040ca:	444b      	add	r3, r9
 80040cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040d4:	106d      	asrs	r5, r5, #1
 80040d6:	429d      	cmp	r5, r3
 80040d8:	bf38      	it	cc
 80040da:	461d      	movcc	r5, r3
 80040dc:	0553      	lsls	r3, r2, #21
 80040de:	d531      	bpl.n	8004144 <__ssputs_r+0xa0>
 80040e0:	4629      	mov	r1, r5
 80040e2:	f000 fb53 	bl	800478c <_malloc_r>
 80040e6:	4606      	mov	r6, r0
 80040e8:	b950      	cbnz	r0, 8004100 <__ssputs_r+0x5c>
 80040ea:	230c      	movs	r3, #12
 80040ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040f0:	f8ca 3000 	str.w	r3, [sl]
 80040f4:	89a3      	ldrh	r3, [r4, #12]
 80040f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040fa:	81a3      	strh	r3, [r4, #12]
 80040fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004100:	464a      	mov	r2, r9
 8004102:	6921      	ldr	r1, [r4, #16]
 8004104:	f000 face 	bl	80046a4 <memcpy>
 8004108:	89a3      	ldrh	r3, [r4, #12]
 800410a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800410e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004112:	81a3      	strh	r3, [r4, #12]
 8004114:	6126      	str	r6, [r4, #16]
 8004116:	444e      	add	r6, r9
 8004118:	6026      	str	r6, [r4, #0]
 800411a:	463e      	mov	r6, r7
 800411c:	6165      	str	r5, [r4, #20]
 800411e:	eba5 0509 	sub.w	r5, r5, r9
 8004122:	60a5      	str	r5, [r4, #8]
 8004124:	42be      	cmp	r6, r7
 8004126:	d900      	bls.n	800412a <__ssputs_r+0x86>
 8004128:	463e      	mov	r6, r7
 800412a:	4632      	mov	r2, r6
 800412c:	4641      	mov	r1, r8
 800412e:	6820      	ldr	r0, [r4, #0]
 8004130:	f000 fac6 	bl	80046c0 <memmove>
 8004134:	68a3      	ldr	r3, [r4, #8]
 8004136:	6822      	ldr	r2, [r4, #0]
 8004138:	1b9b      	subs	r3, r3, r6
 800413a:	4432      	add	r2, r6
 800413c:	2000      	movs	r0, #0
 800413e:	60a3      	str	r3, [r4, #8]
 8004140:	6022      	str	r2, [r4, #0]
 8004142:	e7db      	b.n	80040fc <__ssputs_r+0x58>
 8004144:	462a      	mov	r2, r5
 8004146:	f000 fb7b 	bl	8004840 <_realloc_r>
 800414a:	4606      	mov	r6, r0
 800414c:	2800      	cmp	r0, #0
 800414e:	d1e1      	bne.n	8004114 <__ssputs_r+0x70>
 8004150:	4650      	mov	r0, sl
 8004152:	6921      	ldr	r1, [r4, #16]
 8004154:	f000 face 	bl	80046f4 <_free_r>
 8004158:	e7c7      	b.n	80040ea <__ssputs_r+0x46>
	...

0800415c <_svfiprintf_r>:
 800415c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004160:	4698      	mov	r8, r3
 8004162:	898b      	ldrh	r3, [r1, #12]
 8004164:	4607      	mov	r7, r0
 8004166:	061b      	lsls	r3, r3, #24
 8004168:	460d      	mov	r5, r1
 800416a:	4614      	mov	r4, r2
 800416c:	b09d      	sub	sp, #116	; 0x74
 800416e:	d50e      	bpl.n	800418e <_svfiprintf_r+0x32>
 8004170:	690b      	ldr	r3, [r1, #16]
 8004172:	b963      	cbnz	r3, 800418e <_svfiprintf_r+0x32>
 8004174:	2140      	movs	r1, #64	; 0x40
 8004176:	f000 fb09 	bl	800478c <_malloc_r>
 800417a:	6028      	str	r0, [r5, #0]
 800417c:	6128      	str	r0, [r5, #16]
 800417e:	b920      	cbnz	r0, 800418a <_svfiprintf_r+0x2e>
 8004180:	230c      	movs	r3, #12
 8004182:	603b      	str	r3, [r7, #0]
 8004184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004188:	e0d1      	b.n	800432e <_svfiprintf_r+0x1d2>
 800418a:	2340      	movs	r3, #64	; 0x40
 800418c:	616b      	str	r3, [r5, #20]
 800418e:	2300      	movs	r3, #0
 8004190:	9309      	str	r3, [sp, #36]	; 0x24
 8004192:	2320      	movs	r3, #32
 8004194:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004198:	2330      	movs	r3, #48	; 0x30
 800419a:	f04f 0901 	mov.w	r9, #1
 800419e:	f8cd 800c 	str.w	r8, [sp, #12]
 80041a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004348 <_svfiprintf_r+0x1ec>
 80041a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041aa:	4623      	mov	r3, r4
 80041ac:	469a      	mov	sl, r3
 80041ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041b2:	b10a      	cbz	r2, 80041b8 <_svfiprintf_r+0x5c>
 80041b4:	2a25      	cmp	r2, #37	; 0x25
 80041b6:	d1f9      	bne.n	80041ac <_svfiprintf_r+0x50>
 80041b8:	ebba 0b04 	subs.w	fp, sl, r4
 80041bc:	d00b      	beq.n	80041d6 <_svfiprintf_r+0x7a>
 80041be:	465b      	mov	r3, fp
 80041c0:	4622      	mov	r2, r4
 80041c2:	4629      	mov	r1, r5
 80041c4:	4638      	mov	r0, r7
 80041c6:	f7ff ff6d 	bl	80040a4 <__ssputs_r>
 80041ca:	3001      	adds	r0, #1
 80041cc:	f000 80aa 	beq.w	8004324 <_svfiprintf_r+0x1c8>
 80041d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041d2:	445a      	add	r2, fp
 80041d4:	9209      	str	r2, [sp, #36]	; 0x24
 80041d6:	f89a 3000 	ldrb.w	r3, [sl]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 80a2 	beq.w	8004324 <_svfiprintf_r+0x1c8>
 80041e0:	2300      	movs	r3, #0
 80041e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041ea:	f10a 0a01 	add.w	sl, sl, #1
 80041ee:	9304      	str	r3, [sp, #16]
 80041f0:	9307      	str	r3, [sp, #28]
 80041f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041f6:	931a      	str	r3, [sp, #104]	; 0x68
 80041f8:	4654      	mov	r4, sl
 80041fa:	2205      	movs	r2, #5
 80041fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004200:	4851      	ldr	r0, [pc, #324]	; (8004348 <_svfiprintf_r+0x1ec>)
 8004202:	f000 fa41 	bl	8004688 <memchr>
 8004206:	9a04      	ldr	r2, [sp, #16]
 8004208:	b9d8      	cbnz	r0, 8004242 <_svfiprintf_r+0xe6>
 800420a:	06d0      	lsls	r0, r2, #27
 800420c:	bf44      	itt	mi
 800420e:	2320      	movmi	r3, #32
 8004210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004214:	0711      	lsls	r1, r2, #28
 8004216:	bf44      	itt	mi
 8004218:	232b      	movmi	r3, #43	; 0x2b
 800421a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800421e:	f89a 3000 	ldrb.w	r3, [sl]
 8004222:	2b2a      	cmp	r3, #42	; 0x2a
 8004224:	d015      	beq.n	8004252 <_svfiprintf_r+0xf6>
 8004226:	4654      	mov	r4, sl
 8004228:	2000      	movs	r0, #0
 800422a:	f04f 0c0a 	mov.w	ip, #10
 800422e:	9a07      	ldr	r2, [sp, #28]
 8004230:	4621      	mov	r1, r4
 8004232:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004236:	3b30      	subs	r3, #48	; 0x30
 8004238:	2b09      	cmp	r3, #9
 800423a:	d94e      	bls.n	80042da <_svfiprintf_r+0x17e>
 800423c:	b1b0      	cbz	r0, 800426c <_svfiprintf_r+0x110>
 800423e:	9207      	str	r2, [sp, #28]
 8004240:	e014      	b.n	800426c <_svfiprintf_r+0x110>
 8004242:	eba0 0308 	sub.w	r3, r0, r8
 8004246:	fa09 f303 	lsl.w	r3, r9, r3
 800424a:	4313      	orrs	r3, r2
 800424c:	46a2      	mov	sl, r4
 800424e:	9304      	str	r3, [sp, #16]
 8004250:	e7d2      	b.n	80041f8 <_svfiprintf_r+0x9c>
 8004252:	9b03      	ldr	r3, [sp, #12]
 8004254:	1d19      	adds	r1, r3, #4
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	9103      	str	r1, [sp, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	bfbb      	ittet	lt
 800425e:	425b      	neglt	r3, r3
 8004260:	f042 0202 	orrlt.w	r2, r2, #2
 8004264:	9307      	strge	r3, [sp, #28]
 8004266:	9307      	strlt	r3, [sp, #28]
 8004268:	bfb8      	it	lt
 800426a:	9204      	strlt	r2, [sp, #16]
 800426c:	7823      	ldrb	r3, [r4, #0]
 800426e:	2b2e      	cmp	r3, #46	; 0x2e
 8004270:	d10c      	bne.n	800428c <_svfiprintf_r+0x130>
 8004272:	7863      	ldrb	r3, [r4, #1]
 8004274:	2b2a      	cmp	r3, #42	; 0x2a
 8004276:	d135      	bne.n	80042e4 <_svfiprintf_r+0x188>
 8004278:	9b03      	ldr	r3, [sp, #12]
 800427a:	3402      	adds	r4, #2
 800427c:	1d1a      	adds	r2, r3, #4
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	9203      	str	r2, [sp, #12]
 8004282:	2b00      	cmp	r3, #0
 8004284:	bfb8      	it	lt
 8004286:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800428a:	9305      	str	r3, [sp, #20]
 800428c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004358 <_svfiprintf_r+0x1fc>
 8004290:	2203      	movs	r2, #3
 8004292:	4650      	mov	r0, sl
 8004294:	7821      	ldrb	r1, [r4, #0]
 8004296:	f000 f9f7 	bl	8004688 <memchr>
 800429a:	b140      	cbz	r0, 80042ae <_svfiprintf_r+0x152>
 800429c:	2340      	movs	r3, #64	; 0x40
 800429e:	eba0 000a 	sub.w	r0, r0, sl
 80042a2:	fa03 f000 	lsl.w	r0, r3, r0
 80042a6:	9b04      	ldr	r3, [sp, #16]
 80042a8:	3401      	adds	r4, #1
 80042aa:	4303      	orrs	r3, r0
 80042ac:	9304      	str	r3, [sp, #16]
 80042ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042b2:	2206      	movs	r2, #6
 80042b4:	4825      	ldr	r0, [pc, #148]	; (800434c <_svfiprintf_r+0x1f0>)
 80042b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042ba:	f000 f9e5 	bl	8004688 <memchr>
 80042be:	2800      	cmp	r0, #0
 80042c0:	d038      	beq.n	8004334 <_svfiprintf_r+0x1d8>
 80042c2:	4b23      	ldr	r3, [pc, #140]	; (8004350 <_svfiprintf_r+0x1f4>)
 80042c4:	bb1b      	cbnz	r3, 800430e <_svfiprintf_r+0x1b2>
 80042c6:	9b03      	ldr	r3, [sp, #12]
 80042c8:	3307      	adds	r3, #7
 80042ca:	f023 0307 	bic.w	r3, r3, #7
 80042ce:	3308      	adds	r3, #8
 80042d0:	9303      	str	r3, [sp, #12]
 80042d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042d4:	4433      	add	r3, r6
 80042d6:	9309      	str	r3, [sp, #36]	; 0x24
 80042d8:	e767      	b.n	80041aa <_svfiprintf_r+0x4e>
 80042da:	460c      	mov	r4, r1
 80042dc:	2001      	movs	r0, #1
 80042de:	fb0c 3202 	mla	r2, ip, r2, r3
 80042e2:	e7a5      	b.n	8004230 <_svfiprintf_r+0xd4>
 80042e4:	2300      	movs	r3, #0
 80042e6:	f04f 0c0a 	mov.w	ip, #10
 80042ea:	4619      	mov	r1, r3
 80042ec:	3401      	adds	r4, #1
 80042ee:	9305      	str	r3, [sp, #20]
 80042f0:	4620      	mov	r0, r4
 80042f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042f6:	3a30      	subs	r2, #48	; 0x30
 80042f8:	2a09      	cmp	r2, #9
 80042fa:	d903      	bls.n	8004304 <_svfiprintf_r+0x1a8>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0c5      	beq.n	800428c <_svfiprintf_r+0x130>
 8004300:	9105      	str	r1, [sp, #20]
 8004302:	e7c3      	b.n	800428c <_svfiprintf_r+0x130>
 8004304:	4604      	mov	r4, r0
 8004306:	2301      	movs	r3, #1
 8004308:	fb0c 2101 	mla	r1, ip, r1, r2
 800430c:	e7f0      	b.n	80042f0 <_svfiprintf_r+0x194>
 800430e:	ab03      	add	r3, sp, #12
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	462a      	mov	r2, r5
 8004314:	4638      	mov	r0, r7
 8004316:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <_svfiprintf_r+0x1f8>)
 8004318:	a904      	add	r1, sp, #16
 800431a:	f3af 8000 	nop.w
 800431e:	1c42      	adds	r2, r0, #1
 8004320:	4606      	mov	r6, r0
 8004322:	d1d6      	bne.n	80042d2 <_svfiprintf_r+0x176>
 8004324:	89ab      	ldrh	r3, [r5, #12]
 8004326:	065b      	lsls	r3, r3, #25
 8004328:	f53f af2c 	bmi.w	8004184 <_svfiprintf_r+0x28>
 800432c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800432e:	b01d      	add	sp, #116	; 0x74
 8004330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004334:	ab03      	add	r3, sp, #12
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	462a      	mov	r2, r5
 800433a:	4638      	mov	r0, r7
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <_svfiprintf_r+0x1f8>)
 800433e:	a904      	add	r1, sp, #16
 8004340:	f000 f87c 	bl	800443c <_printf_i>
 8004344:	e7eb      	b.n	800431e <_svfiprintf_r+0x1c2>
 8004346:	bf00      	nop
 8004348:	080050e5 	.word	0x080050e5
 800434c:	080050ef 	.word	0x080050ef
 8004350:	00000000 	.word	0x00000000
 8004354:	080040a5 	.word	0x080040a5
 8004358:	080050eb 	.word	0x080050eb

0800435c <_printf_common>:
 800435c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004360:	4616      	mov	r6, r2
 8004362:	4699      	mov	r9, r3
 8004364:	688a      	ldr	r2, [r1, #8]
 8004366:	690b      	ldr	r3, [r1, #16]
 8004368:	4607      	mov	r7, r0
 800436a:	4293      	cmp	r3, r2
 800436c:	bfb8      	it	lt
 800436e:	4613      	movlt	r3, r2
 8004370:	6033      	str	r3, [r6, #0]
 8004372:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004376:	460c      	mov	r4, r1
 8004378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800437c:	b10a      	cbz	r2, 8004382 <_printf_common+0x26>
 800437e:	3301      	adds	r3, #1
 8004380:	6033      	str	r3, [r6, #0]
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	0699      	lsls	r1, r3, #26
 8004386:	bf42      	ittt	mi
 8004388:	6833      	ldrmi	r3, [r6, #0]
 800438a:	3302      	addmi	r3, #2
 800438c:	6033      	strmi	r3, [r6, #0]
 800438e:	6825      	ldr	r5, [r4, #0]
 8004390:	f015 0506 	ands.w	r5, r5, #6
 8004394:	d106      	bne.n	80043a4 <_printf_common+0x48>
 8004396:	f104 0a19 	add.w	sl, r4, #25
 800439a:	68e3      	ldr	r3, [r4, #12]
 800439c:	6832      	ldr	r2, [r6, #0]
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	42ab      	cmp	r3, r5
 80043a2:	dc28      	bgt.n	80043f6 <_printf_common+0x9a>
 80043a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043a8:	1e13      	subs	r3, r2, #0
 80043aa:	6822      	ldr	r2, [r4, #0]
 80043ac:	bf18      	it	ne
 80043ae:	2301      	movne	r3, #1
 80043b0:	0692      	lsls	r2, r2, #26
 80043b2:	d42d      	bmi.n	8004410 <_printf_common+0xb4>
 80043b4:	4649      	mov	r1, r9
 80043b6:	4638      	mov	r0, r7
 80043b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043bc:	47c0      	blx	r8
 80043be:	3001      	adds	r0, #1
 80043c0:	d020      	beq.n	8004404 <_printf_common+0xa8>
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	68e5      	ldr	r5, [r4, #12]
 80043c6:	f003 0306 	and.w	r3, r3, #6
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	bf18      	it	ne
 80043ce:	2500      	movne	r5, #0
 80043d0:	6832      	ldr	r2, [r6, #0]
 80043d2:	f04f 0600 	mov.w	r6, #0
 80043d6:	68a3      	ldr	r3, [r4, #8]
 80043d8:	bf08      	it	eq
 80043da:	1aad      	subeq	r5, r5, r2
 80043dc:	6922      	ldr	r2, [r4, #16]
 80043de:	bf08      	it	eq
 80043e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043e4:	4293      	cmp	r3, r2
 80043e6:	bfc4      	itt	gt
 80043e8:	1a9b      	subgt	r3, r3, r2
 80043ea:	18ed      	addgt	r5, r5, r3
 80043ec:	341a      	adds	r4, #26
 80043ee:	42b5      	cmp	r5, r6
 80043f0:	d11a      	bne.n	8004428 <_printf_common+0xcc>
 80043f2:	2000      	movs	r0, #0
 80043f4:	e008      	b.n	8004408 <_printf_common+0xac>
 80043f6:	2301      	movs	r3, #1
 80043f8:	4652      	mov	r2, sl
 80043fa:	4649      	mov	r1, r9
 80043fc:	4638      	mov	r0, r7
 80043fe:	47c0      	blx	r8
 8004400:	3001      	adds	r0, #1
 8004402:	d103      	bne.n	800440c <_printf_common+0xb0>
 8004404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800440c:	3501      	adds	r5, #1
 800440e:	e7c4      	b.n	800439a <_printf_common+0x3e>
 8004410:	2030      	movs	r0, #48	; 0x30
 8004412:	18e1      	adds	r1, r4, r3
 8004414:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800441e:	4422      	add	r2, r4
 8004420:	3302      	adds	r3, #2
 8004422:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004426:	e7c5      	b.n	80043b4 <_printf_common+0x58>
 8004428:	2301      	movs	r3, #1
 800442a:	4622      	mov	r2, r4
 800442c:	4649      	mov	r1, r9
 800442e:	4638      	mov	r0, r7
 8004430:	47c0      	blx	r8
 8004432:	3001      	adds	r0, #1
 8004434:	d0e6      	beq.n	8004404 <_printf_common+0xa8>
 8004436:	3601      	adds	r6, #1
 8004438:	e7d9      	b.n	80043ee <_printf_common+0x92>
	...

0800443c <_printf_i>:
 800443c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004440:	460c      	mov	r4, r1
 8004442:	7e27      	ldrb	r7, [r4, #24]
 8004444:	4691      	mov	r9, r2
 8004446:	2f78      	cmp	r7, #120	; 0x78
 8004448:	4680      	mov	r8, r0
 800444a:	469a      	mov	sl, r3
 800444c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800444e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004452:	d807      	bhi.n	8004464 <_printf_i+0x28>
 8004454:	2f62      	cmp	r7, #98	; 0x62
 8004456:	d80a      	bhi.n	800446e <_printf_i+0x32>
 8004458:	2f00      	cmp	r7, #0
 800445a:	f000 80d9 	beq.w	8004610 <_printf_i+0x1d4>
 800445e:	2f58      	cmp	r7, #88	; 0x58
 8004460:	f000 80a4 	beq.w	80045ac <_printf_i+0x170>
 8004464:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004468:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800446c:	e03a      	b.n	80044e4 <_printf_i+0xa8>
 800446e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004472:	2b15      	cmp	r3, #21
 8004474:	d8f6      	bhi.n	8004464 <_printf_i+0x28>
 8004476:	a001      	add	r0, pc, #4	; (adr r0, 800447c <_printf_i+0x40>)
 8004478:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800447c:	080044d5 	.word	0x080044d5
 8004480:	080044e9 	.word	0x080044e9
 8004484:	08004465 	.word	0x08004465
 8004488:	08004465 	.word	0x08004465
 800448c:	08004465 	.word	0x08004465
 8004490:	08004465 	.word	0x08004465
 8004494:	080044e9 	.word	0x080044e9
 8004498:	08004465 	.word	0x08004465
 800449c:	08004465 	.word	0x08004465
 80044a0:	08004465 	.word	0x08004465
 80044a4:	08004465 	.word	0x08004465
 80044a8:	080045f7 	.word	0x080045f7
 80044ac:	08004519 	.word	0x08004519
 80044b0:	080045d9 	.word	0x080045d9
 80044b4:	08004465 	.word	0x08004465
 80044b8:	08004465 	.word	0x08004465
 80044bc:	08004619 	.word	0x08004619
 80044c0:	08004465 	.word	0x08004465
 80044c4:	08004519 	.word	0x08004519
 80044c8:	08004465 	.word	0x08004465
 80044cc:	08004465 	.word	0x08004465
 80044d0:	080045e1 	.word	0x080045e1
 80044d4:	680b      	ldr	r3, [r1, #0]
 80044d6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044da:	1d1a      	adds	r2, r3, #4
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	600a      	str	r2, [r1, #0]
 80044e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0a4      	b.n	8004632 <_printf_i+0x1f6>
 80044e8:	6825      	ldr	r5, [r4, #0]
 80044ea:	6808      	ldr	r0, [r1, #0]
 80044ec:	062e      	lsls	r6, r5, #24
 80044ee:	f100 0304 	add.w	r3, r0, #4
 80044f2:	d50a      	bpl.n	800450a <_printf_i+0xce>
 80044f4:	6805      	ldr	r5, [r0, #0]
 80044f6:	600b      	str	r3, [r1, #0]
 80044f8:	2d00      	cmp	r5, #0
 80044fa:	da03      	bge.n	8004504 <_printf_i+0xc8>
 80044fc:	232d      	movs	r3, #45	; 0x2d
 80044fe:	426d      	negs	r5, r5
 8004500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004504:	230a      	movs	r3, #10
 8004506:	485e      	ldr	r0, [pc, #376]	; (8004680 <_printf_i+0x244>)
 8004508:	e019      	b.n	800453e <_printf_i+0x102>
 800450a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800450e:	6805      	ldr	r5, [r0, #0]
 8004510:	600b      	str	r3, [r1, #0]
 8004512:	bf18      	it	ne
 8004514:	b22d      	sxthne	r5, r5
 8004516:	e7ef      	b.n	80044f8 <_printf_i+0xbc>
 8004518:	680b      	ldr	r3, [r1, #0]
 800451a:	6825      	ldr	r5, [r4, #0]
 800451c:	1d18      	adds	r0, r3, #4
 800451e:	6008      	str	r0, [r1, #0]
 8004520:	0628      	lsls	r0, r5, #24
 8004522:	d501      	bpl.n	8004528 <_printf_i+0xec>
 8004524:	681d      	ldr	r5, [r3, #0]
 8004526:	e002      	b.n	800452e <_printf_i+0xf2>
 8004528:	0669      	lsls	r1, r5, #25
 800452a:	d5fb      	bpl.n	8004524 <_printf_i+0xe8>
 800452c:	881d      	ldrh	r5, [r3, #0]
 800452e:	2f6f      	cmp	r7, #111	; 0x6f
 8004530:	bf0c      	ite	eq
 8004532:	2308      	moveq	r3, #8
 8004534:	230a      	movne	r3, #10
 8004536:	4852      	ldr	r0, [pc, #328]	; (8004680 <_printf_i+0x244>)
 8004538:	2100      	movs	r1, #0
 800453a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800453e:	6866      	ldr	r6, [r4, #4]
 8004540:	2e00      	cmp	r6, #0
 8004542:	bfa8      	it	ge
 8004544:	6821      	ldrge	r1, [r4, #0]
 8004546:	60a6      	str	r6, [r4, #8]
 8004548:	bfa4      	itt	ge
 800454a:	f021 0104 	bicge.w	r1, r1, #4
 800454e:	6021      	strge	r1, [r4, #0]
 8004550:	b90d      	cbnz	r5, 8004556 <_printf_i+0x11a>
 8004552:	2e00      	cmp	r6, #0
 8004554:	d04d      	beq.n	80045f2 <_printf_i+0x1b6>
 8004556:	4616      	mov	r6, r2
 8004558:	fbb5 f1f3 	udiv	r1, r5, r3
 800455c:	fb03 5711 	mls	r7, r3, r1, r5
 8004560:	5dc7      	ldrb	r7, [r0, r7]
 8004562:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004566:	462f      	mov	r7, r5
 8004568:	42bb      	cmp	r3, r7
 800456a:	460d      	mov	r5, r1
 800456c:	d9f4      	bls.n	8004558 <_printf_i+0x11c>
 800456e:	2b08      	cmp	r3, #8
 8004570:	d10b      	bne.n	800458a <_printf_i+0x14e>
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	07df      	lsls	r7, r3, #31
 8004576:	d508      	bpl.n	800458a <_printf_i+0x14e>
 8004578:	6923      	ldr	r3, [r4, #16]
 800457a:	6861      	ldr	r1, [r4, #4]
 800457c:	4299      	cmp	r1, r3
 800457e:	bfde      	ittt	le
 8004580:	2330      	movle	r3, #48	; 0x30
 8004582:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004586:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800458a:	1b92      	subs	r2, r2, r6
 800458c:	6122      	str	r2, [r4, #16]
 800458e:	464b      	mov	r3, r9
 8004590:	4621      	mov	r1, r4
 8004592:	4640      	mov	r0, r8
 8004594:	f8cd a000 	str.w	sl, [sp]
 8004598:	aa03      	add	r2, sp, #12
 800459a:	f7ff fedf 	bl	800435c <_printf_common>
 800459e:	3001      	adds	r0, #1
 80045a0:	d14c      	bne.n	800463c <_printf_i+0x200>
 80045a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045a6:	b004      	add	sp, #16
 80045a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ac:	4834      	ldr	r0, [pc, #208]	; (8004680 <_printf_i+0x244>)
 80045ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045b2:	680e      	ldr	r6, [r1, #0]
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80045ba:	061f      	lsls	r7, r3, #24
 80045bc:	600e      	str	r6, [r1, #0]
 80045be:	d514      	bpl.n	80045ea <_printf_i+0x1ae>
 80045c0:	07d9      	lsls	r1, r3, #31
 80045c2:	bf44      	itt	mi
 80045c4:	f043 0320 	orrmi.w	r3, r3, #32
 80045c8:	6023      	strmi	r3, [r4, #0]
 80045ca:	b91d      	cbnz	r5, 80045d4 <_printf_i+0x198>
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	f023 0320 	bic.w	r3, r3, #32
 80045d2:	6023      	str	r3, [r4, #0]
 80045d4:	2310      	movs	r3, #16
 80045d6:	e7af      	b.n	8004538 <_printf_i+0xfc>
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	f043 0320 	orr.w	r3, r3, #32
 80045de:	6023      	str	r3, [r4, #0]
 80045e0:	2378      	movs	r3, #120	; 0x78
 80045e2:	4828      	ldr	r0, [pc, #160]	; (8004684 <_printf_i+0x248>)
 80045e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045e8:	e7e3      	b.n	80045b2 <_printf_i+0x176>
 80045ea:	065e      	lsls	r6, r3, #25
 80045ec:	bf48      	it	mi
 80045ee:	b2ad      	uxthmi	r5, r5
 80045f0:	e7e6      	b.n	80045c0 <_printf_i+0x184>
 80045f2:	4616      	mov	r6, r2
 80045f4:	e7bb      	b.n	800456e <_printf_i+0x132>
 80045f6:	680b      	ldr	r3, [r1, #0]
 80045f8:	6826      	ldr	r6, [r4, #0]
 80045fa:	1d1d      	adds	r5, r3, #4
 80045fc:	6960      	ldr	r0, [r4, #20]
 80045fe:	600d      	str	r5, [r1, #0]
 8004600:	0635      	lsls	r5, r6, #24
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	d501      	bpl.n	800460a <_printf_i+0x1ce>
 8004606:	6018      	str	r0, [r3, #0]
 8004608:	e002      	b.n	8004610 <_printf_i+0x1d4>
 800460a:	0671      	lsls	r1, r6, #25
 800460c:	d5fb      	bpl.n	8004606 <_printf_i+0x1ca>
 800460e:	8018      	strh	r0, [r3, #0]
 8004610:	2300      	movs	r3, #0
 8004612:	4616      	mov	r6, r2
 8004614:	6123      	str	r3, [r4, #16]
 8004616:	e7ba      	b.n	800458e <_printf_i+0x152>
 8004618:	680b      	ldr	r3, [r1, #0]
 800461a:	1d1a      	adds	r2, r3, #4
 800461c:	600a      	str	r2, [r1, #0]
 800461e:	681e      	ldr	r6, [r3, #0]
 8004620:	2100      	movs	r1, #0
 8004622:	4630      	mov	r0, r6
 8004624:	6862      	ldr	r2, [r4, #4]
 8004626:	f000 f82f 	bl	8004688 <memchr>
 800462a:	b108      	cbz	r0, 8004630 <_printf_i+0x1f4>
 800462c:	1b80      	subs	r0, r0, r6
 800462e:	6060      	str	r0, [r4, #4]
 8004630:	6863      	ldr	r3, [r4, #4]
 8004632:	6123      	str	r3, [r4, #16]
 8004634:	2300      	movs	r3, #0
 8004636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800463a:	e7a8      	b.n	800458e <_printf_i+0x152>
 800463c:	4632      	mov	r2, r6
 800463e:	4649      	mov	r1, r9
 8004640:	4640      	mov	r0, r8
 8004642:	6923      	ldr	r3, [r4, #16]
 8004644:	47d0      	blx	sl
 8004646:	3001      	adds	r0, #1
 8004648:	d0ab      	beq.n	80045a2 <_printf_i+0x166>
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	079b      	lsls	r3, r3, #30
 800464e:	d413      	bmi.n	8004678 <_printf_i+0x23c>
 8004650:	68e0      	ldr	r0, [r4, #12]
 8004652:	9b03      	ldr	r3, [sp, #12]
 8004654:	4298      	cmp	r0, r3
 8004656:	bfb8      	it	lt
 8004658:	4618      	movlt	r0, r3
 800465a:	e7a4      	b.n	80045a6 <_printf_i+0x16a>
 800465c:	2301      	movs	r3, #1
 800465e:	4632      	mov	r2, r6
 8004660:	4649      	mov	r1, r9
 8004662:	4640      	mov	r0, r8
 8004664:	47d0      	blx	sl
 8004666:	3001      	adds	r0, #1
 8004668:	d09b      	beq.n	80045a2 <_printf_i+0x166>
 800466a:	3501      	adds	r5, #1
 800466c:	68e3      	ldr	r3, [r4, #12]
 800466e:	9903      	ldr	r1, [sp, #12]
 8004670:	1a5b      	subs	r3, r3, r1
 8004672:	42ab      	cmp	r3, r5
 8004674:	dcf2      	bgt.n	800465c <_printf_i+0x220>
 8004676:	e7eb      	b.n	8004650 <_printf_i+0x214>
 8004678:	2500      	movs	r5, #0
 800467a:	f104 0619 	add.w	r6, r4, #25
 800467e:	e7f5      	b.n	800466c <_printf_i+0x230>
 8004680:	080050f6 	.word	0x080050f6
 8004684:	08005107 	.word	0x08005107

08004688 <memchr>:
 8004688:	4603      	mov	r3, r0
 800468a:	b510      	push	{r4, lr}
 800468c:	b2c9      	uxtb	r1, r1
 800468e:	4402      	add	r2, r0
 8004690:	4293      	cmp	r3, r2
 8004692:	4618      	mov	r0, r3
 8004694:	d101      	bne.n	800469a <memchr+0x12>
 8004696:	2000      	movs	r0, #0
 8004698:	e003      	b.n	80046a2 <memchr+0x1a>
 800469a:	7804      	ldrb	r4, [r0, #0]
 800469c:	3301      	adds	r3, #1
 800469e:	428c      	cmp	r4, r1
 80046a0:	d1f6      	bne.n	8004690 <memchr+0x8>
 80046a2:	bd10      	pop	{r4, pc}

080046a4 <memcpy>:
 80046a4:	440a      	add	r2, r1
 80046a6:	4291      	cmp	r1, r2
 80046a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80046ac:	d100      	bne.n	80046b0 <memcpy+0xc>
 80046ae:	4770      	bx	lr
 80046b0:	b510      	push	{r4, lr}
 80046b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046b6:	4291      	cmp	r1, r2
 80046b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046bc:	d1f9      	bne.n	80046b2 <memcpy+0xe>
 80046be:	bd10      	pop	{r4, pc}

080046c0 <memmove>:
 80046c0:	4288      	cmp	r0, r1
 80046c2:	b510      	push	{r4, lr}
 80046c4:	eb01 0402 	add.w	r4, r1, r2
 80046c8:	d902      	bls.n	80046d0 <memmove+0x10>
 80046ca:	4284      	cmp	r4, r0
 80046cc:	4623      	mov	r3, r4
 80046ce:	d807      	bhi.n	80046e0 <memmove+0x20>
 80046d0:	1e43      	subs	r3, r0, #1
 80046d2:	42a1      	cmp	r1, r4
 80046d4:	d008      	beq.n	80046e8 <memmove+0x28>
 80046d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046de:	e7f8      	b.n	80046d2 <memmove+0x12>
 80046e0:	4601      	mov	r1, r0
 80046e2:	4402      	add	r2, r0
 80046e4:	428a      	cmp	r2, r1
 80046e6:	d100      	bne.n	80046ea <memmove+0x2a>
 80046e8:	bd10      	pop	{r4, pc}
 80046ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046f2:	e7f7      	b.n	80046e4 <memmove+0x24>

080046f4 <_free_r>:
 80046f4:	b538      	push	{r3, r4, r5, lr}
 80046f6:	4605      	mov	r5, r0
 80046f8:	2900      	cmp	r1, #0
 80046fa:	d043      	beq.n	8004784 <_free_r+0x90>
 80046fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004700:	1f0c      	subs	r4, r1, #4
 8004702:	2b00      	cmp	r3, #0
 8004704:	bfb8      	it	lt
 8004706:	18e4      	addlt	r4, r4, r3
 8004708:	f000 f8d0 	bl	80048ac <__malloc_lock>
 800470c:	4a1e      	ldr	r2, [pc, #120]	; (8004788 <_free_r+0x94>)
 800470e:	6813      	ldr	r3, [r2, #0]
 8004710:	4610      	mov	r0, r2
 8004712:	b933      	cbnz	r3, 8004722 <_free_r+0x2e>
 8004714:	6063      	str	r3, [r4, #4]
 8004716:	6014      	str	r4, [r2, #0]
 8004718:	4628      	mov	r0, r5
 800471a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800471e:	f000 b8cb 	b.w	80048b8 <__malloc_unlock>
 8004722:	42a3      	cmp	r3, r4
 8004724:	d90a      	bls.n	800473c <_free_r+0x48>
 8004726:	6821      	ldr	r1, [r4, #0]
 8004728:	1862      	adds	r2, r4, r1
 800472a:	4293      	cmp	r3, r2
 800472c:	bf01      	itttt	eq
 800472e:	681a      	ldreq	r2, [r3, #0]
 8004730:	685b      	ldreq	r3, [r3, #4]
 8004732:	1852      	addeq	r2, r2, r1
 8004734:	6022      	streq	r2, [r4, #0]
 8004736:	6063      	str	r3, [r4, #4]
 8004738:	6004      	str	r4, [r0, #0]
 800473a:	e7ed      	b.n	8004718 <_free_r+0x24>
 800473c:	461a      	mov	r2, r3
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	b10b      	cbz	r3, 8004746 <_free_r+0x52>
 8004742:	42a3      	cmp	r3, r4
 8004744:	d9fa      	bls.n	800473c <_free_r+0x48>
 8004746:	6811      	ldr	r1, [r2, #0]
 8004748:	1850      	adds	r0, r2, r1
 800474a:	42a0      	cmp	r0, r4
 800474c:	d10b      	bne.n	8004766 <_free_r+0x72>
 800474e:	6820      	ldr	r0, [r4, #0]
 8004750:	4401      	add	r1, r0
 8004752:	1850      	adds	r0, r2, r1
 8004754:	4283      	cmp	r3, r0
 8004756:	6011      	str	r1, [r2, #0]
 8004758:	d1de      	bne.n	8004718 <_free_r+0x24>
 800475a:	6818      	ldr	r0, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	4401      	add	r1, r0
 8004760:	6011      	str	r1, [r2, #0]
 8004762:	6053      	str	r3, [r2, #4]
 8004764:	e7d8      	b.n	8004718 <_free_r+0x24>
 8004766:	d902      	bls.n	800476e <_free_r+0x7a>
 8004768:	230c      	movs	r3, #12
 800476a:	602b      	str	r3, [r5, #0]
 800476c:	e7d4      	b.n	8004718 <_free_r+0x24>
 800476e:	6820      	ldr	r0, [r4, #0]
 8004770:	1821      	adds	r1, r4, r0
 8004772:	428b      	cmp	r3, r1
 8004774:	bf01      	itttt	eq
 8004776:	6819      	ldreq	r1, [r3, #0]
 8004778:	685b      	ldreq	r3, [r3, #4]
 800477a:	1809      	addeq	r1, r1, r0
 800477c:	6021      	streq	r1, [r4, #0]
 800477e:	6063      	str	r3, [r4, #4]
 8004780:	6054      	str	r4, [r2, #4]
 8004782:	e7c9      	b.n	8004718 <_free_r+0x24>
 8004784:	bd38      	pop	{r3, r4, r5, pc}
 8004786:	bf00      	nop
 8004788:	200004d4 	.word	0x200004d4

0800478c <_malloc_r>:
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478e:	1ccd      	adds	r5, r1, #3
 8004790:	f025 0503 	bic.w	r5, r5, #3
 8004794:	3508      	adds	r5, #8
 8004796:	2d0c      	cmp	r5, #12
 8004798:	bf38      	it	cc
 800479a:	250c      	movcc	r5, #12
 800479c:	2d00      	cmp	r5, #0
 800479e:	4606      	mov	r6, r0
 80047a0:	db01      	blt.n	80047a6 <_malloc_r+0x1a>
 80047a2:	42a9      	cmp	r1, r5
 80047a4:	d903      	bls.n	80047ae <_malloc_r+0x22>
 80047a6:	230c      	movs	r3, #12
 80047a8:	6033      	str	r3, [r6, #0]
 80047aa:	2000      	movs	r0, #0
 80047ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ae:	f000 f87d 	bl	80048ac <__malloc_lock>
 80047b2:	4921      	ldr	r1, [pc, #132]	; (8004838 <_malloc_r+0xac>)
 80047b4:	680a      	ldr	r2, [r1, #0]
 80047b6:	4614      	mov	r4, r2
 80047b8:	b99c      	cbnz	r4, 80047e2 <_malloc_r+0x56>
 80047ba:	4f20      	ldr	r7, [pc, #128]	; (800483c <_malloc_r+0xb0>)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	b923      	cbnz	r3, 80047ca <_malloc_r+0x3e>
 80047c0:	4621      	mov	r1, r4
 80047c2:	4630      	mov	r0, r6
 80047c4:	f000 f862 	bl	800488c <_sbrk_r>
 80047c8:	6038      	str	r0, [r7, #0]
 80047ca:	4629      	mov	r1, r5
 80047cc:	4630      	mov	r0, r6
 80047ce:	f000 f85d 	bl	800488c <_sbrk_r>
 80047d2:	1c43      	adds	r3, r0, #1
 80047d4:	d123      	bne.n	800481e <_malloc_r+0x92>
 80047d6:	230c      	movs	r3, #12
 80047d8:	4630      	mov	r0, r6
 80047da:	6033      	str	r3, [r6, #0]
 80047dc:	f000 f86c 	bl	80048b8 <__malloc_unlock>
 80047e0:	e7e3      	b.n	80047aa <_malloc_r+0x1e>
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	1b5b      	subs	r3, r3, r5
 80047e6:	d417      	bmi.n	8004818 <_malloc_r+0x8c>
 80047e8:	2b0b      	cmp	r3, #11
 80047ea:	d903      	bls.n	80047f4 <_malloc_r+0x68>
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	441c      	add	r4, r3
 80047f0:	6025      	str	r5, [r4, #0]
 80047f2:	e004      	b.n	80047fe <_malloc_r+0x72>
 80047f4:	6863      	ldr	r3, [r4, #4]
 80047f6:	42a2      	cmp	r2, r4
 80047f8:	bf0c      	ite	eq
 80047fa:	600b      	streq	r3, [r1, #0]
 80047fc:	6053      	strne	r3, [r2, #4]
 80047fe:	4630      	mov	r0, r6
 8004800:	f000 f85a 	bl	80048b8 <__malloc_unlock>
 8004804:	f104 000b 	add.w	r0, r4, #11
 8004808:	1d23      	adds	r3, r4, #4
 800480a:	f020 0007 	bic.w	r0, r0, #7
 800480e:	1ac2      	subs	r2, r0, r3
 8004810:	d0cc      	beq.n	80047ac <_malloc_r+0x20>
 8004812:	1a1b      	subs	r3, r3, r0
 8004814:	50a3      	str	r3, [r4, r2]
 8004816:	e7c9      	b.n	80047ac <_malloc_r+0x20>
 8004818:	4622      	mov	r2, r4
 800481a:	6864      	ldr	r4, [r4, #4]
 800481c:	e7cc      	b.n	80047b8 <_malloc_r+0x2c>
 800481e:	1cc4      	adds	r4, r0, #3
 8004820:	f024 0403 	bic.w	r4, r4, #3
 8004824:	42a0      	cmp	r0, r4
 8004826:	d0e3      	beq.n	80047f0 <_malloc_r+0x64>
 8004828:	1a21      	subs	r1, r4, r0
 800482a:	4630      	mov	r0, r6
 800482c:	f000 f82e 	bl	800488c <_sbrk_r>
 8004830:	3001      	adds	r0, #1
 8004832:	d1dd      	bne.n	80047f0 <_malloc_r+0x64>
 8004834:	e7cf      	b.n	80047d6 <_malloc_r+0x4a>
 8004836:	bf00      	nop
 8004838:	200004d4 	.word	0x200004d4
 800483c:	200004d8 	.word	0x200004d8

08004840 <_realloc_r>:
 8004840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004842:	4607      	mov	r7, r0
 8004844:	4614      	mov	r4, r2
 8004846:	460e      	mov	r6, r1
 8004848:	b921      	cbnz	r1, 8004854 <_realloc_r+0x14>
 800484a:	4611      	mov	r1, r2
 800484c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004850:	f7ff bf9c 	b.w	800478c <_malloc_r>
 8004854:	b922      	cbnz	r2, 8004860 <_realloc_r+0x20>
 8004856:	f7ff ff4d 	bl	80046f4 <_free_r>
 800485a:	4625      	mov	r5, r4
 800485c:	4628      	mov	r0, r5
 800485e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004860:	f000 f830 	bl	80048c4 <_malloc_usable_size_r>
 8004864:	42a0      	cmp	r0, r4
 8004866:	d20f      	bcs.n	8004888 <_realloc_r+0x48>
 8004868:	4621      	mov	r1, r4
 800486a:	4638      	mov	r0, r7
 800486c:	f7ff ff8e 	bl	800478c <_malloc_r>
 8004870:	4605      	mov	r5, r0
 8004872:	2800      	cmp	r0, #0
 8004874:	d0f2      	beq.n	800485c <_realloc_r+0x1c>
 8004876:	4631      	mov	r1, r6
 8004878:	4622      	mov	r2, r4
 800487a:	f7ff ff13 	bl	80046a4 <memcpy>
 800487e:	4631      	mov	r1, r6
 8004880:	4638      	mov	r0, r7
 8004882:	f7ff ff37 	bl	80046f4 <_free_r>
 8004886:	e7e9      	b.n	800485c <_realloc_r+0x1c>
 8004888:	4635      	mov	r5, r6
 800488a:	e7e7      	b.n	800485c <_realloc_r+0x1c>

0800488c <_sbrk_r>:
 800488c:	b538      	push	{r3, r4, r5, lr}
 800488e:	2300      	movs	r3, #0
 8004890:	4d05      	ldr	r5, [pc, #20]	; (80048a8 <_sbrk_r+0x1c>)
 8004892:	4604      	mov	r4, r0
 8004894:	4608      	mov	r0, r1
 8004896:	602b      	str	r3, [r5, #0]
 8004898:	f7fc fd10 	bl	80012bc <_sbrk>
 800489c:	1c43      	adds	r3, r0, #1
 800489e:	d102      	bne.n	80048a6 <_sbrk_r+0x1a>
 80048a0:	682b      	ldr	r3, [r5, #0]
 80048a2:	b103      	cbz	r3, 80048a6 <_sbrk_r+0x1a>
 80048a4:	6023      	str	r3, [r4, #0]
 80048a6:	bd38      	pop	{r3, r4, r5, pc}
 80048a8:	200005d0 	.word	0x200005d0

080048ac <__malloc_lock>:
 80048ac:	4801      	ldr	r0, [pc, #4]	; (80048b4 <__malloc_lock+0x8>)
 80048ae:	f000 b811 	b.w	80048d4 <__retarget_lock_acquire_recursive>
 80048b2:	bf00      	nop
 80048b4:	200005d8 	.word	0x200005d8

080048b8 <__malloc_unlock>:
 80048b8:	4801      	ldr	r0, [pc, #4]	; (80048c0 <__malloc_unlock+0x8>)
 80048ba:	f000 b80c 	b.w	80048d6 <__retarget_lock_release_recursive>
 80048be:	bf00      	nop
 80048c0:	200005d8 	.word	0x200005d8

080048c4 <_malloc_usable_size_r>:
 80048c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048c8:	1f18      	subs	r0, r3, #4
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	bfbc      	itt	lt
 80048ce:	580b      	ldrlt	r3, [r1, r0]
 80048d0:	18c0      	addlt	r0, r0, r3
 80048d2:	4770      	bx	lr

080048d4 <__retarget_lock_acquire_recursive>:
 80048d4:	4770      	bx	lr

080048d6 <__retarget_lock_release_recursive>:
 80048d6:	4770      	bx	lr

080048d8 <_init>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	bf00      	nop
 80048dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048de:	bc08      	pop	{r3}
 80048e0:	469e      	mov	lr, r3
 80048e2:	4770      	bx	lr

080048e4 <_fini>:
 80048e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e6:	bf00      	nop
 80048e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ea:	bc08      	pop	{r3}
 80048ec:	469e      	mov	lr, r3
 80048ee:	4770      	bx	lr
>>>>>>> FFF
