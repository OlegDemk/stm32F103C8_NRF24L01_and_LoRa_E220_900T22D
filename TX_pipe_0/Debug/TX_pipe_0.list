
TX_pipe_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  08003b74  08003b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004360  08004360  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004360  08004360  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004360  08004360  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004360  08004360  00014360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004364  08004364  00014364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  20000078  080043e0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  080043e0  000205d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dac5  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e0  00000000  00000000  0002db66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  0002fd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  00030928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e18  00000000  00000000  00031450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc26  00000000  00000000  00049268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086da2  00000000  00000000  00058e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dfc30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003440  00000000  00000000  000dfc84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b5c 	.word	0x08003b5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003b5c 	.word	0x08003b5c

0800014c <lora_transmit_data>:
void set_config_deep_sleep_mode(void);
void set_WOR_TX_mode(void);

//----------------------------------------------------------------------------------------
int lora_transmit_data(void)    // Rename
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	static int transmit_count = 0;			// Variable for transmit
	static uint8_t data[10] = {0};

	transmit_count++;
 8000150:	4b4d      	ldr	r3, [pc, #308]	; (8000288 <lora_transmit_data+0x13c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3301      	adds	r3, #1
 8000156:	4a4c      	ldr	r2, [pc, #304]	; (8000288 <lora_transmit_data+0x13c>)
 8000158:	6013      	str	r3, [r2, #0]

	data[5] = '0' + transmit_count%10;
 800015a:	4b4b      	ldr	r3, [pc, #300]	; (8000288 <lora_transmit_data+0x13c>)
 800015c:	681a      	ldr	r2, [r3, #0]
 800015e:	4b4b      	ldr	r3, [pc, #300]	; (800028c <lora_transmit_data+0x140>)
 8000160:	fb83 1302 	smull	r1, r3, r3, r2
 8000164:	1099      	asrs	r1, r3, #2
 8000166:	17d3      	asrs	r3, r2, #31
 8000168:	1ac9      	subs	r1, r1, r3
 800016a:	460b      	mov	r3, r1
 800016c:	009b      	lsls	r3, r3, #2
 800016e:	440b      	add	r3, r1
 8000170:	005b      	lsls	r3, r3, #1
 8000172:	1ad1      	subs	r1, r2, r3
 8000174:	b2cb      	uxtb	r3, r1
 8000176:	3330      	adds	r3, #48	; 0x30
 8000178:	b2da      	uxtb	r2, r3
 800017a:	4b45      	ldr	r3, [pc, #276]	; (8000290 <lora_transmit_data+0x144>)
 800017c:	715a      	strb	r2, [r3, #5]
	data[4] = '0' + (transmit_count/10) % 10;
 800017e:	4b42      	ldr	r3, [pc, #264]	; (8000288 <lora_transmit_data+0x13c>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	4a42      	ldr	r2, [pc, #264]	; (800028c <lora_transmit_data+0x140>)
 8000184:	fb82 1203 	smull	r1, r2, r2, r3
 8000188:	1092      	asrs	r2, r2, #2
 800018a:	17db      	asrs	r3, r3, #31
 800018c:	1ad2      	subs	r2, r2, r3
 800018e:	4b3f      	ldr	r3, [pc, #252]	; (800028c <lora_transmit_data+0x140>)
 8000190:	fb83 1302 	smull	r1, r3, r3, r2
 8000194:	1099      	asrs	r1, r3, #2
 8000196:	17d3      	asrs	r3, r2, #31
 8000198:	1ac9      	subs	r1, r1, r3
 800019a:	460b      	mov	r3, r1
 800019c:	009b      	lsls	r3, r3, #2
 800019e:	440b      	add	r3, r1
 80001a0:	005b      	lsls	r3, r3, #1
 80001a2:	1ad1      	subs	r1, r2, r3
 80001a4:	b2cb      	uxtb	r3, r1
 80001a6:	3330      	adds	r3, #48	; 0x30
 80001a8:	b2da      	uxtb	r2, r3
 80001aa:	4b39      	ldr	r3, [pc, #228]	; (8000290 <lora_transmit_data+0x144>)
 80001ac:	711a      	strb	r2, [r3, #4]
	data[3] = '0' + (transmit_count/100) % 10;
 80001ae:	4b36      	ldr	r3, [pc, #216]	; (8000288 <lora_transmit_data+0x13c>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4a38      	ldr	r2, [pc, #224]	; (8000294 <lora_transmit_data+0x148>)
 80001b4:	fb82 1203 	smull	r1, r2, r2, r3
 80001b8:	1152      	asrs	r2, r2, #5
 80001ba:	17db      	asrs	r3, r3, #31
 80001bc:	1ad2      	subs	r2, r2, r3
 80001be:	4b33      	ldr	r3, [pc, #204]	; (800028c <lora_transmit_data+0x140>)
 80001c0:	fb83 1302 	smull	r1, r3, r3, r2
 80001c4:	1099      	asrs	r1, r3, #2
 80001c6:	17d3      	asrs	r3, r2, #31
 80001c8:	1ac9      	subs	r1, r1, r3
 80001ca:	460b      	mov	r3, r1
 80001cc:	009b      	lsls	r3, r3, #2
 80001ce:	440b      	add	r3, r1
 80001d0:	005b      	lsls	r3, r3, #1
 80001d2:	1ad1      	subs	r1, r2, r3
 80001d4:	b2cb      	uxtb	r3, r1
 80001d6:	3330      	adds	r3, #48	; 0x30
 80001d8:	b2da      	uxtb	r2, r3
 80001da:	4b2d      	ldr	r3, [pc, #180]	; (8000290 <lora_transmit_data+0x144>)
 80001dc:	70da      	strb	r2, [r3, #3]
	data[2] = '0' + (transmit_count/1000) % 10;
 80001de:	4b2a      	ldr	r3, [pc, #168]	; (8000288 <lora_transmit_data+0x13c>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a2d      	ldr	r2, [pc, #180]	; (8000298 <lora_transmit_data+0x14c>)
 80001e4:	fb82 1203 	smull	r1, r2, r2, r3
 80001e8:	1192      	asrs	r2, r2, #6
 80001ea:	17db      	asrs	r3, r3, #31
 80001ec:	1ad2      	subs	r2, r2, r3
 80001ee:	4b27      	ldr	r3, [pc, #156]	; (800028c <lora_transmit_data+0x140>)
 80001f0:	fb83 1302 	smull	r1, r3, r3, r2
 80001f4:	1099      	asrs	r1, r3, #2
 80001f6:	17d3      	asrs	r3, r2, #31
 80001f8:	1ac9      	subs	r1, r1, r3
 80001fa:	460b      	mov	r3, r1
 80001fc:	009b      	lsls	r3, r3, #2
 80001fe:	440b      	add	r3, r1
 8000200:	005b      	lsls	r3, r3, #1
 8000202:	1ad1      	subs	r1, r2, r3
 8000204:	b2cb      	uxtb	r3, r1
 8000206:	3330      	adds	r3, #48	; 0x30
 8000208:	b2da      	uxtb	r2, r3
 800020a:	4b21      	ldr	r3, [pc, #132]	; (8000290 <lora_transmit_data+0x144>)
 800020c:	709a      	strb	r2, [r3, #2]
	data[1] = '0' + (transmit_count/10000) % 10;
 800020e:	4b1e      	ldr	r3, [pc, #120]	; (8000288 <lora_transmit_data+0x13c>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a22      	ldr	r2, [pc, #136]	; (800029c <lora_transmit_data+0x150>)
 8000214:	fb82 1203 	smull	r1, r2, r2, r3
 8000218:	1312      	asrs	r2, r2, #12
 800021a:	17db      	asrs	r3, r3, #31
 800021c:	1ad2      	subs	r2, r2, r3
 800021e:	4b1b      	ldr	r3, [pc, #108]	; (800028c <lora_transmit_data+0x140>)
 8000220:	fb83 1302 	smull	r1, r3, r3, r2
 8000224:	1099      	asrs	r1, r3, #2
 8000226:	17d3      	asrs	r3, r2, #31
 8000228:	1ac9      	subs	r1, r1, r3
 800022a:	460b      	mov	r3, r1
 800022c:	009b      	lsls	r3, r3, #2
 800022e:	440b      	add	r3, r1
 8000230:	005b      	lsls	r3, r3, #1
 8000232:	1ad1      	subs	r1, r2, r3
 8000234:	b2cb      	uxtb	r3, r1
 8000236:	3330      	adds	r3, #48	; 0x30
 8000238:	b2da      	uxtb	r2, r3
 800023a:	4b15      	ldr	r3, [pc, #84]	; (8000290 <lora_transmit_data+0x144>)
 800023c:	705a      	strb	r2, [r3, #1]
	data[0] = '0' + (transmit_count/100000) % 10;
 800023e:	4b12      	ldr	r3, [pc, #72]	; (8000288 <lora_transmit_data+0x13c>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a17      	ldr	r2, [pc, #92]	; (80002a0 <lora_transmit_data+0x154>)
 8000244:	fb82 1203 	smull	r1, r2, r2, r3
 8000248:	1352      	asrs	r2, r2, #13
 800024a:	17db      	asrs	r3, r3, #31
 800024c:	1ad2      	subs	r2, r2, r3
 800024e:	4b0f      	ldr	r3, [pc, #60]	; (800028c <lora_transmit_data+0x140>)
 8000250:	fb83 1302 	smull	r1, r3, r3, r2
 8000254:	1099      	asrs	r1, r3, #2
 8000256:	17d3      	asrs	r3, r2, #31
 8000258:	1ac9      	subs	r1, r1, r3
 800025a:	460b      	mov	r3, r1
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	440b      	add	r3, r1
 8000260:	005b      	lsls	r3, r3, #1
 8000262:	1ad1      	subs	r1, r2, r3
 8000264:	b2cb      	uxtb	r3, r1
 8000266:	3330      	adds	r3, #48	; 0x30
 8000268:	b2da      	uxtb	r2, r3
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <lora_transmit_data+0x144>)
 800026c:	701a      	strb	r2, [r3, #0]
	data[6] = '\0';
 800026e:	4b08      	ldr	r3, [pc, #32]	; (8000290 <lora_transmit_data+0x144>)
 8000270:	2200      	movs	r2, #0
 8000272:	719a      	strb	r2, [r3, #6]

	HAL_UART_Transmit_IT(&huart1, data, 7);
 8000274:	2207      	movs	r2, #7
 8000276:	4906      	ldr	r1, [pc, #24]	; (8000290 <lora_transmit_data+0x144>)
 8000278:	480a      	ldr	r0, [pc, #40]	; (80002a4 <lora_transmit_data+0x158>)
 800027a:	f002 fba6 	bl	80029ca <HAL_UART_Transmit_IT>

	return transmit_count;
 800027e:	4b02      	ldr	r3, [pc, #8]	; (8000288 <lora_transmit_data+0x13c>)
 8000280:	681b      	ldr	r3, [r3, #0]
}
 8000282:	4618      	mov	r0, r3
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	20000094 	.word	0x20000094
 800028c:	66666667 	.word	0x66666667
 8000290:	20000098 	.word	0x20000098
 8000294:	51eb851f 	.word	0x51eb851f
 8000298:	10624dd3 	.word	0x10624dd3
 800029c:	68db8bad 	.word	0x68db8bad
 80002a0:	14f8b589 	.word	0x14f8b589
 80002a4:	20000528 	.word	0x20000528

080002a8 <init_TX_mode_lora>:
//----------------------------------------------------------------------------------------
void init_TX_mode_lora(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	// з зчитаними даними конфіг регістрів. Якщо співпадає повністю, тоді записати в
	// глобальну змінну що модуль ініціалізований нормально

	static uint8_t data[10] = {0};

	set_config_deep_sleep_mode();
 80002ac:	f000 f862 	bl	8000374 <set_config_deep_sleep_mode>
	HAL_Delay(100);
 80002b0:	2064      	movs	r0, #100	; 0x64
 80002b2:	f000 feaf 	bl	8001014 <HAL_Delay>

	// Init module
	// Descripe settings structure
	data[0] = 0xC0;		// 0xC0 - Set register command
 80002b6:	4b1e      	ldr	r3, [pc, #120]	; (8000330 <init_TX_mode_lora+0x88>)
 80002b8:	22c0      	movs	r2, #192	; 0xc0
 80002ba:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;		// Starting address
 80002bc:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <init_TX_mode_lora+0x88>)
 80002be:	2200      	movs	r2, #0
 80002c0:	705a      	strb	r2, [r3, #1]
	data[2] = 0x03;		// Length
 80002c2:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <init_TX_mode_lora+0x88>)
 80002c4:	2203      	movs	r2, #3
 80002c6:	709a      	strb	r2, [r3, #2]
	data[3] = 0x12;		// 00H ADD H
 80002c8:	4b19      	ldr	r3, [pc, #100]	; (8000330 <init_TX_mode_lora+0x88>)
 80002ca:	2212      	movs	r2, #18
 80002cc:	70da      	strb	r2, [r3, #3]
	data[4] = 0x34;		// 01H ADD L
 80002ce:	4b18      	ldr	r3, [pc, #96]	; (8000330 <init_TX_mode_lora+0x88>)
 80002d0:	2234      	movs	r2, #52	; 0x34
 80002d2:	711a      	strb	r2, [r3, #4]
	data[5] = 0x62;		// 02H register (see in Datasheet)
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <init_TX_mode_lora+0x88>)
 80002d6:	2262      	movs	r2, #98	; 0x62
 80002d8:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit_IT(&huart1, data, 6);
 80002da:	2206      	movs	r2, #6
 80002dc:	4914      	ldr	r1, [pc, #80]	; (8000330 <init_TX_mode_lora+0x88>)
 80002de:	4815      	ldr	r0, [pc, #84]	; (8000334 <init_TX_mode_lora+0x8c>)
 80002e0:	f002 fb73 	bl	80029ca <HAL_UART_Transmit_IT>
	HAL_Delay(10);
 80002e4:	200a      	movs	r0, #10
 80002e6:	f000 fe95 	bl	8001014 <HAL_Delay>

	memset(data, 0, sizeof(data));
 80002ea:	220a      	movs	r2, #10
 80002ec:	2100      	movs	r1, #0
 80002ee:	4810      	ldr	r0, [pc, #64]	; (8000330 <init_TX_mode_lora+0x88>)
 80002f0:	f002 fff2 	bl	80032d8 <memset>
	// Set WOR Cycle
	data[0] = 0xC0;		// 0xC0 - Set register command
 80002f4:	4b0e      	ldr	r3, [pc, #56]	; (8000330 <init_TX_mode_lora+0x88>)
 80002f6:	22c0      	movs	r2, #192	; 0xc0
 80002f8:	701a      	strb	r2, [r3, #0]
	data[1] = 0x05;		// Starting address
 80002fa:	4b0d      	ldr	r3, [pc, #52]	; (8000330 <init_TX_mode_lora+0x88>)
 80002fc:	2205      	movs	r2, #5
 80002fe:	705a      	strb	r2, [r3, #1]
	data[2] = 0x01;		// Length
 8000300:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <init_TX_mode_lora+0x88>)
 8000302:	2201      	movs	r2, #1
 8000304:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;		// set WOR Cycle 500ms
 8000306:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <init_TX_mode_lora+0x88>)
 8000308:	2200      	movs	r2, #0
 800030a:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart1, data, 4);
 800030c:	2204      	movs	r2, #4
 800030e:	4908      	ldr	r1, [pc, #32]	; (8000330 <init_TX_mode_lora+0x88>)
 8000310:	4808      	ldr	r0, [pc, #32]	; (8000334 <init_TX_mode_lora+0x8c>)
 8000312:	f002 fb5a 	bl	80029ca <HAL_UART_Transmit_IT>
	HAL_Delay(10);
 8000316:	200a      	movs	r0, #10
 8000318:	f000 fe7c 	bl	8001014 <HAL_Delay>
	///////////////

	read_all_settings_from_module();
 800031c:	f000 f80c 	bl	8000338 <read_all_settings_from_module>
	set_WOR_TX_mode();
 8000320:	f000 f83a 	bl	8000398 <set_WOR_TX_mode>
	HAL_Delay(100);
 8000324:	2064      	movs	r0, #100	; 0x64
 8000326:	f000 fe75 	bl	8001014 <HAL_Delay>
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	200000a4 	.word	0x200000a4
 8000334:	20000528 	.word	0x20000528

08000338 <read_all_settings_from_module>:
//-------------------------------------------------------------------------------------------------
void read_all_settings_from_module(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	// Turn on configuration mode
	set_config_deep_sleep_mode();
 800033c:	f000 f81a 	bl	8000374 <set_config_deep_sleep_mode>
	HAL_Delay(10);
 8000340:	200a      	movs	r0, #10
 8000342:	f000 fe67 	bl	8001014 <HAL_Delay>

	static uint8_t data[10] = {0};
	// Read module address, serial port, and airspeed COMMAND
	data[0] = 0xC1;			// 0xC1 - Read register command
 8000346:	4b09      	ldr	r3, [pc, #36]	; (800036c <read_all_settings_from_module+0x34>)
 8000348:	22c1      	movs	r2, #193	; 0xc1
 800034a:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;			// Number of register for read
 800034c:	4b07      	ldr	r3, [pc, #28]	; (800036c <read_all_settings_from_module+0x34>)
 800034e:	2200      	movs	r2, #0
 8000350:	705a      	strb	r2, [r3, #1]
	data[2] = 0x08;			// How many registers must be read
 8000352:	4b06      	ldr	r3, [pc, #24]	; (800036c <read_all_settings_from_module+0x34>)
 8000354:	2208      	movs	r2, #8
 8000356:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_IT(&huart1, data, 3);
 8000358:	2203      	movs	r2, #3
 800035a:	4904      	ldr	r1, [pc, #16]	; (800036c <read_all_settings_from_module+0x34>)
 800035c:	4804      	ldr	r0, [pc, #16]	; (8000370 <read_all_settings_from_module+0x38>)
 800035e:	f002 fb34 	bl	80029ca <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 8000362:	2064      	movs	r0, #100	; 0x64
 8000364:	f000 fe56 	bl	8001014 <HAL_Delay>

	// Return:
	// 0xC1 0x00 0x03 0x12 0x34 0x62
	// 0x12 0x34 - Adders 1234
	// 0x62 - 9600, 8n1 and 2,4 k air data rate
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}
 800036c:	200000b0 	.word	0x200000b0
 8000370:	20000528 	.word	0x20000528

08000374 <set_config_deep_sleep_mode>:
//-------------------------------------------------------------------------------------------------
void set_config_deep_sleep_mode (void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	// Function use for go to deep sleep and configuration mode
	// Set M0 and M1 PINs
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_SET);
 8000378:	2201      	movs	r2, #1
 800037a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800037e:	4805      	ldr	r0, [pc, #20]	; (8000394 <set_config_deep_sleep_mode+0x20>)
 8000380:	f001 f9c5 	bl	800170e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 8000384:	2201      	movs	r2, #1
 8000386:	2101      	movs	r1, #1
 8000388:	4802      	ldr	r0, [pc, #8]	; (8000394 <set_config_deep_sleep_mode+0x20>)
 800038a:	f001 f9c0 	bl	800170e <HAL_GPIO_WritePin>
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40010c00 	.word	0x40010c00

08000398 <set_WOR_TX_mode>:
//-------------------------------------------------------------------------------------------------
void set_WOR_TX_mode (void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	// Set M0 and M1 PINs in WOR Transmitting mode
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_SET);
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <set_WOR_TX_mode+0x20>)
 80003a4:	f001 f9b3 	bl	800170e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2101      	movs	r1, #1
 80003ac:	4802      	ldr	r0, [pc, #8]	; (80003b8 <set_WOR_TX_mode+0x20>)
 80003ae:	f001 f9ae 	bl	800170e <HAL_GPIO_WritePin>
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40010c00 	.word	0x40010c00

080003bc <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af04      	add	r7, sp, #16
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80003c6:	230a      	movs	r3, #10
 80003c8:	9302      	str	r3, [sp, #8]
 80003ca:	2301      	movs	r3, #1
 80003cc:	9301      	str	r3, [sp, #4]
 80003ce:	1dfb      	adds	r3, r7, #7
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	2301      	movs	r3, #1
 80003d4:	2200      	movs	r2, #0
 80003d6:	2178      	movs	r1, #120	; 0x78
 80003d8:	4803      	ldr	r0, [pc, #12]	; (80003e8 <ssd1306_WriteCommand+0x2c>)
 80003da:	f001 faf5 	bl	80019c8 <HAL_I2C_Mem_Write>
}
 80003de:	bf00      	nop
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	200004d4 	.word	0x200004d4

080003ec <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 80003f0:	2064      	movs	r0, #100	; 0x64
 80003f2:	f000 fe0f 	bl	8001014 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 80003f6:	20ae      	movs	r0, #174	; 0xae
 80003f8:	f7ff ffe0 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80003fc:	2020      	movs	r0, #32
 80003fe:	f7ff ffdd 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000402:	2010      	movs	r0, #16
 8000404:	f7ff ffda 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000408:	20b0      	movs	r0, #176	; 0xb0
 800040a:	f7ff ffd7 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800040e:	20c8      	movs	r0, #200	; 0xc8
 8000410:	f7ff ffd4 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8000414:	2000      	movs	r0, #0
 8000416:	f7ff ffd1 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800041a:	2010      	movs	r0, #16
 800041c:	f7ff ffce 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8000420:	2040      	movs	r0, #64	; 0x40
 8000422:	f7ff ffcb 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8000426:	2081      	movs	r0, #129	; 0x81
 8000428:	f7ff ffc8 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 800042c:	20ff      	movs	r0, #255	; 0xff
 800042e:	f7ff ffc5 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8000432:	20a1      	movs	r0, #161	; 0xa1
 8000434:	f7ff ffc2 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8000438:	20a6      	movs	r0, #166	; 0xa6
 800043a:	f7ff ffbf 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 800043e:	20a8      	movs	r0, #168	; 0xa8
 8000440:	f7ff ffbc 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8000444:	203f      	movs	r0, #63	; 0x3f
 8000446:	f7ff ffb9 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800044a:	20a4      	movs	r0, #164	; 0xa4
 800044c:	f7ff ffb6 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8000450:	20d3      	movs	r0, #211	; 0xd3
 8000452:	f7ff ffb3 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8000456:	2000      	movs	r0, #0
 8000458:	f7ff ffb0 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800045c:	20d5      	movs	r0, #213	; 0xd5
 800045e:	f7ff ffad 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000462:	20f0      	movs	r0, #240	; 0xf0
 8000464:	f7ff ffaa 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000468:	20d9      	movs	r0, #217	; 0xd9
 800046a:	f7ff ffa7 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 800046e:	2022      	movs	r0, #34	; 0x22
 8000470:	f7ff ffa4 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8000474:	20da      	movs	r0, #218	; 0xda
 8000476:	f7ff ffa1 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 800047a:	2012      	movs	r0, #18
 800047c:	f7ff ff9e 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8000480:	20db      	movs	r0, #219	; 0xdb
 8000482:	f7ff ff9b 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000486:	2020      	movs	r0, #32
 8000488:	f7ff ff98 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800048c:	208d      	movs	r0, #141	; 0x8d
 800048e:	f7ff ff95 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8000492:	2014      	movs	r0, #20
 8000494:	f7ff ff92 	bl	80003bc <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000498:	20af      	movs	r0, #175	; 0xaf
 800049a:	f7ff ff8f 	bl	80003bc <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 800049e:	2000      	movs	r0, #0
 80004a0:	f000 f810 	bl	80004c4 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 80004a4:	f000 f830 	bl	8000508 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <ssd1306_Init+0xd4>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80004ae:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <ssd1306_Init+0xd4>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 80004b4:	4b02      	ldr	r3, [pc, #8]	; (80004c0 <ssd1306_Init+0xd4>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	715a      	strb	r2, [r3, #5]

	return 1;
 80004ba:	2301      	movs	r3, #1
}
 80004bc:	4618      	mov	r0, r3
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	200004bc 	.word	0x200004bc

080004c4 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80004ce:	2300      	movs	r3, #0
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	e00d      	b.n	80004f0 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d101      	bne.n	80004de <ssd1306_Fill+0x1a>
 80004da:	2100      	movs	r1, #0
 80004dc:	e000      	b.n	80004e0 <ssd1306_Fill+0x1c>
 80004de:	21ff      	movs	r1, #255	; 0xff
 80004e0:	4a08      	ldr	r2, [pc, #32]	; (8000504 <ssd1306_Fill+0x40>)
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	4413      	add	r3, r2
 80004e6:	460a      	mov	r2, r1
 80004e8:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	3301      	adds	r3, #1
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004f6:	d3ed      	bcc.n	80004d4 <ssd1306_Fill+0x10>
	}
}
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
 8000504:	200000bc 	.word	0x200000bc

08000508 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 800050e:	2300      	movs	r3, #0
 8000510:	71fb      	strb	r3, [r7, #7]
 8000512:	e01d      	b.n	8000550 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	3b50      	subs	r3, #80	; 0x50
 8000518:	b2db      	uxtb	r3, r3
 800051a:	4618      	mov	r0, r3
 800051c:	f7ff ff4e 	bl	80003bc <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000520:	2000      	movs	r0, #0
 8000522:	f7ff ff4b 	bl	80003bc <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8000526:	2010      	movs	r0, #16
 8000528:	f7ff ff48 	bl	80003bc <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	01db      	lsls	r3, r3, #7
 8000530:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <ssd1306_UpdateScreen+0x58>)
 8000532:	4413      	add	r3, r2
 8000534:	2264      	movs	r2, #100	; 0x64
 8000536:	9202      	str	r2, [sp, #8]
 8000538:	2280      	movs	r2, #128	; 0x80
 800053a:	9201      	str	r2, [sp, #4]
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2301      	movs	r3, #1
 8000540:	2240      	movs	r2, #64	; 0x40
 8000542:	2178      	movs	r1, #120	; 0x78
 8000544:	4807      	ldr	r0, [pc, #28]	; (8000564 <ssd1306_UpdateScreen+0x5c>)
 8000546:	f001 fa3f 	bl	80019c8 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	3301      	adds	r3, #1
 800054e:	71fb      	strb	r3, [r7, #7]
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	2b07      	cmp	r3, #7
 8000554:	d9de      	bls.n	8000514 <ssd1306_UpdateScreen+0xc>
	}
}
 8000556:	bf00      	nop
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	200000bc 	.word	0x200000bc
 8000564:	200004d4 	.word	0x200004d4

08000568 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
 8000572:	460b      	mov	r3, r1
 8000574:	71bb      	strb	r3, [r7, #6]
 8000576:	4613      	mov	r3, r2
 8000578:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 800057a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057e:	2b00      	cmp	r3, #0
 8000580:	db48      	blt.n	8000614 <ssd1306_DrawPixel+0xac>
 8000582:	79bb      	ldrb	r3, [r7, #6]
 8000584:	2b3f      	cmp	r3, #63	; 0x3f
 8000586:	d845      	bhi.n	8000614 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8000588:	4b25      	ldr	r3, [pc, #148]	; (8000620 <ssd1306_DrawPixel+0xb8>)
 800058a:	791b      	ldrb	r3, [r3, #4]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d006      	beq.n	800059e <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8000590:	797b      	ldrb	r3, [r7, #5]
 8000592:	2b00      	cmp	r3, #0
 8000594:	bf0c      	ite	eq
 8000596:	2301      	moveq	r3, #1
 8000598:	2300      	movne	r3, #0
 800059a:	b2db      	uxtb	r3, r3
 800059c:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 800059e:	797b      	ldrb	r3, [r7, #5]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d11a      	bne.n	80005da <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80005a4:	79fa      	ldrb	r2, [r7, #7]
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	08db      	lsrs	r3, r3, #3
 80005aa:	b2d8      	uxtb	r0, r3
 80005ac:	4603      	mov	r3, r0
 80005ae:	01db      	lsls	r3, r3, #7
 80005b0:	4413      	add	r3, r2
 80005b2:	4a1c      	ldr	r2, [pc, #112]	; (8000624 <ssd1306_DrawPixel+0xbc>)
 80005b4:	5cd3      	ldrb	r3, [r2, r3]
 80005b6:	b25a      	sxtb	r2, r3
 80005b8:	79bb      	ldrb	r3, [r7, #6]
 80005ba:	f003 0307 	and.w	r3, r3, #7
 80005be:	2101      	movs	r1, #1
 80005c0:	fa01 f303 	lsl.w	r3, r1, r3
 80005c4:	b25b      	sxtb	r3, r3
 80005c6:	4313      	orrs	r3, r2
 80005c8:	b259      	sxtb	r1, r3
 80005ca:	79fa      	ldrb	r2, [r7, #7]
 80005cc:	4603      	mov	r3, r0
 80005ce:	01db      	lsls	r3, r3, #7
 80005d0:	4413      	add	r3, r2
 80005d2:	b2c9      	uxtb	r1, r1
 80005d4:	4a13      	ldr	r2, [pc, #76]	; (8000624 <ssd1306_DrawPixel+0xbc>)
 80005d6:	54d1      	strb	r1, [r2, r3]
 80005d8:	e01d      	b.n	8000616 <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80005da:	79fa      	ldrb	r2, [r7, #7]
 80005dc:	79bb      	ldrb	r3, [r7, #6]
 80005de:	08db      	lsrs	r3, r3, #3
 80005e0:	b2d8      	uxtb	r0, r3
 80005e2:	4603      	mov	r3, r0
 80005e4:	01db      	lsls	r3, r3, #7
 80005e6:	4413      	add	r3, r2
 80005e8:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <ssd1306_DrawPixel+0xbc>)
 80005ea:	5cd3      	ldrb	r3, [r2, r3]
 80005ec:	b25a      	sxtb	r2, r3
 80005ee:	79bb      	ldrb	r3, [r7, #6]
 80005f0:	f003 0307 	and.w	r3, r3, #7
 80005f4:	2101      	movs	r1, #1
 80005f6:	fa01 f303 	lsl.w	r3, r1, r3
 80005fa:	b25b      	sxtb	r3, r3
 80005fc:	43db      	mvns	r3, r3
 80005fe:	b25b      	sxtb	r3, r3
 8000600:	4013      	ands	r3, r2
 8000602:	b259      	sxtb	r1, r3
 8000604:	79fa      	ldrb	r2, [r7, #7]
 8000606:	4603      	mov	r3, r0
 8000608:	01db      	lsls	r3, r3, #7
 800060a:	4413      	add	r3, r2
 800060c:	b2c9      	uxtb	r1, r1
 800060e:	4a05      	ldr	r2, [pc, #20]	; (8000624 <ssd1306_DrawPixel+0xbc>)
 8000610:	54d1      	strb	r1, [r2, r3]
 8000612:	e000      	b.n	8000616 <ssd1306_DrawPixel+0xae>
		return;
 8000614:	bf00      	nop
	}
}
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	200004bc 	.word	0x200004bc
 8000624:	200000bc 	.word	0x200000bc

08000628 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000628:	b590      	push	{r4, r7, lr}
 800062a:	b089      	sub	sp, #36	; 0x24
 800062c:	af00      	add	r7, sp, #0
 800062e:	4604      	mov	r4, r0
 8000630:	1d38      	adds	r0, r7, #4
 8000632:	e880 0006 	stmia.w	r0, {r1, r2}
 8000636:	461a      	mov	r2, r3
 8000638:	4623      	mov	r3, r4
 800063a:	73fb      	strb	r3, [r7, #15]
 800063c:	4613      	mov	r3, r2
 800063e:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000640:	4b38      	ldr	r3, [pc, #224]	; (8000724 <ssd1306_WriteChar+0xfc>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	793b      	ldrb	r3, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	2b7f      	cmp	r3, #127	; 0x7f
 800064c:	dc06      	bgt.n	800065c <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800064e:	4b35      	ldr	r3, [pc, #212]	; (8000724 <ssd1306_WriteChar+0xfc>)
 8000650:	885b      	ldrh	r3, [r3, #2]
 8000652:	461a      	mov	r2, r3
 8000654:	797b      	ldrb	r3, [r7, #5]
 8000656:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000658:	2b3f      	cmp	r3, #63	; 0x3f
 800065a:	dd01      	ble.n	8000660 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 800065c:	2300      	movs	r3, #0
 800065e:	e05d      	b.n	800071c <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
 8000664:	e04c      	b.n	8000700 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000666:	68ba      	ldr	r2, [r7, #8]
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	3b20      	subs	r3, #32
 800066c:	7979      	ldrb	r1, [r7, #5]
 800066e:	fb01 f303 	mul.w	r3, r1, r3
 8000672:	4619      	mov	r1, r3
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	440b      	add	r3, r1
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	4413      	add	r3, r2
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
 8000684:	e034      	b.n	80006f0 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 8000686:	697a      	ldr	r2, [r7, #20]
 8000688:	69bb      	ldr	r3, [r7, #24]
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000692:	2b00      	cmp	r3, #0
 8000694:	d012      	beq.n	80006bc <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000696:	4b23      	ldr	r3, [pc, #140]	; (8000724 <ssd1306_WriteChar+0xfc>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	b2da      	uxtb	r2, r3
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4413      	add	r3, r2
 80006a2:	b2d8      	uxtb	r0, r3
 80006a4:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <ssd1306_WriteChar+0xfc>)
 80006a6:	885b      	ldrh	r3, [r3, #2]
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	4413      	add	r3, r2
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	7bba      	ldrb	r2, [r7, #14]
 80006b4:	4619      	mov	r1, r3
 80006b6:	f7ff ff57 	bl	8000568 <ssd1306_DrawPixel>
 80006ba:	e016      	b.n	80006ea <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <ssd1306_WriteChar+0xfc>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	69bb      	ldr	r3, [r7, #24]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	4413      	add	r3, r2
 80006c8:	b2d8      	uxtb	r0, r3
 80006ca:	4b16      	ldr	r3, [pc, #88]	; (8000724 <ssd1306_WriteChar+0xfc>)
 80006cc:	885b      	ldrh	r3, [r3, #2]
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	4413      	add	r3, r2
 80006d6:	b2d9      	uxtb	r1, r3
 80006d8:	7bbb      	ldrb	r3, [r7, #14]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	bf0c      	ite	eq
 80006de:	2301      	moveq	r3, #1
 80006e0:	2300      	movne	r3, #0
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	461a      	mov	r2, r3
 80006e6:	f7ff ff3f 	bl	8000568 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	3301      	adds	r3, #1
 80006ee:	61bb      	str	r3, [r7, #24]
 80006f0:	793b      	ldrb	r3, [r7, #4]
 80006f2:	461a      	mov	r2, r3
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d3c5      	bcc.n	8000686 <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	3301      	adds	r3, #1
 80006fe:	61fb      	str	r3, [r7, #28]
 8000700:	797b      	ldrb	r3, [r7, #5]
 8000702:	461a      	mov	r2, r3
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	4293      	cmp	r3, r2
 8000708:	d3ad      	bcc.n	8000666 <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <ssd1306_WriteChar+0xfc>)
 800070c:	881a      	ldrh	r2, [r3, #0]
 800070e:	793b      	ldrb	r3, [r7, #4]
 8000710:	b29b      	uxth	r3, r3
 8000712:	4413      	add	r3, r2
 8000714:	b29a      	uxth	r2, r3
 8000716:	4b03      	ldr	r3, [pc, #12]	; (8000724 <ssd1306_WriteChar+0xfc>)
 8000718:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 800071a:	7bfb      	ldrb	r3, [r7, #15]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3724      	adds	r7, #36	; 0x24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd90      	pop	{r4, r7, pc}
 8000724:	200004bc 	.word	0x200004bc

08000728 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	1d38      	adds	r0, r7, #4
 8000732:	e880 0006 	stmia.w	r0, {r1, r2}
 8000736:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 8000738:	e012      	b.n	8000760 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	7818      	ldrb	r0, [r3, #0]
 800073e:	78fb      	ldrb	r3, [r7, #3]
 8000740:	1d3a      	adds	r2, r7, #4
 8000742:	ca06      	ldmia	r2, {r1, r2}
 8000744:	f7ff ff70 	bl	8000628 <ssd1306_WriteChar>
 8000748:	4603      	mov	r3, r0
 800074a:	461a      	mov	r2, r3
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	429a      	cmp	r2, r3
 8000752:	d002      	beq.n	800075a <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	e008      	b.n	800076c <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3301      	adds	r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1e8      	bne.n	800073a <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	781b      	ldrb	r3, [r3, #0]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	71fb      	strb	r3, [r7, #7]
 8000780:	4613      	mov	r3, r2
 8000782:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	b29a      	uxth	r2, r3
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <ssd1306_SetCursor+0x2c>)
 800078a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 800078c:	79bb      	ldrb	r3, [r7, #6]
 800078e:	b29a      	uxth	r2, r3
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <ssd1306_SetCursor+0x2c>)
 8000792:	805a      	strh	r2, [r3, #2]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	200004bc 	.word	0x200004bc

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b092      	sub	sp, #72	; 0x48
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007aa:	f000 fbd1 	bl	8000f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ae:	f000 f8b1 	bl	8000914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b2:	f000 f983 	bl	8000abc <MX_GPIO_Init>
  MX_I2C1_Init();
 80007b6:	f000 f8f3 	bl	80009a0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80007ba:	f000 f91f 	bl	80009fc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80007be:	f000 f953 	bl	8000a68 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	2025      	movs	r0, #37	; 0x25
 80007c8:	f000 fd1f 	bl	800120a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007cc:	2025      	movs	r0, #37	; 0x25
 80007ce:	f000 fd38 	bl	8001242 <HAL_NVIC_EnableIRQ>


  ssd1306_Init();
 80007d2:	f7ff fe0b 	bl	80003ec <ssd1306_Init>
  ssd1306_Fill(Black);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f7ff fe74 	bl	80004c4 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80007dc:	f7ff fe94 	bl	8000508 <ssd1306_UpdateScreen>
  NRF24_ini();
  read_config_registers();
#endif

#if lora
  ssd1306_SetCursor(0, 0);
 80007e0:	2100      	movs	r1, #0
 80007e2:	2000      	movs	r0, #0
 80007e4:	f7ff ffc6 	bl	8000774 <ssd1306_SetCursor>
  char test_main[50] = {0};
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	222e      	movs	r2, #46	; 0x2e
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 fd6f 	bl	80032d8 <memset>
  strcpy(test_main, "LoRa TX:");
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	4a3c      	ldr	r2, [pc, #240]	; (80008f0 <main+0x14c>)
 80007fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000800:	c303      	stmia	r3!, {r0, r1}
 8000802:	701a      	strb	r2, [r3, #0]
  ssd1306_WriteString(test_main,  Font_7x10, White);
 8000804:	4a3b      	ldr	r2, [pc, #236]	; (80008f4 <main+0x150>)
 8000806:	1d38      	adds	r0, r7, #4
 8000808:	2301      	movs	r3, #1
 800080a:	ca06      	ldmia	r2, {r1, r2}
 800080c:	f7ff ff8c 	bl	8000728 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000810:	f7ff fe7a 	bl	8000508 <ssd1306_UpdateScreen>

  HAL_Delay(1000);
 8000814:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000818:	f000 fbfc 	bl	8001014 <HAL_Delay>
  init_TX_mode_lora();
 800081c:	f7ff fd44 	bl	80002a8 <init_TX_mode_lora>

  ssd1306_SetCursor(65, 0);
 8000820:	2100      	movs	r1, #0
 8000822:	2041      	movs	r0, #65	; 0x41
 8000824:	f7ff ffa6 	bl	8000774 <ssd1306_SetCursor>
  strcpy(test_main, "Ready");
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	4a33      	ldr	r2, [pc, #204]	; (80008f8 <main+0x154>)
 800082c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000830:	6018      	str	r0, [r3, #0]
 8000832:	3304      	adds	r3, #4
 8000834:	8019      	strh	r1, [r3, #0]
  ssd1306_WriteString(test_main,  Font_7x10, White);
 8000836:	4a2f      	ldr	r2, [pc, #188]	; (80008f4 <main+0x150>)
 8000838:	1d38      	adds	r0, r7, #4
 800083a:	2301      	movs	r3, #1
 800083c:	ca06      	ldmia	r2, {r1, r2}
 800083e:	f7ff ff73 	bl	8000728 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000842:	f7ff fe61 	bl	8000508 <ssd1306_UpdateScreen>

  ssd1306_SetCursor(0, 16);
 8000846:	2110      	movs	r1, #16
 8000848:	2000      	movs	r0, #0
 800084a:	f7ff ff93 	bl	8000774 <ssd1306_SetCursor>
  strcpy(test_main, "TX data: ");
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4a2a      	ldr	r2, [pc, #168]	; (80008fc <main+0x158>)
 8000852:	ca07      	ldmia	r2, {r0, r1, r2}
 8000854:	c303      	stmia	r3!, {r0, r1}
 8000856:	801a      	strh	r2, [r3, #0]
  ssd1306_WriteString(test_main,  Font_7x10, White);
 8000858:	4a26      	ldr	r2, [pc, #152]	; (80008f4 <main+0x150>)
 800085a:	1d38      	adds	r0, r7, #4
 800085c:	2301      	movs	r3, #1
 800085e:	ca06      	ldmia	r2, {r1, r2}
 8000860:	f7ff ff62 	bl	8000728 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000864:	f7ff fe50 	bl	8000508 <ssd1306_UpdateScreen>

  HAL_UART_Receive_IT(&huart1, str, 1);
 8000868:	2201      	movs	r2, #1
 800086a:	4925      	ldr	r1, [pc, #148]	; (8000900 <main+0x15c>)
 800086c:	4825      	ldr	r0, [pc, #148]	; (8000904 <main+0x160>)
 800086e:	f002 f8f0 	bl	8002a52 <HAL_UART_Receive_IT>
	#if nrf
  nrf_communication_test();      // Main function LORA
	#endif

	#if lora
 	  int count = lora_transmit_data();
 8000872:	f7ff fc6b 	bl	800014c <lora_transmit_data>
 8000876:	6478      	str	r0, [r7, #68]	; 0x44
// 	  // Print transmeeting data
 	  memset(test_main, 0, sizeof(test_main));
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2232      	movs	r2, #50	; 0x32
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f002 fd2a 	bl	80032d8 <memset>
 	  ssd1306_SetCursor(60, 16);
 8000884:	2110      	movs	r1, #16
 8000886:	203c      	movs	r0, #60	; 0x3c
 8000888:	f7ff ff74 	bl	8000774 <ssd1306_SetCursor>
 	  sprintf(test_main, "%d", count);
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000890:	491d      	ldr	r1, [pc, #116]	; (8000908 <main+0x164>)
 8000892:	4618      	mov	r0, r3
 8000894:	f002 fd28 	bl	80032e8 <siprintf>
 	  ssd1306_WriteString(test_main,  Font_7x10, White);
 8000898:	4a16      	ldr	r2, [pc, #88]	; (80008f4 <main+0x150>)
 800089a:	1d38      	adds	r0, r7, #4
 800089c:	2301      	movs	r3, #1
 800089e:	ca06      	ldmia	r2, {r1, r2}
 80008a0:	f7ff ff42 	bl	8000728 <ssd1306_WriteString>
 	  ssd1306_UpdateScreen();
 80008a4:	f7ff fe30 	bl	8000508 <ssd1306_UpdateScreen>

 	  HAL_Delay(2000);			// Must be more than 1.5 sec
 80008a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008ac:	f000 fbb2 	bl	8001014 <HAL_Delay>


 	// Buttons test	 /////////////////////////////
    if(HAL_GPIO_ReadPin(GPIOB, SW1_Pin) == 0)	// if button pressed
 80008b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b4:	4815      	ldr	r0, [pc, #84]	; (800090c <main+0x168>)
 80008b6:	f000 ff13 	bl	80016e0 <HAL_GPIO_ReadPin>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d101      	bne.n	80008c4 <main+0x120>
    {
    	int g = 99;
 80008c0:	2363      	movs	r3, #99	; 0x63
 80008c2:	643b      	str	r3, [r7, #64]	; 0x40
    }
    if(HAL_GPIO_ReadPin(GPIOB, SW2_Pin) == 0)	// if button pressed
 80008c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008c8:	4810      	ldr	r0, [pc, #64]	; (800090c <main+0x168>)
 80008ca:	f000 ff09 	bl	80016e0 <HAL_GPIO_ReadPin>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d101      	bne.n	80008d8 <main+0x134>
    {
    	int h = 99;
 80008d4:	2363      	movs	r3, #99	; 0x63
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if(HAL_GPIO_ReadPin(GPIOA, SW3_Pin) == 0)	// if button pressed
 80008d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008dc:	480c      	ldr	r0, [pc, #48]	; (8000910 <main+0x16c>)
 80008de:	f000 feff 	bl	80016e0 <HAL_GPIO_ReadPin>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d1c4      	bne.n	8000872 <main+0xce>
    {
    	int j = 99;
 80008e8:	2363      	movs	r3, #99	; 0x63
 80008ea:	63bb      	str	r3, [r7, #56]	; 0x38
  {
 80008ec:	e7c1      	b.n	8000872 <main+0xce>
 80008ee:	bf00      	nop
 80008f0:	08003b74 	.word	0x08003b74
 80008f4:	20000000 	.word	0x20000000
 80008f8:	08003b80 	.word	0x08003b80
 80008fc:	08003b88 	.word	0x08003b88
 8000900:	200004c4 	.word	0x200004c4
 8000904:	20000528 	.word	0x20000528
 8000908:	08003b94 	.word	0x08003b94
 800090c:	40010c00 	.word	0x40010c00
 8000910:	40010800 	.word	0x40010800

08000914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b090      	sub	sp, #64	; 0x40
 8000918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091a:	f107 0318 	add.w	r3, r7, #24
 800091e:	2228      	movs	r2, #40	; 0x28
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f002 fcd8 	bl	80032d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000936:	2301      	movs	r3, #1
 8000938:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800093a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800093e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000944:	2301      	movs	r3, #1
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000948:	2302      	movs	r3, #2
 800094a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000950:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000952:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000956:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000958:	f107 0318 	add.w	r3, r7, #24
 800095c:	4618      	mov	r0, r3
 800095e:	f001 fb49 	bl	8001ff4 <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000968:	f000 f94a 	bl	8000c00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096c:	230f      	movs	r3, #15
 800096e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000970:	2302      	movs	r3, #2
 8000972:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2102      	movs	r1, #2
 8000986:	4618      	mov	r0, r3
 8000988:	f001 fdb4 	bl	80024f4 <HAL_RCC_ClockConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000992:	f000 f935 	bl	8000c00 <Error_Handler>
  }
}
 8000996:	bf00      	nop
 8000998:	3740      	adds	r7, #64	; 0x40
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009a6:	4a13      	ldr	r2, [pc, #76]	; (80009f4 <MX_I2C1_Init+0x54>)
 80009a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009ac:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <MX_I2C1_Init+0x58>)
 80009ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009de:	f000 feaf 	bl	8001740 <HAL_I2C_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009e8:	f000 f90a 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200004d4 	.word	0x200004d4
 80009f4:	40005400 	.word	0x40005400
 80009f8:	000186a0 	.word	0x000186a0

080009fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a02:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <MX_SPI1_Init+0x68>)
 8000a04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a30:	2220      	movs	r2, #32
 8000a32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a48:	220a      	movs	r2, #10
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <MX_SPI1_Init+0x64>)
 8000a4e:	f001 feeb 	bl	8002828 <HAL_SPI_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a58:	f000 f8d2 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2000056c 	.word	0x2000056c
 8000a64:	40013000 	.word	0x40013000

08000a68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MX_USART1_UART_Init+0x50>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000aa0:	f001 ff46 	bl	8002930 <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aaa:	f000 f8a9 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000528 	.word	0x20000528
 8000ab8:	40013800 	.word	0x40013800

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 0310 	add.w	r3, r7, #16
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad0:	4b47      	ldr	r3, [pc, #284]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a46      	ldr	r2, [pc, #280]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000ad6:	f043 0310 	orr.w	r3, r3, #16
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b44      	ldr	r3, [pc, #272]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f003 0310 	and.w	r3, r3, #16
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae8:	4b41      	ldr	r3, [pc, #260]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a40      	ldr	r2, [pc, #256]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000aee:	f043 0320 	orr.w	r3, r3, #32
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b3e      	ldr	r3, [pc, #248]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f003 0320 	and.w	r3, r3, #32
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	4b3b      	ldr	r3, [pc, #236]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a3a      	ldr	r2, [pc, #232]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000b06:	f043 0304 	orr.w	r3, r3, #4
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b38      	ldr	r3, [pc, #224]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b18:	4b35      	ldr	r3, [pc, #212]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a34      	ldr	r2, [pc, #208]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000b1e:	f043 0308 	orr.w	r3, r3, #8
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b32      	ldr	r3, [pc, #200]	; (8000bf0 <MX_GPIO_Init+0x134>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0308 	and.w	r3, r3, #8
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b36:	482f      	ldr	r0, [pc, #188]	; (8000bf4 <MX_GPIO_Init+0x138>)
 8000b38:	f000 fde9 	bl	800170e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2108      	movs	r1, #8
 8000b40:	482d      	ldr	r0, [pc, #180]	; (8000bf8 <MX_GPIO_Init+0x13c>)
 8000b42:	f000 fde4 	bl	800170e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	2110      	movs	r1, #16
 8000b4a:	482b      	ldr	r0, [pc, #172]	; (8000bf8 <MX_GPIO_Init+0x13c>)
 8000b4c:	f000 fddf 	bl	800170e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f242 0101 	movw	r1, #8193	; 0x2001
 8000b56:	4829      	ldr	r0, [pc, #164]	; (8000bfc <MX_GPIO_Init+0x140>)
 8000b58:	f000 fdd9 	bl	800170e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6e:	f107 0310 	add.w	r3, r7, #16
 8000b72:	4619      	mov	r1, r3
 8000b74:	481f      	ldr	r0, [pc, #124]	; (8000bf4 <MX_GPIO_Init+0x138>)
 8000b76:	f000 fc2f 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 SW3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|SW3_Pin;
 8000b7a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000b7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	481a      	ldr	r0, [pc, #104]	; (8000bf8 <MX_GPIO_Init+0x13c>)
 8000b90:	f000 fc22 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000b94:	2318      	movs	r3, #24
 8000b96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4813      	ldr	r0, [pc, #76]	; (8000bf8 <MX_GPIO_Init+0x13c>)
 8000bac:	f000 fc14 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 8000bb0:	f242 0301 	movw	r3, #8193	; 0x2001
 8000bb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 0310 	add.w	r3, r7, #16
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480c      	ldr	r0, [pc, #48]	; (8000bfc <MX_GPIO_Init+0x140>)
 8000bca:	f000 fc05 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AUX_Pin SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = AUX_Pin|SW1_Pin|SW2_Pin;
 8000bce:	f24c 0302 	movw	r3, #49154	; 0xc002
 8000bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	4619      	mov	r1, r3
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_GPIO_Init+0x140>)
 8000be4:	f000 fbf8 	bl	80013d8 <HAL_GPIO_Init>

}
 8000be8:	bf00      	nop
 8000bea:	3720      	adds	r7, #32
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40011000 	.word	0x40011000
 8000bf8:	40010800 	.word	0x40010800
 8000bfc:	40010c00 	.word	0x40010c00

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>
	...

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6193      	str	r3, [r2, #24]
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	61d3      	str	r3, [r2, #28]
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <HAL_MspInit+0x60>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_MspInit+0x60>)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40010000 	.word	0x40010000

08000c70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a15      	ldr	r2, [pc, #84]	; (8000ce0 <HAL_I2C_MspInit+0x70>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d123      	bne.n	8000cd8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_I2C_MspInit+0x74>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a13      	ldr	r2, [pc, #76]	; (8000ce4 <HAL_I2C_MspInit+0x74>)
 8000c96:	f043 0308 	orr.w	r3, r3, #8
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_I2C_MspInit+0x74>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0308 	and.w	r3, r3, #8
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ca8:	23c0      	movs	r3, #192	; 0xc0
 8000caa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cac:	2312      	movs	r3, #18
 8000cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480b      	ldr	r0, [pc, #44]	; (8000ce8 <HAL_I2C_MspInit+0x78>)
 8000cbc:	f000 fb8c 	bl	80013d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_I2C_MspInit+0x74>)
 8000cc2:	69db      	ldr	r3, [r3, #28]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_I2C_MspInit+0x74>)
 8000cc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cca:	61d3      	str	r3, [r2, #28]
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_I2C_MspInit+0x74>)
 8000cce:	69db      	ldr	r3, [r3, #28]
 8000cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cd8:	bf00      	nop
 8000cda:	3720      	adds	r7, #32
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40005400 	.word	0x40005400
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40010c00 	.word	0x40010c00

08000cec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a1b      	ldr	r2, [pc, #108]	; (8000d74 <HAL_SPI_MspInit+0x88>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d12f      	bne.n	8000d6c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <HAL_SPI_MspInit+0x8c>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a19      	ldr	r2, [pc, #100]	; (8000d78 <HAL_SPI_MspInit+0x8c>)
 8000d12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <HAL_SPI_MspInit+0x8c>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <HAL_SPI_MspInit+0x8c>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a13      	ldr	r2, [pc, #76]	; (8000d78 <HAL_SPI_MspInit+0x8c>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <HAL_SPI_MspInit+0x8c>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d3c:	23a0      	movs	r3, #160	; 0xa0
 8000d3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480b      	ldr	r0, [pc, #44]	; (8000d7c <HAL_SPI_MspInit+0x90>)
 8000d50:	f000 fb42 	bl	80013d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d54:	2340      	movs	r3, #64	; 0x40
 8000d56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	4619      	mov	r1, r3
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <HAL_SPI_MspInit+0x90>)
 8000d68:	f000 fb36 	bl	80013d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d6c:	bf00      	nop
 8000d6e:	3720      	adds	r7, #32
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40013000 	.word	0x40013000
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40010800 	.word	0x40010800

08000d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a20      	ldr	r2, [pc, #128]	; (8000e1c <HAL_UART_MspInit+0x9c>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d139      	bne.n	8000e14 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000da0:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <HAL_UART_MspInit+0xa0>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a1e      	ldr	r2, [pc, #120]	; (8000e20 <HAL_UART_MspInit+0xa0>)
 8000da6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <HAL_UART_MspInit+0xa0>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <HAL_UART_MspInit+0xa0>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a18      	ldr	r2, [pc, #96]	; (8000e20 <HAL_UART_MspInit+0xa0>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <HAL_UART_MspInit+0xa0>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f003 0304 	and.w	r3, r3, #4
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0310 	add.w	r3, r7, #16
 8000de2:	4619      	mov	r1, r3
 8000de4:	480f      	ldr	r0, [pc, #60]	; (8000e24 <HAL_UART_MspInit+0xa4>)
 8000de6:	f000 faf7 	bl	80013d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4809      	ldr	r0, [pc, #36]	; (8000e24 <HAL_UART_MspInit+0xa4>)
 8000e00:	f000 faea 	bl	80013d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	2025      	movs	r0, #37	; 0x25
 8000e0a:	f000 f9fe 	bl	800120a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e0e:	2025      	movs	r0, #37	; 0x25
 8000e10:	f000 fa17 	bl	8001242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e14:	bf00      	nop
 8000e16:	3720      	adds	r7, #32
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40013800 	.word	0x40013800
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40010800 	.word	0x40010800

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <NMI_Handler+0x4>

08000e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <HardFault_Handler+0x4>

08000e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <MemManage_Handler+0x4>

08000e3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3e:	e7fe      	b.n	8000e3e <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr

08000e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr

08000e6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6e:	f000 f8b5 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <USART1_IRQHandler+0x10>)
 8000e7e:	f001 fe19 	bl	8002ab4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000528 	.word	0x20000528

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f002 f9e2 	bl	8003284 <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20005000 	.word	0x20005000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	200004c8 	.word	0x200004c8
 8000ef4:	200005d8 	.word	0x200005d8

08000ef8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f06:	490d      	ldr	r1, [pc, #52]	; (8000f3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f1c:	4c0a      	ldr	r4, [pc, #40]	; (8000f48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f2a:	f7ff ffe5 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f002 f9af 	bl	8003290 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f32:	f7ff fc37 	bl	80007a4 <main>
  bx lr
 8000f36:	4770      	bx	lr
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f40:	08004368 	.word	0x08004368
  ldr r2, =_sbss
 8000f44:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f48:	200005d8 	.word	0x200005d8

08000f4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC1_2_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x28>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x28>)
 8000f5a:	f043 0310 	orr.w	r3, r3, #16
 8000f5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 f947 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f7ff fe4e 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40022000 	.word	0x40022000

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f95f 	bl	800125e <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fb8:	f000 f927 	bl	800120a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	20000010 	.word	0x20000010
 8000fd8:	2000000c 	.word	0x2000000c

08000fdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_IncTick+0x1c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a03      	ldr	r2, [pc, #12]	; (8000ffc <HAL_IncTick+0x20>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	20000010 	.word	0x20000010
 8000ffc:	200005c4 	.word	0x200005c4

08001000 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return uwTick;
 8001004:	4b02      	ldr	r3, [pc, #8]	; (8001010 <HAL_GetTick+0x10>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	200005c4 	.word	0x200005c4

08001014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800101c:	f7ff fff0 	bl	8001000 <HAL_GetTick>
 8001020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800102c:	d005      	beq.n	800103a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_Delay+0x44>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4413      	add	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800103a:	bf00      	nop
 800103c:	f7ff ffe0 	bl	8001000 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	429a      	cmp	r2, r3
 800104a:	d8f7      	bhi.n	800103c <HAL_Delay+0x28>
  {
  }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000010 	.word	0x20000010

0800105c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	60d3      	str	r3, [r2, #12]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <__NVIC_GetPriorityGrouping+0x18>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	f003 0307 	and.w	r3, r3, #7
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	db0b      	blt.n	80010ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f003 021f 	and.w	r2, r3, #31
 80010d8:	4906      	ldr	r1, [pc, #24]	; (80010f4 <__NVIC_EnableIRQ+0x34>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	095b      	lsrs	r3, r3, #5
 80010e0:	2001      	movs	r0, #1
 80010e2:	fa00 f202 	lsl.w	r2, r0, r2
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100

080010f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	db0a      	blt.n	8001122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	490c      	ldr	r1, [pc, #48]	; (8001144 <__NVIC_SetPriority+0x4c>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	0112      	lsls	r2, r2, #4
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	440b      	add	r3, r1
 800111c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001120:	e00a      	b.n	8001138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4908      	ldr	r1, [pc, #32]	; (8001148 <__NVIC_SetPriority+0x50>)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	3b04      	subs	r3, #4
 8001130:	0112      	lsls	r2, r2, #4
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	440b      	add	r3, r1
 8001136:	761a      	strb	r2, [r3, #24]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	; 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f1c3 0307 	rsb	r3, r3, #7
 8001166:	2b04      	cmp	r3, #4
 8001168:	bf28      	it	cs
 800116a:	2304      	movcs	r3, #4
 800116c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3304      	adds	r3, #4
 8001172:	2b06      	cmp	r3, #6
 8001174:	d902      	bls.n	800117c <NVIC_EncodePriority+0x30>
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3b03      	subs	r3, #3
 800117a:	e000      	b.n	800117e <NVIC_EncodePriority+0x32>
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43da      	mvns	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	401a      	ands	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001194:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	43d9      	mvns	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	4313      	orrs	r3, r2
         );
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3724      	adds	r7, #36	; 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c0:	d301      	bcc.n	80011c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00f      	b.n	80011e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <SysTick_Config+0x40>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ce:	210f      	movs	r1, #15
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d4:	f7ff ff90 	bl	80010f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <SysTick_Config+0x40>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <SysTick_Config+0x40>)
 80011e0:	2207      	movs	r2, #7
 80011e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	e000e010 	.word	0xe000e010

080011f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff2d 	bl	800105c <__NVIC_SetPriorityGrouping>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800121c:	f7ff ff42 	bl	80010a4 <__NVIC_GetPriorityGrouping>
 8001220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	68b9      	ldr	r1, [r7, #8]
 8001226:	6978      	ldr	r0, [r7, #20]
 8001228:	f7ff ff90 	bl	800114c <NVIC_EncodePriority>
 800122c:	4602      	mov	r2, r0
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff5f 	bl	80010f8 <__NVIC_SetPriority>
}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff35 	bl	80010c0 <__NVIC_EnableIRQ>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffa2 	bl	80011b0 <SysTick_Config>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001276:	b480      	push	{r7}
 8001278:	b085      	sub	sp, #20
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001288:	2b02      	cmp	r3, #2
 800128a:	d008      	beq.n	800129e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2204      	movs	r2, #4
 8001290:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e020      	b.n	80012e0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 020e 	bic.w	r2, r2, #14
 80012ac:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0201 	bic.w	r2, r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c6:	2101      	movs	r1, #1
 80012c8:	fa01 f202 	lsl.w	r2, r1, r2
 80012cc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80012de:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
	...

080012ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d005      	beq.n	800130e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2204      	movs	r2, #4
 8001306:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	73fb      	strb	r3, [r7, #15]
 800130c:	e051      	b.n	80013b2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 020e 	bic.w	r2, r2, #14
 800131c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0201 	bic.w	r2, r2, #1
 800132c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a22      	ldr	r2, [pc, #136]	; (80013bc <HAL_DMA_Abort_IT+0xd0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d029      	beq.n	800138c <HAL_DMA_Abort_IT+0xa0>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a20      	ldr	r2, [pc, #128]	; (80013c0 <HAL_DMA_Abort_IT+0xd4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d022      	beq.n	8001388 <HAL_DMA_Abort_IT+0x9c>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a1f      	ldr	r2, [pc, #124]	; (80013c4 <HAL_DMA_Abort_IT+0xd8>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d01a      	beq.n	8001382 <HAL_DMA_Abort_IT+0x96>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a1d      	ldr	r2, [pc, #116]	; (80013c8 <HAL_DMA_Abort_IT+0xdc>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d012      	beq.n	800137c <HAL_DMA_Abort_IT+0x90>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a1c      	ldr	r2, [pc, #112]	; (80013cc <HAL_DMA_Abort_IT+0xe0>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d00a      	beq.n	8001376 <HAL_DMA_Abort_IT+0x8a>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a1a      	ldr	r2, [pc, #104]	; (80013d0 <HAL_DMA_Abort_IT+0xe4>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d102      	bne.n	8001370 <HAL_DMA_Abort_IT+0x84>
 800136a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800136e:	e00e      	b.n	800138e <HAL_DMA_Abort_IT+0xa2>
 8001370:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001374:	e00b      	b.n	800138e <HAL_DMA_Abort_IT+0xa2>
 8001376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800137a:	e008      	b.n	800138e <HAL_DMA_Abort_IT+0xa2>
 800137c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001380:	e005      	b.n	800138e <HAL_DMA_Abort_IT+0xa2>
 8001382:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001386:	e002      	b.n	800138e <HAL_DMA_Abort_IT+0xa2>
 8001388:	2310      	movs	r3, #16
 800138a:	e000      	b.n	800138e <HAL_DMA_Abort_IT+0xa2>
 800138c:	2301      	movs	r3, #1
 800138e:	4a11      	ldr	r2, [pc, #68]	; (80013d4 <HAL_DMA_Abort_IT+0xe8>)
 8001390:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	4798      	blx	r3
    } 
  }
  return status;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40020008 	.word	0x40020008
 80013c0:	4002001c 	.word	0x4002001c
 80013c4:	40020030 	.word	0x40020030
 80013c8:	40020044 	.word	0x40020044
 80013cc:	40020058 	.word	0x40020058
 80013d0:	4002006c 	.word	0x4002006c
 80013d4:	40020000 	.word	0x40020000

080013d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d8:	b480      	push	{r7}
 80013da:	b08b      	sub	sp, #44	; 0x2c
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ea:	e169      	b.n	80016c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013ec:	2201      	movs	r2, #1
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	69fa      	ldr	r2, [r7, #28]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	429a      	cmp	r2, r3
 8001406:	f040 8158 	bne.w	80016ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	4a9a      	ldr	r2, [pc, #616]	; (8001678 <HAL_GPIO_Init+0x2a0>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d05e      	beq.n	80014d2 <HAL_GPIO_Init+0xfa>
 8001414:	4a98      	ldr	r2, [pc, #608]	; (8001678 <HAL_GPIO_Init+0x2a0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d875      	bhi.n	8001506 <HAL_GPIO_Init+0x12e>
 800141a:	4a98      	ldr	r2, [pc, #608]	; (800167c <HAL_GPIO_Init+0x2a4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d058      	beq.n	80014d2 <HAL_GPIO_Init+0xfa>
 8001420:	4a96      	ldr	r2, [pc, #600]	; (800167c <HAL_GPIO_Init+0x2a4>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d86f      	bhi.n	8001506 <HAL_GPIO_Init+0x12e>
 8001426:	4a96      	ldr	r2, [pc, #600]	; (8001680 <HAL_GPIO_Init+0x2a8>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d052      	beq.n	80014d2 <HAL_GPIO_Init+0xfa>
 800142c:	4a94      	ldr	r2, [pc, #592]	; (8001680 <HAL_GPIO_Init+0x2a8>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d869      	bhi.n	8001506 <HAL_GPIO_Init+0x12e>
 8001432:	4a94      	ldr	r2, [pc, #592]	; (8001684 <HAL_GPIO_Init+0x2ac>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d04c      	beq.n	80014d2 <HAL_GPIO_Init+0xfa>
 8001438:	4a92      	ldr	r2, [pc, #584]	; (8001684 <HAL_GPIO_Init+0x2ac>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d863      	bhi.n	8001506 <HAL_GPIO_Init+0x12e>
 800143e:	4a92      	ldr	r2, [pc, #584]	; (8001688 <HAL_GPIO_Init+0x2b0>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d046      	beq.n	80014d2 <HAL_GPIO_Init+0xfa>
 8001444:	4a90      	ldr	r2, [pc, #576]	; (8001688 <HAL_GPIO_Init+0x2b0>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d85d      	bhi.n	8001506 <HAL_GPIO_Init+0x12e>
 800144a:	2b12      	cmp	r3, #18
 800144c:	d82a      	bhi.n	80014a4 <HAL_GPIO_Init+0xcc>
 800144e:	2b12      	cmp	r3, #18
 8001450:	d859      	bhi.n	8001506 <HAL_GPIO_Init+0x12e>
 8001452:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <HAL_GPIO_Init+0x80>)
 8001454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001458:	080014d3 	.word	0x080014d3
 800145c:	080014ad 	.word	0x080014ad
 8001460:	080014bf 	.word	0x080014bf
 8001464:	08001501 	.word	0x08001501
 8001468:	08001507 	.word	0x08001507
 800146c:	08001507 	.word	0x08001507
 8001470:	08001507 	.word	0x08001507
 8001474:	08001507 	.word	0x08001507
 8001478:	08001507 	.word	0x08001507
 800147c:	08001507 	.word	0x08001507
 8001480:	08001507 	.word	0x08001507
 8001484:	08001507 	.word	0x08001507
 8001488:	08001507 	.word	0x08001507
 800148c:	08001507 	.word	0x08001507
 8001490:	08001507 	.word	0x08001507
 8001494:	08001507 	.word	0x08001507
 8001498:	08001507 	.word	0x08001507
 800149c:	080014b5 	.word	0x080014b5
 80014a0:	080014c9 	.word	0x080014c9
 80014a4:	4a79      	ldr	r2, [pc, #484]	; (800168c <HAL_GPIO_Init+0x2b4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d013      	beq.n	80014d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014aa:	e02c      	b.n	8001506 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	623b      	str	r3, [r7, #32]
          break;
 80014b2:	e029      	b.n	8001508 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	3304      	adds	r3, #4
 80014ba:	623b      	str	r3, [r7, #32]
          break;
 80014bc:	e024      	b.n	8001508 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	3308      	adds	r3, #8
 80014c4:	623b      	str	r3, [r7, #32]
          break;
 80014c6:	e01f      	b.n	8001508 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	330c      	adds	r3, #12
 80014ce:	623b      	str	r3, [r7, #32]
          break;
 80014d0:	e01a      	b.n	8001508 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d102      	bne.n	80014e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014da:	2304      	movs	r3, #4
 80014dc:	623b      	str	r3, [r7, #32]
          break;
 80014de:	e013      	b.n	8001508 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d105      	bne.n	80014f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014e8:	2308      	movs	r3, #8
 80014ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	611a      	str	r2, [r3, #16]
          break;
 80014f2:	e009      	b.n	8001508 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f4:	2308      	movs	r3, #8
 80014f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69fa      	ldr	r2, [r7, #28]
 80014fc:	615a      	str	r2, [r3, #20]
          break;
 80014fe:	e003      	b.n	8001508 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
          break;
 8001504:	e000      	b.n	8001508 <HAL_GPIO_Init+0x130>
          break;
 8001506:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	2bff      	cmp	r3, #255	; 0xff
 800150c:	d801      	bhi.n	8001512 <HAL_GPIO_Init+0x13a>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	e001      	b.n	8001516 <HAL_GPIO_Init+0x13e>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3304      	adds	r3, #4
 8001516:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	2bff      	cmp	r3, #255	; 0xff
 800151c:	d802      	bhi.n	8001524 <HAL_GPIO_Init+0x14c>
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	e002      	b.n	800152a <HAL_GPIO_Init+0x152>
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	3b08      	subs	r3, #8
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	210f      	movs	r1, #15
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	fa01 f303 	lsl.w	r3, r1, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	401a      	ands	r2, r3
 800153c:	6a39      	ldr	r1, [r7, #32]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	431a      	orrs	r2, r3
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 80b1 	beq.w	80016ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001558:	4b4d      	ldr	r3, [pc, #308]	; (8001690 <HAL_GPIO_Init+0x2b8>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4a4c      	ldr	r2, [pc, #304]	; (8001690 <HAL_GPIO_Init+0x2b8>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6193      	str	r3, [r2, #24]
 8001564:	4b4a      	ldr	r3, [pc, #296]	; (8001690 <HAL_GPIO_Init+0x2b8>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001570:	4a48      	ldr	r2, [pc, #288]	; (8001694 <HAL_GPIO_Init+0x2bc>)
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	089b      	lsrs	r3, r3, #2
 8001576:	3302      	adds	r3, #2
 8001578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	220f      	movs	r2, #15
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	4013      	ands	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a40      	ldr	r2, [pc, #256]	; (8001698 <HAL_GPIO_Init+0x2c0>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d013      	beq.n	80015c4 <HAL_GPIO_Init+0x1ec>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a3f      	ldr	r2, [pc, #252]	; (800169c <HAL_GPIO_Init+0x2c4>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d00d      	beq.n	80015c0 <HAL_GPIO_Init+0x1e8>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a3e      	ldr	r2, [pc, #248]	; (80016a0 <HAL_GPIO_Init+0x2c8>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d007      	beq.n	80015bc <HAL_GPIO_Init+0x1e4>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a3d      	ldr	r2, [pc, #244]	; (80016a4 <HAL_GPIO_Init+0x2cc>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d101      	bne.n	80015b8 <HAL_GPIO_Init+0x1e0>
 80015b4:	2303      	movs	r3, #3
 80015b6:	e006      	b.n	80015c6 <HAL_GPIO_Init+0x1ee>
 80015b8:	2304      	movs	r3, #4
 80015ba:	e004      	b.n	80015c6 <HAL_GPIO_Init+0x1ee>
 80015bc:	2302      	movs	r3, #2
 80015be:	e002      	b.n	80015c6 <HAL_GPIO_Init+0x1ee>
 80015c0:	2301      	movs	r3, #1
 80015c2:	e000      	b.n	80015c6 <HAL_GPIO_Init+0x1ee>
 80015c4:	2300      	movs	r3, #0
 80015c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c8:	f002 0203 	and.w	r2, r2, #3
 80015cc:	0092      	lsls	r2, r2, #2
 80015ce:	4093      	lsls	r3, r2
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015d6:	492f      	ldr	r1, [pc, #188]	; (8001694 <HAL_GPIO_Init+0x2bc>)
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	3302      	adds	r3, #2
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d006      	beq.n	80015fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015f0:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	492c      	ldr	r1, [pc, #176]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	600b      	str	r3, [r1, #0]
 80015fc:	e006      	b.n	800160c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015fe:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	43db      	mvns	r3, r3
 8001606:	4928      	ldr	r1, [pc, #160]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 8001608:	4013      	ands	r3, r2
 800160a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d006      	beq.n	8001626 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001618:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4922      	ldr	r1, [pc, #136]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
 8001624:	e006      	b.n	8001634 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	43db      	mvns	r3, r3
 800162e:	491e      	ldr	r1, [pc, #120]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 8001630:	4013      	ands	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	4918      	ldr	r1, [pc, #96]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	608b      	str	r3, [r1, #8]
 800164c:	e006      	b.n	800165c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	43db      	mvns	r3, r3
 8001656:	4914      	ldr	r1, [pc, #80]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 8001658:	4013      	ands	r3, r2
 800165a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d021      	beq.n	80016ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	490e      	ldr	r1, [pc, #56]	; (80016a8 <HAL_GPIO_Init+0x2d0>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	60cb      	str	r3, [r1, #12]
 8001674:	e021      	b.n	80016ba <HAL_GPIO_Init+0x2e2>
 8001676:	bf00      	nop
 8001678:	10320000 	.word	0x10320000
 800167c:	10310000 	.word	0x10310000
 8001680:	10220000 	.word	0x10220000
 8001684:	10210000 	.word	0x10210000
 8001688:	10120000 	.word	0x10120000
 800168c:	10110000 	.word	0x10110000
 8001690:	40021000 	.word	0x40021000
 8001694:	40010000 	.word	0x40010000
 8001698:	40010800 	.word	0x40010800
 800169c:	40010c00 	.word	0x40010c00
 80016a0:	40011000 	.word	0x40011000
 80016a4:	40011400 	.word	0x40011400
 80016a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_GPIO_Init+0x304>)
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	4909      	ldr	r1, [pc, #36]	; (80016dc <HAL_GPIO_Init+0x304>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	3301      	adds	r3, #1
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f47f ae8e 	bne.w	80013ec <HAL_GPIO_Init+0x14>
  }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	372c      	adds	r7, #44	; 0x2c
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	40010400 	.word	0x40010400

080016e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	887b      	ldrh	r3, [r7, #2]
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d002      	beq.n	80016fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016f8:	2301      	movs	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
 80016fc:	e001      	b.n	8001702 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr

0800170e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	460b      	mov	r3, r1
 8001718:	807b      	strh	r3, [r7, #2]
 800171a:	4613      	mov	r3, r2
 800171c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800171e:	787b      	ldrb	r3, [r7, #1]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d003      	beq.n	800172c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001724:	887a      	ldrh	r2, [r7, #2]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800172a:	e003      	b.n	8001734 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800172c:	887b      	ldrh	r3, [r7, #2]
 800172e:	041a      	lsls	r2, r3, #16
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	611a      	str	r2, [r3, #16]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
	...

08001740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e12b      	b.n	80019aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d106      	bne.n	800176c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fa82 	bl	8000c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2224      	movs	r2, #36	; 0x24
 8001770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0201 	bic.w	r2, r2, #1
 8001782:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001792:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017a4:	f000 fffa 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 80017a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4a81      	ldr	r2, [pc, #516]	; (80019b4 <HAL_I2C_Init+0x274>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d807      	bhi.n	80017c4 <HAL_I2C_Init+0x84>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4a80      	ldr	r2, [pc, #512]	; (80019b8 <HAL_I2C_Init+0x278>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	bf94      	ite	ls
 80017bc:	2301      	movls	r3, #1
 80017be:	2300      	movhi	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	e006      	b.n	80017d2 <HAL_I2C_Init+0x92>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4a7d      	ldr	r2, [pc, #500]	; (80019bc <HAL_I2C_Init+0x27c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	bf94      	ite	ls
 80017cc:	2301      	movls	r3, #1
 80017ce:	2300      	movhi	r3, #0
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e0e7      	b.n	80019aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4a78      	ldr	r2, [pc, #480]	; (80019c0 <HAL_I2C_Init+0x280>)
 80017de:	fba2 2303 	umull	r2, r3, r2, r3
 80017e2:	0c9b      	lsrs	r3, r3, #18
 80017e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4a6a      	ldr	r2, [pc, #424]	; (80019b4 <HAL_I2C_Init+0x274>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d802      	bhi.n	8001814 <HAL_I2C_Init+0xd4>
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	3301      	adds	r3, #1
 8001812:	e009      	b.n	8001828 <HAL_I2C_Init+0xe8>
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800181a:	fb02 f303 	mul.w	r3, r2, r3
 800181e:	4a69      	ldr	r2, [pc, #420]	; (80019c4 <HAL_I2C_Init+0x284>)
 8001820:	fba2 2303 	umull	r2, r3, r2, r3
 8001824:	099b      	lsrs	r3, r3, #6
 8001826:	3301      	adds	r3, #1
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	430b      	orrs	r3, r1
 800182e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800183a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	495c      	ldr	r1, [pc, #368]	; (80019b4 <HAL_I2C_Init+0x274>)
 8001844:	428b      	cmp	r3, r1
 8001846:	d819      	bhi.n	800187c <HAL_I2C_Init+0x13c>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1e59      	subs	r1, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	fbb1 f3f3 	udiv	r3, r1, r3
 8001856:	1c59      	adds	r1, r3, #1
 8001858:	f640 73fc 	movw	r3, #4092	; 0xffc
 800185c:	400b      	ands	r3, r1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00a      	beq.n	8001878 <HAL_I2C_Init+0x138>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1e59      	subs	r1, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001870:	3301      	adds	r3, #1
 8001872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001876:	e051      	b.n	800191c <HAL_I2C_Init+0x1dc>
 8001878:	2304      	movs	r3, #4
 800187a:	e04f      	b.n	800191c <HAL_I2C_Init+0x1dc>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d111      	bne.n	80018a8 <HAL_I2C_Init+0x168>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1e58      	subs	r0, r3, #1
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6859      	ldr	r1, [r3, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	440b      	add	r3, r1
 8001892:	fbb0 f3f3 	udiv	r3, r0, r3
 8001896:	3301      	adds	r3, #1
 8001898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf0c      	ite	eq
 80018a0:	2301      	moveq	r3, #1
 80018a2:	2300      	movne	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	e012      	b.n	80018ce <HAL_I2C_Init+0x18e>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	1e58      	subs	r0, r3, #1
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6859      	ldr	r1, [r3, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	0099      	lsls	r1, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80018be:	3301      	adds	r3, #1
 80018c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bf0c      	ite	eq
 80018c8:	2301      	moveq	r3, #1
 80018ca:	2300      	movne	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_I2C_Init+0x196>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e022      	b.n	800191c <HAL_I2C_Init+0x1dc>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10e      	bne.n	80018fc <HAL_I2C_Init+0x1bc>
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1e58      	subs	r0, r3, #1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6859      	ldr	r1, [r3, #4]
 80018e6:	460b      	mov	r3, r1
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	440b      	add	r3, r1
 80018ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80018f0:	3301      	adds	r3, #1
 80018f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018fa:	e00f      	b.n	800191c <HAL_I2C_Init+0x1dc>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	1e58      	subs	r0, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6859      	ldr	r1, [r3, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	0099      	lsls	r1, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001912:	3301      	adds	r3, #1
 8001914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	6809      	ldr	r1, [r1, #0]
 8001920:	4313      	orrs	r3, r2
 8001922:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69da      	ldr	r2, [r3, #28]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800194a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6911      	ldr	r1, [r2, #16]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68d2      	ldr	r2, [r2, #12]
 8001956:	4311      	orrs	r1, r2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	430b      	orrs	r3, r1
 800195e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695a      	ldr	r2, [r3, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2220      	movs	r2, #32
 8001996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	000186a0 	.word	0x000186a0
 80019b8:	001e847f 	.word	0x001e847f
 80019bc:	003d08ff 	.word	0x003d08ff
 80019c0:	431bde83 	.word	0x431bde83
 80019c4:	10624dd3 	.word	0x10624dd3

080019c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af02      	add	r7, sp, #8
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	4608      	mov	r0, r1
 80019d2:	4611      	mov	r1, r2
 80019d4:	461a      	mov	r2, r3
 80019d6:	4603      	mov	r3, r0
 80019d8:	817b      	strh	r3, [r7, #10]
 80019da:	460b      	mov	r3, r1
 80019dc:	813b      	strh	r3, [r7, #8]
 80019de:	4613      	mov	r3, r2
 80019e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019e2:	f7ff fb0d 	bl	8001000 <HAL_GetTick>
 80019e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b20      	cmp	r3, #32
 80019f2:	f040 80d9 	bne.w	8001ba8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2319      	movs	r3, #25
 80019fc:	2201      	movs	r2, #1
 80019fe:	496d      	ldr	r1, [pc, #436]	; (8001bb4 <HAL_I2C_Mem_Write+0x1ec>)
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 f971 	bl	8001ce8 <I2C_WaitOnFlagUntilTimeout>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e0cc      	b.n	8001baa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_I2C_Mem_Write+0x56>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e0c5      	b.n	8001baa <HAL_I2C_Mem_Write+0x1e2>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d007      	beq.n	8001a44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0201 	orr.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2221      	movs	r2, #33	; 0x21
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2240      	movs	r2, #64	; 0x40
 8001a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6a3a      	ldr	r2, [r7, #32]
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4a4d      	ldr	r2, [pc, #308]	; (8001bb8 <HAL_I2C_Mem_Write+0x1f0>)
 8001a84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a86:	88f8      	ldrh	r0, [r7, #6]
 8001a88:	893a      	ldrh	r2, [r7, #8]
 8001a8a:	8979      	ldrh	r1, [r7, #10]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	4603      	mov	r3, r0
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 f890 	bl	8001bbc <I2C_RequestMemoryWrite>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d052      	beq.n	8001b48 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e081      	b.n	8001baa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 f9f2 	bl	8001e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00d      	beq.n	8001ad2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d107      	bne.n	8001ace <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001acc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e06b      	b.n	8001baa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	781a      	ldrb	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aec:	3b01      	subs	r3, #1
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3b01      	subs	r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d11b      	bne.n	8001b48 <HAL_I2C_Mem_Write+0x180>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d017      	beq.n	8001b48 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	781a      	ldrb	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b32:	3b01      	subs	r3, #1
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	3b01      	subs	r3, #1
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1aa      	bne.n	8001aa6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 f9de 	bl	8001f16 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00d      	beq.n	8001b7c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d107      	bne.n	8001b78 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e016      	b.n	8001baa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e000      	b.n	8001baa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001ba8:	2302      	movs	r3, #2
  }
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	00100002 	.word	0x00100002
 8001bb8:	ffff0000 	.word	0xffff0000

08001bbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	4608      	mov	r0, r1
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4603      	mov	r3, r0
 8001bcc:	817b      	strh	r3, [r7, #10]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	813b      	strh	r3, [r7, #8]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001be4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 f878 	bl	8001ce8 <I2C_WaitOnFlagUntilTimeout>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00d      	beq.n	8001c1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c0c:	d103      	bne.n	8001c16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e05f      	b.n	8001cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c1a:	897b      	ldrh	r3, [r7, #10]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	6a3a      	ldr	r2, [r7, #32]
 8001c2e:	492d      	ldr	r1, [pc, #180]	; (8001ce4 <I2C_RequestMemoryWrite+0x128>)
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f000 f8b0 	bl	8001d96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e04c      	b.n	8001cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c58:	6a39      	ldr	r1, [r7, #32]
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 f91a 	bl	8001e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00d      	beq.n	8001c82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d107      	bne.n	8001c7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e02b      	b.n	8001cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d105      	bne.n	8001c94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c88:	893b      	ldrh	r3, [r7, #8]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	611a      	str	r2, [r3, #16]
 8001c92:	e021      	b.n	8001cd8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c94:	893b      	ldrh	r3, [r7, #8]
 8001c96:	0a1b      	lsrs	r3, r3, #8
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca4:	6a39      	ldr	r1, [r7, #32]
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 f8f4 	bl	8001e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00d      	beq.n	8001cce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d107      	bne.n	8001cca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e005      	b.n	8001cda <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001cce:	893b      	ldrh	r3, [r7, #8]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	00010002 	.word	0x00010002

08001ce8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cf8:	e025      	b.n	8001d46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d00:	d021      	beq.n	8001d46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d02:	f7ff f97d 	bl	8001000 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d302      	bcc.n	8001d18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d116      	bne.n	8001d46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2220      	movs	r2, #32
 8001d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f043 0220 	orr.w	r2, r3, #32
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e023      	b.n	8001d8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	0c1b      	lsrs	r3, r3, #16
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d10d      	bne.n	8001d6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	bf0c      	ite	eq
 8001d62:	2301      	moveq	r3, #1
 8001d64:	2300      	movne	r3, #0
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	e00c      	b.n	8001d86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4013      	ands	r3, r2
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	bf0c      	ite	eq
 8001d7e:	2301      	moveq	r3, #1
 8001d80:	2300      	movne	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d0b6      	beq.n	8001cfa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b084      	sub	sp, #16
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001da4:	e051      	b.n	8001e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db4:	d123      	bne.n	8001dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f043 0204 	orr.w	r2, r3, #4
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e046      	b.n	8001e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e04:	d021      	beq.n	8001e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e06:	f7ff f8fb 	bl	8001000 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d302      	bcc.n	8001e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d116      	bne.n	8001e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2220      	movs	r2, #32
 8001e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f043 0220 	orr.w	r2, r3, #32
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e020      	b.n	8001e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d10c      	bne.n	8001e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bf14      	ite	ne
 8001e66:	2301      	movne	r3, #1
 8001e68:	2300      	moveq	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	e00b      	b.n	8001e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	43da      	mvns	r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bf14      	ite	ne
 8001e80:	2301      	movne	r3, #1
 8001e82:	2300      	moveq	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d18d      	bne.n	8001da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ea0:	e02d      	b.n	8001efe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 f878 	bl	8001f98 <I2C_IsAcknowledgeFailed>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e02d      	b.n	8001f0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eb8:	d021      	beq.n	8001efe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eba:	f7ff f8a1 	bl	8001000 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d302      	bcc.n	8001ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d116      	bne.n	8001efe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f043 0220 	orr.w	r2, r3, #32
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e007      	b.n	8001f0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f08:	2b80      	cmp	r3, #128	; 0x80
 8001f0a:	d1ca      	bne.n	8001ea2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b084      	sub	sp, #16
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	60f8      	str	r0, [r7, #12]
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f22:	e02d      	b.n	8001f80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 f837 	bl	8001f98 <I2C_IsAcknowledgeFailed>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e02d      	b.n	8001f90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f3a:	d021      	beq.n	8001f80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f3c:	f7ff f860 	bl	8001000 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d302      	bcc.n	8001f52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d116      	bne.n	8001f80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	f043 0220 	orr.w	r2, r3, #32
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e007      	b.n	8001f90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d1ca      	bne.n	8001f24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fae:	d11b      	bne.n	8001fe8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fb8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	f043 0204 	orr.w	r2, r3, #4
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e26c      	b.n	80024e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8087 	beq.w	8002122 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002014:	4b92      	ldr	r3, [pc, #584]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 030c 	and.w	r3, r3, #12
 800201c:	2b04      	cmp	r3, #4
 800201e:	d00c      	beq.n	800203a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002020:	4b8f      	ldr	r3, [pc, #572]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 030c 	and.w	r3, r3, #12
 8002028:	2b08      	cmp	r3, #8
 800202a:	d112      	bne.n	8002052 <HAL_RCC_OscConfig+0x5e>
 800202c:	4b8c      	ldr	r3, [pc, #560]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002038:	d10b      	bne.n	8002052 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203a:	4b89      	ldr	r3, [pc, #548]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d06c      	beq.n	8002120 <HAL_RCC_OscConfig+0x12c>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d168      	bne.n	8002120 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e246      	b.n	80024e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800205a:	d106      	bne.n	800206a <HAL_RCC_OscConfig+0x76>
 800205c:	4b80      	ldr	r3, [pc, #512]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a7f      	ldr	r2, [pc, #508]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	e02e      	b.n	80020c8 <HAL_RCC_OscConfig+0xd4>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10c      	bne.n	800208c <HAL_RCC_OscConfig+0x98>
 8002072:	4b7b      	ldr	r3, [pc, #492]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a7a      	ldr	r2, [pc, #488]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	4b78      	ldr	r3, [pc, #480]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a77      	ldr	r2, [pc, #476]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	e01d      	b.n	80020c8 <HAL_RCC_OscConfig+0xd4>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0xbc>
 8002096:	4b72      	ldr	r3, [pc, #456]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a71      	ldr	r2, [pc, #452]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 800209c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	4b6f      	ldr	r3, [pc, #444]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a6e      	ldr	r2, [pc, #440]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e00b      	b.n	80020c8 <HAL_RCC_OscConfig+0xd4>
 80020b0:	4b6b      	ldr	r3, [pc, #428]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a6a      	ldr	r2, [pc, #424]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	4b68      	ldr	r3, [pc, #416]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a67      	ldr	r2, [pc, #412]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d013      	beq.n	80020f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7fe ff96 	bl	8001000 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d8:	f7fe ff92 	bl	8001000 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	; 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e1fa      	b.n	80024e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	4b5d      	ldr	r3, [pc, #372]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0xe4>
 80020f6:	e014      	b.n	8002122 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7fe ff82 	bl	8001000 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002100:	f7fe ff7e 	bl	8001000 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b64      	cmp	r3, #100	; 0x64
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e1e6      	b.n	80024e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002112:	4b53      	ldr	r3, [pc, #332]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x10c>
 800211e:	e000      	b.n	8002122 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d063      	beq.n	80021f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800212e:	4b4c      	ldr	r3, [pc, #304]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00b      	beq.n	8002152 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800213a:	4b49      	ldr	r3, [pc, #292]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b08      	cmp	r3, #8
 8002144:	d11c      	bne.n	8002180 <HAL_RCC_OscConfig+0x18c>
 8002146:	4b46      	ldr	r3, [pc, #280]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d116      	bne.n	8002180 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002152:	4b43      	ldr	r3, [pc, #268]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d005      	beq.n	800216a <HAL_RCC_OscConfig+0x176>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d001      	beq.n	800216a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e1ba      	b.n	80024e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216a:	4b3d      	ldr	r3, [pc, #244]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4939      	ldr	r1, [pc, #228]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217e:	e03a      	b.n	80021f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d020      	beq.n	80021ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002188:	4b36      	ldr	r3, [pc, #216]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218e:	f7fe ff37 	bl	8001000 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002196:	f7fe ff33 	bl	8001000 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e19b      	b.n	80024e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a8:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f0      	beq.n	8002196 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b4:	4b2a      	ldr	r3, [pc, #168]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4927      	ldr	r1, [pc, #156]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	600b      	str	r3, [r1, #0]
 80021c8:	e015      	b.n	80021f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ca:	4b26      	ldr	r3, [pc, #152]	; (8002264 <HAL_RCC_OscConfig+0x270>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7fe ff16 	bl	8001000 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d8:	f7fe ff12 	bl	8001000 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e17a      	b.n	80024e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ea:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d03a      	beq.n	8002278 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d019      	beq.n	800223e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220a:	4b17      	ldr	r3, [pc, #92]	; (8002268 <HAL_RCC_OscConfig+0x274>)
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002210:	f7fe fef6 	bl	8001000 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002218:	f7fe fef2 	bl	8001000 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e15a      	b.n	80024e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222a:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <HAL_RCC_OscConfig+0x26c>)
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002236:	2001      	movs	r0, #1
 8002238:	f000 fad8 	bl	80027ec <RCC_Delay>
 800223c:	e01c      	b.n	8002278 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_RCC_OscConfig+0x274>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002244:	f7fe fedc 	bl	8001000 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224a:	e00f      	b.n	800226c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800224c:	f7fe fed8 	bl	8001000 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d908      	bls.n	800226c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e140      	b.n	80024e0 <HAL_RCC_OscConfig+0x4ec>
 800225e:	bf00      	nop
 8002260:	40021000 	.word	0x40021000
 8002264:	42420000 	.word	0x42420000
 8002268:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800226c:	4b9e      	ldr	r3, [pc, #632]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1e9      	bne.n	800224c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 80a6 	beq.w	80023d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228a:	4b97      	ldr	r3, [pc, #604]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10d      	bne.n	80022b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002296:	4b94      	ldr	r3, [pc, #592]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	4a93      	ldr	r2, [pc, #588]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 800229c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a0:	61d3      	str	r3, [r2, #28]
 80022a2:	4b91      	ldr	r3, [pc, #580]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ae:	2301      	movs	r3, #1
 80022b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b2:	4b8e      	ldr	r3, [pc, #568]	; (80024ec <HAL_RCC_OscConfig+0x4f8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d118      	bne.n	80022f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022be:	4b8b      	ldr	r3, [pc, #556]	; (80024ec <HAL_RCC_OscConfig+0x4f8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a8a      	ldr	r2, [pc, #552]	; (80024ec <HAL_RCC_OscConfig+0x4f8>)
 80022c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ca:	f7fe fe99 	bl	8001000 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d2:	f7fe fe95 	bl	8001000 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b64      	cmp	r3, #100	; 0x64
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e0fd      	b.n	80024e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e4:	4b81      	ldr	r3, [pc, #516]	; (80024ec <HAL_RCC_OscConfig+0x4f8>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d106      	bne.n	8002306 <HAL_RCC_OscConfig+0x312>
 80022f8:	4b7b      	ldr	r3, [pc, #492]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	4a7a      	ldr	r2, [pc, #488]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6213      	str	r3, [r2, #32]
 8002304:	e02d      	b.n	8002362 <HAL_RCC_OscConfig+0x36e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10c      	bne.n	8002328 <HAL_RCC_OscConfig+0x334>
 800230e:	4b76      	ldr	r3, [pc, #472]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	4a75      	ldr	r2, [pc, #468]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	6213      	str	r3, [r2, #32]
 800231a:	4b73      	ldr	r3, [pc, #460]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	4a72      	ldr	r2, [pc, #456]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 8002320:	f023 0304 	bic.w	r3, r3, #4
 8002324:	6213      	str	r3, [r2, #32]
 8002326:	e01c      	b.n	8002362 <HAL_RCC_OscConfig+0x36e>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2b05      	cmp	r3, #5
 800232e:	d10c      	bne.n	800234a <HAL_RCC_OscConfig+0x356>
 8002330:	4b6d      	ldr	r3, [pc, #436]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4a6c      	ldr	r2, [pc, #432]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 8002336:	f043 0304 	orr.w	r3, r3, #4
 800233a:	6213      	str	r3, [r2, #32]
 800233c:	4b6a      	ldr	r3, [pc, #424]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	4a69      	ldr	r2, [pc, #420]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6213      	str	r3, [r2, #32]
 8002348:	e00b      	b.n	8002362 <HAL_RCC_OscConfig+0x36e>
 800234a:	4b67      	ldr	r3, [pc, #412]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	4a66      	ldr	r2, [pc, #408]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 8002350:	f023 0301 	bic.w	r3, r3, #1
 8002354:	6213      	str	r3, [r2, #32]
 8002356:	4b64      	ldr	r3, [pc, #400]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	4a63      	ldr	r2, [pc, #396]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 800235c:	f023 0304 	bic.w	r3, r3, #4
 8002360:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d015      	beq.n	8002396 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236a:	f7fe fe49 	bl	8001000 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002370:	e00a      	b.n	8002388 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002372:	f7fe fe45 	bl	8001000 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002380:	4293      	cmp	r3, r2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e0ab      	b.n	80024e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002388:	4b57      	ldr	r3, [pc, #348]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0ee      	beq.n	8002372 <HAL_RCC_OscConfig+0x37e>
 8002394:	e014      	b.n	80023c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002396:	f7fe fe33 	bl	8001000 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239c:	e00a      	b.n	80023b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239e:	f7fe fe2f 	bl	8001000 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e095      	b.n	80024e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b4:	4b4c      	ldr	r3, [pc, #304]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1ee      	bne.n	800239e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023c0:	7dfb      	ldrb	r3, [r7, #23]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d105      	bne.n	80023d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c6:	4b48      	ldr	r3, [pc, #288]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	4a47      	ldr	r2, [pc, #284]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 8081 	beq.w	80024de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023dc:	4b42      	ldr	r3, [pc, #264]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d061      	beq.n	80024ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d146      	bne.n	800247e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f0:	4b3f      	ldr	r3, [pc, #252]	; (80024f0 <HAL_RCC_OscConfig+0x4fc>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f6:	f7fe fe03 	bl	8001000 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fe:	f7fe fdff 	bl	8001000 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e067      	b.n	80024e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002410:	4b35      	ldr	r3, [pc, #212]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1f0      	bne.n	80023fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002424:	d108      	bne.n	8002438 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	492d      	ldr	r1, [pc, #180]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 8002434:	4313      	orrs	r3, r2
 8002436:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002438:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a19      	ldr	r1, [r3, #32]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	430b      	orrs	r3, r1
 800244a:	4927      	ldr	r1, [pc, #156]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002450:	4b27      	ldr	r3, [pc, #156]	; (80024f0 <HAL_RCC_OscConfig+0x4fc>)
 8002452:	2201      	movs	r2, #1
 8002454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002456:	f7fe fdd3 	bl	8001000 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245e:	f7fe fdcf 	bl	8001000 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e037      	b.n	80024e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002470:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x46a>
 800247c:	e02f      	b.n	80024de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247e:	4b1c      	ldr	r3, [pc, #112]	; (80024f0 <HAL_RCC_OscConfig+0x4fc>)
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7fe fdbc 	bl	8001000 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248c:	f7fe fdb8 	bl	8001000 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e020      	b.n	80024e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249e:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x498>
 80024aa:	e018      	b.n	80024de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e013      	b.n	80024e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_RCC_OscConfig+0x4f4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d106      	bne.n	80024da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d001      	beq.n	80024de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40007000 	.word	0x40007000
 80024f0:	42420060 	.word	0x42420060

080024f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0d0      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002508:	4b6a      	ldr	r3, [pc, #424]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d910      	bls.n	8002538 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002516:	4b67      	ldr	r3, [pc, #412]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 0207 	bic.w	r2, r3, #7
 800251e:	4965      	ldr	r1, [pc, #404]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b63      	ldr	r3, [pc, #396]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0b8      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d020      	beq.n	8002586 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002550:	4b59      	ldr	r3, [pc, #356]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4a58      	ldr	r2, [pc, #352]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800255a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002568:	4b53      	ldr	r3, [pc, #332]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4a52      	ldr	r2, [pc, #328]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002572:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002574:	4b50      	ldr	r3, [pc, #320]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	494d      	ldr	r1, [pc, #308]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d040      	beq.n	8002614 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d107      	bne.n	80025aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	4b47      	ldr	r3, [pc, #284]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d115      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e07f      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b2:	4b41      	ldr	r3, [pc, #260]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d109      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e073      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c2:	4b3d      	ldr	r3, [pc, #244]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e06b      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d2:	4b39      	ldr	r3, [pc, #228]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f023 0203 	bic.w	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	4936      	ldr	r1, [pc, #216]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e4:	f7fe fd0c 	bl	8001000 <HAL_GetTick>
 80025e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ea:	e00a      	b.n	8002602 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ec:	f7fe fd08 	bl	8001000 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e053      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 020c 	and.w	r2, r3, #12
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	429a      	cmp	r2, r3
 8002612:	d1eb      	bne.n	80025ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002614:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d210      	bcs.n	8002644 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002622:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 0207 	bic.w	r2, r3, #7
 800262a:	4922      	ldr	r1, [pc, #136]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b20      	ldr	r3, [pc, #128]	; (80026b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e032      	b.n	80026aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002650:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4916      	ldr	r1, [pc, #88]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	4313      	orrs	r3, r2
 8002660:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d009      	beq.n	8002682 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	490e      	ldr	r1, [pc, #56]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	4313      	orrs	r3, r2
 8002680:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002682:	f000 f821 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8002686:	4602      	mov	r2, r0
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	490a      	ldr	r1, [pc, #40]	; (80026bc <HAL_RCC_ClockConfig+0x1c8>)
 8002694:	5ccb      	ldrb	r3, [r1, r3]
 8002696:	fa22 f303 	lsr.w	r3, r2, r3
 800269a:	4a09      	ldr	r2, [pc, #36]	; (80026c0 <HAL_RCC_ClockConfig+0x1cc>)
 800269c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800269e:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <HAL_RCC_ClockConfig+0x1d0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fc6a 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40022000 	.word	0x40022000
 80026b8:	40021000 	.word	0x40021000
 80026bc:	08004314 	.word	0x08004314
 80026c0:	20000008 	.word	0x20000008
 80026c4:	2000000c 	.word	0x2000000c

080026c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c8:	b490      	push	{r4, r7}
 80026ca:	b08a      	sub	sp, #40	; 0x28
 80026cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026ce:	4b2a      	ldr	r3, [pc, #168]	; (8002778 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026d0:	1d3c      	adds	r4, r7, #4
 80026d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026d8:	f240 2301 	movw	r3, #513	; 0x201
 80026dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
 80026e6:	2300      	movs	r3, #0
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026f2:	4b22      	ldr	r3, [pc, #136]	; (800277c <HAL_RCC_GetSysClockFreq+0xb4>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f003 030c 	and.w	r3, r3, #12
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d002      	beq.n	8002708 <HAL_RCC_GetSysClockFreq+0x40>
 8002702:	2b08      	cmp	r3, #8
 8002704:	d003      	beq.n	800270e <HAL_RCC_GetSysClockFreq+0x46>
 8002706:	e02d      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002708:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <HAL_RCC_GetSysClockFreq+0xb8>)
 800270a:	623b      	str	r3, [r7, #32]
      break;
 800270c:	e02d      	b.n	800276a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	0c9b      	lsrs	r3, r3, #18
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800271a:	4413      	add	r3, r2
 800271c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002720:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d013      	beq.n	8002754 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800272c:	4b13      	ldr	r3, [pc, #76]	; (800277c <HAL_RCC_GetSysClockFreq+0xb4>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	0c5b      	lsrs	r3, r3, #17
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800273a:	4413      	add	r3, r2
 800273c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002740:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	4a0e      	ldr	r2, [pc, #56]	; (8002780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002746:	fb02 f203 	mul.w	r2, r2, r3
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
 8002752:	e004      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	4a0b      	ldr	r2, [pc, #44]	; (8002784 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002758:	fb02 f303 	mul.w	r3, r2, r3
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	623b      	str	r3, [r7, #32]
      break;
 8002762:	e002      	b.n	800276a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002766:	623b      	str	r3, [r7, #32]
      break;
 8002768:	bf00      	nop
    }
  }
  return sysclockfreq;
 800276a:	6a3b      	ldr	r3, [r7, #32]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3728      	adds	r7, #40	; 0x28
 8002770:	46bd      	mov	sp, r7
 8002772:	bc90      	pop	{r4, r7}
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	08003b98 	.word	0x08003b98
 800277c:	40021000 	.word	0x40021000
 8002780:	007a1200 	.word	0x007a1200
 8002784:	003d0900 	.word	0x003d0900

08002788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800278c:	4b02      	ldr	r3, [pc, #8]	; (8002798 <HAL_RCC_GetHCLKFreq+0x10>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	20000008 	.word	0x20000008

0800279c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027a0:	f7ff fff2 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027a4:	4602      	mov	r2, r0
 80027a6:	4b05      	ldr	r3, [pc, #20]	; (80027bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	0a1b      	lsrs	r3, r3, #8
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	4903      	ldr	r1, [pc, #12]	; (80027c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b2:	5ccb      	ldrb	r3, [r1, r3]
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021000 	.word	0x40021000
 80027c0:	08004324 	.word	0x08004324

080027c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027c8:	f7ff ffde 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027cc:	4602      	mov	r2, r0
 80027ce:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	0adb      	lsrs	r3, r3, #11
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	4903      	ldr	r1, [pc, #12]	; (80027e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027da:	5ccb      	ldrb	r3, [r1, r3]
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40021000 	.word	0x40021000
 80027e8:	08004324 	.word	0x08004324

080027ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027f4:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <RCC_Delay+0x34>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <RCC_Delay+0x38>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	0a5b      	lsrs	r3, r3, #9
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	fb02 f303 	mul.w	r3, r2, r3
 8002806:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002808:	bf00      	nop
  }
  while (Delay --);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1e5a      	subs	r2, r3, #1
 800280e:	60fa      	str	r2, [r7, #12]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f9      	bne.n	8002808 <RCC_Delay+0x1c>
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	20000008 	.word	0x20000008
 8002824:	10624dd3 	.word	0x10624dd3

08002828 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e076      	b.n	8002928 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	2b00      	cmp	r3, #0
 8002840:	d108      	bne.n	8002854 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800284a:	d009      	beq.n	8002860 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	61da      	str	r2, [r3, #28]
 8002852:	e005      	b.n	8002860 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7fe fa36 	bl	8000cec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002896:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e4:	ea42 0103 	orr.w	r1, r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	0c1a      	lsrs	r2, r3, #16
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f002 0204 	and.w	r2, r2, #4
 8002906:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002916:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e03f      	b.n	80029c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fe fa12 	bl	8000d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2224      	movs	r2, #36	; 0x24
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002972:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fbf7 	bl	8003168 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002988:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695a      	ldr	r2, [r3, #20]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002998:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2220      	movs	r2, #32
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	4613      	mov	r3, r2
 80029d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d130      	bne.n	8002a46 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <HAL_UART_Transmit_IT+0x26>
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e029      	b.n	8002a48 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_UART_Transmit_IT+0x38>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e022      	b.n	8002a48 <HAL_UART_Transmit_IT+0x7e>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	88fa      	ldrh	r2, [r7, #6]
 8002a14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	88fa      	ldrh	r2, [r7, #6]
 8002a1a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2221      	movs	r2, #33	; 0x21
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a40:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e000      	b.n	8002a48 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002a46:	2302      	movs	r3, #2
  }
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr

08002a52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b084      	sub	sp, #16
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	d11d      	bne.n	8002aa8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <HAL_UART_Receive_IT+0x26>
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e016      	b.n	8002aaa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_UART_Receive_IT+0x38>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e00f      	b.n	8002aaa <HAL_UART_Receive_IT+0x58>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f9d8 	bl	8002e54 <UART_Start_Receive_IT>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	e000      	b.n	8002aaa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002aa8:	2302      	movs	r3, #2
  }
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08a      	sub	sp, #40	; 0x28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10d      	bne.n	8002b06 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	f003 0320 	and.w	r3, r3, #32
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <HAL_UART_IRQHandler+0x52>
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fa88 	bl	8003014 <UART_Receive_IT>
      return;
 8002b04:	e17b      	b.n	8002dfe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80b1 	beq.w	8002c70 <HAL_UART_IRQHandler+0x1bc>
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d105      	bne.n	8002b24 <HAL_UART_IRQHandler+0x70>
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 80a6 	beq.w	8002c70 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_UART_IRQHandler+0x90>
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_UART_IRQHandler+0xb0>
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	f043 0202 	orr.w	r2, r3, #2
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HAL_UART_IRQHandler+0xd0>
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f043 0204 	orr.w	r2, r3, #4
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00f      	beq.n	8002bae <HAL_UART_IRQHandler+0xfa>
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d104      	bne.n	8002ba2 <HAL_UART_IRQHandler+0xee>
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f043 0208 	orr.w	r2, r3, #8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 811e 	beq.w	8002df4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d007      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x11e>
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 fa21 	bl	8003014 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bf14      	ite	ne
 8002be0:	2301      	movne	r3, #1
 8002be2:	2300      	moveq	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d102      	bne.n	8002bfa <HAL_UART_IRQHandler+0x146>
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d031      	beq.n	8002c5e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f963 	bl	8002ec6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d023      	beq.n	8002c56 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c1c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d013      	beq.n	8002c4e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2a:	4a76      	ldr	r2, [pc, #472]	; (8002e04 <HAL_UART_IRQHandler+0x350>)
 8002c2c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe fb5a 	bl	80012ec <HAL_DMA_Abort_IT>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d016      	beq.n	8002c6c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c48:	4610      	mov	r0, r2
 8002c4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c4c:	e00e      	b.n	8002c6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f8ec 	bl	8002e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c54:	e00a      	b.n	8002c6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f8e8 	bl	8002e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5c:	e006      	b.n	8002c6c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f8e4 	bl	8002e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c6a:	e0c3      	b.n	8002df4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c6c:	bf00      	nop
    return;
 8002c6e:	e0c1      	b.n	8002df4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	f040 80a1 	bne.w	8002dbc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 809b 	beq.w	8002dbc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 8095 	beq.w	8002dbc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d04e      	beq.n	8002d54 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002cc0:	8a3b      	ldrh	r3, [r7, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8098 	beq.w	8002df8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ccc:	8a3a      	ldrh	r2, [r7, #16]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	f080 8092 	bcs.w	8002df8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	8a3a      	ldrh	r2, [r7, #16]
 8002cd8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d02b      	beq.n	8002d3c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cf2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0201 	bic.w	r2, r2, #1
 8002d02:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d12:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0210 	bic.w	r2, r2, #16
 8002d30:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe fa9d 	bl	8001276 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f876 	bl	8002e3e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d52:	e051      	b.n	8002df8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d047      	beq.n	8002dfc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002d6c:	8a7b      	ldrh	r3, [r7, #18]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d044      	beq.n	8002dfc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d80:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695a      	ldr	r2, [r3, #20]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0201 	bic.w	r2, r2, #1
 8002d90:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0210 	bic.w	r2, r2, #16
 8002dae:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002db0:	8a7b      	ldrh	r3, [r7, #18]
 8002db2:	4619      	mov	r1, r3
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f842 	bl	8002e3e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002dba:	e01f      	b.n	8002dfc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d008      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x324>
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f8b8 	bl	8002f46 <UART_Transmit_IT>
    return;
 8002dd6:	e012      	b.n	8002dfe <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00d      	beq.n	8002dfe <HAL_UART_IRQHandler+0x34a>
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f8f9 	bl	8002fe4 <UART_EndTransmit_IT>
    return;
 8002df2:	e004      	b.n	8002dfe <HAL_UART_IRQHandler+0x34a>
    return;
 8002df4:	bf00      	nop
 8002df6:	e002      	b.n	8002dfe <HAL_UART_IRQHandler+0x34a>
      return;
 8002df8:	bf00      	nop
 8002dfa:	e000      	b.n	8002dfe <HAL_UART_IRQHandler+0x34a>
      return;
 8002dfc:	bf00      	nop
  }
}
 8002dfe:	3728      	adds	r7, #40	; 0x28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	08002f1f 	.word	0x08002f1f

08002e08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr

08002e3e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	88fa      	ldrh	r2, [r7, #6]
 8002e6c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	88fa      	ldrh	r2, [r7, #6]
 8002e72:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2222      	movs	r2, #34	; 0x22
 8002e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e98:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695a      	ldr	r2, [r3, #20]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0201 	orr.w	r2, r2, #1
 8002ea8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0220 	orr.w	r2, r2, #32
 8002eb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002edc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695a      	ldr	r2, [r3, #20]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0201 	bic.w	r2, r2, #1
 8002eec:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d107      	bne.n	8002f06 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0210 	bic.w	r2, r2, #16
 8002f04:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr

08002f1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f7ff ff77 	bl	8002e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f3e:	bf00      	nop
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b085      	sub	sp, #20
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b21      	cmp	r3, #33	; 0x21
 8002f58:	d13e      	bne.n	8002fd8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f62:	d114      	bne.n	8002f8e <UART_Transmit_IT+0x48>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d110      	bne.n	8002f8e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	1c9a      	adds	r2, r3, #2
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	621a      	str	r2, [r3, #32]
 8002f8c:	e008      	b.n	8002fa0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	1c59      	adds	r1, r3, #1
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6211      	str	r1, [r2, #32]
 8002f98:	781a      	ldrb	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	4619      	mov	r1, r3
 8002fae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10f      	bne.n	8002fd4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e000      	b.n	8002fda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fd8:	2302      	movs	r3, #2
  }
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ffa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff feff 	bl	8002e08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b22      	cmp	r3, #34	; 0x22
 8003026:	f040 8099 	bne.w	800315c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003032:	d117      	bne.n	8003064 <UART_Receive_IT+0x50>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d113      	bne.n	8003064 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003044:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	b29b      	uxth	r3, r3
 800304e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003052:	b29a      	uxth	r2, r3
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305c:	1c9a      	adds	r2, r3, #2
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	629a      	str	r2, [r3, #40]	; 0x28
 8003062:	e026      	b.n	80030b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800306a:	2300      	movs	r3, #0
 800306c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003076:	d007      	beq.n	8003088 <UART_Receive_IT+0x74>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10a      	bne.n	8003096 <UART_Receive_IT+0x82>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d106      	bne.n	8003096 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	b2da      	uxtb	r2, r3
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	701a      	strb	r2, [r3, #0]
 8003094:	e008      	b.n	80030a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	4619      	mov	r1, r3
 80030c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d148      	bne.n	8003158 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0220 	bic.w	r2, r2, #32
 80030d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0201 	bic.w	r2, r2, #1
 80030f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	2b01      	cmp	r3, #1
 8003104:	d123      	bne.n	800314e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0210 	bic.w	r2, r2, #16
 800311a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	2b10      	cmp	r3, #16
 8003128:	d10a      	bne.n	8003140 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003144:	4619      	mov	r1, r3
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff fe79 	bl	8002e3e <HAL_UARTEx_RxEventCallback>
 800314c:	e002      	b.n	8003154 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff fe63 	bl	8002e1a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	e002      	b.n	800315e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	e000      	b.n	800315e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800315c:	2302      	movs	r3, #2
  }
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	4313      	orrs	r3, r2
 8003196:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031a2:	f023 030c 	bic.w	r3, r3, #12
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	430b      	orrs	r3, r1
 80031ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2c      	ldr	r2, [pc, #176]	; (800327c <UART_SetConfig+0x114>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d103      	bne.n	80031d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031d0:	f7ff faf8 	bl	80027c4 <HAL_RCC_GetPCLK2Freq>
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	e002      	b.n	80031de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031d8:	f7ff fae0 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 80031dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	009a      	lsls	r2, r3, #2
 80031e8:	441a      	add	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f4:	4a22      	ldr	r2, [pc, #136]	; (8003280 <UART_SetConfig+0x118>)
 80031f6:	fba2 2303 	umull	r2, r3, r2, r3
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	0119      	lsls	r1, r3, #4
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	009a      	lsls	r2, r3, #2
 8003208:	441a      	add	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	fbb2 f2f3 	udiv	r2, r2, r3
 8003214:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <UART_SetConfig+0x118>)
 8003216:	fba3 0302 	umull	r0, r3, r3, r2
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	2064      	movs	r0, #100	; 0x64
 800321e:	fb00 f303 	mul.w	r3, r0, r3
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	3332      	adds	r3, #50	; 0x32
 8003228:	4a15      	ldr	r2, [pc, #84]	; (8003280 <UART_SetConfig+0x118>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003234:	4419      	add	r1, r3
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	009a      	lsls	r2, r3, #2
 8003240:	441a      	add	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	fbb2 f2f3 	udiv	r2, r2, r3
 800324c:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <UART_SetConfig+0x118>)
 800324e:	fba3 0302 	umull	r0, r3, r3, r2
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	2064      	movs	r0, #100	; 0x64
 8003256:	fb00 f303 	mul.w	r3, r0, r3
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	3332      	adds	r3, #50	; 0x32
 8003260:	4a07      	ldr	r2, [pc, #28]	; (8003280 <UART_SetConfig+0x118>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	f003 020f 	and.w	r2, r3, #15
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	440a      	add	r2, r1
 8003272:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003274:	bf00      	nop
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40013800 	.word	0x40013800
 8003280:	51eb851f 	.word	0x51eb851f

08003284 <__errno>:
 8003284:	4b01      	ldr	r3, [pc, #4]	; (800328c <__errno+0x8>)
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	20000014 	.word	0x20000014

08003290 <__libc_init_array>:
 8003290:	b570      	push	{r4, r5, r6, lr}
 8003292:	2600      	movs	r6, #0
 8003294:	4d0c      	ldr	r5, [pc, #48]	; (80032c8 <__libc_init_array+0x38>)
 8003296:	4c0d      	ldr	r4, [pc, #52]	; (80032cc <__libc_init_array+0x3c>)
 8003298:	1b64      	subs	r4, r4, r5
 800329a:	10a4      	asrs	r4, r4, #2
 800329c:	42a6      	cmp	r6, r4
 800329e:	d109      	bne.n	80032b4 <__libc_init_array+0x24>
 80032a0:	f000 fc5c 	bl	8003b5c <_init>
 80032a4:	2600      	movs	r6, #0
 80032a6:	4d0a      	ldr	r5, [pc, #40]	; (80032d0 <__libc_init_array+0x40>)
 80032a8:	4c0a      	ldr	r4, [pc, #40]	; (80032d4 <__libc_init_array+0x44>)
 80032aa:	1b64      	subs	r4, r4, r5
 80032ac:	10a4      	asrs	r4, r4, #2
 80032ae:	42a6      	cmp	r6, r4
 80032b0:	d105      	bne.n	80032be <__libc_init_array+0x2e>
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b8:	4798      	blx	r3
 80032ba:	3601      	adds	r6, #1
 80032bc:	e7ee      	b.n	800329c <__libc_init_array+0xc>
 80032be:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c2:	4798      	blx	r3
 80032c4:	3601      	adds	r6, #1
 80032c6:	e7f2      	b.n	80032ae <__libc_init_array+0x1e>
 80032c8:	08004360 	.word	0x08004360
 80032cc:	08004360 	.word	0x08004360
 80032d0:	08004360 	.word	0x08004360
 80032d4:	08004364 	.word	0x08004364

080032d8 <memset>:
 80032d8:	4603      	mov	r3, r0
 80032da:	4402      	add	r2, r0
 80032dc:	4293      	cmp	r3, r2
 80032de:	d100      	bne.n	80032e2 <memset+0xa>
 80032e0:	4770      	bx	lr
 80032e2:	f803 1b01 	strb.w	r1, [r3], #1
 80032e6:	e7f9      	b.n	80032dc <memset+0x4>

080032e8 <siprintf>:
 80032e8:	b40e      	push	{r1, r2, r3}
 80032ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80032ee:	b500      	push	{lr}
 80032f0:	b09c      	sub	sp, #112	; 0x70
 80032f2:	ab1d      	add	r3, sp, #116	; 0x74
 80032f4:	9002      	str	r0, [sp, #8]
 80032f6:	9006      	str	r0, [sp, #24]
 80032f8:	9107      	str	r1, [sp, #28]
 80032fa:	9104      	str	r1, [sp, #16]
 80032fc:	4808      	ldr	r0, [pc, #32]	; (8003320 <siprintf+0x38>)
 80032fe:	4909      	ldr	r1, [pc, #36]	; (8003324 <siprintf+0x3c>)
 8003300:	f853 2b04 	ldr.w	r2, [r3], #4
 8003304:	9105      	str	r1, [sp, #20]
 8003306:	6800      	ldr	r0, [r0, #0]
 8003308:	a902      	add	r1, sp, #8
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	f000 f868 	bl	80033e0 <_svfiprintf_r>
 8003310:	2200      	movs	r2, #0
 8003312:	9b02      	ldr	r3, [sp, #8]
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	b01c      	add	sp, #112	; 0x70
 8003318:	f85d eb04 	ldr.w	lr, [sp], #4
 800331c:	b003      	add	sp, #12
 800331e:	4770      	bx	lr
 8003320:	20000014 	.word	0x20000014
 8003324:	ffff0208 	.word	0xffff0208

08003328 <__ssputs_r>:
 8003328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800332c:	688e      	ldr	r6, [r1, #8]
 800332e:	4682      	mov	sl, r0
 8003330:	429e      	cmp	r6, r3
 8003332:	460c      	mov	r4, r1
 8003334:	4690      	mov	r8, r2
 8003336:	461f      	mov	r7, r3
 8003338:	d838      	bhi.n	80033ac <__ssputs_r+0x84>
 800333a:	898a      	ldrh	r2, [r1, #12]
 800333c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003340:	d032      	beq.n	80033a8 <__ssputs_r+0x80>
 8003342:	6825      	ldr	r5, [r4, #0]
 8003344:	6909      	ldr	r1, [r1, #16]
 8003346:	3301      	adds	r3, #1
 8003348:	eba5 0901 	sub.w	r9, r5, r1
 800334c:	6965      	ldr	r5, [r4, #20]
 800334e:	444b      	add	r3, r9
 8003350:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003354:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003358:	106d      	asrs	r5, r5, #1
 800335a:	429d      	cmp	r5, r3
 800335c:	bf38      	it	cc
 800335e:	461d      	movcc	r5, r3
 8003360:	0553      	lsls	r3, r2, #21
 8003362:	d531      	bpl.n	80033c8 <__ssputs_r+0xa0>
 8003364:	4629      	mov	r1, r5
 8003366:	f000 fb53 	bl	8003a10 <_malloc_r>
 800336a:	4606      	mov	r6, r0
 800336c:	b950      	cbnz	r0, 8003384 <__ssputs_r+0x5c>
 800336e:	230c      	movs	r3, #12
 8003370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003374:	f8ca 3000 	str.w	r3, [sl]
 8003378:	89a3      	ldrh	r3, [r4, #12]
 800337a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800337e:	81a3      	strh	r3, [r4, #12]
 8003380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003384:	464a      	mov	r2, r9
 8003386:	6921      	ldr	r1, [r4, #16]
 8003388:	f000 face 	bl	8003928 <memcpy>
 800338c:	89a3      	ldrh	r3, [r4, #12]
 800338e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003396:	81a3      	strh	r3, [r4, #12]
 8003398:	6126      	str	r6, [r4, #16]
 800339a:	444e      	add	r6, r9
 800339c:	6026      	str	r6, [r4, #0]
 800339e:	463e      	mov	r6, r7
 80033a0:	6165      	str	r5, [r4, #20]
 80033a2:	eba5 0509 	sub.w	r5, r5, r9
 80033a6:	60a5      	str	r5, [r4, #8]
 80033a8:	42be      	cmp	r6, r7
 80033aa:	d900      	bls.n	80033ae <__ssputs_r+0x86>
 80033ac:	463e      	mov	r6, r7
 80033ae:	4632      	mov	r2, r6
 80033b0:	4641      	mov	r1, r8
 80033b2:	6820      	ldr	r0, [r4, #0]
 80033b4:	f000 fac6 	bl	8003944 <memmove>
 80033b8:	68a3      	ldr	r3, [r4, #8]
 80033ba:	6822      	ldr	r2, [r4, #0]
 80033bc:	1b9b      	subs	r3, r3, r6
 80033be:	4432      	add	r2, r6
 80033c0:	2000      	movs	r0, #0
 80033c2:	60a3      	str	r3, [r4, #8]
 80033c4:	6022      	str	r2, [r4, #0]
 80033c6:	e7db      	b.n	8003380 <__ssputs_r+0x58>
 80033c8:	462a      	mov	r2, r5
 80033ca:	f000 fb7b 	bl	8003ac4 <_realloc_r>
 80033ce:	4606      	mov	r6, r0
 80033d0:	2800      	cmp	r0, #0
 80033d2:	d1e1      	bne.n	8003398 <__ssputs_r+0x70>
 80033d4:	4650      	mov	r0, sl
 80033d6:	6921      	ldr	r1, [r4, #16]
 80033d8:	f000 face 	bl	8003978 <_free_r>
 80033dc:	e7c7      	b.n	800336e <__ssputs_r+0x46>
	...

080033e0 <_svfiprintf_r>:
 80033e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e4:	4698      	mov	r8, r3
 80033e6:	898b      	ldrh	r3, [r1, #12]
 80033e8:	4607      	mov	r7, r0
 80033ea:	061b      	lsls	r3, r3, #24
 80033ec:	460d      	mov	r5, r1
 80033ee:	4614      	mov	r4, r2
 80033f0:	b09d      	sub	sp, #116	; 0x74
 80033f2:	d50e      	bpl.n	8003412 <_svfiprintf_r+0x32>
 80033f4:	690b      	ldr	r3, [r1, #16]
 80033f6:	b963      	cbnz	r3, 8003412 <_svfiprintf_r+0x32>
 80033f8:	2140      	movs	r1, #64	; 0x40
 80033fa:	f000 fb09 	bl	8003a10 <_malloc_r>
 80033fe:	6028      	str	r0, [r5, #0]
 8003400:	6128      	str	r0, [r5, #16]
 8003402:	b920      	cbnz	r0, 800340e <_svfiprintf_r+0x2e>
 8003404:	230c      	movs	r3, #12
 8003406:	603b      	str	r3, [r7, #0]
 8003408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800340c:	e0d1      	b.n	80035b2 <_svfiprintf_r+0x1d2>
 800340e:	2340      	movs	r3, #64	; 0x40
 8003410:	616b      	str	r3, [r5, #20]
 8003412:	2300      	movs	r3, #0
 8003414:	9309      	str	r3, [sp, #36]	; 0x24
 8003416:	2320      	movs	r3, #32
 8003418:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800341c:	2330      	movs	r3, #48	; 0x30
 800341e:	f04f 0901 	mov.w	r9, #1
 8003422:	f8cd 800c 	str.w	r8, [sp, #12]
 8003426:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80035cc <_svfiprintf_r+0x1ec>
 800342a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800342e:	4623      	mov	r3, r4
 8003430:	469a      	mov	sl, r3
 8003432:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003436:	b10a      	cbz	r2, 800343c <_svfiprintf_r+0x5c>
 8003438:	2a25      	cmp	r2, #37	; 0x25
 800343a:	d1f9      	bne.n	8003430 <_svfiprintf_r+0x50>
 800343c:	ebba 0b04 	subs.w	fp, sl, r4
 8003440:	d00b      	beq.n	800345a <_svfiprintf_r+0x7a>
 8003442:	465b      	mov	r3, fp
 8003444:	4622      	mov	r2, r4
 8003446:	4629      	mov	r1, r5
 8003448:	4638      	mov	r0, r7
 800344a:	f7ff ff6d 	bl	8003328 <__ssputs_r>
 800344e:	3001      	adds	r0, #1
 8003450:	f000 80aa 	beq.w	80035a8 <_svfiprintf_r+0x1c8>
 8003454:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003456:	445a      	add	r2, fp
 8003458:	9209      	str	r2, [sp, #36]	; 0x24
 800345a:	f89a 3000 	ldrb.w	r3, [sl]
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 80a2 	beq.w	80035a8 <_svfiprintf_r+0x1c8>
 8003464:	2300      	movs	r3, #0
 8003466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800346a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800346e:	f10a 0a01 	add.w	sl, sl, #1
 8003472:	9304      	str	r3, [sp, #16]
 8003474:	9307      	str	r3, [sp, #28]
 8003476:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800347a:	931a      	str	r3, [sp, #104]	; 0x68
 800347c:	4654      	mov	r4, sl
 800347e:	2205      	movs	r2, #5
 8003480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003484:	4851      	ldr	r0, [pc, #324]	; (80035cc <_svfiprintf_r+0x1ec>)
 8003486:	f000 fa41 	bl	800390c <memchr>
 800348a:	9a04      	ldr	r2, [sp, #16]
 800348c:	b9d8      	cbnz	r0, 80034c6 <_svfiprintf_r+0xe6>
 800348e:	06d0      	lsls	r0, r2, #27
 8003490:	bf44      	itt	mi
 8003492:	2320      	movmi	r3, #32
 8003494:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003498:	0711      	lsls	r1, r2, #28
 800349a:	bf44      	itt	mi
 800349c:	232b      	movmi	r3, #43	; 0x2b
 800349e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034a2:	f89a 3000 	ldrb.w	r3, [sl]
 80034a6:	2b2a      	cmp	r3, #42	; 0x2a
 80034a8:	d015      	beq.n	80034d6 <_svfiprintf_r+0xf6>
 80034aa:	4654      	mov	r4, sl
 80034ac:	2000      	movs	r0, #0
 80034ae:	f04f 0c0a 	mov.w	ip, #10
 80034b2:	9a07      	ldr	r2, [sp, #28]
 80034b4:	4621      	mov	r1, r4
 80034b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034ba:	3b30      	subs	r3, #48	; 0x30
 80034bc:	2b09      	cmp	r3, #9
 80034be:	d94e      	bls.n	800355e <_svfiprintf_r+0x17e>
 80034c0:	b1b0      	cbz	r0, 80034f0 <_svfiprintf_r+0x110>
 80034c2:	9207      	str	r2, [sp, #28]
 80034c4:	e014      	b.n	80034f0 <_svfiprintf_r+0x110>
 80034c6:	eba0 0308 	sub.w	r3, r0, r8
 80034ca:	fa09 f303 	lsl.w	r3, r9, r3
 80034ce:	4313      	orrs	r3, r2
 80034d0:	46a2      	mov	sl, r4
 80034d2:	9304      	str	r3, [sp, #16]
 80034d4:	e7d2      	b.n	800347c <_svfiprintf_r+0x9c>
 80034d6:	9b03      	ldr	r3, [sp, #12]
 80034d8:	1d19      	adds	r1, r3, #4
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	9103      	str	r1, [sp, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	bfbb      	ittet	lt
 80034e2:	425b      	neglt	r3, r3
 80034e4:	f042 0202 	orrlt.w	r2, r2, #2
 80034e8:	9307      	strge	r3, [sp, #28]
 80034ea:	9307      	strlt	r3, [sp, #28]
 80034ec:	bfb8      	it	lt
 80034ee:	9204      	strlt	r2, [sp, #16]
 80034f0:	7823      	ldrb	r3, [r4, #0]
 80034f2:	2b2e      	cmp	r3, #46	; 0x2e
 80034f4:	d10c      	bne.n	8003510 <_svfiprintf_r+0x130>
 80034f6:	7863      	ldrb	r3, [r4, #1]
 80034f8:	2b2a      	cmp	r3, #42	; 0x2a
 80034fa:	d135      	bne.n	8003568 <_svfiprintf_r+0x188>
 80034fc:	9b03      	ldr	r3, [sp, #12]
 80034fe:	3402      	adds	r4, #2
 8003500:	1d1a      	adds	r2, r3, #4
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	9203      	str	r2, [sp, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	bfb8      	it	lt
 800350a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800350e:	9305      	str	r3, [sp, #20]
 8003510:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80035dc <_svfiprintf_r+0x1fc>
 8003514:	2203      	movs	r2, #3
 8003516:	4650      	mov	r0, sl
 8003518:	7821      	ldrb	r1, [r4, #0]
 800351a:	f000 f9f7 	bl	800390c <memchr>
 800351e:	b140      	cbz	r0, 8003532 <_svfiprintf_r+0x152>
 8003520:	2340      	movs	r3, #64	; 0x40
 8003522:	eba0 000a 	sub.w	r0, r0, sl
 8003526:	fa03 f000 	lsl.w	r0, r3, r0
 800352a:	9b04      	ldr	r3, [sp, #16]
 800352c:	3401      	adds	r4, #1
 800352e:	4303      	orrs	r3, r0
 8003530:	9304      	str	r3, [sp, #16]
 8003532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003536:	2206      	movs	r2, #6
 8003538:	4825      	ldr	r0, [pc, #148]	; (80035d0 <_svfiprintf_r+0x1f0>)
 800353a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800353e:	f000 f9e5 	bl	800390c <memchr>
 8003542:	2800      	cmp	r0, #0
 8003544:	d038      	beq.n	80035b8 <_svfiprintf_r+0x1d8>
 8003546:	4b23      	ldr	r3, [pc, #140]	; (80035d4 <_svfiprintf_r+0x1f4>)
 8003548:	bb1b      	cbnz	r3, 8003592 <_svfiprintf_r+0x1b2>
 800354a:	9b03      	ldr	r3, [sp, #12]
 800354c:	3307      	adds	r3, #7
 800354e:	f023 0307 	bic.w	r3, r3, #7
 8003552:	3308      	adds	r3, #8
 8003554:	9303      	str	r3, [sp, #12]
 8003556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003558:	4433      	add	r3, r6
 800355a:	9309      	str	r3, [sp, #36]	; 0x24
 800355c:	e767      	b.n	800342e <_svfiprintf_r+0x4e>
 800355e:	460c      	mov	r4, r1
 8003560:	2001      	movs	r0, #1
 8003562:	fb0c 3202 	mla	r2, ip, r2, r3
 8003566:	e7a5      	b.n	80034b4 <_svfiprintf_r+0xd4>
 8003568:	2300      	movs	r3, #0
 800356a:	f04f 0c0a 	mov.w	ip, #10
 800356e:	4619      	mov	r1, r3
 8003570:	3401      	adds	r4, #1
 8003572:	9305      	str	r3, [sp, #20]
 8003574:	4620      	mov	r0, r4
 8003576:	f810 2b01 	ldrb.w	r2, [r0], #1
 800357a:	3a30      	subs	r2, #48	; 0x30
 800357c:	2a09      	cmp	r2, #9
 800357e:	d903      	bls.n	8003588 <_svfiprintf_r+0x1a8>
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0c5      	beq.n	8003510 <_svfiprintf_r+0x130>
 8003584:	9105      	str	r1, [sp, #20]
 8003586:	e7c3      	b.n	8003510 <_svfiprintf_r+0x130>
 8003588:	4604      	mov	r4, r0
 800358a:	2301      	movs	r3, #1
 800358c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003590:	e7f0      	b.n	8003574 <_svfiprintf_r+0x194>
 8003592:	ab03      	add	r3, sp, #12
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	462a      	mov	r2, r5
 8003598:	4638      	mov	r0, r7
 800359a:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <_svfiprintf_r+0x1f8>)
 800359c:	a904      	add	r1, sp, #16
 800359e:	f3af 8000 	nop.w
 80035a2:	1c42      	adds	r2, r0, #1
 80035a4:	4606      	mov	r6, r0
 80035a6:	d1d6      	bne.n	8003556 <_svfiprintf_r+0x176>
 80035a8:	89ab      	ldrh	r3, [r5, #12]
 80035aa:	065b      	lsls	r3, r3, #25
 80035ac:	f53f af2c 	bmi.w	8003408 <_svfiprintf_r+0x28>
 80035b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035b2:	b01d      	add	sp, #116	; 0x74
 80035b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035b8:	ab03      	add	r3, sp, #12
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	462a      	mov	r2, r5
 80035be:	4638      	mov	r0, r7
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <_svfiprintf_r+0x1f8>)
 80035c2:	a904      	add	r1, sp, #16
 80035c4:	f000 f87c 	bl	80036c0 <_printf_i>
 80035c8:	e7eb      	b.n	80035a2 <_svfiprintf_r+0x1c2>
 80035ca:	bf00      	nop
 80035cc:	0800432c 	.word	0x0800432c
 80035d0:	08004336 	.word	0x08004336
 80035d4:	00000000 	.word	0x00000000
 80035d8:	08003329 	.word	0x08003329
 80035dc:	08004332 	.word	0x08004332

080035e0 <_printf_common>:
 80035e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035e4:	4616      	mov	r6, r2
 80035e6:	4699      	mov	r9, r3
 80035e8:	688a      	ldr	r2, [r1, #8]
 80035ea:	690b      	ldr	r3, [r1, #16]
 80035ec:	4607      	mov	r7, r0
 80035ee:	4293      	cmp	r3, r2
 80035f0:	bfb8      	it	lt
 80035f2:	4613      	movlt	r3, r2
 80035f4:	6033      	str	r3, [r6, #0]
 80035f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035fa:	460c      	mov	r4, r1
 80035fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003600:	b10a      	cbz	r2, 8003606 <_printf_common+0x26>
 8003602:	3301      	adds	r3, #1
 8003604:	6033      	str	r3, [r6, #0]
 8003606:	6823      	ldr	r3, [r4, #0]
 8003608:	0699      	lsls	r1, r3, #26
 800360a:	bf42      	ittt	mi
 800360c:	6833      	ldrmi	r3, [r6, #0]
 800360e:	3302      	addmi	r3, #2
 8003610:	6033      	strmi	r3, [r6, #0]
 8003612:	6825      	ldr	r5, [r4, #0]
 8003614:	f015 0506 	ands.w	r5, r5, #6
 8003618:	d106      	bne.n	8003628 <_printf_common+0x48>
 800361a:	f104 0a19 	add.w	sl, r4, #25
 800361e:	68e3      	ldr	r3, [r4, #12]
 8003620:	6832      	ldr	r2, [r6, #0]
 8003622:	1a9b      	subs	r3, r3, r2
 8003624:	42ab      	cmp	r3, r5
 8003626:	dc28      	bgt.n	800367a <_printf_common+0x9a>
 8003628:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800362c:	1e13      	subs	r3, r2, #0
 800362e:	6822      	ldr	r2, [r4, #0]
 8003630:	bf18      	it	ne
 8003632:	2301      	movne	r3, #1
 8003634:	0692      	lsls	r2, r2, #26
 8003636:	d42d      	bmi.n	8003694 <_printf_common+0xb4>
 8003638:	4649      	mov	r1, r9
 800363a:	4638      	mov	r0, r7
 800363c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003640:	47c0      	blx	r8
 8003642:	3001      	adds	r0, #1
 8003644:	d020      	beq.n	8003688 <_printf_common+0xa8>
 8003646:	6823      	ldr	r3, [r4, #0]
 8003648:	68e5      	ldr	r5, [r4, #12]
 800364a:	f003 0306 	and.w	r3, r3, #6
 800364e:	2b04      	cmp	r3, #4
 8003650:	bf18      	it	ne
 8003652:	2500      	movne	r5, #0
 8003654:	6832      	ldr	r2, [r6, #0]
 8003656:	f04f 0600 	mov.w	r6, #0
 800365a:	68a3      	ldr	r3, [r4, #8]
 800365c:	bf08      	it	eq
 800365e:	1aad      	subeq	r5, r5, r2
 8003660:	6922      	ldr	r2, [r4, #16]
 8003662:	bf08      	it	eq
 8003664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003668:	4293      	cmp	r3, r2
 800366a:	bfc4      	itt	gt
 800366c:	1a9b      	subgt	r3, r3, r2
 800366e:	18ed      	addgt	r5, r5, r3
 8003670:	341a      	adds	r4, #26
 8003672:	42b5      	cmp	r5, r6
 8003674:	d11a      	bne.n	80036ac <_printf_common+0xcc>
 8003676:	2000      	movs	r0, #0
 8003678:	e008      	b.n	800368c <_printf_common+0xac>
 800367a:	2301      	movs	r3, #1
 800367c:	4652      	mov	r2, sl
 800367e:	4649      	mov	r1, r9
 8003680:	4638      	mov	r0, r7
 8003682:	47c0      	blx	r8
 8003684:	3001      	adds	r0, #1
 8003686:	d103      	bne.n	8003690 <_printf_common+0xb0>
 8003688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800368c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003690:	3501      	adds	r5, #1
 8003692:	e7c4      	b.n	800361e <_printf_common+0x3e>
 8003694:	2030      	movs	r0, #48	; 0x30
 8003696:	18e1      	adds	r1, r4, r3
 8003698:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036a2:	4422      	add	r2, r4
 80036a4:	3302      	adds	r3, #2
 80036a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036aa:	e7c5      	b.n	8003638 <_printf_common+0x58>
 80036ac:	2301      	movs	r3, #1
 80036ae:	4622      	mov	r2, r4
 80036b0:	4649      	mov	r1, r9
 80036b2:	4638      	mov	r0, r7
 80036b4:	47c0      	blx	r8
 80036b6:	3001      	adds	r0, #1
 80036b8:	d0e6      	beq.n	8003688 <_printf_common+0xa8>
 80036ba:	3601      	adds	r6, #1
 80036bc:	e7d9      	b.n	8003672 <_printf_common+0x92>
	...

080036c0 <_printf_i>:
 80036c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036c4:	460c      	mov	r4, r1
 80036c6:	7e27      	ldrb	r7, [r4, #24]
 80036c8:	4691      	mov	r9, r2
 80036ca:	2f78      	cmp	r7, #120	; 0x78
 80036cc:	4680      	mov	r8, r0
 80036ce:	469a      	mov	sl, r3
 80036d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80036d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036d6:	d807      	bhi.n	80036e8 <_printf_i+0x28>
 80036d8:	2f62      	cmp	r7, #98	; 0x62
 80036da:	d80a      	bhi.n	80036f2 <_printf_i+0x32>
 80036dc:	2f00      	cmp	r7, #0
 80036de:	f000 80d9 	beq.w	8003894 <_printf_i+0x1d4>
 80036e2:	2f58      	cmp	r7, #88	; 0x58
 80036e4:	f000 80a4 	beq.w	8003830 <_printf_i+0x170>
 80036e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036f0:	e03a      	b.n	8003768 <_printf_i+0xa8>
 80036f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036f6:	2b15      	cmp	r3, #21
 80036f8:	d8f6      	bhi.n	80036e8 <_printf_i+0x28>
 80036fa:	a001      	add	r0, pc, #4	; (adr r0, 8003700 <_printf_i+0x40>)
 80036fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003700:	08003759 	.word	0x08003759
 8003704:	0800376d 	.word	0x0800376d
 8003708:	080036e9 	.word	0x080036e9
 800370c:	080036e9 	.word	0x080036e9
 8003710:	080036e9 	.word	0x080036e9
 8003714:	080036e9 	.word	0x080036e9
 8003718:	0800376d 	.word	0x0800376d
 800371c:	080036e9 	.word	0x080036e9
 8003720:	080036e9 	.word	0x080036e9
 8003724:	080036e9 	.word	0x080036e9
 8003728:	080036e9 	.word	0x080036e9
 800372c:	0800387b 	.word	0x0800387b
 8003730:	0800379d 	.word	0x0800379d
 8003734:	0800385d 	.word	0x0800385d
 8003738:	080036e9 	.word	0x080036e9
 800373c:	080036e9 	.word	0x080036e9
 8003740:	0800389d 	.word	0x0800389d
 8003744:	080036e9 	.word	0x080036e9
 8003748:	0800379d 	.word	0x0800379d
 800374c:	080036e9 	.word	0x080036e9
 8003750:	080036e9 	.word	0x080036e9
 8003754:	08003865 	.word	0x08003865
 8003758:	680b      	ldr	r3, [r1, #0]
 800375a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800375e:	1d1a      	adds	r2, r3, #4
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	600a      	str	r2, [r1, #0]
 8003764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003768:	2301      	movs	r3, #1
 800376a:	e0a4      	b.n	80038b6 <_printf_i+0x1f6>
 800376c:	6825      	ldr	r5, [r4, #0]
 800376e:	6808      	ldr	r0, [r1, #0]
 8003770:	062e      	lsls	r6, r5, #24
 8003772:	f100 0304 	add.w	r3, r0, #4
 8003776:	d50a      	bpl.n	800378e <_printf_i+0xce>
 8003778:	6805      	ldr	r5, [r0, #0]
 800377a:	600b      	str	r3, [r1, #0]
 800377c:	2d00      	cmp	r5, #0
 800377e:	da03      	bge.n	8003788 <_printf_i+0xc8>
 8003780:	232d      	movs	r3, #45	; 0x2d
 8003782:	426d      	negs	r5, r5
 8003784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003788:	230a      	movs	r3, #10
 800378a:	485e      	ldr	r0, [pc, #376]	; (8003904 <_printf_i+0x244>)
 800378c:	e019      	b.n	80037c2 <_printf_i+0x102>
 800378e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003792:	6805      	ldr	r5, [r0, #0]
 8003794:	600b      	str	r3, [r1, #0]
 8003796:	bf18      	it	ne
 8003798:	b22d      	sxthne	r5, r5
 800379a:	e7ef      	b.n	800377c <_printf_i+0xbc>
 800379c:	680b      	ldr	r3, [r1, #0]
 800379e:	6825      	ldr	r5, [r4, #0]
 80037a0:	1d18      	adds	r0, r3, #4
 80037a2:	6008      	str	r0, [r1, #0]
 80037a4:	0628      	lsls	r0, r5, #24
 80037a6:	d501      	bpl.n	80037ac <_printf_i+0xec>
 80037a8:	681d      	ldr	r5, [r3, #0]
 80037aa:	e002      	b.n	80037b2 <_printf_i+0xf2>
 80037ac:	0669      	lsls	r1, r5, #25
 80037ae:	d5fb      	bpl.n	80037a8 <_printf_i+0xe8>
 80037b0:	881d      	ldrh	r5, [r3, #0]
 80037b2:	2f6f      	cmp	r7, #111	; 0x6f
 80037b4:	bf0c      	ite	eq
 80037b6:	2308      	moveq	r3, #8
 80037b8:	230a      	movne	r3, #10
 80037ba:	4852      	ldr	r0, [pc, #328]	; (8003904 <_printf_i+0x244>)
 80037bc:	2100      	movs	r1, #0
 80037be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037c2:	6866      	ldr	r6, [r4, #4]
 80037c4:	2e00      	cmp	r6, #0
 80037c6:	bfa8      	it	ge
 80037c8:	6821      	ldrge	r1, [r4, #0]
 80037ca:	60a6      	str	r6, [r4, #8]
 80037cc:	bfa4      	itt	ge
 80037ce:	f021 0104 	bicge.w	r1, r1, #4
 80037d2:	6021      	strge	r1, [r4, #0]
 80037d4:	b90d      	cbnz	r5, 80037da <_printf_i+0x11a>
 80037d6:	2e00      	cmp	r6, #0
 80037d8:	d04d      	beq.n	8003876 <_printf_i+0x1b6>
 80037da:	4616      	mov	r6, r2
 80037dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80037e0:	fb03 5711 	mls	r7, r3, r1, r5
 80037e4:	5dc7      	ldrb	r7, [r0, r7]
 80037e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037ea:	462f      	mov	r7, r5
 80037ec:	42bb      	cmp	r3, r7
 80037ee:	460d      	mov	r5, r1
 80037f0:	d9f4      	bls.n	80037dc <_printf_i+0x11c>
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d10b      	bne.n	800380e <_printf_i+0x14e>
 80037f6:	6823      	ldr	r3, [r4, #0]
 80037f8:	07df      	lsls	r7, r3, #31
 80037fa:	d508      	bpl.n	800380e <_printf_i+0x14e>
 80037fc:	6923      	ldr	r3, [r4, #16]
 80037fe:	6861      	ldr	r1, [r4, #4]
 8003800:	4299      	cmp	r1, r3
 8003802:	bfde      	ittt	le
 8003804:	2330      	movle	r3, #48	; 0x30
 8003806:	f806 3c01 	strble.w	r3, [r6, #-1]
 800380a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800380e:	1b92      	subs	r2, r2, r6
 8003810:	6122      	str	r2, [r4, #16]
 8003812:	464b      	mov	r3, r9
 8003814:	4621      	mov	r1, r4
 8003816:	4640      	mov	r0, r8
 8003818:	f8cd a000 	str.w	sl, [sp]
 800381c:	aa03      	add	r2, sp, #12
 800381e:	f7ff fedf 	bl	80035e0 <_printf_common>
 8003822:	3001      	adds	r0, #1
 8003824:	d14c      	bne.n	80038c0 <_printf_i+0x200>
 8003826:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800382a:	b004      	add	sp, #16
 800382c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003830:	4834      	ldr	r0, [pc, #208]	; (8003904 <_printf_i+0x244>)
 8003832:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003836:	680e      	ldr	r6, [r1, #0]
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	f856 5b04 	ldr.w	r5, [r6], #4
 800383e:	061f      	lsls	r7, r3, #24
 8003840:	600e      	str	r6, [r1, #0]
 8003842:	d514      	bpl.n	800386e <_printf_i+0x1ae>
 8003844:	07d9      	lsls	r1, r3, #31
 8003846:	bf44      	itt	mi
 8003848:	f043 0320 	orrmi.w	r3, r3, #32
 800384c:	6023      	strmi	r3, [r4, #0]
 800384e:	b91d      	cbnz	r5, 8003858 <_printf_i+0x198>
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	f023 0320 	bic.w	r3, r3, #32
 8003856:	6023      	str	r3, [r4, #0]
 8003858:	2310      	movs	r3, #16
 800385a:	e7af      	b.n	80037bc <_printf_i+0xfc>
 800385c:	6823      	ldr	r3, [r4, #0]
 800385e:	f043 0320 	orr.w	r3, r3, #32
 8003862:	6023      	str	r3, [r4, #0]
 8003864:	2378      	movs	r3, #120	; 0x78
 8003866:	4828      	ldr	r0, [pc, #160]	; (8003908 <_printf_i+0x248>)
 8003868:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800386c:	e7e3      	b.n	8003836 <_printf_i+0x176>
 800386e:	065e      	lsls	r6, r3, #25
 8003870:	bf48      	it	mi
 8003872:	b2ad      	uxthmi	r5, r5
 8003874:	e7e6      	b.n	8003844 <_printf_i+0x184>
 8003876:	4616      	mov	r6, r2
 8003878:	e7bb      	b.n	80037f2 <_printf_i+0x132>
 800387a:	680b      	ldr	r3, [r1, #0]
 800387c:	6826      	ldr	r6, [r4, #0]
 800387e:	1d1d      	adds	r5, r3, #4
 8003880:	6960      	ldr	r0, [r4, #20]
 8003882:	600d      	str	r5, [r1, #0]
 8003884:	0635      	lsls	r5, r6, #24
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	d501      	bpl.n	800388e <_printf_i+0x1ce>
 800388a:	6018      	str	r0, [r3, #0]
 800388c:	e002      	b.n	8003894 <_printf_i+0x1d4>
 800388e:	0671      	lsls	r1, r6, #25
 8003890:	d5fb      	bpl.n	800388a <_printf_i+0x1ca>
 8003892:	8018      	strh	r0, [r3, #0]
 8003894:	2300      	movs	r3, #0
 8003896:	4616      	mov	r6, r2
 8003898:	6123      	str	r3, [r4, #16]
 800389a:	e7ba      	b.n	8003812 <_printf_i+0x152>
 800389c:	680b      	ldr	r3, [r1, #0]
 800389e:	1d1a      	adds	r2, r3, #4
 80038a0:	600a      	str	r2, [r1, #0]
 80038a2:	681e      	ldr	r6, [r3, #0]
 80038a4:	2100      	movs	r1, #0
 80038a6:	4630      	mov	r0, r6
 80038a8:	6862      	ldr	r2, [r4, #4]
 80038aa:	f000 f82f 	bl	800390c <memchr>
 80038ae:	b108      	cbz	r0, 80038b4 <_printf_i+0x1f4>
 80038b0:	1b80      	subs	r0, r0, r6
 80038b2:	6060      	str	r0, [r4, #4]
 80038b4:	6863      	ldr	r3, [r4, #4]
 80038b6:	6123      	str	r3, [r4, #16]
 80038b8:	2300      	movs	r3, #0
 80038ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038be:	e7a8      	b.n	8003812 <_printf_i+0x152>
 80038c0:	4632      	mov	r2, r6
 80038c2:	4649      	mov	r1, r9
 80038c4:	4640      	mov	r0, r8
 80038c6:	6923      	ldr	r3, [r4, #16]
 80038c8:	47d0      	blx	sl
 80038ca:	3001      	adds	r0, #1
 80038cc:	d0ab      	beq.n	8003826 <_printf_i+0x166>
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	079b      	lsls	r3, r3, #30
 80038d2:	d413      	bmi.n	80038fc <_printf_i+0x23c>
 80038d4:	68e0      	ldr	r0, [r4, #12]
 80038d6:	9b03      	ldr	r3, [sp, #12]
 80038d8:	4298      	cmp	r0, r3
 80038da:	bfb8      	it	lt
 80038dc:	4618      	movlt	r0, r3
 80038de:	e7a4      	b.n	800382a <_printf_i+0x16a>
 80038e0:	2301      	movs	r3, #1
 80038e2:	4632      	mov	r2, r6
 80038e4:	4649      	mov	r1, r9
 80038e6:	4640      	mov	r0, r8
 80038e8:	47d0      	blx	sl
 80038ea:	3001      	adds	r0, #1
 80038ec:	d09b      	beq.n	8003826 <_printf_i+0x166>
 80038ee:	3501      	adds	r5, #1
 80038f0:	68e3      	ldr	r3, [r4, #12]
 80038f2:	9903      	ldr	r1, [sp, #12]
 80038f4:	1a5b      	subs	r3, r3, r1
 80038f6:	42ab      	cmp	r3, r5
 80038f8:	dcf2      	bgt.n	80038e0 <_printf_i+0x220>
 80038fa:	e7eb      	b.n	80038d4 <_printf_i+0x214>
 80038fc:	2500      	movs	r5, #0
 80038fe:	f104 0619 	add.w	r6, r4, #25
 8003902:	e7f5      	b.n	80038f0 <_printf_i+0x230>
 8003904:	0800433d 	.word	0x0800433d
 8003908:	0800434e 	.word	0x0800434e

0800390c <memchr>:
 800390c:	4603      	mov	r3, r0
 800390e:	b510      	push	{r4, lr}
 8003910:	b2c9      	uxtb	r1, r1
 8003912:	4402      	add	r2, r0
 8003914:	4293      	cmp	r3, r2
 8003916:	4618      	mov	r0, r3
 8003918:	d101      	bne.n	800391e <memchr+0x12>
 800391a:	2000      	movs	r0, #0
 800391c:	e003      	b.n	8003926 <memchr+0x1a>
 800391e:	7804      	ldrb	r4, [r0, #0]
 8003920:	3301      	adds	r3, #1
 8003922:	428c      	cmp	r4, r1
 8003924:	d1f6      	bne.n	8003914 <memchr+0x8>
 8003926:	bd10      	pop	{r4, pc}

08003928 <memcpy>:
 8003928:	440a      	add	r2, r1
 800392a:	4291      	cmp	r1, r2
 800392c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003930:	d100      	bne.n	8003934 <memcpy+0xc>
 8003932:	4770      	bx	lr
 8003934:	b510      	push	{r4, lr}
 8003936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800393a:	4291      	cmp	r1, r2
 800393c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003940:	d1f9      	bne.n	8003936 <memcpy+0xe>
 8003942:	bd10      	pop	{r4, pc}

08003944 <memmove>:
 8003944:	4288      	cmp	r0, r1
 8003946:	b510      	push	{r4, lr}
 8003948:	eb01 0402 	add.w	r4, r1, r2
 800394c:	d902      	bls.n	8003954 <memmove+0x10>
 800394e:	4284      	cmp	r4, r0
 8003950:	4623      	mov	r3, r4
 8003952:	d807      	bhi.n	8003964 <memmove+0x20>
 8003954:	1e43      	subs	r3, r0, #1
 8003956:	42a1      	cmp	r1, r4
 8003958:	d008      	beq.n	800396c <memmove+0x28>
 800395a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800395e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003962:	e7f8      	b.n	8003956 <memmove+0x12>
 8003964:	4601      	mov	r1, r0
 8003966:	4402      	add	r2, r0
 8003968:	428a      	cmp	r2, r1
 800396a:	d100      	bne.n	800396e <memmove+0x2a>
 800396c:	bd10      	pop	{r4, pc}
 800396e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003972:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003976:	e7f7      	b.n	8003968 <memmove+0x24>

08003978 <_free_r>:
 8003978:	b538      	push	{r3, r4, r5, lr}
 800397a:	4605      	mov	r5, r0
 800397c:	2900      	cmp	r1, #0
 800397e:	d043      	beq.n	8003a08 <_free_r+0x90>
 8003980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003984:	1f0c      	subs	r4, r1, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	bfb8      	it	lt
 800398a:	18e4      	addlt	r4, r4, r3
 800398c:	f000 f8d0 	bl	8003b30 <__malloc_lock>
 8003990:	4a1e      	ldr	r2, [pc, #120]	; (8003a0c <_free_r+0x94>)
 8003992:	6813      	ldr	r3, [r2, #0]
 8003994:	4610      	mov	r0, r2
 8003996:	b933      	cbnz	r3, 80039a6 <_free_r+0x2e>
 8003998:	6063      	str	r3, [r4, #4]
 800399a:	6014      	str	r4, [r2, #0]
 800399c:	4628      	mov	r0, r5
 800399e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039a2:	f000 b8cb 	b.w	8003b3c <__malloc_unlock>
 80039a6:	42a3      	cmp	r3, r4
 80039a8:	d90a      	bls.n	80039c0 <_free_r+0x48>
 80039aa:	6821      	ldr	r1, [r4, #0]
 80039ac:	1862      	adds	r2, r4, r1
 80039ae:	4293      	cmp	r3, r2
 80039b0:	bf01      	itttt	eq
 80039b2:	681a      	ldreq	r2, [r3, #0]
 80039b4:	685b      	ldreq	r3, [r3, #4]
 80039b6:	1852      	addeq	r2, r2, r1
 80039b8:	6022      	streq	r2, [r4, #0]
 80039ba:	6063      	str	r3, [r4, #4]
 80039bc:	6004      	str	r4, [r0, #0]
 80039be:	e7ed      	b.n	800399c <_free_r+0x24>
 80039c0:	461a      	mov	r2, r3
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	b10b      	cbz	r3, 80039ca <_free_r+0x52>
 80039c6:	42a3      	cmp	r3, r4
 80039c8:	d9fa      	bls.n	80039c0 <_free_r+0x48>
 80039ca:	6811      	ldr	r1, [r2, #0]
 80039cc:	1850      	adds	r0, r2, r1
 80039ce:	42a0      	cmp	r0, r4
 80039d0:	d10b      	bne.n	80039ea <_free_r+0x72>
 80039d2:	6820      	ldr	r0, [r4, #0]
 80039d4:	4401      	add	r1, r0
 80039d6:	1850      	adds	r0, r2, r1
 80039d8:	4283      	cmp	r3, r0
 80039da:	6011      	str	r1, [r2, #0]
 80039dc:	d1de      	bne.n	800399c <_free_r+0x24>
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4401      	add	r1, r0
 80039e4:	6011      	str	r1, [r2, #0]
 80039e6:	6053      	str	r3, [r2, #4]
 80039e8:	e7d8      	b.n	800399c <_free_r+0x24>
 80039ea:	d902      	bls.n	80039f2 <_free_r+0x7a>
 80039ec:	230c      	movs	r3, #12
 80039ee:	602b      	str	r3, [r5, #0]
 80039f0:	e7d4      	b.n	800399c <_free_r+0x24>
 80039f2:	6820      	ldr	r0, [r4, #0]
 80039f4:	1821      	adds	r1, r4, r0
 80039f6:	428b      	cmp	r3, r1
 80039f8:	bf01      	itttt	eq
 80039fa:	6819      	ldreq	r1, [r3, #0]
 80039fc:	685b      	ldreq	r3, [r3, #4]
 80039fe:	1809      	addeq	r1, r1, r0
 8003a00:	6021      	streq	r1, [r4, #0]
 8003a02:	6063      	str	r3, [r4, #4]
 8003a04:	6054      	str	r4, [r2, #4]
 8003a06:	e7c9      	b.n	800399c <_free_r+0x24>
 8003a08:	bd38      	pop	{r3, r4, r5, pc}
 8003a0a:	bf00      	nop
 8003a0c:	200004cc 	.word	0x200004cc

08003a10 <_malloc_r>:
 8003a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a12:	1ccd      	adds	r5, r1, #3
 8003a14:	f025 0503 	bic.w	r5, r5, #3
 8003a18:	3508      	adds	r5, #8
 8003a1a:	2d0c      	cmp	r5, #12
 8003a1c:	bf38      	it	cc
 8003a1e:	250c      	movcc	r5, #12
 8003a20:	2d00      	cmp	r5, #0
 8003a22:	4606      	mov	r6, r0
 8003a24:	db01      	blt.n	8003a2a <_malloc_r+0x1a>
 8003a26:	42a9      	cmp	r1, r5
 8003a28:	d903      	bls.n	8003a32 <_malloc_r+0x22>
 8003a2a:	230c      	movs	r3, #12
 8003a2c:	6033      	str	r3, [r6, #0]
 8003a2e:	2000      	movs	r0, #0
 8003a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a32:	f000 f87d 	bl	8003b30 <__malloc_lock>
 8003a36:	4921      	ldr	r1, [pc, #132]	; (8003abc <_malloc_r+0xac>)
 8003a38:	680a      	ldr	r2, [r1, #0]
 8003a3a:	4614      	mov	r4, r2
 8003a3c:	b99c      	cbnz	r4, 8003a66 <_malloc_r+0x56>
 8003a3e:	4f20      	ldr	r7, [pc, #128]	; (8003ac0 <_malloc_r+0xb0>)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	b923      	cbnz	r3, 8003a4e <_malloc_r+0x3e>
 8003a44:	4621      	mov	r1, r4
 8003a46:	4630      	mov	r0, r6
 8003a48:	f000 f862 	bl	8003b10 <_sbrk_r>
 8003a4c:	6038      	str	r0, [r7, #0]
 8003a4e:	4629      	mov	r1, r5
 8003a50:	4630      	mov	r0, r6
 8003a52:	f000 f85d 	bl	8003b10 <_sbrk_r>
 8003a56:	1c43      	adds	r3, r0, #1
 8003a58:	d123      	bne.n	8003aa2 <_malloc_r+0x92>
 8003a5a:	230c      	movs	r3, #12
 8003a5c:	4630      	mov	r0, r6
 8003a5e:	6033      	str	r3, [r6, #0]
 8003a60:	f000 f86c 	bl	8003b3c <__malloc_unlock>
 8003a64:	e7e3      	b.n	8003a2e <_malloc_r+0x1e>
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	1b5b      	subs	r3, r3, r5
 8003a6a:	d417      	bmi.n	8003a9c <_malloc_r+0x8c>
 8003a6c:	2b0b      	cmp	r3, #11
 8003a6e:	d903      	bls.n	8003a78 <_malloc_r+0x68>
 8003a70:	6023      	str	r3, [r4, #0]
 8003a72:	441c      	add	r4, r3
 8003a74:	6025      	str	r5, [r4, #0]
 8003a76:	e004      	b.n	8003a82 <_malloc_r+0x72>
 8003a78:	6863      	ldr	r3, [r4, #4]
 8003a7a:	42a2      	cmp	r2, r4
 8003a7c:	bf0c      	ite	eq
 8003a7e:	600b      	streq	r3, [r1, #0]
 8003a80:	6053      	strne	r3, [r2, #4]
 8003a82:	4630      	mov	r0, r6
 8003a84:	f000 f85a 	bl	8003b3c <__malloc_unlock>
 8003a88:	f104 000b 	add.w	r0, r4, #11
 8003a8c:	1d23      	adds	r3, r4, #4
 8003a8e:	f020 0007 	bic.w	r0, r0, #7
 8003a92:	1ac2      	subs	r2, r0, r3
 8003a94:	d0cc      	beq.n	8003a30 <_malloc_r+0x20>
 8003a96:	1a1b      	subs	r3, r3, r0
 8003a98:	50a3      	str	r3, [r4, r2]
 8003a9a:	e7c9      	b.n	8003a30 <_malloc_r+0x20>
 8003a9c:	4622      	mov	r2, r4
 8003a9e:	6864      	ldr	r4, [r4, #4]
 8003aa0:	e7cc      	b.n	8003a3c <_malloc_r+0x2c>
 8003aa2:	1cc4      	adds	r4, r0, #3
 8003aa4:	f024 0403 	bic.w	r4, r4, #3
 8003aa8:	42a0      	cmp	r0, r4
 8003aaa:	d0e3      	beq.n	8003a74 <_malloc_r+0x64>
 8003aac:	1a21      	subs	r1, r4, r0
 8003aae:	4630      	mov	r0, r6
 8003ab0:	f000 f82e 	bl	8003b10 <_sbrk_r>
 8003ab4:	3001      	adds	r0, #1
 8003ab6:	d1dd      	bne.n	8003a74 <_malloc_r+0x64>
 8003ab8:	e7cf      	b.n	8003a5a <_malloc_r+0x4a>
 8003aba:	bf00      	nop
 8003abc:	200004cc 	.word	0x200004cc
 8003ac0:	200004d0 	.word	0x200004d0

08003ac4 <_realloc_r>:
 8003ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac6:	4607      	mov	r7, r0
 8003ac8:	4614      	mov	r4, r2
 8003aca:	460e      	mov	r6, r1
 8003acc:	b921      	cbnz	r1, 8003ad8 <_realloc_r+0x14>
 8003ace:	4611      	mov	r1, r2
 8003ad0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003ad4:	f7ff bf9c 	b.w	8003a10 <_malloc_r>
 8003ad8:	b922      	cbnz	r2, 8003ae4 <_realloc_r+0x20>
 8003ada:	f7ff ff4d 	bl	8003978 <_free_r>
 8003ade:	4625      	mov	r5, r4
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ae4:	f000 f830 	bl	8003b48 <_malloc_usable_size_r>
 8003ae8:	42a0      	cmp	r0, r4
 8003aea:	d20f      	bcs.n	8003b0c <_realloc_r+0x48>
 8003aec:	4621      	mov	r1, r4
 8003aee:	4638      	mov	r0, r7
 8003af0:	f7ff ff8e 	bl	8003a10 <_malloc_r>
 8003af4:	4605      	mov	r5, r0
 8003af6:	2800      	cmp	r0, #0
 8003af8:	d0f2      	beq.n	8003ae0 <_realloc_r+0x1c>
 8003afa:	4631      	mov	r1, r6
 8003afc:	4622      	mov	r2, r4
 8003afe:	f7ff ff13 	bl	8003928 <memcpy>
 8003b02:	4631      	mov	r1, r6
 8003b04:	4638      	mov	r0, r7
 8003b06:	f7ff ff37 	bl	8003978 <_free_r>
 8003b0a:	e7e9      	b.n	8003ae0 <_realloc_r+0x1c>
 8003b0c:	4635      	mov	r5, r6
 8003b0e:	e7e7      	b.n	8003ae0 <_realloc_r+0x1c>

08003b10 <_sbrk_r>:
 8003b10:	b538      	push	{r3, r4, r5, lr}
 8003b12:	2300      	movs	r3, #0
 8003b14:	4d05      	ldr	r5, [pc, #20]	; (8003b2c <_sbrk_r+0x1c>)
 8003b16:	4604      	mov	r4, r0
 8003b18:	4608      	mov	r0, r1
 8003b1a:	602b      	str	r3, [r5, #0]
 8003b1c:	f7fd f9b6 	bl	8000e8c <_sbrk>
 8003b20:	1c43      	adds	r3, r0, #1
 8003b22:	d102      	bne.n	8003b2a <_sbrk_r+0x1a>
 8003b24:	682b      	ldr	r3, [r5, #0]
 8003b26:	b103      	cbz	r3, 8003b2a <_sbrk_r+0x1a>
 8003b28:	6023      	str	r3, [r4, #0]
 8003b2a:	bd38      	pop	{r3, r4, r5, pc}
 8003b2c:	200005c8 	.word	0x200005c8

08003b30 <__malloc_lock>:
 8003b30:	4801      	ldr	r0, [pc, #4]	; (8003b38 <__malloc_lock+0x8>)
 8003b32:	f000 b811 	b.w	8003b58 <__retarget_lock_acquire_recursive>
 8003b36:	bf00      	nop
 8003b38:	200005d0 	.word	0x200005d0

08003b3c <__malloc_unlock>:
 8003b3c:	4801      	ldr	r0, [pc, #4]	; (8003b44 <__malloc_unlock+0x8>)
 8003b3e:	f000 b80c 	b.w	8003b5a <__retarget_lock_release_recursive>
 8003b42:	bf00      	nop
 8003b44:	200005d0 	.word	0x200005d0

08003b48 <_malloc_usable_size_r>:
 8003b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b4c:	1f18      	subs	r0, r3, #4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	bfbc      	itt	lt
 8003b52:	580b      	ldrlt	r3, [r1, r0]
 8003b54:	18c0      	addlt	r0, r0, r3
 8003b56:	4770      	bx	lr

08003b58 <__retarget_lock_acquire_recursive>:
 8003b58:	4770      	bx	lr

08003b5a <__retarget_lock_release_recursive>:
 8003b5a:	4770      	bx	lr

08003b5c <_init>:
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5e:	bf00      	nop
 8003b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b62:	bc08      	pop	{r3}
 8003b64:	469e      	mov	lr, r3
 8003b66:	4770      	bx	lr

08003b68 <_fini>:
 8003b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6a:	bf00      	nop
 8003b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6e:	bc08      	pop	{r3}
 8003b70:	469e      	mov	lr, r3
 8003b72:	4770      	bx	lr
