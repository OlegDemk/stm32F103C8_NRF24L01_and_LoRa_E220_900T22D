
NRF_and_LoRa_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000828  08003d94  08003d94  00013d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045bc  080045bc  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080045bc  080045bc  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045bc  080045bc  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045bc  080045bc  000145bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045c0  080045c0  000145c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080045c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  20000080  08004644  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  08004644  0002059c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b68a  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cdd  00000000  00000000  0002b733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0002d410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002dda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178a0  00000000  00000000  0002e668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d25d  00000000  00000000  00045f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084b13  00000000  00000000  00053165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d7c78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002acc  00000000  00000000  000d7ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d7c 	.word	0x08003d7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08003d7c 	.word	0x08003d7c

0800014c <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000154:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <DelayMicro+0x3c>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <DelayMicro+0x3c>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4a0b      	ldr	r2, [pc, #44]	; (800018c <DelayMicro+0x40>)
 8000160:	fba2 2303 	umull	r2, r3, r2, r3
 8000164:	0ddb      	lsrs	r3, r3, #23
 8000166:	687a      	ldr	r2, [r7, #4]
 8000168:	fb02 f303 	mul.w	r3, r2, r3
 800016c:	607b      	str	r3, [r7, #4]
	while (micros--);
 800016e:	bf00      	nop
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	1e5a      	subs	r2, r3, #1
 8000174:	607a      	str	r2, [r7, #4]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d1fa      	bne.n	8000170 <DelayMicro+0x24>
}
 800017a:	bf00      	nop
 800017c:	bf00      	nop
 800017e:	3714      	adds	r7, #20
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	20000010 	.word	0x20000010
 800018c:	ffa71ee7 	.word	0xffa71ee7

08000190 <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b086      	sub	sp, #24
 8000194:	af02      	add	r7, sp, #8
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 800019a:	2300      	movs	r3, #0
 800019c:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 800019e:	2200      	movs	r2, #0
 80001a0:	2110      	movs	r1, #16
 80001a2:	4813      	ldr	r0, [pc, #76]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001a4:	f001 fb2d 	bl	8001802 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 80001a8:	f107 020f 	add.w	r2, r7, #15
 80001ac:	1df9      	adds	r1, r7, #7
 80001ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b2:	9300      	str	r3, [sp, #0]
 80001b4:	2301      	movs	r3, #1
 80001b6:	480f      	ldr	r0, [pc, #60]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001b8:	f002 fe6d 	bl	8002e96 <HAL_SPI_TransmitReceive>

  if (addr!=STATUS_NRF)
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	2b07      	cmp	r3, #7
 80001c0:	d00c      	beq.n	80001dc <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 80001c2:	23ff      	movs	r3, #255	; 0xff
 80001c4:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 80001c6:	f107 020f 	add.w	r2, r7, #15
 80001ca:	f107 010e 	add.w	r1, r7, #14
 80001ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d2:	9300      	str	r3, [sp, #0]
 80001d4:	2301      	movs	r3, #1
 80001d6:	4807      	ldr	r0, [pc, #28]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001d8:	f002 fe5d 	bl	8002e96 <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 80001dc:	2201      	movs	r2, #1
 80001de:	2110      	movs	r1, #16
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001e2:	f001 fb0e 	bl	8001802 <HAL_GPIO_WritePin>
  return dt;
 80001e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3710      	adds	r7, #16
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40010800 	.word	0x40010800
 80001f4:	20000530 	.word	0x20000530

080001f8 <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	460a      	mov	r2, r1
 8000202:	71fb      	strb	r3, [r7, #7]
 8000204:	4613      	mov	r3, r2
 8000206:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	f043 0320 	orr.w	r3, r3, #32
 800020e:	b2db      	uxtb	r3, r3
 8000210:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	480d      	ldr	r0, [pc, #52]	; (800024c <NRF24_WriteReg+0x54>)
 8000218:	f001 faf3 	bl	8001802 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800021c:	1df9      	adds	r1, r7, #7
 800021e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000222:	2201      	movs	r2, #1
 8000224:	480a      	ldr	r0, [pc, #40]	; (8000250 <NRF24_WriteReg+0x58>)
 8000226:	f002 fbe9 	bl	80029fc <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 800022a:	1db9      	adds	r1, r7, #6
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	2201      	movs	r2, #1
 8000232:	4807      	ldr	r0, [pc, #28]	; (8000250 <NRF24_WriteReg+0x58>)
 8000234:	f002 fbe2 	bl	80029fc <HAL_SPI_Transmit>
  CS_OFF;
 8000238:	2201      	movs	r2, #1
 800023a:	2110      	movs	r1, #16
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <NRF24_WriteReg+0x54>)
 800023e:	f001 fae0 	bl	8001802 <HAL_GPIO_WritePin>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40010800 	.word	0x40010800
 8000250:	20000530 	.word	0x20000530

08000254 <NRF24_ToggleFeatures>:
//----------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 800025a:	2350      	movs	r3, #80	; 0x50
 800025c:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800025e:	2200      	movs	r2, #0
 8000260:	2110      	movs	r1, #16
 8000262:	480f      	ldr	r0, [pc, #60]	; (80002a0 <NRF24_ToggleFeatures+0x4c>)
 8000264:	f001 facd 	bl	8001802 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000268:	1d39      	adds	r1, r7, #4
 800026a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800026e:	2201      	movs	r2, #1
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <NRF24_ToggleFeatures+0x50>)
 8000272:	f002 fbc3 	bl	80029fc <HAL_SPI_Transmit>
  DelayMicro(1);
 8000276:	2001      	movs	r0, #1
 8000278:	f7ff ff68 	bl	800014c <DelayMicro>
  dt[0] = 0x73;
 800027c:	2373      	movs	r3, #115	; 0x73
 800027e:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000280:	1d39      	adds	r1, r7, #4
 8000282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000286:	2201      	movs	r2, #1
 8000288:	4806      	ldr	r0, [pc, #24]	; (80002a4 <NRF24_ToggleFeatures+0x50>)
 800028a:	f002 fbb7 	bl	80029fc <HAL_SPI_Transmit>
  CS_OFF;
 800028e:	2201      	movs	r2, #1
 8000290:	2110      	movs	r1, #16
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <NRF24_ToggleFeatures+0x4c>)
 8000294:	f001 fab5 	bl	8001802 <HAL_GPIO_WritePin>
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40010800 	.word	0x40010800
 80002a4:	20000530 	.word	0x20000530

080002a8 <NRF24_Read_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	6039      	str	r1, [r7, #0]
 80002b2:	71fb      	strb	r3, [r7, #7]
 80002b4:	4613      	mov	r3, r2
 80002b6:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 80002b8:	2200      	movs	r2, #0
 80002ba:	2110      	movs	r1, #16
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <NRF24_Read_Buf+0x4c>)
 80002be:	f001 faa0 	bl	8001802 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 80002c2:	1df9      	adds	r1, r7, #7
 80002c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c8:	2201      	movs	r2, #1
 80002ca:	480b      	ldr	r0, [pc, #44]	; (80002f8 <NRF24_Read_Buf+0x50>)
 80002cc:	f002 fb96 	bl	80029fc <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 80002d0:	79bb      	ldrb	r3, [r7, #6]
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d8:	6839      	ldr	r1, [r7, #0]
 80002da:	4807      	ldr	r0, [pc, #28]	; (80002f8 <NRF24_Read_Buf+0x50>)
 80002dc:	f002 fcca 	bl	8002c74 <HAL_SPI_Receive>
  CS_OFF;
 80002e0:	2201      	movs	r2, #1
 80002e2:	2110      	movs	r1, #16
 80002e4:	4803      	ldr	r0, [pc, #12]	; (80002f4 <NRF24_Read_Buf+0x4c>)
 80002e6:	f001 fa8c 	bl	8001802 <HAL_GPIO_WritePin>
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40010800 	.word	0x40010800
 80002f8:	20000530 	.word	0x20000530

080002fc <NRF24_Write_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]
 8000308:	4613      	mov	r3, r2
 800030a:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								//Add write bit
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	f043 0320 	orr.w	r3, r3, #32
 8000312:	b2db      	uxtb	r3, r3
 8000314:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000316:	2200      	movs	r2, #0
 8000318:	2110      	movs	r1, #16
 800031a:	480f      	ldr	r0, [pc, #60]	; (8000358 <NRF24_Write_Buf+0x5c>)
 800031c:	f001 fa71 	bl	8001802 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000320:	1df9      	adds	r1, r7, #7
 8000322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000326:	2201      	movs	r2, #1
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <NRF24_Write_Buf+0x60>)
 800032a:	f002 fb67 	bl	80029fc <HAL_SPI_Transmit>
  DelayMicro(1);
 800032e:	2001      	movs	r0, #1
 8000330:	f7ff ff0c 	bl	800014c <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000);			// Send data in buffer
 8000334:	79bb      	ldrb	r3, [r7, #6]
 8000336:	b29a      	uxth	r2, r3
 8000338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033c:	6839      	ldr	r1, [r7, #0]
 800033e:	4807      	ldr	r0, [pc, #28]	; (800035c <NRF24_Write_Buf+0x60>)
 8000340:	f002 fb5c 	bl	80029fc <HAL_SPI_Transmit>
  CS_OFF;
 8000344:	2201      	movs	r2, #1
 8000346:	2110      	movs	r1, #16
 8000348:	4803      	ldr	r0, [pc, #12]	; (8000358 <NRF24_Write_Buf+0x5c>)
 800034a:	f001 fa5a 	bl	8001802 <HAL_GPIO_WritePin>
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010800 	.word	0x40010800
 800035c:	20000530 	.word	0x20000530

08000360 <NRF24_FlushRX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushRX(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 8000366:	23e2      	movs	r3, #226	; 0xe2
 8000368:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800036a:	2200      	movs	r2, #0
 800036c:	2110      	movs	r1, #16
 800036e:	480b      	ldr	r0, [pc, #44]	; (800039c <NRF24_FlushRX+0x3c>)
 8000370:	f001 fa47 	bl	8001802 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000374:	1d39      	adds	r1, r7, #4
 8000376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800037a:	2201      	movs	r2, #1
 800037c:	4808      	ldr	r0, [pc, #32]	; (80003a0 <NRF24_FlushRX+0x40>)
 800037e:	f002 fb3d 	bl	80029fc <HAL_SPI_Transmit>
  DelayMicro(1);
 8000382:	2001      	movs	r0, #1
 8000384:	f7ff fee2 	bl	800014c <DelayMicro>
  CS_OFF;
 8000388:	2201      	movs	r2, #1
 800038a:	2110      	movs	r1, #16
 800038c:	4803      	ldr	r0, [pc, #12]	; (800039c <NRF24_FlushRX+0x3c>)
 800038e:	f001 fa38 	bl	8001802 <HAL_GPIO_WritePin>
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40010800 	.word	0x40010800
 80003a0:	20000530 	.word	0x20000530

080003a4 <NRF24_FlushTX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushTX(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 80003aa:	23e1      	movs	r3, #225	; 0xe1
 80003ac:	713b      	strb	r3, [r7, #4]
  CS_ON;
 80003ae:	2200      	movs	r2, #0
 80003b0:	2110      	movs	r1, #16
 80003b2:	480b      	ldr	r0, [pc, #44]	; (80003e0 <NRF24_FlushTX+0x3c>)
 80003b4:	f001 fa25 	bl	8001802 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 80003b8:	1d39      	adds	r1, r7, #4
 80003ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003be:	2201      	movs	r2, #1
 80003c0:	4808      	ldr	r0, [pc, #32]	; (80003e4 <NRF24_FlushTX+0x40>)
 80003c2:	f002 fb1b 	bl	80029fc <HAL_SPI_Transmit>
  DelayMicro(1);
 80003c6:	2001      	movs	r0, #1
 80003c8:	f7ff fec0 	bl	800014c <DelayMicro>
  CS_OFF;
 80003cc:	2201      	movs	r2, #1
 80003ce:	2110      	movs	r1, #16
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <NRF24_FlushTX+0x3c>)
 80003d2:	f001 fa16 	bl	8001802 <HAL_GPIO_WritePin>
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40010800 	.word	0x40010800
 80003e4:	20000530 	.word	0x20000530

080003e8 <NRF24L01_RX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 80003ee:	2300      	movs	r3, #0
 80003f0:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 80003f2:	2000      	movs	r0, #0
 80003f4:	f7ff fecc 	bl	8000190 <NRF24_ReadReg>
 80003f8:	4603      	mov	r3, r0
 80003fa:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP)|(1<<PRIM_RX);	 // Power up module. Write PWR_UP и PRIM_RX bits
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	f043 0303 	orr.w	r3, r3, #3
 8000402:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	4619      	mov	r1, r3
 8000408:	2000      	movs	r0, #0
 800040a:	f7ff fef5 	bl	80001f8 <NRF24_WriteReg>
  CE_SET;
 800040e:	2201      	movs	r2, #1
 8000410:	2108      	movs	r1, #8
 8000412:	4807      	ldr	r0, [pc, #28]	; (8000430 <NRF24L01_RX_Mode+0x48>)
 8000414:	f001 f9f5 	bl	8001802 <HAL_GPIO_WritePin>
  DelayMicro(150);						 // Delay 130 us
 8000418:	2096      	movs	r0, #150	; 0x96
 800041a:	f7ff fe97 	bl	800014c <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 800041e:	f7ff ff9f 	bl	8000360 <NRF24_FlushRX>
  NRF24_FlushTX();
 8000422:	f7ff ffbf 	bl	80003a4 <NRF24_FlushTX>
}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40010800 	.word	0x40010800

08000434 <NRF24_ini>:
//----------------------------------------------------------------------------------------
void NRF24_ini(void)    // TRANSMITTER
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	CE_RESET;
 8000438:	2200      	movs	r2, #0
 800043a:	2108      	movs	r1, #8
 800043c:	4824      	ldr	r0, [pc, #144]	; (80004d0 <NRF24_ini+0x9c>)
 800043e:	f001 f9e0 	bl	8001802 <HAL_GPIO_WritePin>
	DelayMicro(5000);
 8000442:	f241 3088 	movw	r0, #5000	; 0x1388
 8000446:	f7ff fe81 	bl	800014c <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 800044a:	210a      	movs	r1, #10
 800044c:	2000      	movs	r0, #0
 800044e:	f7ff fed3 	bl	80001f8 <NRF24_WriteReg>

	DelayMicro(5000);
 8000452:	f241 3088 	movw	r0, #5000	; 0x1388
 8000456:	f7ff fe79 	bl	800014c <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable Pipe0
 800045a:	2101      	movs	r1, #1
 800045c:	2001      	movs	r0, #1
 800045e:	f7ff fecb 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe0
 8000462:	2101      	movs	r1, #1
 8000464:	2002      	movs	r0, #2
 8000466:	f7ff fec7 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 800046a:	2101      	movs	r1, #1
 800046c:	2003      	movs	r0, #3
 800046e:	f7ff fec3 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 8000472:	215f      	movs	r1, #95	; 0x5f
 8000474:	2004      	movs	r0, #4
 8000476:	f7ff febf 	bl	80001f8 <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 800047a:	f7ff feeb 	bl	8000254 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 800047e:	2100      	movs	r1, #0
 8000480:	201d      	movs	r0, #29
 8000482:	f7ff feb9 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 8000486:	2100      	movs	r1, #0
 8000488:	201c      	movs	r0, #28
 800048a:	f7ff feb5 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 800048e:	2170      	movs	r1, #112	; 0x70
 8000490:	2007      	movs	r0, #7
 8000492:	f7ff feb1 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 8000496:	214c      	movs	r1, #76	; 0x4c
 8000498:	2005      	movs	r0, #5
 800049a:	f7ff fead 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x26);  		//TX_PWR:0dBm, Datarate:1Mbps 0x06
 800049e:	2126      	movs	r1, #38	; 0x26
 80004a0:	2006      	movs	r0, #6
 80004a2:	f7ff fea9 	bl	80001f8 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);			// Write TX address
 80004a6:	2203      	movs	r2, #3
 80004a8:	490a      	ldr	r1, [pc, #40]	; (80004d4 <NRF24_ini+0xa0>)
 80004aa:	2010      	movs	r0, #16
 80004ac:	f7ff ff26 	bl	80002fc <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);		//
 80004b0:	2203      	movs	r2, #3
 80004b2:	4908      	ldr	r1, [pc, #32]	; (80004d4 <NRF24_ini+0xa0>)
 80004b4:	200a      	movs	r0, #10
 80004b6:	f7ff ff21 	bl	80002fc <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 	//Number of bytes in RX
 80004ba:	210a      	movs	r1, #10
 80004bc:	2011      	movs	r0, #17
 80004be:	f7ff fe9b 	bl	80001f8 <NRF24_WriteReg>

	NRF24L01_RX_Mode();
 80004c2:	f7ff ff91 	bl	80003e8 <NRF24L01_RX_Mode>

	read_config_registers_nrf();
 80004c6:	f000 f807 	bl	80004d8 <read_config_registers_nrf>
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40010800 	.word	0x40010800
 80004d4:	20000000 	.word	0x20000000

080004d8 <read_config_registers_nrf>:
//----------------------------------------------------------------------------------------
// Read config data from nrf registers
void read_config_registers_nrf(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 80004dc:	2001      	movs	r0, #1
 80004de:	f000 feed 	bl	80012bc <HAL_Delay>

	config_array[0] = NRF24_ReadReg(CONFIG);			// 0x0B
 80004e2:	2000      	movs	r0, #0
 80004e4:	f7ff fe54 	bl	8000190 <NRF24_ReadReg>
 80004e8:	4603      	mov	r3, r0
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <read_config_registers_nrf+0x68>)
 80004ee:	701a      	strb	r2, [r3, #0]
	config_array[1] = NRF24_ReadReg(EN_AA);			    // 0x01
 80004f0:	2001      	movs	r0, #1
 80004f2:	f7ff fe4d 	bl	8000190 <NRF24_ReadReg>
 80004f6:	4603      	mov	r3, r0
 80004f8:	461a      	mov	r2, r3
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <read_config_registers_nrf+0x68>)
 80004fc:	705a      	strb	r2, [r3, #1]
	config_array[2] = NRF24_ReadReg(EN_RXADDR); 		// 0x01
 80004fe:	2002      	movs	r0, #2
 8000500:	f7ff fe46 	bl	8000190 <NRF24_ReadReg>
 8000504:	4603      	mov	r3, r0
 8000506:	461a      	mov	r2, r3
 8000508:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <read_config_registers_nrf+0x68>)
 800050a:	709a      	strb	r2, [r3, #2]
	config_array[3] = NRF24_ReadReg(STATUS_NRF);		// 0x0E
 800050c:	2007      	movs	r0, #7
 800050e:	f7ff fe3f 	bl	8000190 <NRF24_ReadReg>
 8000512:	4603      	mov	r3, r0
 8000514:	461a      	mov	r2, r3
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <read_config_registers_nrf+0x68>)
 8000518:	70da      	strb	r2, [r3, #3]
	config_array[4] = NRF24_ReadReg(RF_SETUP);		    // 0x06
 800051a:	2006      	movs	r0, #6
 800051c:	f7ff fe38 	bl	8000190 <NRF24_ReadReg>
 8000520:	4603      	mov	r3, r0
 8000522:	461a      	mov	r2, r3
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <read_config_registers_nrf+0x68>)
 8000526:	711a      	strb	r2, [r3, #4]

	NRF24_Read_Buf(TX_ADDR,buf1,3);
 8000528:	2203      	movs	r2, #3
 800052a:	4906      	ldr	r1, [pc, #24]	; (8000544 <read_config_registers_nrf+0x6c>)
 800052c:	2010      	movs	r0, #16
 800052e:	f7ff febb 	bl	80002a8 <NRF24_Read_Buf>
	NRF24_Read_Buf(RX_ADDR_P0,buf1,3);
 8000532:	2203      	movs	r2, #3
 8000534:	4903      	ldr	r1, [pc, #12]	; (8000544 <read_config_registers_nrf+0x6c>)
 8000536:	200a      	movs	r0, #10
 8000538:	f7ff feb6 	bl	80002a8 <NRF24_Read_Buf>

}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200000b0 	.word	0x200000b0
 8000544:	2000009c 	.word	0x2000009c

08000548 <NRF24L01_TX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 8000550:	2203      	movs	r2, #3
 8000552:	4908      	ldr	r1, [pc, #32]	; (8000574 <NRF24L01_TX_Mode+0x2c>)
 8000554:	2010      	movs	r0, #16
 8000556:	f7ff fed1 	bl	80002fc <NRF24_Write_Buf>
  CE_RESET;
 800055a:	2200      	movs	r2, #0
 800055c:	2108      	movs	r1, #8
 800055e:	4806      	ldr	r0, [pc, #24]	; (8000578 <NRF24L01_TX_Mode+0x30>)
 8000560:	f001 f94f 	bl	8001802 <HAL_GPIO_WritePin>
  // Flush buffers
  NRF24_FlushRX();
 8000564:	f7ff fefc 	bl	8000360 <NRF24_FlushRX>
  NRF24_FlushTX();
 8000568:	f7ff ff1c 	bl	80003a4 <NRF24_FlushTX>
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000000 	.word	0x20000000
 8000578:	40010800 	.word	0x40010800

0800057c <NRF24_Transmit>:
//----------------------------------------------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	6039      	str	r1, [r7, #0]
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	71bb      	strb	r3, [r7, #6]
  CE_RESET;
 800058c:	2200      	movs	r2, #0
 800058e:	2108      	movs	r1, #8
 8000590:	4813      	ldr	r0, [pc, #76]	; (80005e0 <NRF24_Transmit+0x64>)
 8000592:	f001 f936 	bl	8001802 <HAL_GPIO_WritePin>
  CS_ON;
 8000596:	2200      	movs	r2, #0
 8000598:	2110      	movs	r1, #16
 800059a:	4811      	ldr	r0, [pc, #68]	; (80005e0 <NRF24_Transmit+0x64>)
 800059c:	f001 f931 	bl	8001802 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);	//Send address in NRF module
 80005a0:	1df9      	adds	r1, r7, #7
 80005a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a6:	2201      	movs	r2, #1
 80005a8:	480e      	ldr	r0, [pc, #56]	; (80005e4 <NRF24_Transmit+0x68>)
 80005aa:	f002 fa27 	bl	80029fc <HAL_SPI_Transmit>
  DelayMicro(1);
 80005ae:	2001      	movs	r0, #1
 80005b0:	f7ff fdcc 	bl	800014c <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000); //Send buff in NRF module
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005bc:	6839      	ldr	r1, [r7, #0]
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <NRF24_Transmit+0x68>)
 80005c0:	f002 fa1c 	bl	80029fc <HAL_SPI_Transmit>
  CS_OFF;
 80005c4:	2201      	movs	r2, #1
 80005c6:	2110      	movs	r1, #16
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <NRF24_Transmit+0x64>)
 80005ca:	f001 f91a 	bl	8001802 <HAL_GPIO_WritePin>
  CE_SET;
 80005ce:	2201      	movs	r2, #1
 80005d0:	2108      	movs	r1, #8
 80005d2:	4803      	ldr	r0, [pc, #12]	; (80005e0 <NRF24_Transmit+0x64>)
 80005d4:	f001 f915 	bl	8001802 <HAL_GPIO_WritePin>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40010800 	.word	0x40010800
 80005e4:	20000530 	.word	0x20000530

080005e8 <NRF24L01_Send>:
//----------------------------------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint8_t status=0x00, regval=0x00;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
 80005f4:	2300      	movs	r3, #0
 80005f6:	73bb      	strb	r3, [r7, #14]
  NRF24L01_TX_Mode(pBuf);
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff ffa5 	bl	8000548 <NRF24L01_TX_Mode>
  regval = NRF24_ReadReg(CONFIG);
 80005fe:	2000      	movs	r0, #0
 8000600:	f7ff fdc6 	bl	8000190 <NRF24_ReadReg>
 8000604:	4603      	mov	r3, r0
 8000606:	73bb      	strb	r3, [r7, #14]
  // If module in sleep mode, wake up it send PWR_UP and PRIM_RX bits in CONFIG
  regval |= (1<<PWR_UP);			// Set power up
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	f043 0302 	orr.w	r3, r3, #2
 800060e:	73bb      	strb	r3, [r7, #14]
  regval &= ~(1<<PRIM_RX);			// Set TX mode
 8000610:	7bbb      	ldrb	r3, [r7, #14]
 8000612:	f023 0301 	bic.w	r3, r3, #1
 8000616:	73bb      	strb	r3, [r7, #14]
  NRF24_WriteReg(CONFIG,regval);
 8000618:	7bbb      	ldrb	r3, [r7, #14]
 800061a:	4619      	mov	r1, r3
 800061c:	2000      	movs	r0, #0
 800061e:	f7ff fdeb 	bl	80001f8 <NRF24_WriteReg>
  DelayMicro(150); 					// Delay more then 130 us
 8000622:	2096      	movs	r0, #150	; 0x96
 8000624:	f7ff fd92 	bl	800014c <DelayMicro>
  NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);	// Send data
 8000628:	220a      	movs	r2, #10
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	20a0      	movs	r0, #160	; 0xa0
 800062e:	f7ff ffa5 	bl	800057c <NRF24_Transmit>

  CE_SET;
 8000632:	2201      	movs	r2, #1
 8000634:	2108      	movs	r1, #8
 8000636:	481c      	ldr	r0, [pc, #112]	; (80006a8 <NRF24L01_Send+0xc0>)
 8000638:	f001 f8e3 	bl	8001802 <HAL_GPIO_WritePin>
  DelayMicro(15); 					//minimum 10us high pulse (Page 21)
 800063c:	200f      	movs	r0, #15
 800063e:	f7ff fd85 	bl	800014c <DelayMicro>
  CE_RESET;
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	4818      	ldr	r0, [pc, #96]	; (80006a8 <NRF24L01_Send+0xc0>)
 8000648:	f001 f8db 	bl	8001802 <HAL_GPIO_WritePin>

  // Waiting interrupt signal from IRQ
  while((GPIO_PinState)IRQ == GPIO_PIN_SET){}
 800064c:	bf00      	nop
 800064e:	2104      	movs	r1, #4
 8000650:	4815      	ldr	r0, [pc, #84]	; (80006a8 <NRF24L01_Send+0xc0>)
 8000652:	f001 f8bf 	bl	80017d4 <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d0f8      	beq.n	800064e <NRF24L01_Send+0x66>

  status = NRF24_ReadReg(STATUS_NRF);		// Read status sent data to RX
 800065c:	2007      	movs	r0, #7
 800065e:	f7ff fd97 	bl	8000190 <NRF24_ReadReg>
 8000662:	4603      	mov	r3, r0
 8000664:	73fb      	strb	r3, [r7, #15]
  if(status & TX_DS) 	     //TX_DS == 0x20   // When transmitted data was receive, and we take back ACK answer
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	f003 0320 	and.w	r3, r3, #32
 800066c:	2b00      	cmp	r3, #0
 800066e:	d004      	beq.n	800067a <NRF24L01_Send+0x92>
  {
      NRF24_WriteReg(STATUS_NRF, 0x20);
 8000670:	2120      	movs	r1, #32
 8000672:	2007      	movs	r0, #7
 8000674:	f7ff fdc0 	bl	80001f8 <NRF24_WriteReg>
 8000678:	e00a      	b.n	8000690 <NRF24L01_Send+0xa8>
  }
  else if(status & MAX_RT)   //MAX_RT == 0x10  // Retransmeet data flag
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	f003 0310 	and.w	r3, r3, #16
 8000680:	2b00      	cmp	r3, #0
 8000682:	d005      	beq.n	8000690 <NRF24L01_Send+0xa8>
  {
    NRF24_WriteReg(STATUS_NRF, 0x10);
 8000684:	2110      	movs	r1, #16
 8000686:	2007      	movs	r0, #7
 8000688:	f7ff fdb6 	bl	80001f8 <NRF24_WriteReg>
    NRF24_FlushTX();
 800068c:	f7ff fe8a 	bl	80003a4 <NRF24_FlushTX>
  }

  regval = NRF24_ReadReg(OBSERVE_TX);   // Return Count lost packets and count transmitted packets
 8000690:	2008      	movs	r0, #8
 8000692:	f7ff fd7d 	bl	8000190 <NRF24_ReadReg>
 8000696:	4603      	mov	r3, r0
 8000698:	73bb      	strb	r3, [r7, #14]

  // Switch on RX mode
  NRF24L01_RX_Mode();
 800069a:	f7ff fea5 	bl	80003e8 <NRF24L01_RX_Mode>

  return regval;
 800069e:	7bbb      	ldrb	r3, [r7, #14]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40010800 	.word	0x40010800

080006ac <nrf_communication_test>:
//----------------------------------------------------------------------------------------
void nrf_communication_test(void)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b091      	sub	sp, #68	; 0x44
 80006b0:	af00      	add	r7, sp, #0
	NRF24_ini();
 80006b2:	f7ff febf 	bl	8000434 <NRF24_ini>

	// Print config array config_array[0]  (Config registers)
	char ctr[5] = {0};
 80006b6:	2300      	movs	r3, #0
 80006b8:	637b      	str	r3, [r7, #52]	; 0x34
 80006ba:	2300      	movs	r3, #0
 80006bc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	char ctr_buf[5] = {0};
 80006c0:	2300      	movs	r3, #0
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006c4:	2300      	movs	r3, #0
 80006c6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
//
//		memset(ctr_buf, 0, sizeof(ctr_buf));
//		memset(ctr, 0, sizeof(ctr));
//	}

	uint8_t retr_cnt, dt = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
//	uint16_t i=1;
//	uint16_t retr_cnt_full =0;



	int test_data = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c

	while(1)
	{
		// Test transmit data
		sprintf(buf1, "%d", test_data);
 80006d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006d6:	4970      	ldr	r1, [pc, #448]	; (8000898 <nrf_communication_test+0x1ec>)
 80006d8:	4870      	ldr	r0, [pc, #448]	; (800089c <nrf_communication_test+0x1f0>)
 80006da:	f002 fec3 	bl	8003464 <siprintf>

		// Print transmit data
		uint8_t test[25] = {0};
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
 80006f2:	751a      	strb	r2, [r3, #20]
		uint8_t test_i[10] = {0};
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	809a      	strh	r2, [r3, #4]

		ssd1306_SetCursor(0, 16);
 8000702:	2110      	movs	r1, #16
 8000704:	2000      	movs	r0, #0
 8000706:	f000 fab7 	bl	8000c78 <ssd1306_SetCursor>
		strcpy(test, "Data:");
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	4a64      	ldr	r2, [pc, #400]	; (80008a0 <nrf_communication_test+0x1f4>)
 8000710:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000714:	6018      	str	r0, [r3, #0]
 8000716:	3304      	adds	r3, #4
 8000718:	8019      	strh	r1, [r3, #0]
		strcat(test, buf1);
 800071a:	f107 0310 	add.w	r3, r7, #16
 800071e:	495f      	ldr	r1, [pc, #380]	; (800089c <nrf_communication_test+0x1f0>)
 8000720:	4618      	mov	r0, r3
 8000722:	f002 febf 	bl	80034a4 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 8000726:	4a5f      	ldr	r2, [pc, #380]	; (80008a4 <nrf_communication_test+0x1f8>)
 8000728:	f107 0010 	add.w	r0, r7, #16
 800072c:	2301      	movs	r3, #1
 800072e:	ca06      	ldmia	r2, {r1, r2}
 8000730:	f000 fa7c 	bl	8000c2c <ssd1306_WriteString>
		//ssd1306_UpdateScreen();

		dt = NRF24L01_Send(buf1);			// Transmit data
 8000734:	4859      	ldr	r0, [pc, #356]	; (800089c <nrf_communication_test+0x1f0>)
 8000736:	f7ff ff57 	bl	80005e8 <NRF24L01_Send>
 800073a:	4603      	mov	r3, r0
 800073c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		retr_cnt = dt & 0xF;
 8000740:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000744:	f003 030f 	and.w	r3, r3, #15
 8000748:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		retr_cnt_full += retr_cnt;
 800074c:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8000750:	4b55      	ldr	r3, [pc, #340]	; (80008a8 <nrf_communication_test+0x1fc>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4413      	add	r3, r2
 8000756:	4a54      	ldr	r2, [pc, #336]	; (80008a8 <nrf_communication_test+0x1fc>)
 8000758:	6013      	str	r3, [r2, #0]

		// Print transmit counter
		memset(test, 0, sizeof(test));
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	2219      	movs	r2, #25
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f002 fe76 	bl	8003454 <memset>
		memset(test_i, 0, sizeof(test_i));
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	220a      	movs	r2, #10
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f002 fe70 	bl	8003454 <memset>

		ssd1306_SetCursor(0, 26);
 8000774:	211a      	movs	r1, #26
 8000776:	2000      	movs	r0, #0
 8000778:	f000 fa7e 	bl	8000c78 <ssd1306_SetCursor>
		strcpy(test, "Conut trans:");
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	4a4a      	ldr	r2, [pc, #296]	; (80008ac <nrf_communication_test+0x200>)
 8000782:	461c      	mov	r4, r3
 8000784:	4613      	mov	r3, r2
 8000786:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000788:	c407      	stmia	r4!, {r0, r1, r2}
 800078a:	7023      	strb	r3, [r4, #0]
		// number in string
		itoa(i, test_i, 10);
 800078c:	4b48      	ldr	r3, [pc, #288]	; (80008b0 <nrf_communication_test+0x204>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	1d39      	adds	r1, r7, #4
 8000792:	220a      	movs	r2, #10
 8000794:	4618      	mov	r0, r3
 8000796:	f002 fe5b 	bl	8003450 <itoa>
		strcat(test, test_i);
 800079a:	1d3a      	adds	r2, r7, #4
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	4611      	mov	r1, r2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 fe7e 	bl	80034a4 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 80007a8:	4a3e      	ldr	r2, [pc, #248]	; (80008a4 <nrf_communication_test+0x1f8>)
 80007aa:	f107 0010 	add.w	r0, r7, #16
 80007ae:	2301      	movs	r3, #1
 80007b0:	ca06      	ldmia	r2, {r1, r2}
 80007b2:	f000 fa3b 	bl	8000c2c <ssd1306_WriteString>
		//ssd1306_UpdateScreen();

		// Print retransmeet counter
		memset(test, 0, sizeof(test));
 80007b6:	f107 0310 	add.w	r3, r7, #16
 80007ba:	2219      	movs	r2, #25
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f002 fe48 	bl	8003454 <memset>
		memset(test_i, 0, sizeof(test_i));
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	220a      	movs	r2, #10
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f002 fe42 	bl	8003454 <memset>

		ssd1306_SetCursor(0, 36);
 80007d0:	2124      	movs	r1, #36	; 0x24
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 fa50 	bl	8000c78 <ssd1306_SetCursor>
		strcpy(test, "Retransm:");
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4a35      	ldr	r2, [pc, #212]	; (80008b4 <nrf_communication_test+0x208>)
 80007de:	ca07      	ldmia	r2, {r0, r1, r2}
 80007e0:	c303      	stmia	r3!, {r0, r1}
 80007e2:	801a      	strh	r2, [r3, #0]
		itoa(retr_cnt_full, test_i, 10);
 80007e4:	4b30      	ldr	r3, [pc, #192]	; (80008a8 <nrf_communication_test+0x1fc>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	1d39      	adds	r1, r7, #4
 80007ea:	220a      	movs	r2, #10
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 fe2f 	bl	8003450 <itoa>
		strcat(test, test_i);
 80007f2:	1d3a      	adds	r2, r7, #4
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f002 fe52 	bl	80034a4 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 8000800:	4a28      	ldr	r2, [pc, #160]	; (80008a4 <nrf_communication_test+0x1f8>)
 8000802:	f107 0010 	add.w	r0, r7, #16
 8000806:	2301      	movs	r3, #1
 8000808:	ca06      	ldmia	r2, {r1, r2}
 800080a:	f000 fa0f 	bl	8000c2c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800080e:	f000 f8fd 	bl	8000a0c <ssd1306_UpdateScreen>

		// Print lost pacets
		memset(test, 0, sizeof(test));
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	2219      	movs	r2, #25
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f002 fe1a 	bl	8003454 <memset>
		memset(test_i, 0, sizeof(test_i));
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	220a      	movs	r2, #10
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f002 fe14 	bl	8003454 <memset>

		//uint8_t lost = 0;
		cnt_lost = dt >> 4;
 800082c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000830:	091b      	lsrs	r3, r3, #4
 8000832:	b2db      	uxtb	r3, r3
 8000834:	461a      	mov	r2, r3
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <nrf_communication_test+0x20c>)
 8000838:	601a      	str	r2, [r3, #0]

		ssd1306_SetCursor(0, 46);
 800083a:	212e      	movs	r1, #46	; 0x2e
 800083c:	2000      	movs	r0, #0
 800083e:	f000 fa1b 	bl	8000c78 <ssd1306_SetCursor>
		strcpy(test, "Lost:");
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	4a1d      	ldr	r2, [pc, #116]	; (80008bc <nrf_communication_test+0x210>)
 8000848:	e892 0003 	ldmia.w	r2, {r0, r1}
 800084c:	6018      	str	r0, [r3, #0]
 800084e:	3304      	adds	r3, #4
 8000850:	8019      	strh	r1, [r3, #0]
		itoa(cnt_lost, test_i, 10);
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <nrf_communication_test+0x20c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	1d39      	adds	r1, r7, #4
 8000858:	220a      	movs	r2, #10
 800085a:	4618      	mov	r0, r3
 800085c:	f002 fdf8 	bl	8003450 <itoa>
		strcat(test, test_i);
 8000860:	1d3a      	adds	r2, r7, #4
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	4611      	mov	r1, r2
 8000868:	4618      	mov	r0, r3
 800086a:	f002 fe1b 	bl	80034a4 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 800086e:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <nrf_communication_test+0x1f8>)
 8000870:	f107 0010 	add.w	r0, r7, #16
 8000874:	2301      	movs	r3, #1
 8000876:	ca06      	ldmia	r2, {r1, r2}
 8000878:	f000 f9d8 	bl	8000c2c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 800087c:	f000 f8c6 	bl	8000a0c <ssd1306_UpdateScreen>


		//Зробити нормальний лічильник втрачених пакетів
		//cnt_lost_global = cnt_lost_global + cnt_lost;

		test_data++;
 8000880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000882:	3301      	adds	r3, #1
 8000884:	63fb      	str	r3, [r7, #60]	; 0x3c
		i++;
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <nrf_communication_test+0x204>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	3301      	adds	r3, #1
 800088c:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <nrf_communication_test+0x204>)
 800088e:	6013      	str	r3, [r2, #0]

		HAL_Delay(100);
 8000890:	2064      	movs	r0, #100	; 0x64
 8000892:	f000 fd13 	bl	80012bc <HAL_Delay>
	{
 8000896:	e71d      	b.n	80006d4 <nrf_communication_test+0x28>
 8000898:	08003d94 	.word	0x08003d94
 800089c:	2000009c 	.word	0x2000009c
 80008a0:	08003d98 	.word	0x08003d98
 80008a4:	20000008 	.word	0x20000008
 80008a8:	200000c0 	.word	0x200000c0
 80008ac:	08003da0 	.word	0x08003da0
 80008b0:	20000004 	.word	0x20000004
 80008b4:	08003db0 	.word	0x08003db0
 80008b8:	200000c4 	.word	0x200000c4
 80008bc:	08003dbc 	.word	0x08003dbc

080008c0 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af04      	add	r7, sp, #16
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80008ca:	230a      	movs	r3, #10
 80008cc:	9302      	str	r3, [sp, #8]
 80008ce:	2301      	movs	r3, #1
 80008d0:	9301      	str	r3, [sp, #4]
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	2301      	movs	r3, #1
 80008d8:	2200      	movs	r2, #0
 80008da:	2178      	movs	r1, #120	; 0x78
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <ssd1306_WriteCommand+0x2c>)
 80008de:	f001 f8ed 	bl	8001abc <HAL_I2C_Mem_Write>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200004dc 	.word	0x200004dc

080008f0 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 80008f4:	2064      	movs	r0, #100	; 0x64
 80008f6:	f000 fce1 	bl	80012bc <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 80008fa:	20ae      	movs	r0, #174	; 0xae
 80008fc:	f7ff ffe0 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000900:	2020      	movs	r0, #32
 8000902:	f7ff ffdd 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000906:	2010      	movs	r0, #16
 8000908:	f7ff ffda 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800090c:	20b0      	movs	r0, #176	; 0xb0
 800090e:	f7ff ffd7 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000912:	20c8      	movs	r0, #200	; 0xc8
 8000914:	f7ff ffd4 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8000918:	2000      	movs	r0, #0
 800091a:	f7ff ffd1 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800091e:	2010      	movs	r0, #16
 8000920:	f7ff ffce 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8000924:	2040      	movs	r0, #64	; 0x40
 8000926:	f7ff ffcb 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 800092a:	2081      	movs	r0, #129	; 0x81
 800092c:	f7ff ffc8 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8000930:	20ff      	movs	r0, #255	; 0xff
 8000932:	f7ff ffc5 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8000936:	20a1      	movs	r0, #161	; 0xa1
 8000938:	f7ff ffc2 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 800093c:	20a6      	movs	r0, #166	; 0xa6
 800093e:	f7ff ffbf 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8000942:	20a8      	movs	r0, #168	; 0xa8
 8000944:	f7ff ffbc 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8000948:	203f      	movs	r0, #63	; 0x3f
 800094a:	f7ff ffb9 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800094e:	20a4      	movs	r0, #164	; 0xa4
 8000950:	f7ff ffb6 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8000954:	20d3      	movs	r0, #211	; 0xd3
 8000956:	f7ff ffb3 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff ffb0 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000960:	20d5      	movs	r0, #213	; 0xd5
 8000962:	f7ff ffad 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000966:	20f0      	movs	r0, #240	; 0xf0
 8000968:	f7ff ffaa 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800096c:	20d9      	movs	r0, #217	; 0xd9
 800096e:	f7ff ffa7 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8000972:	2022      	movs	r0, #34	; 0x22
 8000974:	f7ff ffa4 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8000978:	20da      	movs	r0, #218	; 0xda
 800097a:	f7ff ffa1 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 800097e:	2012      	movs	r0, #18
 8000980:	f7ff ff9e 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8000984:	20db      	movs	r0, #219	; 0xdb
 8000986:	f7ff ff9b 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800098a:	2020      	movs	r0, #32
 800098c:	f7ff ff98 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000990:	208d      	movs	r0, #141	; 0x8d
 8000992:	f7ff ff95 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8000996:	2014      	movs	r0, #20
 8000998:	f7ff ff92 	bl	80008c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800099c:	20af      	movs	r0, #175	; 0xaf
 800099e:	f7ff ff8f 	bl	80008c0 <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f000 f810 	bl	80009c8 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 80009a8:	f000 f830 	bl	8000a0c <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <ssd1306_Init+0xd4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80009b2:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <ssd1306_Init+0xd4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 80009b8:	4b02      	ldr	r3, [pc, #8]	; (80009c4 <ssd1306_Init+0xd4>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	715a      	strb	r2, [r3, #5]

	return 1;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200004c8 	.word	0x200004c8

080009c8 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	e00d      	b.n	80009f4 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d101      	bne.n	80009e2 <ssd1306_Fill+0x1a>
 80009de:	2100      	movs	r1, #0
 80009e0:	e000      	b.n	80009e4 <ssd1306_Fill+0x1c>
 80009e2:	21ff      	movs	r1, #255	; 0xff
 80009e4:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <ssd1306_Fill+0x40>)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4413      	add	r3, r2
 80009ea:	460a      	mov	r2, r1
 80009ec:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	3301      	adds	r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009fa:	d3ed      	bcc.n	80009d8 <ssd1306_Fill+0x10>
	}
}
 80009fc:	bf00      	nop
 80009fe:	bf00      	nop
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	200000c8 	.word	0x200000c8

08000a0c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8000a12:	2300      	movs	r3, #0
 8000a14:	71fb      	strb	r3, [r7, #7]
 8000a16:	e01d      	b.n	8000a54 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	3b50      	subs	r3, #80	; 0x50
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff4e 	bl	80008c0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff ff4b 	bl	80008c0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8000a2a:	2010      	movs	r0, #16
 8000a2c:	f7ff ff48 	bl	80008c0 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	01db      	lsls	r3, r3, #7
 8000a34:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <ssd1306_UpdateScreen+0x58>)
 8000a36:	4413      	add	r3, r2
 8000a38:	2264      	movs	r2, #100	; 0x64
 8000a3a:	9202      	str	r2, [sp, #8]
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	9201      	str	r2, [sp, #4]
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2301      	movs	r3, #1
 8000a44:	2240      	movs	r2, #64	; 0x40
 8000a46:	2178      	movs	r1, #120	; 0x78
 8000a48:	4807      	ldr	r0, [pc, #28]	; (8000a68 <ssd1306_UpdateScreen+0x5c>)
 8000a4a:	f001 f837 	bl	8001abc <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	3301      	adds	r3, #1
 8000a52:	71fb      	strb	r3, [r7, #7]
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	2b07      	cmp	r3, #7
 8000a58:	d9de      	bls.n	8000a18 <ssd1306_UpdateScreen+0xc>
	}
}
 8000a5a:	bf00      	nop
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200000c8 	.word	0x200000c8
 8000a68:	200004dc 	.word	0x200004dc

08000a6c <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
 8000a76:	460b      	mov	r3, r1
 8000a78:	71bb      	strb	r3, [r7, #6]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	db48      	blt.n	8000b18 <ssd1306_DrawPixel+0xac>
 8000a86:	79bb      	ldrb	r3, [r7, #6]
 8000a88:	2b3f      	cmp	r3, #63	; 0x3f
 8000a8a:	d845      	bhi.n	8000b18 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8000a8c:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <ssd1306_DrawPixel+0xb8>)
 8000a8e:	791b      	ldrb	r3, [r3, #4]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d006      	beq.n	8000aa2 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8000a94:	797b      	ldrb	r3, [r7, #5]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	bf0c      	ite	eq
 8000a9a:	2301      	moveq	r3, #1
 8000a9c:	2300      	movne	r3, #0
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 8000aa2:	797b      	ldrb	r3, [r7, #5]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d11a      	bne.n	8000ade <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000aa8:	79fa      	ldrb	r2, [r7, #7]
 8000aaa:	79bb      	ldrb	r3, [r7, #6]
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	b2d8      	uxtb	r0, r3
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	01db      	lsls	r3, r3, #7
 8000ab4:	4413      	add	r3, r2
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <ssd1306_DrawPixel+0xbc>)
 8000ab8:	5cd3      	ldrb	r3, [r2, r3]
 8000aba:	b25a      	sxtb	r2, r3
 8000abc:	79bb      	ldrb	r3, [r7, #6]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac8:	b25b      	sxtb	r3, r3
 8000aca:	4313      	orrs	r3, r2
 8000acc:	b259      	sxtb	r1, r3
 8000ace:	79fa      	ldrb	r2, [r7, #7]
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	01db      	lsls	r3, r3, #7
 8000ad4:	4413      	add	r3, r2
 8000ad6:	b2c9      	uxtb	r1, r1
 8000ad8:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <ssd1306_DrawPixel+0xbc>)
 8000ada:	54d1      	strb	r1, [r2, r3]
 8000adc:	e01d      	b.n	8000b1a <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000ade:	79fa      	ldrb	r2, [r7, #7]
 8000ae0:	79bb      	ldrb	r3, [r7, #6]
 8000ae2:	08db      	lsrs	r3, r3, #3
 8000ae4:	b2d8      	uxtb	r0, r3
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	01db      	lsls	r3, r3, #7
 8000aea:	4413      	add	r3, r2
 8000aec:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <ssd1306_DrawPixel+0xbc>)
 8000aee:	5cd3      	ldrb	r3, [r2, r3]
 8000af0:	b25a      	sxtb	r2, r3
 8000af2:	79bb      	ldrb	r3, [r7, #6]
 8000af4:	f003 0307 	and.w	r3, r3, #7
 8000af8:	2101      	movs	r1, #1
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	b25b      	sxtb	r3, r3
 8000b00:	43db      	mvns	r3, r3
 8000b02:	b25b      	sxtb	r3, r3
 8000b04:	4013      	ands	r3, r2
 8000b06:	b259      	sxtb	r1, r3
 8000b08:	79fa      	ldrb	r2, [r7, #7]
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	01db      	lsls	r3, r3, #7
 8000b0e:	4413      	add	r3, r2
 8000b10:	b2c9      	uxtb	r1, r1
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <ssd1306_DrawPixel+0xbc>)
 8000b14:	54d1      	strb	r1, [r2, r3]
 8000b16:	e000      	b.n	8000b1a <ssd1306_DrawPixel+0xae>
		return;
 8000b18:	bf00      	nop
	}
}
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	200004c8 	.word	0x200004c8
 8000b28:	200000c8 	.word	0x200000c8

08000b2c <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b089      	sub	sp, #36	; 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4604      	mov	r4, r0
 8000b34:	1d38      	adds	r0, r7, #4
 8000b36:	e880 0006 	stmia.w	r0, {r1, r2}
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4623      	mov	r3, r4
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	4613      	mov	r3, r2
 8000b42:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000b44:	4b38      	ldr	r3, [pc, #224]	; (8000c28 <ssd1306_WriteChar+0xfc>)
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	793b      	ldrb	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b50:	dc06      	bgt.n	8000b60 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000b52:	4b35      	ldr	r3, [pc, #212]	; (8000c28 <ssd1306_WriteChar+0xfc>)
 8000b54:	885b      	ldrh	r3, [r3, #2]
 8000b56:	461a      	mov	r2, r3
 8000b58:	797b      	ldrb	r3, [r7, #5]
 8000b5a:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000b5c:	2b3f      	cmp	r3, #63	; 0x3f
 8000b5e:	dd01      	ble.n	8000b64 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	e05d      	b.n	8000c20 <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
 8000b68:	e04c      	b.n	8000c04 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	3b20      	subs	r3, #32
 8000b70:	7979      	ldrb	r1, [r7, #5]
 8000b72:	fb01 f303 	mul.w	r3, r1, r3
 8000b76:	4619      	mov	r1, r3
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	440b      	add	r3, r1
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	4413      	add	r3, r2
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	61bb      	str	r3, [r7, #24]
 8000b88:	e034      	b.n	8000bf4 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d012      	beq.n	8000bc0 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000b9a:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <ssd1306_WriteChar+0xfc>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4413      	add	r3, r2
 8000ba6:	b2d8      	uxtb	r0, r3
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <ssd1306_WriteChar+0xfc>)
 8000baa:	885b      	ldrh	r3, [r3, #2]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4413      	add	r3, r2
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	7bba      	ldrb	r2, [r7, #14]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f7ff ff57 	bl	8000a6c <ssd1306_DrawPixel>
 8000bbe:	e016      	b.n	8000bee <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <ssd1306_WriteChar+0xfc>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	4413      	add	r3, r2
 8000bcc:	b2d8      	uxtb	r0, r3
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <ssd1306_WriteChar+0xfc>)
 8000bd0:	885b      	ldrh	r3, [r3, #2]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	4413      	add	r3, r2
 8000bda:	b2d9      	uxtb	r1, r3
 8000bdc:	7bbb      	ldrb	r3, [r7, #14]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	bf0c      	ite	eq
 8000be2:	2301      	moveq	r3, #1
 8000be4:	2300      	movne	r3, #0
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	461a      	mov	r2, r3
 8000bea:	f7ff ff3f 	bl	8000a6c <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	61bb      	str	r3, [r7, #24]
 8000bf4:	793b      	ldrb	r3, [r7, #4]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d3c5      	bcc.n	8000b8a <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3301      	adds	r3, #1
 8000c02:	61fb      	str	r3, [r7, #28]
 8000c04:	797b      	ldrb	r3, [r7, #5]
 8000c06:	461a      	mov	r2, r3
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d3ad      	bcc.n	8000b6a <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <ssd1306_WriteChar+0xfc>)
 8000c10:	881a      	ldrh	r2, [r3, #0]
 8000c12:	793b      	ldrb	r3, [r7, #4]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	4413      	add	r3, r2
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <ssd1306_WriteChar+0xfc>)
 8000c1c:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3724      	adds	r7, #36	; 0x24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd90      	pop	{r4, r7, pc}
 8000c28:	200004c8 	.word	0x200004c8

08000c2c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	1d38      	adds	r0, r7, #4
 8000c36:	e880 0006 	stmia.w	r0, {r1, r2}
 8000c3a:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 8000c3c:	e012      	b.n	8000c64 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	7818      	ldrb	r0, [r3, #0]
 8000c42:	78fb      	ldrb	r3, [r7, #3]
 8000c44:	1d3a      	adds	r2, r7, #4
 8000c46:	ca06      	ldmia	r2, {r1, r2}
 8000c48:	f7ff ff70 	bl	8000b2c <ssd1306_WriteChar>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	461a      	mov	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d002      	beq.n	8000c5e <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	e008      	b.n	8000c70 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	3301      	adds	r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1e8      	bne.n	8000c3e <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	460a      	mov	r2, r1
 8000c82:	71fb      	strb	r3, [r7, #7]
 8000c84:	4613      	mov	r3, r2
 8000c86:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <ssd1306_SetCursor+0x2c>)
 8000c8e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000c90:	79bb      	ldrb	r3, [r7, #6]
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <ssd1306_SetCursor+0x2c>)
 8000c96:	805a      	strh	r2, [r3, #2]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	200004c8 	.word	0x200004c8

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cae:	f000 faa3 	bl	80011f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb2:	f000 f82f 	bl	8000d14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb6:	f000 f8d7 	bl	8000e68 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000cba:	f000 f871 	bl	8000da0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000cbe:	f000 f89d 	bl	8000dfc <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  ssd1306_Init();
 8000cc2:	f7ff fe15 	bl	80008f0 <ssd1306_Init>
  ssd1306_Fill(Black);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff fe7e 	bl	80009c8 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8000ccc:	f7ff fe9e 	bl	8000a0c <ssd1306_UpdateScreen>


   // Test write on OLED
   ssd1306_SetCursor(0, 0);
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f7ff ffd0 	bl	8000c78 <ssd1306_SetCursor>
   char test_main[20] = {0};
 8000cd8:	2300      	movs	r3, #0
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	f107 0308 	add.w	r3, r7, #8
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
   strcpy(test_main, "NRF24L01 TX");
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <main+0x64>)
 8000cee:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cf0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   ssd1306_WriteString(test_main,  Font_7x10, White);
 8000cf4:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <main+0x68>)
 8000cf6:	1d38      	adds	r0, r7, #4
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	ca06      	ldmia	r2, {r1, r2}
 8000cfc:	f7ff ff96 	bl	8000c2c <ssd1306_WriteString>
   ssd1306_UpdateScreen();
 8000d00:	f7ff fe84 	bl	8000a0c <ssd1306_UpdateScreen>
  while (1)
  {
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//	  HAL_Delay(300);

	  nrf_communication_test();
 8000d04:	f7ff fcd2 	bl	80006ac <nrf_communication_test>
  {
 8000d08:	e7fc      	b.n	8000d04 <main+0x5c>
 8000d0a:	bf00      	nop
 8000d0c:	08003dc4 	.word	0x08003dc4
 8000d10:	20000008 	.word	0x20000008

08000d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b090      	sub	sp, #64	; 0x40
 8000d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1a:	f107 0318 	add.w	r3, r7, #24
 8000d1e:	2228      	movs	r2, #40	; 0x28
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f002 fb96 	bl	8003454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d36:	2301      	movs	r3, #1
 8000d38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d44:	2301      	movs	r3, #1
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000d52:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000d56:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d58:	f107 0318 	add.w	r3, r7, #24
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f001 f9c3 	bl	80020e8 <HAL_RCC_OscConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d68:	f000 f8fc 	bl	8000f64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d70:	2302      	movs	r3, #2
 8000d72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2102      	movs	r1, #2
 8000d86:	4618      	mov	r0, r3
 8000d88:	f001 fc2e 	bl	80025e8 <HAL_RCC_ClockConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d92:	f000 f8e7 	bl	8000f64 <Error_Handler>
  }
}
 8000d96:	bf00      	nop
 8000d98:	3740      	adds	r7, #64	; 0x40
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000da6:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <MX_I2C1_Init+0x54>)
 8000da8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dac:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <MX_I2C1_Init+0x58>)
 8000dae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dde:	f000 fd29 	bl	8001834 <HAL_I2C_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000de8:	f000 f8bc 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	200004dc 	.word	0x200004dc
 8000df4:	40005400 	.word	0x40005400
 8000df8:	000186a0 	.word	0x000186a0

08000dfc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e02:	4a18      	ldr	r2, [pc, #96]	; (8000e64 <MX_SPI1_Init+0x68>)
 8000e04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e30:	2220      	movs	r2, #32
 8000e32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e40:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e48:	220a      	movs	r2, #10
 8000e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_SPI1_Init+0x64>)
 8000e4e:	f001 fd51 	bl	80028f4 <HAL_SPI_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e58:	f000 f884 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000530 	.word	0x20000530
 8000e64:	40013000 	.word	0x40013000

08000e68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6e:	f107 0310 	add.w	r3, r7, #16
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7c:	4b36      	ldr	r3, [pc, #216]	; (8000f58 <MX_GPIO_Init+0xf0>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a35      	ldr	r2, [pc, #212]	; (8000f58 <MX_GPIO_Init+0xf0>)
 8000e82:	f043 0310 	orr.w	r3, r3, #16
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b33      	ldr	r3, [pc, #204]	; (8000f58 <MX_GPIO_Init+0xf0>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0310 	and.w	r3, r3, #16
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e94:	4b30      	ldr	r3, [pc, #192]	; (8000f58 <MX_GPIO_Init+0xf0>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a2f      	ldr	r2, [pc, #188]	; (8000f58 <MX_GPIO_Init+0xf0>)
 8000e9a:	f043 0320 	orr.w	r3, r3, #32
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b2d      	ldr	r3, [pc, #180]	; (8000f58 <MX_GPIO_Init+0xf0>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0320 	and.w	r3, r3, #32
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <MX_GPIO_Init+0xf0>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a29      	ldr	r2, [pc, #164]	; (8000f58 <MX_GPIO_Init+0xf0>)
 8000eb2:	f043 0304 	orr.w	r3, r3, #4
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <MX_GPIO_Init+0xf0>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <MX_GPIO_Init+0xf0>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a23      	ldr	r2, [pc, #140]	; (8000f58 <MX_GPIO_Init+0xf0>)
 8000eca:	f043 0308 	orr.w	r3, r3, #8
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <MX_GPIO_Init+0xf0>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0308 	and.w	r3, r3, #8
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee2:	481e      	ldr	r0, [pc, #120]	; (8000f5c <MX_GPIO_Init+0xf4>)
 8000ee4:	f000 fc8d 	bl	8001802 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2108      	movs	r1, #8
 8000eec:	481c      	ldr	r0, [pc, #112]	; (8000f60 <MX_GPIO_Init+0xf8>)
 8000eee:	f000 fc88 	bl	8001802 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	481a      	ldr	r0, [pc, #104]	; (8000f60 <MX_GPIO_Init+0xf8>)
 8000ef8:	f000 fc83 	bl	8001802 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000efc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	4619      	mov	r1, r3
 8000f14:	4811      	ldr	r0, [pc, #68]	; (8000f5c <MX_GPIO_Init+0xf4>)
 8000f16:	f000 fad9 	bl	80014cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 0310 	add.w	r3, r7, #16
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	480c      	ldr	r0, [pc, #48]	; (8000f60 <MX_GPIO_Init+0xf8>)
 8000f2e:	f000 facd 	bl	80014cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000f32:	2318      	movs	r3, #24
 8000f34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 0310 	add.w	r3, r7, #16
 8000f46:	4619      	mov	r1, r3
 8000f48:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_GPIO_Init+0xf8>)
 8000f4a:	f000 fabf 	bl	80014cc <HAL_GPIO_Init>

}
 8000f4e:	bf00      	nop
 8000f50:	3720      	adds	r7, #32
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40011000 	.word	0x40011000
 8000f60:	40010800 	.word	0x40010800

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f68:	b672      	cpsid	i
}
 8000f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <Error_Handler+0x8>
	...

08000f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_MspInit+0x5c>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <HAL_MspInit+0x5c>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6193      	str	r3, [r2, #24]
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_MspInit+0x5c>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <HAL_MspInit+0x5c>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <HAL_MspInit+0x5c>)
 8000f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f98:	61d3      	str	r3, [r2, #28]
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <HAL_MspInit+0x5c>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_MspInit+0x60>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <HAL_MspInit+0x60>)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40010000 	.word	0x40010000

08000fd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a15      	ldr	r2, [pc, #84]	; (8001044 <HAL_I2C_MspInit+0x70>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d123      	bne.n	800103c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_I2C_MspInit+0x74>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	4a13      	ldr	r2, [pc, #76]	; (8001048 <HAL_I2C_MspInit+0x74>)
 8000ffa:	f043 0308 	orr.w	r3, r3, #8
 8000ffe:	6193      	str	r3, [r2, #24]
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_I2C_MspInit+0x74>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	f003 0308 	and.w	r3, r3, #8
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800100c:	23c0      	movs	r3, #192	; 0xc0
 800100e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001010:	2312      	movs	r3, #18
 8001012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	4619      	mov	r1, r3
 800101e:	480b      	ldr	r0, [pc, #44]	; (800104c <HAL_I2C_MspInit+0x78>)
 8001020:	f000 fa54 	bl	80014cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_I2C_MspInit+0x74>)
 8001026:	69db      	ldr	r3, [r3, #28]
 8001028:	4a07      	ldr	r2, [pc, #28]	; (8001048 <HAL_I2C_MspInit+0x74>)
 800102a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800102e:	61d3      	str	r3, [r2, #28]
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <HAL_I2C_MspInit+0x74>)
 8001032:	69db      	ldr	r3, [r3, #28]
 8001034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800103c:	bf00      	nop
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40005400 	.word	0x40005400
 8001048:	40021000 	.word	0x40021000
 800104c:	40010c00 	.word	0x40010c00

08001050 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a1b      	ldr	r2, [pc, #108]	; (80010d8 <HAL_SPI_MspInit+0x88>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d12f      	bne.n	80010d0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <HAL_SPI_MspInit+0x8c>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a19      	ldr	r2, [pc, #100]	; (80010dc <HAL_SPI_MspInit+0x8c>)
 8001076:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_SPI_MspInit+0x8c>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <HAL_SPI_MspInit+0x8c>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a13      	ldr	r2, [pc, #76]	; (80010dc <HAL_SPI_MspInit+0x8c>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_SPI_MspInit+0x8c>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010a0:	23a0      	movs	r3, #160	; 0xa0
 80010a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a8:	2303      	movs	r3, #3
 80010aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	4619      	mov	r1, r3
 80010b2:	480b      	ldr	r0, [pc, #44]	; (80010e0 <HAL_SPI_MspInit+0x90>)
 80010b4:	f000 fa0a 	bl	80014cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010b8:	2340      	movs	r3, #64	; 0x40
 80010ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	4619      	mov	r1, r3
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <HAL_SPI_MspInit+0x90>)
 80010cc:	f000 f9fe 	bl	80014cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40013000 	.word	0x40013000
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010800 	.word	0x40010800

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <NMI_Handler+0x4>

080010ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <MemManage_Handler+0x4>

080010f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <UsageFault_Handler+0x4>

08001102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr

0800110e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr

0800111a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112a:	f000 f8ab 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800113c:	4a14      	ldr	r2, [pc, #80]	; (8001190 <_sbrk+0x5c>)
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <_sbrk+0x60>)
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <_sbrk+0x64>)
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <_sbrk+0x68>)
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	429a      	cmp	r2, r3
 8001162:	d207      	bcs.n	8001174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001164:	f002 f932 	bl	80033cc <__errno>
 8001168:	4603      	mov	r3, r0
 800116a:	220c      	movs	r2, #12
 800116c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001172:	e009      	b.n	8001188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <_sbrk+0x64>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <_sbrk+0x64>)
 8001184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20005000 	.word	0x20005000
 8001194:	00000400 	.word	0x00000400
 8001198:	200004d0 	.word	0x200004d0
 800119c:	200005a0 	.word	0x200005a0

080011a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ac:	480c      	ldr	r0, [pc, #48]	; (80011e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ae:	490d      	ldr	r1, [pc, #52]	; (80011e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011b0:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011c4:	4c0a      	ldr	r4, [pc, #40]	; (80011f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011d2:	f7ff ffe5 	bl	80011a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011d6:	f002 f8ff 	bl	80033d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011da:	f7ff fd65 	bl	8000ca8 <main>
  bx lr
 80011de:	4770      	bx	lr
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80011e8:	080045c4 	.word	0x080045c4
  ldr r2, =_sbss
 80011ec:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80011f0:	2000059c 	.word	0x2000059c

080011f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC1_2_IRQHandler>
	...

080011f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HAL_Init+0x28>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_Init+0x28>)
 8001202:	f043 0310 	orr.w	r3, r3, #16
 8001206:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001208:	2003      	movs	r0, #3
 800120a:	f000 f92b 	bl	8001464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120e:	2000      	movs	r0, #0
 8001210:	f000 f808 	bl	8001224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001214:	f7ff feac 	bl	8000f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40022000 	.word	0x40022000

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800122c:	4b12      	ldr	r3, [pc, #72]	; (8001278 <HAL_InitTick+0x54>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0x58>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	fbb3 f3f1 	udiv	r3, r3, r1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f935 	bl	80014b2 <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e00e      	b.n	8001270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d80a      	bhi.n	800126e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001260:	f000 f90b 	bl	800147a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001264:	4a06      	ldr	r2, [pc, #24]	; (8001280 <HAL_InitTick+0x5c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000010 	.word	0x20000010
 800127c:	20000018 	.word	0x20000018
 8001280:	20000014 	.word	0x20000014

08001284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_IncTick+0x1c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <HAL_IncTick+0x20>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a03      	ldr	r2, [pc, #12]	; (80012a4 <HAL_IncTick+0x20>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	20000018 	.word	0x20000018
 80012a4:	20000588 	.word	0x20000588

080012a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b02      	ldr	r3, [pc, #8]	; (80012b8 <HAL_GetTick+0x10>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	20000588 	.word	0x20000588

080012bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff fff0 	bl	80012a8 <HAL_GetTick>
 80012c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012d4:	d005      	beq.n	80012e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_Delay+0x44>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e2:	bf00      	nop
 80012e4:	f7ff ffe0 	bl	80012a8 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d8f7      	bhi.n	80012e4 <HAL_Delay+0x28>
  {
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000018 	.word	0x20000018

08001304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001320:	4013      	ands	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800132c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <__NVIC_GetPriorityGrouping+0x18>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	f003 0307 	and.w	r3, r3, #7
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	2b00      	cmp	r3, #0
 800137a:	db0a      	blt.n	8001392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	490c      	ldr	r1, [pc, #48]	; (80013b4 <__NVIC_SetPriority+0x4c>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	0112      	lsls	r2, r2, #4
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	440b      	add	r3, r1
 800138c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001390:	e00a      	b.n	80013a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4908      	ldr	r1, [pc, #32]	; (80013b8 <__NVIC_SetPriority+0x50>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	3b04      	subs	r3, #4
 80013a0:	0112      	lsls	r2, r2, #4
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	440b      	add	r3, r1
 80013a6:	761a      	strb	r2, [r3, #24]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000e100 	.word	0xe000e100
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	; 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f1c3 0307 	rsb	r3, r3, #7
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	bf28      	it	cs
 80013da:	2304      	movcs	r3, #4
 80013dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3304      	adds	r3, #4
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d902      	bls.n	80013ec <NVIC_EncodePriority+0x30>
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3b03      	subs	r3, #3
 80013ea:	e000      	b.n	80013ee <NVIC_EncodePriority+0x32>
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001404:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	43d9      	mvns	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	4313      	orrs	r3, r2
         );
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001430:	d301      	bcc.n	8001436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001432:	2301      	movs	r3, #1
 8001434:	e00f      	b.n	8001456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <SysTick_Config+0x40>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143e:	210f      	movs	r1, #15
 8001440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001444:	f7ff ff90 	bl	8001368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <SysTick_Config+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <SysTick_Config+0x40>)
 8001450:	2207      	movs	r2, #7
 8001452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	e000e010 	.word	0xe000e010

08001464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff49 	bl	8001304 <__NVIC_SetPriorityGrouping>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800147a:	b580      	push	{r7, lr}
 800147c:	b086      	sub	sp, #24
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800148c:	f7ff ff5e 	bl	800134c <__NVIC_GetPriorityGrouping>
 8001490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f7ff ff90 	bl	80013bc <NVIC_EncodePriority>
 800149c:	4602      	mov	r2, r0
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff5f 	bl	8001368 <__NVIC_SetPriority>
}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ffb0 	bl	8001420 <SysTick_Config>
 80014c0:	4603      	mov	r3, r0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b08b      	sub	sp, #44	; 0x2c
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014de:	e169      	b.n	80017b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014e0:	2201      	movs	r2, #1
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	f040 8158 	bne.w	80017ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4a9a      	ldr	r2, [pc, #616]	; (800176c <HAL_GPIO_Init+0x2a0>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d05e      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 8001508:	4a98      	ldr	r2, [pc, #608]	; (800176c <HAL_GPIO_Init+0x2a0>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d875      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 800150e:	4a98      	ldr	r2, [pc, #608]	; (8001770 <HAL_GPIO_Init+0x2a4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d058      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 8001514:	4a96      	ldr	r2, [pc, #600]	; (8001770 <HAL_GPIO_Init+0x2a4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d86f      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 800151a:	4a96      	ldr	r2, [pc, #600]	; (8001774 <HAL_GPIO_Init+0x2a8>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d052      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 8001520:	4a94      	ldr	r2, [pc, #592]	; (8001774 <HAL_GPIO_Init+0x2a8>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d869      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 8001526:	4a94      	ldr	r2, [pc, #592]	; (8001778 <HAL_GPIO_Init+0x2ac>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d04c      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 800152c:	4a92      	ldr	r2, [pc, #584]	; (8001778 <HAL_GPIO_Init+0x2ac>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d863      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 8001532:	4a92      	ldr	r2, [pc, #584]	; (800177c <HAL_GPIO_Init+0x2b0>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d046      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
 8001538:	4a90      	ldr	r2, [pc, #576]	; (800177c <HAL_GPIO_Init+0x2b0>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d85d      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 800153e:	2b12      	cmp	r3, #18
 8001540:	d82a      	bhi.n	8001598 <HAL_GPIO_Init+0xcc>
 8001542:	2b12      	cmp	r3, #18
 8001544:	d859      	bhi.n	80015fa <HAL_GPIO_Init+0x12e>
 8001546:	a201      	add	r2, pc, #4	; (adr r2, 800154c <HAL_GPIO_Init+0x80>)
 8001548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154c:	080015c7 	.word	0x080015c7
 8001550:	080015a1 	.word	0x080015a1
 8001554:	080015b3 	.word	0x080015b3
 8001558:	080015f5 	.word	0x080015f5
 800155c:	080015fb 	.word	0x080015fb
 8001560:	080015fb 	.word	0x080015fb
 8001564:	080015fb 	.word	0x080015fb
 8001568:	080015fb 	.word	0x080015fb
 800156c:	080015fb 	.word	0x080015fb
 8001570:	080015fb 	.word	0x080015fb
 8001574:	080015fb 	.word	0x080015fb
 8001578:	080015fb 	.word	0x080015fb
 800157c:	080015fb 	.word	0x080015fb
 8001580:	080015fb 	.word	0x080015fb
 8001584:	080015fb 	.word	0x080015fb
 8001588:	080015fb 	.word	0x080015fb
 800158c:	080015fb 	.word	0x080015fb
 8001590:	080015a9 	.word	0x080015a9
 8001594:	080015bd 	.word	0x080015bd
 8001598:	4a79      	ldr	r2, [pc, #484]	; (8001780 <HAL_GPIO_Init+0x2b4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d013      	beq.n	80015c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800159e:	e02c      	b.n	80015fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	623b      	str	r3, [r7, #32]
          break;
 80015a6:	e029      	b.n	80015fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	3304      	adds	r3, #4
 80015ae:	623b      	str	r3, [r7, #32]
          break;
 80015b0:	e024      	b.n	80015fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	3308      	adds	r3, #8
 80015b8:	623b      	str	r3, [r7, #32]
          break;
 80015ba:	e01f      	b.n	80015fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	330c      	adds	r3, #12
 80015c2:	623b      	str	r3, [r7, #32]
          break;
 80015c4:	e01a      	b.n	80015fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d102      	bne.n	80015d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ce:	2304      	movs	r3, #4
 80015d0:	623b      	str	r3, [r7, #32]
          break;
 80015d2:	e013      	b.n	80015fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015dc:	2308      	movs	r3, #8
 80015de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	611a      	str	r2, [r3, #16]
          break;
 80015e6:	e009      	b.n	80015fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e8:	2308      	movs	r3, #8
 80015ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	615a      	str	r2, [r3, #20]
          break;
 80015f2:	e003      	b.n	80015fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
          break;
 80015f8:	e000      	b.n	80015fc <HAL_GPIO_Init+0x130>
          break;
 80015fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2bff      	cmp	r3, #255	; 0xff
 8001600:	d801      	bhi.n	8001606 <HAL_GPIO_Init+0x13a>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	e001      	b.n	800160a <HAL_GPIO_Init+0x13e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3304      	adds	r3, #4
 800160a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2bff      	cmp	r3, #255	; 0xff
 8001610:	d802      	bhi.n	8001618 <HAL_GPIO_Init+0x14c>
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	e002      	b.n	800161e <HAL_GPIO_Init+0x152>
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	3b08      	subs	r3, #8
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	210f      	movs	r1, #15
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	401a      	ands	r2, r3
 8001630:	6a39      	ldr	r1, [r7, #32]
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	431a      	orrs	r2, r3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 80b1 	beq.w	80017ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800164c:	4b4d      	ldr	r3, [pc, #308]	; (8001784 <HAL_GPIO_Init+0x2b8>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	4a4c      	ldr	r2, [pc, #304]	; (8001784 <HAL_GPIO_Init+0x2b8>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6193      	str	r3, [r2, #24]
 8001658:	4b4a      	ldr	r3, [pc, #296]	; (8001784 <HAL_GPIO_Init+0x2b8>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001664:	4a48      	ldr	r2, [pc, #288]	; (8001788 <HAL_GPIO_Init+0x2bc>)
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	3302      	adds	r3, #2
 800166c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001670:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	220f      	movs	r2, #15
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	4013      	ands	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a40      	ldr	r2, [pc, #256]	; (800178c <HAL_GPIO_Init+0x2c0>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d013      	beq.n	80016b8 <HAL_GPIO_Init+0x1ec>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a3f      	ldr	r2, [pc, #252]	; (8001790 <HAL_GPIO_Init+0x2c4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d00d      	beq.n	80016b4 <HAL_GPIO_Init+0x1e8>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a3e      	ldr	r2, [pc, #248]	; (8001794 <HAL_GPIO_Init+0x2c8>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d007      	beq.n	80016b0 <HAL_GPIO_Init+0x1e4>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a3d      	ldr	r2, [pc, #244]	; (8001798 <HAL_GPIO_Init+0x2cc>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d101      	bne.n	80016ac <HAL_GPIO_Init+0x1e0>
 80016a8:	2303      	movs	r3, #3
 80016aa:	e006      	b.n	80016ba <HAL_GPIO_Init+0x1ee>
 80016ac:	2304      	movs	r3, #4
 80016ae:	e004      	b.n	80016ba <HAL_GPIO_Init+0x1ee>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e002      	b.n	80016ba <HAL_GPIO_Init+0x1ee>
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <HAL_GPIO_Init+0x1ee>
 80016b8:	2300      	movs	r3, #0
 80016ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016bc:	f002 0203 	and.w	r2, r2, #3
 80016c0:	0092      	lsls	r2, r2, #2
 80016c2:	4093      	lsls	r3, r2
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ca:	492f      	ldr	r1, [pc, #188]	; (8001788 <HAL_GPIO_Init+0x2bc>)
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	3302      	adds	r3, #2
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d006      	beq.n	80016f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016e4:	4b2d      	ldr	r3, [pc, #180]	; (800179c <HAL_GPIO_Init+0x2d0>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	492c      	ldr	r1, [pc, #176]	; (800179c <HAL_GPIO_Init+0x2d0>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	600b      	str	r3, [r1, #0]
 80016f0:	e006      	b.n	8001700 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016f2:	4b2a      	ldr	r3, [pc, #168]	; (800179c <HAL_GPIO_Init+0x2d0>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	4928      	ldr	r1, [pc, #160]	; (800179c <HAL_GPIO_Init+0x2d0>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d006      	beq.n	800171a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800170c:	4b23      	ldr	r3, [pc, #140]	; (800179c <HAL_GPIO_Init+0x2d0>)
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4922      	ldr	r1, [pc, #136]	; (800179c <HAL_GPIO_Init+0x2d0>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
 8001718:	e006      	b.n	8001728 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800171a:	4b20      	ldr	r3, [pc, #128]	; (800179c <HAL_GPIO_Init+0x2d0>)
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	43db      	mvns	r3, r3
 8001722:	491e      	ldr	r1, [pc, #120]	; (800179c <HAL_GPIO_Init+0x2d0>)
 8001724:	4013      	ands	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d006      	beq.n	8001742 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_GPIO_Init+0x2d0>)
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	4918      	ldr	r1, [pc, #96]	; (800179c <HAL_GPIO_Init+0x2d0>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	608b      	str	r3, [r1, #8]
 8001740:	e006      	b.n	8001750 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001742:	4b16      	ldr	r3, [pc, #88]	; (800179c <HAL_GPIO_Init+0x2d0>)
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	43db      	mvns	r3, r3
 800174a:	4914      	ldr	r1, [pc, #80]	; (800179c <HAL_GPIO_Init+0x2d0>)
 800174c:	4013      	ands	r3, r2
 800174e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d021      	beq.n	80017a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <HAL_GPIO_Init+0x2d0>)
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	490e      	ldr	r1, [pc, #56]	; (800179c <HAL_GPIO_Init+0x2d0>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	60cb      	str	r3, [r1, #12]
 8001768:	e021      	b.n	80017ae <HAL_GPIO_Init+0x2e2>
 800176a:	bf00      	nop
 800176c:	10320000 	.word	0x10320000
 8001770:	10310000 	.word	0x10310000
 8001774:	10220000 	.word	0x10220000
 8001778:	10210000 	.word	0x10210000
 800177c:	10120000 	.word	0x10120000
 8001780:	10110000 	.word	0x10110000
 8001784:	40021000 	.word	0x40021000
 8001788:	40010000 	.word	0x40010000
 800178c:	40010800 	.word	0x40010800
 8001790:	40010c00 	.word	0x40010c00
 8001794:	40011000 	.word	0x40011000
 8001798:	40011400 	.word	0x40011400
 800179c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_GPIO_Init+0x304>)
 80017a2:	68da      	ldr	r2, [r3, #12]
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	4909      	ldr	r1, [pc, #36]	; (80017d0 <HAL_GPIO_Init+0x304>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	3301      	adds	r3, #1
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	fa22 f303 	lsr.w	r3, r2, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f47f ae8e 	bne.w	80014e0 <HAL_GPIO_Init+0x14>
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	372c      	adds	r7, #44	; 0x2c
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr
 80017d0:	40010400 	.word	0x40010400

080017d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	887b      	ldrh	r3, [r7, #2]
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
 80017f0:	e001      	b.n	80017f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	460b      	mov	r3, r1
 800180c:	807b      	strh	r3, [r7, #2]
 800180e:	4613      	mov	r3, r2
 8001810:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001812:	787b      	ldrb	r3, [r7, #1]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001818:	887a      	ldrh	r2, [r7, #2]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800181e:	e003      	b.n	8001828 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001820:	887b      	ldrh	r3, [r7, #2]
 8001822:	041a      	lsls	r2, r3, #16
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	611a      	str	r2, [r3, #16]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
	...

08001834 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e12b      	b.n	8001a9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d106      	bne.n	8001860 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff fbba 	bl	8000fd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2224      	movs	r2, #36	; 0x24
 8001864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0201 	bic.w	r2, r2, #1
 8001876:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001886:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001896:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001898:	f000 fffa 	bl	8002890 <HAL_RCC_GetPCLK1Freq>
 800189c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4a81      	ldr	r2, [pc, #516]	; (8001aa8 <HAL_I2C_Init+0x274>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d807      	bhi.n	80018b8 <HAL_I2C_Init+0x84>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4a80      	ldr	r2, [pc, #512]	; (8001aac <HAL_I2C_Init+0x278>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	bf94      	ite	ls
 80018b0:	2301      	movls	r3, #1
 80018b2:	2300      	movhi	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	e006      	b.n	80018c6 <HAL_I2C_Init+0x92>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4a7d      	ldr	r2, [pc, #500]	; (8001ab0 <HAL_I2C_Init+0x27c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	bf94      	ite	ls
 80018c0:	2301      	movls	r3, #1
 80018c2:	2300      	movhi	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e0e7      	b.n	8001a9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4a78      	ldr	r2, [pc, #480]	; (8001ab4 <HAL_I2C_Init+0x280>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	0c9b      	lsrs	r3, r3, #18
 80018d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68ba      	ldr	r2, [r7, #8]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	4a6a      	ldr	r2, [pc, #424]	; (8001aa8 <HAL_I2C_Init+0x274>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d802      	bhi.n	8001908 <HAL_I2C_Init+0xd4>
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	3301      	adds	r3, #1
 8001906:	e009      	b.n	800191c <HAL_I2C_Init+0xe8>
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800190e:	fb02 f303 	mul.w	r3, r2, r3
 8001912:	4a69      	ldr	r2, [pc, #420]	; (8001ab8 <HAL_I2C_Init+0x284>)
 8001914:	fba2 2303 	umull	r2, r3, r2, r3
 8001918:	099b      	lsrs	r3, r3, #6
 800191a:	3301      	adds	r3, #1
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	430b      	orrs	r3, r1
 8001922:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800192e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	495c      	ldr	r1, [pc, #368]	; (8001aa8 <HAL_I2C_Init+0x274>)
 8001938:	428b      	cmp	r3, r1
 800193a:	d819      	bhi.n	8001970 <HAL_I2C_Init+0x13c>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	1e59      	subs	r1, r3, #1
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	fbb1 f3f3 	udiv	r3, r1, r3
 800194a:	1c59      	adds	r1, r3, #1
 800194c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001950:	400b      	ands	r3, r1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00a      	beq.n	800196c <HAL_I2C_Init+0x138>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1e59      	subs	r1, r3, #1
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	fbb1 f3f3 	udiv	r3, r1, r3
 8001964:	3301      	adds	r3, #1
 8001966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800196a:	e051      	b.n	8001a10 <HAL_I2C_Init+0x1dc>
 800196c:	2304      	movs	r3, #4
 800196e:	e04f      	b.n	8001a10 <HAL_I2C_Init+0x1dc>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d111      	bne.n	800199c <HAL_I2C_Init+0x168>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	1e58      	subs	r0, r3, #1
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6859      	ldr	r1, [r3, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	440b      	add	r3, r1
 8001986:	fbb0 f3f3 	udiv	r3, r0, r3
 800198a:	3301      	adds	r3, #1
 800198c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001990:	2b00      	cmp	r3, #0
 8001992:	bf0c      	ite	eq
 8001994:	2301      	moveq	r3, #1
 8001996:	2300      	movne	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	e012      	b.n	80019c2 <HAL_I2C_Init+0x18e>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1e58      	subs	r0, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6859      	ldr	r1, [r3, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	0099      	lsls	r1, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b2:	3301      	adds	r3, #1
 80019b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf0c      	ite	eq
 80019bc:	2301      	moveq	r3, #1
 80019be:	2300      	movne	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_I2C_Init+0x196>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e022      	b.n	8001a10 <HAL_I2C_Init+0x1dc>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10e      	bne.n	80019f0 <HAL_I2C_Init+0x1bc>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	1e58      	subs	r0, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6859      	ldr	r1, [r3, #4]
 80019da:	460b      	mov	r3, r1
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	440b      	add	r3, r1
 80019e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e4:	3301      	adds	r3, #1
 80019e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ee:	e00f      	b.n	8001a10 <HAL_I2C_Init+0x1dc>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1e58      	subs	r0, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6859      	ldr	r1, [r3, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	0099      	lsls	r1, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a06:	3301      	adds	r3, #1
 8001a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	6809      	ldr	r1, [r1, #0]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69da      	ldr	r2, [r3, #28]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6911      	ldr	r1, [r2, #16]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68d2      	ldr	r2, [r2, #12]
 8001a4a:	4311      	orrs	r1, r2
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	430b      	orrs	r3, r1
 8001a52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	695a      	ldr	r2, [r3, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0201 	orr.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2220      	movs	r2, #32
 8001a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	000186a0 	.word	0x000186a0
 8001aac:	001e847f 	.word	0x001e847f
 8001ab0:	003d08ff 	.word	0x003d08ff
 8001ab4:	431bde83 	.word	0x431bde83
 8001ab8:	10624dd3 	.word	0x10624dd3

08001abc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	4608      	mov	r0, r1
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4603      	mov	r3, r0
 8001acc:	817b      	strh	r3, [r7, #10]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	813b      	strh	r3, [r7, #8]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ad6:	f7ff fbe7 	bl	80012a8 <HAL_GetTick>
 8001ada:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b20      	cmp	r3, #32
 8001ae6:	f040 80d9 	bne.w	8001c9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	2319      	movs	r3, #25
 8001af0:	2201      	movs	r2, #1
 8001af2:	496d      	ldr	r1, [pc, #436]	; (8001ca8 <HAL_I2C_Mem_Write+0x1ec>)
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 f971 	bl	8001ddc <I2C_WaitOnFlagUntilTimeout>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b00:	2302      	movs	r3, #2
 8001b02:	e0cc      	b.n	8001c9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d101      	bne.n	8001b12 <HAL_I2C_Mem_Write+0x56>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e0c5      	b.n	8001c9e <HAL_I2C_Mem_Write+0x1e2>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d007      	beq.n	8001b38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2221      	movs	r2, #33	; 0x21
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2240      	movs	r2, #64	; 0x40
 8001b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6a3a      	ldr	r2, [r7, #32]
 8001b62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4a4d      	ldr	r2, [pc, #308]	; (8001cac <HAL_I2C_Mem_Write+0x1f0>)
 8001b78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b7a:	88f8      	ldrh	r0, [r7, #6]
 8001b7c:	893a      	ldrh	r2, [r7, #8]
 8001b7e:	8979      	ldrh	r1, [r7, #10]
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	4603      	mov	r3, r0
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 f890 	bl	8001cb0 <I2C_RequestMemoryWrite>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d052      	beq.n	8001c3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e081      	b.n	8001c9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 f9f2 	bl	8001f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00d      	beq.n	8001bc6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d107      	bne.n	8001bc2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e06b      	b.n	8001c9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	781a      	ldrb	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	695b      	ldr	r3, [r3, #20]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d11b      	bne.n	8001c3c <HAL_I2C_Mem_Write+0x180>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d017      	beq.n	8001c3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	781a      	ldrb	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c26:	3b01      	subs	r3, #1
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1aa      	bne.n	8001b9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 f9de 	bl	800200a <I2C_WaitOnBTFFlagUntilTimeout>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00d      	beq.n	8001c70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d107      	bne.n	8001c6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e016      	b.n	8001c9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2220      	movs	r2, #32
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e000      	b.n	8001c9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c9c:	2302      	movs	r3, #2
  }
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	00100002 	.word	0x00100002
 8001cac:	ffff0000 	.word	0xffff0000

08001cb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	4608      	mov	r0, r1
 8001cba:	4611      	mov	r1, r2
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	817b      	strh	r3, [r7, #10]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	813b      	strh	r3, [r7, #8]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 f878 	bl	8001ddc <I2C_WaitOnFlagUntilTimeout>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00d      	beq.n	8001d0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d00:	d103      	bne.n	8001d0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e05f      	b.n	8001dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d0e:	897b      	ldrh	r3, [r7, #10]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	6a3a      	ldr	r2, [r7, #32]
 8001d22:	492d      	ldr	r1, [pc, #180]	; (8001dd8 <I2C_RequestMemoryWrite+0x128>)
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f000 f8b0 	bl	8001e8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e04c      	b.n	8001dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4c:	6a39      	ldr	r1, [r7, #32]
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f000 f91a 	bl	8001f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00d      	beq.n	8001d76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d107      	bne.n	8001d72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e02b      	b.n	8001dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d105      	bne.n	8001d88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d7c:	893b      	ldrh	r3, [r7, #8]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	611a      	str	r2, [r3, #16]
 8001d86:	e021      	b.n	8001dcc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d88:	893b      	ldrh	r3, [r7, #8]
 8001d8a:	0a1b      	lsrs	r3, r3, #8
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d98:	6a39      	ldr	r1, [r7, #32]
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f8f4 	bl	8001f88 <I2C_WaitOnTXEFlagUntilTimeout>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00d      	beq.n	8001dc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d107      	bne.n	8001dbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e005      	b.n	8001dce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001dc2:	893b      	ldrh	r3, [r7, #8]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	00010002 	.word	0x00010002

08001ddc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	4613      	mov	r3, r2
 8001dea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dec:	e025      	b.n	8001e3a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001df4:	d021      	beq.n	8001e3a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001df6:	f7ff fa57 	bl	80012a8 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d302      	bcc.n	8001e0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d116      	bne.n	8001e3a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2220      	movs	r2, #32
 8001e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f043 0220 	orr.w	r2, r3, #32
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e023      	b.n	8001e82 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	0c1b      	lsrs	r3, r3, #16
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d10d      	bne.n	8001e60 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	bf0c      	ite	eq
 8001e56:	2301      	moveq	r3, #1
 8001e58:	2300      	movne	r3, #0
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	e00c      	b.n	8001e7a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	43da      	mvns	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	bf0c      	ite	eq
 8001e72:	2301      	moveq	r3, #1
 8001e74:	2300      	movne	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d0b6      	beq.n	8001dee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e98:	e051      	b.n	8001f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea8:	d123      	bne.n	8001ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ec2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2220      	movs	r2, #32
 8001ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f043 0204 	orr.w	r2, r3, #4
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e046      	b.n	8001f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ef8:	d021      	beq.n	8001f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001efa:	f7ff f9d5 	bl	80012a8 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d302      	bcc.n	8001f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d116      	bne.n	8001f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2220      	movs	r2, #32
 8001f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f043 0220 	orr.w	r2, r3, #32
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e020      	b.n	8001f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	0c1b      	lsrs	r3, r3, #16
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d10c      	bne.n	8001f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4013      	ands	r3, r2
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	bf14      	ite	ne
 8001f5a:	2301      	movne	r3, #1
 8001f5c:	2300      	moveq	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	e00b      	b.n	8001f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	43da      	mvns	r2, r3
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bf14      	ite	ne
 8001f74:	2301      	movne	r3, #1
 8001f76:	2300      	moveq	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d18d      	bne.n	8001e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f94:	e02d      	b.n	8001ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 f878 	bl	800208c <I2C_IsAcknowledgeFailed>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e02d      	b.n	8002002 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fac:	d021      	beq.n	8001ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fae:	f7ff f97b 	bl	80012a8 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d302      	bcc.n	8001fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d116      	bne.n	8001ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f043 0220 	orr.w	r2, r3, #32
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e007      	b.n	8002002 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffc:	2b80      	cmp	r3, #128	; 0x80
 8001ffe:	d1ca      	bne.n	8001f96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002016:	e02d      	b.n	8002074 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f837 	bl	800208c <I2C_IsAcknowledgeFailed>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e02d      	b.n	8002084 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800202e:	d021      	beq.n	8002074 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002030:	f7ff f93a 	bl	80012a8 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	429a      	cmp	r2, r3
 800203e:	d302      	bcc.n	8002046 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d116      	bne.n	8002074 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2220      	movs	r2, #32
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	f043 0220 	orr.w	r2, r3, #32
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e007      	b.n	8002084 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b04      	cmp	r3, #4
 8002080:	d1ca      	bne.n	8002018 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a2:	d11b      	bne.n	80020dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2220      	movs	r2, #32
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	f043 0204 	orr.w	r2, r3, #4
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e000      	b.n	80020de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e26c      	b.n	80025d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 8087 	beq.w	8002216 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002108:	4b92      	ldr	r3, [pc, #584]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 030c 	and.w	r3, r3, #12
 8002110:	2b04      	cmp	r3, #4
 8002112:	d00c      	beq.n	800212e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002114:	4b8f      	ldr	r3, [pc, #572]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 030c 	and.w	r3, r3, #12
 800211c:	2b08      	cmp	r3, #8
 800211e:	d112      	bne.n	8002146 <HAL_RCC_OscConfig+0x5e>
 8002120:	4b8c      	ldr	r3, [pc, #560]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800212c:	d10b      	bne.n	8002146 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212e:	4b89      	ldr	r3, [pc, #548]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d06c      	beq.n	8002214 <HAL_RCC_OscConfig+0x12c>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d168      	bne.n	8002214 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e246      	b.n	80025d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800214e:	d106      	bne.n	800215e <HAL_RCC_OscConfig+0x76>
 8002150:	4b80      	ldr	r3, [pc, #512]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a7f      	ldr	r2, [pc, #508]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	e02e      	b.n	80021bc <HAL_RCC_OscConfig+0xd4>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0x98>
 8002166:	4b7b      	ldr	r3, [pc, #492]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a7a      	ldr	r2, [pc, #488]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 800216c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	4b78      	ldr	r3, [pc, #480]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a77      	ldr	r2, [pc, #476]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002178:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	e01d      	b.n	80021bc <HAL_RCC_OscConfig+0xd4>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0xbc>
 800218a:	4b72      	ldr	r3, [pc, #456]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a71      	ldr	r2, [pc, #452]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	4b6f      	ldr	r3, [pc, #444]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a6e      	ldr	r2, [pc, #440]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 800219c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e00b      	b.n	80021bc <HAL_RCC_OscConfig+0xd4>
 80021a4:	4b6b      	ldr	r3, [pc, #428]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a6a      	ldr	r2, [pc, #424]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	4b68      	ldr	r3, [pc, #416]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a67      	ldr	r2, [pc, #412]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d013      	beq.n	80021ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7ff f870 	bl	80012a8 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021cc:	f7ff f86c 	bl	80012a8 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	; 0x64
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e1fa      	b.n	80025d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021de:	4b5d      	ldr	r3, [pc, #372]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0xe4>
 80021ea:	e014      	b.n	8002216 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ec:	f7ff f85c 	bl	80012a8 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f4:	f7ff f858 	bl	80012a8 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b64      	cmp	r3, #100	; 0x64
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e1e6      	b.n	80025d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002206:	4b53      	ldr	r3, [pc, #332]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x10c>
 8002212:	e000      	b.n	8002216 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d063      	beq.n	80022ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002222:	4b4c      	ldr	r3, [pc, #304]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00b      	beq.n	8002246 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800222e:	4b49      	ldr	r3, [pc, #292]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b08      	cmp	r3, #8
 8002238:	d11c      	bne.n	8002274 <HAL_RCC_OscConfig+0x18c>
 800223a:	4b46      	ldr	r3, [pc, #280]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d116      	bne.n	8002274 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002246:	4b43      	ldr	r3, [pc, #268]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <HAL_RCC_OscConfig+0x176>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d001      	beq.n	800225e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e1ba      	b.n	80025d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225e:	4b3d      	ldr	r3, [pc, #244]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4939      	ldr	r1, [pc, #228]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002272:	e03a      	b.n	80022ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d020      	beq.n	80022be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800227c:	4b36      	ldr	r3, [pc, #216]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7ff f811 	bl	80012a8 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228a:	f7ff f80d 	bl	80012a8 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e19b      	b.n	80025d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229c:	4b2d      	ldr	r3, [pc, #180]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a8:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4927      	ldr	r1, [pc, #156]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	600b      	str	r3, [r1, #0]
 80022bc:	e015      	b.n	80022ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022be:	4b26      	ldr	r3, [pc, #152]	; (8002358 <HAL_RCC_OscConfig+0x270>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7fe fff0 	bl	80012a8 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022cc:	f7fe ffec 	bl	80012a8 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e17a      	b.n	80025d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022de:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d03a      	beq.n	800236c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d019      	beq.n	8002332 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fe:	4b17      	ldr	r3, [pc, #92]	; (800235c <HAL_RCC_OscConfig+0x274>)
 8002300:	2201      	movs	r2, #1
 8002302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002304:	f7fe ffd0 	bl	80012a8 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800230c:	f7fe ffcc 	bl	80012a8 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e15a      	b.n	80025d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231e:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <HAL_RCC_OscConfig+0x26c>)
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800232a:	2001      	movs	r0, #1
 800232c:	f000 fac4 	bl	80028b8 <RCC_Delay>
 8002330:	e01c      	b.n	800236c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <HAL_RCC_OscConfig+0x274>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002338:	f7fe ffb6 	bl	80012a8 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800233e:	e00f      	b.n	8002360 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002340:	f7fe ffb2 	bl	80012a8 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d908      	bls.n	8002360 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e140      	b.n	80025d4 <HAL_RCC_OscConfig+0x4ec>
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
 8002358:	42420000 	.word	0x42420000
 800235c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002360:	4b9e      	ldr	r3, [pc, #632]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1e9      	bne.n	8002340 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80a6 	beq.w	80024c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237a:	2300      	movs	r3, #0
 800237c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800237e:	4b97      	ldr	r3, [pc, #604]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10d      	bne.n	80023a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238a:	4b94      	ldr	r3, [pc, #592]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	4a93      	ldr	r2, [pc, #588]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 8002390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002394:	61d3      	str	r3, [r2, #28]
 8002396:	4b91      	ldr	r3, [pc, #580]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a2:	2301      	movs	r3, #1
 80023a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a6:	4b8e      	ldr	r3, [pc, #568]	; (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d118      	bne.n	80023e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023b2:	4b8b      	ldr	r3, [pc, #556]	; (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a8a      	ldr	r2, [pc, #552]	; (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 80023b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023be:	f7fe ff73 	bl	80012a8 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c6:	f7fe ff6f 	bl	80012a8 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b64      	cmp	r3, #100	; 0x64
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e0fd      	b.n	80025d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d8:	4b81      	ldr	r3, [pc, #516]	; (80025e0 <HAL_RCC_OscConfig+0x4f8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d106      	bne.n	80023fa <HAL_RCC_OscConfig+0x312>
 80023ec:	4b7b      	ldr	r3, [pc, #492]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4a7a      	ldr	r2, [pc, #488]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6213      	str	r3, [r2, #32]
 80023f8:	e02d      	b.n	8002456 <HAL_RCC_OscConfig+0x36e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10c      	bne.n	800241c <HAL_RCC_OscConfig+0x334>
 8002402:	4b76      	ldr	r3, [pc, #472]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4a75      	ldr	r2, [pc, #468]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 8002408:	f023 0301 	bic.w	r3, r3, #1
 800240c:	6213      	str	r3, [r2, #32]
 800240e:	4b73      	ldr	r3, [pc, #460]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4a72      	ldr	r2, [pc, #456]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 8002414:	f023 0304 	bic.w	r3, r3, #4
 8002418:	6213      	str	r3, [r2, #32]
 800241a:	e01c      	b.n	8002456 <HAL_RCC_OscConfig+0x36e>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b05      	cmp	r3, #5
 8002422:	d10c      	bne.n	800243e <HAL_RCC_OscConfig+0x356>
 8002424:	4b6d      	ldr	r3, [pc, #436]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	4a6c      	ldr	r2, [pc, #432]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 800242a:	f043 0304 	orr.w	r3, r3, #4
 800242e:	6213      	str	r3, [r2, #32]
 8002430:	4b6a      	ldr	r3, [pc, #424]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4a69      	ldr	r2, [pc, #420]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6213      	str	r3, [r2, #32]
 800243c:	e00b      	b.n	8002456 <HAL_RCC_OscConfig+0x36e>
 800243e:	4b67      	ldr	r3, [pc, #412]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	4a66      	ldr	r2, [pc, #408]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 8002444:	f023 0301 	bic.w	r3, r3, #1
 8002448:	6213      	str	r3, [r2, #32]
 800244a:	4b64      	ldr	r3, [pc, #400]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	4a63      	ldr	r2, [pc, #396]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 8002450:	f023 0304 	bic.w	r3, r3, #4
 8002454:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d015      	beq.n	800248a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245e:	f7fe ff23 	bl	80012a8 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002464:	e00a      	b.n	800247c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002466:	f7fe ff1f 	bl	80012a8 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	f241 3288 	movw	r2, #5000	; 0x1388
 8002474:	4293      	cmp	r3, r2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e0ab      	b.n	80025d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247c:	4b57      	ldr	r3, [pc, #348]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0ee      	beq.n	8002466 <HAL_RCC_OscConfig+0x37e>
 8002488:	e014      	b.n	80024b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248a:	f7fe ff0d 	bl	80012a8 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002492:	f7fe ff09 	bl	80012a8 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e095      	b.n	80025d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a8:	4b4c      	ldr	r3, [pc, #304]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1ee      	bne.n	8002492 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024b4:	7dfb      	ldrb	r3, [r7, #23]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d105      	bne.n	80024c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ba:	4b48      	ldr	r3, [pc, #288]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	4a47      	ldr	r2, [pc, #284]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 80024c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 8081 	beq.w	80025d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d0:	4b42      	ldr	r3, [pc, #264]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 030c 	and.w	r3, r3, #12
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d061      	beq.n	80025a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d146      	bne.n	8002572 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e4:	4b3f      	ldr	r3, [pc, #252]	; (80025e4 <HAL_RCC_OscConfig+0x4fc>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7fe fedd 	bl	80012a8 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f2:	f7fe fed9 	bl	80012a8 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e067      	b.n	80025d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002504:	4b35      	ldr	r3, [pc, #212]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f0      	bne.n	80024f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002518:	d108      	bne.n	800252c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800251a:	4b30      	ldr	r3, [pc, #192]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	492d      	ldr	r1, [pc, #180]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800252c:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a19      	ldr	r1, [r3, #32]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	430b      	orrs	r3, r1
 800253e:	4927      	ldr	r1, [pc, #156]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002544:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <HAL_RCC_OscConfig+0x4fc>)
 8002546:	2201      	movs	r2, #1
 8002548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254a:	f7fe fead 	bl	80012a8 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002552:	f7fe fea9 	bl	80012a8 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e037      	b.n	80025d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002564:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x46a>
 8002570:	e02f      	b.n	80025d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002572:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <HAL_RCC_OscConfig+0x4fc>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7fe fe96 	bl	80012a8 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002580:	f7fe fe92 	bl	80012a8 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e020      	b.n	80025d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002592:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x498>
 800259e:	e018      	b.n	80025d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e013      	b.n	80025d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_RCC_OscConfig+0x4f4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40007000 	.word	0x40007000
 80025e4:	42420060 	.word	0x42420060

080025e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0d0      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025fc:	4b6a      	ldr	r3, [pc, #424]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d910      	bls.n	800262c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	4b67      	ldr	r3, [pc, #412]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 0207 	bic.w	r2, r3, #7
 8002612:	4965      	ldr	r1, [pc, #404]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b63      	ldr	r3, [pc, #396]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0b8      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002644:	4b59      	ldr	r3, [pc, #356]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	4a58      	ldr	r2, [pc, #352]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800264e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800265c:	4b53      	ldr	r3, [pc, #332]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a52      	ldr	r2, [pc, #328]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002666:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002668:	4b50      	ldr	r3, [pc, #320]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	494d      	ldr	r1, [pc, #308]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d040      	beq.n	8002708 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	4b47      	ldr	r3, [pc, #284]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d115      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e07f      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d107      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a6:	4b41      	ldr	r3, [pc, #260]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e073      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b6:	4b3d      	ldr	r3, [pc, #244]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e06b      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c6:	4b39      	ldr	r3, [pc, #228]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f023 0203 	bic.w	r2, r3, #3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4936      	ldr	r1, [pc, #216]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d8:	f7fe fde6 	bl	80012a8 <HAL_GetTick>
 80026dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e0:	f7fe fde2 	bl	80012a8 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e053      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f6:	4b2d      	ldr	r3, [pc, #180]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 020c 	and.w	r2, r3, #12
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	429a      	cmp	r2, r3
 8002706:	d1eb      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002708:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d210      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 0207 	bic.w	r2, r3, #7
 800271e:	4922      	ldr	r1, [pc, #136]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e032      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002744:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4916      	ldr	r1, [pc, #88]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	490e      	ldr	r1, [pc, #56]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	4313      	orrs	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002776:	f000 f821 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 800277a:	4602      	mov	r2, r0
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	490a      	ldr	r1, [pc, #40]	; (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002788:	5ccb      	ldrb	r3, [r1, r3]
 800278a:	fa22 f303 	lsr.w	r3, r2, r3
 800278e:	4a09      	ldr	r2, [pc, #36]	; (80027b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fd44 	bl	8001224 <HAL_InitTick>

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40022000 	.word	0x40022000
 80027ac:	40021000 	.word	0x40021000
 80027b0:	0800454c 	.word	0x0800454c
 80027b4:	20000010 	.word	0x20000010
 80027b8:	20000014 	.word	0x20000014

080027bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027bc:	b490      	push	{r4, r7}
 80027be:	b08a      	sub	sp, #40	; 0x28
 80027c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027c2:	4b2a      	ldr	r3, [pc, #168]	; (800286c <HAL_RCC_GetSysClockFreq+0xb0>)
 80027c4:	1d3c      	adds	r4, r7, #4
 80027c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027cc:	f240 2301 	movw	r3, #513	; 0x201
 80027d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	2300      	movs	r3, #0
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	2300      	movs	r3, #0
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027e6:	4b22      	ldr	r3, [pc, #136]	; (8002870 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d002      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x40>
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d003      	beq.n	8002802 <HAL_RCC_GetSysClockFreq+0x46>
 80027fa:	e02d      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027fc:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027fe:	623b      	str	r3, [r7, #32]
      break;
 8002800:	e02d      	b.n	800285e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	0c9b      	lsrs	r3, r3, #18
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800280e:	4413      	add	r3, r2
 8002810:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002814:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d013      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002820:	4b13      	ldr	r3, [pc, #76]	; (8002870 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	0c5b      	lsrs	r3, r3, #17
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800282e:	4413      	add	r3, r2
 8002830:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002834:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	4a0e      	ldr	r2, [pc, #56]	; (8002874 <HAL_RCC_GetSysClockFreq+0xb8>)
 800283a:	fb02 f203 	mul.w	r2, r2, r3
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	fbb2 f3f3 	udiv	r3, r2, r3
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
 8002846:	e004      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	4a0b      	ldr	r2, [pc, #44]	; (8002878 <HAL_RCC_GetSysClockFreq+0xbc>)
 800284c:	fb02 f303 	mul.w	r3, r2, r3
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	623b      	str	r3, [r7, #32]
      break;
 8002856:	e002      	b.n	800285e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_RCC_GetSysClockFreq+0xb8>)
 800285a:	623b      	str	r3, [r7, #32]
      break;
 800285c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800285e:	6a3b      	ldr	r3, [r7, #32]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3728      	adds	r7, #40	; 0x28
 8002864:	46bd      	mov	sp, r7
 8002866:	bc90      	pop	{r4, r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	08003dd0 	.word	0x08003dd0
 8002870:	40021000 	.word	0x40021000
 8002874:	007a1200 	.word	0x007a1200
 8002878:	003d0900 	.word	0x003d0900

0800287c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002880:	4b02      	ldr	r3, [pc, #8]	; (800288c <HAL_RCC_GetHCLKFreq+0x10>)
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr
 800288c:	20000010 	.word	0x20000010

08002890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002894:	f7ff fff2 	bl	800287c <HAL_RCC_GetHCLKFreq>
 8002898:	4602      	mov	r2, r0
 800289a:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	0a1b      	lsrs	r3, r3, #8
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	4903      	ldr	r1, [pc, #12]	; (80028b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028a6:	5ccb      	ldrb	r3, [r1, r3]
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40021000 	.word	0x40021000
 80028b4:	0800455c 	.word	0x0800455c

080028b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028c0:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <RCC_Delay+0x34>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <RCC_Delay+0x38>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	0a5b      	lsrs	r3, r3, #9
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	fb02 f303 	mul.w	r3, r2, r3
 80028d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028d4:	bf00      	nop
  }
  while (Delay --);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1e5a      	subs	r2, r3, #1
 80028da:	60fa      	str	r2, [r7, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1f9      	bne.n	80028d4 <RCC_Delay+0x1c>
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	20000010 	.word	0x20000010
 80028f0:	10624dd3 	.word	0x10624dd3

080028f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e076      	b.n	80029f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	2b00      	cmp	r3, #0
 800290c:	d108      	bne.n	8002920 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002916:	d009      	beq.n	800292c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	61da      	str	r2, [r3, #28]
 800291e:	e005      	b.n	800292c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe fb82 	bl	8001050 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002962:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b0:	ea42 0103 	orr.w	r1, r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	0c1a      	lsrs	r2, r3, #16
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f002 0204 	and.w	r2, r2, #4
 80029d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	69da      	ldr	r2, [r3, #28]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_SPI_Transmit+0x22>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e126      	b.n	8002c6c <HAL_SPI_Transmit+0x270>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a26:	f7fe fc3f 	bl	80012a8 <HAL_GetTick>
 8002a2a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d002      	beq.n	8002a42 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a40:	e10b      	b.n	8002c5a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <HAL_SPI_Transmit+0x52>
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d102      	bne.n	8002a54 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a52:	e102      	b.n	8002c5a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2203      	movs	r2, #3
 8002a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	88fa      	ldrh	r2, [r7, #6]
 8002a6c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	88fa      	ldrh	r2, [r7, #6]
 8002a72:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a9a:	d10f      	bne.n	8002abc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aaa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002aba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac6:	2b40      	cmp	r3, #64	; 0x40
 8002ac8:	d007      	beq.n	8002ada <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ad8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ae2:	d14b      	bne.n	8002b7c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <HAL_SPI_Transmit+0xf6>
 8002aec:	8afb      	ldrh	r3, [r7, #22]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d13e      	bne.n	8002b70 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	881a      	ldrh	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	1c9a      	adds	r2, r3, #2
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b16:	e02b      	b.n	8002b70 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d112      	bne.n	8002b4c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	881a      	ldrh	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	1c9a      	adds	r2, r3, #2
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b4a:	e011      	b.n	8002b70 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b4c:	f7fe fbac 	bl	80012a8 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d803      	bhi.n	8002b64 <HAL_SPI_Transmit+0x168>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b62:	d102      	bne.n	8002b6a <HAL_SPI_Transmit+0x16e>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d102      	bne.n	8002b70 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b6e:	e074      	b.n	8002c5a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1ce      	bne.n	8002b18 <HAL_SPI_Transmit+0x11c>
 8002b7a:	e04c      	b.n	8002c16 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <HAL_SPI_Transmit+0x18e>
 8002b84:	8afb      	ldrh	r3, [r7, #22]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d140      	bne.n	8002c0c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	330c      	adds	r3, #12
 8002b94:	7812      	ldrb	r2, [r2, #0]
 8002b96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002bb0:	e02c      	b.n	8002c0c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d113      	bne.n	8002be8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	330c      	adds	r3, #12
 8002bca:	7812      	ldrb	r2, [r2, #0]
 8002bcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	86da      	strh	r2, [r3, #54]	; 0x36
 8002be6:	e011      	b.n	8002c0c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002be8:	f7fe fb5e 	bl	80012a8 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d803      	bhi.n	8002c00 <HAL_SPI_Transmit+0x204>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bfe:	d102      	bne.n	8002c06 <HAL_SPI_Transmit+0x20a>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d102      	bne.n	8002c0c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c0a:	e026      	b.n	8002c5a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1cd      	bne.n	8002bb2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	6839      	ldr	r1, [r7, #0]
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 fbb8 	bl	8003390 <SPI_EndRxTxTransaction>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10a      	bne.n	8002c4a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c34:	2300      	movs	r3, #0
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	77fb      	strb	r3, [r7, #31]
 8002c56:	e000      	b.n	8002c5a <HAL_SPI_Transmit+0x25e>
  }

error:
 8002c58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3720      	adds	r7, #32
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	4613      	mov	r3, r2
 8002c82:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c90:	d112      	bne.n	8002cb8 <HAL_SPI_Receive+0x44>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10e      	bne.n	8002cb8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2204      	movs	r2, #4
 8002c9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ca2:	88fa      	ldrh	r2, [r7, #6]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f8f1 	bl	8002e96 <HAL_SPI_TransmitReceive>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	e0ea      	b.n	8002e8e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_SPI_Receive+0x52>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e0e3      	b.n	8002e8e <HAL_SPI_Receive+0x21a>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cce:	f7fe faeb 	bl	80012a8 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d002      	beq.n	8002ce6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ce4:	e0ca      	b.n	8002e7c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <HAL_SPI_Receive+0x7e>
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d102      	bne.n	8002cf8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002cf6:	e0c1      	b.n	8002e7c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	88fa      	ldrh	r2, [r7, #6]
 8002d10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	88fa      	ldrh	r2, [r7, #6]
 8002d16:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d3e:	d10f      	bne.n	8002d60 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d5e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6a:	2b40      	cmp	r3, #64	; 0x40
 8002d6c:	d007      	beq.n	8002d7e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d7c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d162      	bne.n	8002e4c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002d86:	e02e      	b.n	8002de6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d115      	bne.n	8002dc2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f103 020c 	add.w	r2, r3, #12
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da2:	7812      	ldrb	r2, [r2, #0]
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dc0:	e011      	b.n	8002de6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dc2:	f7fe fa71 	bl	80012a8 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d803      	bhi.n	8002dda <HAL_SPI_Receive+0x166>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd8:	d102      	bne.n	8002de0 <HAL_SPI_Receive+0x16c>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d102      	bne.n	8002de6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002de4:	e04a      	b.n	8002e7c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1cb      	bne.n	8002d88 <HAL_SPI_Receive+0x114>
 8002df0:	e031      	b.n	8002e56 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d113      	bne.n	8002e28 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	b292      	uxth	r2, r2
 8002e0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	1c9a      	adds	r2, r3, #2
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e26:	e011      	b.n	8002e4c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e28:	f7fe fa3e 	bl	80012a8 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d803      	bhi.n	8002e40 <HAL_SPI_Receive+0x1cc>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e3e:	d102      	bne.n	8002e46 <HAL_SPI_Receive+0x1d2>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d102      	bne.n	8002e4c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002e4a:	e017      	b.n	8002e7c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1cd      	bne.n	8002df2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	6839      	ldr	r1, [r7, #0]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 fa46 	bl	80032ec <SPI_EndRxTransaction>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	75fb      	strb	r3, [r7, #23]
 8002e78:	e000      	b.n	8002e7c <HAL_SPI_Receive+0x208>
  }

error :
 8002e7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b08c      	sub	sp, #48	; 0x30
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_SPI_TransmitReceive+0x26>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e18a      	b.n	80031d2 <HAL_SPI_TransmitReceive+0x33c>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ec4:	f7fe f9f0 	bl	80012a8 <HAL_GetTick>
 8002ec8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ed0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002eda:	887b      	ldrh	r3, [r7, #2]
 8002edc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ede:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d00f      	beq.n	8002f06 <HAL_SPI_TransmitReceive+0x70>
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eec:	d107      	bne.n	8002efe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d103      	bne.n	8002efe <HAL_SPI_TransmitReceive+0x68>
 8002ef6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d003      	beq.n	8002f06 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002efe:	2302      	movs	r3, #2
 8002f00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f04:	e15b      	b.n	80031be <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_SPI_TransmitReceive+0x82>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_SPI_TransmitReceive+0x82>
 8002f12:	887b      	ldrh	r3, [r7, #2]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d103      	bne.n	8002f20 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f1e:	e14e      	b.n	80031be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d003      	beq.n	8002f34 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2205      	movs	r2, #5
 8002f30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	887a      	ldrh	r2, [r7, #2]
 8002f4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	887a      	ldrh	r2, [r7, #2]
 8002f56:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	887a      	ldrh	r2, [r7, #2]
 8002f5c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f74:	2b40      	cmp	r3, #64	; 0x40
 8002f76:	d007      	beq.n	8002f88 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f90:	d178      	bne.n	8003084 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <HAL_SPI_TransmitReceive+0x10a>
 8002f9a:	8b7b      	ldrh	r3, [r7, #26]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d166      	bne.n	800306e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	881a      	ldrh	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	1c9a      	adds	r2, r3, #2
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fc4:	e053      	b.n	800306e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d11b      	bne.n	800300c <HAL_SPI_TransmitReceive+0x176>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d016      	beq.n	800300c <HAL_SPI_TransmitReceive+0x176>
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d113      	bne.n	800300c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	881a      	ldrh	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	1c9a      	adds	r2, r3, #2
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b01      	cmp	r3, #1
 8003018:	d119      	bne.n	800304e <HAL_SPI_TransmitReceive+0x1b8>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d014      	beq.n	800304e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	b292      	uxth	r2, r2
 8003030:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003036:	1c9a      	adds	r2, r3, #2
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003040:	b29b      	uxth	r3, r3
 8003042:	3b01      	subs	r3, #1
 8003044:	b29a      	uxth	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800304a:	2301      	movs	r3, #1
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800304e:	f7fe f92b 	bl	80012a8 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800305a:	429a      	cmp	r2, r3
 800305c:	d807      	bhi.n	800306e <HAL_SPI_TransmitReceive+0x1d8>
 800305e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003064:	d003      	beq.n	800306e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800306c:	e0a7      	b.n	80031be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003072:	b29b      	uxth	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1a6      	bne.n	8002fc6 <HAL_SPI_TransmitReceive+0x130>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1a1      	bne.n	8002fc6 <HAL_SPI_TransmitReceive+0x130>
 8003082:	e07c      	b.n	800317e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <HAL_SPI_TransmitReceive+0x1fc>
 800308c:	8b7b      	ldrh	r3, [r7, #26]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d16b      	bne.n	800316a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	330c      	adds	r3, #12
 800309c:	7812      	ldrb	r2, [r2, #0]
 800309e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030b8:	e057      	b.n	800316a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d11c      	bne.n	8003102 <HAL_SPI_TransmitReceive+0x26c>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d017      	beq.n	8003102 <HAL_SPI_TransmitReceive+0x26c>
 80030d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d114      	bne.n	8003102 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	330c      	adds	r3, #12
 80030e2:	7812      	ldrb	r2, [r2, #0]
 80030e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b01      	cmp	r3, #1
 800310e:	d119      	bne.n	8003144 <HAL_SPI_TransmitReceive+0x2ae>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d014      	beq.n	8003144 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003140:	2301      	movs	r3, #1
 8003142:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003144:	f7fe f8b0 	bl	80012a8 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003150:	429a      	cmp	r2, r3
 8003152:	d803      	bhi.n	800315c <HAL_SPI_TransmitReceive+0x2c6>
 8003154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800315a:	d102      	bne.n	8003162 <HAL_SPI_TransmitReceive+0x2cc>
 800315c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315e:	2b00      	cmp	r3, #0
 8003160:	d103      	bne.n	800316a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003168:	e029      	b.n	80031be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1a2      	bne.n	80030ba <HAL_SPI_TransmitReceive+0x224>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d19d      	bne.n	80030ba <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800317e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003180:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f904 	bl	8003390 <SPI_EndRxTxTransaction>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d006      	beq.n	800319c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800319a:	e010      	b.n	80031be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10b      	bne.n	80031bc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	e000      	b.n	80031be <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80031bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3730      	adds	r7, #48	; 0x30
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031ec:	f7fe f85c 	bl	80012a8 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	4413      	add	r3, r2
 80031fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031fc:	f7fe f854 	bl	80012a8 <HAL_GetTick>
 8003200:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003202:	4b39      	ldr	r3, [pc, #228]	; (80032e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	015b      	lsls	r3, r3, #5
 8003208:	0d1b      	lsrs	r3, r3, #20
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	fb02 f303 	mul.w	r3, r2, r3
 8003210:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003212:	e054      	b.n	80032be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800321a:	d050      	beq.n	80032be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800321c:	f7fe f844 	bl	80012a8 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	69fa      	ldr	r2, [r7, #28]
 8003228:	429a      	cmp	r2, r3
 800322a:	d902      	bls.n	8003232 <SPI_WaitFlagStateUntilTimeout+0x56>
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d13d      	bne.n	80032ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003240:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800324a:	d111      	bne.n	8003270 <SPI_WaitFlagStateUntilTimeout+0x94>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003254:	d004      	beq.n	8003260 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800325e:	d107      	bne.n	8003270 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800326e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003278:	d10f      	bne.n	800329a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003298:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e017      	b.n	80032de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4013      	ands	r3, r2
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	bf0c      	ite	eq
 80032ce:	2301      	moveq	r3, #1
 80032d0:	2300      	movne	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d19b      	bne.n	8003214 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3720      	adds	r7, #32
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20000010 	.word	0x20000010

080032ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003300:	d111      	bne.n	8003326 <SPI_EndRxTransaction+0x3a>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800330a:	d004      	beq.n	8003316 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003314:	d107      	bne.n	8003326 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003324:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800332e:	d117      	bne.n	8003360 <SPI_EndRxTransaction+0x74>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003338:	d112      	bne.n	8003360 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2200      	movs	r2, #0
 8003342:	2101      	movs	r1, #1
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f7ff ff49 	bl	80031dc <SPI_WaitFlagStateUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01a      	beq.n	8003386 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e013      	b.n	8003388 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2200      	movs	r2, #0
 8003368:	2180      	movs	r1, #128	; 0x80
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f7ff ff36 	bl	80031dc <SPI_WaitFlagStateUntilTimeout>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d007      	beq.n	8003386 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337a:	f043 0220 	orr.w	r2, r3, #32
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e000      	b.n	8003388 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2200      	movs	r2, #0
 80033a4:	2180      	movs	r1, #128	; 0x80
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f7ff ff18 	bl	80031dc <SPI_WaitFlagStateUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d007      	beq.n	80033c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	f043 0220 	orr.w	r2, r3, #32
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e000      	b.n	80033c4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <__errno>:
 80033cc:	4b01      	ldr	r3, [pc, #4]	; (80033d4 <__errno+0x8>)
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	2000001c 	.word	0x2000001c

080033d8 <__libc_init_array>:
 80033d8:	b570      	push	{r4, r5, r6, lr}
 80033da:	2600      	movs	r6, #0
 80033dc:	4d0c      	ldr	r5, [pc, #48]	; (8003410 <__libc_init_array+0x38>)
 80033de:	4c0d      	ldr	r4, [pc, #52]	; (8003414 <__libc_init_array+0x3c>)
 80033e0:	1b64      	subs	r4, r4, r5
 80033e2:	10a4      	asrs	r4, r4, #2
 80033e4:	42a6      	cmp	r6, r4
 80033e6:	d109      	bne.n	80033fc <__libc_init_array+0x24>
 80033e8:	f000 fcc8 	bl	8003d7c <_init>
 80033ec:	2600      	movs	r6, #0
 80033ee:	4d0a      	ldr	r5, [pc, #40]	; (8003418 <__libc_init_array+0x40>)
 80033f0:	4c0a      	ldr	r4, [pc, #40]	; (800341c <__libc_init_array+0x44>)
 80033f2:	1b64      	subs	r4, r4, r5
 80033f4:	10a4      	asrs	r4, r4, #2
 80033f6:	42a6      	cmp	r6, r4
 80033f8:	d105      	bne.n	8003406 <__libc_init_array+0x2e>
 80033fa:	bd70      	pop	{r4, r5, r6, pc}
 80033fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003400:	4798      	blx	r3
 8003402:	3601      	adds	r6, #1
 8003404:	e7ee      	b.n	80033e4 <__libc_init_array+0xc>
 8003406:	f855 3b04 	ldr.w	r3, [r5], #4
 800340a:	4798      	blx	r3
 800340c:	3601      	adds	r6, #1
 800340e:	e7f2      	b.n	80033f6 <__libc_init_array+0x1e>
 8003410:	080045bc 	.word	0x080045bc
 8003414:	080045bc 	.word	0x080045bc
 8003418:	080045bc 	.word	0x080045bc
 800341c:	080045c0 	.word	0x080045c0

08003420 <__itoa>:
 8003420:	1e93      	subs	r3, r2, #2
 8003422:	2b22      	cmp	r3, #34	; 0x22
 8003424:	b510      	push	{r4, lr}
 8003426:	460c      	mov	r4, r1
 8003428:	d904      	bls.n	8003434 <__itoa+0x14>
 800342a:	2300      	movs	r3, #0
 800342c:	461c      	mov	r4, r3
 800342e:	700b      	strb	r3, [r1, #0]
 8003430:	4620      	mov	r0, r4
 8003432:	bd10      	pop	{r4, pc}
 8003434:	2a0a      	cmp	r2, #10
 8003436:	d109      	bne.n	800344c <__itoa+0x2c>
 8003438:	2800      	cmp	r0, #0
 800343a:	da07      	bge.n	800344c <__itoa+0x2c>
 800343c:	232d      	movs	r3, #45	; 0x2d
 800343e:	700b      	strb	r3, [r1, #0]
 8003440:	2101      	movs	r1, #1
 8003442:	4240      	negs	r0, r0
 8003444:	4421      	add	r1, r4
 8003446:	f000 f83d 	bl	80034c4 <__utoa>
 800344a:	e7f1      	b.n	8003430 <__itoa+0x10>
 800344c:	2100      	movs	r1, #0
 800344e:	e7f9      	b.n	8003444 <__itoa+0x24>

08003450 <itoa>:
 8003450:	f7ff bfe6 	b.w	8003420 <__itoa>

08003454 <memset>:
 8003454:	4603      	mov	r3, r0
 8003456:	4402      	add	r2, r0
 8003458:	4293      	cmp	r3, r2
 800345a:	d100      	bne.n	800345e <memset+0xa>
 800345c:	4770      	bx	lr
 800345e:	f803 1b01 	strb.w	r1, [r3], #1
 8003462:	e7f9      	b.n	8003458 <memset+0x4>

08003464 <siprintf>:
 8003464:	b40e      	push	{r1, r2, r3}
 8003466:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800346a:	b500      	push	{lr}
 800346c:	b09c      	sub	sp, #112	; 0x70
 800346e:	ab1d      	add	r3, sp, #116	; 0x74
 8003470:	9002      	str	r0, [sp, #8]
 8003472:	9006      	str	r0, [sp, #24]
 8003474:	9107      	str	r1, [sp, #28]
 8003476:	9104      	str	r1, [sp, #16]
 8003478:	4808      	ldr	r0, [pc, #32]	; (800349c <siprintf+0x38>)
 800347a:	4909      	ldr	r1, [pc, #36]	; (80034a0 <siprintf+0x3c>)
 800347c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003480:	9105      	str	r1, [sp, #20]
 8003482:	6800      	ldr	r0, [r0, #0]
 8003484:	a902      	add	r1, sp, #8
 8003486:	9301      	str	r3, [sp, #4]
 8003488:	f000 f8ba 	bl	8003600 <_svfiprintf_r>
 800348c:	2200      	movs	r2, #0
 800348e:	9b02      	ldr	r3, [sp, #8]
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	b01c      	add	sp, #112	; 0x70
 8003494:	f85d eb04 	ldr.w	lr, [sp], #4
 8003498:	b003      	add	sp, #12
 800349a:	4770      	bx	lr
 800349c:	2000001c 	.word	0x2000001c
 80034a0:	ffff0208 	.word	0xffff0208

080034a4 <strcat>:
 80034a4:	4602      	mov	r2, r0
 80034a6:	b510      	push	{r4, lr}
 80034a8:	7814      	ldrb	r4, [r2, #0]
 80034aa:	4613      	mov	r3, r2
 80034ac:	3201      	adds	r2, #1
 80034ae:	2c00      	cmp	r4, #0
 80034b0:	d1fa      	bne.n	80034a8 <strcat+0x4>
 80034b2:	3b01      	subs	r3, #1
 80034b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80034bc:	2a00      	cmp	r2, #0
 80034be:	d1f9      	bne.n	80034b4 <strcat+0x10>
 80034c0:	bd10      	pop	{r4, pc}
	...

080034c4 <__utoa>:
 80034c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034c6:	b08b      	sub	sp, #44	; 0x2c
 80034c8:	4605      	mov	r5, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	466e      	mov	r6, sp
 80034ce:	4c1d      	ldr	r4, [pc, #116]	; (8003544 <__utoa+0x80>)
 80034d0:	f104 0c20 	add.w	ip, r4, #32
 80034d4:	4637      	mov	r7, r6
 80034d6:	6820      	ldr	r0, [r4, #0]
 80034d8:	6861      	ldr	r1, [r4, #4]
 80034da:	3408      	adds	r4, #8
 80034dc:	c703      	stmia	r7!, {r0, r1}
 80034de:	4564      	cmp	r4, ip
 80034e0:	463e      	mov	r6, r7
 80034e2:	d1f7      	bne.n	80034d4 <__utoa+0x10>
 80034e4:	7921      	ldrb	r1, [r4, #4]
 80034e6:	6820      	ldr	r0, [r4, #0]
 80034e8:	7139      	strb	r1, [r7, #4]
 80034ea:	1e91      	subs	r1, r2, #2
 80034ec:	2922      	cmp	r1, #34	; 0x22
 80034ee:	6038      	str	r0, [r7, #0]
 80034f0:	f04f 0100 	mov.w	r1, #0
 80034f4:	d904      	bls.n	8003500 <__utoa+0x3c>
 80034f6:	7019      	strb	r1, [r3, #0]
 80034f8:	460b      	mov	r3, r1
 80034fa:	4618      	mov	r0, r3
 80034fc:	b00b      	add	sp, #44	; 0x2c
 80034fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003500:	1e58      	subs	r0, r3, #1
 8003502:	4684      	mov	ip, r0
 8003504:	fbb5 f7f2 	udiv	r7, r5, r2
 8003508:	fb02 5617 	mls	r6, r2, r7, r5
 800350c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8003510:	4476      	add	r6, lr
 8003512:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003516:	460c      	mov	r4, r1
 8003518:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800351c:	462e      	mov	r6, r5
 800351e:	42b2      	cmp	r2, r6
 8003520:	463d      	mov	r5, r7
 8003522:	f101 0101 	add.w	r1, r1, #1
 8003526:	d9ed      	bls.n	8003504 <__utoa+0x40>
 8003528:	2200      	movs	r2, #0
 800352a:	545a      	strb	r2, [r3, r1]
 800352c:	1919      	adds	r1, r3, r4
 800352e:	1aa5      	subs	r5, r4, r2
 8003530:	42aa      	cmp	r2, r5
 8003532:	dae2      	bge.n	80034fa <__utoa+0x36>
 8003534:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003538:	780e      	ldrb	r6, [r1, #0]
 800353a:	3201      	adds	r2, #1
 800353c:	7006      	strb	r6, [r0, #0]
 800353e:	f801 5901 	strb.w	r5, [r1], #-1
 8003542:	e7f4      	b.n	800352e <__utoa+0x6a>
 8003544:	08004564 	.word	0x08004564

08003548 <__ssputs_r>:
 8003548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800354c:	688e      	ldr	r6, [r1, #8]
 800354e:	4682      	mov	sl, r0
 8003550:	429e      	cmp	r6, r3
 8003552:	460c      	mov	r4, r1
 8003554:	4690      	mov	r8, r2
 8003556:	461f      	mov	r7, r3
 8003558:	d838      	bhi.n	80035cc <__ssputs_r+0x84>
 800355a:	898a      	ldrh	r2, [r1, #12]
 800355c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003560:	d032      	beq.n	80035c8 <__ssputs_r+0x80>
 8003562:	6825      	ldr	r5, [r4, #0]
 8003564:	6909      	ldr	r1, [r1, #16]
 8003566:	3301      	adds	r3, #1
 8003568:	eba5 0901 	sub.w	r9, r5, r1
 800356c:	6965      	ldr	r5, [r4, #20]
 800356e:	444b      	add	r3, r9
 8003570:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003574:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003578:	106d      	asrs	r5, r5, #1
 800357a:	429d      	cmp	r5, r3
 800357c:	bf38      	it	cc
 800357e:	461d      	movcc	r5, r3
 8003580:	0553      	lsls	r3, r2, #21
 8003582:	d531      	bpl.n	80035e8 <__ssputs_r+0xa0>
 8003584:	4629      	mov	r1, r5
 8003586:	f000 fb53 	bl	8003c30 <_malloc_r>
 800358a:	4606      	mov	r6, r0
 800358c:	b950      	cbnz	r0, 80035a4 <__ssputs_r+0x5c>
 800358e:	230c      	movs	r3, #12
 8003590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003594:	f8ca 3000 	str.w	r3, [sl]
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800359e:	81a3      	strh	r3, [r4, #12]
 80035a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035a4:	464a      	mov	r2, r9
 80035a6:	6921      	ldr	r1, [r4, #16]
 80035a8:	f000 face 	bl	8003b48 <memcpy>
 80035ac:	89a3      	ldrh	r3, [r4, #12]
 80035ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b6:	81a3      	strh	r3, [r4, #12]
 80035b8:	6126      	str	r6, [r4, #16]
 80035ba:	444e      	add	r6, r9
 80035bc:	6026      	str	r6, [r4, #0]
 80035be:	463e      	mov	r6, r7
 80035c0:	6165      	str	r5, [r4, #20]
 80035c2:	eba5 0509 	sub.w	r5, r5, r9
 80035c6:	60a5      	str	r5, [r4, #8]
 80035c8:	42be      	cmp	r6, r7
 80035ca:	d900      	bls.n	80035ce <__ssputs_r+0x86>
 80035cc:	463e      	mov	r6, r7
 80035ce:	4632      	mov	r2, r6
 80035d0:	4641      	mov	r1, r8
 80035d2:	6820      	ldr	r0, [r4, #0]
 80035d4:	f000 fac6 	bl	8003b64 <memmove>
 80035d8:	68a3      	ldr	r3, [r4, #8]
 80035da:	6822      	ldr	r2, [r4, #0]
 80035dc:	1b9b      	subs	r3, r3, r6
 80035de:	4432      	add	r2, r6
 80035e0:	2000      	movs	r0, #0
 80035e2:	60a3      	str	r3, [r4, #8]
 80035e4:	6022      	str	r2, [r4, #0]
 80035e6:	e7db      	b.n	80035a0 <__ssputs_r+0x58>
 80035e8:	462a      	mov	r2, r5
 80035ea:	f000 fb7b 	bl	8003ce4 <_realloc_r>
 80035ee:	4606      	mov	r6, r0
 80035f0:	2800      	cmp	r0, #0
 80035f2:	d1e1      	bne.n	80035b8 <__ssputs_r+0x70>
 80035f4:	4650      	mov	r0, sl
 80035f6:	6921      	ldr	r1, [r4, #16]
 80035f8:	f000 face 	bl	8003b98 <_free_r>
 80035fc:	e7c7      	b.n	800358e <__ssputs_r+0x46>
	...

08003600 <_svfiprintf_r>:
 8003600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003604:	4698      	mov	r8, r3
 8003606:	898b      	ldrh	r3, [r1, #12]
 8003608:	4607      	mov	r7, r0
 800360a:	061b      	lsls	r3, r3, #24
 800360c:	460d      	mov	r5, r1
 800360e:	4614      	mov	r4, r2
 8003610:	b09d      	sub	sp, #116	; 0x74
 8003612:	d50e      	bpl.n	8003632 <_svfiprintf_r+0x32>
 8003614:	690b      	ldr	r3, [r1, #16]
 8003616:	b963      	cbnz	r3, 8003632 <_svfiprintf_r+0x32>
 8003618:	2140      	movs	r1, #64	; 0x40
 800361a:	f000 fb09 	bl	8003c30 <_malloc_r>
 800361e:	6028      	str	r0, [r5, #0]
 8003620:	6128      	str	r0, [r5, #16]
 8003622:	b920      	cbnz	r0, 800362e <_svfiprintf_r+0x2e>
 8003624:	230c      	movs	r3, #12
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800362c:	e0d1      	b.n	80037d2 <_svfiprintf_r+0x1d2>
 800362e:	2340      	movs	r3, #64	; 0x40
 8003630:	616b      	str	r3, [r5, #20]
 8003632:	2300      	movs	r3, #0
 8003634:	9309      	str	r3, [sp, #36]	; 0x24
 8003636:	2320      	movs	r3, #32
 8003638:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800363c:	2330      	movs	r3, #48	; 0x30
 800363e:	f04f 0901 	mov.w	r9, #1
 8003642:	f8cd 800c 	str.w	r8, [sp, #12]
 8003646:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80037ec <_svfiprintf_r+0x1ec>
 800364a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800364e:	4623      	mov	r3, r4
 8003650:	469a      	mov	sl, r3
 8003652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003656:	b10a      	cbz	r2, 800365c <_svfiprintf_r+0x5c>
 8003658:	2a25      	cmp	r2, #37	; 0x25
 800365a:	d1f9      	bne.n	8003650 <_svfiprintf_r+0x50>
 800365c:	ebba 0b04 	subs.w	fp, sl, r4
 8003660:	d00b      	beq.n	800367a <_svfiprintf_r+0x7a>
 8003662:	465b      	mov	r3, fp
 8003664:	4622      	mov	r2, r4
 8003666:	4629      	mov	r1, r5
 8003668:	4638      	mov	r0, r7
 800366a:	f7ff ff6d 	bl	8003548 <__ssputs_r>
 800366e:	3001      	adds	r0, #1
 8003670:	f000 80aa 	beq.w	80037c8 <_svfiprintf_r+0x1c8>
 8003674:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003676:	445a      	add	r2, fp
 8003678:	9209      	str	r2, [sp, #36]	; 0x24
 800367a:	f89a 3000 	ldrb.w	r3, [sl]
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 80a2 	beq.w	80037c8 <_svfiprintf_r+0x1c8>
 8003684:	2300      	movs	r3, #0
 8003686:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800368a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800368e:	f10a 0a01 	add.w	sl, sl, #1
 8003692:	9304      	str	r3, [sp, #16]
 8003694:	9307      	str	r3, [sp, #28]
 8003696:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800369a:	931a      	str	r3, [sp, #104]	; 0x68
 800369c:	4654      	mov	r4, sl
 800369e:	2205      	movs	r2, #5
 80036a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036a4:	4851      	ldr	r0, [pc, #324]	; (80037ec <_svfiprintf_r+0x1ec>)
 80036a6:	f000 fa41 	bl	8003b2c <memchr>
 80036aa:	9a04      	ldr	r2, [sp, #16]
 80036ac:	b9d8      	cbnz	r0, 80036e6 <_svfiprintf_r+0xe6>
 80036ae:	06d0      	lsls	r0, r2, #27
 80036b0:	bf44      	itt	mi
 80036b2:	2320      	movmi	r3, #32
 80036b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036b8:	0711      	lsls	r1, r2, #28
 80036ba:	bf44      	itt	mi
 80036bc:	232b      	movmi	r3, #43	; 0x2b
 80036be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036c2:	f89a 3000 	ldrb.w	r3, [sl]
 80036c6:	2b2a      	cmp	r3, #42	; 0x2a
 80036c8:	d015      	beq.n	80036f6 <_svfiprintf_r+0xf6>
 80036ca:	4654      	mov	r4, sl
 80036cc:	2000      	movs	r0, #0
 80036ce:	f04f 0c0a 	mov.w	ip, #10
 80036d2:	9a07      	ldr	r2, [sp, #28]
 80036d4:	4621      	mov	r1, r4
 80036d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036da:	3b30      	subs	r3, #48	; 0x30
 80036dc:	2b09      	cmp	r3, #9
 80036de:	d94e      	bls.n	800377e <_svfiprintf_r+0x17e>
 80036e0:	b1b0      	cbz	r0, 8003710 <_svfiprintf_r+0x110>
 80036e2:	9207      	str	r2, [sp, #28]
 80036e4:	e014      	b.n	8003710 <_svfiprintf_r+0x110>
 80036e6:	eba0 0308 	sub.w	r3, r0, r8
 80036ea:	fa09 f303 	lsl.w	r3, r9, r3
 80036ee:	4313      	orrs	r3, r2
 80036f0:	46a2      	mov	sl, r4
 80036f2:	9304      	str	r3, [sp, #16]
 80036f4:	e7d2      	b.n	800369c <_svfiprintf_r+0x9c>
 80036f6:	9b03      	ldr	r3, [sp, #12]
 80036f8:	1d19      	adds	r1, r3, #4
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	9103      	str	r1, [sp, #12]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	bfbb      	ittet	lt
 8003702:	425b      	neglt	r3, r3
 8003704:	f042 0202 	orrlt.w	r2, r2, #2
 8003708:	9307      	strge	r3, [sp, #28]
 800370a:	9307      	strlt	r3, [sp, #28]
 800370c:	bfb8      	it	lt
 800370e:	9204      	strlt	r2, [sp, #16]
 8003710:	7823      	ldrb	r3, [r4, #0]
 8003712:	2b2e      	cmp	r3, #46	; 0x2e
 8003714:	d10c      	bne.n	8003730 <_svfiprintf_r+0x130>
 8003716:	7863      	ldrb	r3, [r4, #1]
 8003718:	2b2a      	cmp	r3, #42	; 0x2a
 800371a:	d135      	bne.n	8003788 <_svfiprintf_r+0x188>
 800371c:	9b03      	ldr	r3, [sp, #12]
 800371e:	3402      	adds	r4, #2
 8003720:	1d1a      	adds	r2, r3, #4
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	9203      	str	r2, [sp, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	bfb8      	it	lt
 800372a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800372e:	9305      	str	r3, [sp, #20]
 8003730:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80037fc <_svfiprintf_r+0x1fc>
 8003734:	2203      	movs	r2, #3
 8003736:	4650      	mov	r0, sl
 8003738:	7821      	ldrb	r1, [r4, #0]
 800373a:	f000 f9f7 	bl	8003b2c <memchr>
 800373e:	b140      	cbz	r0, 8003752 <_svfiprintf_r+0x152>
 8003740:	2340      	movs	r3, #64	; 0x40
 8003742:	eba0 000a 	sub.w	r0, r0, sl
 8003746:	fa03 f000 	lsl.w	r0, r3, r0
 800374a:	9b04      	ldr	r3, [sp, #16]
 800374c:	3401      	adds	r4, #1
 800374e:	4303      	orrs	r3, r0
 8003750:	9304      	str	r3, [sp, #16]
 8003752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003756:	2206      	movs	r2, #6
 8003758:	4825      	ldr	r0, [pc, #148]	; (80037f0 <_svfiprintf_r+0x1f0>)
 800375a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800375e:	f000 f9e5 	bl	8003b2c <memchr>
 8003762:	2800      	cmp	r0, #0
 8003764:	d038      	beq.n	80037d8 <_svfiprintf_r+0x1d8>
 8003766:	4b23      	ldr	r3, [pc, #140]	; (80037f4 <_svfiprintf_r+0x1f4>)
 8003768:	bb1b      	cbnz	r3, 80037b2 <_svfiprintf_r+0x1b2>
 800376a:	9b03      	ldr	r3, [sp, #12]
 800376c:	3307      	adds	r3, #7
 800376e:	f023 0307 	bic.w	r3, r3, #7
 8003772:	3308      	adds	r3, #8
 8003774:	9303      	str	r3, [sp, #12]
 8003776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003778:	4433      	add	r3, r6
 800377a:	9309      	str	r3, [sp, #36]	; 0x24
 800377c:	e767      	b.n	800364e <_svfiprintf_r+0x4e>
 800377e:	460c      	mov	r4, r1
 8003780:	2001      	movs	r0, #1
 8003782:	fb0c 3202 	mla	r2, ip, r2, r3
 8003786:	e7a5      	b.n	80036d4 <_svfiprintf_r+0xd4>
 8003788:	2300      	movs	r3, #0
 800378a:	f04f 0c0a 	mov.w	ip, #10
 800378e:	4619      	mov	r1, r3
 8003790:	3401      	adds	r4, #1
 8003792:	9305      	str	r3, [sp, #20]
 8003794:	4620      	mov	r0, r4
 8003796:	f810 2b01 	ldrb.w	r2, [r0], #1
 800379a:	3a30      	subs	r2, #48	; 0x30
 800379c:	2a09      	cmp	r2, #9
 800379e:	d903      	bls.n	80037a8 <_svfiprintf_r+0x1a8>
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0c5      	beq.n	8003730 <_svfiprintf_r+0x130>
 80037a4:	9105      	str	r1, [sp, #20]
 80037a6:	e7c3      	b.n	8003730 <_svfiprintf_r+0x130>
 80037a8:	4604      	mov	r4, r0
 80037aa:	2301      	movs	r3, #1
 80037ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80037b0:	e7f0      	b.n	8003794 <_svfiprintf_r+0x194>
 80037b2:	ab03      	add	r3, sp, #12
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	462a      	mov	r2, r5
 80037b8:	4638      	mov	r0, r7
 80037ba:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <_svfiprintf_r+0x1f8>)
 80037bc:	a904      	add	r1, sp, #16
 80037be:	f3af 8000 	nop.w
 80037c2:	1c42      	adds	r2, r0, #1
 80037c4:	4606      	mov	r6, r0
 80037c6:	d1d6      	bne.n	8003776 <_svfiprintf_r+0x176>
 80037c8:	89ab      	ldrh	r3, [r5, #12]
 80037ca:	065b      	lsls	r3, r3, #25
 80037cc:	f53f af2c 	bmi.w	8003628 <_svfiprintf_r+0x28>
 80037d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037d2:	b01d      	add	sp, #116	; 0x74
 80037d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037d8:	ab03      	add	r3, sp, #12
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	462a      	mov	r2, r5
 80037de:	4638      	mov	r0, r7
 80037e0:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <_svfiprintf_r+0x1f8>)
 80037e2:	a904      	add	r1, sp, #16
 80037e4:	f000 f87c 	bl	80038e0 <_printf_i>
 80037e8:	e7eb      	b.n	80037c2 <_svfiprintf_r+0x1c2>
 80037ea:	bf00      	nop
 80037ec:	08004589 	.word	0x08004589
 80037f0:	08004593 	.word	0x08004593
 80037f4:	00000000 	.word	0x00000000
 80037f8:	08003549 	.word	0x08003549
 80037fc:	0800458f 	.word	0x0800458f

08003800 <_printf_common>:
 8003800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003804:	4616      	mov	r6, r2
 8003806:	4699      	mov	r9, r3
 8003808:	688a      	ldr	r2, [r1, #8]
 800380a:	690b      	ldr	r3, [r1, #16]
 800380c:	4607      	mov	r7, r0
 800380e:	4293      	cmp	r3, r2
 8003810:	bfb8      	it	lt
 8003812:	4613      	movlt	r3, r2
 8003814:	6033      	str	r3, [r6, #0]
 8003816:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800381a:	460c      	mov	r4, r1
 800381c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003820:	b10a      	cbz	r2, 8003826 <_printf_common+0x26>
 8003822:	3301      	adds	r3, #1
 8003824:	6033      	str	r3, [r6, #0]
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	0699      	lsls	r1, r3, #26
 800382a:	bf42      	ittt	mi
 800382c:	6833      	ldrmi	r3, [r6, #0]
 800382e:	3302      	addmi	r3, #2
 8003830:	6033      	strmi	r3, [r6, #0]
 8003832:	6825      	ldr	r5, [r4, #0]
 8003834:	f015 0506 	ands.w	r5, r5, #6
 8003838:	d106      	bne.n	8003848 <_printf_common+0x48>
 800383a:	f104 0a19 	add.w	sl, r4, #25
 800383e:	68e3      	ldr	r3, [r4, #12]
 8003840:	6832      	ldr	r2, [r6, #0]
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	42ab      	cmp	r3, r5
 8003846:	dc28      	bgt.n	800389a <_printf_common+0x9a>
 8003848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800384c:	1e13      	subs	r3, r2, #0
 800384e:	6822      	ldr	r2, [r4, #0]
 8003850:	bf18      	it	ne
 8003852:	2301      	movne	r3, #1
 8003854:	0692      	lsls	r2, r2, #26
 8003856:	d42d      	bmi.n	80038b4 <_printf_common+0xb4>
 8003858:	4649      	mov	r1, r9
 800385a:	4638      	mov	r0, r7
 800385c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003860:	47c0      	blx	r8
 8003862:	3001      	adds	r0, #1
 8003864:	d020      	beq.n	80038a8 <_printf_common+0xa8>
 8003866:	6823      	ldr	r3, [r4, #0]
 8003868:	68e5      	ldr	r5, [r4, #12]
 800386a:	f003 0306 	and.w	r3, r3, #6
 800386e:	2b04      	cmp	r3, #4
 8003870:	bf18      	it	ne
 8003872:	2500      	movne	r5, #0
 8003874:	6832      	ldr	r2, [r6, #0]
 8003876:	f04f 0600 	mov.w	r6, #0
 800387a:	68a3      	ldr	r3, [r4, #8]
 800387c:	bf08      	it	eq
 800387e:	1aad      	subeq	r5, r5, r2
 8003880:	6922      	ldr	r2, [r4, #16]
 8003882:	bf08      	it	eq
 8003884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003888:	4293      	cmp	r3, r2
 800388a:	bfc4      	itt	gt
 800388c:	1a9b      	subgt	r3, r3, r2
 800388e:	18ed      	addgt	r5, r5, r3
 8003890:	341a      	adds	r4, #26
 8003892:	42b5      	cmp	r5, r6
 8003894:	d11a      	bne.n	80038cc <_printf_common+0xcc>
 8003896:	2000      	movs	r0, #0
 8003898:	e008      	b.n	80038ac <_printf_common+0xac>
 800389a:	2301      	movs	r3, #1
 800389c:	4652      	mov	r2, sl
 800389e:	4649      	mov	r1, r9
 80038a0:	4638      	mov	r0, r7
 80038a2:	47c0      	blx	r8
 80038a4:	3001      	adds	r0, #1
 80038a6:	d103      	bne.n	80038b0 <_printf_common+0xb0>
 80038a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038b0:	3501      	adds	r5, #1
 80038b2:	e7c4      	b.n	800383e <_printf_common+0x3e>
 80038b4:	2030      	movs	r0, #48	; 0x30
 80038b6:	18e1      	adds	r1, r4, r3
 80038b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038c2:	4422      	add	r2, r4
 80038c4:	3302      	adds	r3, #2
 80038c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038ca:	e7c5      	b.n	8003858 <_printf_common+0x58>
 80038cc:	2301      	movs	r3, #1
 80038ce:	4622      	mov	r2, r4
 80038d0:	4649      	mov	r1, r9
 80038d2:	4638      	mov	r0, r7
 80038d4:	47c0      	blx	r8
 80038d6:	3001      	adds	r0, #1
 80038d8:	d0e6      	beq.n	80038a8 <_printf_common+0xa8>
 80038da:	3601      	adds	r6, #1
 80038dc:	e7d9      	b.n	8003892 <_printf_common+0x92>
	...

080038e0 <_printf_i>:
 80038e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038e4:	460c      	mov	r4, r1
 80038e6:	7e27      	ldrb	r7, [r4, #24]
 80038e8:	4691      	mov	r9, r2
 80038ea:	2f78      	cmp	r7, #120	; 0x78
 80038ec:	4680      	mov	r8, r0
 80038ee:	469a      	mov	sl, r3
 80038f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80038f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038f6:	d807      	bhi.n	8003908 <_printf_i+0x28>
 80038f8:	2f62      	cmp	r7, #98	; 0x62
 80038fa:	d80a      	bhi.n	8003912 <_printf_i+0x32>
 80038fc:	2f00      	cmp	r7, #0
 80038fe:	f000 80d9 	beq.w	8003ab4 <_printf_i+0x1d4>
 8003902:	2f58      	cmp	r7, #88	; 0x58
 8003904:	f000 80a4 	beq.w	8003a50 <_printf_i+0x170>
 8003908:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800390c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003910:	e03a      	b.n	8003988 <_printf_i+0xa8>
 8003912:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003916:	2b15      	cmp	r3, #21
 8003918:	d8f6      	bhi.n	8003908 <_printf_i+0x28>
 800391a:	a001      	add	r0, pc, #4	; (adr r0, 8003920 <_printf_i+0x40>)
 800391c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003920:	08003979 	.word	0x08003979
 8003924:	0800398d 	.word	0x0800398d
 8003928:	08003909 	.word	0x08003909
 800392c:	08003909 	.word	0x08003909
 8003930:	08003909 	.word	0x08003909
 8003934:	08003909 	.word	0x08003909
 8003938:	0800398d 	.word	0x0800398d
 800393c:	08003909 	.word	0x08003909
 8003940:	08003909 	.word	0x08003909
 8003944:	08003909 	.word	0x08003909
 8003948:	08003909 	.word	0x08003909
 800394c:	08003a9b 	.word	0x08003a9b
 8003950:	080039bd 	.word	0x080039bd
 8003954:	08003a7d 	.word	0x08003a7d
 8003958:	08003909 	.word	0x08003909
 800395c:	08003909 	.word	0x08003909
 8003960:	08003abd 	.word	0x08003abd
 8003964:	08003909 	.word	0x08003909
 8003968:	080039bd 	.word	0x080039bd
 800396c:	08003909 	.word	0x08003909
 8003970:	08003909 	.word	0x08003909
 8003974:	08003a85 	.word	0x08003a85
 8003978:	680b      	ldr	r3, [r1, #0]
 800397a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800397e:	1d1a      	adds	r2, r3, #4
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	600a      	str	r2, [r1, #0]
 8003984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003988:	2301      	movs	r3, #1
 800398a:	e0a4      	b.n	8003ad6 <_printf_i+0x1f6>
 800398c:	6825      	ldr	r5, [r4, #0]
 800398e:	6808      	ldr	r0, [r1, #0]
 8003990:	062e      	lsls	r6, r5, #24
 8003992:	f100 0304 	add.w	r3, r0, #4
 8003996:	d50a      	bpl.n	80039ae <_printf_i+0xce>
 8003998:	6805      	ldr	r5, [r0, #0]
 800399a:	600b      	str	r3, [r1, #0]
 800399c:	2d00      	cmp	r5, #0
 800399e:	da03      	bge.n	80039a8 <_printf_i+0xc8>
 80039a0:	232d      	movs	r3, #45	; 0x2d
 80039a2:	426d      	negs	r5, r5
 80039a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039a8:	230a      	movs	r3, #10
 80039aa:	485e      	ldr	r0, [pc, #376]	; (8003b24 <_printf_i+0x244>)
 80039ac:	e019      	b.n	80039e2 <_printf_i+0x102>
 80039ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80039b2:	6805      	ldr	r5, [r0, #0]
 80039b4:	600b      	str	r3, [r1, #0]
 80039b6:	bf18      	it	ne
 80039b8:	b22d      	sxthne	r5, r5
 80039ba:	e7ef      	b.n	800399c <_printf_i+0xbc>
 80039bc:	680b      	ldr	r3, [r1, #0]
 80039be:	6825      	ldr	r5, [r4, #0]
 80039c0:	1d18      	adds	r0, r3, #4
 80039c2:	6008      	str	r0, [r1, #0]
 80039c4:	0628      	lsls	r0, r5, #24
 80039c6:	d501      	bpl.n	80039cc <_printf_i+0xec>
 80039c8:	681d      	ldr	r5, [r3, #0]
 80039ca:	e002      	b.n	80039d2 <_printf_i+0xf2>
 80039cc:	0669      	lsls	r1, r5, #25
 80039ce:	d5fb      	bpl.n	80039c8 <_printf_i+0xe8>
 80039d0:	881d      	ldrh	r5, [r3, #0]
 80039d2:	2f6f      	cmp	r7, #111	; 0x6f
 80039d4:	bf0c      	ite	eq
 80039d6:	2308      	moveq	r3, #8
 80039d8:	230a      	movne	r3, #10
 80039da:	4852      	ldr	r0, [pc, #328]	; (8003b24 <_printf_i+0x244>)
 80039dc:	2100      	movs	r1, #0
 80039de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039e2:	6866      	ldr	r6, [r4, #4]
 80039e4:	2e00      	cmp	r6, #0
 80039e6:	bfa8      	it	ge
 80039e8:	6821      	ldrge	r1, [r4, #0]
 80039ea:	60a6      	str	r6, [r4, #8]
 80039ec:	bfa4      	itt	ge
 80039ee:	f021 0104 	bicge.w	r1, r1, #4
 80039f2:	6021      	strge	r1, [r4, #0]
 80039f4:	b90d      	cbnz	r5, 80039fa <_printf_i+0x11a>
 80039f6:	2e00      	cmp	r6, #0
 80039f8:	d04d      	beq.n	8003a96 <_printf_i+0x1b6>
 80039fa:	4616      	mov	r6, r2
 80039fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a00:	fb03 5711 	mls	r7, r3, r1, r5
 8003a04:	5dc7      	ldrb	r7, [r0, r7]
 8003a06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a0a:	462f      	mov	r7, r5
 8003a0c:	42bb      	cmp	r3, r7
 8003a0e:	460d      	mov	r5, r1
 8003a10:	d9f4      	bls.n	80039fc <_printf_i+0x11c>
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d10b      	bne.n	8003a2e <_printf_i+0x14e>
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	07df      	lsls	r7, r3, #31
 8003a1a:	d508      	bpl.n	8003a2e <_printf_i+0x14e>
 8003a1c:	6923      	ldr	r3, [r4, #16]
 8003a1e:	6861      	ldr	r1, [r4, #4]
 8003a20:	4299      	cmp	r1, r3
 8003a22:	bfde      	ittt	le
 8003a24:	2330      	movle	r3, #48	; 0x30
 8003a26:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a2a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003a2e:	1b92      	subs	r2, r2, r6
 8003a30:	6122      	str	r2, [r4, #16]
 8003a32:	464b      	mov	r3, r9
 8003a34:	4621      	mov	r1, r4
 8003a36:	4640      	mov	r0, r8
 8003a38:	f8cd a000 	str.w	sl, [sp]
 8003a3c:	aa03      	add	r2, sp, #12
 8003a3e:	f7ff fedf 	bl	8003800 <_printf_common>
 8003a42:	3001      	adds	r0, #1
 8003a44:	d14c      	bne.n	8003ae0 <_printf_i+0x200>
 8003a46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a4a:	b004      	add	sp, #16
 8003a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a50:	4834      	ldr	r0, [pc, #208]	; (8003b24 <_printf_i+0x244>)
 8003a52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a56:	680e      	ldr	r6, [r1, #0]
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003a5e:	061f      	lsls	r7, r3, #24
 8003a60:	600e      	str	r6, [r1, #0]
 8003a62:	d514      	bpl.n	8003a8e <_printf_i+0x1ae>
 8003a64:	07d9      	lsls	r1, r3, #31
 8003a66:	bf44      	itt	mi
 8003a68:	f043 0320 	orrmi.w	r3, r3, #32
 8003a6c:	6023      	strmi	r3, [r4, #0]
 8003a6e:	b91d      	cbnz	r5, 8003a78 <_printf_i+0x198>
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	f023 0320 	bic.w	r3, r3, #32
 8003a76:	6023      	str	r3, [r4, #0]
 8003a78:	2310      	movs	r3, #16
 8003a7a:	e7af      	b.n	80039dc <_printf_i+0xfc>
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	f043 0320 	orr.w	r3, r3, #32
 8003a82:	6023      	str	r3, [r4, #0]
 8003a84:	2378      	movs	r3, #120	; 0x78
 8003a86:	4828      	ldr	r0, [pc, #160]	; (8003b28 <_printf_i+0x248>)
 8003a88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a8c:	e7e3      	b.n	8003a56 <_printf_i+0x176>
 8003a8e:	065e      	lsls	r6, r3, #25
 8003a90:	bf48      	it	mi
 8003a92:	b2ad      	uxthmi	r5, r5
 8003a94:	e7e6      	b.n	8003a64 <_printf_i+0x184>
 8003a96:	4616      	mov	r6, r2
 8003a98:	e7bb      	b.n	8003a12 <_printf_i+0x132>
 8003a9a:	680b      	ldr	r3, [r1, #0]
 8003a9c:	6826      	ldr	r6, [r4, #0]
 8003a9e:	1d1d      	adds	r5, r3, #4
 8003aa0:	6960      	ldr	r0, [r4, #20]
 8003aa2:	600d      	str	r5, [r1, #0]
 8003aa4:	0635      	lsls	r5, r6, #24
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	d501      	bpl.n	8003aae <_printf_i+0x1ce>
 8003aaa:	6018      	str	r0, [r3, #0]
 8003aac:	e002      	b.n	8003ab4 <_printf_i+0x1d4>
 8003aae:	0671      	lsls	r1, r6, #25
 8003ab0:	d5fb      	bpl.n	8003aaa <_printf_i+0x1ca>
 8003ab2:	8018      	strh	r0, [r3, #0]
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	4616      	mov	r6, r2
 8003ab8:	6123      	str	r3, [r4, #16]
 8003aba:	e7ba      	b.n	8003a32 <_printf_i+0x152>
 8003abc:	680b      	ldr	r3, [r1, #0]
 8003abe:	1d1a      	adds	r2, r3, #4
 8003ac0:	600a      	str	r2, [r1, #0]
 8003ac2:	681e      	ldr	r6, [r3, #0]
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	4630      	mov	r0, r6
 8003ac8:	6862      	ldr	r2, [r4, #4]
 8003aca:	f000 f82f 	bl	8003b2c <memchr>
 8003ace:	b108      	cbz	r0, 8003ad4 <_printf_i+0x1f4>
 8003ad0:	1b80      	subs	r0, r0, r6
 8003ad2:	6060      	str	r0, [r4, #4]
 8003ad4:	6863      	ldr	r3, [r4, #4]
 8003ad6:	6123      	str	r3, [r4, #16]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ade:	e7a8      	b.n	8003a32 <_printf_i+0x152>
 8003ae0:	4632      	mov	r2, r6
 8003ae2:	4649      	mov	r1, r9
 8003ae4:	4640      	mov	r0, r8
 8003ae6:	6923      	ldr	r3, [r4, #16]
 8003ae8:	47d0      	blx	sl
 8003aea:	3001      	adds	r0, #1
 8003aec:	d0ab      	beq.n	8003a46 <_printf_i+0x166>
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	079b      	lsls	r3, r3, #30
 8003af2:	d413      	bmi.n	8003b1c <_printf_i+0x23c>
 8003af4:	68e0      	ldr	r0, [r4, #12]
 8003af6:	9b03      	ldr	r3, [sp, #12]
 8003af8:	4298      	cmp	r0, r3
 8003afa:	bfb8      	it	lt
 8003afc:	4618      	movlt	r0, r3
 8003afe:	e7a4      	b.n	8003a4a <_printf_i+0x16a>
 8003b00:	2301      	movs	r3, #1
 8003b02:	4632      	mov	r2, r6
 8003b04:	4649      	mov	r1, r9
 8003b06:	4640      	mov	r0, r8
 8003b08:	47d0      	blx	sl
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	d09b      	beq.n	8003a46 <_printf_i+0x166>
 8003b0e:	3501      	adds	r5, #1
 8003b10:	68e3      	ldr	r3, [r4, #12]
 8003b12:	9903      	ldr	r1, [sp, #12]
 8003b14:	1a5b      	subs	r3, r3, r1
 8003b16:	42ab      	cmp	r3, r5
 8003b18:	dcf2      	bgt.n	8003b00 <_printf_i+0x220>
 8003b1a:	e7eb      	b.n	8003af4 <_printf_i+0x214>
 8003b1c:	2500      	movs	r5, #0
 8003b1e:	f104 0619 	add.w	r6, r4, #25
 8003b22:	e7f5      	b.n	8003b10 <_printf_i+0x230>
 8003b24:	0800459a 	.word	0x0800459a
 8003b28:	080045ab 	.word	0x080045ab

08003b2c <memchr>:
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	b510      	push	{r4, lr}
 8003b30:	b2c9      	uxtb	r1, r1
 8003b32:	4402      	add	r2, r0
 8003b34:	4293      	cmp	r3, r2
 8003b36:	4618      	mov	r0, r3
 8003b38:	d101      	bne.n	8003b3e <memchr+0x12>
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	e003      	b.n	8003b46 <memchr+0x1a>
 8003b3e:	7804      	ldrb	r4, [r0, #0]
 8003b40:	3301      	adds	r3, #1
 8003b42:	428c      	cmp	r4, r1
 8003b44:	d1f6      	bne.n	8003b34 <memchr+0x8>
 8003b46:	bd10      	pop	{r4, pc}

08003b48 <memcpy>:
 8003b48:	440a      	add	r2, r1
 8003b4a:	4291      	cmp	r1, r2
 8003b4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003b50:	d100      	bne.n	8003b54 <memcpy+0xc>
 8003b52:	4770      	bx	lr
 8003b54:	b510      	push	{r4, lr}
 8003b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b5a:	4291      	cmp	r1, r2
 8003b5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b60:	d1f9      	bne.n	8003b56 <memcpy+0xe>
 8003b62:	bd10      	pop	{r4, pc}

08003b64 <memmove>:
 8003b64:	4288      	cmp	r0, r1
 8003b66:	b510      	push	{r4, lr}
 8003b68:	eb01 0402 	add.w	r4, r1, r2
 8003b6c:	d902      	bls.n	8003b74 <memmove+0x10>
 8003b6e:	4284      	cmp	r4, r0
 8003b70:	4623      	mov	r3, r4
 8003b72:	d807      	bhi.n	8003b84 <memmove+0x20>
 8003b74:	1e43      	subs	r3, r0, #1
 8003b76:	42a1      	cmp	r1, r4
 8003b78:	d008      	beq.n	8003b8c <memmove+0x28>
 8003b7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b82:	e7f8      	b.n	8003b76 <memmove+0x12>
 8003b84:	4601      	mov	r1, r0
 8003b86:	4402      	add	r2, r0
 8003b88:	428a      	cmp	r2, r1
 8003b8a:	d100      	bne.n	8003b8e <memmove+0x2a>
 8003b8c:	bd10      	pop	{r4, pc}
 8003b8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b96:	e7f7      	b.n	8003b88 <memmove+0x24>

08003b98 <_free_r>:
 8003b98:	b538      	push	{r3, r4, r5, lr}
 8003b9a:	4605      	mov	r5, r0
 8003b9c:	2900      	cmp	r1, #0
 8003b9e:	d043      	beq.n	8003c28 <_free_r+0x90>
 8003ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ba4:	1f0c      	subs	r4, r1, #4
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	bfb8      	it	lt
 8003baa:	18e4      	addlt	r4, r4, r3
 8003bac:	f000 f8d0 	bl	8003d50 <__malloc_lock>
 8003bb0:	4a1e      	ldr	r2, [pc, #120]	; (8003c2c <_free_r+0x94>)
 8003bb2:	6813      	ldr	r3, [r2, #0]
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	b933      	cbnz	r3, 8003bc6 <_free_r+0x2e>
 8003bb8:	6063      	str	r3, [r4, #4]
 8003bba:	6014      	str	r4, [r2, #0]
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bc2:	f000 b8cb 	b.w	8003d5c <__malloc_unlock>
 8003bc6:	42a3      	cmp	r3, r4
 8003bc8:	d90a      	bls.n	8003be0 <_free_r+0x48>
 8003bca:	6821      	ldr	r1, [r4, #0]
 8003bcc:	1862      	adds	r2, r4, r1
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	bf01      	itttt	eq
 8003bd2:	681a      	ldreq	r2, [r3, #0]
 8003bd4:	685b      	ldreq	r3, [r3, #4]
 8003bd6:	1852      	addeq	r2, r2, r1
 8003bd8:	6022      	streq	r2, [r4, #0]
 8003bda:	6063      	str	r3, [r4, #4]
 8003bdc:	6004      	str	r4, [r0, #0]
 8003bde:	e7ed      	b.n	8003bbc <_free_r+0x24>
 8003be0:	461a      	mov	r2, r3
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	b10b      	cbz	r3, 8003bea <_free_r+0x52>
 8003be6:	42a3      	cmp	r3, r4
 8003be8:	d9fa      	bls.n	8003be0 <_free_r+0x48>
 8003bea:	6811      	ldr	r1, [r2, #0]
 8003bec:	1850      	adds	r0, r2, r1
 8003bee:	42a0      	cmp	r0, r4
 8003bf0:	d10b      	bne.n	8003c0a <_free_r+0x72>
 8003bf2:	6820      	ldr	r0, [r4, #0]
 8003bf4:	4401      	add	r1, r0
 8003bf6:	1850      	adds	r0, r2, r1
 8003bf8:	4283      	cmp	r3, r0
 8003bfa:	6011      	str	r1, [r2, #0]
 8003bfc:	d1de      	bne.n	8003bbc <_free_r+0x24>
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	4401      	add	r1, r0
 8003c04:	6011      	str	r1, [r2, #0]
 8003c06:	6053      	str	r3, [r2, #4]
 8003c08:	e7d8      	b.n	8003bbc <_free_r+0x24>
 8003c0a:	d902      	bls.n	8003c12 <_free_r+0x7a>
 8003c0c:	230c      	movs	r3, #12
 8003c0e:	602b      	str	r3, [r5, #0]
 8003c10:	e7d4      	b.n	8003bbc <_free_r+0x24>
 8003c12:	6820      	ldr	r0, [r4, #0]
 8003c14:	1821      	adds	r1, r4, r0
 8003c16:	428b      	cmp	r3, r1
 8003c18:	bf01      	itttt	eq
 8003c1a:	6819      	ldreq	r1, [r3, #0]
 8003c1c:	685b      	ldreq	r3, [r3, #4]
 8003c1e:	1809      	addeq	r1, r1, r0
 8003c20:	6021      	streq	r1, [r4, #0]
 8003c22:	6063      	str	r3, [r4, #4]
 8003c24:	6054      	str	r4, [r2, #4]
 8003c26:	e7c9      	b.n	8003bbc <_free_r+0x24>
 8003c28:	bd38      	pop	{r3, r4, r5, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200004d4 	.word	0x200004d4

08003c30 <_malloc_r>:
 8003c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c32:	1ccd      	adds	r5, r1, #3
 8003c34:	f025 0503 	bic.w	r5, r5, #3
 8003c38:	3508      	adds	r5, #8
 8003c3a:	2d0c      	cmp	r5, #12
 8003c3c:	bf38      	it	cc
 8003c3e:	250c      	movcc	r5, #12
 8003c40:	2d00      	cmp	r5, #0
 8003c42:	4606      	mov	r6, r0
 8003c44:	db01      	blt.n	8003c4a <_malloc_r+0x1a>
 8003c46:	42a9      	cmp	r1, r5
 8003c48:	d903      	bls.n	8003c52 <_malloc_r+0x22>
 8003c4a:	230c      	movs	r3, #12
 8003c4c:	6033      	str	r3, [r6, #0]
 8003c4e:	2000      	movs	r0, #0
 8003c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c52:	f000 f87d 	bl	8003d50 <__malloc_lock>
 8003c56:	4921      	ldr	r1, [pc, #132]	; (8003cdc <_malloc_r+0xac>)
 8003c58:	680a      	ldr	r2, [r1, #0]
 8003c5a:	4614      	mov	r4, r2
 8003c5c:	b99c      	cbnz	r4, 8003c86 <_malloc_r+0x56>
 8003c5e:	4f20      	ldr	r7, [pc, #128]	; (8003ce0 <_malloc_r+0xb0>)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	b923      	cbnz	r3, 8003c6e <_malloc_r+0x3e>
 8003c64:	4621      	mov	r1, r4
 8003c66:	4630      	mov	r0, r6
 8003c68:	f000 f862 	bl	8003d30 <_sbrk_r>
 8003c6c:	6038      	str	r0, [r7, #0]
 8003c6e:	4629      	mov	r1, r5
 8003c70:	4630      	mov	r0, r6
 8003c72:	f000 f85d 	bl	8003d30 <_sbrk_r>
 8003c76:	1c43      	adds	r3, r0, #1
 8003c78:	d123      	bne.n	8003cc2 <_malloc_r+0x92>
 8003c7a:	230c      	movs	r3, #12
 8003c7c:	4630      	mov	r0, r6
 8003c7e:	6033      	str	r3, [r6, #0]
 8003c80:	f000 f86c 	bl	8003d5c <__malloc_unlock>
 8003c84:	e7e3      	b.n	8003c4e <_malloc_r+0x1e>
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	1b5b      	subs	r3, r3, r5
 8003c8a:	d417      	bmi.n	8003cbc <_malloc_r+0x8c>
 8003c8c:	2b0b      	cmp	r3, #11
 8003c8e:	d903      	bls.n	8003c98 <_malloc_r+0x68>
 8003c90:	6023      	str	r3, [r4, #0]
 8003c92:	441c      	add	r4, r3
 8003c94:	6025      	str	r5, [r4, #0]
 8003c96:	e004      	b.n	8003ca2 <_malloc_r+0x72>
 8003c98:	6863      	ldr	r3, [r4, #4]
 8003c9a:	42a2      	cmp	r2, r4
 8003c9c:	bf0c      	ite	eq
 8003c9e:	600b      	streq	r3, [r1, #0]
 8003ca0:	6053      	strne	r3, [r2, #4]
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	f000 f85a 	bl	8003d5c <__malloc_unlock>
 8003ca8:	f104 000b 	add.w	r0, r4, #11
 8003cac:	1d23      	adds	r3, r4, #4
 8003cae:	f020 0007 	bic.w	r0, r0, #7
 8003cb2:	1ac2      	subs	r2, r0, r3
 8003cb4:	d0cc      	beq.n	8003c50 <_malloc_r+0x20>
 8003cb6:	1a1b      	subs	r3, r3, r0
 8003cb8:	50a3      	str	r3, [r4, r2]
 8003cba:	e7c9      	b.n	8003c50 <_malloc_r+0x20>
 8003cbc:	4622      	mov	r2, r4
 8003cbe:	6864      	ldr	r4, [r4, #4]
 8003cc0:	e7cc      	b.n	8003c5c <_malloc_r+0x2c>
 8003cc2:	1cc4      	adds	r4, r0, #3
 8003cc4:	f024 0403 	bic.w	r4, r4, #3
 8003cc8:	42a0      	cmp	r0, r4
 8003cca:	d0e3      	beq.n	8003c94 <_malloc_r+0x64>
 8003ccc:	1a21      	subs	r1, r4, r0
 8003cce:	4630      	mov	r0, r6
 8003cd0:	f000 f82e 	bl	8003d30 <_sbrk_r>
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	d1dd      	bne.n	8003c94 <_malloc_r+0x64>
 8003cd8:	e7cf      	b.n	8003c7a <_malloc_r+0x4a>
 8003cda:	bf00      	nop
 8003cdc:	200004d4 	.word	0x200004d4
 8003ce0:	200004d8 	.word	0x200004d8

08003ce4 <_realloc_r>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	4607      	mov	r7, r0
 8003ce8:	4614      	mov	r4, r2
 8003cea:	460e      	mov	r6, r1
 8003cec:	b921      	cbnz	r1, 8003cf8 <_realloc_r+0x14>
 8003cee:	4611      	mov	r1, r2
 8003cf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003cf4:	f7ff bf9c 	b.w	8003c30 <_malloc_r>
 8003cf8:	b922      	cbnz	r2, 8003d04 <_realloc_r+0x20>
 8003cfa:	f7ff ff4d 	bl	8003b98 <_free_r>
 8003cfe:	4625      	mov	r5, r4
 8003d00:	4628      	mov	r0, r5
 8003d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d04:	f000 f830 	bl	8003d68 <_malloc_usable_size_r>
 8003d08:	42a0      	cmp	r0, r4
 8003d0a:	d20f      	bcs.n	8003d2c <_realloc_r+0x48>
 8003d0c:	4621      	mov	r1, r4
 8003d0e:	4638      	mov	r0, r7
 8003d10:	f7ff ff8e 	bl	8003c30 <_malloc_r>
 8003d14:	4605      	mov	r5, r0
 8003d16:	2800      	cmp	r0, #0
 8003d18:	d0f2      	beq.n	8003d00 <_realloc_r+0x1c>
 8003d1a:	4631      	mov	r1, r6
 8003d1c:	4622      	mov	r2, r4
 8003d1e:	f7ff ff13 	bl	8003b48 <memcpy>
 8003d22:	4631      	mov	r1, r6
 8003d24:	4638      	mov	r0, r7
 8003d26:	f7ff ff37 	bl	8003b98 <_free_r>
 8003d2a:	e7e9      	b.n	8003d00 <_realloc_r+0x1c>
 8003d2c:	4635      	mov	r5, r6
 8003d2e:	e7e7      	b.n	8003d00 <_realloc_r+0x1c>

08003d30 <_sbrk_r>:
 8003d30:	b538      	push	{r3, r4, r5, lr}
 8003d32:	2300      	movs	r3, #0
 8003d34:	4d05      	ldr	r5, [pc, #20]	; (8003d4c <_sbrk_r+0x1c>)
 8003d36:	4604      	mov	r4, r0
 8003d38:	4608      	mov	r0, r1
 8003d3a:	602b      	str	r3, [r5, #0]
 8003d3c:	f7fd f9fa 	bl	8001134 <_sbrk>
 8003d40:	1c43      	adds	r3, r0, #1
 8003d42:	d102      	bne.n	8003d4a <_sbrk_r+0x1a>
 8003d44:	682b      	ldr	r3, [r5, #0]
 8003d46:	b103      	cbz	r3, 8003d4a <_sbrk_r+0x1a>
 8003d48:	6023      	str	r3, [r4, #0]
 8003d4a:	bd38      	pop	{r3, r4, r5, pc}
 8003d4c:	2000058c 	.word	0x2000058c

08003d50 <__malloc_lock>:
 8003d50:	4801      	ldr	r0, [pc, #4]	; (8003d58 <__malloc_lock+0x8>)
 8003d52:	f000 b811 	b.w	8003d78 <__retarget_lock_acquire_recursive>
 8003d56:	bf00      	nop
 8003d58:	20000594 	.word	0x20000594

08003d5c <__malloc_unlock>:
 8003d5c:	4801      	ldr	r0, [pc, #4]	; (8003d64 <__malloc_unlock+0x8>)
 8003d5e:	f000 b80c 	b.w	8003d7a <__retarget_lock_release_recursive>
 8003d62:	bf00      	nop
 8003d64:	20000594 	.word	0x20000594

08003d68 <_malloc_usable_size_r>:
 8003d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d6c:	1f18      	subs	r0, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	bfbc      	itt	lt
 8003d72:	580b      	ldrlt	r3, [r1, r0]
 8003d74:	18c0      	addlt	r0, r0, r3
 8003d76:	4770      	bx	lr

08003d78 <__retarget_lock_acquire_recursive>:
 8003d78:	4770      	bx	lr

08003d7a <__retarget_lock_release_recursive>:
 8003d7a:	4770      	bx	lr

08003d7c <_init>:
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7e:	bf00      	nop
 8003d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d82:	bc08      	pop	{r3}
 8003d84:	469e      	mov	lr, r3
 8003d86:	4770      	bx	lr

08003d88 <_fini>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	bf00      	nop
 8003d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8e:	bc08      	pop	{r3}
 8003d90:	469e      	mov	lr, r3
 8003d92:	4770      	bx	lr
