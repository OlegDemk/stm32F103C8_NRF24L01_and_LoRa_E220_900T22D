
NRF_and_LoRa_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c34  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000820  08003d40  08003d40  00013d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004560  08004560  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08004560  08004560  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004560  08004560  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004560  08004560  00014560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004564  08004564  00014564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000518  20000080  080045e8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  080045e8  00020598  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b677  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cdd  00000000  00000000  0002b720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0002d400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002dd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178a0  00000000  00000000  0002e658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d23a  00000000  00000000  00045ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084b03  00000000  00000000  00053132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d7c35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002acc  00000000  00000000  000d7c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d28 	.word	0x08003d28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08003d28 	.word	0x08003d28

0800014c <DelayMicro>:
//----------------------------------------------------------------------------------------
/*
 * Function make us delay
 */
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t test_micros = SystemCoreClock;
 8000154:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <DelayMicro+0x3c>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	60fb      	str	r3, [r7, #12]
	micros *= (SystemCoreClock / 100000) /84;
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <DelayMicro+0x3c>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4a0b      	ldr	r2, [pc, #44]	; (800018c <DelayMicro+0x40>)
 8000160:	fba2 2303 	umull	r2, r3, r2, r3
 8000164:	0ddb      	lsrs	r3, r3, #23
 8000166:	687a      	ldr	r2, [r7, #4]
 8000168:	fb02 f303 	mul.w	r3, r2, r3
 800016c:	607b      	str	r3, [r7, #4]
	while (micros--);
 800016e:	bf00      	nop
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	1e5a      	subs	r2, r3, #1
 8000174:	607a      	str	r2, [r7, #4]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d1fa      	bne.n	8000170 <DelayMicro+0x24>
}
 800017a:	bf00      	nop
 800017c:	bf00      	nop
 800017e:	3714      	adds	r7, #20
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	20000010 	.word	0x20000010
 800018c:	ffa71ee7 	.word	0xffa71ee7

08000190 <NRF24_ReadReg>:
//----------------------------------------------------------------------------------------
uint8_t NRF24_ReadReg(uint8_t addr)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b086      	sub	sp, #24
 8000194:	af02      	add	r7, sp, #8
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
  uint8_t dt=0, cmd;
 800019a:	2300      	movs	r3, #0
 800019c:	73fb      	strb	r3, [r7, #15]
  CS_ON;
 800019e:	2200      	movs	r2, #0
 80001a0:	2110      	movs	r1, #16
 80001a2:	4813      	ldr	r0, [pc, #76]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001a4:	f001 fb03 	bl	80017ae <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1,&addr,&dt,1,1000);
 80001a8:	f107 020f 	add.w	r2, r7, #15
 80001ac:	1df9      	adds	r1, r7, #7
 80001ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b2:	9300      	str	r3, [sp, #0]
 80001b4:	2301      	movs	r3, #1
 80001b6:	480f      	ldr	r0, [pc, #60]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001b8:	f002 fe43 	bl	8002e42 <HAL_SPI_TransmitReceive>

  if (addr!=STATUS_NRF)
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	2b07      	cmp	r3, #7
 80001c0:	d00c      	beq.n	80001dc <NRF24_ReadReg+0x4c>
  {
	  cmd=0xFF;
 80001c2:	23ff      	movs	r3, #255	; 0xff
 80001c4:	73bb      	strb	r3, [r7, #14]
	  HAL_SPI_TransmitReceive(&hspi1,&cmd,&dt,1,1000);
 80001c6:	f107 020f 	add.w	r2, r7, #15
 80001ca:	f107 010e 	add.w	r1, r7, #14
 80001ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d2:	9300      	str	r3, [sp, #0]
 80001d4:	2301      	movs	r3, #1
 80001d6:	4807      	ldr	r0, [pc, #28]	; (80001f4 <NRF24_ReadReg+0x64>)
 80001d8:	f002 fe33 	bl	8002e42 <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 80001dc:	2201      	movs	r2, #1
 80001de:	2110      	movs	r1, #16
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <NRF24_ReadReg+0x60>)
 80001e2:	f001 fae4 	bl	80017ae <HAL_GPIO_WritePin>
  return dt;
 80001e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3710      	adds	r7, #16
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40010800 	.word	0x40010800
 80001f4:	2000052c 	.word	0x2000052c

080001f8 <NRF24_WriteReg>:
//----------------------------------------------------------------------------------------
void NRF24_WriteReg(uint8_t addr, uint8_t dt)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	460a      	mov	r2, r1
 8000202:	71fb      	strb	r3, [r7, #7]
 8000204:	4613      	mov	r3, r2
 8000206:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								// Add write bit
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	f043 0320 	orr.w	r3, r3, #32
 800020e:	b2db      	uxtb	r3, r3
 8000210:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000212:	2200      	movs	r2, #0
 8000214:	2110      	movs	r1, #16
 8000216:	480d      	ldr	r0, [pc, #52]	; (800024c <NRF24_WriteReg+0x54>)
 8000218:	f001 fac9 	bl	80017ae <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 800021c:	1df9      	adds	r1, r7, #7
 800021e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000222:	2201      	movs	r2, #1
 8000224:	480a      	ldr	r0, [pc, #40]	; (8000250 <NRF24_WriteReg+0x58>)
 8000226:	f002 fbbf 	bl	80029a8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1,&dt,1,1000);				// Send data in bus
 800022a:	1db9      	adds	r1, r7, #6
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	2201      	movs	r2, #1
 8000232:	4807      	ldr	r0, [pc, #28]	; (8000250 <NRF24_WriteReg+0x58>)
 8000234:	f002 fbb8 	bl	80029a8 <HAL_SPI_Transmit>
  CS_OFF;
 8000238:	2201      	movs	r2, #1
 800023a:	2110      	movs	r1, #16
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <NRF24_WriteReg+0x54>)
 800023e:	f001 fab6 	bl	80017ae <HAL_GPIO_WritePin>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40010800 	.word	0x40010800
 8000250:	2000052c 	.word	0x2000052c

08000254 <NRF24_ToggleFeatures>:
//----------------------------------------------------------------------------------------
void NRF24_ToggleFeatures(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {ACTIVATE};
 800025a:	2350      	movs	r3, #80	; 0x50
 800025c:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800025e:	2200      	movs	r2, #0
 8000260:	2110      	movs	r1, #16
 8000262:	480f      	ldr	r0, [pc, #60]	; (80002a0 <NRF24_ToggleFeatures+0x4c>)
 8000264:	f001 faa3 	bl	80017ae <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000268:	1d39      	adds	r1, r7, #4
 800026a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800026e:	2201      	movs	r2, #1
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <NRF24_ToggleFeatures+0x50>)
 8000272:	f002 fb99 	bl	80029a8 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000276:	2001      	movs	r0, #1
 8000278:	f7ff ff68 	bl	800014c <DelayMicro>
  dt[0] = 0x73;
 800027c:	2373      	movs	r3, #115	; 0x73
 800027e:	713b      	strb	r3, [r7, #4]
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000280:	1d39      	adds	r1, r7, #4
 8000282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000286:	2201      	movs	r2, #1
 8000288:	4806      	ldr	r0, [pc, #24]	; (80002a4 <NRF24_ToggleFeatures+0x50>)
 800028a:	f002 fb8d 	bl	80029a8 <HAL_SPI_Transmit>
  CS_OFF;
 800028e:	2201      	movs	r2, #1
 8000290:	2110      	movs	r1, #16
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <NRF24_ToggleFeatures+0x4c>)
 8000294:	f001 fa8b 	bl	80017ae <HAL_GPIO_WritePin>
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40010800 	.word	0x40010800
 80002a4:	2000052c 	.word	0x2000052c

080002a8 <NRF24_Read_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Read_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	6039      	str	r1, [r7, #0]
 80002b2:	71fb      	strb	r3, [r7, #7]
 80002b4:	4613      	mov	r3, r2
 80002b6:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 80002b8:	2200      	movs	r2, #0
 80002ba:	2110      	movs	r1, #16
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <NRF24_Read_Buf+0x4c>)
 80002be:	f001 fa76 	bl	80017ae <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 80002c2:	1df9      	adds	r1, r7, #7
 80002c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c8:	2201      	movs	r2, #1
 80002ca:	480b      	ldr	r0, [pc, #44]	; (80002f8 <NRF24_Read_Buf+0x50>)
 80002cc:	f002 fb6c 	bl	80029a8 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1,pBuf,bytes,1000);			// Save data in buffer
 80002d0:	79bb      	ldrb	r3, [r7, #6]
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d8:	6839      	ldr	r1, [r7, #0]
 80002da:	4807      	ldr	r0, [pc, #28]	; (80002f8 <NRF24_Read_Buf+0x50>)
 80002dc:	f002 fca0 	bl	8002c20 <HAL_SPI_Receive>
  CS_OFF;
 80002e0:	2201      	movs	r2, #1
 80002e2:	2110      	movs	r1, #16
 80002e4:	4803      	ldr	r0, [pc, #12]	; (80002f4 <NRF24_Read_Buf+0x4c>)
 80002e6:	f001 fa62 	bl	80017ae <HAL_GPIO_WritePin>
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40010800 	.word	0x40010800
 80002f8:	2000052c 	.word	0x2000052c

080002fc <NRF24_Write_Buf>:
//----------------------------------------------------------------------------------------
void NRF24_Write_Buf(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]
 8000308:	4613      	mov	r3, r2
 800030a:	71bb      	strb	r3, [r7, #6]
  addr |= W_REGISTER;								//Add write bit
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	f043 0320 	orr.w	r3, r3, #32
 8000312:	b2db      	uxtb	r3, r3
 8000314:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000316:	2200      	movs	r2, #0
 8000318:	2110      	movs	r1, #16
 800031a:	480f      	ldr	r0, [pc, #60]	; (8000358 <NRF24_Write_Buf+0x5c>)
 800031c:	f001 fa47 	bl	80017ae <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);			// Send address in bus
 8000320:	1df9      	adds	r1, r7, #7
 8000322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000326:	2201      	movs	r2, #1
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <NRF24_Write_Buf+0x60>)
 800032a:	f002 fb3d 	bl	80029a8 <HAL_SPI_Transmit>
  DelayMicro(1);
 800032e:	2001      	movs	r0, #1
 8000330:	f7ff ff0c 	bl	800014c <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000);			// Send data in buffer
 8000334:	79bb      	ldrb	r3, [r7, #6]
 8000336:	b29a      	uxth	r2, r3
 8000338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800033c:	6839      	ldr	r1, [r7, #0]
 800033e:	4807      	ldr	r0, [pc, #28]	; (800035c <NRF24_Write_Buf+0x60>)
 8000340:	f002 fb32 	bl	80029a8 <HAL_SPI_Transmit>
  CS_OFF;
 8000344:	2201      	movs	r2, #1
 8000346:	2110      	movs	r1, #16
 8000348:	4803      	ldr	r0, [pc, #12]	; (8000358 <NRF24_Write_Buf+0x5c>)
 800034a:	f001 fa30 	bl	80017ae <HAL_GPIO_WritePin>
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010800 	.word	0x40010800
 800035c:	2000052c 	.word	0x2000052c

08000360 <NRF24_FlushRX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushRX(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_RX};
 8000366:	23e2      	movs	r3, #226	; 0xe2
 8000368:	713b      	strb	r3, [r7, #4]
  CS_ON;
 800036a:	2200      	movs	r2, #0
 800036c:	2110      	movs	r1, #16
 800036e:	480b      	ldr	r0, [pc, #44]	; (800039c <NRF24_FlushRX+0x3c>)
 8000370:	f001 fa1d 	bl	80017ae <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 8000374:	1d39      	adds	r1, r7, #4
 8000376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800037a:	2201      	movs	r2, #1
 800037c:	4808      	ldr	r0, [pc, #32]	; (80003a0 <NRF24_FlushRX+0x40>)
 800037e:	f002 fb13 	bl	80029a8 <HAL_SPI_Transmit>
  DelayMicro(1);
 8000382:	2001      	movs	r0, #1
 8000384:	f7ff fee2 	bl	800014c <DelayMicro>
  CS_OFF;
 8000388:	2201      	movs	r2, #1
 800038a:	2110      	movs	r1, #16
 800038c:	4803      	ldr	r0, [pc, #12]	; (800039c <NRF24_FlushRX+0x3c>)
 800038e:	f001 fa0e 	bl	80017ae <HAL_GPIO_WritePin>
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40010800 	.word	0x40010800
 80003a0:	2000052c 	.word	0x2000052c

080003a4 <NRF24_FlushTX>:
//----------------------------------------------------------------------------------------
void NRF24_FlushTX(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
  uint8_t dt[1] = {FLUSH_TX};
 80003aa:	23e1      	movs	r3, #225	; 0xe1
 80003ac:	713b      	strb	r3, [r7, #4]
  CS_ON;
 80003ae:	2200      	movs	r2, #0
 80003b0:	2110      	movs	r1, #16
 80003b2:	480b      	ldr	r0, [pc, #44]	; (80003e0 <NRF24_FlushTX+0x3c>)
 80003b4:	f001 f9fb 	bl	80017ae <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,dt,1,1000);
 80003b8:	1d39      	adds	r1, r7, #4
 80003ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003be:	2201      	movs	r2, #1
 80003c0:	4808      	ldr	r0, [pc, #32]	; (80003e4 <NRF24_FlushTX+0x40>)
 80003c2:	f002 faf1 	bl	80029a8 <HAL_SPI_Transmit>
  DelayMicro(1);
 80003c6:	2001      	movs	r0, #1
 80003c8:	f7ff fec0 	bl	800014c <DelayMicro>
  CS_OFF;
 80003cc:	2201      	movs	r2, #1
 80003ce:	2110      	movs	r1, #16
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <NRF24_FlushTX+0x3c>)
 80003d2:	f001 f9ec 	bl	80017ae <HAL_GPIO_WritePin>
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40010800 	.word	0x40010800
 80003e4:	2000052c 	.word	0x2000052c

080003e8 <NRF24L01_RX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_RX_Mode(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
  uint8_t regval=0x00;
 80003ee:	2300      	movs	r3, #0
 80003f0:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg(CONFIG);
 80003f2:	2000      	movs	r0, #0
 80003f4:	f7ff fecc 	bl	8000190 <NRF24_ReadReg>
 80003f8:	4603      	mov	r3, r0
 80003fa:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP)|(1<<PRIM_RX);	 // Power up module. Write PWR_UP и PRIM_RX bits
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	f043 0303 	orr.w	r3, r3, #3
 8000402:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	4619      	mov	r1, r3
 8000408:	2000      	movs	r0, #0
 800040a:	f7ff fef5 	bl	80001f8 <NRF24_WriteReg>
  CE_SET;
 800040e:	2201      	movs	r2, #1
 8000410:	2108      	movs	r1, #8
 8000412:	4807      	ldr	r0, [pc, #28]	; (8000430 <NRF24L01_RX_Mode+0x48>)
 8000414:	f001 f9cb 	bl	80017ae <HAL_GPIO_WritePin>
  DelayMicro(150);						 // Delay 130 us
 8000418:	2096      	movs	r0, #150	; 0x96
 800041a:	f7ff fe97 	bl	800014c <DelayMicro>
  // Flush buffers
  NRF24_FlushRX();
 800041e:	f7ff ff9f 	bl	8000360 <NRF24_FlushRX>
  NRF24_FlushTX();
 8000422:	f7ff ffbf 	bl	80003a4 <NRF24_FlushTX>
}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40010800 	.word	0x40010800

08000434 <NRF24_ini>:
//----------------------------------------------------------------------------------------
void NRF24_ini(void)    // TRANSMITTER
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	CE_RESET;
 8000438:	2200      	movs	r2, #0
 800043a:	2108      	movs	r1, #8
 800043c:	4824      	ldr	r0, [pc, #144]	; (80004d0 <NRF24_ini+0x9c>)
 800043e:	f001 f9b6 	bl	80017ae <HAL_GPIO_WritePin>
	DelayMicro(5000);
 8000442:	f241 3088 	movw	r0, #5000	; 0x1388
 8000446:	f7ff fe81 	bl	800014c <DelayMicro>

	NRF24_WriteReg(CONFIG, 0x0a); 			// Set PWR_UP bit, enable CRC(1 byte) &Prim_RX:0 (Transmitter)
 800044a:	210a      	movs	r1, #10
 800044c:	2000      	movs	r0, #0
 800044e:	f7ff fed3 	bl	80001f8 <NRF24_WriteReg>

	DelayMicro(5000);
 8000452:	f241 3088 	movw	r0, #5000	; 0x1388
 8000456:	f7ff fe79 	bl	800014c <DelayMicro>

	NRF24_WriteReg(EN_AA, 0x01); 			// Enable Pipe0
 800045a:	2101      	movs	r1, #1
 800045c:	2001      	movs	r0, #1
 800045e:	f7ff fecb 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(EN_RXADDR, 0x01); 		// Enable Pipe0
 8000462:	2101      	movs	r1, #1
 8000464:	2002      	movs	r0, #2
 8000466:	f7ff fec7 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_AW, 0x01); 		// Setup address width=3 bytes
 800046a:	2101      	movs	r1, #1
 800046c:	2003      	movs	r0, #3
 800046e:	f7ff fec3 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(SETUP_RETR, 0x5F); 		// 1500us, 15 retrans
 8000472:	215f      	movs	r1, #95	; 0x5f
 8000474:	2004      	movs	r0, #4
 8000476:	f7ff febf 	bl	80001f8 <NRF24_WriteReg>
	NRF24_ToggleFeatures();
 800047a:	f7ff feeb 	bl	8000254 <NRF24_ToggleFeatures>
	NRF24_WriteReg(FEATURE, 0);
 800047e:	2100      	movs	r1, #0
 8000480:	201d      	movs	r0, #29
 8000482:	f7ff feb9 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0);
 8000486:	2100      	movs	r1, #0
 8000488:	201c      	movs	r0, #28
 800048a:	f7ff feb5 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(STATUS_NRF, 0x70); 		// Reset flags for IRQ
 800048e:	2170      	movs	r1, #112	; 0x70
 8000490:	2007      	movs	r0, #7
 8000492:	f7ff feb1 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); 				// Frequency = 2476 MHz
 8000496:	214c      	movs	r1, #76	; 0x4c
 8000498:	2005      	movs	r0, #5
 800049a:	f7ff fead 	bl	80001f8 <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x06); 		//TX_PWR:0dBm, Datarate:1Mbps
 800049e:	2106      	movs	r1, #6
 80004a0:	2006      	movs	r0, #6
 80004a2:	f7ff fea9 	bl	80001f8 <NRF24_WriteReg>

	NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);			// Write TX address
 80004a6:	2203      	movs	r2, #3
 80004a8:	490a      	ldr	r1, [pc, #40]	; (80004d4 <NRF24_ini+0xa0>)
 80004aa:	2010      	movs	r0, #16
 80004ac:	f7ff ff26 	bl	80002fc <NRF24_Write_Buf>
	NRF24_Write_Buf(RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);		//
 80004b0:	2203      	movs	r2, #3
 80004b2:	4908      	ldr	r1, [pc, #32]	; (80004d4 <NRF24_ini+0xa0>)
 80004b4:	200a      	movs	r0, #10
 80004b6:	f7ff ff21 	bl	80002fc <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P0, TX_PLOAD_WIDTH);				 	//Number of bytes in RX
 80004ba:	210a      	movs	r1, #10
 80004bc:	2011      	movs	r0, #17
 80004be:	f7ff fe9b 	bl	80001f8 <NRF24_WriteReg>

	NRF24L01_RX_Mode();
 80004c2:	f7ff ff91 	bl	80003e8 <NRF24L01_RX_Mode>

	read_config_registers_nrf();
 80004c6:	f000 f807 	bl	80004d8 <read_config_registers_nrf>
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40010800 	.word	0x40010800
 80004d4:	20000000 	.word	0x20000000

080004d8 <read_config_registers_nrf>:
//----------------------------------------------------------------------------------------
// Read config data from nrf registers
void read_config_registers_nrf(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 80004dc:	2001      	movs	r0, #1
 80004de:	f000 fec3 	bl	8001268 <HAL_Delay>

	config_array[0] = NRF24_ReadReg(CONFIG);			// 0x0B
 80004e2:	2000      	movs	r0, #0
 80004e4:	f7ff fe54 	bl	8000190 <NRF24_ReadReg>
 80004e8:	4603      	mov	r3, r0
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <read_config_registers_nrf+0x68>)
 80004ee:	701a      	strb	r2, [r3, #0]
	config_array[1] = NRF24_ReadReg(EN_AA);			    // 0x01
 80004f0:	2001      	movs	r0, #1
 80004f2:	f7ff fe4d 	bl	8000190 <NRF24_ReadReg>
 80004f6:	4603      	mov	r3, r0
 80004f8:	461a      	mov	r2, r3
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <read_config_registers_nrf+0x68>)
 80004fc:	705a      	strb	r2, [r3, #1]
	config_array[2] = NRF24_ReadReg(EN_RXADDR); 		// 0x01
 80004fe:	2002      	movs	r0, #2
 8000500:	f7ff fe46 	bl	8000190 <NRF24_ReadReg>
 8000504:	4603      	mov	r3, r0
 8000506:	461a      	mov	r2, r3
 8000508:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <read_config_registers_nrf+0x68>)
 800050a:	709a      	strb	r2, [r3, #2]
	config_array[3] = NRF24_ReadReg(STATUS_NRF);		// 0x0E
 800050c:	2007      	movs	r0, #7
 800050e:	f7ff fe3f 	bl	8000190 <NRF24_ReadReg>
 8000512:	4603      	mov	r3, r0
 8000514:	461a      	mov	r2, r3
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <read_config_registers_nrf+0x68>)
 8000518:	70da      	strb	r2, [r3, #3]
	config_array[4] = NRF24_ReadReg(RF_SETUP);		    // 0x06
 800051a:	2006      	movs	r0, #6
 800051c:	f7ff fe38 	bl	8000190 <NRF24_ReadReg>
 8000520:	4603      	mov	r3, r0
 8000522:	461a      	mov	r2, r3
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <read_config_registers_nrf+0x68>)
 8000526:	711a      	strb	r2, [r3, #4]

	NRF24_Read_Buf(TX_ADDR,buf1,3);
 8000528:	2203      	movs	r2, #3
 800052a:	4906      	ldr	r1, [pc, #24]	; (8000544 <read_config_registers_nrf+0x6c>)
 800052c:	2010      	movs	r0, #16
 800052e:	f7ff febb 	bl	80002a8 <NRF24_Read_Buf>
	NRF24_Read_Buf(RX_ADDR_P0,buf1,3);
 8000532:	2203      	movs	r2, #3
 8000534:	4903      	ldr	r1, [pc, #12]	; (8000544 <read_config_registers_nrf+0x6c>)
 8000536:	200a      	movs	r0, #10
 8000538:	f7ff feb6 	bl	80002a8 <NRF24_Read_Buf>

}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200000b0 	.word	0x200000b0
 8000544:	2000009c 	.word	0x2000009c

08000548 <NRF24L01_TX_Mode>:
//----------------------------------------------------------------------------------------
void NRF24L01_TX_Mode(uint8_t *pBuf)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  NRF24_Write_Buf(TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 8000550:	2203      	movs	r2, #3
 8000552:	4908      	ldr	r1, [pc, #32]	; (8000574 <NRF24L01_TX_Mode+0x2c>)
 8000554:	2010      	movs	r0, #16
 8000556:	f7ff fed1 	bl	80002fc <NRF24_Write_Buf>
  CE_RESET;
 800055a:	2200      	movs	r2, #0
 800055c:	2108      	movs	r1, #8
 800055e:	4806      	ldr	r0, [pc, #24]	; (8000578 <NRF24L01_TX_Mode+0x30>)
 8000560:	f001 f925 	bl	80017ae <HAL_GPIO_WritePin>
  // Flush buffers
  NRF24_FlushRX();
 8000564:	f7ff fefc 	bl	8000360 <NRF24_FlushRX>
  NRF24_FlushTX();
 8000568:	f7ff ff1c 	bl	80003a4 <NRF24_FlushTX>
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000000 	.word	0x20000000
 8000578:	40010800 	.word	0x40010800

0800057c <NRF24_Transmit>:
//----------------------------------------------------------------------------------------
void NRF24_Transmit(uint8_t addr,uint8_t *pBuf,uint8_t bytes)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	6039      	str	r1, [r7, #0]
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	71bb      	strb	r3, [r7, #6]
  CE_RESET;
 800058c:	2200      	movs	r2, #0
 800058e:	2108      	movs	r1, #8
 8000590:	4813      	ldr	r0, [pc, #76]	; (80005e0 <NRF24_Transmit+0x64>)
 8000592:	f001 f90c 	bl	80017ae <HAL_GPIO_WritePin>
  CS_ON;
 8000596:	2200      	movs	r2, #0
 8000598:	2110      	movs	r1, #16
 800059a:	4811      	ldr	r0, [pc, #68]	; (80005e0 <NRF24_Transmit+0x64>)
 800059c:	f001 f907 	bl	80017ae <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1,&addr,1,1000);	//Send address in NRF module
 80005a0:	1df9      	adds	r1, r7, #7
 80005a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a6:	2201      	movs	r2, #1
 80005a8:	480e      	ldr	r0, [pc, #56]	; (80005e4 <NRF24_Transmit+0x68>)
 80005aa:	f002 f9fd 	bl	80029a8 <HAL_SPI_Transmit>
  DelayMicro(1);
 80005ae:	2001      	movs	r0, #1
 80005b0:	f7ff fdcc 	bl	800014c <DelayMicro>
  HAL_SPI_Transmit(&hspi1,pBuf,bytes,1000); //Send buff in NRF module
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005bc:	6839      	ldr	r1, [r7, #0]
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <NRF24_Transmit+0x68>)
 80005c0:	f002 f9f2 	bl	80029a8 <HAL_SPI_Transmit>
  CS_OFF;
 80005c4:	2201      	movs	r2, #1
 80005c6:	2110      	movs	r1, #16
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <NRF24_Transmit+0x64>)
 80005ca:	f001 f8f0 	bl	80017ae <HAL_GPIO_WritePin>
  CE_SET;
 80005ce:	2201      	movs	r2, #1
 80005d0:	2108      	movs	r1, #8
 80005d2:	4803      	ldr	r0, [pc, #12]	; (80005e0 <NRF24_Transmit+0x64>)
 80005d4:	f001 f8eb 	bl	80017ae <HAL_GPIO_WritePin>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40010800 	.word	0x40010800
 80005e4:	2000052c 	.word	0x2000052c

080005e8 <NRF24L01_Send>:
//----------------------------------------------------------------------------------------
uint8_t NRF24L01_Send(uint8_t *pBuf)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint8_t status=0x00, regval=0x00;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
 80005f4:	2300      	movs	r3, #0
 80005f6:	73bb      	strb	r3, [r7, #14]
  NRF24L01_TX_Mode(pBuf);
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff ffa5 	bl	8000548 <NRF24L01_TX_Mode>
  regval = NRF24_ReadReg(CONFIG);
 80005fe:	2000      	movs	r0, #0
 8000600:	f7ff fdc6 	bl	8000190 <NRF24_ReadReg>
 8000604:	4603      	mov	r3, r0
 8000606:	73bb      	strb	r3, [r7, #14]
  // If module in sleep mode, wake up it send PWR_UP and PRIM_RX bits in CONFIG
  regval |= (1<<PWR_UP);			// Set power up
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	f043 0302 	orr.w	r3, r3, #2
 800060e:	73bb      	strb	r3, [r7, #14]
  regval &= ~(1<<PRIM_RX);			// Set TX mode
 8000610:	7bbb      	ldrb	r3, [r7, #14]
 8000612:	f023 0301 	bic.w	r3, r3, #1
 8000616:	73bb      	strb	r3, [r7, #14]
  NRF24_WriteReg(CONFIG,regval);
 8000618:	7bbb      	ldrb	r3, [r7, #14]
 800061a:	4619      	mov	r1, r3
 800061c:	2000      	movs	r0, #0
 800061e:	f7ff fdeb 	bl	80001f8 <NRF24_WriteReg>
  DelayMicro(150); 					// Delay more then 130 us
 8000622:	2096      	movs	r0, #150	; 0x96
 8000624:	f7ff fd92 	bl	800014c <DelayMicro>
  NRF24_Transmit(WR_TX_PLOAD, pBuf, TX_PLOAD_WIDTH);	// Send data
 8000628:	220a      	movs	r2, #10
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	20a0      	movs	r0, #160	; 0xa0
 800062e:	f7ff ffa5 	bl	800057c <NRF24_Transmit>

  CE_SET;
 8000632:	2201      	movs	r2, #1
 8000634:	2108      	movs	r1, #8
 8000636:	481c      	ldr	r0, [pc, #112]	; (80006a8 <NRF24L01_Send+0xc0>)
 8000638:	f001 f8b9 	bl	80017ae <HAL_GPIO_WritePin>
  DelayMicro(15); 					//minimum 10us high pulse (Page 21)
 800063c:	200f      	movs	r0, #15
 800063e:	f7ff fd85 	bl	800014c <DelayMicro>
  CE_RESET;
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	4818      	ldr	r0, [pc, #96]	; (80006a8 <NRF24L01_Send+0xc0>)
 8000648:	f001 f8b1 	bl	80017ae <HAL_GPIO_WritePin>

  // Waiting interrupt signal from IRQ
  while((GPIO_PinState)IRQ == GPIO_PIN_SET){}
 800064c:	bf00      	nop
 800064e:	2104      	movs	r1, #4
 8000650:	4815      	ldr	r0, [pc, #84]	; (80006a8 <NRF24L01_Send+0xc0>)
 8000652:	f001 f895 	bl	8001780 <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d0f8      	beq.n	800064e <NRF24L01_Send+0x66>

  status = NRF24_ReadReg(STATUS_NRF);		// Read status sent data to RX
 800065c:	2007      	movs	r0, #7
 800065e:	f7ff fd97 	bl	8000190 <NRF24_ReadReg>
 8000662:	4603      	mov	r3, r0
 8000664:	73fb      	strb	r3, [r7, #15]
  if(status & TX_DS) 	     //TX_DS == 0x20   // When transmitted data was receive, and we take back ACK answer
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	f003 0320 	and.w	r3, r3, #32
 800066c:	2b00      	cmp	r3, #0
 800066e:	d004      	beq.n	800067a <NRF24L01_Send+0x92>
  {
      NRF24_WriteReg(STATUS_NRF, 0x20);
 8000670:	2120      	movs	r1, #32
 8000672:	2007      	movs	r0, #7
 8000674:	f7ff fdc0 	bl	80001f8 <NRF24_WriteReg>
 8000678:	e00a      	b.n	8000690 <NRF24L01_Send+0xa8>
  }
  else if(status & MAX_RT)   //MAX_RT == 0x10  // Retransmeet data flag
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	f003 0310 	and.w	r3, r3, #16
 8000680:	2b00      	cmp	r3, #0
 8000682:	d005      	beq.n	8000690 <NRF24L01_Send+0xa8>
  {
    NRF24_WriteReg(STATUS_NRF, 0x10);
 8000684:	2110      	movs	r1, #16
 8000686:	2007      	movs	r0, #7
 8000688:	f7ff fdb6 	bl	80001f8 <NRF24_WriteReg>
    NRF24_FlushTX();
 800068c:	f7ff fe8a 	bl	80003a4 <NRF24_FlushTX>
  }

  regval = NRF24_ReadReg(OBSERVE_TX);   // Return Count lost packets and count transmitted packets
 8000690:	2008      	movs	r0, #8
 8000692:	f7ff fd7d 	bl	8000190 <NRF24_ReadReg>
 8000696:	4603      	mov	r3, r0
 8000698:	73bb      	strb	r3, [r7, #14]

  // Switch on RX mode
  NRF24L01_RX_Mode();
 800069a:	f7ff fea5 	bl	80003e8 <NRF24L01_RX_Mode>

  return regval;
 800069e:	7bbb      	ldrb	r3, [r7, #14]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40010800 	.word	0x40010800

080006ac <nrf_communication_test>:
//----------------------------------------------------------------------------------------
void nrf_communication_test(void)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b091      	sub	sp, #68	; 0x44
 80006b0:	af00      	add	r7, sp, #0
	NRF24_ini();
 80006b2:	f7ff febf 	bl	8000434 <NRF24_ini>

	// Print config array config_array[0]  (Config registers)
	char ctr[5] = {0};
 80006b6:	2300      	movs	r3, #0
 80006b8:	637b      	str	r3, [r7, #52]	; 0x34
 80006ba:	2300      	movs	r3, #0
 80006bc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	char ctr_buf[5] = {0};
 80006c0:	2300      	movs	r3, #0
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006c4:	2300      	movs	r3, #0
 80006c6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
//
//		memset(ctr_buf, 0, sizeof(ctr_buf));
//		memset(ctr, 0, sizeof(ctr));
//	}

	uint8_t retr_cnt, dt = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
//	uint16_t i=1;
//	uint16_t retr_cnt_full =0;

	int test_data = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c

	while(1)
	{
		// Test transmit data
		sprintf(buf1, "%d", test_data);
 80006d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006d6:	495d      	ldr	r1, [pc, #372]	; (800084c <nrf_communication_test+0x1a0>)
 80006d8:	485d      	ldr	r0, [pc, #372]	; (8000850 <nrf_communication_test+0x1a4>)
 80006da:	f002 fe99 	bl	8003410 <siprintf>

		// Print transmit data
		uint8_t test[25] = {0};
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
 80006f2:	751a      	strb	r2, [r3, #20]
		uint8_t test_i[10] = {0};
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	809a      	strh	r2, [r3, #4]

		ssd1306_SetCursor(0, 16);
 8000702:	2110      	movs	r1, #16
 8000704:	2000      	movs	r0, #0
 8000706:	f000 fa8d 	bl	8000c24 <ssd1306_SetCursor>
		strcpy(test, "Data:");
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	4a51      	ldr	r2, [pc, #324]	; (8000854 <nrf_communication_test+0x1a8>)
 8000710:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000714:	6018      	str	r0, [r3, #0]
 8000716:	3304      	adds	r3, #4
 8000718:	8019      	strh	r1, [r3, #0]
		strcat(test, buf1);
 800071a:	f107 0310 	add.w	r3, r7, #16
 800071e:	494c      	ldr	r1, [pc, #304]	; (8000850 <nrf_communication_test+0x1a4>)
 8000720:	4618      	mov	r0, r3
 8000722:	f002 fe95 	bl	8003450 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 8000726:	4a4c      	ldr	r2, [pc, #304]	; (8000858 <nrf_communication_test+0x1ac>)
 8000728:	f107 0010 	add.w	r0, r7, #16
 800072c:	2301      	movs	r3, #1
 800072e:	ca06      	ldmia	r2, {r1, r2}
 8000730:	f000 fa52 	bl	8000bd8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000734:	f000 f940 	bl	80009b8 <ssd1306_UpdateScreen>

		dt = NRF24L01_Send(buf1);			// Transmit data
 8000738:	4845      	ldr	r0, [pc, #276]	; (8000850 <nrf_communication_test+0x1a4>)
 800073a:	f7ff ff55 	bl	80005e8 <NRF24L01_Send>
 800073e:	4603      	mov	r3, r0
 8000740:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		retr_cnt = dt & 0xF;
 8000744:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000748:	f003 030f 	and.w	r3, r3, #15
 800074c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		i++;
 8000750:	4b42      	ldr	r3, [pc, #264]	; (800085c <nrf_communication_test+0x1b0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	3301      	adds	r3, #1
 8000756:	4a41      	ldr	r2, [pc, #260]	; (800085c <nrf_communication_test+0x1b0>)
 8000758:	6013      	str	r3, [r2, #0]
		retr_cnt_full += retr_cnt;
 800075a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800075e:	4b40      	ldr	r3, [pc, #256]	; (8000860 <nrf_communication_test+0x1b4>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4413      	add	r3, r2
 8000764:	4a3e      	ldr	r2, [pc, #248]	; (8000860 <nrf_communication_test+0x1b4>)
 8000766:	6013      	str	r3, [r2, #0]

		// Print transmit counter
		memset(test, 0, sizeof(test));
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	2219      	movs	r2, #25
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f002 fe45 	bl	8003400 <memset>
		memset(test_i, 0, sizeof(test_i));
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	220a      	movs	r2, #10
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f002 fe3f 	bl	8003400 <memset>

		ssd1306_SetCursor(0, 26);
 8000782:	211a      	movs	r1, #26
 8000784:	2000      	movs	r0, #0
 8000786:	f000 fa4d 	bl	8000c24 <ssd1306_SetCursor>
		strcpy(test, "Conut trans:");
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	4a35      	ldr	r2, [pc, #212]	; (8000864 <nrf_communication_test+0x1b8>)
 8000790:	461c      	mov	r4, r3
 8000792:	4613      	mov	r3, r2
 8000794:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000796:	c407      	stmia	r4!, {r0, r1, r2}
 8000798:	7023      	strb	r3, [r4, #0]
		// number in string
		itoa(i, test_i, 10);
 800079a:	4b30      	ldr	r3, [pc, #192]	; (800085c <nrf_communication_test+0x1b0>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	1d39      	adds	r1, r7, #4
 80007a0:	220a      	movs	r2, #10
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 fe2a 	bl	80033fc <itoa>
		strcat(test, test_i);
 80007a8:	1d3a      	adds	r2, r7, #4
 80007aa:	f107 0310 	add.w	r3, r7, #16
 80007ae:	4611      	mov	r1, r2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 fe4d 	bl	8003450 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 80007b6:	4a28      	ldr	r2, [pc, #160]	; (8000858 <nrf_communication_test+0x1ac>)
 80007b8:	f107 0010 	add.w	r0, r7, #16
 80007bc:	2301      	movs	r3, #1
 80007be:	ca06      	ldmia	r2, {r1, r2}
 80007c0:	f000 fa0a 	bl	8000bd8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80007c4:	f000 f8f8 	bl	80009b8 <ssd1306_UpdateScreen>

		// Print retransmeet counter
		memset(test, 0, sizeof(test));
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	2219      	movs	r2, #25
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f002 fe15 	bl	8003400 <memset>
		memset(test_i, 0, sizeof(test_i));
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	220a      	movs	r2, #10
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f002 fe0f 	bl	8003400 <memset>

		ssd1306_SetCursor(0, 36);
 80007e2:	2124      	movs	r1, #36	; 0x24
 80007e4:	2000      	movs	r0, #0
 80007e6:	f000 fa1d 	bl	8000c24 <ssd1306_SetCursor>
		strcpy(test, "Retransm:");
 80007ea:	f107 0310 	add.w	r3, r7, #16
 80007ee:	4a1e      	ldr	r2, [pc, #120]	; (8000868 <nrf_communication_test+0x1bc>)
 80007f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80007f2:	c303      	stmia	r3!, {r0, r1}
 80007f4:	801a      	strh	r2, [r3, #0]
		itoa(retr_cnt_full, test_i, 10);
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <nrf_communication_test+0x1b4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	1d39      	adds	r1, r7, #4
 80007fc:	220a      	movs	r2, #10
 80007fe:	4618      	mov	r0, r3
 8000800:	f002 fdfc 	bl	80033fc <itoa>
		strcat(test, test_i);
 8000804:	1d3a      	adds	r2, r7, #4
 8000806:	f107 0310 	add.w	r3, r7, #16
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f002 fe1f 	bl	8003450 <strcat>
		ssd1306_WriteString(test,  Font_7x10, White);
 8000812:	4a11      	ldr	r2, [pc, #68]	; (8000858 <nrf_communication_test+0x1ac>)
 8000814:	f107 0010 	add.w	r0, r7, #16
 8000818:	2301      	movs	r3, #1
 800081a:	ca06      	ldmia	r2, {r1, r2}
 800081c:	f000 f9dc 	bl	8000bd8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000820:	f000 f8ca 	bl	80009b8 <ssd1306_UpdateScreen>

		// Print lost paket
		memset(test, 0, sizeof(test));
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	2219      	movs	r2, #25
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f002 fde7 	bl	8003400 <memset>
		memset(test_i, 0, sizeof(test_i));
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	220a      	movs	r2, #10
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f002 fde1 	bl	8003400 <memset>
//		itoa(cnt_lost, test_i, 10);
//		strcat(test, test_i);
//		ssd1306_WriteString(test,  Font_7x10, White);
//		ssd1306_UpdateScreen();

		test_data++;
 800083e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000840:	3301      	adds	r3, #1
 8000842:	63fb      	str	r3, [r7, #60]	; 0x3c

		HAL_Delay(250);
 8000844:	20fa      	movs	r0, #250	; 0xfa
 8000846:	f000 fd0f 	bl	8001268 <HAL_Delay>
	{
 800084a:	e743      	b.n	80006d4 <nrf_communication_test+0x28>
 800084c:	08003d40 	.word	0x08003d40
 8000850:	2000009c 	.word	0x2000009c
 8000854:	08003d44 	.word	0x08003d44
 8000858:	20000008 	.word	0x20000008
 800085c:	20000004 	.word	0x20000004
 8000860:	200000c0 	.word	0x200000c0
 8000864:	08003d4c 	.word	0x08003d4c
 8000868:	08003d5c 	.word	0x08003d5c

0800086c <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af04      	add	r7, sp, #16
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8000876:	230a      	movs	r3, #10
 8000878:	9302      	str	r3, [sp, #8]
 800087a:	2301      	movs	r3, #1
 800087c:	9301      	str	r3, [sp, #4]
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	2301      	movs	r3, #1
 8000884:	2200      	movs	r2, #0
 8000886:	2178      	movs	r1, #120	; 0x78
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <ssd1306_WriteCommand+0x2c>)
 800088a:	f001 f8ed 	bl	8001a68 <HAL_I2C_Mem_Write>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200004d8 	.word	0x200004d8

0800089c <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 80008a0:	2064      	movs	r0, #100	; 0x64
 80008a2:	f000 fce1 	bl	8001268 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 80008a6:	20ae      	movs	r0, #174	; 0xae
 80008a8:	f7ff ffe0 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80008ac:	2020      	movs	r0, #32
 80008ae:	f7ff ffdd 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80008b2:	2010      	movs	r0, #16
 80008b4:	f7ff ffda 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80008b8:	20b0      	movs	r0, #176	; 0xb0
 80008ba:	f7ff ffd7 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80008be:	20c8      	movs	r0, #200	; 0xc8
 80008c0:	f7ff ffd4 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff ffd1 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80008ca:	2010      	movs	r0, #16
 80008cc:	f7ff ffce 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 80008d0:	2040      	movs	r0, #64	; 0x40
 80008d2:	f7ff ffcb 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80008d6:	2081      	movs	r0, #129	; 0x81
 80008d8:	f7ff ffc8 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80008dc:	20ff      	movs	r0, #255	; 0xff
 80008de:	f7ff ffc5 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80008e2:	20a1      	movs	r0, #161	; 0xa1
 80008e4:	f7ff ffc2 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80008e8:	20a6      	movs	r0, #166	; 0xa6
 80008ea:	f7ff ffbf 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80008ee:	20a8      	movs	r0, #168	; 0xa8
 80008f0:	f7ff ffbc 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80008f4:	203f      	movs	r0, #63	; 0x3f
 80008f6:	f7ff ffb9 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80008fa:	20a4      	movs	r0, #164	; 0xa4
 80008fc:	f7ff ffb6 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8000900:	20d3      	movs	r0, #211	; 0xd3
 8000902:	f7ff ffb3 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff ffb0 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800090c:	20d5      	movs	r0, #213	; 0xd5
 800090e:	f7ff ffad 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000912:	20f0      	movs	r0, #240	; 0xf0
 8000914:	f7ff ffaa 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000918:	20d9      	movs	r0, #217	; 0xd9
 800091a:	f7ff ffa7 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 800091e:	2022      	movs	r0, #34	; 0x22
 8000920:	f7ff ffa4 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8000924:	20da      	movs	r0, #218	; 0xda
 8000926:	f7ff ffa1 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 800092a:	2012      	movs	r0, #18
 800092c:	f7ff ff9e 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8000930:	20db      	movs	r0, #219	; 0xdb
 8000932:	f7ff ff9b 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000936:	2020      	movs	r0, #32
 8000938:	f7ff ff98 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800093c:	208d      	movs	r0, #141	; 0x8d
 800093e:	f7ff ff95 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8000942:	2014      	movs	r0, #20
 8000944:	f7ff ff92 	bl	800086c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000948:	20af      	movs	r0, #175	; 0xaf
 800094a:	f7ff ff8f 	bl	800086c <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 800094e:	2000      	movs	r0, #0
 8000950:	f000 f810 	bl	8000974 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8000954:	f000 f830 	bl	80009b8 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <ssd1306_Init+0xd4>)
 800095a:	2200      	movs	r2, #0
 800095c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800095e:	4b04      	ldr	r3, [pc, #16]	; (8000970 <ssd1306_Init+0xd4>)
 8000960:	2200      	movs	r2, #0
 8000962:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8000964:	4b02      	ldr	r3, [pc, #8]	; (8000970 <ssd1306_Init+0xd4>)
 8000966:	2201      	movs	r2, #1
 8000968:	715a      	strb	r2, [r3, #5]

	return 1;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200004c4 	.word	0x200004c4

08000974 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	e00d      	b.n	80009a0 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d101      	bne.n	800098e <ssd1306_Fill+0x1a>
 800098a:	2100      	movs	r1, #0
 800098c:	e000      	b.n	8000990 <ssd1306_Fill+0x1c>
 800098e:	21ff      	movs	r1, #255	; 0xff
 8000990:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <ssd1306_Fill+0x40>)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	4413      	add	r3, r2
 8000996:	460a      	mov	r2, r1
 8000998:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	3301      	adds	r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009a6:	d3ed      	bcc.n	8000984 <ssd1306_Fill+0x10>
	}
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	200000c4 	.word	0x200000c4

080009b8 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 80009be:	2300      	movs	r3, #0
 80009c0:	71fb      	strb	r3, [r7, #7]
 80009c2:	e01d      	b.n	8000a00 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	3b50      	subs	r3, #80	; 0x50
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ff4e 	bl	800086c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff ff4b 	bl	800086c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 80009d6:	2010      	movs	r0, #16
 80009d8:	f7ff ff48 	bl	800086c <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	01db      	lsls	r3, r3, #7
 80009e0:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <ssd1306_UpdateScreen+0x58>)
 80009e2:	4413      	add	r3, r2
 80009e4:	2264      	movs	r2, #100	; 0x64
 80009e6:	9202      	str	r2, [sp, #8]
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	9201      	str	r2, [sp, #4]
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	2301      	movs	r3, #1
 80009f0:	2240      	movs	r2, #64	; 0x40
 80009f2:	2178      	movs	r1, #120	; 0x78
 80009f4:	4807      	ldr	r0, [pc, #28]	; (8000a14 <ssd1306_UpdateScreen+0x5c>)
 80009f6:	f001 f837 	bl	8001a68 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	3301      	adds	r3, #1
 80009fe:	71fb      	strb	r3, [r7, #7]
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2b07      	cmp	r3, #7
 8000a04:	d9de      	bls.n	80009c4 <ssd1306_UpdateScreen+0xc>
	}
}
 8000a06:	bf00      	nop
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200000c4 	.word	0x200000c4
 8000a14:	200004d8 	.word	0x200004d8

08000a18 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
 8000a22:	460b      	mov	r3, r1
 8000a24:	71bb      	strb	r3, [r7, #6]
 8000a26:	4613      	mov	r3, r2
 8000a28:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	db48      	blt.n	8000ac4 <ssd1306_DrawPixel+0xac>
 8000a32:	79bb      	ldrb	r3, [r7, #6]
 8000a34:	2b3f      	cmp	r3, #63	; 0x3f
 8000a36:	d845      	bhi.n	8000ac4 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8000a38:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <ssd1306_DrawPixel+0xb8>)
 8000a3a:	791b      	ldrb	r3, [r3, #4]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d006      	beq.n	8000a4e <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8000a40:	797b      	ldrb	r3, [r7, #5]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	bf0c      	ite	eq
 8000a46:	2301      	moveq	r3, #1
 8000a48:	2300      	movne	r3, #0
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 8000a4e:	797b      	ldrb	r3, [r7, #5]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d11a      	bne.n	8000a8a <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000a54:	79fa      	ldrb	r2, [r7, #7]
 8000a56:	79bb      	ldrb	r3, [r7, #6]
 8000a58:	08db      	lsrs	r3, r3, #3
 8000a5a:	b2d8      	uxtb	r0, r3
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	01db      	lsls	r3, r3, #7
 8000a60:	4413      	add	r3, r2
 8000a62:	4a1c      	ldr	r2, [pc, #112]	; (8000ad4 <ssd1306_DrawPixel+0xbc>)
 8000a64:	5cd3      	ldrb	r3, [r2, r3]
 8000a66:	b25a      	sxtb	r2, r3
 8000a68:	79bb      	ldrb	r3, [r7, #6]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	2101      	movs	r1, #1
 8000a70:	fa01 f303 	lsl.w	r3, r1, r3
 8000a74:	b25b      	sxtb	r3, r3
 8000a76:	4313      	orrs	r3, r2
 8000a78:	b259      	sxtb	r1, r3
 8000a7a:	79fa      	ldrb	r2, [r7, #7]
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	01db      	lsls	r3, r3, #7
 8000a80:	4413      	add	r3, r2
 8000a82:	b2c9      	uxtb	r1, r1
 8000a84:	4a13      	ldr	r2, [pc, #76]	; (8000ad4 <ssd1306_DrawPixel+0xbc>)
 8000a86:	54d1      	strb	r1, [r2, r3]
 8000a88:	e01d      	b.n	8000ac6 <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a8a:	79fa      	ldrb	r2, [r7, #7]
 8000a8c:	79bb      	ldrb	r3, [r7, #6]
 8000a8e:	08db      	lsrs	r3, r3, #3
 8000a90:	b2d8      	uxtb	r0, r3
 8000a92:	4603      	mov	r3, r0
 8000a94:	01db      	lsls	r3, r3, #7
 8000a96:	4413      	add	r3, r2
 8000a98:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <ssd1306_DrawPixel+0xbc>)
 8000a9a:	5cd3      	ldrb	r3, [r2, r3]
 8000a9c:	b25a      	sxtb	r2, r3
 8000a9e:	79bb      	ldrb	r3, [r7, #6]
 8000aa0:	f003 0307 	and.w	r3, r3, #7
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aaa:	b25b      	sxtb	r3, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	b259      	sxtb	r1, r3
 8000ab4:	79fa      	ldrb	r2, [r7, #7]
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	01db      	lsls	r3, r3, #7
 8000aba:	4413      	add	r3, r2
 8000abc:	b2c9      	uxtb	r1, r1
 8000abe:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <ssd1306_DrawPixel+0xbc>)
 8000ac0:	54d1      	strb	r1, [r2, r3]
 8000ac2:	e000      	b.n	8000ac6 <ssd1306_DrawPixel+0xae>
		return;
 8000ac4:	bf00      	nop
	}
}
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	200004c4 	.word	0x200004c4
 8000ad4:	200000c4 	.word	0x200000c4

08000ad8 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b089      	sub	sp, #36	; 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4604      	mov	r4, r0
 8000ae0:	1d38      	adds	r0, r7, #4
 8000ae2:	e880 0006 	stmia.w	r0, {r1, r2}
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	4623      	mov	r3, r4
 8000aea:	73fb      	strb	r3, [r7, #15]
 8000aec:	4613      	mov	r3, r2
 8000aee:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000af0:	4b38      	ldr	r3, [pc, #224]	; (8000bd4 <ssd1306_WriteChar+0xfc>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	793b      	ldrb	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	2b7f      	cmp	r3, #127	; 0x7f
 8000afc:	dc06      	bgt.n	8000b0c <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000afe:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <ssd1306_WriteChar+0xfc>)
 8000b00:	885b      	ldrh	r3, [r3, #2]
 8000b02:	461a      	mov	r2, r3
 8000b04:	797b      	ldrb	r3, [r7, #5]
 8000b06:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000b08:	2b3f      	cmp	r3, #63	; 0x3f
 8000b0a:	dd01      	ble.n	8000b10 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	e05d      	b.n	8000bcc <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
 8000b14:	e04c      	b.n	8000bb0 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	3b20      	subs	r3, #32
 8000b1c:	7979      	ldrb	r1, [r7, #5]
 8000b1e:	fb01 f303 	mul.w	r3, r1, r3
 8000b22:	4619      	mov	r1, r3
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	440b      	add	r3, r1
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	4413      	add	r3, r2
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8000b30:	2300      	movs	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]
 8000b34:	e034      	b.n	8000ba0 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 8000b36:	697a      	ldr	r2, [r7, #20]
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d012      	beq.n	8000b6c <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000b46:	4b23      	ldr	r3, [pc, #140]	; (8000bd4 <ssd1306_WriteChar+0xfc>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	4413      	add	r3, r2
 8000b52:	b2d8      	uxtb	r0, r3
 8000b54:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <ssd1306_WriteChar+0xfc>)
 8000b56:	885b      	ldrh	r3, [r3, #2]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	4413      	add	r3, r2
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	7bba      	ldrb	r2, [r7, #14]
 8000b64:	4619      	mov	r1, r3
 8000b66:	f7ff ff57 	bl	8000a18 <ssd1306_DrawPixel>
 8000b6a:	e016      	b.n	8000b9a <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000b6c:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <ssd1306_WriteChar+0xfc>)
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	4413      	add	r3, r2
 8000b78:	b2d8      	uxtb	r0, r3
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <ssd1306_WriteChar+0xfc>)
 8000b7c:	885b      	ldrh	r3, [r3, #2]
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	4413      	add	r3, r2
 8000b86:	b2d9      	uxtb	r1, r3
 8000b88:	7bbb      	ldrb	r3, [r7, #14]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	bf0c      	ite	eq
 8000b8e:	2301      	moveq	r3, #1
 8000b90:	2300      	movne	r3, #0
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	461a      	mov	r2, r3
 8000b96:	f7ff ff3f 	bl	8000a18 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	61bb      	str	r3, [r7, #24]
 8000ba0:	793b      	ldrb	r3, [r7, #4]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d3c5      	bcc.n	8000b36 <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3301      	adds	r3, #1
 8000bae:	61fb      	str	r3, [r7, #28]
 8000bb0:	797b      	ldrb	r3, [r7, #5]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d3ad      	bcc.n	8000b16 <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <ssd1306_WriteChar+0xfc>)
 8000bbc:	881a      	ldrh	r2, [r3, #0]
 8000bbe:	793b      	ldrb	r3, [r7, #4]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	4413      	add	r3, r2
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <ssd1306_WriteChar+0xfc>)
 8000bc8:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3724      	adds	r7, #36	; 0x24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd90      	pop	{r4, r7, pc}
 8000bd4:	200004c4 	.word	0x200004c4

08000bd8 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	1d38      	adds	r0, r7, #4
 8000be2:	e880 0006 	stmia.w	r0, {r1, r2}
 8000be6:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 8000be8:	e012      	b.n	8000c10 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	7818      	ldrb	r0, [r3, #0]
 8000bee:	78fb      	ldrb	r3, [r7, #3]
 8000bf0:	1d3a      	adds	r2, r7, #4
 8000bf2:	ca06      	ldmia	r2, {r1, r2}
 8000bf4:	f7ff ff70 	bl	8000ad8 <ssd1306_WriteChar>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d002      	beq.n	8000c0a <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	e008      	b.n	8000c1c <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
	while (*str)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d1e8      	bne.n	8000bea <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	460a      	mov	r2, r1
 8000c2e:	71fb      	strb	r3, [r7, #7]
 8000c30:	4613      	mov	r3, r2
 8000c32:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <ssd1306_SetCursor+0x2c>)
 8000c3a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <ssd1306_SetCursor+0x2c>)
 8000c42:	805a      	strh	r2, [r3, #2]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	200004c4 	.word	0x200004c4

08000c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5a:	f000 faa3 	bl	80011a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5e:	f000 f82f 	bl	8000cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c62:	f000 f8d7 	bl	8000e14 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c66:	f000 f871 	bl	8000d4c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c6a:	f000 f89d 	bl	8000da8 <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  ssd1306_Init();
 8000c6e:	f7ff fe15 	bl	800089c <ssd1306_Init>
  ssd1306_Fill(Black);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff fe7e 	bl	8000974 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8000c78:	f7ff fe9e 	bl	80009b8 <ssd1306_UpdateScreen>


   // Test write on OLED
   ssd1306_SetCursor(0, 0);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f7ff ffd0 	bl	8000c24 <ssd1306_SetCursor>
   char test_main[20] = {0};
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
   strcpy(test_main, "NRF24L01 TX");
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <main+0x64>)
 8000c9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   ssd1306_WriteString(test_main,  Font_7x10, White);
 8000ca0:	4a06      	ldr	r2, [pc, #24]	; (8000cbc <main+0x68>)
 8000ca2:	1d38      	adds	r0, r7, #4
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	ca06      	ldmia	r2, {r1, r2}
 8000ca8:	f7ff ff96 	bl	8000bd8 <ssd1306_WriteString>
   ssd1306_UpdateScreen();
 8000cac:	f7ff fe84 	bl	80009b8 <ssd1306_UpdateScreen>
  while (1)
  {
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//	  HAL_Delay(300);

	  nrf_communication_test();
 8000cb0:	f7ff fcfc 	bl	80006ac <nrf_communication_test>
  {
 8000cb4:	e7fc      	b.n	8000cb0 <main+0x5c>
 8000cb6:	bf00      	nop
 8000cb8:	08003d68 	.word	0x08003d68
 8000cbc:	20000008 	.word	0x20000008

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b090      	sub	sp, #64	; 0x40
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 0318 	add.w	r3, r7, #24
 8000cca:	2228      	movs	r2, #40	; 0x28
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f002 fb96 	bl	8003400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000cfe:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d04:	f107 0318 	add.w	r3, r7, #24
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f001 f9c3 	bl	8002094 <HAL_RCC_OscConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d14:	f000 f8fc 	bl	8000f10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d18:	230f      	movs	r3, #15
 8000d1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	2102      	movs	r1, #2
 8000d32:	4618      	mov	r0, r3
 8000d34:	f001 fc2e 	bl	8002594 <HAL_RCC_ClockConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d3e:	f000 f8e7 	bl	8000f10 <Error_Handler>
  }
}
 8000d42:	bf00      	nop
 8000d44:	3740      	adds	r7, #64	; 0x40
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <MX_I2C1_Init+0x50>)
 8000d52:	4a13      	ldr	r2, [pc, #76]	; (8000da0 <MX_I2C1_Init+0x54>)
 8000d54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_I2C1_Init+0x50>)
 8000d58:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <MX_I2C1_Init+0x58>)
 8000d5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_I2C1_Init+0x50>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_I2C1_Init+0x50>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_I2C1_Init+0x50>)
 8000d6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <MX_I2C1_Init+0x50>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_I2C1_Init+0x50>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <MX_I2C1_Init+0x50>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_I2C1_Init+0x50>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <MX_I2C1_Init+0x50>)
 8000d8a:	f000 fd29 	bl	80017e0 <HAL_I2C_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d94:	f000 f8bc 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200004d8 	.word	0x200004d8
 8000da0:	40005400 	.word	0x40005400
 8000da4:	000186a0 	.word	0x000186a0

08000da8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000dae:	4a18      	ldr	r2, [pc, #96]	; (8000e10 <MX_SPI1_Init+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000db2:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000db4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000db8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000ddc:	2220      	movs	r2, #32
 8000dde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000de0:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dec:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000df4:	220a      	movs	r2, #10
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000df8:	4804      	ldr	r0, [pc, #16]	; (8000e0c <MX_SPI1_Init+0x64>)
 8000dfa:	f001 fd51 	bl	80028a0 <HAL_SPI_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e04:	f000 f884 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2000052c 	.word	0x2000052c
 8000e10:	40013000 	.word	0x40013000

08000e14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1a:	f107 0310 	add.w	r3, r7, #16
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e28:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <MX_GPIO_Init+0xf0>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4a35      	ldr	r2, [pc, #212]	; (8000f04 <MX_GPIO_Init+0xf0>)
 8000e2e:	f043 0310 	orr.w	r3, r3, #16
 8000e32:	6193      	str	r3, [r2, #24]
 8000e34:	4b33      	ldr	r3, [pc, #204]	; (8000f04 <MX_GPIO_Init+0xf0>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	f003 0310 	and.w	r3, r3, #16
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e40:	4b30      	ldr	r3, [pc, #192]	; (8000f04 <MX_GPIO_Init+0xf0>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a2f      	ldr	r2, [pc, #188]	; (8000f04 <MX_GPIO_Init+0xf0>)
 8000e46:	f043 0320 	orr.w	r3, r3, #32
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <MX_GPIO_Init+0xf0>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0320 	and.w	r3, r3, #32
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <MX_GPIO_Init+0xf0>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a29      	ldr	r2, [pc, #164]	; (8000f04 <MX_GPIO_Init+0xf0>)
 8000e5e:	f043 0304 	orr.w	r3, r3, #4
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <MX_GPIO_Init+0xf0>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <MX_GPIO_Init+0xf0>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a23      	ldr	r2, [pc, #140]	; (8000f04 <MX_GPIO_Init+0xf0>)
 8000e76:	f043 0308 	orr.w	r3, r3, #8
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MX_GPIO_Init+0xf0>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0308 	and.w	r3, r3, #8
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8e:	481e      	ldr	r0, [pc, #120]	; (8000f08 <MX_GPIO_Init+0xf4>)
 8000e90:	f000 fc8d 	bl	80017ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2108      	movs	r1, #8
 8000e98:	481c      	ldr	r0, [pc, #112]	; (8000f0c <MX_GPIO_Init+0xf8>)
 8000e9a:	f000 fc88 	bl	80017ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2110      	movs	r1, #16
 8000ea2:	481a      	ldr	r0, [pc, #104]	; (8000f0c <MX_GPIO_Init+0xf8>)
 8000ea4:	f000 fc83 	bl	80017ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4811      	ldr	r0, [pc, #68]	; (8000f08 <MX_GPIO_Init+0xf4>)
 8000ec2:	f000 fad9 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 0310 	add.w	r3, r7, #16
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480c      	ldr	r0, [pc, #48]	; (8000f0c <MX_GPIO_Init+0xf8>)
 8000eda:	f000 facd 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000ede:	2318      	movs	r3, #24
 8000ee0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 0310 	add.w	r3, r7, #16
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_GPIO_Init+0xf8>)
 8000ef6:	f000 fabf 	bl	8001478 <HAL_GPIO_Init>

}
 8000efa:	bf00      	nop
 8000efc:	3720      	adds	r7, #32
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40011000 	.word	0x40011000
 8000f0c:	40010800 	.word	0x40010800

08000f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f14:	b672      	cpsid	i
}
 8000f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <Error_Handler+0x8>
	...

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <HAL_MspInit+0x5c>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <HAL_MspInit+0x5c>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6193      	str	r3, [r2, #24]
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_MspInit+0x5c>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <HAL_MspInit+0x5c>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <HAL_MspInit+0x5c>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	61d3      	str	r3, [r2, #28]
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <HAL_MspInit+0x5c>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_MspInit+0x60>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <HAL_MspInit+0x60>)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010000 	.word	0x40010000

08000f80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a15      	ldr	r2, [pc, #84]	; (8000ff0 <HAL_I2C_MspInit+0x70>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d123      	bne.n	8000fe8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <HAL_I2C_MspInit+0x74>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a13      	ldr	r2, [pc, #76]	; (8000ff4 <HAL_I2C_MspInit+0x74>)
 8000fa6:	f043 0308 	orr.w	r3, r3, #8
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <HAL_I2C_MspInit+0x74>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0308 	and.w	r3, r3, #8
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fb8:	23c0      	movs	r3, #192	; 0xc0
 8000fba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fbc:	2312      	movs	r3, #18
 8000fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	4619      	mov	r1, r3
 8000fca:	480b      	ldr	r0, [pc, #44]	; (8000ff8 <HAL_I2C_MspInit+0x78>)
 8000fcc:	f000 fa54 	bl	8001478 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_I2C_MspInit+0x74>)
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <HAL_I2C_MspInit+0x74>)
 8000fd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fda:	61d3      	str	r3, [r2, #28]
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_I2C_MspInit+0x74>)
 8000fde:	69db      	ldr	r3, [r3, #28]
 8000fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fe8:	bf00      	nop
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40005400 	.word	0x40005400
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40010c00 	.word	0x40010c00

08000ffc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a1b      	ldr	r2, [pc, #108]	; (8001084 <HAL_SPI_MspInit+0x88>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d12f      	bne.n	800107c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <HAL_SPI_MspInit+0x8c>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a19      	ldr	r2, [pc, #100]	; (8001088 <HAL_SPI_MspInit+0x8c>)
 8001022:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <HAL_SPI_MspInit+0x8c>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <HAL_SPI_MspInit+0x8c>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a13      	ldr	r2, [pc, #76]	; (8001088 <HAL_SPI_MspInit+0x8c>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_SPI_MspInit+0x8c>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800104c:	23a0      	movs	r3, #160	; 0xa0
 800104e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4619      	mov	r1, r3
 800105e:	480b      	ldr	r0, [pc, #44]	; (800108c <HAL_SPI_MspInit+0x90>)
 8001060:	f000 fa0a 	bl	8001478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001064:	2340      	movs	r3, #64	; 0x40
 8001066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	4619      	mov	r1, r3
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <HAL_SPI_MspInit+0x90>)
 8001078:	f000 f9fe 	bl	8001478 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800107c:	bf00      	nop
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40013000 	.word	0x40013000
 8001088:	40021000 	.word	0x40021000
 800108c:	40010800 	.word	0x40010800

08001090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <NMI_Handler+0x4>

08001096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <HardFault_Handler+0x4>

0800109c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <MemManage_Handler+0x4>

080010a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <BusFault_Handler+0x4>

080010a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <UsageFault_Handler+0x4>

080010ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr

080010ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr

080010d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d6:	f000 f8ab 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e8:	4a14      	ldr	r2, [pc, #80]	; (800113c <_sbrk+0x5c>)
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <_sbrk+0x60>)
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <_sbrk+0x64>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	; (8001148 <_sbrk+0x68>)
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	429a      	cmp	r2, r3
 800110e:	d207      	bcs.n	8001120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001110:	f002 f932 	bl	8003378 <__errno>
 8001114:	4603      	mov	r3, r0
 8001116:	220c      	movs	r2, #12
 8001118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800111e:	e009      	b.n	8001134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	4a05      	ldr	r2, [pc, #20]	; (8001144 <_sbrk+0x64>)
 8001130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20005000 	.word	0x20005000
 8001140:	00000400 	.word	0x00000400
 8001144:	200004cc 	.word	0x200004cc
 8001148:	20000598 	.word	0x20000598

0800114c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001158:	480c      	ldr	r0, [pc, #48]	; (800118c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800115a:	490d      	ldr	r1, [pc, #52]	; (8001190 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001170:	4c0a      	ldr	r4, [pc, #40]	; (800119c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800117e:	f7ff ffe5 	bl	800114c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001182:	f002 f8ff 	bl	8003384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001186:	f7ff fd65 	bl	8000c54 <main>
  bx lr
 800118a:	4770      	bx	lr
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001194:	08004568 	.word	0x08004568
  ldr r2, =_sbss
 8001198:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800119c:	20000598 	.word	0x20000598

080011a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC1_2_IRQHandler>
	...

080011a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <HAL_Init+0x28>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a07      	ldr	r2, [pc, #28]	; (80011cc <HAL_Init+0x28>)
 80011ae:	f043 0310 	orr.w	r3, r3, #16
 80011b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b4:	2003      	movs	r0, #3
 80011b6:	f000 f92b 	bl	8001410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f000 f808 	bl	80011d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c0:	f7ff feac 	bl	8000f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40022000 	.word	0x40022000

080011d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_InitTick+0x54>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_InitTick+0x58>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f935 	bl	800145e <HAL_SYSTICK_Config>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00e      	b.n	800121c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d80a      	bhi.n	800121a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001204:	2200      	movs	r2, #0
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800120c:	f000 f90b 	bl	8001426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001210:	4a06      	ldr	r2, [pc, #24]	; (800122c <HAL_InitTick+0x5c>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	e000      	b.n	800121c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000010 	.word	0x20000010
 8001228:	20000018 	.word	0x20000018
 800122c:	20000014 	.word	0x20000014

08001230 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <HAL_IncTick+0x1c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_IncTick+0x20>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4413      	add	r3, r2
 8001240:	4a03      	ldr	r2, [pc, #12]	; (8001250 <HAL_IncTick+0x20>)
 8001242:	6013      	str	r3, [r2, #0]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	20000018 	.word	0x20000018
 8001250:	20000584 	.word	0x20000584

08001254 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b02      	ldr	r3, [pc, #8]	; (8001264 <HAL_GetTick+0x10>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	20000584 	.word	0x20000584

08001268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff fff0 	bl	8001254 <HAL_GetTick>
 8001274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001280:	d005      	beq.n	800128e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_Delay+0x44>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800128e:	bf00      	nop
 8001290:	f7ff ffe0 	bl	8001254 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8f7      	bhi.n	8001290 <HAL_Delay+0x28>
  {
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000018 	.word	0x20000018

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	60d3      	str	r3, [r2, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	db0a      	blt.n	800133e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	490c      	ldr	r1, [pc, #48]	; (8001360 <__NVIC_SetPriority+0x4c>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	440b      	add	r3, r1
 8001338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800133c:	e00a      	b.n	8001354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <__NVIC_SetPriority+0x50>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3b04      	subs	r3, #4
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	440b      	add	r3, r1
 8001352:	761a      	strb	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f1c3 0307 	rsb	r3, r3, #7
 8001382:	2b04      	cmp	r3, #4
 8001384:	bf28      	it	cs
 8001386:	2304      	movcs	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	2b06      	cmp	r3, #6
 8001390:	d902      	bls.n	8001398 <NVIC_EncodePriority+0x30>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3b03      	subs	r3, #3
 8001396:	e000      	b.n	800139a <NVIC_EncodePriority+0x32>
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	4313      	orrs	r3, r2
         );
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013dc:	d301      	bcc.n	80013e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013de:	2301      	movs	r3, #1
 80013e0:	e00f      	b.n	8001402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <SysTick_Config+0x40>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ea:	210f      	movs	r1, #15
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013f0:	f7ff ff90 	bl	8001314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <SysTick_Config+0x40>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <SysTick_Config+0x40>)
 80013fc:	2207      	movs	r2, #7
 80013fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	e000e010 	.word	0xe000e010

08001410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff49 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001438:	f7ff ff5e 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 800143c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	6978      	ldr	r0, [r7, #20]
 8001444:	f7ff ff90 	bl	8001368 <NVIC_EncodePriority>
 8001448:	4602      	mov	r2, r0
 800144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff5f 	bl	8001314 <__NVIC_SetPriority>
}
 8001456:	bf00      	nop
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ffb0 	bl	80013cc <SysTick_Config>
 800146c:	4603      	mov	r3, r0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001478:	b480      	push	{r7}
 800147a:	b08b      	sub	sp, #44	; 0x2c
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800148a:	e169      	b.n	8001760 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800148c:	2201      	movs	r2, #1
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	69fa      	ldr	r2, [r7, #28]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	f040 8158 	bne.w	800175a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	4a9a      	ldr	r2, [pc, #616]	; (8001718 <HAL_GPIO_Init+0x2a0>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d05e      	beq.n	8001572 <HAL_GPIO_Init+0xfa>
 80014b4:	4a98      	ldr	r2, [pc, #608]	; (8001718 <HAL_GPIO_Init+0x2a0>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d875      	bhi.n	80015a6 <HAL_GPIO_Init+0x12e>
 80014ba:	4a98      	ldr	r2, [pc, #608]	; (800171c <HAL_GPIO_Init+0x2a4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d058      	beq.n	8001572 <HAL_GPIO_Init+0xfa>
 80014c0:	4a96      	ldr	r2, [pc, #600]	; (800171c <HAL_GPIO_Init+0x2a4>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d86f      	bhi.n	80015a6 <HAL_GPIO_Init+0x12e>
 80014c6:	4a96      	ldr	r2, [pc, #600]	; (8001720 <HAL_GPIO_Init+0x2a8>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d052      	beq.n	8001572 <HAL_GPIO_Init+0xfa>
 80014cc:	4a94      	ldr	r2, [pc, #592]	; (8001720 <HAL_GPIO_Init+0x2a8>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d869      	bhi.n	80015a6 <HAL_GPIO_Init+0x12e>
 80014d2:	4a94      	ldr	r2, [pc, #592]	; (8001724 <HAL_GPIO_Init+0x2ac>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d04c      	beq.n	8001572 <HAL_GPIO_Init+0xfa>
 80014d8:	4a92      	ldr	r2, [pc, #584]	; (8001724 <HAL_GPIO_Init+0x2ac>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d863      	bhi.n	80015a6 <HAL_GPIO_Init+0x12e>
 80014de:	4a92      	ldr	r2, [pc, #584]	; (8001728 <HAL_GPIO_Init+0x2b0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d046      	beq.n	8001572 <HAL_GPIO_Init+0xfa>
 80014e4:	4a90      	ldr	r2, [pc, #576]	; (8001728 <HAL_GPIO_Init+0x2b0>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d85d      	bhi.n	80015a6 <HAL_GPIO_Init+0x12e>
 80014ea:	2b12      	cmp	r3, #18
 80014ec:	d82a      	bhi.n	8001544 <HAL_GPIO_Init+0xcc>
 80014ee:	2b12      	cmp	r3, #18
 80014f0:	d859      	bhi.n	80015a6 <HAL_GPIO_Init+0x12e>
 80014f2:	a201      	add	r2, pc, #4	; (adr r2, 80014f8 <HAL_GPIO_Init+0x80>)
 80014f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f8:	08001573 	.word	0x08001573
 80014fc:	0800154d 	.word	0x0800154d
 8001500:	0800155f 	.word	0x0800155f
 8001504:	080015a1 	.word	0x080015a1
 8001508:	080015a7 	.word	0x080015a7
 800150c:	080015a7 	.word	0x080015a7
 8001510:	080015a7 	.word	0x080015a7
 8001514:	080015a7 	.word	0x080015a7
 8001518:	080015a7 	.word	0x080015a7
 800151c:	080015a7 	.word	0x080015a7
 8001520:	080015a7 	.word	0x080015a7
 8001524:	080015a7 	.word	0x080015a7
 8001528:	080015a7 	.word	0x080015a7
 800152c:	080015a7 	.word	0x080015a7
 8001530:	080015a7 	.word	0x080015a7
 8001534:	080015a7 	.word	0x080015a7
 8001538:	080015a7 	.word	0x080015a7
 800153c:	08001555 	.word	0x08001555
 8001540:	08001569 	.word	0x08001569
 8001544:	4a79      	ldr	r2, [pc, #484]	; (800172c <HAL_GPIO_Init+0x2b4>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d013      	beq.n	8001572 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800154a:	e02c      	b.n	80015a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	623b      	str	r3, [r7, #32]
          break;
 8001552:	e029      	b.n	80015a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	3304      	adds	r3, #4
 800155a:	623b      	str	r3, [r7, #32]
          break;
 800155c:	e024      	b.n	80015a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	3308      	adds	r3, #8
 8001564:	623b      	str	r3, [r7, #32]
          break;
 8001566:	e01f      	b.n	80015a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	330c      	adds	r3, #12
 800156e:	623b      	str	r3, [r7, #32]
          break;
 8001570:	e01a      	b.n	80015a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d102      	bne.n	8001580 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800157a:	2304      	movs	r3, #4
 800157c:	623b      	str	r3, [r7, #32]
          break;
 800157e:	e013      	b.n	80015a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d105      	bne.n	8001594 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001588:	2308      	movs	r3, #8
 800158a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	611a      	str	r2, [r3, #16]
          break;
 8001592:	e009      	b.n	80015a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001594:	2308      	movs	r3, #8
 8001596:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	615a      	str	r2, [r3, #20]
          break;
 800159e:	e003      	b.n	80015a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
          break;
 80015a4:	e000      	b.n	80015a8 <HAL_GPIO_Init+0x130>
          break;
 80015a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2bff      	cmp	r3, #255	; 0xff
 80015ac:	d801      	bhi.n	80015b2 <HAL_GPIO_Init+0x13a>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	e001      	b.n	80015b6 <HAL_GPIO_Init+0x13e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3304      	adds	r3, #4
 80015b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2bff      	cmp	r3, #255	; 0xff
 80015bc:	d802      	bhi.n	80015c4 <HAL_GPIO_Init+0x14c>
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	e002      	b.n	80015ca <HAL_GPIO_Init+0x152>
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	3b08      	subs	r3, #8
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	210f      	movs	r1, #15
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	fa01 f303 	lsl.w	r3, r1, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	401a      	ands	r2, r3
 80015dc:	6a39      	ldr	r1, [r7, #32]
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	431a      	orrs	r2, r3
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 80b1 	beq.w	800175a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015f8:	4b4d      	ldr	r3, [pc, #308]	; (8001730 <HAL_GPIO_Init+0x2b8>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a4c      	ldr	r2, [pc, #304]	; (8001730 <HAL_GPIO_Init+0x2b8>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b4a      	ldr	r3, [pc, #296]	; (8001730 <HAL_GPIO_Init+0x2b8>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001610:	4a48      	ldr	r2, [pc, #288]	; (8001734 <HAL_GPIO_Init+0x2bc>)
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	089b      	lsrs	r3, r3, #2
 8001616:	3302      	adds	r3, #2
 8001618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	220f      	movs	r2, #15
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	4013      	ands	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a40      	ldr	r2, [pc, #256]	; (8001738 <HAL_GPIO_Init+0x2c0>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d013      	beq.n	8001664 <HAL_GPIO_Init+0x1ec>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a3f      	ldr	r2, [pc, #252]	; (800173c <HAL_GPIO_Init+0x2c4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d00d      	beq.n	8001660 <HAL_GPIO_Init+0x1e8>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a3e      	ldr	r2, [pc, #248]	; (8001740 <HAL_GPIO_Init+0x2c8>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d007      	beq.n	800165c <HAL_GPIO_Init+0x1e4>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a3d      	ldr	r2, [pc, #244]	; (8001744 <HAL_GPIO_Init+0x2cc>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d101      	bne.n	8001658 <HAL_GPIO_Init+0x1e0>
 8001654:	2303      	movs	r3, #3
 8001656:	e006      	b.n	8001666 <HAL_GPIO_Init+0x1ee>
 8001658:	2304      	movs	r3, #4
 800165a:	e004      	b.n	8001666 <HAL_GPIO_Init+0x1ee>
 800165c:	2302      	movs	r3, #2
 800165e:	e002      	b.n	8001666 <HAL_GPIO_Init+0x1ee>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <HAL_GPIO_Init+0x1ee>
 8001664:	2300      	movs	r3, #0
 8001666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001668:	f002 0203 	and.w	r2, r2, #3
 800166c:	0092      	lsls	r2, r2, #2
 800166e:	4093      	lsls	r3, r2
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	4313      	orrs	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001676:	492f      	ldr	r1, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x2bc>)
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	3302      	adds	r3, #2
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001690:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <HAL_GPIO_Init+0x2d0>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	492c      	ldr	r1, [pc, #176]	; (8001748 <HAL_GPIO_Init+0x2d0>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800169e:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <HAL_GPIO_Init+0x2d0>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	4928      	ldr	r1, [pc, #160]	; (8001748 <HAL_GPIO_Init+0x2d0>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d006      	beq.n	80016c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016b8:	4b23      	ldr	r3, [pc, #140]	; (8001748 <HAL_GPIO_Init+0x2d0>)
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	4922      	ldr	r1, [pc, #136]	; (8001748 <HAL_GPIO_Init+0x2d0>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
 80016c4:	e006      	b.n	80016d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <HAL_GPIO_Init+0x2d0>)
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	491e      	ldr	r1, [pc, #120]	; (8001748 <HAL_GPIO_Init+0x2d0>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d006      	beq.n	80016ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016e0:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_GPIO_Init+0x2d0>)
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	4918      	ldr	r1, [pc, #96]	; (8001748 <HAL_GPIO_Init+0x2d0>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	608b      	str	r3, [r1, #8]
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <HAL_GPIO_Init+0x2d0>)
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	4914      	ldr	r1, [pc, #80]	; (8001748 <HAL_GPIO_Init+0x2d0>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d021      	beq.n	800174c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_GPIO_Init+0x2d0>)
 800170a:	68da      	ldr	r2, [r3, #12]
 800170c:	490e      	ldr	r1, [pc, #56]	; (8001748 <HAL_GPIO_Init+0x2d0>)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	60cb      	str	r3, [r1, #12]
 8001714:	e021      	b.n	800175a <HAL_GPIO_Init+0x2e2>
 8001716:	bf00      	nop
 8001718:	10320000 	.word	0x10320000
 800171c:	10310000 	.word	0x10310000
 8001720:	10220000 	.word	0x10220000
 8001724:	10210000 	.word	0x10210000
 8001728:	10120000 	.word	0x10120000
 800172c:	10110000 	.word	0x10110000
 8001730:	40021000 	.word	0x40021000
 8001734:	40010000 	.word	0x40010000
 8001738:	40010800 	.word	0x40010800
 800173c:	40010c00 	.word	0x40010c00
 8001740:	40011000 	.word	0x40011000
 8001744:	40011400 	.word	0x40011400
 8001748:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_GPIO_Init+0x304>)
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	43db      	mvns	r3, r3
 8001754:	4909      	ldr	r1, [pc, #36]	; (800177c <HAL_GPIO_Init+0x304>)
 8001756:	4013      	ands	r3, r2
 8001758:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	3301      	adds	r3, #1
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	fa22 f303 	lsr.w	r3, r2, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	f47f ae8e 	bne.w	800148c <HAL_GPIO_Init+0x14>
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	372c      	adds	r7, #44	; 0x2c
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	40010400 	.word	0x40010400

08001780 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	887b      	ldrh	r3, [r7, #2]
 8001792:	4013      	ands	r3, r2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d002      	beq.n	800179e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001798:	2301      	movs	r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
 800179c:	e001      	b.n	80017a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr

080017ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	460b      	mov	r3, r1
 80017b8:	807b      	strh	r3, [r7, #2]
 80017ba:	4613      	mov	r3, r2
 80017bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017be:	787b      	ldrb	r3, [r7, #1]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017c4:	887a      	ldrh	r2, [r7, #2]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017ca:	e003      	b.n	80017d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017cc:	887b      	ldrh	r3, [r7, #2]
 80017ce:	041a      	lsls	r2, r3, #16
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	611a      	str	r2, [r3, #16]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
	...

080017e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e12b      	b.n	8001a4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d106      	bne.n	800180c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fbba 	bl	8000f80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2224      	movs	r2, #36	; 0x24
 8001810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0201 	bic.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001832:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001842:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001844:	f000 fffa 	bl	800283c <HAL_RCC_GetPCLK1Freq>
 8001848:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4a81      	ldr	r2, [pc, #516]	; (8001a54 <HAL_I2C_Init+0x274>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d807      	bhi.n	8001864 <HAL_I2C_Init+0x84>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4a80      	ldr	r2, [pc, #512]	; (8001a58 <HAL_I2C_Init+0x278>)
 8001858:	4293      	cmp	r3, r2
 800185a:	bf94      	ite	ls
 800185c:	2301      	movls	r3, #1
 800185e:	2300      	movhi	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	e006      	b.n	8001872 <HAL_I2C_Init+0x92>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4a7d      	ldr	r2, [pc, #500]	; (8001a5c <HAL_I2C_Init+0x27c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	bf94      	ite	ls
 800186c:	2301      	movls	r3, #1
 800186e:	2300      	movhi	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e0e7      	b.n	8001a4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4a78      	ldr	r2, [pc, #480]	; (8001a60 <HAL_I2C_Init+0x280>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	0c9b      	lsrs	r3, r3, #18
 8001884:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	430a      	orrs	r2, r1
 8001898:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	4a6a      	ldr	r2, [pc, #424]	; (8001a54 <HAL_I2C_Init+0x274>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d802      	bhi.n	80018b4 <HAL_I2C_Init+0xd4>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3301      	adds	r3, #1
 80018b2:	e009      	b.n	80018c8 <HAL_I2C_Init+0xe8>
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018ba:	fb02 f303 	mul.w	r3, r2, r3
 80018be:	4a69      	ldr	r2, [pc, #420]	; (8001a64 <HAL_I2C_Init+0x284>)
 80018c0:	fba2 2303 	umull	r2, r3, r2, r3
 80018c4:	099b      	lsrs	r3, r3, #6
 80018c6:	3301      	adds	r3, #1
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	430b      	orrs	r3, r1
 80018ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	495c      	ldr	r1, [pc, #368]	; (8001a54 <HAL_I2C_Init+0x274>)
 80018e4:	428b      	cmp	r3, r1
 80018e6:	d819      	bhi.n	800191c <HAL_I2C_Init+0x13c>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	1e59      	subs	r1, r3, #1
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80018f6:	1c59      	adds	r1, r3, #1
 80018f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018fc:	400b      	ands	r3, r1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00a      	beq.n	8001918 <HAL_I2C_Init+0x138>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1e59      	subs	r1, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001910:	3301      	adds	r3, #1
 8001912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001916:	e051      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 8001918:	2304      	movs	r3, #4
 800191a:	e04f      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d111      	bne.n	8001948 <HAL_I2C_Init+0x168>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1e58      	subs	r0, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6859      	ldr	r1, [r3, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	440b      	add	r3, r1
 8001932:	fbb0 f3f3 	udiv	r3, r0, r3
 8001936:	3301      	adds	r3, #1
 8001938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800193c:	2b00      	cmp	r3, #0
 800193e:	bf0c      	ite	eq
 8001940:	2301      	moveq	r3, #1
 8001942:	2300      	movne	r3, #0
 8001944:	b2db      	uxtb	r3, r3
 8001946:	e012      	b.n	800196e <HAL_I2C_Init+0x18e>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1e58      	subs	r0, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6859      	ldr	r1, [r3, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	0099      	lsls	r1, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	fbb0 f3f3 	udiv	r3, r0, r3
 800195e:	3301      	adds	r3, #1
 8001960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001964:	2b00      	cmp	r3, #0
 8001966:	bf0c      	ite	eq
 8001968:	2301      	moveq	r3, #1
 800196a:	2300      	movne	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_I2C_Init+0x196>
 8001972:	2301      	movs	r3, #1
 8001974:	e022      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10e      	bne.n	800199c <HAL_I2C_Init+0x1bc>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1e58      	subs	r0, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6859      	ldr	r1, [r3, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	440b      	add	r3, r1
 800198c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001990:	3301      	adds	r3, #1
 8001992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800199a:	e00f      	b.n	80019bc <HAL_I2C_Init+0x1dc>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1e58      	subs	r0, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6859      	ldr	r1, [r3, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	0099      	lsls	r1, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b2:	3301      	adds	r3, #1
 80019b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	6809      	ldr	r1, [r1, #0]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69da      	ldr	r2, [r3, #28]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6911      	ldr	r1, [r2, #16]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68d2      	ldr	r2, [r2, #12]
 80019f6:	4311      	orrs	r1, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	430b      	orrs	r3, r1
 80019fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0201 	orr.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2220      	movs	r2, #32
 8001a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	000186a0 	.word	0x000186a0
 8001a58:	001e847f 	.word	0x001e847f
 8001a5c:	003d08ff 	.word	0x003d08ff
 8001a60:	431bde83 	.word	0x431bde83
 8001a64:	10624dd3 	.word	0x10624dd3

08001a68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	4608      	mov	r0, r1
 8001a72:	4611      	mov	r1, r2
 8001a74:	461a      	mov	r2, r3
 8001a76:	4603      	mov	r3, r0
 8001a78:	817b      	strh	r3, [r7, #10]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	813b      	strh	r3, [r7, #8]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a82:	f7ff fbe7 	bl	8001254 <HAL_GetTick>
 8001a86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b20      	cmp	r3, #32
 8001a92:	f040 80d9 	bne.w	8001c48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2319      	movs	r3, #25
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	496d      	ldr	r1, [pc, #436]	; (8001c54 <HAL_I2C_Mem_Write+0x1ec>)
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 f971 	bl	8001d88 <I2C_WaitOnFlagUntilTimeout>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001aac:	2302      	movs	r3, #2
 8001aae:	e0cc      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_I2C_Mem_Write+0x56>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e0c5      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d007      	beq.n	8001ae4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2221      	movs	r2, #33	; 0x21
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2240      	movs	r2, #64	; 0x40
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6a3a      	ldr	r2, [r7, #32]
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4a4d      	ldr	r2, [pc, #308]	; (8001c58 <HAL_I2C_Mem_Write+0x1f0>)
 8001b24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b26:	88f8      	ldrh	r0, [r7, #6]
 8001b28:	893a      	ldrh	r2, [r7, #8]
 8001b2a:	8979      	ldrh	r1, [r7, #10]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	4603      	mov	r3, r0
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 f890 	bl	8001c5c <I2C_RequestMemoryWrite>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d052      	beq.n	8001be8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e081      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f9f2 	bl	8001f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00d      	beq.n	8001b72 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d107      	bne.n	8001b6e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e06b      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d11b      	bne.n	8001be8 <HAL_I2C_Mem_Write+0x180>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d017      	beq.n	8001be8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1aa      	bne.n	8001b46 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 f9de 	bl	8001fb6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00d      	beq.n	8001c1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d107      	bne.n	8001c18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e016      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e000      	b.n	8001c4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c48:	2302      	movs	r3, #2
  }
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	00100002 	.word	0x00100002
 8001c58:	ffff0000 	.word	0xffff0000

08001c5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	4608      	mov	r0, r1
 8001c66:	4611      	mov	r1, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	817b      	strh	r3, [r7, #10]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	813b      	strh	r3, [r7, #8]
 8001c72:	4613      	mov	r3, r2
 8001c74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f878 	bl	8001d88 <I2C_WaitOnFlagUntilTimeout>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00d      	beq.n	8001cba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cac:	d103      	bne.n	8001cb6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e05f      	b.n	8001d7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cba:	897b      	ldrh	r3, [r7, #10]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	6a3a      	ldr	r2, [r7, #32]
 8001cce:	492d      	ldr	r1, [pc, #180]	; (8001d84 <I2C_RequestMemoryWrite+0x128>)
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 f8b0 	bl	8001e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e04c      	b.n	8001d7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf8:	6a39      	ldr	r1, [r7, #32]
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f91a 	bl	8001f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00d      	beq.n	8001d22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d107      	bne.n	8001d1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e02b      	b.n	8001d7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d22:	88fb      	ldrh	r3, [r7, #6]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d28:	893b      	ldrh	r3, [r7, #8]
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	611a      	str	r2, [r3, #16]
 8001d32:	e021      	b.n	8001d78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d34:	893b      	ldrh	r3, [r7, #8]
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d44:	6a39      	ldr	r1, [r7, #32]
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f8f4 	bl	8001f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00d      	beq.n	8001d6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d107      	bne.n	8001d6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e005      	b.n	8001d7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d6e:	893b      	ldrh	r3, [r7, #8]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	00010002 	.word	0x00010002

08001d88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	4613      	mov	r3, r2
 8001d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d98:	e025      	b.n	8001de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001da0:	d021      	beq.n	8001de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001da2:	f7ff fa57 	bl	8001254 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d302      	bcc.n	8001db8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d116      	bne.n	8001de6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f043 0220 	orr.w	r2, r3, #32
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e023      	b.n	8001e2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	0c1b      	lsrs	r3, r3, #16
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d10d      	bne.n	8001e0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	bf0c      	ite	eq
 8001e02:	2301      	moveq	r3, #1
 8001e04:	2300      	movne	r3, #0
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	e00c      	b.n	8001e26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	43da      	mvns	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	4013      	ands	r3, r2
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	bf0c      	ite	eq
 8001e1e:	2301      	moveq	r3, #1
 8001e20:	2300      	movne	r3, #0
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	461a      	mov	r2, r3
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d0b6      	beq.n	8001d9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e44:	e051      	b.n	8001eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e54:	d123      	bne.n	8001e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f043 0204 	orr.w	r2, r3, #4
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e046      	b.n	8001f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ea4:	d021      	beq.n	8001eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ea6:	f7ff f9d5 	bl	8001254 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d302      	bcc.n	8001ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d116      	bne.n	8001eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f043 0220 	orr.w	r2, r3, #32
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e020      	b.n	8001f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d10c      	bne.n	8001f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	43da      	mvns	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	4013      	ands	r3, r2
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	bf14      	ite	ne
 8001f06:	2301      	movne	r3, #1
 8001f08:	2300      	moveq	r3, #0
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	e00b      	b.n	8001f26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	43da      	mvns	r2, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf14      	ite	ne
 8001f20:	2301      	movne	r3, #1
 8001f22:	2300      	moveq	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d18d      	bne.n	8001e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f40:	e02d      	b.n	8001f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 f878 	bl	8002038 <I2C_IsAcknowledgeFailed>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e02d      	b.n	8001fae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f58:	d021      	beq.n	8001f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f5a:	f7ff f97b 	bl	8001254 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d302      	bcc.n	8001f70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d116      	bne.n	8001f9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f043 0220 	orr.w	r2, r3, #32
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e007      	b.n	8001fae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa8:	2b80      	cmp	r3, #128	; 0x80
 8001faa:	d1ca      	bne.n	8001f42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fc2:	e02d      	b.n	8002020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 f837 	bl	8002038 <I2C_IsAcknowledgeFailed>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e02d      	b.n	8002030 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fda:	d021      	beq.n	8002020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fdc:	f7ff f93a 	bl	8001254 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d302      	bcc.n	8001ff2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d116      	bne.n	8002020 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f043 0220 	orr.w	r2, r3, #32
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e007      	b.n	8002030 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b04      	cmp	r3, #4
 800202c:	d1ca      	bne.n	8001fc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800204e:	d11b      	bne.n	8002088 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002058:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	f043 0204 	orr.w	r2, r3, #4
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e26c      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8087 	beq.w	80021c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020b4:	4b92      	ldr	r3, [pc, #584]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d00c      	beq.n	80020da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020c0:	4b8f      	ldr	r3, [pc, #572]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d112      	bne.n	80020f2 <HAL_RCC_OscConfig+0x5e>
 80020cc:	4b8c      	ldr	r3, [pc, #560]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d8:	d10b      	bne.n	80020f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020da:	4b89      	ldr	r3, [pc, #548]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d06c      	beq.n	80021c0 <HAL_RCC_OscConfig+0x12c>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d168      	bne.n	80021c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e246      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x76>
 80020fc:	4b80      	ldr	r3, [pc, #512]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a7f      	ldr	r2, [pc, #508]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	e02e      	b.n	8002168 <HAL_RCC_OscConfig+0xd4>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0x98>
 8002112:	4b7b      	ldr	r3, [pc, #492]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a7a      	ldr	r2, [pc, #488]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b78      	ldr	r3, [pc, #480]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a77      	ldr	r2, [pc, #476]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e01d      	b.n	8002168 <HAL_RCC_OscConfig+0xd4>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0xbc>
 8002136:	4b72      	ldr	r3, [pc, #456]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a71      	ldr	r2, [pc, #452]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 800213c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b6f      	ldr	r3, [pc, #444]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6e      	ldr	r2, [pc, #440]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e00b      	b.n	8002168 <HAL_RCC_OscConfig+0xd4>
 8002150:	4b6b      	ldr	r3, [pc, #428]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a6a      	ldr	r2, [pc, #424]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b68      	ldr	r3, [pc, #416]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a67      	ldr	r2, [pc, #412]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002166:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d013      	beq.n	8002198 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7ff f870 	bl	8001254 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002178:	f7ff f86c 	bl	8001254 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e1fa      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	4b5d      	ldr	r3, [pc, #372]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0xe4>
 8002196:	e014      	b.n	80021c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7ff f85c 	bl	8001254 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a0:	f7ff f858 	bl	8001254 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e1e6      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b2:	4b53      	ldr	r3, [pc, #332]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x10c>
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d063      	beq.n	8002296 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ce:	4b4c      	ldr	r3, [pc, #304]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00b      	beq.n	80021f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021da:	4b49      	ldr	r3, [pc, #292]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d11c      	bne.n	8002220 <HAL_RCC_OscConfig+0x18c>
 80021e6:	4b46      	ldr	r3, [pc, #280]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d116      	bne.n	8002220 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f2:	4b43      	ldr	r3, [pc, #268]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <HAL_RCC_OscConfig+0x176>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d001      	beq.n	800220a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e1ba      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220a:	4b3d      	ldr	r3, [pc, #244]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4939      	ldr	r1, [pc, #228]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221e:	e03a      	b.n	8002296 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d020      	beq.n	800226a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002228:	4b36      	ldr	r3, [pc, #216]	; (8002304 <HAL_RCC_OscConfig+0x270>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222e:	f7ff f811 	bl	8001254 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002236:	f7ff f80d 	bl	8001254 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e19b      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002248:	4b2d      	ldr	r3, [pc, #180]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002254:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4927      	ldr	r1, [pc, #156]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
 8002268:	e015      	b.n	8002296 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800226a:	4b26      	ldr	r3, [pc, #152]	; (8002304 <HAL_RCC_OscConfig+0x270>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7fe fff0 	bl	8001254 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002278:	f7fe ffec 	bl	8001254 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e17a      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228a:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d03a      	beq.n	8002318 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d019      	beq.n	80022de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022aa:	4b17      	ldr	r3, [pc, #92]	; (8002308 <HAL_RCC_OscConfig+0x274>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b0:	f7fe ffd0 	bl	8001254 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b8:	f7fe ffcc 	bl	8001254 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e15a      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ca:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022d6:	2001      	movs	r0, #1
 80022d8:	f000 fac4 	bl	8002864 <RCC_Delay>
 80022dc:	e01c      	b.n	8002318 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_RCC_OscConfig+0x274>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e4:	f7fe ffb6 	bl	8001254 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ea:	e00f      	b.n	800230c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ec:	f7fe ffb2 	bl	8001254 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d908      	bls.n	800230c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e140      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000
 8002304:	42420000 	.word	0x42420000
 8002308:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230c:	4b9e      	ldr	r3, [pc, #632]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1e9      	bne.n	80022ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80a6 	beq.w	8002472 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232a:	4b97      	ldr	r3, [pc, #604]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10d      	bne.n	8002352 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	4b94      	ldr	r3, [pc, #592]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	4a93      	ldr	r2, [pc, #588]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 800233c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002340:	61d3      	str	r3, [r2, #28]
 8002342:	4b91      	ldr	r3, [pc, #580]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234e:	2301      	movs	r3, #1
 8002350:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002352:	4b8e      	ldr	r3, [pc, #568]	; (800258c <HAL_RCC_OscConfig+0x4f8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d118      	bne.n	8002390 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235e:	4b8b      	ldr	r3, [pc, #556]	; (800258c <HAL_RCC_OscConfig+0x4f8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a8a      	ldr	r2, [pc, #552]	; (800258c <HAL_RCC_OscConfig+0x4f8>)
 8002364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236a:	f7fe ff73 	bl	8001254 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002372:	f7fe ff6f 	bl	8001254 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b64      	cmp	r3, #100	; 0x64
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e0fd      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002384:	4b81      	ldr	r3, [pc, #516]	; (800258c <HAL_RCC_OscConfig+0x4f8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d106      	bne.n	80023a6 <HAL_RCC_OscConfig+0x312>
 8002398:	4b7b      	ldr	r3, [pc, #492]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4a7a      	ldr	r2, [pc, #488]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6213      	str	r3, [r2, #32]
 80023a4:	e02d      	b.n	8002402 <HAL_RCC_OscConfig+0x36e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x334>
 80023ae:	4b76      	ldr	r3, [pc, #472]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4a75      	ldr	r2, [pc, #468]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	6213      	str	r3, [r2, #32]
 80023ba:	4b73      	ldr	r3, [pc, #460]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a72      	ldr	r2, [pc, #456]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	f023 0304 	bic.w	r3, r3, #4
 80023c4:	6213      	str	r3, [r2, #32]
 80023c6:	e01c      	b.n	8002402 <HAL_RCC_OscConfig+0x36e>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	2b05      	cmp	r3, #5
 80023ce:	d10c      	bne.n	80023ea <HAL_RCC_OscConfig+0x356>
 80023d0:	4b6d      	ldr	r3, [pc, #436]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4a6c      	ldr	r2, [pc, #432]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023d6:	f043 0304 	orr.w	r3, r3, #4
 80023da:	6213      	str	r3, [r2, #32]
 80023dc:	4b6a      	ldr	r3, [pc, #424]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	4a69      	ldr	r2, [pc, #420]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6213      	str	r3, [r2, #32]
 80023e8:	e00b      	b.n	8002402 <HAL_RCC_OscConfig+0x36e>
 80023ea:	4b67      	ldr	r3, [pc, #412]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	4a66      	ldr	r2, [pc, #408]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	6213      	str	r3, [r2, #32]
 80023f6:	4b64      	ldr	r3, [pc, #400]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4a63      	ldr	r2, [pc, #396]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d015      	beq.n	8002436 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240a:	f7fe ff23 	bl	8001254 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7fe ff1f 	bl	8001254 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0ab      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002428:	4b57      	ldr	r3, [pc, #348]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0ee      	beq.n	8002412 <HAL_RCC_OscConfig+0x37e>
 8002434:	e014      	b.n	8002460 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002436:	f7fe ff0d 	bl	8001254 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243c:	e00a      	b.n	8002454 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7fe ff09 	bl	8001254 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	; 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e095      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002454:	4b4c      	ldr	r3, [pc, #304]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1ee      	bne.n	800243e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002460:	7dfb      	ldrb	r3, [r7, #23]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d105      	bne.n	8002472 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002466:	4b48      	ldr	r3, [pc, #288]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	4a47      	ldr	r2, [pc, #284]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 800246c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002470:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 8081 	beq.w	800257e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800247c:	4b42      	ldr	r3, [pc, #264]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	2b08      	cmp	r3, #8
 8002486:	d061      	beq.n	800254c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d146      	bne.n	800251e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002490:	4b3f      	ldr	r3, [pc, #252]	; (8002590 <HAL_RCC_OscConfig+0x4fc>)
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002496:	f7fe fedd 	bl	8001254 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249e:	f7fe fed9 	bl	8001254 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e067      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b0:	4b35      	ldr	r3, [pc, #212]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1f0      	bne.n	800249e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c4:	d108      	bne.n	80024d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024c6:	4b30      	ldr	r3, [pc, #192]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	492d      	ldr	r1, [pc, #180]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d8:	4b2b      	ldr	r3, [pc, #172]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a19      	ldr	r1, [r3, #32]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	430b      	orrs	r3, r1
 80024ea:	4927      	ldr	r1, [pc, #156]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f0:	4b27      	ldr	r3, [pc, #156]	; (8002590 <HAL_RCC_OscConfig+0x4fc>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7fe fead 	bl	8001254 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fe:	f7fe fea9 	bl	8001254 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e037      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002510:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x46a>
 800251c:	e02f      	b.n	800257e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251e:	4b1c      	ldr	r3, [pc, #112]	; (8002590 <HAL_RCC_OscConfig+0x4fc>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7fe fe96 	bl	8001254 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252c:	f7fe fe92 	bl	8001254 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e020      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253e:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x498>
 800254a:	e018      	b.n	800257e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e013      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_RCC_OscConfig+0x4f4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	429a      	cmp	r2, r3
 800256a:	d106      	bne.n	800257a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002576:	429a      	cmp	r2, r3
 8002578:	d001      	beq.n	800257e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40021000 	.word	0x40021000
 800258c:	40007000 	.word	0x40007000
 8002590:	42420060 	.word	0x42420060

08002594 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0d0      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a8:	4b6a      	ldr	r3, [pc, #424]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d910      	bls.n	80025d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b6:	4b67      	ldr	r3, [pc, #412]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 0207 	bic.w	r2, r3, #7
 80025be:	4965      	ldr	r1, [pc, #404]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b63      	ldr	r3, [pc, #396]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0b8      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d020      	beq.n	8002626 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f0:	4b59      	ldr	r3, [pc, #356]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4a58      	ldr	r2, [pc, #352]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002608:	4b53      	ldr	r3, [pc, #332]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4a52      	ldr	r2, [pc, #328]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002612:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002614:	4b50      	ldr	r3, [pc, #320]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	494d      	ldr	r1, [pc, #308]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d040      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	4b47      	ldr	r3, [pc, #284]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d115      	bne.n	8002672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e07f      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002652:	4b41      	ldr	r3, [pc, #260]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e073      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002662:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e06b      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002672:	4b39      	ldr	r3, [pc, #228]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f023 0203 	bic.w	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4936      	ldr	r1, [pc, #216]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002684:	f7fe fde6 	bl	8001254 <HAL_GetTick>
 8002688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268a:	e00a      	b.n	80026a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268c:	f7fe fde2 	bl	8001254 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	f241 3288 	movw	r2, #5000	; 0x1388
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e053      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a2:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 020c 	and.w	r2, r3, #12
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d1eb      	bne.n	800268c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d210      	bcs.n	80026e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b24      	ldr	r3, [pc, #144]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 0207 	bic.w	r2, r3, #7
 80026ca:	4922      	ldr	r1, [pc, #136]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e032      	b.n	800274a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f0:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4916      	ldr	r1, [pc, #88]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	490e      	ldr	r1, [pc, #56]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002722:	f000 f821 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 8002726:	4602      	mov	r2, r0
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	490a      	ldr	r1, [pc, #40]	; (800275c <HAL_RCC_ClockConfig+0x1c8>)
 8002734:	5ccb      	ldrb	r3, [r1, r3]
 8002736:	fa22 f303 	lsr.w	r3, r2, r3
 800273a:	4a09      	ldr	r2, [pc, #36]	; (8002760 <HAL_RCC_ClockConfig+0x1cc>)
 800273c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_RCC_ClockConfig+0x1d0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fd44 	bl	80011d0 <HAL_InitTick>

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40022000 	.word	0x40022000
 8002758:	40021000 	.word	0x40021000
 800275c:	080044f0 	.word	0x080044f0
 8002760:	20000010 	.word	0x20000010
 8002764:	20000014 	.word	0x20000014

08002768 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002768:	b490      	push	{r4, r7}
 800276a:	b08a      	sub	sp, #40	; 0x28
 800276c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800276e:	4b2a      	ldr	r3, [pc, #168]	; (8002818 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002770:	1d3c      	adds	r4, r7, #4
 8002772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002774:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002778:	f240 2301 	movw	r3, #513	; 0x201
 800277c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
 8002786:	2300      	movs	r3, #0
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002792:	4b22      	ldr	r3, [pc, #136]	; (800281c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d002      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x40>
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d003      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0x46>
 80027a6:	e02d      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027a8:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027aa:	623b      	str	r3, [r7, #32]
      break;
 80027ac:	e02d      	b.n	800280a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	0c9b      	lsrs	r3, r3, #18
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027ba:	4413      	add	r3, r2
 80027bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027c0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d013      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027cc:	4b13      	ldr	r3, [pc, #76]	; (800281c <HAL_RCC_GetSysClockFreq+0xb4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	0c5b      	lsrs	r3, r3, #17
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027da:	4413      	add	r3, r2
 80027dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	4a0e      	ldr	r2, [pc, #56]	; (8002820 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027e6:	fb02 f203 	mul.w	r2, r2, r3
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
 80027f2:	e004      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	4a0b      	ldr	r2, [pc, #44]	; (8002824 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027f8:	fb02 f303 	mul.w	r3, r2, r3
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	623b      	str	r3, [r7, #32]
      break;
 8002802:	e002      	b.n	800280a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002806:	623b      	str	r3, [r7, #32]
      break;
 8002808:	bf00      	nop
    }
  }
  return sysclockfreq;
 800280a:	6a3b      	ldr	r3, [r7, #32]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3728      	adds	r7, #40	; 0x28
 8002810:	46bd      	mov	sp, r7
 8002812:	bc90      	pop	{r4, r7}
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	08003d74 	.word	0x08003d74
 800281c:	40021000 	.word	0x40021000
 8002820:	007a1200 	.word	0x007a1200
 8002824:	003d0900 	.word	0x003d0900

08002828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800282c:	4b02      	ldr	r3, [pc, #8]	; (8002838 <HAL_RCC_GetHCLKFreq+0x10>)
 800282e:	681b      	ldr	r3, [r3, #0]
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	20000010 	.word	0x20000010

0800283c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002840:	f7ff fff2 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 8002844:	4602      	mov	r2, r0
 8002846:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	0a1b      	lsrs	r3, r3, #8
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	4903      	ldr	r1, [pc, #12]	; (8002860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002852:	5ccb      	ldrb	r3, [r1, r3]
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	08004500 	.word	0x08004500

08002864 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800286c:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <RCC_Delay+0x34>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0a      	ldr	r2, [pc, #40]	; (800289c <RCC_Delay+0x38>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	0a5b      	lsrs	r3, r3, #9
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	fb02 f303 	mul.w	r3, r2, r3
 800287e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002880:	bf00      	nop
  }
  while (Delay --);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	1e5a      	subs	r2, r3, #1
 8002886:	60fa      	str	r2, [r7, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f9      	bne.n	8002880 <RCC_Delay+0x1c>
}
 800288c:	bf00      	nop
 800288e:	bf00      	nop
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr
 8002898:	20000010 	.word	0x20000010
 800289c:	10624dd3 	.word	0x10624dd3

080028a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e076      	b.n	80029a0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d108      	bne.n	80028cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028c2:	d009      	beq.n	80028d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	61da      	str	r2, [r3, #28]
 80028ca:	e005      	b.n	80028d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7fe fb82 	bl	8000ffc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800290e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295c:	ea42 0103 	orr.w	r1, r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	0c1a      	lsrs	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f002 0204 	and.w	r2, r2, #4
 800297e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	69da      	ldr	r2, [r3, #28]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800298e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	603b      	str	r3, [r7, #0]
 80029b4:	4613      	mov	r3, r2
 80029b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_SPI_Transmit+0x22>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e126      	b.n	8002c18 <HAL_SPI_Transmit+0x270>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029d2:	f7fe fc3f 	bl	8001254 <HAL_GetTick>
 80029d6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d002      	beq.n	80029ee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029e8:	2302      	movs	r3, #2
 80029ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029ec:	e10b      	b.n	8002c06 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <HAL_SPI_Transmit+0x52>
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d102      	bne.n	8002a00 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029fe:	e102      	b.n	8002c06 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2203      	movs	r2, #3
 8002a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	88fa      	ldrh	r2, [r7, #6]
 8002a18:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	88fa      	ldrh	r2, [r7, #6]
 8002a1e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a46:	d10f      	bne.n	8002a68 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a66:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a72:	2b40      	cmp	r3, #64	; 0x40
 8002a74:	d007      	beq.n	8002a86 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a8e:	d14b      	bne.n	8002b28 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <HAL_SPI_Transmit+0xf6>
 8002a98:	8afb      	ldrh	r3, [r7, #22]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d13e      	bne.n	8002b1c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	881a      	ldrh	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	1c9a      	adds	r2, r3, #2
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ac2:	e02b      	b.n	8002b1c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d112      	bne.n	8002af8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	881a      	ldrh	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	1c9a      	adds	r2, r3, #2
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	86da      	strh	r2, [r3, #54]	; 0x36
 8002af6:	e011      	b.n	8002b1c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002af8:	f7fe fbac 	bl	8001254 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d803      	bhi.n	8002b10 <HAL_SPI_Transmit+0x168>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b0e:	d102      	bne.n	8002b16 <HAL_SPI_Transmit+0x16e>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d102      	bne.n	8002b1c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b1a:	e074      	b.n	8002c06 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1ce      	bne.n	8002ac4 <HAL_SPI_Transmit+0x11c>
 8002b26:	e04c      	b.n	8002bc2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <HAL_SPI_Transmit+0x18e>
 8002b30:	8afb      	ldrh	r3, [r7, #22]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d140      	bne.n	8002bb8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	330c      	adds	r3, #12
 8002b40:	7812      	ldrb	r2, [r2, #0]
 8002b42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b5c:	e02c      	b.n	8002bb8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d113      	bne.n	8002b94 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	330c      	adds	r3, #12
 8002b76:	7812      	ldrb	r2, [r2, #0]
 8002b78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b92:	e011      	b.n	8002bb8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b94:	f7fe fb5e 	bl	8001254 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d803      	bhi.n	8002bac <HAL_SPI_Transmit+0x204>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002baa:	d102      	bne.n	8002bb2 <HAL_SPI_Transmit+0x20a>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d102      	bne.n	8002bb8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bb6:	e026      	b.n	8002c06 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1cd      	bne.n	8002b5e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	6839      	ldr	r1, [r7, #0]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 fbb8 	bl	800333c <SPI_EndRxTxTransaction>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d002      	beq.n	8002bd8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10a      	bne.n	8002bf6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002be0:	2300      	movs	r3, #0
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	77fb      	strb	r3, [r7, #31]
 8002c02:	e000      	b.n	8002c06 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002c04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c16:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3720      	adds	r7, #32
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c3c:	d112      	bne.n	8002c64 <HAL_SPI_Receive+0x44>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10e      	bne.n	8002c64 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2204      	movs	r2, #4
 8002c4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c4e:	88fa      	ldrh	r2, [r7, #6]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	4613      	mov	r3, r2
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f8f1 	bl	8002e42 <HAL_SPI_TransmitReceive>
 8002c60:	4603      	mov	r3, r0
 8002c62:	e0ea      	b.n	8002e3a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_SPI_Receive+0x52>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e0e3      	b.n	8002e3a <HAL_SPI_Receive+0x21a>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c7a:	f7fe faeb 	bl	8001254 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d002      	beq.n	8002c92 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c90:	e0ca      	b.n	8002e28 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <HAL_SPI_Receive+0x7e>
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d102      	bne.n	8002ca4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ca2:	e0c1      	b.n	8002e28 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	88fa      	ldrh	r2, [r7, #6]
 8002cbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	88fa      	ldrh	r2, [r7, #6]
 8002cc2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cea:	d10f      	bne.n	8002d0c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cfa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d0a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d16:	2b40      	cmp	r3, #64	; 0x40
 8002d18:	d007      	beq.n	8002d2a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d28:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d162      	bne.n	8002df8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002d32:	e02e      	b.n	8002d92 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d115      	bne.n	8002d6e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f103 020c 	add.w	r2, r3, #12
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4e:	7812      	ldrb	r2, [r2, #0]
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d6c:	e011      	b.n	8002d92 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d6e:	f7fe fa71 	bl	8001254 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d803      	bhi.n	8002d86 <HAL_SPI_Receive+0x166>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d84:	d102      	bne.n	8002d8c <HAL_SPI_Receive+0x16c>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d90:	e04a      	b.n	8002e28 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1cb      	bne.n	8002d34 <HAL_SPI_Receive+0x114>
 8002d9c:	e031      	b.n	8002e02 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d113      	bne.n	8002dd4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db6:	b292      	uxth	r2, r2
 8002db8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbe:	1c9a      	adds	r2, r3, #2
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dd2:	e011      	b.n	8002df8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dd4:	f7fe fa3e 	bl	8001254 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d803      	bhi.n	8002dec <HAL_SPI_Receive+0x1cc>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dea:	d102      	bne.n	8002df2 <HAL_SPI_Receive+0x1d2>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d102      	bne.n	8002df8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002df6:	e017      	b.n	8002e28 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1cd      	bne.n	8002d9e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	6839      	ldr	r1, [r7, #0]
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 fa46 	bl	8003298 <SPI_EndRxTransaction>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	75fb      	strb	r3, [r7, #23]
 8002e24:	e000      	b.n	8002e28 <HAL_SPI_Receive+0x208>
  }

error :
 8002e26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b08c      	sub	sp, #48	; 0x30
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e50:	2301      	movs	r3, #1
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_SPI_TransmitReceive+0x26>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e18a      	b.n	800317e <HAL_SPI_TransmitReceive+0x33c>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e70:	f7fe f9f0 	bl	8001254 <HAL_GetTick>
 8002e74:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e86:	887b      	ldrh	r3, [r7, #2]
 8002e88:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d00f      	beq.n	8002eb2 <HAL_SPI_TransmitReceive+0x70>
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e98:	d107      	bne.n	8002eaa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <HAL_SPI_TransmitReceive+0x68>
 8002ea2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d003      	beq.n	8002eb2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002eb0:	e15b      	b.n	800316a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_SPI_TransmitReceive+0x82>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <HAL_SPI_TransmitReceive+0x82>
 8002ebe:	887b      	ldrh	r3, [r7, #2]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d103      	bne.n	8002ecc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002eca:	e14e      	b.n	800316a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d003      	beq.n	8002ee0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2205      	movs	r2, #5
 8002edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	887a      	ldrh	r2, [r7, #2]
 8002ef0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	887a      	ldrh	r2, [r7, #2]
 8002ef6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	887a      	ldrh	r2, [r7, #2]
 8002f02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	887a      	ldrh	r2, [r7, #2]
 8002f08:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f20:	2b40      	cmp	r3, #64	; 0x40
 8002f22:	d007      	beq.n	8002f34 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f3c:	d178      	bne.n	8003030 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HAL_SPI_TransmitReceive+0x10a>
 8002f46:	8b7b      	ldrh	r3, [r7, #26]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d166      	bne.n	800301a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	881a      	ldrh	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	1c9a      	adds	r2, r3, #2
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f70:	e053      	b.n	800301a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d11b      	bne.n	8002fb8 <HAL_SPI_TransmitReceive+0x176>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d016      	beq.n	8002fb8 <HAL_SPI_TransmitReceive+0x176>
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d113      	bne.n	8002fb8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	881a      	ldrh	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	1c9a      	adds	r2, r3, #2
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d119      	bne.n	8002ffa <HAL_SPI_TransmitReceive+0x1b8>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d014      	beq.n	8002ffa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	b292      	uxth	r2, r2
 8002fdc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	1c9a      	adds	r2, r3, #2
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ffa:	f7fe f92b 	bl	8001254 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003006:	429a      	cmp	r2, r3
 8003008:	d807      	bhi.n	800301a <HAL_SPI_TransmitReceive+0x1d8>
 800300a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003010:	d003      	beq.n	800301a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003018:	e0a7      	b.n	800316a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1a6      	bne.n	8002f72 <HAL_SPI_TransmitReceive+0x130>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1a1      	bne.n	8002f72 <HAL_SPI_TransmitReceive+0x130>
 800302e:	e07c      	b.n	800312a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <HAL_SPI_TransmitReceive+0x1fc>
 8003038:	8b7b      	ldrh	r3, [r7, #26]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d16b      	bne.n	8003116 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	330c      	adds	r3, #12
 8003048:	7812      	ldrb	r2, [r2, #0]
 800304a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800305a:	b29b      	uxth	r3, r3
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003064:	e057      	b.n	8003116 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b02      	cmp	r3, #2
 8003072:	d11c      	bne.n	80030ae <HAL_SPI_TransmitReceive+0x26c>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003078:	b29b      	uxth	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d017      	beq.n	80030ae <HAL_SPI_TransmitReceive+0x26c>
 800307e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003080:	2b01      	cmp	r3, #1
 8003082:	d114      	bne.n	80030ae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	330c      	adds	r3, #12
 800308e:	7812      	ldrb	r2, [r2, #0]
 8003090:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d119      	bne.n	80030f0 <HAL_SPI_TransmitReceive+0x2ae>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d014      	beq.n	80030f0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030ec:	2301      	movs	r3, #1
 80030ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030f0:	f7fe f8b0 	bl	8001254 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d803      	bhi.n	8003108 <HAL_SPI_TransmitReceive+0x2c6>
 8003100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003102:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003106:	d102      	bne.n	800310e <HAL_SPI_TransmitReceive+0x2cc>
 8003108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310a:	2b00      	cmp	r3, #0
 800310c:	d103      	bne.n	8003116 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003114:	e029      	b.n	800316a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800311a:	b29b      	uxth	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1a2      	bne.n	8003066 <HAL_SPI_TransmitReceive+0x224>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d19d      	bne.n	8003066 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800312a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 f904 	bl	800333c <SPI_EndRxTxTransaction>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d006      	beq.n	8003148 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2220      	movs	r2, #32
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003146:	e010      	b.n	800316a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10b      	bne.n	8003168 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	e000      	b.n	800316a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003168:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800317a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800317e:	4618      	mov	r0, r3
 8003180:	3730      	adds	r7, #48	; 0x30
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	4613      	mov	r3, r2
 8003196:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003198:	f7fe f85c 	bl	8001254 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	1a9b      	subs	r3, r3, r2
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	4413      	add	r3, r2
 80031a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031a8:	f7fe f854 	bl	8001254 <HAL_GetTick>
 80031ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031ae:	4b39      	ldr	r3, [pc, #228]	; (8003294 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	015b      	lsls	r3, r3, #5
 80031b4:	0d1b      	lsrs	r3, r3, #20
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	fb02 f303 	mul.w	r3, r2, r3
 80031bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031be:	e054      	b.n	800326a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031c6:	d050      	beq.n	800326a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031c8:	f7fe f844 	bl	8001254 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d902      	bls.n	80031de <SPI_WaitFlagStateUntilTimeout+0x56>
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d13d      	bne.n	800325a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031f6:	d111      	bne.n	800321c <SPI_WaitFlagStateUntilTimeout+0x94>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003200:	d004      	beq.n	800320c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320a:	d107      	bne.n	800321c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800321a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003224:	d10f      	bne.n	8003246 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003244:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e017      	b.n	800328a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	3b01      	subs	r3, #1
 8003268:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4013      	ands	r3, r2
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	429a      	cmp	r2, r3
 8003278:	bf0c      	ite	eq
 800327a:	2301      	moveq	r3, #1
 800327c:	2300      	movne	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	429a      	cmp	r2, r3
 8003286:	d19b      	bne.n	80031c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3720      	adds	r7, #32
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	20000010 	.word	0x20000010

08003298 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af02      	add	r7, sp, #8
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ac:	d111      	bne.n	80032d2 <SPI_EndRxTransaction+0x3a>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b6:	d004      	beq.n	80032c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c0:	d107      	bne.n	80032d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032d0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032da:	d117      	bne.n	800330c <SPI_EndRxTransaction+0x74>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e4:	d112      	bne.n	800330c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2200      	movs	r2, #0
 80032ee:	2101      	movs	r1, #1
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f7ff ff49 	bl	8003188 <SPI_WaitFlagStateUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d01a      	beq.n	8003332 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003300:	f043 0220 	orr.w	r2, r3, #32
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e013      	b.n	8003334 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2200      	movs	r2, #0
 8003314:	2180      	movs	r1, #128	; 0x80
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f7ff ff36 	bl	8003188 <SPI_WaitFlagStateUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d007      	beq.n	8003332 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003326:	f043 0220 	orr.w	r2, r3, #32
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e000      	b.n	8003334 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af02      	add	r7, sp, #8
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2200      	movs	r2, #0
 8003350:	2180      	movs	r1, #128	; 0x80
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f7ff ff18 	bl	8003188 <SPI_WaitFlagStateUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d007      	beq.n	800336e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003362:	f043 0220 	orr.w	r2, r3, #32
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e000      	b.n	8003370 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <__errno>:
 8003378:	4b01      	ldr	r3, [pc, #4]	; (8003380 <__errno+0x8>)
 800337a:	6818      	ldr	r0, [r3, #0]
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	2000001c 	.word	0x2000001c

08003384 <__libc_init_array>:
 8003384:	b570      	push	{r4, r5, r6, lr}
 8003386:	2600      	movs	r6, #0
 8003388:	4d0c      	ldr	r5, [pc, #48]	; (80033bc <__libc_init_array+0x38>)
 800338a:	4c0d      	ldr	r4, [pc, #52]	; (80033c0 <__libc_init_array+0x3c>)
 800338c:	1b64      	subs	r4, r4, r5
 800338e:	10a4      	asrs	r4, r4, #2
 8003390:	42a6      	cmp	r6, r4
 8003392:	d109      	bne.n	80033a8 <__libc_init_array+0x24>
 8003394:	f000 fcc8 	bl	8003d28 <_init>
 8003398:	2600      	movs	r6, #0
 800339a:	4d0a      	ldr	r5, [pc, #40]	; (80033c4 <__libc_init_array+0x40>)
 800339c:	4c0a      	ldr	r4, [pc, #40]	; (80033c8 <__libc_init_array+0x44>)
 800339e:	1b64      	subs	r4, r4, r5
 80033a0:	10a4      	asrs	r4, r4, #2
 80033a2:	42a6      	cmp	r6, r4
 80033a4:	d105      	bne.n	80033b2 <__libc_init_array+0x2e>
 80033a6:	bd70      	pop	{r4, r5, r6, pc}
 80033a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ac:	4798      	blx	r3
 80033ae:	3601      	adds	r6, #1
 80033b0:	e7ee      	b.n	8003390 <__libc_init_array+0xc>
 80033b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b6:	4798      	blx	r3
 80033b8:	3601      	adds	r6, #1
 80033ba:	e7f2      	b.n	80033a2 <__libc_init_array+0x1e>
 80033bc:	08004560 	.word	0x08004560
 80033c0:	08004560 	.word	0x08004560
 80033c4:	08004560 	.word	0x08004560
 80033c8:	08004564 	.word	0x08004564

080033cc <__itoa>:
 80033cc:	1e93      	subs	r3, r2, #2
 80033ce:	2b22      	cmp	r3, #34	; 0x22
 80033d0:	b510      	push	{r4, lr}
 80033d2:	460c      	mov	r4, r1
 80033d4:	d904      	bls.n	80033e0 <__itoa+0x14>
 80033d6:	2300      	movs	r3, #0
 80033d8:	461c      	mov	r4, r3
 80033da:	700b      	strb	r3, [r1, #0]
 80033dc:	4620      	mov	r0, r4
 80033de:	bd10      	pop	{r4, pc}
 80033e0:	2a0a      	cmp	r2, #10
 80033e2:	d109      	bne.n	80033f8 <__itoa+0x2c>
 80033e4:	2800      	cmp	r0, #0
 80033e6:	da07      	bge.n	80033f8 <__itoa+0x2c>
 80033e8:	232d      	movs	r3, #45	; 0x2d
 80033ea:	700b      	strb	r3, [r1, #0]
 80033ec:	2101      	movs	r1, #1
 80033ee:	4240      	negs	r0, r0
 80033f0:	4421      	add	r1, r4
 80033f2:	f000 f83d 	bl	8003470 <__utoa>
 80033f6:	e7f1      	b.n	80033dc <__itoa+0x10>
 80033f8:	2100      	movs	r1, #0
 80033fa:	e7f9      	b.n	80033f0 <__itoa+0x24>

080033fc <itoa>:
 80033fc:	f7ff bfe6 	b.w	80033cc <__itoa>

08003400 <memset>:
 8003400:	4603      	mov	r3, r0
 8003402:	4402      	add	r2, r0
 8003404:	4293      	cmp	r3, r2
 8003406:	d100      	bne.n	800340a <memset+0xa>
 8003408:	4770      	bx	lr
 800340a:	f803 1b01 	strb.w	r1, [r3], #1
 800340e:	e7f9      	b.n	8003404 <memset+0x4>

08003410 <siprintf>:
 8003410:	b40e      	push	{r1, r2, r3}
 8003412:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003416:	b500      	push	{lr}
 8003418:	b09c      	sub	sp, #112	; 0x70
 800341a:	ab1d      	add	r3, sp, #116	; 0x74
 800341c:	9002      	str	r0, [sp, #8]
 800341e:	9006      	str	r0, [sp, #24]
 8003420:	9107      	str	r1, [sp, #28]
 8003422:	9104      	str	r1, [sp, #16]
 8003424:	4808      	ldr	r0, [pc, #32]	; (8003448 <siprintf+0x38>)
 8003426:	4909      	ldr	r1, [pc, #36]	; (800344c <siprintf+0x3c>)
 8003428:	f853 2b04 	ldr.w	r2, [r3], #4
 800342c:	9105      	str	r1, [sp, #20]
 800342e:	6800      	ldr	r0, [r0, #0]
 8003430:	a902      	add	r1, sp, #8
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	f000 f8ba 	bl	80035ac <_svfiprintf_r>
 8003438:	2200      	movs	r2, #0
 800343a:	9b02      	ldr	r3, [sp, #8]
 800343c:	701a      	strb	r2, [r3, #0]
 800343e:	b01c      	add	sp, #112	; 0x70
 8003440:	f85d eb04 	ldr.w	lr, [sp], #4
 8003444:	b003      	add	sp, #12
 8003446:	4770      	bx	lr
 8003448:	2000001c 	.word	0x2000001c
 800344c:	ffff0208 	.word	0xffff0208

08003450 <strcat>:
 8003450:	4602      	mov	r2, r0
 8003452:	b510      	push	{r4, lr}
 8003454:	7814      	ldrb	r4, [r2, #0]
 8003456:	4613      	mov	r3, r2
 8003458:	3201      	adds	r2, #1
 800345a:	2c00      	cmp	r4, #0
 800345c:	d1fa      	bne.n	8003454 <strcat+0x4>
 800345e:	3b01      	subs	r3, #1
 8003460:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003464:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003468:	2a00      	cmp	r2, #0
 800346a:	d1f9      	bne.n	8003460 <strcat+0x10>
 800346c:	bd10      	pop	{r4, pc}
	...

08003470 <__utoa>:
 8003470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003472:	b08b      	sub	sp, #44	; 0x2c
 8003474:	4605      	mov	r5, r0
 8003476:	460b      	mov	r3, r1
 8003478:	466e      	mov	r6, sp
 800347a:	4c1d      	ldr	r4, [pc, #116]	; (80034f0 <__utoa+0x80>)
 800347c:	f104 0c20 	add.w	ip, r4, #32
 8003480:	4637      	mov	r7, r6
 8003482:	6820      	ldr	r0, [r4, #0]
 8003484:	6861      	ldr	r1, [r4, #4]
 8003486:	3408      	adds	r4, #8
 8003488:	c703      	stmia	r7!, {r0, r1}
 800348a:	4564      	cmp	r4, ip
 800348c:	463e      	mov	r6, r7
 800348e:	d1f7      	bne.n	8003480 <__utoa+0x10>
 8003490:	7921      	ldrb	r1, [r4, #4]
 8003492:	6820      	ldr	r0, [r4, #0]
 8003494:	7139      	strb	r1, [r7, #4]
 8003496:	1e91      	subs	r1, r2, #2
 8003498:	2922      	cmp	r1, #34	; 0x22
 800349a:	6038      	str	r0, [r7, #0]
 800349c:	f04f 0100 	mov.w	r1, #0
 80034a0:	d904      	bls.n	80034ac <__utoa+0x3c>
 80034a2:	7019      	strb	r1, [r3, #0]
 80034a4:	460b      	mov	r3, r1
 80034a6:	4618      	mov	r0, r3
 80034a8:	b00b      	add	sp, #44	; 0x2c
 80034aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ac:	1e58      	subs	r0, r3, #1
 80034ae:	4684      	mov	ip, r0
 80034b0:	fbb5 f7f2 	udiv	r7, r5, r2
 80034b4:	fb02 5617 	mls	r6, r2, r7, r5
 80034b8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80034bc:	4476      	add	r6, lr
 80034be:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80034c2:	460c      	mov	r4, r1
 80034c4:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80034c8:	462e      	mov	r6, r5
 80034ca:	42b2      	cmp	r2, r6
 80034cc:	463d      	mov	r5, r7
 80034ce:	f101 0101 	add.w	r1, r1, #1
 80034d2:	d9ed      	bls.n	80034b0 <__utoa+0x40>
 80034d4:	2200      	movs	r2, #0
 80034d6:	545a      	strb	r2, [r3, r1]
 80034d8:	1919      	adds	r1, r3, r4
 80034da:	1aa5      	subs	r5, r4, r2
 80034dc:	42aa      	cmp	r2, r5
 80034de:	dae2      	bge.n	80034a6 <__utoa+0x36>
 80034e0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80034e4:	780e      	ldrb	r6, [r1, #0]
 80034e6:	3201      	adds	r2, #1
 80034e8:	7006      	strb	r6, [r0, #0]
 80034ea:	f801 5901 	strb.w	r5, [r1], #-1
 80034ee:	e7f4      	b.n	80034da <__utoa+0x6a>
 80034f0:	08004508 	.word	0x08004508

080034f4 <__ssputs_r>:
 80034f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034f8:	688e      	ldr	r6, [r1, #8]
 80034fa:	4682      	mov	sl, r0
 80034fc:	429e      	cmp	r6, r3
 80034fe:	460c      	mov	r4, r1
 8003500:	4690      	mov	r8, r2
 8003502:	461f      	mov	r7, r3
 8003504:	d838      	bhi.n	8003578 <__ssputs_r+0x84>
 8003506:	898a      	ldrh	r2, [r1, #12]
 8003508:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800350c:	d032      	beq.n	8003574 <__ssputs_r+0x80>
 800350e:	6825      	ldr	r5, [r4, #0]
 8003510:	6909      	ldr	r1, [r1, #16]
 8003512:	3301      	adds	r3, #1
 8003514:	eba5 0901 	sub.w	r9, r5, r1
 8003518:	6965      	ldr	r5, [r4, #20]
 800351a:	444b      	add	r3, r9
 800351c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003520:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003524:	106d      	asrs	r5, r5, #1
 8003526:	429d      	cmp	r5, r3
 8003528:	bf38      	it	cc
 800352a:	461d      	movcc	r5, r3
 800352c:	0553      	lsls	r3, r2, #21
 800352e:	d531      	bpl.n	8003594 <__ssputs_r+0xa0>
 8003530:	4629      	mov	r1, r5
 8003532:	f000 fb53 	bl	8003bdc <_malloc_r>
 8003536:	4606      	mov	r6, r0
 8003538:	b950      	cbnz	r0, 8003550 <__ssputs_r+0x5c>
 800353a:	230c      	movs	r3, #12
 800353c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003540:	f8ca 3000 	str.w	r3, [sl]
 8003544:	89a3      	ldrh	r3, [r4, #12]
 8003546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800354a:	81a3      	strh	r3, [r4, #12]
 800354c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003550:	464a      	mov	r2, r9
 8003552:	6921      	ldr	r1, [r4, #16]
 8003554:	f000 face 	bl	8003af4 <memcpy>
 8003558:	89a3      	ldrh	r3, [r4, #12]
 800355a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800355e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003562:	81a3      	strh	r3, [r4, #12]
 8003564:	6126      	str	r6, [r4, #16]
 8003566:	444e      	add	r6, r9
 8003568:	6026      	str	r6, [r4, #0]
 800356a:	463e      	mov	r6, r7
 800356c:	6165      	str	r5, [r4, #20]
 800356e:	eba5 0509 	sub.w	r5, r5, r9
 8003572:	60a5      	str	r5, [r4, #8]
 8003574:	42be      	cmp	r6, r7
 8003576:	d900      	bls.n	800357a <__ssputs_r+0x86>
 8003578:	463e      	mov	r6, r7
 800357a:	4632      	mov	r2, r6
 800357c:	4641      	mov	r1, r8
 800357e:	6820      	ldr	r0, [r4, #0]
 8003580:	f000 fac6 	bl	8003b10 <memmove>
 8003584:	68a3      	ldr	r3, [r4, #8]
 8003586:	6822      	ldr	r2, [r4, #0]
 8003588:	1b9b      	subs	r3, r3, r6
 800358a:	4432      	add	r2, r6
 800358c:	2000      	movs	r0, #0
 800358e:	60a3      	str	r3, [r4, #8]
 8003590:	6022      	str	r2, [r4, #0]
 8003592:	e7db      	b.n	800354c <__ssputs_r+0x58>
 8003594:	462a      	mov	r2, r5
 8003596:	f000 fb7b 	bl	8003c90 <_realloc_r>
 800359a:	4606      	mov	r6, r0
 800359c:	2800      	cmp	r0, #0
 800359e:	d1e1      	bne.n	8003564 <__ssputs_r+0x70>
 80035a0:	4650      	mov	r0, sl
 80035a2:	6921      	ldr	r1, [r4, #16]
 80035a4:	f000 face 	bl	8003b44 <_free_r>
 80035a8:	e7c7      	b.n	800353a <__ssputs_r+0x46>
	...

080035ac <_svfiprintf_r>:
 80035ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b0:	4698      	mov	r8, r3
 80035b2:	898b      	ldrh	r3, [r1, #12]
 80035b4:	4607      	mov	r7, r0
 80035b6:	061b      	lsls	r3, r3, #24
 80035b8:	460d      	mov	r5, r1
 80035ba:	4614      	mov	r4, r2
 80035bc:	b09d      	sub	sp, #116	; 0x74
 80035be:	d50e      	bpl.n	80035de <_svfiprintf_r+0x32>
 80035c0:	690b      	ldr	r3, [r1, #16]
 80035c2:	b963      	cbnz	r3, 80035de <_svfiprintf_r+0x32>
 80035c4:	2140      	movs	r1, #64	; 0x40
 80035c6:	f000 fb09 	bl	8003bdc <_malloc_r>
 80035ca:	6028      	str	r0, [r5, #0]
 80035cc:	6128      	str	r0, [r5, #16]
 80035ce:	b920      	cbnz	r0, 80035da <_svfiprintf_r+0x2e>
 80035d0:	230c      	movs	r3, #12
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035d8:	e0d1      	b.n	800377e <_svfiprintf_r+0x1d2>
 80035da:	2340      	movs	r3, #64	; 0x40
 80035dc:	616b      	str	r3, [r5, #20]
 80035de:	2300      	movs	r3, #0
 80035e0:	9309      	str	r3, [sp, #36]	; 0x24
 80035e2:	2320      	movs	r3, #32
 80035e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035e8:	2330      	movs	r3, #48	; 0x30
 80035ea:	f04f 0901 	mov.w	r9, #1
 80035ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80035f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003798 <_svfiprintf_r+0x1ec>
 80035f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035fa:	4623      	mov	r3, r4
 80035fc:	469a      	mov	sl, r3
 80035fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003602:	b10a      	cbz	r2, 8003608 <_svfiprintf_r+0x5c>
 8003604:	2a25      	cmp	r2, #37	; 0x25
 8003606:	d1f9      	bne.n	80035fc <_svfiprintf_r+0x50>
 8003608:	ebba 0b04 	subs.w	fp, sl, r4
 800360c:	d00b      	beq.n	8003626 <_svfiprintf_r+0x7a>
 800360e:	465b      	mov	r3, fp
 8003610:	4622      	mov	r2, r4
 8003612:	4629      	mov	r1, r5
 8003614:	4638      	mov	r0, r7
 8003616:	f7ff ff6d 	bl	80034f4 <__ssputs_r>
 800361a:	3001      	adds	r0, #1
 800361c:	f000 80aa 	beq.w	8003774 <_svfiprintf_r+0x1c8>
 8003620:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003622:	445a      	add	r2, fp
 8003624:	9209      	str	r2, [sp, #36]	; 0x24
 8003626:	f89a 3000 	ldrb.w	r3, [sl]
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 80a2 	beq.w	8003774 <_svfiprintf_r+0x1c8>
 8003630:	2300      	movs	r3, #0
 8003632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800363a:	f10a 0a01 	add.w	sl, sl, #1
 800363e:	9304      	str	r3, [sp, #16]
 8003640:	9307      	str	r3, [sp, #28]
 8003642:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003646:	931a      	str	r3, [sp, #104]	; 0x68
 8003648:	4654      	mov	r4, sl
 800364a:	2205      	movs	r2, #5
 800364c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003650:	4851      	ldr	r0, [pc, #324]	; (8003798 <_svfiprintf_r+0x1ec>)
 8003652:	f000 fa41 	bl	8003ad8 <memchr>
 8003656:	9a04      	ldr	r2, [sp, #16]
 8003658:	b9d8      	cbnz	r0, 8003692 <_svfiprintf_r+0xe6>
 800365a:	06d0      	lsls	r0, r2, #27
 800365c:	bf44      	itt	mi
 800365e:	2320      	movmi	r3, #32
 8003660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003664:	0711      	lsls	r1, r2, #28
 8003666:	bf44      	itt	mi
 8003668:	232b      	movmi	r3, #43	; 0x2b
 800366a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800366e:	f89a 3000 	ldrb.w	r3, [sl]
 8003672:	2b2a      	cmp	r3, #42	; 0x2a
 8003674:	d015      	beq.n	80036a2 <_svfiprintf_r+0xf6>
 8003676:	4654      	mov	r4, sl
 8003678:	2000      	movs	r0, #0
 800367a:	f04f 0c0a 	mov.w	ip, #10
 800367e:	9a07      	ldr	r2, [sp, #28]
 8003680:	4621      	mov	r1, r4
 8003682:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003686:	3b30      	subs	r3, #48	; 0x30
 8003688:	2b09      	cmp	r3, #9
 800368a:	d94e      	bls.n	800372a <_svfiprintf_r+0x17e>
 800368c:	b1b0      	cbz	r0, 80036bc <_svfiprintf_r+0x110>
 800368e:	9207      	str	r2, [sp, #28]
 8003690:	e014      	b.n	80036bc <_svfiprintf_r+0x110>
 8003692:	eba0 0308 	sub.w	r3, r0, r8
 8003696:	fa09 f303 	lsl.w	r3, r9, r3
 800369a:	4313      	orrs	r3, r2
 800369c:	46a2      	mov	sl, r4
 800369e:	9304      	str	r3, [sp, #16]
 80036a0:	e7d2      	b.n	8003648 <_svfiprintf_r+0x9c>
 80036a2:	9b03      	ldr	r3, [sp, #12]
 80036a4:	1d19      	adds	r1, r3, #4
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	9103      	str	r1, [sp, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bfbb      	ittet	lt
 80036ae:	425b      	neglt	r3, r3
 80036b0:	f042 0202 	orrlt.w	r2, r2, #2
 80036b4:	9307      	strge	r3, [sp, #28]
 80036b6:	9307      	strlt	r3, [sp, #28]
 80036b8:	bfb8      	it	lt
 80036ba:	9204      	strlt	r2, [sp, #16]
 80036bc:	7823      	ldrb	r3, [r4, #0]
 80036be:	2b2e      	cmp	r3, #46	; 0x2e
 80036c0:	d10c      	bne.n	80036dc <_svfiprintf_r+0x130>
 80036c2:	7863      	ldrb	r3, [r4, #1]
 80036c4:	2b2a      	cmp	r3, #42	; 0x2a
 80036c6:	d135      	bne.n	8003734 <_svfiprintf_r+0x188>
 80036c8:	9b03      	ldr	r3, [sp, #12]
 80036ca:	3402      	adds	r4, #2
 80036cc:	1d1a      	adds	r2, r3, #4
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	9203      	str	r2, [sp, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	bfb8      	it	lt
 80036d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80036da:	9305      	str	r3, [sp, #20]
 80036dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80037a8 <_svfiprintf_r+0x1fc>
 80036e0:	2203      	movs	r2, #3
 80036e2:	4650      	mov	r0, sl
 80036e4:	7821      	ldrb	r1, [r4, #0]
 80036e6:	f000 f9f7 	bl	8003ad8 <memchr>
 80036ea:	b140      	cbz	r0, 80036fe <_svfiprintf_r+0x152>
 80036ec:	2340      	movs	r3, #64	; 0x40
 80036ee:	eba0 000a 	sub.w	r0, r0, sl
 80036f2:	fa03 f000 	lsl.w	r0, r3, r0
 80036f6:	9b04      	ldr	r3, [sp, #16]
 80036f8:	3401      	adds	r4, #1
 80036fa:	4303      	orrs	r3, r0
 80036fc:	9304      	str	r3, [sp, #16]
 80036fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003702:	2206      	movs	r2, #6
 8003704:	4825      	ldr	r0, [pc, #148]	; (800379c <_svfiprintf_r+0x1f0>)
 8003706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800370a:	f000 f9e5 	bl	8003ad8 <memchr>
 800370e:	2800      	cmp	r0, #0
 8003710:	d038      	beq.n	8003784 <_svfiprintf_r+0x1d8>
 8003712:	4b23      	ldr	r3, [pc, #140]	; (80037a0 <_svfiprintf_r+0x1f4>)
 8003714:	bb1b      	cbnz	r3, 800375e <_svfiprintf_r+0x1b2>
 8003716:	9b03      	ldr	r3, [sp, #12]
 8003718:	3307      	adds	r3, #7
 800371a:	f023 0307 	bic.w	r3, r3, #7
 800371e:	3308      	adds	r3, #8
 8003720:	9303      	str	r3, [sp, #12]
 8003722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003724:	4433      	add	r3, r6
 8003726:	9309      	str	r3, [sp, #36]	; 0x24
 8003728:	e767      	b.n	80035fa <_svfiprintf_r+0x4e>
 800372a:	460c      	mov	r4, r1
 800372c:	2001      	movs	r0, #1
 800372e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003732:	e7a5      	b.n	8003680 <_svfiprintf_r+0xd4>
 8003734:	2300      	movs	r3, #0
 8003736:	f04f 0c0a 	mov.w	ip, #10
 800373a:	4619      	mov	r1, r3
 800373c:	3401      	adds	r4, #1
 800373e:	9305      	str	r3, [sp, #20]
 8003740:	4620      	mov	r0, r4
 8003742:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003746:	3a30      	subs	r2, #48	; 0x30
 8003748:	2a09      	cmp	r2, #9
 800374a:	d903      	bls.n	8003754 <_svfiprintf_r+0x1a8>
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0c5      	beq.n	80036dc <_svfiprintf_r+0x130>
 8003750:	9105      	str	r1, [sp, #20]
 8003752:	e7c3      	b.n	80036dc <_svfiprintf_r+0x130>
 8003754:	4604      	mov	r4, r0
 8003756:	2301      	movs	r3, #1
 8003758:	fb0c 2101 	mla	r1, ip, r1, r2
 800375c:	e7f0      	b.n	8003740 <_svfiprintf_r+0x194>
 800375e:	ab03      	add	r3, sp, #12
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	462a      	mov	r2, r5
 8003764:	4638      	mov	r0, r7
 8003766:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <_svfiprintf_r+0x1f8>)
 8003768:	a904      	add	r1, sp, #16
 800376a:	f3af 8000 	nop.w
 800376e:	1c42      	adds	r2, r0, #1
 8003770:	4606      	mov	r6, r0
 8003772:	d1d6      	bne.n	8003722 <_svfiprintf_r+0x176>
 8003774:	89ab      	ldrh	r3, [r5, #12]
 8003776:	065b      	lsls	r3, r3, #25
 8003778:	f53f af2c 	bmi.w	80035d4 <_svfiprintf_r+0x28>
 800377c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800377e:	b01d      	add	sp, #116	; 0x74
 8003780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003784:	ab03      	add	r3, sp, #12
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	462a      	mov	r2, r5
 800378a:	4638      	mov	r0, r7
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <_svfiprintf_r+0x1f8>)
 800378e:	a904      	add	r1, sp, #16
 8003790:	f000 f87c 	bl	800388c <_printf_i>
 8003794:	e7eb      	b.n	800376e <_svfiprintf_r+0x1c2>
 8003796:	bf00      	nop
 8003798:	0800452d 	.word	0x0800452d
 800379c:	08004537 	.word	0x08004537
 80037a0:	00000000 	.word	0x00000000
 80037a4:	080034f5 	.word	0x080034f5
 80037a8:	08004533 	.word	0x08004533

080037ac <_printf_common>:
 80037ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037b0:	4616      	mov	r6, r2
 80037b2:	4699      	mov	r9, r3
 80037b4:	688a      	ldr	r2, [r1, #8]
 80037b6:	690b      	ldr	r3, [r1, #16]
 80037b8:	4607      	mov	r7, r0
 80037ba:	4293      	cmp	r3, r2
 80037bc:	bfb8      	it	lt
 80037be:	4613      	movlt	r3, r2
 80037c0:	6033      	str	r3, [r6, #0]
 80037c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037c6:	460c      	mov	r4, r1
 80037c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037cc:	b10a      	cbz	r2, 80037d2 <_printf_common+0x26>
 80037ce:	3301      	adds	r3, #1
 80037d0:	6033      	str	r3, [r6, #0]
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	0699      	lsls	r1, r3, #26
 80037d6:	bf42      	ittt	mi
 80037d8:	6833      	ldrmi	r3, [r6, #0]
 80037da:	3302      	addmi	r3, #2
 80037dc:	6033      	strmi	r3, [r6, #0]
 80037de:	6825      	ldr	r5, [r4, #0]
 80037e0:	f015 0506 	ands.w	r5, r5, #6
 80037e4:	d106      	bne.n	80037f4 <_printf_common+0x48>
 80037e6:	f104 0a19 	add.w	sl, r4, #25
 80037ea:	68e3      	ldr	r3, [r4, #12]
 80037ec:	6832      	ldr	r2, [r6, #0]
 80037ee:	1a9b      	subs	r3, r3, r2
 80037f0:	42ab      	cmp	r3, r5
 80037f2:	dc28      	bgt.n	8003846 <_printf_common+0x9a>
 80037f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037f8:	1e13      	subs	r3, r2, #0
 80037fa:	6822      	ldr	r2, [r4, #0]
 80037fc:	bf18      	it	ne
 80037fe:	2301      	movne	r3, #1
 8003800:	0692      	lsls	r2, r2, #26
 8003802:	d42d      	bmi.n	8003860 <_printf_common+0xb4>
 8003804:	4649      	mov	r1, r9
 8003806:	4638      	mov	r0, r7
 8003808:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800380c:	47c0      	blx	r8
 800380e:	3001      	adds	r0, #1
 8003810:	d020      	beq.n	8003854 <_printf_common+0xa8>
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	68e5      	ldr	r5, [r4, #12]
 8003816:	f003 0306 	and.w	r3, r3, #6
 800381a:	2b04      	cmp	r3, #4
 800381c:	bf18      	it	ne
 800381e:	2500      	movne	r5, #0
 8003820:	6832      	ldr	r2, [r6, #0]
 8003822:	f04f 0600 	mov.w	r6, #0
 8003826:	68a3      	ldr	r3, [r4, #8]
 8003828:	bf08      	it	eq
 800382a:	1aad      	subeq	r5, r5, r2
 800382c:	6922      	ldr	r2, [r4, #16]
 800382e:	bf08      	it	eq
 8003830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003834:	4293      	cmp	r3, r2
 8003836:	bfc4      	itt	gt
 8003838:	1a9b      	subgt	r3, r3, r2
 800383a:	18ed      	addgt	r5, r5, r3
 800383c:	341a      	adds	r4, #26
 800383e:	42b5      	cmp	r5, r6
 8003840:	d11a      	bne.n	8003878 <_printf_common+0xcc>
 8003842:	2000      	movs	r0, #0
 8003844:	e008      	b.n	8003858 <_printf_common+0xac>
 8003846:	2301      	movs	r3, #1
 8003848:	4652      	mov	r2, sl
 800384a:	4649      	mov	r1, r9
 800384c:	4638      	mov	r0, r7
 800384e:	47c0      	blx	r8
 8003850:	3001      	adds	r0, #1
 8003852:	d103      	bne.n	800385c <_printf_common+0xb0>
 8003854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800385c:	3501      	adds	r5, #1
 800385e:	e7c4      	b.n	80037ea <_printf_common+0x3e>
 8003860:	2030      	movs	r0, #48	; 0x30
 8003862:	18e1      	adds	r1, r4, r3
 8003864:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800386e:	4422      	add	r2, r4
 8003870:	3302      	adds	r3, #2
 8003872:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003876:	e7c5      	b.n	8003804 <_printf_common+0x58>
 8003878:	2301      	movs	r3, #1
 800387a:	4622      	mov	r2, r4
 800387c:	4649      	mov	r1, r9
 800387e:	4638      	mov	r0, r7
 8003880:	47c0      	blx	r8
 8003882:	3001      	adds	r0, #1
 8003884:	d0e6      	beq.n	8003854 <_printf_common+0xa8>
 8003886:	3601      	adds	r6, #1
 8003888:	e7d9      	b.n	800383e <_printf_common+0x92>
	...

0800388c <_printf_i>:
 800388c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003890:	460c      	mov	r4, r1
 8003892:	7e27      	ldrb	r7, [r4, #24]
 8003894:	4691      	mov	r9, r2
 8003896:	2f78      	cmp	r7, #120	; 0x78
 8003898:	4680      	mov	r8, r0
 800389a:	469a      	mov	sl, r3
 800389c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800389e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038a2:	d807      	bhi.n	80038b4 <_printf_i+0x28>
 80038a4:	2f62      	cmp	r7, #98	; 0x62
 80038a6:	d80a      	bhi.n	80038be <_printf_i+0x32>
 80038a8:	2f00      	cmp	r7, #0
 80038aa:	f000 80d9 	beq.w	8003a60 <_printf_i+0x1d4>
 80038ae:	2f58      	cmp	r7, #88	; 0x58
 80038b0:	f000 80a4 	beq.w	80039fc <_printf_i+0x170>
 80038b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80038b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038bc:	e03a      	b.n	8003934 <_printf_i+0xa8>
 80038be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038c2:	2b15      	cmp	r3, #21
 80038c4:	d8f6      	bhi.n	80038b4 <_printf_i+0x28>
 80038c6:	a001      	add	r0, pc, #4	; (adr r0, 80038cc <_printf_i+0x40>)
 80038c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80038cc:	08003925 	.word	0x08003925
 80038d0:	08003939 	.word	0x08003939
 80038d4:	080038b5 	.word	0x080038b5
 80038d8:	080038b5 	.word	0x080038b5
 80038dc:	080038b5 	.word	0x080038b5
 80038e0:	080038b5 	.word	0x080038b5
 80038e4:	08003939 	.word	0x08003939
 80038e8:	080038b5 	.word	0x080038b5
 80038ec:	080038b5 	.word	0x080038b5
 80038f0:	080038b5 	.word	0x080038b5
 80038f4:	080038b5 	.word	0x080038b5
 80038f8:	08003a47 	.word	0x08003a47
 80038fc:	08003969 	.word	0x08003969
 8003900:	08003a29 	.word	0x08003a29
 8003904:	080038b5 	.word	0x080038b5
 8003908:	080038b5 	.word	0x080038b5
 800390c:	08003a69 	.word	0x08003a69
 8003910:	080038b5 	.word	0x080038b5
 8003914:	08003969 	.word	0x08003969
 8003918:	080038b5 	.word	0x080038b5
 800391c:	080038b5 	.word	0x080038b5
 8003920:	08003a31 	.word	0x08003a31
 8003924:	680b      	ldr	r3, [r1, #0]
 8003926:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800392a:	1d1a      	adds	r2, r3, #4
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	600a      	str	r2, [r1, #0]
 8003930:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003934:	2301      	movs	r3, #1
 8003936:	e0a4      	b.n	8003a82 <_printf_i+0x1f6>
 8003938:	6825      	ldr	r5, [r4, #0]
 800393a:	6808      	ldr	r0, [r1, #0]
 800393c:	062e      	lsls	r6, r5, #24
 800393e:	f100 0304 	add.w	r3, r0, #4
 8003942:	d50a      	bpl.n	800395a <_printf_i+0xce>
 8003944:	6805      	ldr	r5, [r0, #0]
 8003946:	600b      	str	r3, [r1, #0]
 8003948:	2d00      	cmp	r5, #0
 800394a:	da03      	bge.n	8003954 <_printf_i+0xc8>
 800394c:	232d      	movs	r3, #45	; 0x2d
 800394e:	426d      	negs	r5, r5
 8003950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003954:	230a      	movs	r3, #10
 8003956:	485e      	ldr	r0, [pc, #376]	; (8003ad0 <_printf_i+0x244>)
 8003958:	e019      	b.n	800398e <_printf_i+0x102>
 800395a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800395e:	6805      	ldr	r5, [r0, #0]
 8003960:	600b      	str	r3, [r1, #0]
 8003962:	bf18      	it	ne
 8003964:	b22d      	sxthne	r5, r5
 8003966:	e7ef      	b.n	8003948 <_printf_i+0xbc>
 8003968:	680b      	ldr	r3, [r1, #0]
 800396a:	6825      	ldr	r5, [r4, #0]
 800396c:	1d18      	adds	r0, r3, #4
 800396e:	6008      	str	r0, [r1, #0]
 8003970:	0628      	lsls	r0, r5, #24
 8003972:	d501      	bpl.n	8003978 <_printf_i+0xec>
 8003974:	681d      	ldr	r5, [r3, #0]
 8003976:	e002      	b.n	800397e <_printf_i+0xf2>
 8003978:	0669      	lsls	r1, r5, #25
 800397a:	d5fb      	bpl.n	8003974 <_printf_i+0xe8>
 800397c:	881d      	ldrh	r5, [r3, #0]
 800397e:	2f6f      	cmp	r7, #111	; 0x6f
 8003980:	bf0c      	ite	eq
 8003982:	2308      	moveq	r3, #8
 8003984:	230a      	movne	r3, #10
 8003986:	4852      	ldr	r0, [pc, #328]	; (8003ad0 <_printf_i+0x244>)
 8003988:	2100      	movs	r1, #0
 800398a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800398e:	6866      	ldr	r6, [r4, #4]
 8003990:	2e00      	cmp	r6, #0
 8003992:	bfa8      	it	ge
 8003994:	6821      	ldrge	r1, [r4, #0]
 8003996:	60a6      	str	r6, [r4, #8]
 8003998:	bfa4      	itt	ge
 800399a:	f021 0104 	bicge.w	r1, r1, #4
 800399e:	6021      	strge	r1, [r4, #0]
 80039a0:	b90d      	cbnz	r5, 80039a6 <_printf_i+0x11a>
 80039a2:	2e00      	cmp	r6, #0
 80039a4:	d04d      	beq.n	8003a42 <_printf_i+0x1b6>
 80039a6:	4616      	mov	r6, r2
 80039a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80039ac:	fb03 5711 	mls	r7, r3, r1, r5
 80039b0:	5dc7      	ldrb	r7, [r0, r7]
 80039b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039b6:	462f      	mov	r7, r5
 80039b8:	42bb      	cmp	r3, r7
 80039ba:	460d      	mov	r5, r1
 80039bc:	d9f4      	bls.n	80039a8 <_printf_i+0x11c>
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d10b      	bne.n	80039da <_printf_i+0x14e>
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	07df      	lsls	r7, r3, #31
 80039c6:	d508      	bpl.n	80039da <_printf_i+0x14e>
 80039c8:	6923      	ldr	r3, [r4, #16]
 80039ca:	6861      	ldr	r1, [r4, #4]
 80039cc:	4299      	cmp	r1, r3
 80039ce:	bfde      	ittt	le
 80039d0:	2330      	movle	r3, #48	; 0x30
 80039d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039d6:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80039da:	1b92      	subs	r2, r2, r6
 80039dc:	6122      	str	r2, [r4, #16]
 80039de:	464b      	mov	r3, r9
 80039e0:	4621      	mov	r1, r4
 80039e2:	4640      	mov	r0, r8
 80039e4:	f8cd a000 	str.w	sl, [sp]
 80039e8:	aa03      	add	r2, sp, #12
 80039ea:	f7ff fedf 	bl	80037ac <_printf_common>
 80039ee:	3001      	adds	r0, #1
 80039f0:	d14c      	bne.n	8003a8c <_printf_i+0x200>
 80039f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039f6:	b004      	add	sp, #16
 80039f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039fc:	4834      	ldr	r0, [pc, #208]	; (8003ad0 <_printf_i+0x244>)
 80039fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a02:	680e      	ldr	r6, [r1, #0]
 8003a04:	6823      	ldr	r3, [r4, #0]
 8003a06:	f856 5b04 	ldr.w	r5, [r6], #4
 8003a0a:	061f      	lsls	r7, r3, #24
 8003a0c:	600e      	str	r6, [r1, #0]
 8003a0e:	d514      	bpl.n	8003a3a <_printf_i+0x1ae>
 8003a10:	07d9      	lsls	r1, r3, #31
 8003a12:	bf44      	itt	mi
 8003a14:	f043 0320 	orrmi.w	r3, r3, #32
 8003a18:	6023      	strmi	r3, [r4, #0]
 8003a1a:	b91d      	cbnz	r5, 8003a24 <_printf_i+0x198>
 8003a1c:	6823      	ldr	r3, [r4, #0]
 8003a1e:	f023 0320 	bic.w	r3, r3, #32
 8003a22:	6023      	str	r3, [r4, #0]
 8003a24:	2310      	movs	r3, #16
 8003a26:	e7af      	b.n	8003988 <_printf_i+0xfc>
 8003a28:	6823      	ldr	r3, [r4, #0]
 8003a2a:	f043 0320 	orr.w	r3, r3, #32
 8003a2e:	6023      	str	r3, [r4, #0]
 8003a30:	2378      	movs	r3, #120	; 0x78
 8003a32:	4828      	ldr	r0, [pc, #160]	; (8003ad4 <_printf_i+0x248>)
 8003a34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a38:	e7e3      	b.n	8003a02 <_printf_i+0x176>
 8003a3a:	065e      	lsls	r6, r3, #25
 8003a3c:	bf48      	it	mi
 8003a3e:	b2ad      	uxthmi	r5, r5
 8003a40:	e7e6      	b.n	8003a10 <_printf_i+0x184>
 8003a42:	4616      	mov	r6, r2
 8003a44:	e7bb      	b.n	80039be <_printf_i+0x132>
 8003a46:	680b      	ldr	r3, [r1, #0]
 8003a48:	6826      	ldr	r6, [r4, #0]
 8003a4a:	1d1d      	adds	r5, r3, #4
 8003a4c:	6960      	ldr	r0, [r4, #20]
 8003a4e:	600d      	str	r5, [r1, #0]
 8003a50:	0635      	lsls	r5, r6, #24
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	d501      	bpl.n	8003a5a <_printf_i+0x1ce>
 8003a56:	6018      	str	r0, [r3, #0]
 8003a58:	e002      	b.n	8003a60 <_printf_i+0x1d4>
 8003a5a:	0671      	lsls	r1, r6, #25
 8003a5c:	d5fb      	bpl.n	8003a56 <_printf_i+0x1ca>
 8003a5e:	8018      	strh	r0, [r3, #0]
 8003a60:	2300      	movs	r3, #0
 8003a62:	4616      	mov	r6, r2
 8003a64:	6123      	str	r3, [r4, #16]
 8003a66:	e7ba      	b.n	80039de <_printf_i+0x152>
 8003a68:	680b      	ldr	r3, [r1, #0]
 8003a6a:	1d1a      	adds	r2, r3, #4
 8003a6c:	600a      	str	r2, [r1, #0]
 8003a6e:	681e      	ldr	r6, [r3, #0]
 8003a70:	2100      	movs	r1, #0
 8003a72:	4630      	mov	r0, r6
 8003a74:	6862      	ldr	r2, [r4, #4]
 8003a76:	f000 f82f 	bl	8003ad8 <memchr>
 8003a7a:	b108      	cbz	r0, 8003a80 <_printf_i+0x1f4>
 8003a7c:	1b80      	subs	r0, r0, r6
 8003a7e:	6060      	str	r0, [r4, #4]
 8003a80:	6863      	ldr	r3, [r4, #4]
 8003a82:	6123      	str	r3, [r4, #16]
 8003a84:	2300      	movs	r3, #0
 8003a86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a8a:	e7a8      	b.n	80039de <_printf_i+0x152>
 8003a8c:	4632      	mov	r2, r6
 8003a8e:	4649      	mov	r1, r9
 8003a90:	4640      	mov	r0, r8
 8003a92:	6923      	ldr	r3, [r4, #16]
 8003a94:	47d0      	blx	sl
 8003a96:	3001      	adds	r0, #1
 8003a98:	d0ab      	beq.n	80039f2 <_printf_i+0x166>
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	079b      	lsls	r3, r3, #30
 8003a9e:	d413      	bmi.n	8003ac8 <_printf_i+0x23c>
 8003aa0:	68e0      	ldr	r0, [r4, #12]
 8003aa2:	9b03      	ldr	r3, [sp, #12]
 8003aa4:	4298      	cmp	r0, r3
 8003aa6:	bfb8      	it	lt
 8003aa8:	4618      	movlt	r0, r3
 8003aaa:	e7a4      	b.n	80039f6 <_printf_i+0x16a>
 8003aac:	2301      	movs	r3, #1
 8003aae:	4632      	mov	r2, r6
 8003ab0:	4649      	mov	r1, r9
 8003ab2:	4640      	mov	r0, r8
 8003ab4:	47d0      	blx	sl
 8003ab6:	3001      	adds	r0, #1
 8003ab8:	d09b      	beq.n	80039f2 <_printf_i+0x166>
 8003aba:	3501      	adds	r5, #1
 8003abc:	68e3      	ldr	r3, [r4, #12]
 8003abe:	9903      	ldr	r1, [sp, #12]
 8003ac0:	1a5b      	subs	r3, r3, r1
 8003ac2:	42ab      	cmp	r3, r5
 8003ac4:	dcf2      	bgt.n	8003aac <_printf_i+0x220>
 8003ac6:	e7eb      	b.n	8003aa0 <_printf_i+0x214>
 8003ac8:	2500      	movs	r5, #0
 8003aca:	f104 0619 	add.w	r6, r4, #25
 8003ace:	e7f5      	b.n	8003abc <_printf_i+0x230>
 8003ad0:	0800453e 	.word	0x0800453e
 8003ad4:	0800454f 	.word	0x0800454f

08003ad8 <memchr>:
 8003ad8:	4603      	mov	r3, r0
 8003ada:	b510      	push	{r4, lr}
 8003adc:	b2c9      	uxtb	r1, r1
 8003ade:	4402      	add	r2, r0
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	d101      	bne.n	8003aea <memchr+0x12>
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	e003      	b.n	8003af2 <memchr+0x1a>
 8003aea:	7804      	ldrb	r4, [r0, #0]
 8003aec:	3301      	adds	r3, #1
 8003aee:	428c      	cmp	r4, r1
 8003af0:	d1f6      	bne.n	8003ae0 <memchr+0x8>
 8003af2:	bd10      	pop	{r4, pc}

08003af4 <memcpy>:
 8003af4:	440a      	add	r2, r1
 8003af6:	4291      	cmp	r1, r2
 8003af8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003afc:	d100      	bne.n	8003b00 <memcpy+0xc>
 8003afe:	4770      	bx	lr
 8003b00:	b510      	push	{r4, lr}
 8003b02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b06:	4291      	cmp	r1, r2
 8003b08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b0c:	d1f9      	bne.n	8003b02 <memcpy+0xe>
 8003b0e:	bd10      	pop	{r4, pc}

08003b10 <memmove>:
 8003b10:	4288      	cmp	r0, r1
 8003b12:	b510      	push	{r4, lr}
 8003b14:	eb01 0402 	add.w	r4, r1, r2
 8003b18:	d902      	bls.n	8003b20 <memmove+0x10>
 8003b1a:	4284      	cmp	r4, r0
 8003b1c:	4623      	mov	r3, r4
 8003b1e:	d807      	bhi.n	8003b30 <memmove+0x20>
 8003b20:	1e43      	subs	r3, r0, #1
 8003b22:	42a1      	cmp	r1, r4
 8003b24:	d008      	beq.n	8003b38 <memmove+0x28>
 8003b26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b2e:	e7f8      	b.n	8003b22 <memmove+0x12>
 8003b30:	4601      	mov	r1, r0
 8003b32:	4402      	add	r2, r0
 8003b34:	428a      	cmp	r2, r1
 8003b36:	d100      	bne.n	8003b3a <memmove+0x2a>
 8003b38:	bd10      	pop	{r4, pc}
 8003b3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b42:	e7f7      	b.n	8003b34 <memmove+0x24>

08003b44 <_free_r>:
 8003b44:	b538      	push	{r3, r4, r5, lr}
 8003b46:	4605      	mov	r5, r0
 8003b48:	2900      	cmp	r1, #0
 8003b4a:	d043      	beq.n	8003bd4 <_free_r+0x90>
 8003b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b50:	1f0c      	subs	r4, r1, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	bfb8      	it	lt
 8003b56:	18e4      	addlt	r4, r4, r3
 8003b58:	f000 f8d0 	bl	8003cfc <__malloc_lock>
 8003b5c:	4a1e      	ldr	r2, [pc, #120]	; (8003bd8 <_free_r+0x94>)
 8003b5e:	6813      	ldr	r3, [r2, #0]
 8003b60:	4610      	mov	r0, r2
 8003b62:	b933      	cbnz	r3, 8003b72 <_free_r+0x2e>
 8003b64:	6063      	str	r3, [r4, #4]
 8003b66:	6014      	str	r4, [r2, #0]
 8003b68:	4628      	mov	r0, r5
 8003b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b6e:	f000 b8cb 	b.w	8003d08 <__malloc_unlock>
 8003b72:	42a3      	cmp	r3, r4
 8003b74:	d90a      	bls.n	8003b8c <_free_r+0x48>
 8003b76:	6821      	ldr	r1, [r4, #0]
 8003b78:	1862      	adds	r2, r4, r1
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	bf01      	itttt	eq
 8003b7e:	681a      	ldreq	r2, [r3, #0]
 8003b80:	685b      	ldreq	r3, [r3, #4]
 8003b82:	1852      	addeq	r2, r2, r1
 8003b84:	6022      	streq	r2, [r4, #0]
 8003b86:	6063      	str	r3, [r4, #4]
 8003b88:	6004      	str	r4, [r0, #0]
 8003b8a:	e7ed      	b.n	8003b68 <_free_r+0x24>
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	b10b      	cbz	r3, 8003b96 <_free_r+0x52>
 8003b92:	42a3      	cmp	r3, r4
 8003b94:	d9fa      	bls.n	8003b8c <_free_r+0x48>
 8003b96:	6811      	ldr	r1, [r2, #0]
 8003b98:	1850      	adds	r0, r2, r1
 8003b9a:	42a0      	cmp	r0, r4
 8003b9c:	d10b      	bne.n	8003bb6 <_free_r+0x72>
 8003b9e:	6820      	ldr	r0, [r4, #0]
 8003ba0:	4401      	add	r1, r0
 8003ba2:	1850      	adds	r0, r2, r1
 8003ba4:	4283      	cmp	r3, r0
 8003ba6:	6011      	str	r1, [r2, #0]
 8003ba8:	d1de      	bne.n	8003b68 <_free_r+0x24>
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4401      	add	r1, r0
 8003bb0:	6011      	str	r1, [r2, #0]
 8003bb2:	6053      	str	r3, [r2, #4]
 8003bb4:	e7d8      	b.n	8003b68 <_free_r+0x24>
 8003bb6:	d902      	bls.n	8003bbe <_free_r+0x7a>
 8003bb8:	230c      	movs	r3, #12
 8003bba:	602b      	str	r3, [r5, #0]
 8003bbc:	e7d4      	b.n	8003b68 <_free_r+0x24>
 8003bbe:	6820      	ldr	r0, [r4, #0]
 8003bc0:	1821      	adds	r1, r4, r0
 8003bc2:	428b      	cmp	r3, r1
 8003bc4:	bf01      	itttt	eq
 8003bc6:	6819      	ldreq	r1, [r3, #0]
 8003bc8:	685b      	ldreq	r3, [r3, #4]
 8003bca:	1809      	addeq	r1, r1, r0
 8003bcc:	6021      	streq	r1, [r4, #0]
 8003bce:	6063      	str	r3, [r4, #4]
 8003bd0:	6054      	str	r4, [r2, #4]
 8003bd2:	e7c9      	b.n	8003b68 <_free_r+0x24>
 8003bd4:	bd38      	pop	{r3, r4, r5, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200004d0 	.word	0x200004d0

08003bdc <_malloc_r>:
 8003bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bde:	1ccd      	adds	r5, r1, #3
 8003be0:	f025 0503 	bic.w	r5, r5, #3
 8003be4:	3508      	adds	r5, #8
 8003be6:	2d0c      	cmp	r5, #12
 8003be8:	bf38      	it	cc
 8003bea:	250c      	movcc	r5, #12
 8003bec:	2d00      	cmp	r5, #0
 8003bee:	4606      	mov	r6, r0
 8003bf0:	db01      	blt.n	8003bf6 <_malloc_r+0x1a>
 8003bf2:	42a9      	cmp	r1, r5
 8003bf4:	d903      	bls.n	8003bfe <_malloc_r+0x22>
 8003bf6:	230c      	movs	r3, #12
 8003bf8:	6033      	str	r3, [r6, #0]
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bfe:	f000 f87d 	bl	8003cfc <__malloc_lock>
 8003c02:	4921      	ldr	r1, [pc, #132]	; (8003c88 <_malloc_r+0xac>)
 8003c04:	680a      	ldr	r2, [r1, #0]
 8003c06:	4614      	mov	r4, r2
 8003c08:	b99c      	cbnz	r4, 8003c32 <_malloc_r+0x56>
 8003c0a:	4f20      	ldr	r7, [pc, #128]	; (8003c8c <_malloc_r+0xb0>)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	b923      	cbnz	r3, 8003c1a <_malloc_r+0x3e>
 8003c10:	4621      	mov	r1, r4
 8003c12:	4630      	mov	r0, r6
 8003c14:	f000 f862 	bl	8003cdc <_sbrk_r>
 8003c18:	6038      	str	r0, [r7, #0]
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	f000 f85d 	bl	8003cdc <_sbrk_r>
 8003c22:	1c43      	adds	r3, r0, #1
 8003c24:	d123      	bne.n	8003c6e <_malloc_r+0x92>
 8003c26:	230c      	movs	r3, #12
 8003c28:	4630      	mov	r0, r6
 8003c2a:	6033      	str	r3, [r6, #0]
 8003c2c:	f000 f86c 	bl	8003d08 <__malloc_unlock>
 8003c30:	e7e3      	b.n	8003bfa <_malloc_r+0x1e>
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	1b5b      	subs	r3, r3, r5
 8003c36:	d417      	bmi.n	8003c68 <_malloc_r+0x8c>
 8003c38:	2b0b      	cmp	r3, #11
 8003c3a:	d903      	bls.n	8003c44 <_malloc_r+0x68>
 8003c3c:	6023      	str	r3, [r4, #0]
 8003c3e:	441c      	add	r4, r3
 8003c40:	6025      	str	r5, [r4, #0]
 8003c42:	e004      	b.n	8003c4e <_malloc_r+0x72>
 8003c44:	6863      	ldr	r3, [r4, #4]
 8003c46:	42a2      	cmp	r2, r4
 8003c48:	bf0c      	ite	eq
 8003c4a:	600b      	streq	r3, [r1, #0]
 8003c4c:	6053      	strne	r3, [r2, #4]
 8003c4e:	4630      	mov	r0, r6
 8003c50:	f000 f85a 	bl	8003d08 <__malloc_unlock>
 8003c54:	f104 000b 	add.w	r0, r4, #11
 8003c58:	1d23      	adds	r3, r4, #4
 8003c5a:	f020 0007 	bic.w	r0, r0, #7
 8003c5e:	1ac2      	subs	r2, r0, r3
 8003c60:	d0cc      	beq.n	8003bfc <_malloc_r+0x20>
 8003c62:	1a1b      	subs	r3, r3, r0
 8003c64:	50a3      	str	r3, [r4, r2]
 8003c66:	e7c9      	b.n	8003bfc <_malloc_r+0x20>
 8003c68:	4622      	mov	r2, r4
 8003c6a:	6864      	ldr	r4, [r4, #4]
 8003c6c:	e7cc      	b.n	8003c08 <_malloc_r+0x2c>
 8003c6e:	1cc4      	adds	r4, r0, #3
 8003c70:	f024 0403 	bic.w	r4, r4, #3
 8003c74:	42a0      	cmp	r0, r4
 8003c76:	d0e3      	beq.n	8003c40 <_malloc_r+0x64>
 8003c78:	1a21      	subs	r1, r4, r0
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	f000 f82e 	bl	8003cdc <_sbrk_r>
 8003c80:	3001      	adds	r0, #1
 8003c82:	d1dd      	bne.n	8003c40 <_malloc_r+0x64>
 8003c84:	e7cf      	b.n	8003c26 <_malloc_r+0x4a>
 8003c86:	bf00      	nop
 8003c88:	200004d0 	.word	0x200004d0
 8003c8c:	200004d4 	.word	0x200004d4

08003c90 <_realloc_r>:
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	4607      	mov	r7, r0
 8003c94:	4614      	mov	r4, r2
 8003c96:	460e      	mov	r6, r1
 8003c98:	b921      	cbnz	r1, 8003ca4 <_realloc_r+0x14>
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003ca0:	f7ff bf9c 	b.w	8003bdc <_malloc_r>
 8003ca4:	b922      	cbnz	r2, 8003cb0 <_realloc_r+0x20>
 8003ca6:	f7ff ff4d 	bl	8003b44 <_free_r>
 8003caa:	4625      	mov	r5, r4
 8003cac:	4628      	mov	r0, r5
 8003cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cb0:	f000 f830 	bl	8003d14 <_malloc_usable_size_r>
 8003cb4:	42a0      	cmp	r0, r4
 8003cb6:	d20f      	bcs.n	8003cd8 <_realloc_r+0x48>
 8003cb8:	4621      	mov	r1, r4
 8003cba:	4638      	mov	r0, r7
 8003cbc:	f7ff ff8e 	bl	8003bdc <_malloc_r>
 8003cc0:	4605      	mov	r5, r0
 8003cc2:	2800      	cmp	r0, #0
 8003cc4:	d0f2      	beq.n	8003cac <_realloc_r+0x1c>
 8003cc6:	4631      	mov	r1, r6
 8003cc8:	4622      	mov	r2, r4
 8003cca:	f7ff ff13 	bl	8003af4 <memcpy>
 8003cce:	4631      	mov	r1, r6
 8003cd0:	4638      	mov	r0, r7
 8003cd2:	f7ff ff37 	bl	8003b44 <_free_r>
 8003cd6:	e7e9      	b.n	8003cac <_realloc_r+0x1c>
 8003cd8:	4635      	mov	r5, r6
 8003cda:	e7e7      	b.n	8003cac <_realloc_r+0x1c>

08003cdc <_sbrk_r>:
 8003cdc:	b538      	push	{r3, r4, r5, lr}
 8003cde:	2300      	movs	r3, #0
 8003ce0:	4d05      	ldr	r5, [pc, #20]	; (8003cf8 <_sbrk_r+0x1c>)
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	4608      	mov	r0, r1
 8003ce6:	602b      	str	r3, [r5, #0]
 8003ce8:	f7fd f9fa 	bl	80010e0 <_sbrk>
 8003cec:	1c43      	adds	r3, r0, #1
 8003cee:	d102      	bne.n	8003cf6 <_sbrk_r+0x1a>
 8003cf0:	682b      	ldr	r3, [r5, #0]
 8003cf2:	b103      	cbz	r3, 8003cf6 <_sbrk_r+0x1a>
 8003cf4:	6023      	str	r3, [r4, #0]
 8003cf6:	bd38      	pop	{r3, r4, r5, pc}
 8003cf8:	20000588 	.word	0x20000588

08003cfc <__malloc_lock>:
 8003cfc:	4801      	ldr	r0, [pc, #4]	; (8003d04 <__malloc_lock+0x8>)
 8003cfe:	f000 b811 	b.w	8003d24 <__retarget_lock_acquire_recursive>
 8003d02:	bf00      	nop
 8003d04:	20000590 	.word	0x20000590

08003d08 <__malloc_unlock>:
 8003d08:	4801      	ldr	r0, [pc, #4]	; (8003d10 <__malloc_unlock+0x8>)
 8003d0a:	f000 b80c 	b.w	8003d26 <__retarget_lock_release_recursive>
 8003d0e:	bf00      	nop
 8003d10:	20000590 	.word	0x20000590

08003d14 <_malloc_usable_size_r>:
 8003d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d18:	1f18      	subs	r0, r3, #4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	bfbc      	itt	lt
 8003d1e:	580b      	ldrlt	r3, [r1, r0]
 8003d20:	18c0      	addlt	r0, r0, r3
 8003d22:	4770      	bx	lr

08003d24 <__retarget_lock_acquire_recursive>:
 8003d24:	4770      	bx	lr

08003d26 <__retarget_lock_release_recursive>:
 8003d26:	4770      	bx	lr

08003d28 <_init>:
 8003d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2a:	bf00      	nop
 8003d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d2e:	bc08      	pop	{r3}
 8003d30:	469e      	mov	lr, r3
 8003d32:	4770      	bx	lr

08003d34 <_fini>:
 8003d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d36:	bf00      	nop
 8003d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3a:	bc08      	pop	{r3}
 8003d3c:	469e      	mov	lr, r3
 8003d3e:	4770      	bx	lr
